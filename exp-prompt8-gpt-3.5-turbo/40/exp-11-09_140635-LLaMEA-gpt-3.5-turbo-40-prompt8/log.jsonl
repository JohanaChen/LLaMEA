{"id": "8c4750b0-5bd2-49bd-941f-3430b8f55e22", "solution": "import numpy as np\n\nclass SwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_position - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    \n        return global_best_position", "name": "SwarmIntelligenceOptimizer", "description": "A novel metaheuristic algorithm inspired by the concept of \"swarming intelligence\" where particles interact and learn from each other's experiences to collectively optimize the black box function within a limited budget of function evaluations.", "configspace": "", "generation": 0, "fitness": 0.09435675116734431, "feedback": "The algorithm SwarmIntelligenceOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.20.", "error": "", "parent_id": null, "metadata": {"aucs": [0.10542612384463079, 0.08107683538889487, 0.11703145316880148, 0.1299551056761502, 0.1141014214506737, 0.16241137629955338, 0.11653854605271008, 0.12259787168957215, 0.12364693784596092, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01927598171310252, 9.999999999998899e-05, 0.02481631715675392, 0.022172701034071318, 0.021422058125935783, 0.0232277156038605, 0.02012189939790765, 0.023827063670876503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.062168476863951216, 0.004724038379940287, 0.01345957083226168, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9918069541014397, 0.9938078777343053, 0.9922030210782505, 0.9897344239595571, 0.9858922870571534, 0.9851788734709428, 0.9910110696330204, 0.9904322280832815, 0.9937012542004269, 0.02692600470508566, 0.03191746618875002, 0.03853424462602961, 0.015902102291584952, 0.012112068553935207, 0.01155189158546055, 0.06180542736067929, 0.06097917577370504, 0.018635178398156316, 0.11275271527715325, 0.11698223264913066, 0.0663345674065704, 0.0628210051309005, 0.03122252864517161, 0.09472464639012546, 0.05617257838627432, 0.07191033943182579, 0.020745592760692322, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009864161522911474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01320502727526418, 0.025110939293960133, 0.05516212322091374, 0.047487322493618755, 9.999999999998899e-05, 0.010204270770496238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12704267942344227, 0.12779857906619108, 0.15334336133374604, 0.1611556503715823, 0.13743583466396525, 0.18039519870213627, 0.13724008309898905, 0.11495087539578586, 0.17895485602739336, 0.014483821511731554, 0.01721207663924529, 0.0022658335000848018, 0.02164511194240981, 0.00046499489556139917, 0.04234829636899795, 0.010144196560367136, 0.007101583055711291, 0.04764089247564118, 0.12140343582003521, 0.09873531074620256, 0.11766400823807466, 0.14327632430139892, 0.18917328404959977, 0.08696908664935088, 0.11890390790027983, 0.07200070859751961, 0.0903775656614092, 0.10592140074538436, 0.12931938897693185, 0.12244401464691623, 0.1317771317603985, 0.12344511289387083, 0.12689255366879715, 0.11853061449343294, 0.18605619911080262, 0.08997018279398694, 0.03727509664136619, 0.05628952791064201, 0.04513530286079914, 0.061533022573355245, 0.06640847557121166, 0.07265497270379495, 0.09171487510490384, 0.11638515315127096, 0.04717984574654288, 0.1205665730772949, 0.07859124576496501, 0.14152854577838592, 0.1170471290193229, 0.12533207368941934, 0.12356541270920773, 0.13046887584520295, 0.09511104866255937, 0.13698836750767318, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13142277779154699, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12071773775358219, 9.999999999998899e-05, 0.1403622149614564, 0.09528446985827888, 0.10312446004620501, 0.09804211574521904, 0.16702769245749738, 0.08880228776319432, 0.08207081505383862, 0.1482695503748348, 0.09629064163685874, 0.06402382635834458, 0.10915175205428873, 0.0850698534933918, 0.08695731937602735, 0.10232168492673266, 0.09815597517150543, 0.11754410304189677, 0.07545886441854255, 0.07972618513197105, 0.203470828871387, 0.15065061575884542, 0.17458709522780247, 0.17012809602874168, 0.1276769520638572, 0.16194062130692966, 0.16914226428135826, 0.13690388449284474, 0.16646766617715059, 0.014031310631724359, 0.03223284370244106, 0.03178005082052149, 0.049409171047381406, 0.02653167351609953, 0.020174223318655593, 0.014136651315245774, 0.0015804178654634793, 0.02009676424703344]}, "mutation_prompt": null}
{"id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "DynamicSwarmIntelligenceOptimizer", "description": "Introducing a dynamic learning rate adaptation mechanism to adjust cognitive and social weights based on individual particle performance for faster convergence.", "configspace": "", "generation": 1, "fitness": 0.1199004673275126, "feedback": "The algorithm DynamicSwarmIntelligenceOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.11.", "error": "", "parent_id": "8c4750b0-5bd2-49bd-941f-3430b8f55e22", "metadata": {"aucs": [0.28771503602817594, 0.22122794491822828, 0.2643821953205199, 0.2312239982001998, 0.3509224501702777, 0.1987501720232674, 0.24984561581848574, 0.20288533917135743, 0.2701938072809028, 0.015909073905311044, 0.018968366305375794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09555489665066474, 0.06515986160683773, 0.09373972427674127, 0.04651904762741599, 0.07713894826983159, 0.08240877057902729, 0.055433807944590296, 0.07518291443019154, 0.09801380943031324, 0.030614869699730263, 0.04790229715786887, 0.055156057088729726, 0.07394358759887987, 0.05866291397532408, 0.038361733391772734, 0.052537233640777004, 0.06403616672426848, 0.05047018011976301, 0.957455633403349, 0.12024928786801814, 0.9697392244119365, 0.1379066145721043, 0.1079637881086093, 0.15076777237774563, 0.13056375958367195, 0.18761337589379978, 0.10535948888272018, 0.09125773816571237, 0.06743532961676368, 0.09337094801804358, 0.07680401226745781, 0.09927476206825903, 0.14353024515423918, 0.09183608414398492, 0.110140244877859, 9.999999999998899e-05, 0.27622735406296384, 0.1873691649785324, 0.13478528185797445, 0.17631744307345742, 0.22287035374806696, 0.15332736659839907, 0.08908739387233455, 0.21000524546777766, 0.14257020068586512, 0.10190532145526032, 0.0008295386706069774, 0.018141456075090545, 0.09925431937622742, 9.999999999998899e-05, 0.04156170278479787, 0.09854683088402183, 0.07992548981634484, 0.12435782551363261, 0.08530755027789305, 0.07814530612964876, 0.0395546699919721, 0.07314503678767037, 0.026734981781305622, 0.11385233598265276, 0.02668328261905284, 0.03505659049311416, 0.10382243122414425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03460274135032104, 9.999999999998899e-05, 9.999999999998899e-05, 0.06560238741132562, 0.040697693860823336, 0.12517710415910044, 0.027452542067932906, 0.05185586143496512, 0.03789803544932979, 0.09412149730525565, 0.0695821600978399, 0.048388725740604266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026945818366160945, 9.999999999998899e-05, 0.0034989786845671667, 0.012137315189182707, 9.999999999998899e-05, 0.00250730070176286, 0.008915172414253214, 9.999999999998899e-05, 0.04546242162063552, 0.27522368784847895, 0.19851579252556306, 0.26524394495265224, 0.27352312659271305, 0.19121222202534116, 0.1968958695458759, 0.20400092006104054, 0.24071857827739773, 0.22202279466052643, 0.04717814731558778, 0.06335479364123697, 0.050790462973075434, 0.055270447795541466, 0.056197027846440095, 0.06751957232192396, 0.06835229240226692, 0.07067884695658999, 0.07159193710229395, 0.13254128342040583, 0.13796709938586116, 0.14946540248334927, 0.1311353380314526, 0.11691910738100375, 0.12398095181481661, 0.10758563996935266, 0.12230996958278506, 0.13022104501133636, 0.15505444243411526, 0.1844674820388762, 0.14634619949582506, 0.16970090455952502, 0.23728416046608458, 0.21438803654644145, 0.225812253811984, 0.18592202749540443, 0.14252794833821458, 0.15287540201560168, 0.17392097369897386, 0.10446451077183538, 0.1538545428841549, 0.14179890926348038, 0.13931843897228102, 0.12721702159876225, 0.13139261236268995, 0.0960220644867491, 0.19932974924057334, 0.20381392401834952, 0.19030297167053278, 0.21039989419724292, 0.17578685439673813, 0.22184775245042643, 0.19075158096125866, 0.23480576478648985, 0.18019015507889757, 0.17099835372404637, 0.16354994353027918, 0.16993840490793066, 0.17621700698903364, 0.15963642619685547, 0.16617811411805983, 0.16934499390191504, 0.1621061651983342, 0.1623653896409436, 0.34818956861317185, 0.14599314505732364, 0.14246433591056995, 0.17001604119057612, 0.170945061955468, 0.27875364210917386, 0.09696132099478405, 0.16945302729113776, 0.11049106543220533, 0.2801196982683305, 0.18613073983830353, 0.24608080142192135, 0.1380806735800475, 0.1895750491362822, 0.17123894522039718, 0.10228325481475808, 0.19824854954933224, 0.08240186743380296, 0.1618574648940052, 0.1718593124898392, 0.16875604672524147, 0.17533247132120755, 0.1600642835953635, 0.16561636674616587, 0.15958282960047765, 0.1768201099770631, 0.15949049095963508, 0.09927405742085271, 0.06032366336437678, 0.0692180724511372, 0.08592901798883035, 0.06612373472494515, 0.04378462263668259, 0.0827488383827989, 0.07198010147110612, 0.08070563316961965]}, "mutation_prompt": null}
{"id": "3799a0b6-391f-48e9-b90f-a822f5e81652", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "DynamicSwarmIntelligenceOptimizer", "description": "Introducing a dynamic learning rate adaptation mechanism to adjust cognitive and social weights based on individual particle performance for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "metadata": {"aucs": [0.28771503602817594, 0.22122794491822828, 0.2643821953205199, 0.2312239982001998, 0.3509224501702777, 0.1987501720232674, 0.24984561581848574, 0.20288533917135743, 0.2701938072809028, 0.015909073905311044, 0.018968366305375794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09555489665066474, 0.06515986160683773, 0.09373972427674127, 0.04651904762741599, 0.07713894826983159, 0.08240877057902729, 0.055433807944590296, 0.07518291443019154, 0.09801380943031324, 0.030614869699730263, 0.04790229715786887, 0.055156057088729726, 0.07394358759887987, 0.05866291397532408, 0.038361733391772734, 0.052537233640777004, 0.06403616672426848, 0.05047018011976301, 0.957455633403349, 0.12024928786801814, 0.9697392244119365, 0.1379066145721043, 0.1079637881086093, 0.15076777237774563, 0.13056375958367195, 0.18761337589379978, 0.10535948888272018, 0.09125773816571237, 0.06743532961676368, 0.09337094801804358, 0.07680401226745781, 0.09927476206825903, 0.14353024515423918, 0.09183608414398492, 0.110140244877859, 9.999999999998899e-05, 0.27622735406296384, 0.1873691649785324, 0.13478528185797445, 0.17631744307345742, 0.22287035374806696, 0.15332736659839907, 0.08908739387233455, 0.21000524546777766, 0.14257020068586512, 0.10190532145526032, 0.0008295386706069774, 0.018141456075090545, 0.09925431937622742, 9.999999999998899e-05, 0.04156170278479787, 0.09854683088402183, 0.07992548981634484, 0.12435782551363261, 0.08530755027789305, 0.07814530612964876, 0.0395546699919721, 0.07314503678767037, 0.026734981781305622, 0.11385233598265276, 0.02668328261905284, 0.03505659049311416, 0.10382243122414425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03460274135032104, 9.999999999998899e-05, 9.999999999998899e-05, 0.06560238741132562, 0.040697693860823336, 0.12517710415910044, 0.027452542067932906, 0.05185586143496512, 0.03789803544932979, 0.09412149730525565, 0.0695821600978399, 0.048388725740604266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026945818366160945, 9.999999999998899e-05, 0.0034989786845671667, 0.012137315189182707, 9.999999999998899e-05, 0.00250730070176286, 0.008915172414253214, 9.999999999998899e-05, 0.04546242162063552, 0.27522368784847895, 0.19851579252556306, 0.26524394495265224, 0.27352312659271305, 0.19121222202534116, 0.1968958695458759, 0.20400092006104054, 0.24071857827739773, 0.22202279466052643, 0.04717814731558778, 0.06335479364123697, 0.050790462973075434, 0.055270447795541466, 0.056197027846440095, 0.06751957232192396, 0.06835229240226692, 0.07067884695658999, 0.07159193710229395, 0.13254128342040583, 0.13796709938586116, 0.14946540248334927, 0.1311353380314526, 0.11691910738100375, 0.12398095181481661, 0.10758563996935266, 0.12230996958278506, 0.13022104501133636, 0.15505444243411526, 0.1844674820388762, 0.14634619949582506, 0.16970090455952502, 0.23728416046608458, 0.21438803654644145, 0.225812253811984, 0.18592202749540443, 0.14252794833821458, 0.15287540201560168, 0.17392097369897386, 0.10446451077183538, 0.1538545428841549, 0.14179890926348038, 0.13931843897228102, 0.12721702159876225, 0.13139261236268995, 0.0960220644867491, 0.19932974924057334, 0.20381392401834952, 0.19030297167053278, 0.21039989419724292, 0.17578685439673813, 0.22184775245042643, 0.19075158096125866, 0.23480576478648985, 0.18019015507889757, 0.17099835372404637, 0.16354994353027918, 0.16993840490793066, 0.17621700698903364, 0.15963642619685547, 0.16617811411805983, 0.16934499390191504, 0.1621061651983342, 0.1623653896409436, 0.34818956861317185, 0.14599314505732364, 0.14246433591056995, 0.17001604119057612, 0.170945061955468, 0.27875364210917386, 0.09696132099478405, 0.16945302729113776, 0.11049106543220533, 0.2801196982683305, 0.18613073983830353, 0.24608080142192135, 0.1380806735800475, 0.1895750491362822, 0.17123894522039718, 0.10228325481475808, 0.19824854954933224, 0.08240186743380296, 0.1618574648940052, 0.1718593124898392, 0.16875604672524147, 0.17533247132120755, 0.1600642835953635, 0.16561636674616587, 0.15958282960047765, 0.1768201099770631, 0.15949049095963508, 0.09927405742085271, 0.06032366336437678, 0.0692180724511372, 0.08592901798883035, 0.06612373472494515, 0.04378462263668259, 0.0827488383827989, 0.07198010147110612, 0.08070563316961965]}, "mutation_prompt": null}
{"id": "ce24fd17-b527-4e3d-8650-c590467716e3", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "DynamicSwarmIntelligenceOptimizer", "description": "Introducing a dynamic learning rate adaptation mechanism to adjust cognitive and social weights based on individual particle performance for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "metadata": {"aucs": [0.28771503602817594, 0.22122794491822828, 0.2643821953205199, 0.2312239982001998, 0.3509224501702777, 0.1987501720232674, 0.24984561581848574, 0.20288533917135743, 0.2701938072809028, 0.015909073905311044, 0.018968366305375794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09555489665066474, 0.06515986160683773, 0.09373972427674127, 0.04651904762741599, 0.07713894826983159, 0.08240877057902729, 0.055433807944590296, 0.07518291443019154, 0.09801380943031324, 0.030614869699730263, 0.04790229715786887, 0.055156057088729726, 0.07394358759887987, 0.05866291397532408, 0.038361733391772734, 0.052537233640777004, 0.06403616672426848, 0.05047018011976301, 0.957455633403349, 0.12024928786801814, 0.9697392244119365, 0.1379066145721043, 0.1079637881086093, 0.15076777237774563, 0.13056375958367195, 0.18761337589379978, 0.10535948888272018, 0.09125773816571237, 0.06743532961676368, 0.09337094801804358, 0.07680401226745781, 0.09927476206825903, 0.14353024515423918, 0.09183608414398492, 0.110140244877859, 9.999999999998899e-05, 0.27622735406296384, 0.1873691649785324, 0.13478528185797445, 0.17631744307345742, 0.22287035374806696, 0.15332736659839907, 0.08908739387233455, 0.21000524546777766, 0.14257020068586512, 0.10190532145526032, 0.0008295386706069774, 0.018141456075090545, 0.09925431937622742, 9.999999999998899e-05, 0.04156170278479787, 0.09854683088402183, 0.07992548981634484, 0.12435782551363261, 0.08530755027789305, 0.07814530612964876, 0.0395546699919721, 0.07314503678767037, 0.026734981781305622, 0.11385233598265276, 0.02668328261905284, 0.03505659049311416, 0.10382243122414425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03460274135032104, 9.999999999998899e-05, 9.999999999998899e-05, 0.06560238741132562, 0.040697693860823336, 0.12517710415910044, 0.027452542067932906, 0.05185586143496512, 0.03789803544932979, 0.09412149730525565, 0.0695821600978399, 0.048388725740604266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026945818366160945, 9.999999999998899e-05, 0.0034989786845671667, 0.012137315189182707, 9.999999999998899e-05, 0.00250730070176286, 0.008915172414253214, 9.999999999998899e-05, 0.04546242162063552, 0.27522368784847895, 0.19851579252556306, 0.26524394495265224, 0.27352312659271305, 0.19121222202534116, 0.1968958695458759, 0.20400092006104054, 0.24071857827739773, 0.22202279466052643, 0.04717814731558778, 0.06335479364123697, 0.050790462973075434, 0.055270447795541466, 0.056197027846440095, 0.06751957232192396, 0.06835229240226692, 0.07067884695658999, 0.07159193710229395, 0.13254128342040583, 0.13796709938586116, 0.14946540248334927, 0.1311353380314526, 0.11691910738100375, 0.12398095181481661, 0.10758563996935266, 0.12230996958278506, 0.13022104501133636, 0.15505444243411526, 0.1844674820388762, 0.14634619949582506, 0.16970090455952502, 0.23728416046608458, 0.21438803654644145, 0.225812253811984, 0.18592202749540443, 0.14252794833821458, 0.15287540201560168, 0.17392097369897386, 0.10446451077183538, 0.1538545428841549, 0.14179890926348038, 0.13931843897228102, 0.12721702159876225, 0.13139261236268995, 0.0960220644867491, 0.19932974924057334, 0.20381392401834952, 0.19030297167053278, 0.21039989419724292, 0.17578685439673813, 0.22184775245042643, 0.19075158096125866, 0.23480576478648985, 0.18019015507889757, 0.17099835372404637, 0.16354994353027918, 0.16993840490793066, 0.17621700698903364, 0.15963642619685547, 0.16617811411805983, 0.16934499390191504, 0.1621061651983342, 0.1623653896409436, 0.34818956861317185, 0.14599314505732364, 0.14246433591056995, 0.17001604119057612, 0.170945061955468, 0.27875364210917386, 0.09696132099478405, 0.16945302729113776, 0.11049106543220533, 0.2801196982683305, 0.18613073983830353, 0.24608080142192135, 0.1380806735800475, 0.1895750491362822, 0.17123894522039718, 0.10228325481475808, 0.19824854954933224, 0.08240186743380296, 0.1618574648940052, 0.1718593124898392, 0.16875604672524147, 0.17533247132120755, 0.1600642835953635, 0.16561636674616587, 0.15958282960047765, 0.1768201099770631, 0.15949049095963508, 0.09927405742085271, 0.06032366336437678, 0.0692180724511372, 0.08592901798883035, 0.06612373472494515, 0.04378462263668259, 0.0827488383827989, 0.07198010147110612, 0.08070563316961965]}, "mutation_prompt": null}
{"id": "eb2611b7-e77f-46df-9673-171314d492c7", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "DynamicSwarmIntelligenceOptimizer", "description": "Introducing a dynamic learning rate adaptation mechanism to adjust cognitive and social weights based on individual particle performance for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "metadata": {"aucs": [0.28771503602817594, 0.22122794491822828, 0.2643821953205199, 0.2312239982001998, 0.3509224501702777, 0.1987501720232674, 0.24984561581848574, 0.20288533917135743, 0.2701938072809028, 0.015909073905311044, 0.018968366305375794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09555489665066474, 0.06515986160683773, 0.09373972427674127, 0.04651904762741599, 0.07713894826983159, 0.08240877057902729, 0.055433807944590296, 0.07518291443019154, 0.09801380943031324, 0.030614869699730263, 0.04790229715786887, 0.055156057088729726, 0.07394358759887987, 0.05866291397532408, 0.038361733391772734, 0.052537233640777004, 0.06403616672426848, 0.05047018011976301, 0.957455633403349, 0.12024928786801814, 0.9697392244119365, 0.1379066145721043, 0.1079637881086093, 0.15076777237774563, 0.13056375958367195, 0.18761337589379978, 0.10535948888272018, 0.09125773816571237, 0.06743532961676368, 0.09337094801804358, 0.07680401226745781, 0.09927476206825903, 0.14353024515423918, 0.09183608414398492, 0.110140244877859, 9.999999999998899e-05, 0.27622735406296384, 0.1873691649785324, 0.13478528185797445, 0.17631744307345742, 0.22287035374806696, 0.15332736659839907, 0.08908739387233455, 0.21000524546777766, 0.14257020068586512, 0.10190532145526032, 0.0008295386706069774, 0.018141456075090545, 0.09925431937622742, 9.999999999998899e-05, 0.04156170278479787, 0.09854683088402183, 0.07992548981634484, 0.12435782551363261, 0.08530755027789305, 0.07814530612964876, 0.0395546699919721, 0.07314503678767037, 0.026734981781305622, 0.11385233598265276, 0.02668328261905284, 0.03505659049311416, 0.10382243122414425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03460274135032104, 9.999999999998899e-05, 9.999999999998899e-05, 0.06560238741132562, 0.040697693860823336, 0.12517710415910044, 0.027452542067932906, 0.05185586143496512, 0.03789803544932979, 0.09412149730525565, 0.0695821600978399, 0.048388725740604266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026945818366160945, 9.999999999998899e-05, 0.0034989786845671667, 0.012137315189182707, 9.999999999998899e-05, 0.00250730070176286, 0.008915172414253214, 9.999999999998899e-05, 0.04546242162063552, 0.27522368784847895, 0.19851579252556306, 0.26524394495265224, 0.27352312659271305, 0.19121222202534116, 0.1968958695458759, 0.20400092006104054, 0.24071857827739773, 0.22202279466052643, 0.04717814731558778, 0.06335479364123697, 0.050790462973075434, 0.055270447795541466, 0.056197027846440095, 0.06751957232192396, 0.06835229240226692, 0.07067884695658999, 0.07159193710229395, 0.13254128342040583, 0.13796709938586116, 0.14946540248334927, 0.1311353380314526, 0.11691910738100375, 0.12398095181481661, 0.10758563996935266, 0.12230996958278506, 0.13022104501133636, 0.15505444243411526, 0.1844674820388762, 0.14634619949582506, 0.16970090455952502, 0.23728416046608458, 0.21438803654644145, 0.225812253811984, 0.18592202749540443, 0.14252794833821458, 0.15287540201560168, 0.17392097369897386, 0.10446451077183538, 0.1538545428841549, 0.14179890926348038, 0.13931843897228102, 0.12721702159876225, 0.13139261236268995, 0.0960220644867491, 0.19932974924057334, 0.20381392401834952, 0.19030297167053278, 0.21039989419724292, 0.17578685439673813, 0.22184775245042643, 0.19075158096125866, 0.23480576478648985, 0.18019015507889757, 0.17099835372404637, 0.16354994353027918, 0.16993840490793066, 0.17621700698903364, 0.15963642619685547, 0.16617811411805983, 0.16934499390191504, 0.1621061651983342, 0.1623653896409436, 0.34818956861317185, 0.14599314505732364, 0.14246433591056995, 0.17001604119057612, 0.170945061955468, 0.27875364210917386, 0.09696132099478405, 0.16945302729113776, 0.11049106543220533, 0.2801196982683305, 0.18613073983830353, 0.24608080142192135, 0.1380806735800475, 0.1895750491362822, 0.17123894522039718, 0.10228325481475808, 0.19824854954933224, 0.08240186743380296, 0.1618574648940052, 0.1718593124898392, 0.16875604672524147, 0.17533247132120755, 0.1600642835953635, 0.16561636674616587, 0.15958282960047765, 0.1768201099770631, 0.15949049095963508, 0.09927405742085271, 0.06032366336437678, 0.0692180724511372, 0.08592901798883035, 0.06612373472494515, 0.04378462263668259, 0.0827488383827989, 0.07198010147110612, 0.08070563316961965]}, "mutation_prompt": null}
{"id": "cc4584ba-c118-4887-b391-b3bb62e37ca6", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "DynamicSwarmIntelligenceOptimizer", "description": "Introducing a dynamic learning rate adaptation mechanism to adjust cognitive and social weights based on individual particle performance for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "metadata": {"aucs": [0.28771503602817594, 0.22122794491822828, 0.2643821953205199, 0.2312239982001998, 0.3509224501702777, 0.1987501720232674, 0.24984561581848574, 0.20288533917135743, 0.2701938072809028, 0.015909073905311044, 0.018968366305375794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09555489665066474, 0.06515986160683773, 0.09373972427674127, 0.04651904762741599, 0.07713894826983159, 0.08240877057902729, 0.055433807944590296, 0.07518291443019154, 0.09801380943031324, 0.030614869699730263, 0.04790229715786887, 0.055156057088729726, 0.07394358759887987, 0.05866291397532408, 0.038361733391772734, 0.052537233640777004, 0.06403616672426848, 0.05047018011976301, 0.957455633403349, 0.12024928786801814, 0.9697392244119365, 0.1379066145721043, 0.1079637881086093, 0.15076777237774563, 0.13056375958367195, 0.18761337589379978, 0.10535948888272018, 0.09125773816571237, 0.06743532961676368, 0.09337094801804358, 0.07680401226745781, 0.09927476206825903, 0.14353024515423918, 0.09183608414398492, 0.110140244877859, 9.999999999998899e-05, 0.27622735406296384, 0.1873691649785324, 0.13478528185797445, 0.17631744307345742, 0.22287035374806696, 0.15332736659839907, 0.08908739387233455, 0.21000524546777766, 0.14257020068586512, 0.10190532145526032, 0.0008295386706069774, 0.018141456075090545, 0.09925431937622742, 9.999999999998899e-05, 0.04156170278479787, 0.09854683088402183, 0.07992548981634484, 0.12435782551363261, 0.08530755027789305, 0.07814530612964876, 0.0395546699919721, 0.07314503678767037, 0.026734981781305622, 0.11385233598265276, 0.02668328261905284, 0.03505659049311416, 0.10382243122414425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03460274135032104, 9.999999999998899e-05, 9.999999999998899e-05, 0.06560238741132562, 0.040697693860823336, 0.12517710415910044, 0.027452542067932906, 0.05185586143496512, 0.03789803544932979, 0.09412149730525565, 0.0695821600978399, 0.048388725740604266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026945818366160945, 9.999999999998899e-05, 0.0034989786845671667, 0.012137315189182707, 9.999999999998899e-05, 0.00250730070176286, 0.008915172414253214, 9.999999999998899e-05, 0.04546242162063552, 0.27522368784847895, 0.19851579252556306, 0.26524394495265224, 0.27352312659271305, 0.19121222202534116, 0.1968958695458759, 0.20400092006104054, 0.24071857827739773, 0.22202279466052643, 0.04717814731558778, 0.06335479364123697, 0.050790462973075434, 0.055270447795541466, 0.056197027846440095, 0.06751957232192396, 0.06835229240226692, 0.07067884695658999, 0.07159193710229395, 0.13254128342040583, 0.13796709938586116, 0.14946540248334927, 0.1311353380314526, 0.11691910738100375, 0.12398095181481661, 0.10758563996935266, 0.12230996958278506, 0.13022104501133636, 0.15505444243411526, 0.1844674820388762, 0.14634619949582506, 0.16970090455952502, 0.23728416046608458, 0.21438803654644145, 0.225812253811984, 0.18592202749540443, 0.14252794833821458, 0.15287540201560168, 0.17392097369897386, 0.10446451077183538, 0.1538545428841549, 0.14179890926348038, 0.13931843897228102, 0.12721702159876225, 0.13139261236268995, 0.0960220644867491, 0.19932974924057334, 0.20381392401834952, 0.19030297167053278, 0.21039989419724292, 0.17578685439673813, 0.22184775245042643, 0.19075158096125866, 0.23480576478648985, 0.18019015507889757, 0.17099835372404637, 0.16354994353027918, 0.16993840490793066, 0.17621700698903364, 0.15963642619685547, 0.16617811411805983, 0.16934499390191504, 0.1621061651983342, 0.1623653896409436, 0.34818956861317185, 0.14599314505732364, 0.14246433591056995, 0.17001604119057612, 0.170945061955468, 0.27875364210917386, 0.09696132099478405, 0.16945302729113776, 0.11049106543220533, 0.2801196982683305, 0.18613073983830353, 0.24608080142192135, 0.1380806735800475, 0.1895750491362822, 0.17123894522039718, 0.10228325481475808, 0.19824854954933224, 0.08240186743380296, 0.1618574648940052, 0.1718593124898392, 0.16875604672524147, 0.17533247132120755, 0.1600642835953635, 0.16561636674616587, 0.15958282960047765, 0.1768201099770631, 0.15949049095963508, 0.09927405742085271, 0.06032366336437678, 0.0692180724511372, 0.08592901798883035, 0.06612373472494515, 0.04378462263668259, 0.0827488383827989, 0.07198010147110612, 0.08070563316961965]}, "mutation_prompt": null}
{"id": "b151261d-2257-49e3-9cba-84bbe6954ce4", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "DynamicSwarmIntelligenceOptimizer", "description": "Introducing a dynamic learning rate adaptation mechanism to adjust cognitive and social weights based on individual particle performance for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "metadata": {"aucs": [0.28771503602817594, 0.22122794491822828, 0.2643821953205199, 0.2312239982001998, 0.3509224501702777, 0.1987501720232674, 0.24984561581848574, 0.20288533917135743, 0.2701938072809028, 0.015909073905311044, 0.018968366305375794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09555489665066474, 0.06515986160683773, 0.09373972427674127, 0.04651904762741599, 0.07713894826983159, 0.08240877057902729, 0.055433807944590296, 0.07518291443019154, 0.09801380943031324, 0.030614869699730263, 0.04790229715786887, 0.055156057088729726, 0.07394358759887987, 0.05866291397532408, 0.038361733391772734, 0.052537233640777004, 0.06403616672426848, 0.05047018011976301, 0.957455633403349, 0.12024928786801814, 0.9697392244119365, 0.1379066145721043, 0.1079637881086093, 0.15076777237774563, 0.13056375958367195, 0.18761337589379978, 0.10535948888272018, 0.09125773816571237, 0.06743532961676368, 0.09337094801804358, 0.07680401226745781, 0.09927476206825903, 0.14353024515423918, 0.09183608414398492, 0.110140244877859, 9.999999999998899e-05, 0.27622735406296384, 0.1873691649785324, 0.13478528185797445, 0.17631744307345742, 0.22287035374806696, 0.15332736659839907, 0.08908739387233455, 0.21000524546777766, 0.14257020068586512, 0.10190532145526032, 0.0008295386706069774, 0.018141456075090545, 0.09925431937622742, 9.999999999998899e-05, 0.04156170278479787, 0.09854683088402183, 0.07992548981634484, 0.12435782551363261, 0.08530755027789305, 0.07814530612964876, 0.0395546699919721, 0.07314503678767037, 0.026734981781305622, 0.11385233598265276, 0.02668328261905284, 0.03505659049311416, 0.10382243122414425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03460274135032104, 9.999999999998899e-05, 9.999999999998899e-05, 0.06560238741132562, 0.040697693860823336, 0.12517710415910044, 0.027452542067932906, 0.05185586143496512, 0.03789803544932979, 0.09412149730525565, 0.0695821600978399, 0.048388725740604266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026945818366160945, 9.999999999998899e-05, 0.0034989786845671667, 0.012137315189182707, 9.999999999998899e-05, 0.00250730070176286, 0.008915172414253214, 9.999999999998899e-05, 0.04546242162063552, 0.27522368784847895, 0.19851579252556306, 0.26524394495265224, 0.27352312659271305, 0.19121222202534116, 0.1968958695458759, 0.20400092006104054, 0.24071857827739773, 0.22202279466052643, 0.04717814731558778, 0.06335479364123697, 0.050790462973075434, 0.055270447795541466, 0.056197027846440095, 0.06751957232192396, 0.06835229240226692, 0.07067884695658999, 0.07159193710229395, 0.13254128342040583, 0.13796709938586116, 0.14946540248334927, 0.1311353380314526, 0.11691910738100375, 0.12398095181481661, 0.10758563996935266, 0.12230996958278506, 0.13022104501133636, 0.15505444243411526, 0.1844674820388762, 0.14634619949582506, 0.16970090455952502, 0.23728416046608458, 0.21438803654644145, 0.225812253811984, 0.18592202749540443, 0.14252794833821458, 0.15287540201560168, 0.17392097369897386, 0.10446451077183538, 0.1538545428841549, 0.14179890926348038, 0.13931843897228102, 0.12721702159876225, 0.13139261236268995, 0.0960220644867491, 0.19932974924057334, 0.20381392401834952, 0.19030297167053278, 0.21039989419724292, 0.17578685439673813, 0.22184775245042643, 0.19075158096125866, 0.23480576478648985, 0.18019015507889757, 0.17099835372404637, 0.16354994353027918, 0.16993840490793066, 0.17621700698903364, 0.15963642619685547, 0.16617811411805983, 0.16934499390191504, 0.1621061651983342, 0.1623653896409436, 0.34818956861317185, 0.14599314505732364, 0.14246433591056995, 0.17001604119057612, 0.170945061955468, 0.27875364210917386, 0.09696132099478405, 0.16945302729113776, 0.11049106543220533, 0.2801196982683305, 0.18613073983830353, 0.24608080142192135, 0.1380806735800475, 0.1895750491362822, 0.17123894522039718, 0.10228325481475808, 0.19824854954933224, 0.08240186743380296, 0.1618574648940052, 0.1718593124898392, 0.16875604672524147, 0.17533247132120755, 0.1600642835953635, 0.16561636674616587, 0.15958282960047765, 0.1768201099770631, 0.15949049095963508, 0.09927405742085271, 0.06032366336437678, 0.0692180724511372, 0.08592901798883035, 0.06612373472494515, 0.04378462263668259, 0.0827488383827989, 0.07198010147110612, 0.08070563316961965]}, "mutation_prompt": null}
{"id": "d07d1130-4e2e-44ad-99de-8df38cd6df2f", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "DynamicSwarmIntelligenceOptimizer", "description": "Introducing a dynamic learning rate adaptation mechanism to adjust cognitive and social weights based on individual particle performance for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "metadata": {"aucs": [0.28771503602817594, 0.22122794491822828, 0.2643821953205199, 0.2312239982001998, 0.3509224501702777, 0.1987501720232674, 0.24984561581848574, 0.20288533917135743, 0.2701938072809028, 0.015909073905311044, 0.018968366305375794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09555489665066474, 0.06515986160683773, 0.09373972427674127, 0.04651904762741599, 0.07713894826983159, 0.08240877057902729, 0.055433807944590296, 0.07518291443019154, 0.09801380943031324, 0.030614869699730263, 0.04790229715786887, 0.055156057088729726, 0.07394358759887987, 0.05866291397532408, 0.038361733391772734, 0.052537233640777004, 0.06403616672426848, 0.05047018011976301, 0.957455633403349, 0.12024928786801814, 0.9697392244119365, 0.1379066145721043, 0.1079637881086093, 0.15076777237774563, 0.13056375958367195, 0.18761337589379978, 0.10535948888272018, 0.09125773816571237, 0.06743532961676368, 0.09337094801804358, 0.07680401226745781, 0.09927476206825903, 0.14353024515423918, 0.09183608414398492, 0.110140244877859, 9.999999999998899e-05, 0.27622735406296384, 0.1873691649785324, 0.13478528185797445, 0.17631744307345742, 0.22287035374806696, 0.15332736659839907, 0.08908739387233455, 0.21000524546777766, 0.14257020068586512, 0.10190532145526032, 0.0008295386706069774, 0.018141456075090545, 0.09925431937622742, 9.999999999998899e-05, 0.04156170278479787, 0.09854683088402183, 0.07992548981634484, 0.12435782551363261, 0.08530755027789305, 0.07814530612964876, 0.0395546699919721, 0.07314503678767037, 0.026734981781305622, 0.11385233598265276, 0.02668328261905284, 0.03505659049311416, 0.10382243122414425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03460274135032104, 9.999999999998899e-05, 9.999999999998899e-05, 0.06560238741132562, 0.040697693860823336, 0.12517710415910044, 0.027452542067932906, 0.05185586143496512, 0.03789803544932979, 0.09412149730525565, 0.0695821600978399, 0.048388725740604266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026945818366160945, 9.999999999998899e-05, 0.0034989786845671667, 0.012137315189182707, 9.999999999998899e-05, 0.00250730070176286, 0.008915172414253214, 9.999999999998899e-05, 0.04546242162063552, 0.27522368784847895, 0.19851579252556306, 0.26524394495265224, 0.27352312659271305, 0.19121222202534116, 0.1968958695458759, 0.20400092006104054, 0.24071857827739773, 0.22202279466052643, 0.04717814731558778, 0.06335479364123697, 0.050790462973075434, 0.055270447795541466, 0.056197027846440095, 0.06751957232192396, 0.06835229240226692, 0.07067884695658999, 0.07159193710229395, 0.13254128342040583, 0.13796709938586116, 0.14946540248334927, 0.1311353380314526, 0.11691910738100375, 0.12398095181481661, 0.10758563996935266, 0.12230996958278506, 0.13022104501133636, 0.15505444243411526, 0.1844674820388762, 0.14634619949582506, 0.16970090455952502, 0.23728416046608458, 0.21438803654644145, 0.225812253811984, 0.18592202749540443, 0.14252794833821458, 0.15287540201560168, 0.17392097369897386, 0.10446451077183538, 0.1538545428841549, 0.14179890926348038, 0.13931843897228102, 0.12721702159876225, 0.13139261236268995, 0.0960220644867491, 0.19932974924057334, 0.20381392401834952, 0.19030297167053278, 0.21039989419724292, 0.17578685439673813, 0.22184775245042643, 0.19075158096125866, 0.23480576478648985, 0.18019015507889757, 0.17099835372404637, 0.16354994353027918, 0.16993840490793066, 0.17621700698903364, 0.15963642619685547, 0.16617811411805983, 0.16934499390191504, 0.1621061651983342, 0.1623653896409436, 0.34818956861317185, 0.14599314505732364, 0.14246433591056995, 0.17001604119057612, 0.170945061955468, 0.27875364210917386, 0.09696132099478405, 0.16945302729113776, 0.11049106543220533, 0.2801196982683305, 0.18613073983830353, 0.24608080142192135, 0.1380806735800475, 0.1895750491362822, 0.17123894522039718, 0.10228325481475808, 0.19824854954933224, 0.08240186743380296, 0.1618574648940052, 0.1718593124898392, 0.16875604672524147, 0.17533247132120755, 0.1600642835953635, 0.16561636674616587, 0.15958282960047765, 0.1768201099770631, 0.15949049095963508, 0.09927405742085271, 0.06032366336437678, 0.0692180724511372, 0.08592901798883035, 0.06612373472494515, 0.04378462263668259, 0.0827488383827989, 0.07198010147110612, 0.08070563316961965]}, "mutation_prompt": null}
{"id": "476b9746-c796-4d31-b493-c3d20ee212c5", "solution": "import numpy as np\n\nclass FastDynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                adaptive_inertia = self.inertia_weight * np.exp(-func(swarm[i])) # Adaptive inertia weight\n                velocities[i] = adaptive_inertia * velocities[i] + cognitive_component + social_component\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "FastDynamicSwarmIntelligenceOptimizer", "description": "Introducing a novel adaptive inertia weight mechanism based on the fitness landscape to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 8, "fitness": 0.08943197246870226, "feedback": "The algorithm FastDynamicSwarmIntelligenceOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "metadata": {"aucs": [0.24133090859660256, 0.24179372664424392, 0.25544636414006583, 0.18201660104988382, 0.30495859280759685, 0.19582285338871175, 0.13230070271649363, 0.08941165287312525, 0.131328108636099, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04547118058635258, 0.018711453530351863, 0.00966511381016466, 0.06264817557792557, 0.06009743581383098, 0.06543730586670204, 0.06578587709685269, 0.08101277218539549, 0.0723774377179297, 0.011564753648039328, 0.015700361325118872, 0.019296422596197238, 0.05481878246326555, 0.04447103268079533, 0.04491352694777162, 0.07478340093263836, 0.05547339220805736, 0.0571754129013069, 0.08623139703552118, 0.0733436313300202, 0.09407160026598793, 0.06668224181205273, 0.08197990137973954, 0.08887570434578951, 0.0922104190819324, 0.08502812881465616, 0.08227826502804059, 0.11833456420339095, 0.08445489364307446, 0.06630739524391172, 0.1220438433648997, 0.05808156687096089, 0.07808036497502946, 0.0352897598641273, 0.04819227613711641, 9.999999999998899e-05, 0.1686326002502896, 0.14689931915337306, 0.12704618472711993, 0.2170113710531555, 0.11556900094843281, 0.08344166376657813, 0.08802946118312815, 0.13630876506433198, 0.09807835610385751, 9.999999999998899e-05, 9.999999999998899e-05, 0.01053272721222398, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051971442332680584, 0.04570550705567766, 0.0954925752494219, 0.10081285130561901, 0.014150856308696946, 0.023280433953103086, 9.999999999998899e-05, 0.018684843446876265, 0.062460863647929354, 0.07534631562265093, 0.021189569325601787, 0.010492179033051663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09237557228825932, 0.023256901147482467, 0.14235065993044227, 0.019596400146758453, 0.005959133325725285, 0.015696210895915108, 0.042159722915521725, 0.03416706185850382, 0.06233858209134491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024092493504884738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005825360382825551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15751025611638236, 0.1643100077316736, 0.18121091307780357, 0.17091714731105823, 0.09708865527373767, 0.1307136428548198, 0.20559365139979469, 0.2844386906148946, 0.2888016617485477, 0.03556003310956457, 0.038010938024387375, 0.036624438806291626, 0.08180656265615249, 0.07416851204949704, 0.06276930715379714, 0.04615437185941007, 0.050210475757761386, 0.05994525077504187, 0.1655599931739331, 0.11446263582991667, 0.11063618159097166, 0.09855305120349966, 0.10852972522114013, 0.08104291872328817, 0.14712859342952112, 0.11221405815253527, 0.13953742483859588, 0.12363744858978665, 0.17042777100471063, 0.12371875834529333, 0.18421299052875773, 0.18042724552293243, 0.1619153405697067, 0.1883801645697648, 0.1966539085241773, 0.1681292431239504, 0.11146664061539846, 0.13042901929429374, 0.09494530271914015, 0.1396773225586594, 0.13949396100107747, 0.1445076855103392, 0.12398947891641732, 0.14754568464310103, 0.13486517686057198, 0.13408403215827747, 0.12088685025819434, 0.14243827056072644, 0.1910690122163563, 0.1745090708442052, 0.19974160253843454, 0.1988900178005304, 0.17508185250852715, 0.18060728550559213, 0.1376024273561618, 0.11322259529933598, 0.13127445871728383, 0.1695835370256682, 0.16960756233727314, 0.161345476331904, 0.1622046941244487, 0.1586003809238753, 0.15481503091676696, 0.15012722604656104, 0.1669911875807798, 0.13663673291591572, 0.17032543852034854, 0.17535003045209363, 0.243451803575089, 0.07468461190100095, 0.14830456855047502, 0.1104666280728348, 0.03824121102611444, 0.06533509616680999, 0.020525977089280056, 0.28802564200433056, 0.11158472095989058, 0.09052354590115863, 0.18545264909191783, 0.09053382638542373, 0.0919088999622174, 0.16481045533766614, 0.16586237413069427, 0.17851966167456035, 0.1669885864284193, 0.17857875992942596, 0.16347929498385638, 0.15010496542801433, 0.1365814970661582, 0.14689007985489466, 0.06635838796490312, 0.06012583580764297, 0.055435771103228615, 0.06523741071969458, 0.058714085058200416, 0.07526451072188611, 0.06077303652917676, 0.062441936138326826, 0.0625121661402025]}, "mutation_prompt": null}
{"id": "8aec54d2-50c4-4bfb-b333-479f554a24de", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "DynamicSwarmIntelligenceOptimizer", "description": "Introducing a dynamic learning rate adaptation mechanism to adjust cognitive and social weights based on individual particle performance for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "metadata": {"aucs": [0.28771503602817594, 0.22122794491822828, 0.2643821953205199, 0.2312239982001998, 0.3509224501702777, 0.1987501720232674, 0.24984561581848574, 0.20288533917135743, 0.2701938072809028, 0.015909073905311044, 0.018968366305375794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09555489665066474, 0.06515986160683773, 0.09373972427674127, 0.04651904762741599, 0.07713894826983159, 0.08240877057902729, 0.055433807944590296, 0.07518291443019154, 0.09801380943031324, 0.030614869699730263, 0.04790229715786887, 0.055156057088729726, 0.07394358759887987, 0.05866291397532408, 0.038361733391772734, 0.052537233640777004, 0.06403616672426848, 0.05047018011976301, 0.957455633403349, 0.12024928786801814, 0.9697392244119365, 0.1379066145721043, 0.1079637881086093, 0.15076777237774563, 0.13056375958367195, 0.18761337589379978, 0.10535948888272018, 0.09125773816571237, 0.06743532961676368, 0.09337094801804358, 0.07680401226745781, 0.09927476206825903, 0.14353024515423918, 0.09183608414398492, 0.110140244877859, 9.999999999998899e-05, 0.27622735406296384, 0.1873691649785324, 0.13478528185797445, 0.17631744307345742, 0.22287035374806696, 0.15332736659839907, 0.08908739387233455, 0.21000524546777766, 0.14257020068586512, 0.10190532145526032, 0.0008295386706069774, 0.018141456075090545, 0.09925431937622742, 9.999999999998899e-05, 0.04156170278479787, 0.09854683088402183, 0.07992548981634484, 0.12435782551363261, 0.08530755027789305, 0.07814530612964876, 0.0395546699919721, 0.07314503678767037, 0.026734981781305622, 0.11385233598265276, 0.02668328261905284, 0.03505659049311416, 0.10382243122414425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03460274135032104, 9.999999999998899e-05, 9.999999999998899e-05, 0.06560238741132562, 0.040697693860823336, 0.12517710415910044, 0.027452542067932906, 0.05185586143496512, 0.03789803544932979, 0.09412149730525565, 0.0695821600978399, 0.048388725740604266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026945818366160945, 9.999999999998899e-05, 0.0034989786845671667, 0.012137315189182707, 9.999999999998899e-05, 0.00250730070176286, 0.008915172414253214, 9.999999999998899e-05, 0.04546242162063552, 0.27522368784847895, 0.19851579252556306, 0.26524394495265224, 0.27352312659271305, 0.19121222202534116, 0.1968958695458759, 0.20400092006104054, 0.24071857827739773, 0.22202279466052643, 0.04717814731558778, 0.06335479364123697, 0.050790462973075434, 0.055270447795541466, 0.056197027846440095, 0.06751957232192396, 0.06835229240226692, 0.07067884695658999, 0.07159193710229395, 0.13254128342040583, 0.13796709938586116, 0.14946540248334927, 0.1311353380314526, 0.11691910738100375, 0.12398095181481661, 0.10758563996935266, 0.12230996958278506, 0.13022104501133636, 0.15505444243411526, 0.1844674820388762, 0.14634619949582506, 0.16970090455952502, 0.23728416046608458, 0.21438803654644145, 0.225812253811984, 0.18592202749540443, 0.14252794833821458, 0.15287540201560168, 0.17392097369897386, 0.10446451077183538, 0.1538545428841549, 0.14179890926348038, 0.13931843897228102, 0.12721702159876225, 0.13139261236268995, 0.0960220644867491, 0.19932974924057334, 0.20381392401834952, 0.19030297167053278, 0.21039989419724292, 0.17578685439673813, 0.22184775245042643, 0.19075158096125866, 0.23480576478648985, 0.18019015507889757, 0.17099835372404637, 0.16354994353027918, 0.16993840490793066, 0.17621700698903364, 0.15963642619685547, 0.16617811411805983, 0.16934499390191504, 0.1621061651983342, 0.1623653896409436, 0.34818956861317185, 0.14599314505732364, 0.14246433591056995, 0.17001604119057612, 0.170945061955468, 0.27875364210917386, 0.09696132099478405, 0.16945302729113776, 0.11049106543220533, 0.2801196982683305, 0.18613073983830353, 0.24608080142192135, 0.1380806735800475, 0.1895750491362822, 0.17123894522039718, 0.10228325481475808, 0.19824854954933224, 0.08240186743380296, 0.1618574648940052, 0.1718593124898392, 0.16875604672524147, 0.17533247132120755, 0.1600642835953635, 0.16561636674616587, 0.15958282960047765, 0.1768201099770631, 0.15949049095963508, 0.09927405742085271, 0.06032366336437678, 0.0692180724511372, 0.08592901798883035, 0.06612373472494515, 0.04378462263668259, 0.0827488383827989, 0.07198010147110612, 0.08070563316961965]}, "mutation_prompt": null}
{"id": "ca9efcd2-bf0f-44aa-88cc-d2e12494dd7d", "solution": "import numpy as np\n\nclass EnhancedDynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                # Introducing a mutation operator\n                if np.random.rand() < self.mutation_rate:\n                    mutation_direction = np.random.choice([-1, 1], self.dim)\n                    mutation_step = np.random.uniform(0, 1)\n                    swarm[i] += mutation_step * mutation_direction\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "EnhancedDynamicSwarmIntelligenceOptimizer", "description": "Introducing a mutation operator to explore new solutions and diversify the search space for improved convergence speed.", "configspace": "", "generation": 10, "fitness": 0.11863889062654032, "feedback": "The algorithm EnhancedDynamicSwarmIntelligenceOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "metadata": {"aucs": [0.30171006632457165, 0.3088683352645972, 0.3352658450020958, 0.25188815152710764, 0.23797839182533853, 0.27650600492789135, 0.291950076148789, 0.2932387895992601, 0.2511857531718117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08395578462824527, 0.07222800853615152, 0.06450970288791391, 0.07100870110894941, 0.05789176138037333, 0.0844896141750141, 0.0632273163016569, 0.060825065962027636, 0.05379739501721015, 0.03513363890642851, 0.06359751843643335, 0.10522045821639148, 0.06484960436105502, 0.04713996598490755, 0.04986657491480784, 0.04191554623959659, 0.07533571718084131, 0.0405322530982819, 0.7235324414183051, 0.117767837559548, 0.11409392387305994, 0.09801526820259732, 0.1299861342776778, 0.104260091619641, 0.11080159238921883, 0.13404206184848821, 0.13259422832359447, 0.11872340233884637, 0.07980641514718723, 0.06360093054172344, 0.14867537264763742, 0.0843241579049232, 0.11410778384376918, 0.09681892738181619, 0.10237256695552388, 0.09723986934414375, 0.19355060096968946, 0.10785476549637407, 0.16576613792349182, 0.21076744971946637, 0.20299641995219286, 0.1853059046261213, 0.13892802546817962, 0.12050111670609387, 0.06854513474795221, 0.05601036310302021, 9.999999999998899e-05, 0.045035947056754955, 0.14251200173140222, 0.02556147676053666, 9.999999999998899e-05, 0.06778943403333448, 0.12082354890108438, 0.18059069198125222, 0.1115768456377404, 0.05856531040300195, 0.06722077538437476, 0.10831787545727423, 0.08721758445975625, 0.08831086482169725, 0.11483465242263824, 9.999999999998899e-05, 0.0978524322685902, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10784030207731721, 0.04749732177214738, 0.04501174949069697, 0.040079221825596534, 0.02400302949151578, 0.0208808482762306, 0.06307171904306763, 0.06580501688628315, 0.07145002062975259, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06261148388467297, 0.042794741154930094, 0.04726838695077662, 9.999999999998899e-05, 0.030946866331571288, 9.999999999998899e-05, 0.0289919949149251, 0.057031212495637584, 0.003917775675200241, 0.27683836709556076, 0.2704640922793755, 0.2659320359792827, 0.28309098569251523, 0.2807671755008797, 0.25299014607433623, 0.2908389568658335, 0.2974174945579605, 0.28288480990096254, 0.07291522644228299, 0.06298645230080235, 0.05315113465021004, 0.07689788434772526, 0.050782209603679296, 0.10616454922715979, 0.09394274980584705, 0.05489932889339233, 0.052308411175591596, 0.1072417176062821, 0.10964785914819841, 0.10588886395162611, 0.12338719803298792, 0.15463753169866723, 0.09129321314691174, 0.129236584029647, 0.14747124192581618, 0.10421658434016101, 0.1960498479095485, 0.2078379371355561, 0.1709867235345317, 0.16295159318762575, 0.20816732441610675, 0.2091604191953964, 0.15688282059366387, 0.23027424711381728, 0.2113031110249599, 0.12206590355608715, 0.14804566269879194, 0.12228056880907279, 0.16785231782463528, 0.1223832320606032, 0.20129838876199735, 0.09601033018897909, 0.19588664233774922, 0.11801607905687683, 0.19241203129562312, 0.1655742998077765, 0.17028876736008947, 0.1957916285257264, 0.1843655570924586, 0.1733254550956148, 0.18010035196956975, 0.20210524039918998, 0.19989203081096707, 0.17799567687283724, 0.1606190341379795, 0.16436477967296936, 0.16933200695107808, 0.16188141033453363, 0.15848273321991457, 0.15555908241366723, 0.16992454662483814, 0.15303227958962085, 0.14776846730772175, 0.1684774978404734, 0.12803950064871206, 0.16469656687235879, 0.18669152041954207, 0.31882490636307226, 0.11091319505654551, 0.16676815086484964, 0.14095994185351135, 0.2673949007735611, 0.11201081032006954, 0.1985607060308986, 0.18709664813925775, 0.16495107993117286, 0.4268215751454668, 0.10092834918169735, 0.1339135911748508, 0.19167539707860848, 0.18040490984908197, 0.16699324618345013, 0.16908027330269593, 0.16639077676602154, 0.1633407811398947, 0.17433489562392768, 0.1668484840198312, 0.16272123100690516, 0.19573666464391748, 0.06101148783597532, 0.07367035805482158, 0.06944181456588394, 0.05438651700452224, 0.07910866011449558, 0.05527515422407647, 0.08264363498668204, 0.06315001325250647, 0.06045970422370717]}, "mutation_prompt": null}
{"id": "d73761ae-2fbd-4455-94e8-4e7e8708121a", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "DynamicSwarmIntelligenceOptimizer", "description": "Introducing a dynamic learning rate adaptation mechanism to adjust cognitive and social weights based on individual particle performance for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "metadata": {"aucs": [0.28771503602817594, 0.22122794491822828, 0.2643821953205199, 0.2312239982001998, 0.3509224501702777, 0.1987501720232674, 0.24984561581848574, 0.20288533917135743, 0.2701938072809028, 0.015909073905311044, 0.018968366305375794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09555489665066474, 0.06515986160683773, 0.09373972427674127, 0.04651904762741599, 0.07713894826983159, 0.08240877057902729, 0.055433807944590296, 0.07518291443019154, 0.09801380943031324, 0.030614869699730263, 0.04790229715786887, 0.055156057088729726, 0.07394358759887987, 0.05866291397532408, 0.038361733391772734, 0.052537233640777004, 0.06403616672426848, 0.05047018011976301, 0.957455633403349, 0.12024928786801814, 0.9697392244119365, 0.1379066145721043, 0.1079637881086093, 0.15076777237774563, 0.13056375958367195, 0.18761337589379978, 0.10535948888272018, 0.09125773816571237, 0.06743532961676368, 0.09337094801804358, 0.07680401226745781, 0.09927476206825903, 0.14353024515423918, 0.09183608414398492, 0.110140244877859, 9.999999999998899e-05, 0.27622735406296384, 0.1873691649785324, 0.13478528185797445, 0.17631744307345742, 0.22287035374806696, 0.15332736659839907, 0.08908739387233455, 0.21000524546777766, 0.14257020068586512, 0.10190532145526032, 0.0008295386706069774, 0.018141456075090545, 0.09925431937622742, 9.999999999998899e-05, 0.04156170278479787, 0.09854683088402183, 0.07992548981634484, 0.12435782551363261, 0.08530755027789305, 0.07814530612964876, 0.0395546699919721, 0.07314503678767037, 0.026734981781305622, 0.11385233598265276, 0.02668328261905284, 0.03505659049311416, 0.10382243122414425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03460274135032104, 9.999999999998899e-05, 9.999999999998899e-05, 0.06560238741132562, 0.040697693860823336, 0.12517710415910044, 0.027452542067932906, 0.05185586143496512, 0.03789803544932979, 0.09412149730525565, 0.0695821600978399, 0.048388725740604266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026945818366160945, 9.999999999998899e-05, 0.0034989786845671667, 0.012137315189182707, 9.999999999998899e-05, 0.00250730070176286, 0.008915172414253214, 9.999999999998899e-05, 0.04546242162063552, 0.27522368784847895, 0.19851579252556306, 0.26524394495265224, 0.27352312659271305, 0.19121222202534116, 0.1968958695458759, 0.20400092006104054, 0.24071857827739773, 0.22202279466052643, 0.04717814731558778, 0.06335479364123697, 0.050790462973075434, 0.055270447795541466, 0.056197027846440095, 0.06751957232192396, 0.06835229240226692, 0.07067884695658999, 0.07159193710229395, 0.13254128342040583, 0.13796709938586116, 0.14946540248334927, 0.1311353380314526, 0.11691910738100375, 0.12398095181481661, 0.10758563996935266, 0.12230996958278506, 0.13022104501133636, 0.15505444243411526, 0.1844674820388762, 0.14634619949582506, 0.16970090455952502, 0.23728416046608458, 0.21438803654644145, 0.225812253811984, 0.18592202749540443, 0.14252794833821458, 0.15287540201560168, 0.17392097369897386, 0.10446451077183538, 0.1538545428841549, 0.14179890926348038, 0.13931843897228102, 0.12721702159876225, 0.13139261236268995, 0.0960220644867491, 0.19932974924057334, 0.20381392401834952, 0.19030297167053278, 0.21039989419724292, 0.17578685439673813, 0.22184775245042643, 0.19075158096125866, 0.23480576478648985, 0.18019015507889757, 0.17099835372404637, 0.16354994353027918, 0.16993840490793066, 0.17621700698903364, 0.15963642619685547, 0.16617811411805983, 0.16934499390191504, 0.1621061651983342, 0.1623653896409436, 0.34818956861317185, 0.14599314505732364, 0.14246433591056995, 0.17001604119057612, 0.170945061955468, 0.27875364210917386, 0.09696132099478405, 0.16945302729113776, 0.11049106543220533, 0.2801196982683305, 0.18613073983830353, 0.24608080142192135, 0.1380806735800475, 0.1895750491362822, 0.17123894522039718, 0.10228325481475808, 0.19824854954933224, 0.08240186743380296, 0.1618574648940052, 0.1718593124898392, 0.16875604672524147, 0.17533247132120755, 0.1600642835953635, 0.16561636674616587, 0.15958282960047765, 0.1768201099770631, 0.15949049095963508, 0.09927405742085271, 0.06032366336437678, 0.0692180724511372, 0.08592901798883035, 0.06612373472494515, 0.04378462263668259, 0.0827488383827989, 0.07198010147110612, 0.08070563316961965]}, "mutation_prompt": null}
{"id": "4602838d-bfc3-48a2-8fb9-6ed584520967", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "DynamicSwarmIntelligenceOptimizer", "description": "Introducing a dynamic learning rate adaptation mechanism to adjust cognitive and social weights based on individual particle performance for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "metadata": {"aucs": [0.28771503602817594, 0.22122794491822828, 0.2643821953205199, 0.2312239982001998, 0.3509224501702777, 0.1987501720232674, 0.24984561581848574, 0.20288533917135743, 0.2701938072809028, 0.015909073905311044, 0.018968366305375794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09555489665066474, 0.06515986160683773, 0.09373972427674127, 0.04651904762741599, 0.07713894826983159, 0.08240877057902729, 0.055433807944590296, 0.07518291443019154, 0.09801380943031324, 0.030614869699730263, 0.04790229715786887, 0.055156057088729726, 0.07394358759887987, 0.05866291397532408, 0.038361733391772734, 0.052537233640777004, 0.06403616672426848, 0.05047018011976301, 0.957455633403349, 0.12024928786801814, 0.9697392244119365, 0.1379066145721043, 0.1079637881086093, 0.15076777237774563, 0.13056375958367195, 0.18761337589379978, 0.10535948888272018, 0.09125773816571237, 0.06743532961676368, 0.09337094801804358, 0.07680401226745781, 0.09927476206825903, 0.14353024515423918, 0.09183608414398492, 0.110140244877859, 9.999999999998899e-05, 0.27622735406296384, 0.1873691649785324, 0.13478528185797445, 0.17631744307345742, 0.22287035374806696, 0.15332736659839907, 0.08908739387233455, 0.21000524546777766, 0.14257020068586512, 0.10190532145526032, 0.0008295386706069774, 0.018141456075090545, 0.09925431937622742, 9.999999999998899e-05, 0.04156170278479787, 0.09854683088402183, 0.07992548981634484, 0.12435782551363261, 0.08530755027789305, 0.07814530612964876, 0.0395546699919721, 0.07314503678767037, 0.026734981781305622, 0.11385233598265276, 0.02668328261905284, 0.03505659049311416, 0.10382243122414425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03460274135032104, 9.999999999998899e-05, 9.999999999998899e-05, 0.06560238741132562, 0.040697693860823336, 0.12517710415910044, 0.027452542067932906, 0.05185586143496512, 0.03789803544932979, 0.09412149730525565, 0.0695821600978399, 0.048388725740604266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026945818366160945, 9.999999999998899e-05, 0.0034989786845671667, 0.012137315189182707, 9.999999999998899e-05, 0.00250730070176286, 0.008915172414253214, 9.999999999998899e-05, 0.04546242162063552, 0.27522368784847895, 0.19851579252556306, 0.26524394495265224, 0.27352312659271305, 0.19121222202534116, 0.1968958695458759, 0.20400092006104054, 0.24071857827739773, 0.22202279466052643, 0.04717814731558778, 0.06335479364123697, 0.050790462973075434, 0.055270447795541466, 0.056197027846440095, 0.06751957232192396, 0.06835229240226692, 0.07067884695658999, 0.07159193710229395, 0.13254128342040583, 0.13796709938586116, 0.14946540248334927, 0.1311353380314526, 0.11691910738100375, 0.12398095181481661, 0.10758563996935266, 0.12230996958278506, 0.13022104501133636, 0.15505444243411526, 0.1844674820388762, 0.14634619949582506, 0.16970090455952502, 0.23728416046608458, 0.21438803654644145, 0.225812253811984, 0.18592202749540443, 0.14252794833821458, 0.15287540201560168, 0.17392097369897386, 0.10446451077183538, 0.1538545428841549, 0.14179890926348038, 0.13931843897228102, 0.12721702159876225, 0.13139261236268995, 0.0960220644867491, 0.19932974924057334, 0.20381392401834952, 0.19030297167053278, 0.21039989419724292, 0.17578685439673813, 0.22184775245042643, 0.19075158096125866, 0.23480576478648985, 0.18019015507889757, 0.17099835372404637, 0.16354994353027918, 0.16993840490793066, 0.17621700698903364, 0.15963642619685547, 0.16617811411805983, 0.16934499390191504, 0.1621061651983342, 0.1623653896409436, 0.34818956861317185, 0.14599314505732364, 0.14246433591056995, 0.17001604119057612, 0.170945061955468, 0.27875364210917386, 0.09696132099478405, 0.16945302729113776, 0.11049106543220533, 0.2801196982683305, 0.18613073983830353, 0.24608080142192135, 0.1380806735800475, 0.1895750491362822, 0.17123894522039718, 0.10228325481475808, 0.19824854954933224, 0.08240186743380296, 0.1618574648940052, 0.1718593124898392, 0.16875604672524147, 0.17533247132120755, 0.1600642835953635, 0.16561636674616587, 0.15958282960047765, 0.1768201099770631, 0.15949049095963508, 0.09927405742085271, 0.06032366336437678, 0.0692180724511372, 0.08592901798883035, 0.06612373472494515, 0.04378462263668259, 0.0827488383827989, 0.07198010147110612, 0.08070563316961965]}, "mutation_prompt": null}
{"id": "fb06477a-1e56-4fcd-a33d-611fffcc0cec", "solution": "import numpy as np\n\nclass DynamicNeighborhoodSearchOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, neighborhood_size=3):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.neighborhood_size = neighborhood_size\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                \n                # Dynamic neighborhood search\n                neighborhood_indices = np.random.choice(self.swarm_size, self.neighborhood_size, replace=False)\n                for idx in neighborhood_indices:\n                    neighborhood_cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[idx] - swarm[i])\n                    neighborhood_social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                    velocities[i] += neighborhood_cognitive_component + neighborhood_social_component\n                \n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "DynamicNeighborhoodSearchOptimizer", "description": "Introducing a dynamic neighborhood search mechanism to explore different regions of the search space for improved convergence.", "configspace": "", "generation": 13, "fitness": 0.10965103635168776, "feedback": "The algorithm DynamicNeighborhoodSearchOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.20.", "error": "", "parent_id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "metadata": {"aucs": [0.17621785767906806, 0.06432772651221763, 0.09169502728636048, 0.24869420672185694, 0.1785276860235162, 0.21420772885237294, 0.23364215767523278, 0.25897739036862255, 0.18647492400984078, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04129002208410515, 0.01467079663371329, 0.0003357298992429092, 0.010643411704069683, 0.05488020171742336, 0.02335394899935017, 0.018248263482334326, 0.04672639246389132, 0.010674738340807233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 0.00986523789394489, 0.01263999448605757, 0.02064341770621636, 0.02060411373068327, 0.99247674396113, 0.9947269125041643, 0.9962182081059294, 0.9899945923670249, 0.9914814494579547, 0.9946641492823756, 0.9980675326105838, 0.989845140955497, 0.9954347973882519, 0.02606160696662152, 0.03263169511653796, 0.06061797610145714, 0.07598849775448946, 0.0020991841009306844, 0.01597857954796178, 0.08277060987781881, 0.028481182216426926, 0.03482033344670976, 0.10027683525177622, 0.03775594762470191, 0.09486994716368158, 0.15492162504995666, 0.041947978625274884, 0.1486941527972333, 0.1367656983865967, 0.06300210628650404, 0.1253056025271202, 9.999999999998899e-05, 0.0007046170912553551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06864532107073484, 9.999999999998899e-05, 0.02248373241086088, 0.009370925696763677, 0.09352619200641443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02427148331862916, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0833537254112966, 0.039065521229659894, 0.10358136662133455, 0.021196960697998146, 0.035564735921845614, 0.009629206406088442, 0.07608248347230617, 0.024626753031252502, 0.046525947322916594, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03279741637521072, 0.01539230001374503, 0.004262721029696714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03990386543740443, 0.21551416135268664, 0.11339134347652557, 0.14838054695461433, 0.15928376553815193, 0.1417266089087601, 0.1341791865929436, 0.1240568991094797, 0.2282656702351743, 0.1210557193025883, 0.04822309071755704, 0.04110161709548721, 0.04814981614856828, 0.009377336803332081, 0.03718394777199796, 0.01759993274736349, 9.999999999998899e-05, 0.0541742299962269, 0.0267656688986897, 0.12601942698634794, 0.11099189233484918, 0.10950540650229346, 0.10203827864499326, 0.10852972522114013, 0.1149590327941532, 0.1072341635878904, 0.143017699200656, 0.11536882477119759, 0.13728186082797633, 0.16479762799613618, 0.16236497533304506, 0.1786454299018405, 0.16085380378618896, 0.12611907571315606, 0.1708749853480347, 0.17377774300845283, 0.18820329407123737, 0.0825323489215305, 0.057520136922308174, 0.13536232326197462, 0.10811092437205738, 0.07977799777786254, 0.10249795377752602, 0.06680528336134028, 0.09386031173166853, 0.0828826626546082, 0.2032483911780525, 0.1406924719696131, 0.13345086981233123, 0.10715411510137074, 0.1293502205169359, 0.1602952895507227, 0.12245976138762271, 0.16684745089762343, 0.1261963614278906, 0.05110365433487585, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13399954927057056, 0.10736692375893275, 0.10757602497453156, 0.13198968717987625, 0.11966421310441766, 0.1207914665021157, 0.1085505385440898, 0.14195313244355334, 0.16020109254460058, 0.10538899827517123, 0.20368779146322835, 0.1679519024268198, 0.13003240396887017, 0.1374786161663022, 0.16350215836820137, 0.0469586837169782, 0.20906690821498797, 0.13645875478922131, 0.1652434678068273, 0.17934517258213833, 0.1685599950950758, 0.16107870812672465, 0.17691721197508758, 0.17119967776218215, 0.17601353022212585, 0.1953406602260891, 0.16730662514992145, 0.17519789687684373, 0.04737858840184472, 0.01347814618054688, 0.031393493129599714, 0.027015293023570086, 0.018487330591705486, 0.05997643125814467, 0.012671751202275261, 0.04935834995344579, 0.01745630416284416]}, "mutation_prompt": null}
{"id": "7eed33e3-cc7f-4c99-af2d-928201ec4a3a", "solution": "import numpy as np\n\nclass AdaptiveAccelerationCoefficientOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                adaptive_acceleration_coefficient = np.abs(np.mean(swarm) - swarm[i]) / np.std(swarm)\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + adaptive_acceleration_coefficient * (cognitive_component + social_component)\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "AdaptiveAccelerationCoefficientOptimizer", "description": "Introducing a novel adaptive acceleration coefficient mechanism based on individual particle performance to dynamically adjust the search behavior for faster convergence.", "configspace": "", "generation": 14, "fitness": 0.10558813726077566, "feedback": "The algorithm AdaptiveAccelerationCoefficientOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.10.", "error": "", "parent_id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "metadata": {"aucs": [0.2315903024872943, 0.24875801430706457, 0.3033141828744159, 0.12779907449722128, 0.1767930503714602, 0.2251953212629415, 0.22538686341114722, 0.1816050424620116, 0.1570310118418109, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005854447560942444, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04060902222858387, 0.055945214682543876, 0.06223149011697082, 0.07603928188450193, 0.051403381504394385, 0.09086063229681529, 0.07101622284428943, 0.049359332177021265, 0.0811130372878468, 0.03553946643723771, 0.07684726328655256, 0.03776145570544176, 0.09387982874466694, 0.04144368235703311, 0.028237109879891475, 0.04617094467284044, 0.02568253931885789, 0.01981336276056611, 0.982340677056775, 0.10882602083933979, 0.11914501581456971, 0.08779451727537269, 0.07620515610616152, 0.09428689633628651, 0.1112305638344091, 0.09066694158158994, 0.12181544591623428, 0.04077555857829718, 0.05656341033481238, 0.024183753234019445, 0.0589750744314248, 0.0420070834452686, 0.06733086510543074, 0.0871003079254955, 0.09288927432865568, 9.999999999998899e-05, 0.1899353117522089, 0.13600103190144475, 0.1690179477979007, 0.1625511570607845, 0.18007156122203272, 0.17276430417993272, 0.11515622022070815, 0.22543912436885338, 0.11898472537118665, 0.05150279996839979, 0.04310778065007648, 0.08716342059570237, 0.016946379637502673, 0.07453854492867795, 0.008358063743638788, 0.011067785927473817, 9.999999999998899e-05, 0.023618789665945994, 0.09645000047161834, 0.03265266788363008, 0.05046445972166169, 0.011670830019295475, 0.02670469844402157, 0.09248188017269621, 0.09255546097213152, 0.08396773128603818, 0.13283177485575903, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046055398734933584, 0.0439296502624793, 0.08159380663654314, 0.021961992398086272, 0.04543552339355339, 0.04574657886499067, 0.06355824789664588, 0.06744843809243317, 0.0427285484497123, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01462346071957199, 9.999999999998899e-05, 0.03116202171704119, 9.999999999998899e-05, 0.04198416391408022, 9.999999999998899e-05, 0.020988258331838372, 0.24400367488627162, 0.2146566904824767, 0.2353611351416809, 0.22548372780928017, 0.1962279684552597, 0.21512609971066798, 0.1789238384754055, 0.30547486554876757, 0.22819969584345412, 0.061144094344952604, 0.03787586139322685, 0.04053324742534059, 0.049987316138228044, 0.057403257925508266, 0.05743204748121988, 0.06354890161354776, 0.06376717545822752, 0.06956325504265859, 0.14771721804833415, 0.17238170742819325, 0.13487638681674763, 0.1344054980286863, 0.141388210312706, 0.0889316309066186, 0.12949995112603196, 0.11318351685084549, 0.11701763340377713, 0.18696743100405355, 0.21292278981062807, 0.14628970161154864, 0.17101959776177378, 0.18603012966444532, 0.17659774780593485, 0.16005891761354907, 0.19492726814862849, 0.14580334171208653, 0.12422127824461726, 0.12057249174624851, 0.12643667989845564, 0.12103925827217499, 0.16208632723761618, 0.15669002459507042, 0.1345812157731744, 0.12806739298532432, 0.09312587356740931, 0.18490275848795212, 0.2060701999277268, 0.18035401919338034, 0.21553511535670433, 0.17301620736804557, 0.19425462050476738, 0.20992037291061938, 0.22001547072612504, 0.17526589879301935, 0.15342801738088074, 0.16434333957680247, 0.16366319279363273, 0.1722943842417224, 0.15717863438472612, 0.1862820824100886, 0.16608107006828265, 0.16030419282123953, 0.14948253721426463, 0.15058596884922826, 0.1544630356623371, 0.12245843758910813, 0.09832344211189759, 0.20735490279520674, 0.2242925253914918, 0.11383541271263908, 0.13814658020509618, 0.10914744345268479, 0.291002095332068, 0.10817791400308618, 0.14812822060921005, 0.3223075378626107, 0.10431199001604052, 0.12145237281632637, 0.09969969638118836, 0.1751796857961927, 0.10114173320087538, 0.18990121994398956, 0.17729105603633544, 0.17533780923103348, 0.1780688965816084, 0.16666977410169803, 0.15707315720281623, 0.18877486420768885, 0.22304417418233757, 0.18679139785220844, 0.06413402740074248, 0.05666595248461659, 0.05135712054047348, 0.054975534003198656, 0.05737600541950649, 0.055178057020576876, 0.07411201376260357, 0.0651640276464992, 0.08523169457374791]}, "mutation_prompt": null}
{"id": "0ccd6fc5-2016-42bd-97e9-d1696336c683", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "DynamicSwarmIntelligenceOptimizer", "description": "Introducing a dynamic learning rate adaptation mechanism to adjust cognitive and social weights based on individual particle performance for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "metadata": {"aucs": [0.28771503602817594, 0.22122794491822828, 0.2643821953205199, 0.2312239982001998, 0.3509224501702777, 0.1987501720232674, 0.24984561581848574, 0.20288533917135743, 0.2701938072809028, 0.015909073905311044, 0.018968366305375794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09555489665066474, 0.06515986160683773, 0.09373972427674127, 0.04651904762741599, 0.07713894826983159, 0.08240877057902729, 0.055433807944590296, 0.07518291443019154, 0.09801380943031324, 0.030614869699730263, 0.04790229715786887, 0.055156057088729726, 0.07394358759887987, 0.05866291397532408, 0.038361733391772734, 0.052537233640777004, 0.06403616672426848, 0.05047018011976301, 0.957455633403349, 0.12024928786801814, 0.9697392244119365, 0.1379066145721043, 0.1079637881086093, 0.15076777237774563, 0.13056375958367195, 0.18761337589379978, 0.10535948888272018, 0.09125773816571237, 0.06743532961676368, 0.09337094801804358, 0.07680401226745781, 0.09927476206825903, 0.14353024515423918, 0.09183608414398492, 0.110140244877859, 9.999999999998899e-05, 0.27622735406296384, 0.1873691649785324, 0.13478528185797445, 0.17631744307345742, 0.22287035374806696, 0.15332736659839907, 0.08908739387233455, 0.21000524546777766, 0.14257020068586512, 0.10190532145526032, 0.0008295386706069774, 0.018141456075090545, 0.09925431937622742, 9.999999999998899e-05, 0.04156170278479787, 0.09854683088402183, 0.07992548981634484, 0.12435782551363261, 0.08530755027789305, 0.07814530612964876, 0.0395546699919721, 0.07314503678767037, 0.026734981781305622, 0.11385233598265276, 0.02668328261905284, 0.03505659049311416, 0.10382243122414425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03460274135032104, 9.999999999998899e-05, 9.999999999998899e-05, 0.06560238741132562, 0.040697693860823336, 0.12517710415910044, 0.027452542067932906, 0.05185586143496512, 0.03789803544932979, 0.09412149730525565, 0.0695821600978399, 0.048388725740604266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026945818366160945, 9.999999999998899e-05, 0.0034989786845671667, 0.012137315189182707, 9.999999999998899e-05, 0.00250730070176286, 0.008915172414253214, 9.999999999998899e-05, 0.04546242162063552, 0.27522368784847895, 0.19851579252556306, 0.26524394495265224, 0.27352312659271305, 0.19121222202534116, 0.1968958695458759, 0.20400092006104054, 0.24071857827739773, 0.22202279466052643, 0.04717814731558778, 0.06335479364123697, 0.050790462973075434, 0.055270447795541466, 0.056197027846440095, 0.06751957232192396, 0.06835229240226692, 0.07067884695658999, 0.07159193710229395, 0.13254128342040583, 0.13796709938586116, 0.14946540248334927, 0.1311353380314526, 0.11691910738100375, 0.12398095181481661, 0.10758563996935266, 0.12230996958278506, 0.13022104501133636, 0.15505444243411526, 0.1844674820388762, 0.14634619949582506, 0.16970090455952502, 0.23728416046608458, 0.21438803654644145, 0.225812253811984, 0.18592202749540443, 0.14252794833821458, 0.15287540201560168, 0.17392097369897386, 0.10446451077183538, 0.1538545428841549, 0.14179890926348038, 0.13931843897228102, 0.12721702159876225, 0.13139261236268995, 0.0960220644867491, 0.19932974924057334, 0.20381392401834952, 0.19030297167053278, 0.21039989419724292, 0.17578685439673813, 0.22184775245042643, 0.19075158096125866, 0.23480576478648985, 0.18019015507889757, 0.17099835372404637, 0.16354994353027918, 0.16993840490793066, 0.17621700698903364, 0.15963642619685547, 0.16617811411805983, 0.16934499390191504, 0.1621061651983342, 0.1623653896409436, 0.34818956861317185, 0.14599314505732364, 0.14246433591056995, 0.17001604119057612, 0.170945061955468, 0.27875364210917386, 0.09696132099478405, 0.16945302729113776, 0.11049106543220533, 0.2801196982683305, 0.18613073983830353, 0.24608080142192135, 0.1380806735800475, 0.1895750491362822, 0.17123894522039718, 0.10228325481475808, 0.19824854954933224, 0.08240186743380296, 0.1618574648940052, 0.1718593124898392, 0.16875604672524147, 0.17533247132120755, 0.1600642835953635, 0.16561636674616587, 0.15958282960047765, 0.1768201099770631, 0.15949049095963508, 0.09927405742085271, 0.06032366336437678, 0.0692180724511372, 0.08592901798883035, 0.06612373472494515, 0.04378462263668259, 0.0827488383827989, 0.07198010147110612, 0.08070563316961965]}, "mutation_prompt": null}
{"id": "a0a6d217-ac7c-4bba-bf12-84aafe5caa40", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "DynamicSwarmIntelligenceOptimizer", "description": "Introducing a dynamic learning rate adaptation mechanism to adjust cognitive and social weights based on individual particle performance for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "metadata": {"aucs": [0.28771503602817594, 0.22122794491822828, 0.2643821953205199, 0.2312239982001998, 0.3509224501702777, 0.1987501720232674, 0.24984561581848574, 0.20288533917135743, 0.2701938072809028, 0.015909073905311044, 0.018968366305375794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09555489665066474, 0.06515986160683773, 0.09373972427674127, 0.04651904762741599, 0.07713894826983159, 0.08240877057902729, 0.055433807944590296, 0.07518291443019154, 0.09801380943031324, 0.030614869699730263, 0.04790229715786887, 0.055156057088729726, 0.07394358759887987, 0.05866291397532408, 0.038361733391772734, 0.052537233640777004, 0.06403616672426848, 0.05047018011976301, 0.957455633403349, 0.12024928786801814, 0.9697392244119365, 0.1379066145721043, 0.1079637881086093, 0.15076777237774563, 0.13056375958367195, 0.18761337589379978, 0.10535948888272018, 0.09125773816571237, 0.06743532961676368, 0.09337094801804358, 0.07680401226745781, 0.09927476206825903, 0.14353024515423918, 0.09183608414398492, 0.110140244877859, 9.999999999998899e-05, 0.27622735406296384, 0.1873691649785324, 0.13478528185797445, 0.17631744307345742, 0.22287035374806696, 0.15332736659839907, 0.08908739387233455, 0.21000524546777766, 0.14257020068586512, 0.10190532145526032, 0.0008295386706069774, 0.018141456075090545, 0.09925431937622742, 9.999999999998899e-05, 0.04156170278479787, 0.09854683088402183, 0.07992548981634484, 0.12435782551363261, 0.08530755027789305, 0.07814530612964876, 0.0395546699919721, 0.07314503678767037, 0.026734981781305622, 0.11385233598265276, 0.02668328261905284, 0.03505659049311416, 0.10382243122414425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03460274135032104, 9.999999999998899e-05, 9.999999999998899e-05, 0.06560238741132562, 0.040697693860823336, 0.12517710415910044, 0.027452542067932906, 0.05185586143496512, 0.03789803544932979, 0.09412149730525565, 0.0695821600978399, 0.048388725740604266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026945818366160945, 9.999999999998899e-05, 0.0034989786845671667, 0.012137315189182707, 9.999999999998899e-05, 0.00250730070176286, 0.008915172414253214, 9.999999999998899e-05, 0.04546242162063552, 0.27522368784847895, 0.19851579252556306, 0.26524394495265224, 0.27352312659271305, 0.19121222202534116, 0.1968958695458759, 0.20400092006104054, 0.24071857827739773, 0.22202279466052643, 0.04717814731558778, 0.06335479364123697, 0.050790462973075434, 0.055270447795541466, 0.056197027846440095, 0.06751957232192396, 0.06835229240226692, 0.07067884695658999, 0.07159193710229395, 0.13254128342040583, 0.13796709938586116, 0.14946540248334927, 0.1311353380314526, 0.11691910738100375, 0.12398095181481661, 0.10758563996935266, 0.12230996958278506, 0.13022104501133636, 0.15505444243411526, 0.1844674820388762, 0.14634619949582506, 0.16970090455952502, 0.23728416046608458, 0.21438803654644145, 0.225812253811984, 0.18592202749540443, 0.14252794833821458, 0.15287540201560168, 0.17392097369897386, 0.10446451077183538, 0.1538545428841549, 0.14179890926348038, 0.13931843897228102, 0.12721702159876225, 0.13139261236268995, 0.0960220644867491, 0.19932974924057334, 0.20381392401834952, 0.19030297167053278, 0.21039989419724292, 0.17578685439673813, 0.22184775245042643, 0.19075158096125866, 0.23480576478648985, 0.18019015507889757, 0.17099835372404637, 0.16354994353027918, 0.16993840490793066, 0.17621700698903364, 0.15963642619685547, 0.16617811411805983, 0.16934499390191504, 0.1621061651983342, 0.1623653896409436, 0.34818956861317185, 0.14599314505732364, 0.14246433591056995, 0.17001604119057612, 0.170945061955468, 0.27875364210917386, 0.09696132099478405, 0.16945302729113776, 0.11049106543220533, 0.2801196982683305, 0.18613073983830353, 0.24608080142192135, 0.1380806735800475, 0.1895750491362822, 0.17123894522039718, 0.10228325481475808, 0.19824854954933224, 0.08240186743380296, 0.1618574648940052, 0.1718593124898392, 0.16875604672524147, 0.17533247132120755, 0.1600642835953635, 0.16561636674616587, 0.15958282960047765, 0.1768201099770631, 0.15949049095963508, 0.09927405742085271, 0.06032366336437678, 0.0692180724511372, 0.08592901798883035, 0.06612373472494515, 0.04378462263668259, 0.0827488383827989, 0.07198010147110612, 0.08070563316961965]}, "mutation_prompt": null}
{"id": "69382fda-4698-46bc-8653-96d76a7e2cf1", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "DynamicSwarmIntelligenceOptimizer", "description": "Introducing a dynamic learning rate adaptation mechanism to adjust cognitive and social weights based on individual particle performance for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "metadata": {"aucs": [0.28771503602817594, 0.22122794491822828, 0.2643821953205199, 0.2312239982001998, 0.3509224501702777, 0.1987501720232674, 0.24984561581848574, 0.20288533917135743, 0.2701938072809028, 0.015909073905311044, 0.018968366305375794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09555489665066474, 0.06515986160683773, 0.09373972427674127, 0.04651904762741599, 0.07713894826983159, 0.08240877057902729, 0.055433807944590296, 0.07518291443019154, 0.09801380943031324, 0.030614869699730263, 0.04790229715786887, 0.055156057088729726, 0.07394358759887987, 0.05866291397532408, 0.038361733391772734, 0.052537233640777004, 0.06403616672426848, 0.05047018011976301, 0.957455633403349, 0.12024928786801814, 0.9697392244119365, 0.1379066145721043, 0.1079637881086093, 0.15076777237774563, 0.13056375958367195, 0.18761337589379978, 0.10535948888272018, 0.09125773816571237, 0.06743532961676368, 0.09337094801804358, 0.07680401226745781, 0.09927476206825903, 0.14353024515423918, 0.09183608414398492, 0.110140244877859, 9.999999999998899e-05, 0.27622735406296384, 0.1873691649785324, 0.13478528185797445, 0.17631744307345742, 0.22287035374806696, 0.15332736659839907, 0.08908739387233455, 0.21000524546777766, 0.14257020068586512, 0.10190532145526032, 0.0008295386706069774, 0.018141456075090545, 0.09925431937622742, 9.999999999998899e-05, 0.04156170278479787, 0.09854683088402183, 0.07992548981634484, 0.12435782551363261, 0.08530755027789305, 0.07814530612964876, 0.0395546699919721, 0.07314503678767037, 0.026734981781305622, 0.11385233598265276, 0.02668328261905284, 0.03505659049311416, 0.10382243122414425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03460274135032104, 9.999999999998899e-05, 9.999999999998899e-05, 0.06560238741132562, 0.040697693860823336, 0.12517710415910044, 0.027452542067932906, 0.05185586143496512, 0.03789803544932979, 0.09412149730525565, 0.0695821600978399, 0.048388725740604266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026945818366160945, 9.999999999998899e-05, 0.0034989786845671667, 0.012137315189182707, 9.999999999998899e-05, 0.00250730070176286, 0.008915172414253214, 9.999999999998899e-05, 0.04546242162063552, 0.27522368784847895, 0.19851579252556306, 0.26524394495265224, 0.27352312659271305, 0.19121222202534116, 0.1968958695458759, 0.20400092006104054, 0.24071857827739773, 0.22202279466052643, 0.04717814731558778, 0.06335479364123697, 0.050790462973075434, 0.055270447795541466, 0.056197027846440095, 0.06751957232192396, 0.06835229240226692, 0.07067884695658999, 0.07159193710229395, 0.13254128342040583, 0.13796709938586116, 0.14946540248334927, 0.1311353380314526, 0.11691910738100375, 0.12398095181481661, 0.10758563996935266, 0.12230996958278506, 0.13022104501133636, 0.15505444243411526, 0.1844674820388762, 0.14634619949582506, 0.16970090455952502, 0.23728416046608458, 0.21438803654644145, 0.225812253811984, 0.18592202749540443, 0.14252794833821458, 0.15287540201560168, 0.17392097369897386, 0.10446451077183538, 0.1538545428841549, 0.14179890926348038, 0.13931843897228102, 0.12721702159876225, 0.13139261236268995, 0.0960220644867491, 0.19932974924057334, 0.20381392401834952, 0.19030297167053278, 0.21039989419724292, 0.17578685439673813, 0.22184775245042643, 0.19075158096125866, 0.23480576478648985, 0.18019015507889757, 0.17099835372404637, 0.16354994353027918, 0.16993840490793066, 0.17621700698903364, 0.15963642619685547, 0.16617811411805983, 0.16934499390191504, 0.1621061651983342, 0.1623653896409436, 0.34818956861317185, 0.14599314505732364, 0.14246433591056995, 0.17001604119057612, 0.170945061955468, 0.27875364210917386, 0.09696132099478405, 0.16945302729113776, 0.11049106543220533, 0.2801196982683305, 0.18613073983830353, 0.24608080142192135, 0.1380806735800475, 0.1895750491362822, 0.17123894522039718, 0.10228325481475808, 0.19824854954933224, 0.08240186743380296, 0.1618574648940052, 0.1718593124898392, 0.16875604672524147, 0.17533247132120755, 0.1600642835953635, 0.16561636674616587, 0.15958282960047765, 0.1768201099770631, 0.15949049095963508, 0.09927405742085271, 0.06032366336437678, 0.0692180724511372, 0.08592901798883035, 0.06612373472494515, 0.04378462263668259, 0.0827488383827989, 0.07198010147110612, 0.08070563316961965]}, "mutation_prompt": null}
{"id": "64fc7c1c-42ea-450c-a07d-208ad13d2722", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "DynamicSwarmIntelligenceOptimizer", "description": "Introducing a dynamic learning rate adaptation mechanism to adjust cognitive and social weights based on individual particle performance for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "metadata": {"aucs": [0.28771503602817594, 0.22122794491822828, 0.2643821953205199, 0.2312239982001998, 0.3509224501702777, 0.1987501720232674, 0.24984561581848574, 0.20288533917135743, 0.2701938072809028, 0.015909073905311044, 0.018968366305375794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09555489665066474, 0.06515986160683773, 0.09373972427674127, 0.04651904762741599, 0.07713894826983159, 0.08240877057902729, 0.055433807944590296, 0.07518291443019154, 0.09801380943031324, 0.030614869699730263, 0.04790229715786887, 0.055156057088729726, 0.07394358759887987, 0.05866291397532408, 0.038361733391772734, 0.052537233640777004, 0.06403616672426848, 0.05047018011976301, 0.957455633403349, 0.12024928786801814, 0.9697392244119365, 0.1379066145721043, 0.1079637881086093, 0.15076777237774563, 0.13056375958367195, 0.18761337589379978, 0.10535948888272018, 0.09125773816571237, 0.06743532961676368, 0.09337094801804358, 0.07680401226745781, 0.09927476206825903, 0.14353024515423918, 0.09183608414398492, 0.110140244877859, 9.999999999998899e-05, 0.27622735406296384, 0.1873691649785324, 0.13478528185797445, 0.17631744307345742, 0.22287035374806696, 0.15332736659839907, 0.08908739387233455, 0.21000524546777766, 0.14257020068586512, 0.10190532145526032, 0.0008295386706069774, 0.018141456075090545, 0.09925431937622742, 9.999999999998899e-05, 0.04156170278479787, 0.09854683088402183, 0.07992548981634484, 0.12435782551363261, 0.08530755027789305, 0.07814530612964876, 0.0395546699919721, 0.07314503678767037, 0.026734981781305622, 0.11385233598265276, 0.02668328261905284, 0.03505659049311416, 0.10382243122414425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03460274135032104, 9.999999999998899e-05, 9.999999999998899e-05, 0.06560238741132562, 0.040697693860823336, 0.12517710415910044, 0.027452542067932906, 0.05185586143496512, 0.03789803544932979, 0.09412149730525565, 0.0695821600978399, 0.048388725740604266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026945818366160945, 9.999999999998899e-05, 0.0034989786845671667, 0.012137315189182707, 9.999999999998899e-05, 0.00250730070176286, 0.008915172414253214, 9.999999999998899e-05, 0.04546242162063552, 0.27522368784847895, 0.19851579252556306, 0.26524394495265224, 0.27352312659271305, 0.19121222202534116, 0.1968958695458759, 0.20400092006104054, 0.24071857827739773, 0.22202279466052643, 0.04717814731558778, 0.06335479364123697, 0.050790462973075434, 0.055270447795541466, 0.056197027846440095, 0.06751957232192396, 0.06835229240226692, 0.07067884695658999, 0.07159193710229395, 0.13254128342040583, 0.13796709938586116, 0.14946540248334927, 0.1311353380314526, 0.11691910738100375, 0.12398095181481661, 0.10758563996935266, 0.12230996958278506, 0.13022104501133636, 0.15505444243411526, 0.1844674820388762, 0.14634619949582506, 0.16970090455952502, 0.23728416046608458, 0.21438803654644145, 0.225812253811984, 0.18592202749540443, 0.14252794833821458, 0.15287540201560168, 0.17392097369897386, 0.10446451077183538, 0.1538545428841549, 0.14179890926348038, 0.13931843897228102, 0.12721702159876225, 0.13139261236268995, 0.0960220644867491, 0.19932974924057334, 0.20381392401834952, 0.19030297167053278, 0.21039989419724292, 0.17578685439673813, 0.22184775245042643, 0.19075158096125866, 0.23480576478648985, 0.18019015507889757, 0.17099835372404637, 0.16354994353027918, 0.16993840490793066, 0.17621700698903364, 0.15963642619685547, 0.16617811411805983, 0.16934499390191504, 0.1621061651983342, 0.1623653896409436, 0.34818956861317185, 0.14599314505732364, 0.14246433591056995, 0.17001604119057612, 0.170945061955468, 0.27875364210917386, 0.09696132099478405, 0.16945302729113776, 0.11049106543220533, 0.2801196982683305, 0.18613073983830353, 0.24608080142192135, 0.1380806735800475, 0.1895750491362822, 0.17123894522039718, 0.10228325481475808, 0.19824854954933224, 0.08240186743380296, 0.1618574648940052, 0.1718593124898392, 0.16875604672524147, 0.17533247132120755, 0.1600642835953635, 0.16561636674616587, 0.15958282960047765, 0.1768201099770631, 0.15949049095963508, 0.09927405742085271, 0.06032366336437678, 0.0692180724511372, 0.08592901798883035, 0.06612373472494515, 0.04378462263668259, 0.0827488383827989, 0.07198010147110612, 0.08070563316961965]}, "mutation_prompt": null}
{"id": "3843d1bc-799e-45dd-ba07-61674a238b59", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "DynamicSwarmIntelligenceOptimizer", "description": "Introducing a dynamic learning rate adaptation mechanism to adjust cognitive and social weights based on individual particle performance for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "metadata": {"aucs": [0.28771503602817594, 0.22122794491822828, 0.2643821953205199, 0.2312239982001998, 0.3509224501702777, 0.1987501720232674, 0.24984561581848574, 0.20288533917135743, 0.2701938072809028, 0.015909073905311044, 0.018968366305375794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09555489665066474, 0.06515986160683773, 0.09373972427674127, 0.04651904762741599, 0.07713894826983159, 0.08240877057902729, 0.055433807944590296, 0.07518291443019154, 0.09801380943031324, 0.030614869699730263, 0.04790229715786887, 0.055156057088729726, 0.07394358759887987, 0.05866291397532408, 0.038361733391772734, 0.052537233640777004, 0.06403616672426848, 0.05047018011976301, 0.957455633403349, 0.12024928786801814, 0.9697392244119365, 0.1379066145721043, 0.1079637881086093, 0.15076777237774563, 0.13056375958367195, 0.18761337589379978, 0.10535948888272018, 0.09125773816571237, 0.06743532961676368, 0.09337094801804358, 0.07680401226745781, 0.09927476206825903, 0.14353024515423918, 0.09183608414398492, 0.110140244877859, 9.999999999998899e-05, 0.27622735406296384, 0.1873691649785324, 0.13478528185797445, 0.17631744307345742, 0.22287035374806696, 0.15332736659839907, 0.08908739387233455, 0.21000524546777766, 0.14257020068586512, 0.10190532145526032, 0.0008295386706069774, 0.018141456075090545, 0.09925431937622742, 9.999999999998899e-05, 0.04156170278479787, 0.09854683088402183, 0.07992548981634484, 0.12435782551363261, 0.08530755027789305, 0.07814530612964876, 0.0395546699919721, 0.07314503678767037, 0.026734981781305622, 0.11385233598265276, 0.02668328261905284, 0.03505659049311416, 0.10382243122414425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03460274135032104, 9.999999999998899e-05, 9.999999999998899e-05, 0.06560238741132562, 0.040697693860823336, 0.12517710415910044, 0.027452542067932906, 0.05185586143496512, 0.03789803544932979, 0.09412149730525565, 0.0695821600978399, 0.048388725740604266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026945818366160945, 9.999999999998899e-05, 0.0034989786845671667, 0.012137315189182707, 9.999999999998899e-05, 0.00250730070176286, 0.008915172414253214, 9.999999999998899e-05, 0.04546242162063552, 0.27522368784847895, 0.19851579252556306, 0.26524394495265224, 0.27352312659271305, 0.19121222202534116, 0.1968958695458759, 0.20400092006104054, 0.24071857827739773, 0.22202279466052643, 0.04717814731558778, 0.06335479364123697, 0.050790462973075434, 0.055270447795541466, 0.056197027846440095, 0.06751957232192396, 0.06835229240226692, 0.07067884695658999, 0.07159193710229395, 0.13254128342040583, 0.13796709938586116, 0.14946540248334927, 0.1311353380314526, 0.11691910738100375, 0.12398095181481661, 0.10758563996935266, 0.12230996958278506, 0.13022104501133636, 0.15505444243411526, 0.1844674820388762, 0.14634619949582506, 0.16970090455952502, 0.23728416046608458, 0.21438803654644145, 0.225812253811984, 0.18592202749540443, 0.14252794833821458, 0.15287540201560168, 0.17392097369897386, 0.10446451077183538, 0.1538545428841549, 0.14179890926348038, 0.13931843897228102, 0.12721702159876225, 0.13139261236268995, 0.0960220644867491, 0.19932974924057334, 0.20381392401834952, 0.19030297167053278, 0.21039989419724292, 0.17578685439673813, 0.22184775245042643, 0.19075158096125866, 0.23480576478648985, 0.18019015507889757, 0.17099835372404637, 0.16354994353027918, 0.16993840490793066, 0.17621700698903364, 0.15963642619685547, 0.16617811411805983, 0.16934499390191504, 0.1621061651983342, 0.1623653896409436, 0.34818956861317185, 0.14599314505732364, 0.14246433591056995, 0.17001604119057612, 0.170945061955468, 0.27875364210917386, 0.09696132099478405, 0.16945302729113776, 0.11049106543220533, 0.2801196982683305, 0.18613073983830353, 0.24608080142192135, 0.1380806735800475, 0.1895750491362822, 0.17123894522039718, 0.10228325481475808, 0.19824854954933224, 0.08240186743380296, 0.1618574648940052, 0.1718593124898392, 0.16875604672524147, 0.17533247132120755, 0.1600642835953635, 0.16561636674616587, 0.15958282960047765, 0.1768201099770631, 0.15949049095963508, 0.09927405742085271, 0.06032366336437678, 0.0692180724511372, 0.08592901798883035, 0.06612373472494515, 0.04378462263668259, 0.0827488383827989, 0.07198010147110612, 0.08070563316961965]}, "mutation_prompt": null}
{"id": "f446a998-907a-45ad-9cf3-cb16908e1d91", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "DynamicSwarmIntelligenceOptimizer", "description": "Introducing a dynamic learning rate adaptation mechanism to adjust cognitive and social weights based on individual particle performance for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "metadata": {"aucs": [0.28771503602817594, 0.22122794491822828, 0.2643821953205199, 0.2312239982001998, 0.3509224501702777, 0.1987501720232674, 0.24984561581848574, 0.20288533917135743, 0.2701938072809028, 0.015909073905311044, 0.018968366305375794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09555489665066474, 0.06515986160683773, 0.09373972427674127, 0.04651904762741599, 0.07713894826983159, 0.08240877057902729, 0.055433807944590296, 0.07518291443019154, 0.09801380943031324, 0.030614869699730263, 0.04790229715786887, 0.055156057088729726, 0.07394358759887987, 0.05866291397532408, 0.038361733391772734, 0.052537233640777004, 0.06403616672426848, 0.05047018011976301, 0.957455633403349, 0.12024928786801814, 0.9697392244119365, 0.1379066145721043, 0.1079637881086093, 0.15076777237774563, 0.13056375958367195, 0.18761337589379978, 0.10535948888272018, 0.09125773816571237, 0.06743532961676368, 0.09337094801804358, 0.07680401226745781, 0.09927476206825903, 0.14353024515423918, 0.09183608414398492, 0.110140244877859, 9.999999999998899e-05, 0.27622735406296384, 0.1873691649785324, 0.13478528185797445, 0.17631744307345742, 0.22287035374806696, 0.15332736659839907, 0.08908739387233455, 0.21000524546777766, 0.14257020068586512, 0.10190532145526032, 0.0008295386706069774, 0.018141456075090545, 0.09925431937622742, 9.999999999998899e-05, 0.04156170278479787, 0.09854683088402183, 0.07992548981634484, 0.12435782551363261, 0.08530755027789305, 0.07814530612964876, 0.0395546699919721, 0.07314503678767037, 0.026734981781305622, 0.11385233598265276, 0.02668328261905284, 0.03505659049311416, 0.10382243122414425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03460274135032104, 9.999999999998899e-05, 9.999999999998899e-05, 0.06560238741132562, 0.040697693860823336, 0.12517710415910044, 0.027452542067932906, 0.05185586143496512, 0.03789803544932979, 0.09412149730525565, 0.0695821600978399, 0.048388725740604266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026945818366160945, 9.999999999998899e-05, 0.0034989786845671667, 0.012137315189182707, 9.999999999998899e-05, 0.00250730070176286, 0.008915172414253214, 9.999999999998899e-05, 0.04546242162063552, 0.27522368784847895, 0.19851579252556306, 0.26524394495265224, 0.27352312659271305, 0.19121222202534116, 0.1968958695458759, 0.20400092006104054, 0.24071857827739773, 0.22202279466052643, 0.04717814731558778, 0.06335479364123697, 0.050790462973075434, 0.055270447795541466, 0.056197027846440095, 0.06751957232192396, 0.06835229240226692, 0.07067884695658999, 0.07159193710229395, 0.13254128342040583, 0.13796709938586116, 0.14946540248334927, 0.1311353380314526, 0.11691910738100375, 0.12398095181481661, 0.10758563996935266, 0.12230996958278506, 0.13022104501133636, 0.15505444243411526, 0.1844674820388762, 0.14634619949582506, 0.16970090455952502, 0.23728416046608458, 0.21438803654644145, 0.225812253811984, 0.18592202749540443, 0.14252794833821458, 0.15287540201560168, 0.17392097369897386, 0.10446451077183538, 0.1538545428841549, 0.14179890926348038, 0.13931843897228102, 0.12721702159876225, 0.13139261236268995, 0.0960220644867491, 0.19932974924057334, 0.20381392401834952, 0.19030297167053278, 0.21039989419724292, 0.17578685439673813, 0.22184775245042643, 0.19075158096125866, 0.23480576478648985, 0.18019015507889757, 0.17099835372404637, 0.16354994353027918, 0.16993840490793066, 0.17621700698903364, 0.15963642619685547, 0.16617811411805983, 0.16934499390191504, 0.1621061651983342, 0.1623653896409436, 0.34818956861317185, 0.14599314505732364, 0.14246433591056995, 0.17001604119057612, 0.170945061955468, 0.27875364210917386, 0.09696132099478405, 0.16945302729113776, 0.11049106543220533, 0.2801196982683305, 0.18613073983830353, 0.24608080142192135, 0.1380806735800475, 0.1895750491362822, 0.17123894522039718, 0.10228325481475808, 0.19824854954933224, 0.08240186743380296, 0.1618574648940052, 0.1718593124898392, 0.16875604672524147, 0.17533247132120755, 0.1600642835953635, 0.16561636674616587, 0.15958282960047765, 0.1768201099770631, 0.15949049095963508, 0.09927405742085271, 0.06032366336437678, 0.0692180724511372, 0.08592901798883035, 0.06612373472494515, 0.04378462263668259, 0.0827488383827989, 0.07198010147110612, 0.08070563316961965]}, "mutation_prompt": null}
{"id": "ea35bf8d-8c5e-4565-9866-efbe19a98009", "solution": "import numpy as np\n\nclass EnhancedSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                adaptive_inertia_weight = self.inertia_weight * ((self.inertia_weight + 1) / (self.inertia_weight + 2))\n                velocities[i] = adaptive_inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "EnhancedSwarmIntelligenceOptimizer", "description": "Implementing a novel adaptive inertia weight mechanism that dynamically adjusts based on the convergence behavior of the swarm to improve convergence speed.", "configspace": "", "generation": 21, "fitness": 0.10817197848470309, "feedback": "The algorithm EnhancedSwarmIntelligenceOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "metadata": {"aucs": [0.1945877299550095, 0.2114357023948572, 0.2295296059020474, 0.20753547268726447, 0.3147547681314057, 0.31307668588664406, 0.2172643020494731, 0.2630346568196664, 0.23534477094849393, 0.017633815499876415, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07087044017496724, 0.08141747572238167, 0.04969790523826412, 0.0678159722387216, 0.07048462077196294, 0.06232861486503316, 0.06343353478607006, 0.0802258956381443, 0.0836132077038243, 0.03684082987940218, 0.0696461472897707, 0.03994506108534679, 0.05213275370520842, 0.05728516772095349, 0.02799375181249708, 0.06496638945465527, 0.06351941673175499, 0.06400950790359439, 0.1012843784511499, 0.0949977695466534, 0.11411599601429157, 0.09559543516293922, 0.09346678629403182, 0.10567813926794911, 0.1228680134701795, 0.09556721367203969, 0.08787109788874425, 0.0749316059589259, 0.05867595955698124, 0.08506999276007554, 0.1250457969478721, 0.1261004076309289, 0.09388974400411332, 0.08948858746935351, 0.06343085253975556, 9.999999999998899e-05, 0.22398761466073358, 0.11123815412602944, 0.09578045759497089, 0.27299709995023747, 0.1945437648896141, 0.14873780413586302, 0.07945567363294426, 0.13775213375996942, 0.04929892736077979, 0.07317944830540868, 9.999999999998899e-05, 0.002061918802947371, 0.0804680672878596, 0.05986919366036614, 9.999999999998899e-05, 0.039024132795932975, 0.0338263966853779, 0.13265280892382358, 0.06668093557676091, 0.03285551009291554, 0.0020346777464872456, 0.0376569183578489, 9.999999999998899e-05, 0.09536549097272562, 0.028630607200015756, 0.0589101611142272, 0.020602187728851695, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03552713497793103, 9.999999999998899e-05, 0.10717659934144463, 0.11102253110839355, 0.12554272699574054, 0.04952801213728131, 0.03522001710571654, 0.043738989427402286, 0.06777420834784842, 0.09070093992509243, 0.07061237930143593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019551793756034552, 9.999999999998899e-05, 0.010851134730374357, 0.0034316752224936575, 0.01054450447364419, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032224255362882426, 0.22963961185093784, 0.22547265209461098, 0.2640052976875087, 0.2059848849328363, 0.18387857232057214, 0.21086272001974826, 0.2796831279287033, 0.26742723734364804, 0.25713355278897276, 0.0491813873886795, 0.06840428525909825, 0.04136122707186918, 0.06888418452193779, 0.060846803833226604, 0.051093316970703406, 0.08236233927454217, 0.05033648854196637, 0.05765413750653803, 0.1088842492837444, 0.15022097598148743, 0.17064350416378815, 0.11958400754806409, 0.12656088682917066, 0.147779177275841, 0.16162982118970326, 0.14441982244611207, 0.11429457742168214, 0.15385258546303937, 0.20554666470728256, 0.15460829970699053, 0.20311500658683934, 0.1853387980398129, 0.18130706931990948, 0.2023200348398787, 0.22301636778884404, 0.14955808286829309, 0.1333112018545597, 0.19551205502895797, 0.13532846639796903, 0.13381213067646258, 0.15840827717983574, 0.1283028484547034, 0.10287609096544859, 0.14449694886411257, 0.10056583532135388, 0.23757933207474857, 0.21501920188266344, 0.20498609115831434, 0.1935458611309676, 0.21532111529246178, 0.20198409195939115, 0.1937946029237524, 0.22340647566275162, 0.19369034394419682, 0.15630721785161383, 0.16428618327125677, 0.1683144362166682, 0.15852404454781188, 0.17363186993090418, 0.16652488071223814, 0.15579035696328114, 0.1588232991637879, 0.17148862367014683, 0.2330198871566641, 0.14641888149054572, 0.1193620659049528, 0.167913657120915, 0.16463571842120694, 0.13372819040510897, 0.11396958409735303, 0.1660997178193585, 0.14005255871450317, 0.3253295077798454, 0.1651608539498426, 0.17538597114059884, 0.22469096649390163, 0.15679132758388492, 0.31487176598277455, 0.10187367071630593, 0.21449718603287637, 0.09154536732635243, 0.16651883154294245, 0.18676684999462, 0.20238357367092186, 0.15589508155361598, 0.16973223985220098, 0.16432355676820842, 0.17912276936982785, 0.18844977215432068, 0.1807869852487387, 0.07383486233660386, 0.059360143275377975, 0.08719259041631044, 0.06356349542412842, 0.07273383821466906, 0.08239495563599708, 0.0750034678943452, 0.04972132644555549, 0.07663352565386938]}, "mutation_prompt": null}
{"id": "6f31e1bb-b007-4290-a8a5-342aaf250fef", "solution": "import numpy as np\n\nclass AcceleratedParticleSwarmOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, acceleration_coeff=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.acceleration_coeff = acceleration_coeff\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    self.inertia_weight = max(0.1, self.inertia_weight - self.acceleration_coeff)  # Adaptive acceleration coefficient\n                    \n        return global_best_position", "name": "AcceleratedParticleSwarmOptimizer", "description": "Implementing a novel Accelerated Particle Swarm Optimization by incorporating an adaptive acceleration coefficient to enhance convergence speed.", "configspace": "", "generation": 22, "fitness": 0.10573942343345008, "feedback": "The algorithm AcceleratedParticleSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "metadata": {"aucs": [0.1623409805226873, 0.19370558317814845, 0.25712364542908794, 0.1953951955147193, 0.2568657865559184, 0.2540405566534074, 0.22431123409041764, 0.2497309146577824, 0.17440251759968728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07810840531364482, 0.09082331141751876, 0.044994037438468304, 0.07021612028840696, 0.05895823969353664, 0.06828556708919209, 0.042606717401126315, 0.07774142145772, 0.06992161144034181, 0.030467573576701934, 0.04433617355039954, 0.03966014176349675, 0.06098507101447814, 0.05335074201942702, 0.05466591461458903, 0.04891135042947825, 0.07676164723711387, 0.03732399960260269, 0.08545148569229621, 0.06579569910950811, 0.1088575026317885, 0.08201390591245594, 0.08257635840783473, 0.0894653137097301, 0.09169837052228413, 0.09407179292426748, 0.0823273359634169, 0.10498389202989533, 0.09009244747327372, 0.08947372662747088, 0.12053500632415981, 0.08104986466997888, 0.08657202107536799, 0.0634821522560245, 0.08772855508687893, 9.999999999998899e-05, 0.16660908911538286, 0.153996815736264, 0.11264405967100066, 0.1656538126689857, 0.0764973523760869, 0.14265398000872442, 0.08228738107585798, 0.1380964113781522, 0.15395022189066354, 0.07326861040220323, 9.999999999998899e-05, 9.999999999998899e-05, 0.03460167410823711, 0.023743194516325783, 9.999999999998899e-05, 0.01768017629412222, 0.03125706761092384, 0.09493305325449253, 0.07003499350637488, 9.999999999998899e-05, 0.018137428784102516, 0.02011865646911082, 0.130281904749322, 0.07132563364727718, 0.052491172112342444, 0.011993015025522413, 0.10363222807502315, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009678427001255652, 9.999999999998899e-05, 9.999999999998899e-05, 0.10043304431411382, 0.05876229999470428, 0.11229560807009564, 0.03556950006970294, 0.03778305932464132, 0.017565569583916973, 0.058452048711378324, 0.06602347210608928, 0.06499094417952278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005336940558073322, 9.999999999998899e-05, 9.999999999998899e-05, 0.020098777180483918, 9.999999999998899e-05, 0.0028372837069300383, 9.999999999998899e-05, 0.06894008392696838, 0.21629654219949312, 0.16457579214000384, 0.22936762673466204, 0.2176246043903488, 0.35451735904569415, 0.2331969140921767, 0.20049843160534198, 0.26150670819850996, 0.24914065254582163, 0.03730122194353713, 0.043114135630622163, 0.0269275976612533, 0.08112884540531828, 0.06784905970653687, 0.08015514876608654, 0.08854288520063891, 0.06810295524566423, 0.05456711695423888, 0.13069182021548753, 0.11656843087458313, 0.11809702017184065, 0.11640207662752944, 0.1340252064675176, 0.11168606646025259, 0.10904132433687974, 0.14233621872862146, 0.16053451697507481, 0.1504899837701429, 0.18174805966997154, 0.16699898911100375, 0.18454026607892882, 0.2066017406614885, 0.17700402731817033, 0.19654730902193218, 0.19516853048606275, 0.15506299395786105, 0.20334509166206471, 0.12874534766405055, 0.1303909264989308, 0.12417478684208894, 0.144483440823309, 0.16089272912581143, 0.10267113661052063, 0.17059357998974267, 0.13096611866734498, 0.20982015163691525, 0.16724284013154433, 0.20150824924179656, 0.18835358675885205, 0.21346220008089556, 0.21004577850377737, 0.19628393395858856, 0.17993716344383626, 0.21453083564253594, 0.16709541153030072, 0.16496661864991058, 0.1744289923289798, 0.16540666551553118, 0.15526200701247905, 0.16107726841373493, 0.16547047442664975, 0.15949602786171968, 0.1582494975542561, 0.29881620190572555, 0.1652405403686007, 0.13674533186990578, 0.16782491915447262, 0.1667212294942163, 0.2879543435096624, 0.10465574944222389, 0.1659988725693422, 0.1350664274244644, 0.3961551949589075, 0.17110829953106454, 0.3064084040574955, 0.18694915603549056, 0.15200136456013447, 0.17917682250158962, 0.10002760806921907, 0.2438251160209004, 0.1378936111040635, 0.18070268043388482, 0.18705133258659656, 0.16335796421730064, 0.16519868189163045, 0.172600376171808, 0.17212918696387802, 0.16994766407293904, 0.17935040498380406, 0.17443960322060326, 0.07485633642692979, 0.08167228787157632, 0.06309110323489131, 0.06503530293614823, 0.08395396388732423, 0.0676781286647623, 0.07332634119947523, 0.0782323547723226, 0.0771986353652937]}, "mutation_prompt": null}
{"id": "249b0c3b-6462-499e-a7d8-e21de40eb091", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "DynamicSwarmIntelligenceOptimizer", "description": "Introducing a dynamic learning rate adaptation mechanism to adjust cognitive and social weights based on individual particle performance for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "metadata": {"aucs": [0.28771503602817594, 0.22122794491822828, 0.2643821953205199, 0.2312239982001998, 0.3509224501702777, 0.1987501720232674, 0.24984561581848574, 0.20288533917135743, 0.2701938072809028, 0.015909073905311044, 0.018968366305375794, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09555489665066474, 0.06515986160683773, 0.09373972427674127, 0.04651904762741599, 0.07713894826983159, 0.08240877057902729, 0.055433807944590296, 0.07518291443019154, 0.09801380943031324, 0.030614869699730263, 0.04790229715786887, 0.055156057088729726, 0.07394358759887987, 0.05866291397532408, 0.038361733391772734, 0.052537233640777004, 0.06403616672426848, 0.05047018011976301, 0.957455633403349, 0.12024928786801814, 0.9697392244119365, 0.1379066145721043, 0.1079637881086093, 0.15076777237774563, 0.13056375958367195, 0.18761337589379978, 0.10535948888272018, 0.09125773816571237, 0.06743532961676368, 0.09337094801804358, 0.07680401226745781, 0.09927476206825903, 0.14353024515423918, 0.09183608414398492, 0.110140244877859, 9.999999999998899e-05, 0.27622735406296384, 0.1873691649785324, 0.13478528185797445, 0.17631744307345742, 0.22287035374806696, 0.15332736659839907, 0.08908739387233455, 0.21000524546777766, 0.14257020068586512, 0.10190532145526032, 0.0008295386706069774, 0.018141456075090545, 0.09925431937622742, 9.999999999998899e-05, 0.04156170278479787, 0.09854683088402183, 0.07992548981634484, 0.12435782551363261, 0.08530755027789305, 0.07814530612964876, 0.0395546699919721, 0.07314503678767037, 0.026734981781305622, 0.11385233598265276, 0.02668328261905284, 0.03505659049311416, 0.10382243122414425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03460274135032104, 9.999999999998899e-05, 9.999999999998899e-05, 0.06560238741132562, 0.040697693860823336, 0.12517710415910044, 0.027452542067932906, 0.05185586143496512, 0.03789803544932979, 0.09412149730525565, 0.0695821600978399, 0.048388725740604266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026945818366160945, 9.999999999998899e-05, 0.0034989786845671667, 0.012137315189182707, 9.999999999998899e-05, 0.00250730070176286, 0.008915172414253214, 9.999999999998899e-05, 0.04546242162063552, 0.27522368784847895, 0.19851579252556306, 0.26524394495265224, 0.27352312659271305, 0.19121222202534116, 0.1968958695458759, 0.20400092006104054, 0.24071857827739773, 0.22202279466052643, 0.04717814731558778, 0.06335479364123697, 0.050790462973075434, 0.055270447795541466, 0.056197027846440095, 0.06751957232192396, 0.06835229240226692, 0.07067884695658999, 0.07159193710229395, 0.13254128342040583, 0.13796709938586116, 0.14946540248334927, 0.1311353380314526, 0.11691910738100375, 0.12398095181481661, 0.10758563996935266, 0.12230996958278506, 0.13022104501133636, 0.15505444243411526, 0.1844674820388762, 0.14634619949582506, 0.16970090455952502, 0.23728416046608458, 0.21438803654644145, 0.225812253811984, 0.18592202749540443, 0.14252794833821458, 0.15287540201560168, 0.17392097369897386, 0.10446451077183538, 0.1538545428841549, 0.14179890926348038, 0.13931843897228102, 0.12721702159876225, 0.13139261236268995, 0.0960220644867491, 0.19932974924057334, 0.20381392401834952, 0.19030297167053278, 0.21039989419724292, 0.17578685439673813, 0.22184775245042643, 0.19075158096125866, 0.23480576478648985, 0.18019015507889757, 0.17099835372404637, 0.16354994353027918, 0.16993840490793066, 0.17621700698903364, 0.15963642619685547, 0.16617811411805983, 0.16934499390191504, 0.1621061651983342, 0.1623653896409436, 0.34818956861317185, 0.14599314505732364, 0.14246433591056995, 0.17001604119057612, 0.170945061955468, 0.27875364210917386, 0.09696132099478405, 0.16945302729113776, 0.11049106543220533, 0.2801196982683305, 0.18613073983830353, 0.24608080142192135, 0.1380806735800475, 0.1895750491362822, 0.17123894522039718, 0.10228325481475808, 0.19824854954933224, 0.08240186743380296, 0.1618574648940052, 0.1718593124898392, 0.16875604672524147, 0.17533247132120755, 0.1600642835953635, 0.16561636674616587, 0.15958282960047765, 0.1768201099770631, 0.15949049095963508, 0.09927405742085271, 0.06032366336437678, 0.0692180724511372, 0.08592901798883035, 0.06612373472494515, 0.04378462263668259, 0.0827488383827989, 0.07198010147110612, 0.08070563316961965]}, "mutation_prompt": null}
{"id": "f2c37aa5-429d-44d8-b49b-3cd803a4f81a", "solution": "import numpy as np\n\nclass OppositeDynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                \n                # Introducing mutation based on opposition-based learning\n                if np.random.rand() < self.mutation_rate:\n                    opposite_position = 2 * np.mean(swarm) - swarm[i]\n                    swarm[i] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                else:\n                    swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "OppositeDynamicSwarmIntelligenceOptimizer", "description": "Introducing a novel mutation strategy based on the concept of opposition-based learning to enhance exploration and exploitation capabilities for faster convergence.", "configspace": "", "generation": 24, "fitness": 0.12373394711777842, "feedback": "The algorithm OppositeDynamicSwarmIntelligenceOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.13.", "error": "", "parent_id": "8a4aa746-3d3f-43cd-a4ae-b218ca4d5230", "metadata": {"aucs": [0.2847214333558008, 0.3211543637857761, 0.27736049375175287, 0.3366890380494849, 0.23508014417634837, 0.2556636638704307, 0.2918649545865014, 0.31217525321147643, 0.2696195418048881, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05756510784405633, 0.05683540523888919, 0.07323361652455584, 0.05733821511663262, 0.06803378624813627, 0.06297350018343972, 0.07096430128534137, 0.07614533763976217, 0.080623006758068, 0.054877127821975735, 0.04876182957515107, 0.03017573262553941, 0.06155400180898485, 0.06786183334869533, 0.03611245685688058, 0.05206087031037643, 0.07978753701297969, 0.052373270642644076, 0.9673638995593332, 0.9672946929460498, 0.9322436203867327, 0.1416063113104159, 0.14401408038139252, 0.23939177001729683, 0.14443159451479892, 0.09475755955359055, 0.2855389880416034, 0.11433989467435257, 0.10480129033262509, 0.07588382824870132, 0.15278632265797132, 0.08601541732195839, 0.0885775730723235, 0.07440536587910351, 0.0927541636050433, 0.12080584529058436, 0.15916084475789194, 0.14770805319438218, 0.16571083211860083, 0.19498715952037304, 0.14028183647343817, 0.1936020565657578, 0.12197453067021746, 0.16604950680770836, 0.17475104607078706, 0.10101032660640563, 0.00871488488705141, 0.01824934846348858, 9.999999999998899e-05, 0.033973019367092294, 9.999999999998899e-05, 0.0595785369488222, 0.03291985426330579, 0.06497711547622997, 0.09191464079159672, 0.04557321568477568, 0.06207954993588394, 0.062092715986631464, 0.06622228198691882, 0.07813985538888923, 0.16552724751347048, 0.03134653758928141, 0.10968975961771232, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11625262954183158, 0.029552410970028586, 0.11320541962085284, 0.02094107446714477, 0.007732808493061016, 0.02116195612444427, 0.08150575493315815, 0.026870408709837146, 0.01827602512510662, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212977368544648, 0.025059042531650588, 0.02708370644108904, 9.999999999998899e-05, 0.0041766605346467145, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011005099596234857, 0.31113569643529615, 0.17383135322651633, 0.24271782106156958, 0.31064628634995484, 0.18091070235232354, 0.2010583765840943, 0.2650316230506039, 0.29579259620085874, 0.28601440257652244, 0.056305168517844284, 0.050267901327947784, 0.03763417218926657, 0.08015371696762086, 0.0765010581618153, 0.06446283915345319, 0.06280817706333075, 0.05959070516439735, 0.05336908564274978, 0.11741576446588242, 0.11522544316688799, 0.13434148384478417, 0.12358443530902474, 0.13601195900893048, 0.11621249860891081, 0.11612630068928742, 0.18486930441993077, 0.14415432345774293, 0.14052034518250622, 0.19263609817200844, 0.1534905407997994, 0.20936563569390299, 0.19149843291681035, 0.17408671232848338, 0.21269399515336973, 0.19557478208447399, 0.1775824267624937, 0.09155648379125703, 0.14793667475485672, 0.12313680303711738, 0.14899910898348256, 0.12449106580511704, 0.15379677880128984, 0.11929561676799172, 0.15279542353350717, 0.12523262505126365, 0.1780308943585911, 0.1825444840188155, 0.19679771539296753, 0.21728568269154025, 0.24195077318956226, 0.1763823670173178, 0.18349776131270157, 0.19013805916202275, 0.2254331736901347, 0.16509988310387602, 0.15383009420918947, 0.16267478137505043, 0.17811387048175764, 0.16417350966449107, 0.154719752745466, 0.1555368940972316, 0.1656043157415814, 0.1586204231749624, 0.19567131302928997, 0.1642521681248934, 0.12856101141282483, 0.179505553997105, 0.1574373892812333, 0.16575683857777423, 0.1149919646457025, 0.1723436399213646, 0.15362975725998518, 0.2591045265415297, 0.18722605501079181, 0.1585826864336446, 0.1747274919078724, 0.1669513284441868, 0.12677068692960314, 0.11013022770719783, 0.26515366666939677, 0.10964918146589375, 0.15361165405296195, 0.18251511795110587, 0.18043148539107134, 0.16999691028909691, 0.18999698291549927, 0.19278396668865894, 0.17884730034819696, 0.17356594995390473, 0.16693263118776125, 0.06460596721891343, 0.06290918399773615, 0.05875440879208105, 0.05251989588014039, 0.07092157255690368, 0.05179268046339369, 0.07265795979878586, 0.05652519060576411, 0.06823227957054456]}, "mutation_prompt": null}
{"id": "69401475-fd5e-422a-bfcb-e8af530d1354", "solution": "import numpy as np\n\nclass DynamicSwarmSizeIntelligenceOptimizer:\n    def __init__(self, budget, dim, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        swarm_size = 20\n        swarm = np.random.uniform(-5.0, 5.0, (swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                \n                # Introducing mutation based on opposition-based learning\n                if np.random.rand() < self.mutation_rate:\n                    opposite_position = 2 * np.mean(swarm) - swarm[i]\n                    swarm[i] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                else:\n                    swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n            # Dynamic population resizing based on performance\n            if np.random.rand() < 0.1:  # Adjust population size with 10% probability\n                if np.random.rand() < 0.5 and swarm_size > 10:\n                    swarm = swarm[:swarm_size//2]\n                    velocities = velocities[:swarm_size//2]\n                    p_best_positions = p_best_positions[:swarm_size//2]\n                    swarm_size = swarm_size // 2\n                elif swarm_size < 40:\n                    new_swarm = np.random.uniform(-5.0, 5.0, (swarm_size, self.dim))\n                    new_velocities = np.zeros((swarm_size, self.dim))\n                    new_p_best_positions = new_swarm.copy()\n                    swarm = np.concatenate((swarm, new_swarm))\n                    velocities = np.concatenate((velocities, new_velocities))\n                    p_best_positions = np.concatenate((p_best_positions, new_p_best_positions))\n                    swarm_size = swarm_size * 2\n                \n        return global_best_position", "name": "DynamicSwarmSizeIntelligenceOptimizer", "description": "Utilizing a dynamic population resizing strategy to adjust swarm size adaptively based on performance to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 25, "fitness": 0.1219665440327986, "feedback": "The algorithm DynamicSwarmSizeIntelligenceOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.12.", "error": "", "parent_id": "f2c37aa5-429d-44d8-b49b-3cd803a4f81a", "metadata": {"aucs": [0.20239481006164306, 0.2547492754797478, 0.298754756220003, 0.24053869477576628, 0.22635725046971655, 0.25048759502515283, 0.2064534467953416, 0.1906995813865605, 0.22617012547502668, 0.0004410287337587304, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060919242803639806, 0.06363274792097418, 0.06747641720606135, 0.0644508612071426, 0.07489024493195973, 0.07043455621469985, 0.06893530345836352, 0.076429689759276, 0.07332238356755971, 0.05101589372852067, 0.05251631460764272, 0.04946913272283959, 0.05905392496490858, 0.059085950158186074, 0.06457144069249876, 0.023849119659968165, 0.05215272332984311, 0.05266203940788239, 0.1299821054435475, 0.1275287828442142, 0.9762700926666958, 0.1119438595331067, 0.11274513206412684, 0.8883494103527051, 0.1338871901201839, 0.09384428262937583, 0.8920127168604599, 0.08524737951358563, 0.07547223828221938, 0.1184370543950618, 0.11485125389778017, 0.08826304097296234, 0.09719373748076665, 0.08018823711516632, 0.08518574135029522, 0.12230874482063314, 0.20609527435231711, 0.1629920727670282, 0.17002796703056733, 0.16086284096075165, 0.17270565641686886, 0.18204008906778157, 0.15722747579020036, 0.10979925863888274, 0.20384920813688612, 0.016682338560296772, 0.04824967702431804, 0.10498882374851037, 0.044233349034701885, 0.006424161302301723, 0.01483385953877514, 0.02643649842807949, 0.06735923409993061, 0.0880894749148281, 0.0821218770220119, 0.07828770160639253, 0.10677380794283342, 0.07455055830575308, 0.023206342190583373, 0.07551445192256578, 0.10557019177547478, 0.05199513385398291, 0.0625030220286652, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11000121284177478, 0.02717391339463715, 0.050424496957825804, 0.03560598753776811, 0.07797200959847328, 0.01794011437078913, 0.04301244318941866, 0.05790903243870904, 0.04495010325833193, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040673643239519386, 0.061428989132799705, 0.003778729689806637, 0.0018636756440714164, 9.999999999998899e-05, 9.999999999998899e-05, 0.03302393596259279, 0.00042440876391247606, 0.28716540834539495, 0.25424810454321356, 0.2959079884404995, 0.24321893450760612, 0.23733051461939247, 0.2611838376083633, 0.24264759975912575, 0.22532512588156506, 0.3122611983774469, 0.06759521714951666, 0.047859454220205766, 0.041052420118382726, 0.062353958381193064, 0.04810470610221984, 0.08673946645122377, 0.08719773650795593, 0.08894761690974351, 0.06446881047259778, 0.1340825177207564, 0.161039864898592, 0.11927464310016, 0.12409841417759326, 0.14053004812254566, 0.13099055959933303, 0.127169960781241, 0.11504837309777993, 0.12891356871739212, 0.14403508766627915, 0.18510799832977987, 0.18213067270884276, 0.1802671540662648, 0.17625608233695889, 0.20026610185654736, 0.16313653294133057, 0.19202211354491672, 0.18626773369036587, 0.0965735523514828, 0.11802477966894509, 0.16658304185928952, 0.12995448629184791, 0.11555847931548979, 0.14110621624244546, 0.12334539296842117, 0.14699523065297693, 0.13658345402901284, 0.18331435360124293, 0.18680742460184308, 0.15401195452118177, 0.22124593162898787, 0.20903676491022283, 0.1983564489455576, 0.1719569564221638, 0.2467857252061001, 0.17225180135258433, 0.1704492785170545, 0.15553768030083281, 0.16124949194129057, 0.16285730014886124, 0.1582581811843371, 0.16202249069561936, 0.1573073748026731, 0.15719362386579017, 0.16705599677093919, 0.16754161800159306, 0.16299011850261447, 0.14227278043307812, 0.4112523077678024, 0.13825393995154245, 0.20817468929828542, 0.13425393426222398, 0.18975236045814015, 0.12911285268347494, 0.26908008162909947, 0.1659512821995195, 0.24825147221089217, 0.10106051635004787, 0.1559070277039838, 0.16884224881251342, 0.3257513011975024, 0.11772240741162021, 0.132821095991431, 0.1666762804294738, 0.16496586446863715, 0.16528801786191993, 0.16809504794175756, 0.18384997131955205, 0.1927402868379865, 0.16502480984898227, 0.1666560656101359, 0.17377755163985553, 0.06153732988904759, 0.05576479984887461, 0.059357096832584055, 0.06778554577827689, 0.05827949298398527, 0.05789395579582357, 0.07733997758240407, 0.0686057869216451, 0.07934606248938003]}, "mutation_prompt": null}
{"id": "e4c872ca-5fa6-460f-8e75-6b2758c7f694", "solution": "import numpy as np\n\nclass DynamicMutationOppositeDynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.initial_mutation_rate = initial_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        mutation_rate = self.initial_mutation_rate\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                \n                # Dynamic mutation based on fitness\n                fitness_diff = np.abs(func(swarm[i]) - func(best_position))\n                mutation_rate = max(0.01, min(0.1, 0.1 * np.exp(-0.1 * fitness_diff)))\n                if np.random.rand() < mutation_rate:\n                    opposite_position = 2 * np.mean(swarm) - swarm[i]\n                    swarm[i] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                else:\n                    swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "DynamicMutationOppositeDynamicSwarmIntelligenceOptimizer", "description": "Implementing a dynamic mutation strategy based on the fitness of the solutions to adaptively adjust the mutation rate for faster convergence.", "configspace": "", "generation": 26, "fitness": 0.11395901262769266, "feedback": "The algorithm DynamicMutationOppositeDynamicSwarmIntelligenceOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.11.", "error": "", "parent_id": "f2c37aa5-429d-44d8-b49b-3cd803a4f81a", "metadata": {"aucs": [0.240866450072435, 0.24544012065684329, 0.31301738998538386, 0.2080099681645723, 0.2343860118857095, 0.2389239414409824, 0.23047658159394135, 0.25924500127832784, 0.2205623772971318, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05855304125531002, 0.06607887302854598, 0.04528770862345832, 0.055607321019423894, 0.0509764590942543, 0.07263963994958889, 0.056706366654417306, 0.055509576115904014, 0.08799423927530137, 0.05673756356492943, 0.045086973763976856, 0.04310837329963957, 0.09271576038537621, 0.05872107812956784, 0.058227452410371194, 0.04517241442385822, 0.03544041460292535, 0.06164200734537317, 0.13449781525494076, 0.17211743539838154, 0.0962927993416357, 0.9748624530089298, 0.11040288757363503, 0.1593556666181245, 0.1718214637844263, 0.9011047699599127, 0.11757287597215038, 0.08895058706621584, 0.08971816365340979, 0.10671597958155066, 0.13367579826389953, 0.09547180167084113, 0.09770304231571336, 0.11110993723885765, 0.06329682472321896, 0.056995242007960245, 0.12949904293785752, 0.12809736367788105, 0.16518300283418208, 0.22072224350752134, 0.17343435447183297, 0.17480383883015116, 0.12526141163692228, 0.15687677665604682, 0.12324712502020507, 0.074751246667767, 0.0483181124209181, 9.999999999998899e-05, 9.999999999998899e-05, 0.020283278411397654, 9.999999999998899e-05, 0.08349029666790853, 0.012807518683278785, 0.055236578098168176, 0.10987878607487422, 0.036557944476187765, 0.061089184423911314, 0.047059092899331745, 0.040296610481172834, 0.08107598908052094, 0.08624651745520462, 0.07283537582519617, 0.0364740966828615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07807819018756168, 0.05167295071673217, 0.1036932484712122, 0.05641685013435438, 0.02815615104240221, 0.021221878530576554, 0.13656737026900823, 0.11886197259952846, 0.01904493861394041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007989487544649676, 0.0073540799049692795, 0.02175202562789713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019300750412219347, 9.999999999998899e-05, 9.999999999998899e-05, 0.3159230037518622, 0.224243266005825, 0.28816790956192073, 0.24909818077628754, 0.2534582030904392, 0.27376200983654597, 0.2626235568417886, 0.22887375163467094, 0.178881819756613, 0.05494908106308627, 0.024278067100697465, 0.04663824426872831, 0.056293288337752156, 0.04470667128171013, 0.050740145666394176, 0.05917838597502578, 0.06395332640712692, 0.05244945963328751, 0.13469995520033884, 0.09140688169987443, 0.10305142683908686, 0.10349857687653075, 0.11076343408242062, 0.10674012685915368, 0.10809155495011324, 0.11504172900008247, 0.11111934887910391, 0.1497604647144133, 0.1947157210337387, 0.176485622034822, 0.203265711814966, 0.24202452709931344, 0.2315057951845828, 0.1857504850200129, 0.1835590137536829, 0.18042519821960146, 0.09517063293199501, 0.12423342054502429, 0.1175911264938504, 0.16844638774282739, 0.1868997969859626, 0.1378185321832176, 0.09365789889334031, 0.1219640814724855, 0.12082279921549266, 0.18210600270008703, 0.1973522906912798, 0.18336770544019054, 0.1775643484483116, 0.184005823076974, 0.20925607149267578, 0.21356111402781586, 0.1855373682843824, 0.1889561553285647, 0.16160553088269503, 0.15496747919513054, 0.15737704592775204, 0.15302430356350305, 0.17822835092303235, 0.15211233072392916, 0.15064665659173826, 0.1569815910362795, 0.1626302507569668, 0.2677983371874798, 0.14230521709061772, 0.12595243445857562, 0.16074046292221633, 0.1545658799205778, 0.2266310225245537, 0.09389565359324681, 0.14719609737416506, 0.1574260513187492, 0.16220349452358984, 0.1406653626172507, 0.12599983776594803, 0.20739845868916196, 0.11107501720998703, 0.17144686510536777, 0.09498614199158673, 0.2360197579195159, 0.13947977234494557, 0.197569375786111, 0.1960162499255439, 0.16331670496094663, 0.16475295127422318, 0.16137006139797982, 0.16426727262902263, 0.17764432730613278, 0.1769986206257449, 0.1556154935340548, 0.08033392508667603, 0.051085615540558904, 0.05456549526164467, 0.07272207079580695, 0.0650616958856195, 0.05550972492295836, 0.06582152324934354, 0.0654825524546635, 0.049283831852238835]}, "mutation_prompt": null}
{"id": "fddb162a-f535-4dd3-b5b6-5212d0895579", "solution": "import numpy as np\n\nclass OppositeDynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                \n                # Introducing mutation based on opposition-based learning\n                if np.random.rand() < self.mutation_rate:\n                    opposite_position = 2 * np.mean(swarm) - swarm[i]\n                    swarm[i] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                else:\n                    swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "OppositeDynamicSwarmIntelligenceOptimizer", "description": "Introducing a novel mutation strategy based on the concept of opposition-based learning to enhance exploration and exploitation capabilities for faster convergence.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2c37aa5-429d-44d8-b49b-3cd803a4f81a", "metadata": {"aucs": [0.2847214333558008, 0.3211543637857761, 0.27736049375175287, 0.3366890380494849, 0.23508014417634837, 0.2556636638704307, 0.2918649545865014, 0.31217525321147643, 0.2696195418048881, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05756510784405633, 0.05683540523888919, 0.07323361652455584, 0.05733821511663262, 0.06803378624813627, 0.06297350018343972, 0.07096430128534137, 0.07614533763976217, 0.080623006758068, 0.054877127821975735, 0.04876182957515107, 0.03017573262553941, 0.06155400180898485, 0.06786183334869533, 0.03611245685688058, 0.05206087031037643, 0.07978753701297969, 0.052373270642644076, 0.9673638995593332, 0.9672946929460498, 0.9322436203867327, 0.1416063113104159, 0.14401408038139252, 0.23939177001729683, 0.14443159451479892, 0.09475755955359055, 0.2855389880416034, 0.11433989467435257, 0.10480129033262509, 0.07588382824870132, 0.15278632265797132, 0.08601541732195839, 0.0885775730723235, 0.07440536587910351, 0.0927541636050433, 0.12080584529058436, 0.15916084475789194, 0.14770805319438218, 0.16571083211860083, 0.19498715952037304, 0.14028183647343817, 0.1936020565657578, 0.12197453067021746, 0.16604950680770836, 0.17475104607078706, 0.10101032660640563, 0.00871488488705141, 0.01824934846348858, 9.999999999998899e-05, 0.033973019367092294, 9.999999999998899e-05, 0.0595785369488222, 0.03291985426330579, 0.06497711547622997, 0.09191464079159672, 0.04557321568477568, 0.06207954993588394, 0.062092715986631464, 0.06622228198691882, 0.07813985538888923, 0.16552724751347048, 0.03134653758928141, 0.10968975961771232, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11625262954183158, 0.029552410970028586, 0.11320541962085284, 0.02094107446714477, 0.007732808493061016, 0.02116195612444427, 0.08150575493315815, 0.026870408709837146, 0.01827602512510662, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212977368544648, 0.025059042531650588, 0.02708370644108904, 9.999999999998899e-05, 0.0041766605346467145, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011005099596234857, 0.31113569643529615, 0.17383135322651633, 0.24271782106156958, 0.31064628634995484, 0.18091070235232354, 0.2010583765840943, 0.2650316230506039, 0.29579259620085874, 0.28601440257652244, 0.056305168517844284, 0.050267901327947784, 0.03763417218926657, 0.08015371696762086, 0.0765010581618153, 0.06446283915345319, 0.06280817706333075, 0.05959070516439735, 0.05336908564274978, 0.11741576446588242, 0.11522544316688799, 0.13434148384478417, 0.12358443530902474, 0.13601195900893048, 0.11621249860891081, 0.11612630068928742, 0.18486930441993077, 0.14415432345774293, 0.14052034518250622, 0.19263609817200844, 0.1534905407997994, 0.20936563569390299, 0.19149843291681035, 0.17408671232848338, 0.21269399515336973, 0.19557478208447399, 0.1775824267624937, 0.09155648379125703, 0.14793667475485672, 0.12313680303711738, 0.14899910898348256, 0.12449106580511704, 0.15379677880128984, 0.11929561676799172, 0.15279542353350717, 0.12523262505126365, 0.1780308943585911, 0.1825444840188155, 0.19679771539296753, 0.21728568269154025, 0.24195077318956226, 0.1763823670173178, 0.18349776131270157, 0.19013805916202275, 0.2254331736901347, 0.16509988310387602, 0.15383009420918947, 0.16267478137505043, 0.17811387048175764, 0.16417350966449107, 0.154719752745466, 0.1555368940972316, 0.1656043157415814, 0.1586204231749624, 0.19567131302928997, 0.1642521681248934, 0.12856101141282483, 0.179505553997105, 0.1574373892812333, 0.16575683857777423, 0.1149919646457025, 0.1723436399213646, 0.15362975725998518, 0.2591045265415297, 0.18722605501079181, 0.1585826864336446, 0.1747274919078724, 0.1669513284441868, 0.12677068692960314, 0.11013022770719783, 0.26515366666939677, 0.10964918146589375, 0.15361165405296195, 0.18251511795110587, 0.18043148539107134, 0.16999691028909691, 0.18999698291549927, 0.19278396668865894, 0.17884730034819696, 0.17356594995390473, 0.16693263118776125, 0.06460596721891343, 0.06290918399773615, 0.05875440879208105, 0.05251989588014039, 0.07092157255690368, 0.05179268046339369, 0.07265795979878586, 0.05652519060576411, 0.06823227957054456]}, "mutation_prompt": null}
{"id": "7d5bec37-39c8-4141-9a59-445d11cf4bc2", "solution": "import numpy as np\n\nclass EnhancedOppositeDynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        dynamic_mutation_rate = self.mutation_rate\n\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                \n                # Dynamic mutation based on fitness\n                if np.random.rand() < dynamic_mutation_rate:\n                    fitness_ratio = (func(best_position) - func(swarm[i])) / (func(best_position) + 1e-6)\n                    dynamic_mutation_rate = min(max(0.05, dynamic_mutation_rate * (1 + fitness_ratio)), 0.5)\n                    opposite_position = 2 * np.mean(swarm) - swarm[i]\n                    swarm[i] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                else:\n                    swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "EnhancedOppositeDynamicSwarmIntelligenceOptimizer", "description": "Utilizing a dynamic mutation strategy based on the fitness of individuals to adapt exploration rates, fostering faster convergence.", "configspace": "", "generation": 28, "fitness": 0.1074849161905897, "feedback": "The algorithm EnhancedOppositeDynamicSwarmIntelligenceOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "f2c37aa5-429d-44d8-b49b-3cd803a4f81a", "metadata": {"aucs": [0.2578639350030255, 0.25501877458786426, 0.20709061289422215, 0.27609430365045073, 0.2590079071705589, 0.24356239606843544, 0.23988559163256906, 0.24908814539412982, 0.1747600641767496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04395283300851438, 0.036151329448687264, 0.035863031376170196, 0.07581589656130805, 0.06726721826216886, 0.07294015357444184, 0.05682982884410359, 0.06665693823206542, 0.07896074266305386, 0.041933954335063195, 0.031967136639234894, 0.03627836289442943, 0.05111382354140004, 0.0573199519971771, 0.04900650466529788, 0.03440546097386099, 0.03930553631288658, 0.04909668889064811, 0.11590736619926179, 0.12945613600072192, 0.13332420184306681, 0.09129741394552116, 0.13676443599248744, 0.11504940218792581, 0.1599386189633487, 0.09433201679060421, 0.26093789386084276, 0.1072182131750753, 0.06342542460019229, 0.058859592432722097, 0.15414011460782095, 0.14048047641328265, 0.11614971050594558, 0.08280951525025793, 0.06000160262791798, 0.016995883246342047, 0.20378453629268412, 0.17532724309170367, 0.11865657924312056, 0.1649478553518373, 0.19460113294886927, 0.20163933117255162, 0.1661125615287663, 0.18822636687429273, 0.17575733764504353, 0.01486526429562296, 9.999999999998899e-05, 0.006668288694342106, 0.025529425785128068, 9.999999999998899e-05, 9.999999999998899e-05, 0.04116911631726816, 0.10202259854107465, 0.07744760221662217, 0.1176526226116279, 0.09582343004597638, 0.08716117994376438, 0.07608938318636194, 0.07525259481535884, 0.11267826926771252, 0.1223125505852779, 0.06611386744608394, 0.05328637637158096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16804251859015817, 0.03117528449027218, 0.077563538779865, 0.06200656960731943, 0.03797001791961052, 0.04182983185895739, 0.11790505038606547, 0.04501828941920516, 0.06579198978248424, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013606907045170535, 0.030598912686978452, 0.005268744909526002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012604320666377733, 0.005143910991678768, 0.017608963676382317, 0.2077425547287256, 0.20623587329828874, 0.18697166371035523, 0.2906101248226489, 0.2097923049833491, 0.2561802957023529, 0.1974537133156402, 0.275940275895348, 0.2728824315960694, 0.08769377866564587, 0.0645197039787454, 0.04972354514497146, 0.0779668630706678, 0.047402644456705834, 0.08834093197342185, 0.06273024465879096, 0.05387319648000943, 0.0463410053787775, 0.10084674371152047, 0.12825787600896166, 0.09912464658539866, 0.12141016399090732, 0.13758442023317252, 0.11712875579863524, 0.1296099054906643, 0.1663025243541444, 0.10705377383609738, 0.15341607178034122, 0.1720958420600438, 0.1505573182650316, 0.2279673194494335, 0.21686653156427316, 0.2046758491786882, 0.2417986339919076, 0.2014376101237283, 0.1961855834497268, 0.1154680979204229, 0.12423158180622218, 0.13338528320707266, 0.15416224244567256, 0.12862305565408938, 0.1185353540924583, 0.18139973467539838, 0.1733621017221294, 0.13202389366649603, 0.16834142790099738, 0.15131188947117968, 0.1626242997166628, 0.1777753728575182, 0.16732218431090073, 0.18074379826375375, 0.18584555560588567, 0.18057865387317618, 0.17050459291911246, 0.13897561221176236, 0.1566274518930577, 0.14420253021320328, 0.1623156910740483, 0.15706972640531514, 0.16532976812355593, 0.15165762202437638, 0.1669505370259602, 0.16633752961474657, 0.3104609872075049, 0.1734874843109505, 0.1178429983058713, 0.15976358184556616, 0.16575609915493172, 0.16495128620264365, 0.12397257998072397, 0.11460642988663838, 0.13466477522466536, 0.15714067085263794, 0.10736512320634106, 0.11506451676622886, 0.2626325270694261, 0.16683381605825598, 0.13619586868080513, 0.13264803196053532, 0.11876239309366976, 0.11106406036334104, 0.16717537768979274, 0.1635744552025692, 0.16110882291645845, 0.1662380473463565, 0.15989080286740132, 0.19271974299163397, 0.1729207462525223, 0.1621328401581501, 0.17624433489683455, 0.06944954848840279, 0.07241678738287505, 0.08120154615533615, 0.08183280485216493, 0.06222371655780057, 0.06567001232460734, 0.061060933905159986, 0.07177532418314947, 0.07482722221313232]}, "mutation_prompt": null}
{"id": "8428010b-afe4-4f5c-bcf9-8362a1cfc0c7", "solution": "import numpy as np\n\nclass OppositeDynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                \n                # Introducing mutation based on opposition-based learning\n                if np.random.rand() < self.mutation_rate:\n                    opposite_position = 2 * np.mean(swarm) - swarm[i]\n                    swarm[i] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                else:\n                    swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "OppositeDynamicSwarmIntelligenceOptimizer", "description": "Introducing a novel mutation strategy based on the concept of opposition-based learning to enhance exploration and exploitation capabilities for faster convergence.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2c37aa5-429d-44d8-b49b-3cd803a4f81a", "metadata": {"aucs": [0.2847214333558008, 0.3211543637857761, 0.27736049375175287, 0.3366890380494849, 0.23508014417634837, 0.2556636638704307, 0.2918649545865014, 0.31217525321147643, 0.2696195418048881, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05756510784405633, 0.05683540523888919, 0.07323361652455584, 0.05733821511663262, 0.06803378624813627, 0.06297350018343972, 0.07096430128534137, 0.07614533763976217, 0.080623006758068, 0.054877127821975735, 0.04876182957515107, 0.03017573262553941, 0.06155400180898485, 0.06786183334869533, 0.03611245685688058, 0.05206087031037643, 0.07978753701297969, 0.052373270642644076, 0.9673638995593332, 0.9672946929460498, 0.9322436203867327, 0.1416063113104159, 0.14401408038139252, 0.23939177001729683, 0.14443159451479892, 0.09475755955359055, 0.2855389880416034, 0.11433989467435257, 0.10480129033262509, 0.07588382824870132, 0.15278632265797132, 0.08601541732195839, 0.0885775730723235, 0.07440536587910351, 0.0927541636050433, 0.12080584529058436, 0.15916084475789194, 0.14770805319438218, 0.16571083211860083, 0.19498715952037304, 0.14028183647343817, 0.1936020565657578, 0.12197453067021746, 0.16604950680770836, 0.17475104607078706, 0.10101032660640563, 0.00871488488705141, 0.01824934846348858, 9.999999999998899e-05, 0.033973019367092294, 9.999999999998899e-05, 0.0595785369488222, 0.03291985426330579, 0.06497711547622997, 0.09191464079159672, 0.04557321568477568, 0.06207954993588394, 0.062092715986631464, 0.06622228198691882, 0.07813985538888923, 0.16552724751347048, 0.03134653758928141, 0.10968975961771232, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11625262954183158, 0.029552410970028586, 0.11320541962085284, 0.02094107446714477, 0.007732808493061016, 0.02116195612444427, 0.08150575493315815, 0.026870408709837146, 0.01827602512510662, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212977368544648, 0.025059042531650588, 0.02708370644108904, 9.999999999998899e-05, 0.0041766605346467145, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011005099596234857, 0.31113569643529615, 0.17383135322651633, 0.24271782106156958, 0.31064628634995484, 0.18091070235232354, 0.2010583765840943, 0.2650316230506039, 0.29579259620085874, 0.28601440257652244, 0.056305168517844284, 0.050267901327947784, 0.03763417218926657, 0.08015371696762086, 0.0765010581618153, 0.06446283915345319, 0.06280817706333075, 0.05959070516439735, 0.05336908564274978, 0.11741576446588242, 0.11522544316688799, 0.13434148384478417, 0.12358443530902474, 0.13601195900893048, 0.11621249860891081, 0.11612630068928742, 0.18486930441993077, 0.14415432345774293, 0.14052034518250622, 0.19263609817200844, 0.1534905407997994, 0.20936563569390299, 0.19149843291681035, 0.17408671232848338, 0.21269399515336973, 0.19557478208447399, 0.1775824267624937, 0.09155648379125703, 0.14793667475485672, 0.12313680303711738, 0.14899910898348256, 0.12449106580511704, 0.15379677880128984, 0.11929561676799172, 0.15279542353350717, 0.12523262505126365, 0.1780308943585911, 0.1825444840188155, 0.19679771539296753, 0.21728568269154025, 0.24195077318956226, 0.1763823670173178, 0.18349776131270157, 0.19013805916202275, 0.2254331736901347, 0.16509988310387602, 0.15383009420918947, 0.16267478137505043, 0.17811387048175764, 0.16417350966449107, 0.154719752745466, 0.1555368940972316, 0.1656043157415814, 0.1586204231749624, 0.19567131302928997, 0.1642521681248934, 0.12856101141282483, 0.179505553997105, 0.1574373892812333, 0.16575683857777423, 0.1149919646457025, 0.1723436399213646, 0.15362975725998518, 0.2591045265415297, 0.18722605501079181, 0.1585826864336446, 0.1747274919078724, 0.1669513284441868, 0.12677068692960314, 0.11013022770719783, 0.26515366666939677, 0.10964918146589375, 0.15361165405296195, 0.18251511795110587, 0.18043148539107134, 0.16999691028909691, 0.18999698291549927, 0.19278396668865894, 0.17884730034819696, 0.17356594995390473, 0.16693263118776125, 0.06460596721891343, 0.06290918399773615, 0.05875440879208105, 0.05251989588014039, 0.07092157255690368, 0.05179268046339369, 0.07265795979878586, 0.05652519060576411, 0.06823227957054456]}, "mutation_prompt": null}
{"id": "26718156-cdff-457b-8e3b-dcd364ba468d", "solution": "import numpy as np\n\nclass DynamicOppositeSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        p_best_fitness = [func(p) for p in swarm]\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                \n                # Introducing mutation based on opposition-based learning\n                if np.random.rand() < self.mutation_rate:\n                    opposite_position = 2 * np.mean(swarm) - swarm[i]\n                    swarm[i] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                else:\n                    swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                current_fitness = func(swarm[i])\n                if current_fitness < p_best_fitness[i]:\n                    p_best_positions[i] = swarm[i]\n                    p_best_fitness[i] = current_fitness\n                    self.cognitive_weight = self.cognitive_weight * 0.95\n                    self.social_weight = self.social_weight * 0.95\n                if current_fitness < func(best_position):\n                    best_position = swarm[i]\n                if current_fitness < func(global_best_position):\n                    global_best_position = swarm[i]\n                    \n        return global_best_position", "name": "DynamicOppositeSwarmIntelligenceOptimizer", "description": "Enhancing convergence speed by dynamically adjusting cognitive and social weights based on individual performance to improve exploitation and exploration balance.", "configspace": "", "generation": 30, "fitness": 0.08992823744947392, "feedback": "The algorithm DynamicOppositeSwarmIntelligenceOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "f2c37aa5-429d-44d8-b49b-3cd803a4f81a", "metadata": {"aucs": [0.24662713765865107, 0.1922466817832995, 0.19414759070497067, 0.1842720464822145, 0.20430795649795086, 0.17072220127650084, 0.18790289495027623, 0.17057926080681096, 0.18174741606035383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06298898240604556, 0.05006425734880671, 0.03615203331219896, 0.03539060075269185, 0.04640982458937959, 0.048203318563798336, 0.042862329977483515, 0.05453443403708913, 0.06190092193343877, 0.030165315043827134, 0.0678341673348758, 0.06022835231267232, 0.0521775141362939, 0.05787533422216207, 0.03705339710224831, 0.06624990632827443, 0.06397076177279282, 0.0016466885088235461, 0.06471354922672978, 0.08759442077713597, 0.1297809752989587, 0.08513682865751293, 0.07712583304512666, 0.07453133254971456, 0.12863876366825755, 0.09659607836792061, 0.08170514548460539, 0.08665695544011609, 0.036336397061978665, 0.0330898454445151, 0.11574779146674641, 0.06550996424525823, 0.06122335402821444, 0.06427816545475507, 0.06734089235807494, 0.07032877502396317, 0.1559342468998437, 0.07445499380663878, 0.13488775906632522, 0.1456996618330908, 0.12400107641268443, 0.10119292085386189, 0.07504926729440253, 0.11196458585429503, 0.14760272515514494, 0.012059066029900034, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006717702285975458, 0.008666174904099044, 9.999999999998899e-05, 0.0035246279359946175, 9.999999999998899e-05, 0.04084379427178153, 0.0062857153680504485, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048783489756821785, 0.004015021857708412, 9.999999999998899e-05, 0.0067422535442810405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05899049684097479, 0.042717409589886124, 0.04845022039683988, 0.04738781494900646, 0.013342774286655201, 0.004447791347380048, 0.07111471182239171, 0.06552285897029198, 0.03486501400623088, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01809278882669807, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0023180010036923937, 9.999999999998899e-05, 0.1744899633666087, 0.19561507698118308, 0.2388075436576348, 0.2173374061508906, 0.19736520565661297, 0.12034248187286123, 0.1731404030191417, 0.16791070123506358, 0.18622353727660046, 0.02731207493736898, 0.041547775030640555, 0.03148579502696791, 0.044647181062577146, 0.04543164504104802, 0.07793936247709277, 0.0474378821644279, 0.07954649332209063, 0.0450878424293929, 0.13818530843937626, 0.1741977000075402, 0.14926437181469954, 0.1580312066764824, 0.14326989049806216, 0.1300328291700683, 0.12636097463174523, 0.12482478551331622, 0.14021586033385758, 0.16044014897743242, 0.1851638566193451, 0.13563204968027986, 0.15960894271156467, 0.1741283438360448, 0.16667519362837535, 0.14800651208093585, 0.1887255432343481, 0.1484453406336883, 0.09781228691214472, 0.1206320436661712, 0.12733233781288578, 0.10424002934382537, 0.12992798611502987, 0.1302656060471954, 0.12302728867611445, 0.13346653140027498, 0.11938624392578745, 0.21198683835194465, 0.17512649460487095, 0.19193583813044401, 0.19687769954404688, 0.2021061940566632, 0.17176318225203324, 0.1893973636304025, 0.19881161305535355, 0.18418020762291432, 0.13883245554883727, 0.16814571745098494, 0.13802572525499412, 0.15797073838858633, 0.15133697209669572, 0.15144966503677992, 0.14849506886008368, 0.15686119902414086, 0.15882363174985925, 0.1492054212110625, 0.11942069607379258, 0.12809239639248649, 0.13682813572437624, 0.1449500467877426, 0.11350835881167443, 0.10148508426946157, 0.1729092814249299, 0.09945748913427455, 0.23038327437143558, 0.11067712172618471, 0.1631565054223696, 0.1835457486686901, 0.15590265155181315, 0.11646730832249008, 0.09439155914299824, 0.10532229089045608, 0.17146706461709016, 0.16127752760063463, 0.16192749520185046, 0.17852036161254348, 0.18006021345052647, 0.18896068519405174, 0.1906134452040522, 0.16192137680134566, 0.18041762105037018, 0.16672382161083477, 0.05787331155420483, 0.06864114617212758, 0.07921423385324433, 0.0775818934332374, 0.08359237541536546, 0.09199701701101026, 0.07788727434389109, 0.06400780302192322, 0.06649163764030985]}, "mutation_prompt": null}
{"id": "dc256df9-a359-40cf-a4ca-0a6fcf362d16", "solution": "import numpy as np\n\nclass EnhancedDynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.initial_mutation_rate = initial_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        mutation_rate = self.initial_mutation_rate\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                \n                # Introducing dynamic mutation rate based on fitness improvement\n                improvement_ratio = max(0, 1 - (func(swarm[i]) / func(best_position)))\n                mutation_rate = max(0.01, self.initial_mutation_rate * improvement_ratio)\n                \n                if np.random.rand() < mutation_rate:\n                    opposite_position = 2 * np.mean(swarm) - swarm[i]\n                    swarm[i] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                else:\n                    swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "EnhancedDynamicSwarmIntelligenceOptimizer", "description": "Enhancing exploration by introducing a dynamic mutation rate based on fitness improvement for faster convergence.", "configspace": "", "generation": 31, "fitness": 0.11695630613706987, "feedback": "The algorithm EnhancedDynamicSwarmIntelligenceOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.11.", "error": "", "parent_id": "f2c37aa5-429d-44d8-b49b-3cd803a4f81a", "metadata": {"aucs": [0.2851106673077648, 0.22103953488478245, 0.2683143540941779, 0.20375595147265135, 0.21438302352025662, 0.23591908488968327, 0.21815491346791593, 0.2376852584891832, 0.2084287184416843, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03746958848131021, 0.06930155717949527, 0.05769944677500827, 0.06836079638565662, 0.06003488796838352, 0.06726346068622457, 0.06945988015202997, 0.05973033795245952, 0.08799423927530137, 0.052854377819466, 0.0635350643215572, 0.03720796467720666, 0.04845390117800652, 0.05872107812956784, 0.066836391260508, 0.06159602424679633, 0.04179596573581856, 0.06285897806923224, 0.11025619877489079, 0.16567141288285825, 0.08048827958300175, 0.9748624530089298, 0.10176027633500673, 0.17070321629714746, 0.11818194042244123, 0.9011047699599127, 0.13482624753809092, 0.09214732497339628, 0.10293818046627878, 0.10671597958155066, 0.14877403480320284, 0.10942689065532962, 0.11354097909704486, 0.05312685476793, 0.06782210941560007, 0.08699211740162394, 0.1842548122930795, 0.12464019506834612, 0.16518300283418208, 0.260575961915423, 0.17272741646410417, 0.16366135202560872, 0.1237897526932229, 0.15125300157737875, 0.10414357897732973, 0.007721089484390209, 9.999999999998899e-05, 0.0029501655354225997, 0.0075948847753134485, 0.029318837347319993, 0.012157353513148172, 0.07572125602919444, 0.015136914613719465, 0.05280742685242479, 0.08453537308148629, 0.03415722129706178, 0.10062053152016248, 0.10312085912534674, 0.0654752342917656, 0.08241108882686587, 0.10483989472238742, 0.02394827128349386, 0.045236180579211194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0809580987084022, 0.09784189277901845, 0.12370181662647739, 0.07926146423429581, 0.008443928162977343, 0.020359072740198325, 0.12230755103336088, 0.11886197259952846, 0.05162508781163799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006554667067027786, 0.01720424782840868, 0.02175940280733013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001551641214787347, 9.999999999998899e-05, 0.016135654058012205, 0.232545221749635, 0.25244100013281934, 0.2712973834035093, 0.2599462925614612, 0.2243261948537414, 0.3057186200513111, 0.28479860365787546, 0.2877430027691401, 0.25422380160491076, 0.06803152822304603, 0.047362756743797974, 0.046853030479124924, 0.06138483996969446, 0.04570858683635126, 0.062238476357356354, 0.07184972804017475, 0.06534671796068381, 0.06899174538232034, 0.10704085763109383, 0.1124459492501928, 0.12796645542142848, 0.13805991658550387, 0.12380940832211695, 0.10653716343975816, 0.10213176345850938, 0.12194669690728532, 0.10680541048551784, 0.1557364883970449, 0.19742748786464337, 0.1814968627597423, 0.1818114899242106, 0.2067668321885049, 0.23246270158507942, 0.17737536851437474, 0.1996982376905142, 0.16770767116724528, 0.10715272048036828, 0.18005305326379095, 0.13424728835385757, 0.11620230706180357, 0.13136665119840307, 0.12393618308510446, 0.17605176553386337, 0.138778343858472, 0.08398189518281107, 0.18325780885474208, 0.1782893524371708, 0.22958020926466183, 0.20054146415760432, 0.19020001596867653, 0.23474114107842103, 0.19310322219809228, 0.2228850622562234, 0.20480196861882694, 0.13256015038061852, 0.14777759337872087, 0.15539025924453254, 0.1521678427112907, 0.1765279102086501, 0.14751609005386868, 0.15940915463067962, 0.15815791126255974, 0.16407890189230878, 0.3168070452065965, 0.17117304931076016, 0.1397152730069411, 0.2259643962732354, 0.13945799337325737, 0.2956937793745884, 0.09500642841281748, 0.1278032525513747, 0.1562578383358747, 0.17932899234594146, 0.12329657995603449, 0.13374109241806598, 0.22093103735637842, 0.11107501720998703, 0.1788173372897467, 0.10157821210583806, 0.30086468701804514, 0.18034749008837536, 0.1530165494394098, 0.16111598311538933, 0.17216512214863866, 0.16618833318909398, 0.1689637164444423, 0.17760053585395086, 0.1753250431465374, 0.20618510779600152, 0.16418609975891307, 0.06948541006565612, 0.051136075109886825, 0.07325841873124805, 0.06768791044131828, 0.06971424590700281, 0.06249817329315377, 0.05858642566651284, 0.049628803592967397, 0.06611724406204667]}, "mutation_prompt": null}
{"id": "e3f62a0c-a0fa-4bf2-bb18-abc5238f9d2a", "solution": "import numpy as np\n\nclass OppositeDynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                \n                # Introducing mutation based on opposition-based learning\n                if np.random.rand() < self.mutation_rate:\n                    opposite_position = 2 * np.mean(swarm) - swarm[i]\n                    swarm[i] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                else:\n                    swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "OppositeDynamicSwarmIntelligenceOptimizer", "description": "Introducing a novel mutation strategy based on the concept of opposition-based learning to enhance exploration and exploitation capabilities for faster convergence.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f2c37aa5-429d-44d8-b49b-3cd803a4f81a", "metadata": {"aucs": [0.2847214333558008, 0.3211543637857761, 0.27736049375175287, 0.3366890380494849, 0.23508014417634837, 0.2556636638704307, 0.2918649545865014, 0.31217525321147643, 0.2696195418048881, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05756510784405633, 0.05683540523888919, 0.07323361652455584, 0.05733821511663262, 0.06803378624813627, 0.06297350018343972, 0.07096430128534137, 0.07614533763976217, 0.080623006758068, 0.054877127821975735, 0.04876182957515107, 0.03017573262553941, 0.06155400180898485, 0.06786183334869533, 0.03611245685688058, 0.05206087031037643, 0.07978753701297969, 0.052373270642644076, 0.9673638995593332, 0.9672946929460498, 0.9322436203867327, 0.1416063113104159, 0.14401408038139252, 0.23939177001729683, 0.14443159451479892, 0.09475755955359055, 0.2855389880416034, 0.11433989467435257, 0.10480129033262509, 0.07588382824870132, 0.15278632265797132, 0.08601541732195839, 0.0885775730723235, 0.07440536587910351, 0.0927541636050433, 0.12080584529058436, 0.15916084475789194, 0.14770805319438218, 0.16571083211860083, 0.19498715952037304, 0.14028183647343817, 0.1936020565657578, 0.12197453067021746, 0.16604950680770836, 0.17475104607078706, 0.10101032660640563, 0.00871488488705141, 0.01824934846348858, 9.999999999998899e-05, 0.033973019367092294, 9.999999999998899e-05, 0.0595785369488222, 0.03291985426330579, 0.06497711547622997, 0.09191464079159672, 0.04557321568477568, 0.06207954993588394, 0.062092715986631464, 0.06622228198691882, 0.07813985538888923, 0.16552724751347048, 0.03134653758928141, 0.10968975961771232, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11625262954183158, 0.029552410970028586, 0.11320541962085284, 0.02094107446714477, 0.007732808493061016, 0.02116195612444427, 0.08150575493315815, 0.026870408709837146, 0.01827602512510662, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006212977368544648, 0.025059042531650588, 0.02708370644108904, 9.999999999998899e-05, 0.0041766605346467145, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011005099596234857, 0.31113569643529615, 0.17383135322651633, 0.24271782106156958, 0.31064628634995484, 0.18091070235232354, 0.2010583765840943, 0.2650316230506039, 0.29579259620085874, 0.28601440257652244, 0.056305168517844284, 0.050267901327947784, 0.03763417218926657, 0.08015371696762086, 0.0765010581618153, 0.06446283915345319, 0.06280817706333075, 0.05959070516439735, 0.05336908564274978, 0.11741576446588242, 0.11522544316688799, 0.13434148384478417, 0.12358443530902474, 0.13601195900893048, 0.11621249860891081, 0.11612630068928742, 0.18486930441993077, 0.14415432345774293, 0.14052034518250622, 0.19263609817200844, 0.1534905407997994, 0.20936563569390299, 0.19149843291681035, 0.17408671232848338, 0.21269399515336973, 0.19557478208447399, 0.1775824267624937, 0.09155648379125703, 0.14793667475485672, 0.12313680303711738, 0.14899910898348256, 0.12449106580511704, 0.15379677880128984, 0.11929561676799172, 0.15279542353350717, 0.12523262505126365, 0.1780308943585911, 0.1825444840188155, 0.19679771539296753, 0.21728568269154025, 0.24195077318956226, 0.1763823670173178, 0.18349776131270157, 0.19013805916202275, 0.2254331736901347, 0.16509988310387602, 0.15383009420918947, 0.16267478137505043, 0.17811387048175764, 0.16417350966449107, 0.154719752745466, 0.1555368940972316, 0.1656043157415814, 0.1586204231749624, 0.19567131302928997, 0.1642521681248934, 0.12856101141282483, 0.179505553997105, 0.1574373892812333, 0.16575683857777423, 0.1149919646457025, 0.1723436399213646, 0.15362975725998518, 0.2591045265415297, 0.18722605501079181, 0.1585826864336446, 0.1747274919078724, 0.1669513284441868, 0.12677068692960314, 0.11013022770719783, 0.26515366666939677, 0.10964918146589375, 0.15361165405296195, 0.18251511795110587, 0.18043148539107134, 0.16999691028909691, 0.18999698291549927, 0.19278396668865894, 0.17884730034819696, 0.17356594995390473, 0.16693263118776125, 0.06460596721891343, 0.06290918399773615, 0.05875440879208105, 0.05251989588014039, 0.07092157255690368, 0.05179268046339369, 0.07265795979878586, 0.05652519060576411, 0.06823227957054456]}, "mutation_prompt": null}
{"id": "c96961a0-19b7-4687-b541-9f8a03297e7c", "solution": "import numpy as np\n\nclass EnhancedOppositeDynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.initial_mutation_rate = initial_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                \n                # Dynamic mutation based on convergence performance\n                if np.random.rand() < mutation_rate:\n                    opposite_position = 2 * np.mean(swarm) - swarm[i]\n                    swarm[i] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                else:\n                    swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    mutation_rate *= 0.95  # Adjust mutation rate based on convergence\n                    \n        return global_best_position", "name": "EnhancedOppositeDynamicSwarmIntelligenceOptimizer", "description": "Adding a dynamic mutation rate that adjusts based on the convergence performance to promote exploration in promising regions and exploit potential solutions effectively.", "configspace": "", "generation": 33, "fitness": 0.12741421978378284, "feedback": "The algorithm EnhancedOppositeDynamicSwarmIntelligenceOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "f2c37aa5-429d-44d8-b49b-3cd803a4f81a", "metadata": {"aucs": [0.2573339400102953, 0.25994368978830884, 0.3144870695288382, 0.376860016259042, 0.26182069637555816, 0.3209070964476346, 0.27835689723952484, 0.24995472877311609, 0.2714571733875527, 0.04226649199188981, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10645962653057517, 0.08259713132204416, 0.07078279225864403, 0.06980881258697169, 0.08463323323470595, 0.05680622563137183, 0.08141944407414015, 0.07531366131821382, 0.08390988462114723, 0.054594099755423176, 0.06235004872858574, 0.04684248425425963, 0.059760091248985514, 0.07034480602345572, 0.03207367945874651, 0.03363705952569529, 0.04754265084495368, 0.06899224692341288, 0.9673638995593332, 0.13140135577672885, 0.15938789976000867, 0.10605536864600562, 0.8409090202002469, 0.13638717524783095, 0.8025629193565729, 0.09475719468326027, 0.14596097777296058, 0.11433989467435257, 0.09887087638116754, 0.06295979791266704, 0.159306898828795, 0.15122177994002484, 0.1134315322342847, 0.09031448015014043, 0.0927541636050433, 0.13651547640390016, 0.2002637635018878, 0.1567012039726936, 0.1575619645270201, 0.190291447129037, 0.14028183647343817, 0.19066390186757576, 0.11463980738141932, 0.14187164039724232, 0.21296490003982582, 0.0633115562996347, 0.0003742041398890894, 0.01824934846348858, 9.999999999998899e-05, 0.04154116089756221, 9.999999999998899e-05, 0.03342806705922652, 0.08686926810342921, 0.11710459575846144, 0.0773470976298033, 0.08684038595307042, 0.0721014071024485, 0.03715975820661621, 0.08253045846858076, 0.11201481487604337, 0.15595814685787535, 0.022553641028706828, 0.1579080185868319, 0.007086563382699973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09846215470900621, 0.052144615223710944, 0.11888436188131579, 0.04390918242004738, 0.023039985697633325, 0.03362376201419537, 0.06510738462946863, 0.07514935265187073, 0.0114364779186783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025124609074842486, 0.005830013988073701, 0.03635746493745862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019312248721238157, 0.024854224708474204, 0.31181308910745176, 0.23869114435761896, 0.3388325682827942, 0.29748448753843504, 0.183954600561134, 0.2045705505734583, 0.25730339742786457, 0.2500058336809504, 0.3105761805150141, 0.07776676778958103, 0.06094868102869899, 0.04156454515420882, 0.06458371687901165, 0.061196489996606984, 0.0843060236644847, 0.06905531584885227, 0.06503756178312947, 0.06861108874250677, 0.11741576446588242, 0.13552261193210358, 0.14261403161663533, 0.11709450479972638, 0.13601195900893048, 0.10142728417928082, 0.11612630068928742, 0.18486930441993077, 0.12571819191050126, 0.15038528075850877, 0.17170668406748812, 0.16670753054023157, 0.20879137869161035, 0.20149019715838545, 0.21422031708324707, 0.23477326352899497, 0.20009825208915444, 0.18926851050524285, 0.10948732799787397, 0.1635170844196906, 0.14354657957752626, 0.18710335087264218, 0.13212426353256357, 0.12675447300142273, 0.11929561676799172, 0.16840926264790046, 0.11657872420457638, 0.20484354968759344, 0.18146049762185035, 0.16552483590423994, 0.17973695025261271, 0.24195077318956226, 0.1938182996825789, 0.1708679971583953, 0.17898793716970374, 0.20294005131717174, 0.16509988310387602, 0.15319987068907504, 0.16388405523087624, 0.15949471906920865, 0.16415937121595947, 0.1651091854498452, 0.14951716936193005, 0.16592379295631177, 0.16641628479881165, 0.3386938615104472, 0.1642521681248934, 0.13958021501772655, 0.18560572771540595, 0.17796355520159435, 0.3311558043892594, 0.13924485554352228, 0.2984258484654735, 0.15582456959118407, 0.17887565850352205, 0.2530047892955032, 0.23108503386370316, 0.16121720838775144, 0.1672022580650011, 0.1611722097296564, 0.09328230410543603, 0.16365656827292874, 0.12348475877332799, 0.16523964963726068, 0.17611971038216256, 0.16938371853219836, 0.18271525837943992, 0.16777838392819322, 0.1927402868379865, 0.19269189264607145, 0.1725797216425473, 0.17477458649675282, 0.08290344464677835, 0.06772056051239028, 0.053098608401149994, 0.06761061232340448, 0.06779528034929394, 0.058326869837156514, 0.07866027012458676, 0.06672468887427074, 0.06348608014079671]}, "mutation_prompt": null}
{"id": "a2e3bd5a-24d4-4150-b45c-dd160d071cc1", "solution": "import numpy as np\n\nclass EnhancedOppositeDynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.initial_mutation_rate = initial_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                \n                # Dynamic mutation based on convergence performance\n                if np.random.rand() < mutation_rate:\n                    opposite_position = 2 * np.mean(swarm) - swarm[i]\n                    swarm[i] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                else:\n                    swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    mutation_rate *= 0.95  # Adjust mutation rate based on convergence\n                    \n        return global_best_position", "name": "EnhancedOppositeDynamicSwarmIntelligenceOptimizer", "description": "Adding a dynamic mutation rate that adjusts based on the convergence performance to promote exploration in promising regions and exploit potential solutions effectively.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c96961a0-19b7-4687-b541-9f8a03297e7c", "metadata": {"aucs": [0.2573339400102953, 0.25994368978830884, 0.3144870695288382, 0.376860016259042, 0.26182069637555816, 0.3209070964476346, 0.27835689723952484, 0.24995472877311609, 0.2714571733875527, 0.04226649199188981, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10645962653057517, 0.08259713132204416, 0.07078279225864403, 0.06980881258697169, 0.08463323323470595, 0.05680622563137183, 0.08141944407414015, 0.07531366131821382, 0.08390988462114723, 0.054594099755423176, 0.06235004872858574, 0.04684248425425963, 0.059760091248985514, 0.07034480602345572, 0.03207367945874651, 0.03363705952569529, 0.04754265084495368, 0.06899224692341288, 0.9673638995593332, 0.13140135577672885, 0.15938789976000867, 0.10605536864600562, 0.8409090202002469, 0.13638717524783095, 0.8025629193565729, 0.09475719468326027, 0.14596097777296058, 0.11433989467435257, 0.09887087638116754, 0.06295979791266704, 0.159306898828795, 0.15122177994002484, 0.1134315322342847, 0.09031448015014043, 0.0927541636050433, 0.13651547640390016, 0.2002637635018878, 0.1567012039726936, 0.1575619645270201, 0.190291447129037, 0.14028183647343817, 0.19066390186757576, 0.11463980738141932, 0.14187164039724232, 0.21296490003982582, 0.0633115562996347, 0.0003742041398890894, 0.01824934846348858, 9.999999999998899e-05, 0.04154116089756221, 9.999999999998899e-05, 0.03342806705922652, 0.08686926810342921, 0.11710459575846144, 0.0773470976298033, 0.08684038595307042, 0.0721014071024485, 0.03715975820661621, 0.08253045846858076, 0.11201481487604337, 0.15595814685787535, 0.022553641028706828, 0.1579080185868319, 0.007086563382699973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09846215470900621, 0.052144615223710944, 0.11888436188131579, 0.04390918242004738, 0.023039985697633325, 0.03362376201419537, 0.06510738462946863, 0.07514935265187073, 0.0114364779186783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025124609074842486, 0.005830013988073701, 0.03635746493745862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019312248721238157, 0.024854224708474204, 0.31181308910745176, 0.23869114435761896, 0.3388325682827942, 0.29748448753843504, 0.183954600561134, 0.2045705505734583, 0.25730339742786457, 0.2500058336809504, 0.3105761805150141, 0.07776676778958103, 0.06094868102869899, 0.04156454515420882, 0.06458371687901165, 0.061196489996606984, 0.0843060236644847, 0.06905531584885227, 0.06503756178312947, 0.06861108874250677, 0.11741576446588242, 0.13552261193210358, 0.14261403161663533, 0.11709450479972638, 0.13601195900893048, 0.10142728417928082, 0.11612630068928742, 0.18486930441993077, 0.12571819191050126, 0.15038528075850877, 0.17170668406748812, 0.16670753054023157, 0.20879137869161035, 0.20149019715838545, 0.21422031708324707, 0.23477326352899497, 0.20009825208915444, 0.18926851050524285, 0.10948732799787397, 0.1635170844196906, 0.14354657957752626, 0.18710335087264218, 0.13212426353256357, 0.12675447300142273, 0.11929561676799172, 0.16840926264790046, 0.11657872420457638, 0.20484354968759344, 0.18146049762185035, 0.16552483590423994, 0.17973695025261271, 0.24195077318956226, 0.1938182996825789, 0.1708679971583953, 0.17898793716970374, 0.20294005131717174, 0.16509988310387602, 0.15319987068907504, 0.16388405523087624, 0.15949471906920865, 0.16415937121595947, 0.1651091854498452, 0.14951716936193005, 0.16592379295631177, 0.16641628479881165, 0.3386938615104472, 0.1642521681248934, 0.13958021501772655, 0.18560572771540595, 0.17796355520159435, 0.3311558043892594, 0.13924485554352228, 0.2984258484654735, 0.15582456959118407, 0.17887565850352205, 0.2530047892955032, 0.23108503386370316, 0.16121720838775144, 0.1672022580650011, 0.1611722097296564, 0.09328230410543603, 0.16365656827292874, 0.12348475877332799, 0.16523964963726068, 0.17611971038216256, 0.16938371853219836, 0.18271525837943992, 0.16777838392819322, 0.1927402868379865, 0.19269189264607145, 0.1725797216425473, 0.17477458649675282, 0.08290344464677835, 0.06772056051239028, 0.053098608401149994, 0.06761061232340448, 0.06779528034929394, 0.058326869837156514, 0.07866027012458676, 0.06672468887427074, 0.06348608014079671]}, "mutation_prompt": null}
{"id": "be7a531e-30b1-43c1-a123-1d0140ba8d41", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationSizeOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.initial_mutation_rate = initial_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                \n                if np.random.rand() < mutation_rate:\n                    opposite_position = 2 * np.mean(swarm) - swarm[i]\n                    swarm[i] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                else:\n                    swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    mutation_rate *= 0.95\n                    \n            # Dynamic population size adaptation\n            if np.random.rand() < 0.1 and self.swarm_size > 5:\n                self.swarm_size -= 1\n                swarm = np.vstack((swarm[:self.swarm_size], np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                velocities = np.vstack((velocities[:self.swarm_size], np.zeros((1, self.dim))))\n                p_best_positions = np.vstack((p_best_positions[:self.swarm_size], swarm[-1]))\n        \n        return global_best_position", "name": "EnhancedDynamicPopulationSizeOptimizer", "description": "Introducing a dynamic population size adaptation mechanism to adjust the number of individuals based on the convergence status for faster convergence.", "configspace": "", "generation": 35, "fitness": 0.12266709691140892, "feedback": "The algorithm EnhancedDynamicPopulationSizeOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.11.", "error": "", "parent_id": "c96961a0-19b7-4687-b541-9f8a03297e7c", "metadata": {"aucs": [0.3525562212590735, 0.20162125446758705, 0.2676132497179069, 0.2709719258668868, 0.21110459078857047, 0.28035228454349936, 0.3027216191218465, 0.23961201162620238, 0.28962906141646616, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027984858408565128, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07977906396849432, 0.06805324032525062, 0.04702488916061742, 0.04973025959488042, 0.057262612219846964, 0.07830611716336155, 0.04642239844493923, 0.06226087277880066, 0.06302569765217192, 0.07125921759200005, 0.038013560052291506, 0.05208175607499488, 0.05021109764310383, 0.035825955647464935, 0.039649676281095725, 0.0552725001397526, 0.05863467889785856, 0.0608320831865804, 0.16252707447664783, 0.7577816420508503, 0.7586531306295328, 0.1089976590527838, 0.10838083120020492, 0.17797494322304064, 0.8157995930327785, 0.11424975233994883, 0.13572498129039523, 0.08108177476101497, 0.038758264993259406, 0.08735135401154714, 0.1411303637597504, 0.08441081362728142, 0.07539772793844113, 0.09488362932674732, 0.0733037951211083, 0.1207788857631682, 0.2070349093093291, 0.20627531786378972, 0.13246805944819717, 0.19814110813805497, 0.15223169471400666, 0.15784265261280594, 0.2134568920112454, 0.17693209740814764, 0.1767192813857733, 0.10320326060706153, 0.07125347741053523, 0.11972438601033486, 0.013585951650608385, 0.041745293977944686, 0.10596831779098759, 0.00523248824937983, 0.11451643936088463, 0.038721147412837276, 0.12024417440040636, 0.045459133956727404, 0.1023589235062543, 0.09213009289824825, 0.08041945516696136, 0.06745414259215143, 0.09376788259570634, 0.07823878494174363, 0.06855869545386051, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010002719729051424, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036171999905671104, 0.08435265465011998, 0.056619408368641544, 0.05513752976523845, 0.04682307196263136, 0.038717189102947636, 0.02001230977731061, 0.0619609583964289, 0.08296216032758963, 0.031792901724239875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006786806256587785, 0.04788403279952802, 0.028692219779784534, 9.999999999998899e-05, 9.999999999998899e-05, 0.03254695322921253, 9.999999999998899e-05, 0.001402629318023152, 0.27419387537441575, 0.30974647847785997, 0.32165316473614636, 0.30863618217255717, 0.21522371090250736, 0.22984470127320733, 0.2790234647202754, 0.25463414533046547, 0.3207638044492823, 0.0640744506786266, 0.04444643644092816, 0.07255434438475461, 0.06321756069837536, 0.07031030589539566, 0.05995146149256181, 0.08750970397955937, 0.08434317134770408, 0.0805118005808112, 0.10660471748408396, 0.15016570058198808, 0.11183172941534791, 0.12409841417759326, 0.13255339637505037, 0.1067726160140976, 0.11054497017656628, 0.10607735906874527, 0.10906442866376187, 0.13785045114740369, 0.2377596711794756, 0.178429698804906, 0.18659816333967305, 0.17039512968795845, 0.19076755432764625, 0.1450407237917276, 0.1868179577919823, 0.1456841982396896, 0.08941171478574816, 0.16463655515325404, 0.10831155844345086, 0.1293991411173756, 0.13970219572563125, 0.1414944167553751, 0.11804119872277519, 0.17094589429739848, 0.17172352048271255, 0.1878031815148563, 0.19304812218267065, 0.1824718140155296, 0.19703890289224835, 0.2008615606564247, 0.18968138774103926, 0.20052417108806364, 0.21490929505848466, 0.2066544998223293, 0.16428709969889677, 0.15532997119353986, 0.16115223636888298, 0.16979596916776607, 0.18213475491665265, 0.1580714875276874, 0.1590838189051187, 0.1680258258729289, 0.16206026391889794, 0.19631889512685097, 0.15487763348611827, 0.14065711624778943, 0.2757041496539616, 0.16652342263252917, 0.2052310754021659, 0.10836217728668995, 0.15511253684090642, 0.13700556388354257, 0.15985591055941328, 0.1511744985680198, 0.21603824158587837, 0.09375024800170906, 0.16507655032677104, 0.22956058765837895, 0.1387088008719195, 0.16570644331751305, 0.1479708618993958, 0.15436147902472785, 0.17751978388944445, 0.1737699782507991, 0.16630655151666995, 0.20101931168150144, 0.1927402868379865, 0.19184446529224097, 0.16808250453159124, 0.17330832775190086, 0.0660357315321457, 0.07663438803375033, 0.058223342978800385, 0.07051178813726333, 0.06820801770922935, 0.08342041723033744, 0.07365516969779506, 0.06234600587709915, 0.06801226427472884]}, "mutation_prompt": null}
{"id": "f3b9e35c-8827-4b14-9d52-e8eedf65898d", "solution": "import numpy as np\n\nclass EnhancedOppositeDynamicSwarmIntelligenceOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.initial_mutation_rate = initial_mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        velocities = np.zeros((self.swarm_size, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        global_best_position = best_position.copy()\n        p_best_positions = swarm.copy()\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            for i in range(self.swarm_size):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (p_best_positions[i] - swarm[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component\n                \n                # Introducing opposition-based learning for faster convergence\n                opposite_position = 2 * swarm.mean(axis=0) - swarm[i]\n                velocities[i] = velocities[i] + 0.3 * (opposite_position - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                \n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n                    p_best_positions[i] = swarm[i]\n                if func(swarm[i]) < func(global_best_position):\n                    global_best_position = swarm[i]\n                    self.cognitive_weight = self.cognitive_weight * 0.9\n                    self.social_weight = self.social_weight * 0.9\n                    mutation_rate *= 0.95  # Adjust mutation rate based on convergence\n                    \n        return global_best_position", "name": "EnhancedOppositeDynamicSwarmIntelligenceOptimizer", "description": "Introducing opposition-based learning to enhance exploration and exploit the symmetry of the search space, boosting convergence speed.", "configspace": "", "generation": 36, "fitness": 0.09210727419175233, "feedback": "The algorithm EnhancedOppositeDynamicSwarmIntelligenceOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.11.", "error": "", "parent_id": "c96961a0-19b7-4687-b541-9f8a03297e7c", "metadata": {"aucs": [0.1598954073410388, 0.2019871548784723, 0.2115955218149974, 0.150499362384223, 0.18822807913814932, 0.3082353883675898, 0.1626791102609585, 0.15013286526866965, 0.2418023177858386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059540368993420856, 0.034469765782603634, 0.028653565626371003, 0.042382261681908506, 0.06460878431526795, 0.054391535993000395, 0.04940252758966057, 0.04527454750566662, 0.02246516132308829, 0.023774651246660894, 0.017376442897932387, 0.04393421844061629, 0.04519144366220229, 0.0165020792539331, 0.03353836806543953, 0.012544442445569959, 0.01618373009505447, 0.024938183215440057, 0.9810868081999811, 0.13710704215362313, 0.0787664353645976, 0.1321564435208289, 0.11796699308497993, 0.127270098156538, 0.14286860943180002, 0.9822904180521004, 0.16522039281605538, 0.022571172947555396, 0.043270580721358365, 0.03428266506144095, 0.08997409603052253, 0.033197057018183096, 0.03841833022682073, 0.0428168784664118, 0.031286747607188414, 0.05617451945455909, 0.15687112679239523, 0.14461916588438362, 0.13459196907830906, 0.12127125512394543, 0.15960618900937984, 0.16955401158067274, 0.06392981162132605, 0.08568254682598175, 0.07818081049964098, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06159074098920969, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010106089565563914, 0.01657888889555814, 0.08477116106116156, 9.999999999998899e-05, 0.012456255852279163, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02090776668585892, 0.040113937369832264, 0.037454260077211976, 0.018790673814918946, 0.04932116557223942, 0.0708077433280363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1948238942707422, 0.1412168640548911, 0.18688331950303594, 0.18614755447008968, 0.1711502927427424, 0.1908316627602219, 0.18552260809179355, 0.191699886871041, 0.18648426597874646, 0.04949950048798879, 0.030791859297374158, 0.02728281577842917, 0.03654362498675434, 0.025028506770616743, 0.0850786347903415, 0.03732969261622787, 0.017690059123556257, 0.047028844204044074, 0.13041796653862325, 0.11566213726565022, 0.11391184011360367, 0.12151507771090364, 0.154443986613243, 0.1216495635720185, 0.12431722350297225, 0.12064900838064163, 0.11039627346680447, 0.15733352271452372, 0.15615232837116932, 0.13397239556883345, 0.1773979425407799, 0.15382747498666427, 0.16881569433061017, 0.13740385084076645, 0.19570189409168415, 0.13646411672571102, 0.08646708898429645, 0.08067971712729471, 0.08752655388785502, 0.10181317545222524, 0.14282789756322678, 0.10115933555609646, 0.07277528091811569, 0.10440211321311565, 0.07948915796799816, 0.19642894021537638, 0.18263906273209995, 0.17456391770776414, 0.19855808351136783, 0.13131734926808736, 0.1645068755896707, 0.17380889438500835, 0.215585301559165, 0.16643270012011724, 0.1497554274490065, 0.1436219487620065, 0.15209172297913887, 0.14157148393822594, 0.15915361179334142, 0.15041488776224, 0.15270332585372692, 0.14149149300109853, 0.13459213428195527, 0.15758714721105338, 0.11104441529839426, 0.1261511574927463, 0.15540911042510908, 0.12959314682065437, 0.10804691588814763, 0.11112244302883978, 0.10774520345387284, 0.0821402666790253, 0.15355580722543505, 0.12129101646573726, 0.2601070919785401, 0.21516708030833176, 0.07059057115805667, 0.1062572266209938, 0.16566865676244868, 0.07906023285819042, 0.11765297967217414, 0.15257410646242697, 0.15055630461033997, 0.19126757889591262, 0.19224370329777862, 0.18609699216470366, 0.16790536970289327, 0.170799687734022, 0.14326867153918132, 0.18357706411764008, 0.06970033595007752, 0.05013433313151072, 0.04869491345348631, 0.05252317041857135, 0.0656998403487461, 0.024226145667775145, 0.0580077017992664, 0.05789109656966518, 0.03501193117706758]}, "mutation_prompt": null}
{"id": "dec757cb-4e59-497f-ab77-8445f5e9459b", "solution": "import numpy as np\n\nclass MultiSwarmDynamicOppositeOptimizer:\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_swarms = num_swarms\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.initial_mutation_rate = initial_mutation_rate\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    velocities[i][j] = self.inertia_weight * velocities[i][j] + cognitive_component + social_component\n                    \n                    if np.random.rand() < mutation_rate:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n                    \n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9\n                        self.social_weight = self.social_weight * 0.9\n                        mutation_rate *= 0.95\n                    \n        return global_best_position", "name": "MultiSwarmDynamicOppositeOptimizer", "description": "Implementing a multi-swarm approach where multiple sub-swarms evolve independently and periodically exchange best solutions to enhance exploration and exploitation capabilities for faster convergence.", "configspace": "", "generation": 37, "fitness": 0.1428663968310311, "feedback": "The algorithm MultiSwarmDynamicOppositeOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "c96961a0-19b7-4687-b541-9f8a03297e7c", "metadata": {"aucs": [0.3465991591218063, 0.3974487426257267, 0.2618287388375906, 0.3147481280190275, 0.22817224909503342, 0.23754151930047118, 0.31152024899062225, 0.2549175911782934, 0.25541659709913433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08988717258213219, 0.07934060522414077, 0.07708300736294438, 0.058577427635699175, 0.0659712822989783, 0.06799938701102115, 0.05031490594948396, 0.06524940850493477, 0.06643547352095558, 0.056638299753452026, 0.06951599035188083, 0.08846368216398426, 0.06632017674682356, 0.022238824491572995, 0.06197560328676077, 0.054408620269207675, 0.08738402275116874, 0.04059935552757765, 0.9708272538876874, 0.9796073329559297, 0.9934179102525899, 0.9762503638716542, 0.9504700503035951, 0.9691742702670165, 0.9765353989101724, 0.9512788104838811, 0.963965122929443, 0.12356037463618452, 0.10043363833408969, 0.1313019655383061, 0.1415991823407421, 0.12901617784348218, 0.13960416389543806, 0.08072713093277162, 0.05122304973680514, 0.11332665368963846, 0.1256187331845542, 0.16298642974408262, 0.19300964954039235, 0.13006305672743745, 0.12294206437300326, 0.12084535260393481, 0.2086731130297358, 0.1483296425921219, 0.08914781603430277, 0.06303509103629112, 0.021598893392999696, 0.11673829304818173, 0.08788842011128783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04577726464269549, 0.10330479947786808, 0.1014968964648737, 0.08292905122254379, 0.11512728467104094, 0.10615370841313743, 9.999999999998899e-05, 0.12247998768982093, 0.05118298999266191, 0.04493086130693247, 0.04499181868861046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06020082305182628, 9.999999999998899e-05, 9.999999999998899e-05, 0.04982018307111469, 9.999999999998899e-05, 0.040740755590656375, 0.01589842805250341, 9.999999999998899e-05, 0.016526240291612537, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0062579568359234505, 0.006619513997173976, 0.007939958363391453, 0.016107188301270448, 9.999999999998899e-05, 9.999999999998899e-05, 0.000646807512978409, 0.020685945013149132, 0.0031821996790603047, 0.15403844159101532, 0.27267899860712175, 0.2697447998757957, 0.2950643571393706, 0.2578696058103831, 0.2287773206983289, 0.31942963901387855, 0.19509054077626942, 0.372571409516552, 0.0613013897206669, 0.07826095278897027, 0.05022697975010193, 0.05373665814305628, 0.07317763393965615, 0.0814952631964736, 0.07531752426181992, 0.07901879612837215, 0.0523833673437375, 0.10685667669805443, 0.13770039914501198, 0.1275642300482941, 0.15783280206615746, 0.11684644150966583, 0.17066929638102357, 0.10768070512280392, 0.10112781850080266, 0.14206564144598854, 0.19377463199478884, 0.1688286195695351, 0.17082208669477772, 0.18923701851788588, 0.21413497228117406, 0.25354188713789383, 0.17268693835522486, 0.1796402908713417, 0.2037079773343783, 0.13270433625897748, 0.05645945981681999, 0.08398582550377798, 0.14035015413231355, 0.1489527620179253, 0.11322804690565502, 0.09792673933391194, 0.1481040800821518, 0.12867498640706032, 0.15182430191845853, 0.21532878094850771, 0.20663513996318295, 0.2006456165264685, 0.16161030718432412, 0.1807258830876861, 0.1788634300360452, 0.17208588269173108, 0.17590886692122454, 0.1618913063342743, 0.1660996259422034, 0.16016450348616018, 0.15098457693136658, 0.16169923498302718, 0.16291556874481816, 0.17283164769335213, 0.1505369536724951, 0.15946760105383329, 0.13949972920387044, 0.15883608315585385, 0.16021186233197915, 0.14145516582988038, 0.16687440133159548, 0.12474485100092947, 0.11999174586244188, 0.14375463330226534, 0.14337919925946752, 0.11347725415910759, 0.10808288163424518, 0.11989854355240315, 0.17418969875873758, 0.14397262272387912, 0.16126632187418932, 0.08667584299963893, 0.284112922768726, 0.12328328666010435, 0.17337887468979862, 0.19419654174716294, 0.17021764874751466, 0.16237131946857553, 0.1802102842646196, 0.17494346461755472, 0.1615691511389068, 0.17602716171842547, 0.16697799794197365, 0.050986516297357065, 0.05770016107777176, 0.0549264761936642, 0.054261717395392095, 0.04221514190800668, 0.04775653388944301, 0.06489049414285997, 0.06277127798945947, 0.0480338870517677]}, "mutation_prompt": null}
{"id": "faa0656c-285a-44c8-92d1-88194b8a214c", "solution": "import numpy as np\n\nclass FastConvergingDynamicMutationOptimizer:\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_swarms = num_swarms\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.initial_mutation_rate = initial_mutation_rate\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rates = [self.initial_mutation_rate] * self.num_swarms\n\n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    velocities[i][j] = self.inertia_weight * velocities[i][j] + cognitive_component + social_component\n                    \n                    if np.random.rand() < mutation_rates[i]:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n                    \n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                        mutation_rates[i] *= 0.9\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9\n                        self.social_weight = self.social_weight * 0.9\n                        \n        return global_best_position", "name": "FastConvergingDynamicMutationOptimizer", "description": "Introducing adaptive mutation rates based on individuals' performance to dynamically adjust exploration and exploitation balance for improved convergence speed.", "configspace": "", "generation": 38, "fitness": 0.14149262209058036, "feedback": "The algorithm FastConvergingDynamicMutationOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "dec757cb-4e59-497f-ab77-8445f5e9459b", "metadata": {"aucs": [0.3149694201461689, 0.3843066253282912, 0.28816254137467934, 0.25393572870663694, 0.2647235941370606, 0.22509477618156704, 0.3660510378936047, 0.313884720835365, 0.203043848383461, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009371595765813256, 0.06599153423034876, 0.05503117567549476, 0.07203362265421487, 0.05998528450807694, 0.040617311018221525, 0.06075552502775172, 0.04684928708185976, 0.0442843006739595, 0.053012222252982744, 0.04373784529341629, 0.0625332194970668, 0.06556883716163431, 0.06027862271651174, 0.033035720757215836, 0.06926951471600074, 0.0859546991252671, 0.04492048279218197, 0.03616442246802365, 0.9708272538876874, 0.9796073329559297, 0.9934179102525899, 0.9762503638716542, 0.9435427393412709, 0.972671590514363, 0.9765353989101724, 0.9512788104838811, 0.9635607317995667, 0.06912808612744081, 0.08738430985576284, 0.13519117971817685, 0.15576691501864093, 0.1289065994628028, 0.13250415933428283, 0.12243553316835387, 0.09176013188290721, 0.10891503371592404, 0.1283225346190089, 0.16643822137178232, 0.16659874552860843, 0.1119885492051903, 0.11100530395246566, 0.1553536659932182, 0.10985786819806365, 0.14344183280764933, 0.11695969526164807, 0.11669593524599897, 9.999999999998899e-05, 0.10899038922855964, 0.06190124540686992, 9.999999999998899e-05, 0.11363058486375444, 0.0034109462877728314, 0.04789304458037824, 9.999999999998899e-05, 0.06689365044274365, 0.08398590107963988, 0.1239219853574115, 0.10799506749935894, 9.999999999998899e-05, 0.06942208249646342, 0.027516653797987067, 0.058790324751579304, 0.1400909029471744, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03128359921572099, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003149053472445651, 0.014143558600126727, 9.999999999998899e-05, 0.03998798170737117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005566056055267499, 0.04120233995268341, 0.004111126346470484, 0.005305826277545611, 9.999999999998899e-05, 0.03129690771995797, 0.04405081777197961, 0.2228933120037695, 0.22651073882146988, 0.3423108126644211, 0.28056111778894033, 0.33070094830038355, 0.24835912124763415, 0.22316278936552802, 0.19593261501081238, 0.31631680776172455, 0.0650314927745751, 0.07501727451700646, 0.06133724686034492, 0.060067181568378536, 0.07608466727049268, 0.05935384138747413, 0.06563161802598116, 0.05477703361659203, 0.059046381529301306, 0.10605222851667184, 0.11923605158434059, 0.12084210061828782, 0.1350765132602202, 0.14733429089381023, 0.1217273796723155, 0.11527695171935615, 0.19821732035989703, 0.12121849340363877, 0.20644641858562007, 0.16260244784159728, 0.19912870313669195, 0.18128292632291731, 0.21235730259434604, 0.23307019601829038, 0.18494514999871703, 0.17964839756149886, 0.1652001020913445, 0.1343027995583661, 0.05951970484944735, 0.08826567196397295, 0.15149554430430834, 0.1639624855936228, 0.12536157566579875, 0.13380123014221357, 0.13794346168946847, 0.14689037489314127, 0.14792299158870592, 0.18080906937759622, 0.2056642786763081, 0.1708178079437721, 0.1638566189634768, 0.198504949989455, 0.1379017266065834, 0.15778098723612288, 0.17382422537706876, 0.15662955085771313, 0.16751295124956667, 0.1347251198383681, 0.16540328726374065, 0.18918814022105312, 0.1568153384599631, 0.14266217459382846, 0.1591435685030772, 0.16381027309074891, 0.155669499956407, 0.1598038985126493, 0.1609597678827409, 0.15955426584687715, 0.15930505256980576, 0.11288285291221689, 0.1444374675065463, 0.1387311510177418, 0.15163458408250174, 0.11040265245322212, 0.10742485113267153, 0.10105775155566243, 0.07222380589842559, 0.17197241274967967, 0.11366021557966999, 0.09210703053697633, 0.28386972534457855, 0.19479071477138366, 0.17537751000333668, 0.17857816650089664, 0.1786853576842493, 0.1632210839699446, 0.16746197722578127, 0.17007730876803706, 0.17614603023276176, 0.17303733192345916, 0.15430018438264814, 0.047358632541183554, 0.06375764013392415, 0.05344955910906701, 0.06470639603143102, 0.059552836741971094, 0.05093588106423175, 0.056338756112223054, 0.06093879363672472, 0.04246734725467327]}, "mutation_prompt": null}
{"id": "ee1371e4-25ee-4a1d-bb4b-938f76a5fc73", "solution": "import numpy as np\n\nclass MultiSwarmDynamicOppositeOptimizer:\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_swarms = num_swarms\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.initial_mutation_rate = initial_mutation_rate\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    velocities[i][j] = self.inertia_weight * velocities[i][j] + cognitive_component + social_component\n                    \n                    if np.random.rand() < mutation_rate:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n                    \n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9\n                        self.social_weight = self.social_weight * 0.9\n                        mutation_rate *= 0.95\n                    \n        return global_best_position", "name": "MultiSwarmDynamicOppositeOptimizer", "description": "Implementing a multi-swarm approach where multiple sub-swarms evolve independently and periodically exchange best solutions to enhance exploration and exploitation capabilities for faster convergence.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dec757cb-4e59-497f-ab77-8445f5e9459b", "metadata": {"aucs": [0.3465991591218063, 0.3974487426257267, 0.2618287388375906, 0.3147481280190275, 0.22817224909503342, 0.23754151930047118, 0.31152024899062225, 0.2549175911782934, 0.25541659709913433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08988717258213219, 0.07934060522414077, 0.07708300736294438, 0.058577427635699175, 0.0659712822989783, 0.06799938701102115, 0.05031490594948396, 0.06524940850493477, 0.06643547352095558, 0.056638299753452026, 0.06951599035188083, 0.08846368216398426, 0.06632017674682356, 0.022238824491572995, 0.06197560328676077, 0.054408620269207675, 0.08738402275116874, 0.04059935552757765, 0.9708272538876874, 0.9796073329559297, 0.9934179102525899, 0.9762503638716542, 0.9504700503035951, 0.9691742702670165, 0.9765353989101724, 0.9512788104838811, 0.963965122929443, 0.12356037463618452, 0.10043363833408969, 0.1313019655383061, 0.1415991823407421, 0.12901617784348218, 0.13960416389543806, 0.08072713093277162, 0.05122304973680514, 0.11332665368963846, 0.1256187331845542, 0.16298642974408262, 0.19300964954039235, 0.13006305672743745, 0.12294206437300326, 0.12084535260393481, 0.2086731130297358, 0.1483296425921219, 0.08914781603430277, 0.06303509103629112, 0.021598893392999696, 0.11673829304818173, 0.08788842011128783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04577726464269549, 0.10330479947786808, 0.1014968964648737, 0.08292905122254379, 0.11512728467104094, 0.10615370841313743, 9.999999999998899e-05, 0.12247998768982093, 0.05118298999266191, 0.04493086130693247, 0.04499181868861046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06020082305182628, 9.999999999998899e-05, 9.999999999998899e-05, 0.04982018307111469, 9.999999999998899e-05, 0.040740755590656375, 0.01589842805250341, 9.999999999998899e-05, 0.016526240291612537, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0062579568359234505, 0.006619513997173976, 0.007939958363391453, 0.016107188301270448, 9.999999999998899e-05, 9.999999999998899e-05, 0.000646807512978409, 0.020685945013149132, 0.0031821996790603047, 0.15403844159101532, 0.27267899860712175, 0.2697447998757957, 0.2950643571393706, 0.2578696058103831, 0.2287773206983289, 0.31942963901387855, 0.19509054077626942, 0.372571409516552, 0.0613013897206669, 0.07826095278897027, 0.05022697975010193, 0.05373665814305628, 0.07317763393965615, 0.0814952631964736, 0.07531752426181992, 0.07901879612837215, 0.0523833673437375, 0.10685667669805443, 0.13770039914501198, 0.1275642300482941, 0.15783280206615746, 0.11684644150966583, 0.17066929638102357, 0.10768070512280392, 0.10112781850080266, 0.14206564144598854, 0.19377463199478884, 0.1688286195695351, 0.17082208669477772, 0.18923701851788588, 0.21413497228117406, 0.25354188713789383, 0.17268693835522486, 0.1796402908713417, 0.2037079773343783, 0.13270433625897748, 0.05645945981681999, 0.08398582550377798, 0.14035015413231355, 0.1489527620179253, 0.11322804690565502, 0.09792673933391194, 0.1481040800821518, 0.12867498640706032, 0.15182430191845853, 0.21532878094850771, 0.20663513996318295, 0.2006456165264685, 0.16161030718432412, 0.1807258830876861, 0.1788634300360452, 0.17208588269173108, 0.17590886692122454, 0.1618913063342743, 0.1660996259422034, 0.16016450348616018, 0.15098457693136658, 0.16169923498302718, 0.16291556874481816, 0.17283164769335213, 0.1505369536724951, 0.15946760105383329, 0.13949972920387044, 0.15883608315585385, 0.16021186233197915, 0.14145516582988038, 0.16687440133159548, 0.12474485100092947, 0.11999174586244188, 0.14375463330226534, 0.14337919925946752, 0.11347725415910759, 0.10808288163424518, 0.11989854355240315, 0.17418969875873758, 0.14397262272387912, 0.16126632187418932, 0.08667584299963893, 0.284112922768726, 0.12328328666010435, 0.17337887468979862, 0.19419654174716294, 0.17021764874751466, 0.16237131946857553, 0.1802102842646196, 0.17494346461755472, 0.1615691511389068, 0.17602716171842547, 0.16697799794197365, 0.050986516297357065, 0.05770016107777176, 0.0549264761936642, 0.054261717395392095, 0.04221514190800668, 0.04775653388944301, 0.06489049414285997, 0.06277127798945947, 0.0480338870517677]}, "mutation_prompt": null}
{"id": "d2b8fd21-c61b-4d1b-8866-b47e02f32976", "solution": "import numpy as np\n\nclass EnhancedMultiSwarmDynamicOppositeOptimizer:\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_swarms = num_swarms\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.initial_mutation_rate = initial_mutation_rate\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rate = np.full(self.num_swarms, self.initial_mutation_rate)\n\n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    velocities[i][j] = self.inertia_weight * velocities[i][j] + cognitive_component + social_component\n\n                    if np.random.rand() < mutation_rate[i]:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n\n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9\n                        self.social_weight = self.social_weight * 0.9\n                        mutation_rate[i] *= 0.95 if func(swarms[i][j]) < func(best_positions[i]) else 1.05\n\n        return global_best_position", "name": "EnhancedMultiSwarmDynamicOppositeOptimizer", "description": "Implementing a self-adaptive mutation strategy based on individual swarm performance to adjust mutation rates dynamically for faster convergence.", "configspace": "", "generation": 40, "fitness": 0.14063192781542458, "feedback": "The algorithm EnhancedMultiSwarmDynamicOppositeOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "dec757cb-4e59-497f-ab77-8445f5e9459b", "metadata": {"aucs": [0.3303667201963906, 0.24966509513178248, 0.2542229758605744, 0.21247913041994126, 0.2494242935947143, 0.30142854762547855, 0.23891815399119232, 0.29968514833095306, 0.2624366998126513, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06267907068305412, 0.08375395638960437, 0.04845353992359791, 0.0629478957199544, 0.05634375948508219, 0.06156714597136903, 0.03958558867633166, 0.06482783279054383, 0.04415146086570798, 0.06530731275928081, 0.060315045090619024, 0.06655120139485937, 0.0764846874219629, 0.030086962390841965, 0.05821168901915297, 0.06538035002577547, 0.042753557188199176, 0.045943479376229335, 0.9543618158750755, 0.9784080174078194, 0.9926915033344931, 0.9751952039474749, 0.9514161936964718, 0.9715334884626317, 0.9754546290067062, 0.9474234432339667, 0.9462199679338147, 0.08629185199209788, 0.12779371986276578, 0.036889030199189654, 0.10646103935002904, 0.06974632097208355, 0.16326695662572255, 0.07598051049049592, 0.0893952977399084, 0.06278802493963653, 0.18062538682795182, 0.1496325220274899, 0.2112630446858491, 0.16708841301303512, 0.14646673745356542, 0.11972396783668648, 0.12808906433733558, 0.20301304131323872, 0.15835652685501245, 0.056576819962949054, 0.028114132388535107, 0.10371698757718528, 9.999999999998899e-05, 0.022299454097138516, 0.09053165064238433, 0.006505208138833374, 0.010599674146560378, 0.020731839599040347, 0.11475556960359079, 0.10256286013864158, 0.10589211748150906, 0.11228470163508864, 9.999999999998899e-05, 0.10357855994410203, 0.0783733896871035, 0.041171440898035816, 0.06392030609151389, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0140588146795817, 9.999999999998899e-05, 0.0012788373162618827, 0.03953077401312399, 0.006074805007697304, 0.024208861122900105, 0.032370676390839126, 9.999999999998899e-05, 0.01542695456996157, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029646455894638546, 0.011355102526923289, 0.03204578021377458, 0.009141925454135169, 0.002278491072780664, 0.0006001310176876329, 0.015598982884969526, 9.999999999998899e-05, 0.008562790424109346, 0.24529438684962024, 0.2730759793886375, 0.2620325178613163, 0.2507571977053863, 0.2731263473781068, 0.2608274731199235, 0.31501969567427446, 0.19533058681435078, 0.3316431223575331, 0.06076098583003875, 0.07857236587617666, 0.06205850497467402, 0.06980218991089149, 0.06454282563734537, 0.0663697635638737, 0.053891203702156054, 0.054396588349674646, 0.06909554113390581, 0.1480877527777168, 0.13620683218904284, 0.13017020725479755, 0.1489746960138575, 0.14261849035904184, 0.10798713552628325, 0.11265640893458695, 0.10254824040250554, 0.10949645111370354, 0.18875247457662458, 0.18895360610495437, 0.19000608645281458, 0.17516801426093587, 0.17760675311802898, 0.21673211269330206, 0.16457969421127416, 0.17377774300845283, 0.2072724401758117, 0.13462104411845488, 0.07984296094290255, 0.09058978934977235, 0.15286234793192832, 0.14510563128679554, 0.14513145973004615, 0.1386536156228565, 0.16096534521316264, 0.14533535987219837, 0.1413628638495218, 0.1671018458193153, 0.19086026675469314, 0.20293781796438148, 0.17842644739710234, 0.1996520526314084, 0.16506820213367157, 0.1666844681887404, 0.17607155721956658, 0.16238224721793248, 0.1575166885225301, 0.1235501764866842, 0.15915870317714853, 0.1600221226002313, 0.17001880525256619, 0.15283737084917282, 0.1585303066116971, 0.17171403152185316, 0.15270703244858974, 0.16416676499019744, 0.16268109121328067, 0.1608434113688083, 0.1444290201648355, 0.11203072178716733, 0.14225720211382764, 0.13563155060534426, 0.15325645673992072, 0.11420100670923516, 0.10958550940683476, 0.13568701105829406, 0.09794622680588094, 0.17319369963784192, 0.10423616638310773, 0.08764213651902208, 0.225426885230667, 0.20818677801989227, 0.16443467683027335, 0.16243993987685768, 0.1752511014609699, 0.16213579367527675, 0.17886755646774932, 0.18015428847856274, 0.18331164279492718, 0.1723176429380726, 0.15972849058682437, 0.06695104659116602, 0.07167500037578611, 0.06179412807069329, 0.06585430868306352, 0.051168301001958016, 0.051680311405544854, 0.06913214547124191, 0.05014231706149186, 0.07029379771773625]}, "mutation_prompt": null}
{"id": "1461ce56-7b26-4e9a-8dea-b3f021c494e4", "solution": "import numpy as np\n\nclass CooperativeCoevolutionDynamicOppositeOptimizer:\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_swarms = num_swarms\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.initial_mutation_rate = initial_mutation_rate\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    velocities[i][j] = self.inertia_weight * velocities[i][j] + cognitive_component + social_component\n                    \n                    if np.random.rand() < mutation_rate:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n                    \n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9\n                        self.social_weight = self.social_weight * 0.9\n                        mutation_rate *= 0.95\n                        \n                    for k in range(self.num_swarms):\n                        if func(best_positions[k]) < func(global_best_position):\n                            global_best_position = best_positions[k]\n                            self.cognitive_weight = self.cognitive_weight * 0.9\n                            self.social_weight = self.social_weight * 0.9\n                            mutation_rate *= 0.95\n                    \n        return global_best_position", "name": "CooperativeCoevolutionDynamicOppositeOptimizer", "description": "Introducing a cooperative coevolution strategy where each sub-swarm evolves independently with shared information exchange to enhance diversity and convergence speed.", "configspace": "", "generation": 41, "fitness": 0.12382221402980773, "feedback": "The algorithm CooperativeCoevolutionDynamicOppositeOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "dec757cb-4e59-497f-ab77-8445f5e9459b", "metadata": {"aucs": [0.20767966581166497, 0.21686457950743165, 0.22281639894012273, 0.20755052048365874, 0.17254154018292245, 0.18531381416741988, 0.25222930262125765, 0.20654972894370704, 0.20092907059508347, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050997760469963405, 0.045122882556432486, 0.048840467738196836, 0.03535051570712511, 0.04911926843998904, 0.07237398860404698, 0.030432172954111825, 0.04010060026163176, 0.04691920033155583, 0.05527255013583943, 0.047739042845832635, 0.039254673947116125, 0.03688797030821278, 0.02993864384466871, 0.03905371133505764, 0.05436622707987748, 0.03920243689698799, 0.026561491051228403, 0.9098471353102664, 0.9406585965157707, 0.9889580166074212, 0.9287951753736131, 0.8385767677704763, 0.887369695960761, 0.9901697743422343, 0.8413815851796576, 0.8588575763051727, 0.08612626257985179, 0.10975497206101936, 0.045473338246253436, 0.09368893624494135, 0.10695312652744449, 0.1180082414048329, 0.050797203774750055, 0.05224216104334756, 0.08546204419810544, 0.12738622742159278, 0.09228386049365633, 0.15378843071577464, 0.14443189551757318, 0.11085885139564455, 0.10987365676814875, 0.1140868707562318, 0.09109606060076747, 0.09408328352148232, 0.07913864747758803, 0.08775061878564361, 9.999999999998899e-05, 0.0015312412458637903, 0.0103983426679215, 9.999999999998899e-05, 9.999999999998899e-05, 0.06742145105535435, 0.055240997775652056, 0.05209229761914591, 0.05906148209633899, 0.015340921372919758, 0.024441237867067866, 9.999999999998899e-05, 0.0837016481484969, 0.08081632022152663, 0.010990304168702503, 0.0851299644037139, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005974426602375238, 9.999999999998899e-05, 0.0039429394319331346, 0.019224204028625347, 0.006542118806541097, 9.999999999998899e-05, 0.016847602945458284, 0.023725421194666363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011057576641227973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01920464654405718, 0.017518158139846696, 0.03130980438601272, 0.03373235478135139, 0.2503503595607267, 0.2837098601920438, 0.20369255081732085, 0.19218254024695147, 0.20172030581601552, 0.20377995797216653, 0.24122564884559505, 0.16721311724761923, 0.3006308157790919, 0.058316412132231044, 0.067258850474465, 0.0407296015447004, 0.06611926728154227, 0.04750663703796687, 0.04614338127412343, 0.05465920608401864, 0.044610303884460856, 0.048989657980264, 0.09884531406343888, 0.12385306543190633, 0.11842175776965747, 0.11315274589936986, 0.10996523824920745, 0.1486996073374055, 0.11003757841550055, 0.10296145538846535, 0.09677787296031415, 0.1832693501026772, 0.17411784840369948, 0.18121026279211294, 0.14331311081124654, 0.15406270115464082, 0.1766839446376185, 0.14727860291481498, 0.19612094495665322, 0.177112021205324, 0.137982182207106, 0.07072186304126737, 0.12434932784824249, 0.12097565112272657, 0.12578938236984483, 0.1383171623313587, 0.10724013372781849, 0.1622907814458342, 0.1691576273977522, 0.16722206911686077, 0.13928206068259663, 0.13840917465572788, 0.14811552212082257, 0.1837721942872137, 0.16163513483269576, 0.15599134407683435, 0.1428645182543924, 0.16543926000801767, 0.1573639904032783, 0.13658020336791576, 0.16469912702951528, 0.12373319570019958, 0.14801742975874, 0.1334352419174234, 0.13782915791388062, 0.14381625163743827, 0.15660456244610865, 0.19631588574916414, 0.12062803435997937, 0.11754832593026243, 0.12893338812069777, 0.15605003774867177, 0.16431853109508587, 0.11853013570754978, 0.11757999193175361, 0.10133115697833162, 0.1452613884660261, 0.16622287198600483, 0.07132889438601864, 0.10246586105359023, 0.12265294416385442, 0.17130384142890398, 0.09888855665832086, 0.17177710446012606, 0.1707692384472761, 0.15520319449959608, 0.16185511456841228, 0.1632888029809938, 0.15304880715966485, 0.15080304930230926, 0.1535735308858981, 0.1704718492591779, 0.15754834813284202, 0.16022876213221082, 0.05423771941695088, 0.04445029422117441, 0.04101256261732544, 0.043790791946891505, 0.04983932963876103, 0.05081354401530569, 0.03750052388675318, 0.05764930744915309, 0.035019181457601745]}, "mutation_prompt": null}
{"id": "6809bfef-0cb6-4c9d-92c9-e4b181284fae", "solution": "import numpy as np\n\nclass EnhancedMultiSwarmDynamicOppositeOptimizer:\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_swarms = num_swarms\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.initial_mutation_rate = initial_mutation_rate\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    adaptive_inertia = self.inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight adaptation\n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component\n                    \n                    if np.random.rand() < mutation_rate:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n                    \n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9\n                        self.social_weight = self.social_weight * 0.9\n                        mutation_rate *= 0.95\n                    \n        return global_best_position", "name": "EnhancedMultiSwarmDynamicOppositeOptimizer", "description": "Introducing dynamic inertia weight adaptation based on swarm's performance to improve convergence speed.", "configspace": "", "generation": 42, "fitness": 0.14348666490036485, "feedback": "The algorithm EnhancedMultiSwarmDynamicOppositeOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "dec757cb-4e59-497f-ab77-8445f5e9459b", "metadata": {"aucs": [0.3488953324248544, 0.3902115586108761, 0.26299071366604454, 0.314966944755649, 0.22782085289152743, 0.24170553578608156, 0.31095455534412964, 0.25396451760826055, 0.25569895510418417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08986008030071335, 0.07133037662856201, 0.07474057765616238, 0.05610668189486101, 0.0877783527002699, 0.06539583549947259, 0.05100782194053444, 0.0919009846336909, 0.0629272327035082, 0.06783014366438911, 0.06267393893645401, 0.07575217476027318, 0.07173926267755193, 0.02744944755424006, 0.061759159977448186, 0.08621274145814473, 0.08254051503511528, 0.056056169997562244, 0.9708272454496688, 0.9796073329559297, 0.9934179102525899, 0.9762503504360511, 0.9504698491996976, 0.9691742330484098, 0.9765353989101724, 0.9512782369854426, 0.9639649983524184, 0.12382877789680824, 0.09214900453818842, 0.1131405171076647, 0.1426345132453285, 0.12875454548883114, 0.1392753629325012, 0.08071684927658207, 0.05119274319073297, 0.11310030289306527, 0.1256187331845542, 0.16298642974408262, 0.1961910203114039, 0.12250688981275581, 0.12294206437300326, 0.12054267967010401, 0.1767202828913481, 0.1479173094456706, 0.08887090588588997, 0.06707674389699136, 0.017669097917694887, 0.11690170550511014, 0.08805345952813037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045811111295023355, 0.10359293545822745, 0.10251980167014985, 0.0837456239848059, 0.11526818990410648, 0.10210816298857639, 9.999999999998899e-05, 0.12326248242653326, 0.02695165505283259, 0.039430976484591485, 0.04390356819601893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05555870361204174, 9.999999999998899e-05, 9.999999999998899e-05, 0.035567190205049504, 0.0006457365038921026, 0.04497852680402681, 0.021109000648769527, 9.999999999998899e-05, 0.020150872735119618, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005367085837420182, 0.01118711364870939, 0.007794348753904168, 0.01618661787473996, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011834086865964988, 0.020897883442155374, 0.0030851752258911347, 0.15393110472831018, 0.2726381247252805, 0.265883949318792, 0.2912482508001262, 0.2574649976140877, 0.2267935942599335, 0.3062262816620417, 0.19510187433233728, 0.3748529793142874, 0.061556265533391885, 0.07765957321037209, 0.05118911476296417, 0.06304971277696825, 0.07851657048128513, 0.08252409186141962, 0.06601067692059204, 0.0688318980042546, 0.05758783356403818, 0.13013415014311636, 0.19617119854948983, 0.14842813018073697, 0.13859987462793344, 0.14769743581502515, 0.13206441649958656, 0.12949872496978077, 0.11288115102720053, 0.15647092311977506, 0.190635498152545, 0.16920791607890173, 0.17082208669477772, 0.2076239959997641, 0.21265322859886826, 0.21847741970833334, 0.1688861923370759, 0.1801011940559618, 0.19514231322308095, 0.13659630592576266, 0.05659195310545351, 0.08398582550377798, 0.140643738343591, 0.1549691809633974, 0.1155812352386627, 0.10677023691675791, 0.15115341101292545, 0.1337609372369476, 0.17673781403575828, 0.17951865536362221, 0.19692192101969241, 0.1442475377263478, 0.17213215835208706, 0.17021436478288066, 0.16424311502171185, 0.1561919848356722, 0.19823955625776934, 0.16275612244373538, 0.16913135964176595, 0.1647087234161183, 0.15913133187091566, 0.16208834141103923, 0.1660342024794279, 0.16813080201107655, 0.15550654937195363, 0.16290689224995114, 0.13950263804112295, 0.15872709786174877, 0.16023147614945976, 0.14146721992962996, 0.1674740770683023, 0.12480246910034787, 0.11997486654660572, 0.1437449921295222, 0.14350282088337118, 0.11169371139846973, 0.10807854385395188, 0.11973856916085646, 0.17440392713642983, 0.16680682670667668, 0.16176908700235948, 0.08701146688143091, 0.2833295417799875, 0.1232561413577361, 0.1736424070024044, 0.15646493208110968, 0.17956956931902646, 0.18375980102915856, 0.19655464840454895, 0.17720803937416407, 0.174639107404443, 0.17348722809215555, 0.1685299060436115, 0.06243448481094416, 0.061403617531768706, 0.0874473884704412, 0.048391101049759855, 0.06779425414484119, 0.06535023739489643, 0.060719187611403824, 0.055266595557274534, 0.04499251000104609]}, "mutation_prompt": null}
{"id": "12dce003-b247-4402-aaff-7237e0746e1d", "solution": "import numpy as np\n\nclass EnhancedGradientGuidedMultiSwarmDynamicOppositeOptimizer:\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, gradient_weight=0.5, initial_mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_swarms = num_swarms\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.gradient_weight = gradient_weight\n        self.initial_mutation_rate = initial_mutation_rate\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            gradients = [np.gradient([func(p) for p in swarms[i]]) for i in range(self.num_swarms)]\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    gradient_component = self.gradient_weight * gradients[i][j]\n                    adaptive_inertia = self.inertia_weight * (1 - _ / self.budget)\n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component + gradient_component\n                    \n                    if np.random.rand() < mutation_rate:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n                    \n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9\n                        self.social_weight = self.social_weight * 0.9\n                        mutation_rate *= 0.95\n                    \n        return global_best_position", "name": "EnhancedGradientGuidedMultiSwarmDynamicOppositeOptimizer", "description": "Introducing a novel gradient-based component to guide swarm movement towards better solutions for faster convergence.", "configspace": "", "generation": 43, "fitness": 0.08846122477681982, "feedback": "The algorithm EnhancedGradientGuidedMultiSwarmDynamicOppositeOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.17.", "error": "", "parent_id": "6809bfef-0cb6-4c9d-92c9-e4b181284fae", "metadata": {"aucs": [0.15884529788439594, 0.1650347947511922, 0.1090582743638584, 0.10694082860070098, 0.11116449024436315, 0.11042008850345264, 0.11704150484852993, 0.13338148759286628, 0.12372765028882893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019829650988555825, 0.01949289482999028, 0.03194803969012916, 0.010643411704069683, 0.007571237445186507, 0.006669962766643223, 0.018248263482334326, 0.007792397052521438, 0.01353756724086419, 0.007761863502657063, 0.01200780246922295, 0.021100557396967812, 0.01964274185808501, 0.023286662905902977, 0.006725933833861331, 0.014763392921912755, 9.999999999998899e-05, 9.999999999998899e-05, 0.9795159527644929, 0.9772497975888448, 0.9647531586549354, 0.1062240684455843, 0.9523829705468405, 0.916614532571623, 0.9580575409110618, 0.9608871040847445, 0.16319524850704203, 0.06274794416174423, 9.999999999998899e-05, 9.999999999998899e-05, 0.03583829486787815, 0.013051031096182886, 0.014316027139959497, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10900709327401259, 0.08595077384616956, 0.1003324640751827, 0.0667108215001172, 0.07285119553694963, 0.006630652899839107, 0.068321852450824, 0.05931056463008866, 0.0218002271132689, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002884839524256444, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12439279554943838, 0.15756555760738078, 0.15949868401767853, 0.11656836097453493, 0.10274288241579344, 0.0989933360133809, 0.1770675379887311, 0.22758814500022095, 0.18186878821283348, 9.999999999998899e-05, 0.003461682664471999, 0.02198412468535549, 0.03266886175302153, 0.02477401755248121, 0.02818290499768228, 0.027342232662126986, 0.014478541336559125, 0.03997836046603209, 0.08508793155964689, 0.12424136711467582, 0.11842175776965747, 0.11690554123467078, 0.10852972522114013, 0.12458195792262616, 0.09754634124452355, 0.10424432894894364, 0.10884179813616413, 0.13564520486715992, 0.14276378981093696, 0.1613932299901244, 0.15802921772131706, 0.1566041746911322, 0.14430913766444864, 0.12354243560679934, 0.17377774300845283, 0.15520626667297022, 0.07785315068300647, 0.07097007502806829, 0.08398582550377798, 0.06922534902860134, 0.08089238428866175, 0.07337398875820478, 0.0837317855149382, 0.0997711199450243, 0.06412526395900253, 0.12293918233724765, 0.1477280137070568, 0.1418107207788305, 0.12417289152780175, 0.11918735057179852, 0.1337128783390653, 0.12245976138762271, 0.1281715738404242, 0.12698956187354438, 9.999999999998899e-05, 0.09115492494138233, 9.999999999998899e-05, 0.05498961537069791, 0.03670211702295234, 0.09490025527797918, 0.044687551576232054, 0.11966953515728784, 0.09628113301887475, 0.11489686462320547, 0.10313502655660889, 0.1385651562852851, 0.11595194081144877, 0.12228110127178082, 0.10488257140964419, 0.1159333333374234, 0.10511484148144368, 0.10479330362004535, 0.14073779487162696, 0.10781115403808195, 0.10012973675046977, 0.10318573102442752, 0.07864270824237607, 0.09493379938763424, 0.08717499525929306, 0.11432550022864651, 0.09318965496700093, 0.16201058928604506, 0.17768657369576235, 0.1721309182107199, 0.1561653871392089, 0.1541464890280697, 0.15839492022166501, 0.16081258494456074, 0.16609776819760314, 0.16408074385904603, 0.03883702013886814, 0.03312788017311319, 0.037502739271206176, 0.033177176459528, 0.03425093938292756, 0.027751960532449438, 0.019321371751513494, 0.03803354422653826, 0.04643167153335748]}, "mutation_prompt": null}
{"id": "23675a2d-ada6-46aa-b74c-3abe1fa9adfb", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationOptimizer:\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_swarms = num_swarms\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.initial_mutation_rate = initial_mutation_rate\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    adaptive_inertia = self.inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight adaptation\n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component\n                    \n                    if np.random.rand() < mutation_rate:\n                        adaptive_mutation = 0.1 + 0.9 * (func(global_best_position) - func(swarms[i][j])) / (func(global_best_position) - func(best_positions[i]))\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + adaptive_mutation * np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n                    \n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9\n                        self.social_weight = self.social_weight * 0.9\n                        mutation_rate *= 0.95\n                    \n        return global_best_position", "name": "EnhancedAdaptiveMutationOptimizer", "description": "Employing a novel adaptive mutation strategy based on function landscape analysis to guide exploration and exploitation for faster convergence.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "An exception occurred: ZeroDivisionError('float division by zero').", "error": "ZeroDivisionError('float division by zero')", "parent_id": "6809bfef-0cb6-4c9d-92c9-e4b181284fae", "metadata": {}, "mutation_prompt": null}
{"id": "dc44f191-b924-4f2f-812c-0aa44dee4854", "solution": "import numpy as np\n\nclass EnhancedMultiSwarmDynamicOppositeOptimizer:\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_swarms = num_swarms\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.initial_mutation_rate = initial_mutation_rate\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    adaptive_inertia = self.inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight adaptation\n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component\n                    \n                    if np.random.rand() < mutation_rate:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n                    \n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9\n                        self.social_weight = self.social_weight * 0.9\n                        mutation_rate *= 0.95\n                    \n        return global_best_position", "name": "EnhancedMultiSwarmDynamicOppositeOptimizer", "description": "Introducing dynamic inertia weight adaptation based on swarm's performance to improve convergence speed.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6809bfef-0cb6-4c9d-92c9-e4b181284fae", "metadata": {"aucs": [0.3488953324248544, 0.3902115586108761, 0.26299071366604454, 0.314966944755649, 0.22782085289152743, 0.24170553578608156, 0.31095455534412964, 0.25396451760826055, 0.25569895510418417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08986008030071335, 0.07133037662856201, 0.07474057765616238, 0.05610668189486101, 0.0877783527002699, 0.06539583549947259, 0.05100782194053444, 0.0919009846336909, 0.0629272327035082, 0.06783014366438911, 0.06267393893645401, 0.07575217476027318, 0.07173926267755193, 0.02744944755424006, 0.061759159977448186, 0.08621274145814473, 0.08254051503511528, 0.056056169997562244, 0.9708272454496688, 0.9796073329559297, 0.9934179102525899, 0.9762503504360511, 0.9504698491996976, 0.9691742330484098, 0.9765353989101724, 0.9512782369854426, 0.9639649983524184, 0.12382877789680824, 0.09214900453818842, 0.1131405171076647, 0.1426345132453285, 0.12875454548883114, 0.1392753629325012, 0.08071684927658207, 0.05119274319073297, 0.11310030289306527, 0.1256187331845542, 0.16298642974408262, 0.1961910203114039, 0.12250688981275581, 0.12294206437300326, 0.12054267967010401, 0.1767202828913481, 0.1479173094456706, 0.08887090588588997, 0.06707674389699136, 0.017669097917694887, 0.11690170550511014, 0.08805345952813037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045811111295023355, 0.10359293545822745, 0.10251980167014985, 0.0837456239848059, 0.11526818990410648, 0.10210816298857639, 9.999999999998899e-05, 0.12326248242653326, 0.02695165505283259, 0.039430976484591485, 0.04390356819601893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05555870361204174, 9.999999999998899e-05, 9.999999999998899e-05, 0.035567190205049504, 0.0006457365038921026, 0.04497852680402681, 0.021109000648769527, 9.999999999998899e-05, 0.020150872735119618, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005367085837420182, 0.01118711364870939, 0.007794348753904168, 0.01618661787473996, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011834086865964988, 0.020897883442155374, 0.0030851752258911347, 0.15393110472831018, 0.2726381247252805, 0.265883949318792, 0.2912482508001262, 0.2574649976140877, 0.2267935942599335, 0.3062262816620417, 0.19510187433233728, 0.3748529793142874, 0.061556265533391885, 0.07765957321037209, 0.05118911476296417, 0.06304971277696825, 0.07851657048128513, 0.08252409186141962, 0.06601067692059204, 0.0688318980042546, 0.05758783356403818, 0.13013415014311636, 0.19617119854948983, 0.14842813018073697, 0.13859987462793344, 0.14769743581502515, 0.13206441649958656, 0.12949872496978077, 0.11288115102720053, 0.15647092311977506, 0.190635498152545, 0.16920791607890173, 0.17082208669477772, 0.2076239959997641, 0.21265322859886826, 0.21847741970833334, 0.1688861923370759, 0.1801011940559618, 0.19514231322308095, 0.13659630592576266, 0.05659195310545351, 0.08398582550377798, 0.140643738343591, 0.1549691809633974, 0.1155812352386627, 0.10677023691675791, 0.15115341101292545, 0.1337609372369476, 0.17673781403575828, 0.17951865536362221, 0.19692192101969241, 0.1442475377263478, 0.17213215835208706, 0.17021436478288066, 0.16424311502171185, 0.1561919848356722, 0.19823955625776934, 0.16275612244373538, 0.16913135964176595, 0.1647087234161183, 0.15913133187091566, 0.16208834141103923, 0.1660342024794279, 0.16813080201107655, 0.15550654937195363, 0.16290689224995114, 0.13950263804112295, 0.15872709786174877, 0.16023147614945976, 0.14146721992962996, 0.1674740770683023, 0.12480246910034787, 0.11997486654660572, 0.1437449921295222, 0.14350282088337118, 0.11169371139846973, 0.10807854385395188, 0.11973856916085646, 0.17440392713642983, 0.16680682670667668, 0.16176908700235948, 0.08701146688143091, 0.2833295417799875, 0.1232561413577361, 0.1736424070024044, 0.15646493208110968, 0.17956956931902646, 0.18375980102915856, 0.19655464840454895, 0.17720803937416407, 0.174639107404443, 0.17348722809215555, 0.1685299060436115, 0.06243448481094416, 0.061403617531768706, 0.0874473884704412, 0.048391101049759855, 0.06779425414484119, 0.06535023739489643, 0.060719187611403824, 0.055266595557274534, 0.04499251000104609]}, "mutation_prompt": null}
{"id": "d2f2bd2e-5cb7-47bd-90b8-fd6ae044b8f9", "solution": "import numpy as np\n\nclass EnhancedMultiSwarmDynamicOppositeOptimizer:\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_swarms = num_swarms\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.initial_mutation_rate = initial_mutation_rate\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    adaptive_inertia = self.inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight adaptation\n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component\n                    \n                    if np.random.rand() < mutation_rate:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n                    \n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9\n                        self.social_weight = self.social_weight * 0.9\n                        mutation_rate *= 0.95\n                    \n        return global_best_position", "name": "EnhancedMultiSwarmDynamicOppositeOptimizer", "description": "Introducing dynamic inertia weight adaptation based on swarm's performance to improve convergence speed.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6809bfef-0cb6-4c9d-92c9-e4b181284fae", "metadata": {"aucs": [0.3488953324248544, 0.3902115586108761, 0.26299071366604454, 0.314966944755649, 0.22782085289152743, 0.24170553578608156, 0.31095455534412964, 0.25396451760826055, 0.25569895510418417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08986008030071335, 0.07133037662856201, 0.07474057765616238, 0.05610668189486101, 0.0877783527002699, 0.06539583549947259, 0.05100782194053444, 0.0919009846336909, 0.0629272327035082, 0.06783014366438911, 0.06267393893645401, 0.07575217476027318, 0.07173926267755193, 0.02744944755424006, 0.061759159977448186, 0.08621274145814473, 0.08254051503511528, 0.056056169997562244, 0.9708272454496688, 0.9796073329559297, 0.9934179102525899, 0.9762503504360511, 0.9504698491996976, 0.9691742330484098, 0.9765353989101724, 0.9512782369854426, 0.9639649983524184, 0.12382877789680824, 0.09214900453818842, 0.1131405171076647, 0.1426345132453285, 0.12875454548883114, 0.1392753629325012, 0.08071684927658207, 0.05119274319073297, 0.11310030289306527, 0.1256187331845542, 0.16298642974408262, 0.1961910203114039, 0.12250688981275581, 0.12294206437300326, 0.12054267967010401, 0.1767202828913481, 0.1479173094456706, 0.08887090588588997, 0.06707674389699136, 0.017669097917694887, 0.11690170550511014, 0.08805345952813037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045811111295023355, 0.10359293545822745, 0.10251980167014985, 0.0837456239848059, 0.11526818990410648, 0.10210816298857639, 9.999999999998899e-05, 0.12326248242653326, 0.02695165505283259, 0.039430976484591485, 0.04390356819601893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05555870361204174, 9.999999999998899e-05, 9.999999999998899e-05, 0.035567190205049504, 0.0006457365038921026, 0.04497852680402681, 0.021109000648769527, 9.999999999998899e-05, 0.020150872735119618, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005367085837420182, 0.01118711364870939, 0.007794348753904168, 0.01618661787473996, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011834086865964988, 0.020897883442155374, 0.0030851752258911347, 0.15393110472831018, 0.2726381247252805, 0.265883949318792, 0.2912482508001262, 0.2574649976140877, 0.2267935942599335, 0.3062262816620417, 0.19510187433233728, 0.3748529793142874, 0.061556265533391885, 0.07765957321037209, 0.05118911476296417, 0.06304971277696825, 0.07851657048128513, 0.08252409186141962, 0.06601067692059204, 0.0688318980042546, 0.05758783356403818, 0.13013415014311636, 0.19617119854948983, 0.14842813018073697, 0.13859987462793344, 0.14769743581502515, 0.13206441649958656, 0.12949872496978077, 0.11288115102720053, 0.15647092311977506, 0.190635498152545, 0.16920791607890173, 0.17082208669477772, 0.2076239959997641, 0.21265322859886826, 0.21847741970833334, 0.1688861923370759, 0.1801011940559618, 0.19514231322308095, 0.13659630592576266, 0.05659195310545351, 0.08398582550377798, 0.140643738343591, 0.1549691809633974, 0.1155812352386627, 0.10677023691675791, 0.15115341101292545, 0.1337609372369476, 0.17673781403575828, 0.17951865536362221, 0.19692192101969241, 0.1442475377263478, 0.17213215835208706, 0.17021436478288066, 0.16424311502171185, 0.1561919848356722, 0.19823955625776934, 0.16275612244373538, 0.16913135964176595, 0.1647087234161183, 0.15913133187091566, 0.16208834141103923, 0.1660342024794279, 0.16813080201107655, 0.15550654937195363, 0.16290689224995114, 0.13950263804112295, 0.15872709786174877, 0.16023147614945976, 0.14146721992962996, 0.1674740770683023, 0.12480246910034787, 0.11997486654660572, 0.1437449921295222, 0.14350282088337118, 0.11169371139846973, 0.10807854385395188, 0.11973856916085646, 0.17440392713642983, 0.16680682670667668, 0.16176908700235948, 0.08701146688143091, 0.2833295417799875, 0.1232561413577361, 0.1736424070024044, 0.15646493208110968, 0.17956956931902646, 0.18375980102915856, 0.19655464840454895, 0.17720803937416407, 0.174639107404443, 0.17348722809215555, 0.1685299060436115, 0.06243448481094416, 0.061403617531768706, 0.0874473884704412, 0.048391101049759855, 0.06779425414484119, 0.06535023739489643, 0.060719187611403824, 0.055266595557274534, 0.04499251000104609]}, "mutation_prompt": null}
{"id": "2e07f7e2-682c-4766-8d8e-efb6c4d32478", "solution": "import numpy as np\n\nclass EnhancedMultiSwarmFastConvergenceOptimizer:\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_swarms = num_swarms\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.initial_mutation_rate = initial_mutation_rate\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    adaptive_inertia = self.inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight adaptation\n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component\n                    mutation_rate *= 0.95\n                    if np.random.rand() < mutation_rate:\n                        best_individual = best_positions[np.argmin([func(p) for p in best_positions])]\n                        mutation_component = np.random.rand(self.dim) * (best_individual - swarms[i][j])\n                        swarms[i][j] = np.clip(swarms[i][j] + mutation_component, -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n                    \n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9\n                        self.social_weight = self.social_weight * 0.9\n                    \n        return global_best_position", "name": "EnhancedMultiSwarmFastConvergenceOptimizer", "description": "Introducing a mutation strategy based on the behavior of the best-performing individuals to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 47, "fitness": 0.1282264532135422, "feedback": "The algorithm EnhancedMultiSwarmFastConvergenceOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "6809bfef-0cb6-4c9d-92c9-e4b181284fae", "metadata": {"aucs": [0.41082503956274186, 0.19197264501205102, 0.2940988937082153, 0.186477522681186, 0.24441394109110648, 0.20589300364232266, 0.22693522594131776, 0.19726040896678165, 0.3215323469946918, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03635499132341269, 0.04877719568463368, 0.03456487088243543, 0.05854550345926712, 0.05169282810151399, 0.0543265997058201, 0.03753649697034911, 0.028251255378524576, 0.01710020642057586, 0.03604833178709177, 0.019280906865658642, 0.02946137867440357, 0.03283695467744896, 0.008157009749230393, 0.03752714952868297, 0.031198135974216945, 0.017893425819802578, 0.03339398912614033, 0.9586591128388827, 0.979275285557568, 0.9934179102525899, 0.9752140685106457, 0.9505018674505055, 0.960678902874363, 0.9745934976194441, 0.9599308220559506, 0.9420192349027519, 0.06345412619447433, 0.09941852428573617, 0.0609011442241677, 0.07988259990121205, 0.1376919528690338, 0.14206006481767053, 0.08441058943954882, 0.08031290781351075, 0.07767672961625338, 0.1339421398667806, 0.16382952688043717, 0.13571781025164198, 0.18811662184288092, 0.10965886569169903, 0.11387539347593179, 0.08849537256459639, 0.10235688912071039, 0.11341844973791793, 0.1017868233309851, 9.999999999998899e-05, 0.03975426592010667, 0.06895168791381545, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041223817903361715, 9.999999999998899e-05, 0.12660678793333158, 0.010176785444690362, 0.11444198957617102, 9.999999999998899e-05, 9.999999999998899e-05, 0.012165917327594422, 9.999999999998899e-05, 9.999999999998899e-05, 0.11056357685414475, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004402140888321582, 9.999999999998899e-05, 0.04717149534707188, 0.04399804602205881, 9.999999999998899e-05, 9.999999999998899e-05, 0.010680225195599413, 9.999999999998899e-05, 0.005838602582111885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055457437833625445, 9.999999999998899e-05, 9.999999999998899e-05, 0.3883841926914029, 0.15756555760738078, 0.33376844910297854, 0.19826426655558282, 0.2062707190173605, 0.20508285887685962, 0.35295807248497146, 0.13762248550943734, 0.33970289363532524, 0.05042013648859078, 0.05129222567298586, 0.04468204954148458, 0.03266886175302153, 0.04284704800785766, 0.05194582385775359, 0.05757359397910333, 0.057958329145903154, 0.05335694689131776, 0.1309389503604762, 0.10628685353619771, 0.11842175776965747, 0.11982427198766765, 0.20697068123514906, 0.14898848584997082, 0.1010606781129687, 0.08099219012337167, 0.11224694763304377, 0.17333751600463143, 0.15085001928448294, 0.24792422789455437, 0.13800672315110074, 0.1527446838098362, 0.15963033423898965, 0.14951466384118361, 0.17377774300845283, 0.13768453163869965, 0.14689314908649054, 0.06320453750957344, 0.12037696704437972, 0.06874307201303054, 0.09476428117120739, 0.16001100867958917, 0.1245987765198241, 0.0997711199450243, 0.1067340208857871, 0.13503568528164145, 0.19107540804842282, 0.15848885705068516, 0.16293197602230758, 0.1435689212191481, 0.16832898434449672, 0.1404441093017138, 0.16114052148281477, 0.15105569162001775, 0.16321359529282486, 0.17593903925401377, 0.1533488689229242, 9.999999999998899e-05, 0.17482742397604012, 0.14875281757481518, 0.16812014997035785, 0.15077090622890243, 0.18289882668194157, 0.15347421183608034, 0.13969716209539806, 0.08167024703901915, 0.10206059723306449, 0.18891305891320742, 0.10946780104396914, 0.11606454412302669, 0.12637664675326088, 0.12695707376916998, 0.11040265245322212, 0.1062746944753411, 0.16301805730888286, 0.06369444912946987, 0.06456217765872097, 0.07691128079388176, 0.18216880757456433, 0.2808561531575764, 0.18244904491978953, 0.140549307334775, 0.1578440732768207, 0.15878568249961733, 0.17948771992023937, 0.1757974300581795, 0.16411574387691652, 0.1701405837401455, 0.15405916376709372, 0.1740478614042873, 0.03125220543992724, 0.04412398871827772, 0.05304487599896224, 0.027015293023570086, 0.04567662629955016, 0.05793390394588038, 0.07560535235184429, 0.03803354422653826, 0.027791124077602425]}, "mutation_prompt": null}
{"id": "b0d646b6-aeaa-4ef5-9bee-79f2d1fbb167", "solution": "class EnhancedAdaptiveMutationRateOptimizer(EnhancedMultiSwarmDynamicOppositeOptimizer):\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1, adaptive_mutation_rate=0.1):\n        super().__init__(budget, dim, num_swarms, swarm_size, inertia_weight, cognitive_weight, social_weight, initial_mutation_rate)\n        self.adaptive_mutation_rate = adaptive_mutation_rate\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    adaptive_inertia = self.inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight adaptation\n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component\n                    \n                    if np.random.rand() < mutation_rate:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n                    \n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9\n                        self.social_weight = self.social_weight * 0.9\n                        mutation_rate = self.adaptive_mutation_rate * (1 - _ / self.budget)  # Adaptive Mutation Rate\n\n        return global_best_position", "name": "EnhancedAdaptiveMutationRateOptimizer", "description": "Introducing a novel adaptive mutation rate mechanism based on swarm performance, dynamically adjusting mutation rates to enhance exploration/exploitation balance for faster convergence.", "configspace": "", "generation": 48, "fitness": 0.14601722622918298, "feedback": "The algorithm EnhancedAdaptiveMutationRateOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "6809bfef-0cb6-4c9d-92c9-e4b181284fae", "metadata": {"aucs": [0.37205851846076576, 0.26264015184865397, 0.27066484661195234, 0.30333265351762406, 0.2599459924541585, 0.32588802678153517, 0.2331964198278469, 0.32183174999405606, 0.1974264801037483, 9.999999999998899e-05, 0.02219172750116538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07806777614076543, 0.07985672388799481, 0.09475480289956217, 0.08903148187598398, 0.05272862690367419, 0.05161765316953404, 0.07580750886769405, 0.06693534917256416, 0.046391478472405434, 0.06680839349985579, 0.07986087923657326, 0.06291336500056044, 0.07267083389977702, 0.03504711970327534, 0.07010660376969591, 0.06194337598755717, 0.06570158348303812, 0.045369848024661374, 0.970825490770831, 0.9796073329559297, 0.9934179102525899, 0.9762503504360511, 0.9466616128832075, 0.9728128119161089, 0.9765353989101724, 0.9586164360544833, 0.9486819757767593, 0.10786050505818334, 0.11868730927430027, 0.05514630785493757, 0.12449845120269198, 0.13103644109692758, 0.13495822218134368, 0.07043119602378156, 0.08092894422820007, 0.08264283306733, 0.19572547564228093, 0.1830161773537624, 0.20205516411992053, 0.16698986750838407, 0.12541178731182534, 0.14646493916767067, 0.1591074314947225, 0.13841069739450307, 0.2148414928599498, 0.13222755735930336, 0.00017625784128028066, 0.0965625273618318, 0.09262624428514699, 0.0171218557000804, 0.09502378336779926, 0.00044333965133824815, 0.09451226001682533, 0.005537987547925116, 0.10416524442178177, 0.13533260652044266, 0.11233219194706834, 0.10692983129743205, 0.03357198710053255, 0.10570879791219756, 0.10295329731328873, 0.05477955749377883, 0.028148264178663007, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169396432292775, 9.999999999998899e-05, 9.999999999998899e-05, 0.035567190205049504, 0.0038946264291167543, 0.039601814170376004, 0.04449457201966356, 0.019963970947559417, 0.021370474451314347, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004610796749426438, 0.031080212452592293, 0.049369923694344786, 0.0077137648154690375, 0.004771949060915381, 0.007815334453597056, 0.00874199595820957, 0.00861115120765299, 0.02812215098151316, 0.2066006857338929, 0.2645741867034602, 0.2707704988007692, 0.3017493133325536, 0.2856134394662404, 0.27650462296855083, 0.30145180889376, 0.26853119766456235, 0.3266722810068827, 0.06343262558697971, 0.0725366322309261, 0.05358457845822828, 0.06424166286046817, 0.07216009222081154, 0.0614555983653452, 0.07701850966372314, 0.07499294752480601, 0.07617183661901161, 0.10532654311539369, 0.1735484959174457, 0.11842175776965747, 0.1393185322022602, 0.1865047179486481, 0.1224372316199509, 0.16265218690837102, 0.097398398067159, 0.10732109941673351, 0.2036298998447954, 0.16892039772203649, 0.21944739714307704, 0.23692432476643055, 0.1754495870809838, 0.21621241713933714, 0.16333685198823478, 0.17377774300845283, 0.2279834086939223, 0.11302847075117439, 0.08944051490755467, 0.10511681820972918, 0.16313859975923006, 0.12887791442651486, 0.1637896241957928, 0.09401024076710585, 0.14048951553696842, 0.14376363763343347, 0.1703786941428267, 0.2225076126122576, 0.17551378047655886, 0.17590218716052264, 0.19818269629691765, 0.17563690719585434, 0.16696561835256185, 0.16617561842345918, 0.17013209033844956, 0.1600622290398116, 0.16245427112383426, 0.14783155420933058, 0.15178322172455716, 0.15909394948786426, 0.1669154396152458, 0.14430586146557156, 0.15333908981266287, 0.1782059337546974, 0.1492485885462569, 0.1582375468410666, 0.17766680535359813, 0.16590032836469404, 0.16718118102458102, 0.10939427270623203, 0.11713406324543407, 0.12783134018270026, 0.15004415383423841, 0.11698928538675502, 0.10870902115343817, 0.10795720144060128, 0.0800747174698847, 0.15682609110424894, 0.1102789103533407, 0.09107830893484736, 0.24057980182563643, 0.15226514225849896, 0.17910648553155495, 0.18043796533452028, 0.1694236938049406, 0.184625004722904, 0.15959386917734664, 0.16834163877409958, 0.15887525665367197, 0.18444012259864018, 0.1648033140945565, 0.0747033478347735, 0.06299220775188774, 0.06876596633392584, 0.06871823047198344, 0.06346655210698138, 0.05650171267619408, 0.05661206755027437, 0.052241156770692077, 0.05016989628420632]}, "mutation_prompt": null}
{"id": "1cef1a0b-4f27-49e8-9a00-bc4975dcb56c", "solution": "class EnhancedAdaptiveMutationRateOptimizer(EnhancedMultiSwarmDynamicOppositeOptimizer):\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1, adaptive_mutation_rate=0.1):\n        super().__init__(budget, dim, num_swarms, swarm_size, inertia_weight, cognitive_weight, social_weight, initial_mutation_rate)\n        self.adaptive_mutation_rate = adaptive_mutation_rate\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    adaptive_inertia = self.inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight adaptation\n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component\n                    \n                    if np.random.rand() < mutation_rate:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n                    \n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9\n                        self.social_weight = self.social_weight * 0.9\n                        mutation_rate = self.adaptive_mutation_rate * (1 - _ / self.budget)  # Adaptive Mutation Rate\n\n        return global_best_position", "name": "EnhancedAdaptiveMutationRateOptimizer", "description": "Introducing a novel adaptive mutation rate mechanism based on swarm performance, dynamically adjusting mutation rates to enhance exploration/exploitation balance for faster convergence.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0d646b6-aeaa-4ef5-9bee-79f2d1fbb167", "metadata": {"aucs": [0.37205851846076576, 0.26264015184865397, 0.27066484661195234, 0.30333265351762406, 0.2599459924541585, 0.32588802678153517, 0.2331964198278469, 0.32183174999405606, 0.1974264801037483, 9.999999999998899e-05, 0.02219172750116538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07806777614076543, 0.07985672388799481, 0.09475480289956217, 0.08903148187598398, 0.05272862690367419, 0.05161765316953404, 0.07580750886769405, 0.06693534917256416, 0.046391478472405434, 0.06680839349985579, 0.07986087923657326, 0.06291336500056044, 0.07267083389977702, 0.03504711970327534, 0.07010660376969591, 0.06194337598755717, 0.06570158348303812, 0.045369848024661374, 0.970825490770831, 0.9796073329559297, 0.9934179102525899, 0.9762503504360511, 0.9466616128832075, 0.9728128119161089, 0.9765353989101724, 0.9586164360544833, 0.9486819757767593, 0.10786050505818334, 0.11868730927430027, 0.05514630785493757, 0.12449845120269198, 0.13103644109692758, 0.13495822218134368, 0.07043119602378156, 0.08092894422820007, 0.08264283306733, 0.19572547564228093, 0.1830161773537624, 0.20205516411992053, 0.16698986750838407, 0.12541178731182534, 0.14646493916767067, 0.1591074314947225, 0.13841069739450307, 0.2148414928599498, 0.13222755735930336, 0.00017625784128028066, 0.0965625273618318, 0.09262624428514699, 0.0171218557000804, 0.09502378336779926, 0.00044333965133824815, 0.09451226001682533, 0.005537987547925116, 0.10416524442178177, 0.13533260652044266, 0.11233219194706834, 0.10692983129743205, 0.03357198710053255, 0.10570879791219756, 0.10295329731328873, 0.05477955749377883, 0.028148264178663007, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169396432292775, 9.999999999998899e-05, 9.999999999998899e-05, 0.035567190205049504, 0.0038946264291167543, 0.039601814170376004, 0.04449457201966356, 0.019963970947559417, 0.021370474451314347, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004610796749426438, 0.031080212452592293, 0.049369923694344786, 0.0077137648154690375, 0.004771949060915381, 0.007815334453597056, 0.00874199595820957, 0.00861115120765299, 0.02812215098151316, 0.2066006857338929, 0.2645741867034602, 0.2707704988007692, 0.3017493133325536, 0.2856134394662404, 0.27650462296855083, 0.30145180889376, 0.26853119766456235, 0.3266722810068827, 0.06343262558697971, 0.0725366322309261, 0.05358457845822828, 0.06424166286046817, 0.07216009222081154, 0.0614555983653452, 0.07701850966372314, 0.07499294752480601, 0.07617183661901161, 0.10532654311539369, 0.1735484959174457, 0.11842175776965747, 0.1393185322022602, 0.1865047179486481, 0.1224372316199509, 0.16265218690837102, 0.097398398067159, 0.10732109941673351, 0.2036298998447954, 0.16892039772203649, 0.21944739714307704, 0.23692432476643055, 0.1754495870809838, 0.21621241713933714, 0.16333685198823478, 0.17377774300845283, 0.2279834086939223, 0.11302847075117439, 0.08944051490755467, 0.10511681820972918, 0.16313859975923006, 0.12887791442651486, 0.1637896241957928, 0.09401024076710585, 0.14048951553696842, 0.14376363763343347, 0.1703786941428267, 0.2225076126122576, 0.17551378047655886, 0.17590218716052264, 0.19818269629691765, 0.17563690719585434, 0.16696561835256185, 0.16617561842345918, 0.17013209033844956, 0.1600622290398116, 0.16245427112383426, 0.14783155420933058, 0.15178322172455716, 0.15909394948786426, 0.1669154396152458, 0.14430586146557156, 0.15333908981266287, 0.1782059337546974, 0.1492485885462569, 0.1582375468410666, 0.17766680535359813, 0.16590032836469404, 0.16718118102458102, 0.10939427270623203, 0.11713406324543407, 0.12783134018270026, 0.15004415383423841, 0.11698928538675502, 0.10870902115343817, 0.10795720144060128, 0.0800747174698847, 0.15682609110424894, 0.1102789103533407, 0.09107830893484736, 0.24057980182563643, 0.15226514225849896, 0.17910648553155495, 0.18043796533452028, 0.1694236938049406, 0.184625004722904, 0.15959386917734664, 0.16834163877409958, 0.15887525665367197, 0.18444012259864018, 0.1648033140945565, 0.0747033478347735, 0.06299220775188774, 0.06876596633392584, 0.06871823047198344, 0.06346655210698138, 0.05650171267619408, 0.05661206755027437, 0.052241156770692077, 0.05016989628420632]}, "mutation_prompt": null}
{"id": "df23bcaf-e9ce-4986-b5c4-0aedb2d54268", "solution": "import numpy as np\n\nclass DynamicOppositionBasedOptimizer:\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_swarms = num_swarms\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    inertia = self.inertia_weight\n\n                    velocities[i][j] = inertia * velocities[i][j] + cognitive_component + social_component\n\n                    opposite_position = 2 * best_positions[i] - swarms[i][j]\n                    swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n\n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9\n                        self.social_weight = self.social_weight * 0.9\n\n        return global_best_position", "name": "DynamicOppositionBasedOptimizer", "description": "Implement a dynamic opposition-based learning strategy to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 50, "fitness": 0.11541340748955499, "feedback": "The algorithm DynamicOppositionBasedOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "b0d646b6-aeaa-4ef5-9bee-79f2d1fbb167", "metadata": {"aucs": [0.15397899157221595, 0.15643780910814653, 0.15027595648639558, 0.20394304391337126, 0.18094943415682652, 0.1715115477709942, 0.19611760352521623, 0.16679257570741013, 0.20670919722753067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04133081321458376, 0.03037515071365049, 0.04076494883461257, 0.04794833931146136, 0.03607263930578597, 0.048341726711058075, 0.032876466218798694, 0.044289821029611987, 0.034193833926453254, 0.028359687638853992, 0.022369850853358964, 0.03126693410865411, 0.027902923985469674, 0.01066313617825565, 0.024391482233689366, 0.01883254987392846, 0.012132706233352164, 0.013942076572171946, 0.9445497213910657, 0.9933931044184814, 0.9933808867509414, 0.9935002402621471, 0.9925779958030307, 0.9210921849567666, 0.9575397108550738, 0.9867849700826914, 0.9881642111377736, 0.07703044366978506, 0.07468012829635196, 0.06746807420999135, 0.07268863774906809, 0.04536838620608019, 0.08719490293941268, 0.06018651668345576, 0.06404722289965215, 0.07190784542299877, 0.10027683525177622, 0.12513932055658716, 0.08933163014149881, 0.1480624260474347, 0.11536339797190298, 0.11978946495036658, 0.09728470510678777, 0.10239380657160824, 0.14144671399229825, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005238458049489969, 9.999999999998899e-05, 0.0022545648221080627, 9.999999999998899e-05, 9.999999999998899e-05, 0.005572811115846843, 0.008179074143918497, 0.0011987345871532495, 0.0022732798067538473, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02794213446596372, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02270016358408178, 0.02512771097097588, 0.02943912081404032, 0.038344161829690915, 0.028165133244759444, 0.040451256447440076, 0.015450676733895441, 0.03988617064615241, 0.008477377782217466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01764572638870887, 9.999999999998899e-05, 9.999999999998899e-05, 0.02050574895505175, 9.999999999998899e-05, 0.17266173064800727, 0.17601670776469813, 0.19317834396450984, 0.19849248985943047, 0.18767162627486556, 0.2157239871443103, 0.1693677086166907, 0.17878172725487507, 0.17272596314605582, 0.045207998294375606, 0.04876409852894281, 0.045959667887525035, 0.043563304912527245, 0.03609351327821986, 0.0260091737071263, 0.033538021557051434, 0.029921257717402616, 0.04574066589263914, 0.11747635468240858, 0.15184048849064025, 0.12959648785422984, 0.13705842985579308, 0.12346215164716978, 0.12738206310184574, 0.12912719269456507, 0.11959813690968746, 0.10412706436163777, 0.1480081432678697, 0.15202440744214796, 0.1613932299901244, 0.15435839906029636, 0.13751043835738874, 0.14290462719683106, 0.1718890731630014, 0.17377774300845283, 0.15594497098428584, 0.08855800507576261, 0.08277043919328952, 0.11105836084493004, 0.11573931335001053, 0.09506318424078586, 0.08045158005582287, 0.10321078494604663, 0.10704807811275319, 0.09808435414358663, 0.14132730348380607, 0.16857037841792566, 0.13972491698376566, 0.1470799366528076, 0.1542939864379943, 0.16035150961936873, 0.16236093479012648, 0.13533628692709676, 0.1351501360583175, 0.07268205081605716, 0.0951445255918838, 0.0983623846242192, 0.13662333450861575, 0.08971530398405503, 0.06666234141666061, 0.11533842228311408, 0.059736897056162475, 0.13992549628410345, 0.1473488031101513, 0.16143591893664966, 0.1539587043735342, 0.13060984084038774, 0.13090752225517388, 0.13928713077896315, 0.1328584370046565, 0.124142966796005, 0.10812968777745513, 0.1488464872261982, 0.1440392212612429, 0.10935899339179778, 0.08333861988623925, 0.0959203971602336, 0.13194147638945364, 0.18656184919662377, 0.16236652370870597, 0.16965676772537486, 0.17252885034949217, 0.16577885466688058, 0.1752105828360362, 0.18182758676989164, 0.1747396104845237, 0.18112829454157076, 0.17858453258440155, 0.16097977973008437, 0.16054433365527443, 0.032716856127945726, 0.035117046898636595, 0.03995007474340451, 0.04077465537958924, 0.043656203982267994, 0.04121189250605439, 0.03248752583960557, 0.043535995651211135, 0.04377932363632775]}, "mutation_prompt": null}
{"id": "88a3965f-e231-4efb-a0b4-c6d3050e2b5e", "solution": "class EnhancedAdaptiveMutationRateOptimizer(EnhancedMultiSwarmDynamicOppositeOptimizer):\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1, adaptive_mutation_rate=0.1):\n        super().__init__(budget, dim, num_swarms, swarm_size, inertia_weight, cognitive_weight, social_weight, initial_mutation_rate)\n        self.adaptive_mutation_rate = adaptive_mutation_rate\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    adaptive_inertia = self.inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight adaptation\n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component\n                    \n                    if np.random.rand() < mutation_rate:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n                    \n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9\n                        self.social_weight = self.social_weight * 0.9\n                        mutation_rate = self.adaptive_mutation_rate * (1 - _ / self.budget)  # Adaptive Mutation Rate\n\n        return global_best_position", "name": "EnhancedAdaptiveMutationRateOptimizer", "description": "Introducing a novel adaptive mutation rate mechanism based on swarm performance, dynamically adjusting mutation rates to enhance exploration/exploitation balance for faster convergence.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0d646b6-aeaa-4ef5-9bee-79f2d1fbb167", "metadata": {"aucs": [0.37205851846076576, 0.26264015184865397, 0.27066484661195234, 0.30333265351762406, 0.2599459924541585, 0.32588802678153517, 0.2331964198278469, 0.32183174999405606, 0.1974264801037483, 9.999999999998899e-05, 0.02219172750116538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07806777614076543, 0.07985672388799481, 0.09475480289956217, 0.08903148187598398, 0.05272862690367419, 0.05161765316953404, 0.07580750886769405, 0.06693534917256416, 0.046391478472405434, 0.06680839349985579, 0.07986087923657326, 0.06291336500056044, 0.07267083389977702, 0.03504711970327534, 0.07010660376969591, 0.06194337598755717, 0.06570158348303812, 0.045369848024661374, 0.970825490770831, 0.9796073329559297, 0.9934179102525899, 0.9762503504360511, 0.9466616128832075, 0.9728128119161089, 0.9765353989101724, 0.9586164360544833, 0.9486819757767593, 0.10786050505818334, 0.11868730927430027, 0.05514630785493757, 0.12449845120269198, 0.13103644109692758, 0.13495822218134368, 0.07043119602378156, 0.08092894422820007, 0.08264283306733, 0.19572547564228093, 0.1830161773537624, 0.20205516411992053, 0.16698986750838407, 0.12541178731182534, 0.14646493916767067, 0.1591074314947225, 0.13841069739450307, 0.2148414928599498, 0.13222755735930336, 0.00017625784128028066, 0.0965625273618318, 0.09262624428514699, 0.0171218557000804, 0.09502378336779926, 0.00044333965133824815, 0.09451226001682533, 0.005537987547925116, 0.10416524442178177, 0.13533260652044266, 0.11233219194706834, 0.10692983129743205, 0.03357198710053255, 0.10570879791219756, 0.10295329731328873, 0.05477955749377883, 0.028148264178663007, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169396432292775, 9.999999999998899e-05, 9.999999999998899e-05, 0.035567190205049504, 0.0038946264291167543, 0.039601814170376004, 0.04449457201966356, 0.019963970947559417, 0.021370474451314347, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004610796749426438, 0.031080212452592293, 0.049369923694344786, 0.0077137648154690375, 0.004771949060915381, 0.007815334453597056, 0.00874199595820957, 0.00861115120765299, 0.02812215098151316, 0.2066006857338929, 0.2645741867034602, 0.2707704988007692, 0.3017493133325536, 0.2856134394662404, 0.27650462296855083, 0.30145180889376, 0.26853119766456235, 0.3266722810068827, 0.06343262558697971, 0.0725366322309261, 0.05358457845822828, 0.06424166286046817, 0.07216009222081154, 0.0614555983653452, 0.07701850966372314, 0.07499294752480601, 0.07617183661901161, 0.10532654311539369, 0.1735484959174457, 0.11842175776965747, 0.1393185322022602, 0.1865047179486481, 0.1224372316199509, 0.16265218690837102, 0.097398398067159, 0.10732109941673351, 0.2036298998447954, 0.16892039772203649, 0.21944739714307704, 0.23692432476643055, 0.1754495870809838, 0.21621241713933714, 0.16333685198823478, 0.17377774300845283, 0.2279834086939223, 0.11302847075117439, 0.08944051490755467, 0.10511681820972918, 0.16313859975923006, 0.12887791442651486, 0.1637896241957928, 0.09401024076710585, 0.14048951553696842, 0.14376363763343347, 0.1703786941428267, 0.2225076126122576, 0.17551378047655886, 0.17590218716052264, 0.19818269629691765, 0.17563690719585434, 0.16696561835256185, 0.16617561842345918, 0.17013209033844956, 0.1600622290398116, 0.16245427112383426, 0.14783155420933058, 0.15178322172455716, 0.15909394948786426, 0.1669154396152458, 0.14430586146557156, 0.15333908981266287, 0.1782059337546974, 0.1492485885462569, 0.1582375468410666, 0.17766680535359813, 0.16590032836469404, 0.16718118102458102, 0.10939427270623203, 0.11713406324543407, 0.12783134018270026, 0.15004415383423841, 0.11698928538675502, 0.10870902115343817, 0.10795720144060128, 0.0800747174698847, 0.15682609110424894, 0.1102789103533407, 0.09107830893484736, 0.24057980182563643, 0.15226514225849896, 0.17910648553155495, 0.18043796533452028, 0.1694236938049406, 0.184625004722904, 0.15959386917734664, 0.16834163877409958, 0.15887525665367197, 0.18444012259864018, 0.1648033140945565, 0.0747033478347735, 0.06299220775188774, 0.06876596633392584, 0.06871823047198344, 0.06346655210698138, 0.05650171267619408, 0.05661206755027437, 0.052241156770692077, 0.05016989628420632]}, "mutation_prompt": null}
{"id": "fa86843c-9afe-4c81-b8e0-f824c2fdb5c4", "solution": "import numpy as np\n\nclass FastAdaptiveMutationOptimizer(EnhancedMultiSwarmDynamicOppositeOptimizer):\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1, adaptive_mutation_rate=0.1):\n        super().__init__(budget, dim, num_swarms, swarm_size, inertia_weight, cognitive_weight, social_weight, initial_mutation_rate)\n        self.adaptive_mutation_rate = adaptive_mutation_rate\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        \n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    adaptive_inertia = self.inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight adaptation\n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component\n                    \n                    if np.random.rand() < self.adaptive_mutation_rate:\n                        mutation_strength = np.clip(np.random.normal(0, 1, self.dim), -1.0, 1.0)\n                        swarms[i][j] = np.clip(swarms[i][j] + mutation_strength, -5.0, 5.0)\n                    \n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9\n                        self.social_weight = self.social_weight * 0.9\n                        self.adaptive_mutation_rate = max(0.1, self.adaptive_mutation_rate * 0.95)  # Adaptive Mutation Rate\n\n        return global_best_position", "name": "FastAdaptiveMutationOptimizer", "description": "Introducing a dynamic mutation strategy that incorporates a self-adaptive control mechanism for mutation rates based on individual swarm performance, promoting a more efficient search process.", "configspace": "", "generation": 52, "fitness": 0.05373070788318229, "feedback": "The algorithm FastAdaptiveMutationOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.05 with standard deviation 0.06.", "error": "", "parent_id": "b0d646b6-aeaa-4ef5-9bee-79f2d1fbb167", "metadata": {"aucs": [0.12387718162514905, 0.08422675762787202, 0.09684098766302818, 0.09536515827617276, 0.13468222373579652, 0.11864588749753113, 0.13545691157249962, 0.08642209427640901, 0.08954768006080371, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011716802219195799, 0.01467079663371329, 0.01511617717506486, 0.011209713691991752, 0.006592353378601756, 0.026246726958370492, 0.02813407839832638, 0.016989125955768736, 0.012428097066296662, 0.004149450653296527, 9.999999999998899e-05, 0.0030085930645386005, 0.021496928379357794, 0.02027542522831627, 0.0018066561449215923, 0.014763392921912755, 0.010141753393444919, 0.002488889243564385, 0.07017361486873919, 0.07140268148074991, 0.04462737436105946, 0.06503674356737832, 0.050755034662946286, 0.05384876967719465, 0.08379339490686488, 0.048986754550083944, 0.05991373422844104, 0.06274794416174423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011191332730701165, 0.0035011972457521523, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.08224659834595494, 0.061724674873930185, 0.08719289614986558, 0.07285119553694963, 0.0055836908001855035, 0.044302835418006725, 0.09757877177597074, 0.04728589332072608, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006364990540052018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006762457116096243, 9.999999999998899e-05, 0.020176055435192408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11974462818010578, 0.18723712755990796, 0.1844710537487686, 0.12123698878019296, 0.13640735312450492, 0.12471196994746592, 0.16377836220704378, 0.12275414848775057, 0.16012722107314403, 0.015480705121031169, 9.999999999998899e-05, 0.02198412468535549, 0.03266886175302153, 0.023964241475019077, 0.019664419052491056, 0.00780021959276167, 0.0032609300019598164, 0.0267656688986897, 0.08494000004272673, 0.09421967408084109, 0.11842175776965747, 0.12025882648613273, 0.10852972522114013, 0.12056724400622809, 0.09116215174382292, 0.11102546526960522, 0.10374842855530131, 0.12049028802246953, 0.11312262930544714, 0.1613932299901244, 0.14122658716976366, 0.13569852609320532, 0.13298042698549883, 0.1276041256009388, 0.17377774300845283, 0.16238087012852864, 0.0843812584939444, 0.061697137228173826, 0.08418653558657718, 0.07508029493364388, 0.07782334841881255, 0.0779911235273808, 0.08396605348819852, 0.0997711199450243, 0.0958809151643647, 0.12992009887663225, 0.10660622249904628, 0.13345086981233123, 0.11918698330588628, 0.10181377360311794, 0.1292277008211482, 0.1283997945494173, 0.11853245986966499, 0.14983378457890573, 9.999999999998899e-05, 0.12034383264230641, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10971761437789695, 0.05657684088185211, 0.0019456430778244105, 9.999999999998899e-05, 0.0864456457155085, 0.14255531614133854, 0.1170385479239261, 0.12526742938121227, 0.1207914665021157, 0.09549440199754367, 0.1070176662487543, 0.10715346214064958, 0.07759047811758879, 0.11040265245322212, 0.10267165755511809, 0.0829510564325765, 0.08697919156004319, 0.08381871663661844, 0.06461460808936281, 0.07354958381082088, 0.07562393636503462, 0.04404167854846497, 0.14145646409203094, 0.15435429810727108, 0.1610018566340372, 0.1413054800514426, 0.13305392680561035, 0.16192529389522692, 0.14969714796693134, 0.14584595562988356, 0.15702476644579255, 0.021534842072521876, 0.04039888919994339, 0.03236671690448201, 0.03459480565432982, 0.03425093938292756, 0.02231030858804184, 0.024253616552722956, 0.03803354422653826, 0.027245680891825552]}, "mutation_prompt": null}
{"id": "d13452ee-b9a2-4744-a74c-239f54d60a31", "solution": "class EnhancedDynamicSwarmSizeOptimizer(EnhancedAdaptiveMutationRateOptimizer):\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1, adaptive_mutation_rate=0.1):\n        super().__init__(budget, dim, num_swarms, swarm_size, inertia_weight, cognitive_weight, social_weight, initial_mutation_rate, adaptive_mutation_rate)\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        \n        for t in range(self.budget):\n            if t % (self.budget // 5) == 0:  # Dynamic adjustment of swarm size\n                self.swarm_size = max(5, self.swarm_size // 2)\n                swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n                velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n                best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n                \n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    adaptive_inertia = self.inertia_weight * (1 - t / self.budget)\n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component\n                    \n                    if np.random.rand() < self.adaptive_mutation_rate * (1 - t / self.budget):\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n                    \n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight *= 0.9\n                        self.social_weight *= 0.9\n\n        return global_best_position", "name": "EnhancedDynamicSwarmSizeOptimizer", "description": "Introduce a dynamic adaptation mechanism for swarm size during optimization to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 53, "fitness": 0.13555249856132856, "feedback": "The algorithm EnhancedDynamicSwarmSizeOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.18.", "error": "", "parent_id": "b0d646b6-aeaa-4ef5-9bee-79f2d1fbb167", "metadata": {"aucs": [0.24721951576606271, 0.2813905177127134, 0.3384182753069128, 0.230738897179254, 0.2719558215801564, 0.3712196074681733, 0.22654223244190574, 0.25517174345596405, 0.2150596756903166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12488441259499994, 0.07082888461846892, 0.07482652260776124, 0.05690787688876642, 0.05053151156803248, 0.053916234773356164, 0.05011204537890368, 0.049244158405249094, 0.06360530863318892, 0.06610029684726482, 0.06302380596357593, 0.04440790600671085, 0.043757682136825626, 0.05232568061924303, 0.06786515823383343, 0.04108373877711469, 0.03241564636836991, 0.06481229953455492, 0.985841853051355, 0.9693072697548052, 0.9896116786157287, 0.9856845386684809, 0.9750686282583014, 0.96504592453976, 0.9801495550230248, 0.9811125303127316, 0.14023092638372003, 0.13527278425660882, 0.13113499945171248, 0.08830271544483292, 0.06246403180347426, 0.043180691606163224, 0.0987610535848571, 0.10352531337078485, 0.08986036572793432, 0.07281159111632263, 0.18695921649980995, 0.1214083037745799, 0.09185102132418688, 0.15677097086387293, 0.09388870090636792, 0.08965718784481724, 0.12081588044619895, 0.10419233109716841, 0.1328579187750829, 9.999999999998899e-05, 0.052605469247262726, 0.11613061102797761, 0.02346810769680907, 9.999999999998899e-05, 9.999999999998899e-05, 0.09822216897660796, 0.04833071421526658, 0.00046767126150848437, 0.09077789952982818, 0.02531581919575676, 0.08308358029815865, 9.999999999998899e-05, 0.06954131903195504, 0.1063290477183011, 0.04709127424118831, 0.06261402999845322, 0.05512976630370614, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09649950707621668, 0.017784353661184693, 0.07335600032309508, 0.056773234087058366, 0.0009898549581688343, 9.999999999998899e-05, 9.999999999998899e-05, 0.02647957434513515, 0.0024778341642115453, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026310264142418216, 0.014179943871889367, 0.0051421982593116144, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003141735156894754, 9.999999999998899e-05, 9.999999999998899e-05, 0.30673211344963824, 0.27175944406080343, 0.18249970693626505, 0.26194722025017037, 0.232777901022591, 0.24685983818564983, 0.30172345597315664, 0.22719567713463007, 0.23971512286623042, 0.08371315092632936, 0.06856977416284749, 0.06026609968083663, 0.07271261849500299, 0.06752761779397098, 0.09286333316634843, 0.04840899310194968, 0.06998613688871902, 0.06875881688961671, 0.1455264301747906, 0.13820610179824855, 0.14126190537498662, 0.13766266535167793, 0.11537297817476211, 0.120268789592884, 0.15022461821068445, 0.13285814377816607, 0.12570678636756893, 0.23979993796377996, 0.17848850562278862, 0.20699236631256057, 0.1799314763596669, 0.22917053121603337, 0.24046565865353964, 0.19157579245724898, 0.17377774300845283, 0.15743715419009463, 0.09867440427079255, 0.11520990086656857, 0.09330950820881156, 0.08643990949423364, 0.11882109993763679, 0.15227064052437256, 0.14083691182495872, 0.2104636734978651, 0.1500750882954499, 0.17340555714623462, 0.18728431475058915, 0.16186015926682173, 0.16560595701159386, 0.20340094748674764, 0.1604964199856166, 0.20978001534627666, 0.16645395609896663, 0.1652484150856519, 0.1574835107524425, 0.14248752652028362, 0.1622701142921802, 0.15992211420634594, 0.1663079693470696, 0.13513400427643285, 0.1688174958463715, 0.171180379316635, 0.13945260345284383, 0.15833386889383816, 0.15770696002852713, 0.18778058644451978, 0.11702209318013679, 0.1673960340777496, 0.16176091364169642, 0.16114057964876882, 0.13855875362007064, 0.16018916862072552, 0.11453900547065099, 0.16271859876661943, 0.07855806474850602, 0.09886086174870978, 0.1596879440522987, 0.18361135167431153, 0.08759893460834844, 0.1661681561891628, 0.1012108482128955, 0.17791241454444628, 0.17593411670167802, 0.16919972699166408, 0.16263812723626303, 0.1731920558132195, 0.15432910908980224, 0.17886726082264182, 0.1783870882155214, 0.16032280751852157, 0.04532283205192, 0.07065731710130874, 0.060113763257392705, 0.047085589671192474, 0.06066486247730296, 0.05894747882241558, 0.06970650192330319, 0.038039160989832066, 0.05356413183980002]}, "mutation_prompt": null}
{"id": "20eec331-4331-451e-90fe-e76a8481ca54", "solution": "class DynamicMutationRateOptimizer(EnhancedAdaptiveMutationRateOptimizer):\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1, adaptive_mutation_rate=0.1, mutation_adjustment_rate=0.2):\n        super().__init__(budget, dim, num_swarms, swarm_size, inertia_weight, cognitive_weight, social_weight, initial_mutation_rate, adaptive_mutation_rate)\n        self.mutation_adjustment_rate = mutation_adjustment_rate\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    adaptive_inertia = self.inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight adaptation\n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component\n                    \n                    curvature = np.mean([func(s) for s in swarms[i]]) - func(swarms[i][j])\n                    mutation_rate += self.mutation_adjustment_rate * curvature\n                    mutation_rate = np.clip(mutation_rate, 0, 1)  # Ensure mutation rate stays within valid range\n\n                    if np.random.rand() < mutation_rate:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n                    \n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9\n                        self.social_weight = self.social_weight * 0.9\n\n        return global_best_position", "name": "DynamicMutationRateOptimizer", "description": "Introducing a dynamic mutation strategy that adjusts mutation rates based on the fitness landscape curvature to accelerate convergence.", "configspace": "", "generation": 54, "fitness": 0.09032012713190023, "feedback": "The algorithm DynamicMutationRateOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.14.", "error": "", "parent_id": "b0d646b6-aeaa-4ef5-9bee-79f2d1fbb167", "metadata": {"aucs": [0.15287620357844645, 0.15818487138184467, 0.14737661306678873, 0.15487534026927263, 0.13727500016109884, 0.1744564116454247, 0.14583924007351745, 0.2354334292075826, 0.1406375655544574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02388816309081976, 0.026392440942252127, 0.022232599548584364, 0.0147417124459982, 0.02762788440504249, 0.03555684617708266, 0.01852516562706663, 0.03538958677516546, 0.020476884728487632, 0.029440290521145607, 0.017956672816364483, 0.024354169890484778, 0.0199644939886211, 0.026072605439465546, 0.020910052656539335, 0.03706199587240122, 0.012352941122993233, 0.02770757528281287, 0.8781466546506754, 0.8695869046791576, 0.15407466080945265, 0.9569636014413295, 0.9738315057385394, 0.059282727980346506, 0.07304857845820112, 0.9058099748229225, 0.04611158664030646, 0.095021731508531, 0.05578250988152755, 0.05851177310594069, 0.0716827628406449, 0.022008414740766202, 0.06436829676891831, 0.039710403466550415, 0.05274190277515156, 0.059047379074528505, 0.10027683525177622, 0.12595225706298552, 0.14712294655307723, 0.0667108215001172, 0.07553239643626253, 0.091702696307018, 0.04269469634468137, 0.08542559606065048, 0.07539262906084299, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005187565705251362, 0.0002920040225191656, 9.999999999998899e-05, 0.007743415196960979, 9.999999999998899e-05, 9.999999999998899e-05, 0.003347359900895408, 0.010909147514677864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043745983047992154, 9.999999999998899e-05, 0.002702864920618997, 9.999999999998899e-05, 0.017557397675032393, 9.999999999998899e-05, 0.04702205441346141, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.17419745263056508, 0.16994057536188867, 0.16118733347196268, 0.15817735476134653, 0.1524592566993016, 0.1442188892769315, 0.19098063954922273, 0.16515436825949115, 0.17163496033119297, 0.02484887333342467, 0.016282883096641276, 0.03712647183213469, 0.04085632904869563, 0.037075132586252724, 0.03685490770497779, 0.04442071522756996, 0.030864957590291175, 0.02779783536847591, 0.11383498589971108, 0.11689791396012894, 0.11842175776965747, 0.10769206778621943, 0.12290150324489513, 0.10798713552628325, 0.11079961082216594, 0.0903118289019349, 0.15474217622974829, 0.1448768971811425, 0.1555947603087232, 0.16649190730845453, 0.13898758348652374, 0.1534514155458424, 0.1526497225046627, 0.13752534708724962, 0.17607955576040368, 0.13888801239934623, 0.09166833874986047, 0.07237645402112558, 0.09614121353536376, 0.11854317641435774, 0.10362142738325442, 0.10291704400733037, 0.08662469931356154, 0.10155810285429412, 0.10069017883276843, 0.20790898669055813, 0.15985197388956585, 0.14425465849799513, 0.12924944118232418, 0.14203316869910554, 0.12360912672552071, 0.15242135220500352, 0.12335031254633089, 0.12653977780350556, 0.03765272034660905, 0.09241861337709856, 0.08218664640520146, 0.11337213032237492, 0.14082276864193932, 0.1152993481318153, 0.12911200746035778, 0.11619380537983215, 0.11386405532430166, 0.13211372628309315, 0.11670239051785758, 0.13827813545628365, 0.149360346090607, 0.13128546217797243, 0.11921718135766879, 0.1459424588631013, 0.1405855348777657, 0.1107902726531278, 0.11040265245322212, 0.10267165755511809, 0.08702719276555182, 0.09802332664055446, 0.09716791915612799, 0.07494747572234339, 0.09130213386197306, 0.10979690884550708, 0.1537322079674459, 0.18617001761142926, 0.14683299122315507, 0.1627731547417145, 0.154677694274854, 0.1833414672419167, 0.14661346756311178, 0.15766556437388812, 0.1537658551180222, 0.15024199559611984, 0.04086820501062616, 0.038732051900012054, 0.04083386451091808, 0.04815648444108378, 0.04620853201624886, 0.031381391472069864, 0.04071741533122841, 0.04450870821385122, 0.03642898651671511]}, "mutation_prompt": null}
{"id": "06b12b2d-8329-4dcd-8fb8-6011f95c5a22", "solution": "class EnhancedDynamicSocialWeightOptimizer(EnhancedAdaptiveMutationRateOptimizer):\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1, adaptive_mutation_rate=0.1):\n        super().__init__(budget, dim, num_swarms, swarm_size, inertia_weight, cognitive_weight, social_weight, initial_mutation_rate, adaptive_mutation_rate)\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    adaptive_inertia = self.inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight adaptation\n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component\n                    \n                    if np.random.rand() < mutation_rate:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n                    \n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9\n                        self.social_weight = self.social_weight * 0.9\n                        mutation_rate = self.adaptive_mutation_rate * (1 - _ / self.budget)  # Adaptive Mutation Rate\n                        \n                        if func(swarms[i][j]) < func(best_positions[i]):\n                            best_positions[i] = swarms[i][j]\n                        if func(swarms[i][j]) < func(global_best_position):\n                            global_best_position = swarms[i][j]\n                            \n                            local_best_position = swarms[i][np.argmin([func(p) for p in swarms[i]])]\n                            self.social_weight = self.social_weight * 0.8 if func(local_best_position) < func(best_positions[i]) else self.social_weight * 1.2\n\n        return global_best_position", "name": "EnhancedDynamicSocialWeightOptimizer", "description": "Introducing a dynamic mechanism to update social weights based on local performance, promoting faster convergence by enhancing swarm interactions.", "configspace": "", "generation": 55, "fitness": 0.14539331169997396, "feedback": "The algorithm EnhancedDynamicSocialWeightOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "b0d646b6-aeaa-4ef5-9bee-79f2d1fbb167", "metadata": {"aucs": [0.3702761068787337, 0.2616257377597302, 0.26865102392704987, 0.3014434052118866, 0.2583407471361152, 0.32360660098713356, 0.2324112851825938, 0.32041157580129054, 0.19670567552928153, 9.999999999998899e-05, 0.021808438672679564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07765982435950647, 0.07944112846184848, 0.09363867884403387, 0.08874836842932565, 0.05239014507822848, 0.05147513200129483, 0.07530357304600688, 0.06649487412097754, 0.04619654878860002, 0.06643401051010644, 0.07907412231114341, 0.06245533822248417, 0.07232331872422038, 0.03470468629124135, 0.06947924520981341, 0.061536052324903, 0.06502551673939638, 0.045164823459909575, 0.9671745595072497, 0.9772087018597091, 0.9919650964163964, 0.9741400261091583, 0.9414227787463683, 0.9702541650091545, 0.9743738591032401, 0.954352220005815, 0.9443822699478791, 0.10721513831710272, 0.11758779193977864, 0.05417833960799201, 0.12417631975644472, 0.13016628486622306, 0.13466817944554899, 0.06981197365182545, 0.08035116305898249, 0.0820637546772981, 0.1952601064108893, 0.1821585393453382, 0.2010818326264886, 0.1665057029246425, 0.12512309646971298, 0.1458811773607116, 0.15846194963228533, 0.13804847928054076, 0.21354521103715618, 0.1314060622087696, 0.00013611849808659038, 0.09519916646201165, 0.09144967496946865, 0.016846874041576254, 0.09394635307625776, 0.00039786401136499006, 0.0933727099048891, 0.005367156196648515, 0.10346666176898112, 0.1337507910276079, 0.11144100148755154, 0.1063632648023779, 0.03256555333686406, 0.10463017892307946, 0.10167383989503576, 0.05386560547623598, 0.027407489449790212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08066957518375761, 9.999999999998899e-05, 9.999999999998899e-05, 0.03555446532569806, 0.0037599628803014484, 0.03893181481983066, 0.04357312766806298, 0.01978575214279865, 0.020888924098154016, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004515154755803441, 0.030656432449492788, 0.048863489441845376, 0.007505935387875584, 0.004656234252855551, 0.007710319267503318, 0.008635266275691, 0.008465641927330236, 0.027818320117343864, 0.20593890833708484, 0.26356227825609335, 0.26997031071754507, 0.3002903891909249, 0.2839316519373609, 0.27501422544472387, 0.3003875095137879, 0.2668026459771924, 0.32563106290801047, 0.06296673424491528, 0.07208201897882704, 0.053259370899266134, 0.06393609876261963, 0.07179718135509505, 0.060934626528925784, 0.07635580375194273, 0.07443620544797358, 0.0756681058102846, 0.10527662714559993, 0.17250602165161577, 0.11842175776965747, 0.1390572137349585, 0.18552445787761807, 0.1220842882177412, 0.16100702852813498, 0.09683663148195154, 0.1070216310665586, 0.2029323226270917, 0.16853170265776152, 0.21895578725239406, 0.236117654666252, 0.17507231799877754, 0.2153604500110362, 0.16326870148302064, 0.17377774300845283, 0.22716431892363909, 0.11240848959862848, 0.08893276920562643, 0.10485373392482833, 0.1625166424510489, 0.12843819552282987, 0.16319231251489286, 0.09386821557925251, 0.139884005418754, 0.14331631862728478, 0.16970471386058528, 0.22147155602633684, 0.1751644475080557, 0.175180437694618, 0.19732724404640423, 0.17466231521746978, 0.1669356988131756, 0.16583053359398492, 0.16959360924491795, 0.1592126570582757, 0.1623667140093037, 0.14659953145979943, 0.15130199998427674, 0.1587674615346888, 0.1666905618887775, 0.14367858020646396, 0.15294688408033486, 0.17779089732711983, 0.14895450042579728, 0.15800949279372867, 0.1771965807029976, 0.16558073288974506, 0.16685265058758558, 0.10929651241163496, 0.11697956947930255, 0.1276746937307074, 0.14969798344209395, 0.11686132594260346, 0.10864760235848303, 0.10758542877990096, 0.07964473319603427, 0.15639496312510237, 0.11002908813937451, 0.09060357758391946, 0.23985392419946183, 0.15192769370219172, 0.17887172136588747, 0.1799187162602751, 0.1691114588565179, 0.1843444963784735, 0.15932275703487453, 0.1675003025817412, 0.15861164861412058, 0.18370542750212204, 0.1643609182974276, 0.07447146874957566, 0.06245256206615746, 0.06824946669443432, 0.06830094838751377, 0.06314417545631279, 0.05603353540571043, 0.05609138348179754, 0.05196691529160613, 0.04972657806219083]}, "mutation_prompt": null}
{"id": "df9b1b0f-024d-425a-ae25-b2c7ac25d2ff", "solution": "class EnhancedAdaptiveMutationRateOptimizer(EnhancedMultiSwarmDynamicOppositeOptimizer):\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1, adaptive_mutation_rate=0.1):\n        super().__init__(budget, dim, num_swarms, swarm_size, inertia_weight, cognitive_weight, social_weight, initial_mutation_rate)\n        self.adaptive_mutation_rate = adaptive_mutation_rate\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rate = self.initial_mutation_rate\n\n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    adaptive_inertia = self.inertia_weight * (1 - _ / self.budget)  # Dynamic inertia weight adaptation\n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component\n                    \n                    if np.random.rand() < mutation_rate:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n                    \n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9\n                        self.social_weight = self.social_weight * 0.9\n                        mutation_rate = self.adaptive_mutation_rate * (1 - _ / self.budget)  # Adaptive Mutation Rate\n\n        return global_best_position", "name": "EnhancedAdaptiveMutationRateOptimizer", "description": "Introducing a novel adaptive mutation rate mechanism based on swarm performance, dynamically adjusting mutation rates to enhance exploration/exploitation balance for faster convergence.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0d646b6-aeaa-4ef5-9bee-79f2d1fbb167", "metadata": {"aucs": [0.37205851846076576, 0.26264015184865397, 0.27066484661195234, 0.30333265351762406, 0.2599459924541585, 0.32588802678153517, 0.2331964198278469, 0.32183174999405606, 0.1974264801037483, 9.999999999998899e-05, 0.02219172750116538, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07806777614076543, 0.07985672388799481, 0.09475480289956217, 0.08903148187598398, 0.05272862690367419, 0.05161765316953404, 0.07580750886769405, 0.06693534917256416, 0.046391478472405434, 0.06680839349985579, 0.07986087923657326, 0.06291336500056044, 0.07267083389977702, 0.03504711970327534, 0.07010660376969591, 0.06194337598755717, 0.06570158348303812, 0.045369848024661374, 0.970825490770831, 0.9796073329559297, 0.9934179102525899, 0.9762503504360511, 0.9466616128832075, 0.9728128119161089, 0.9765353989101724, 0.9586164360544833, 0.9486819757767593, 0.10786050505818334, 0.11868730927430027, 0.05514630785493757, 0.12449845120269198, 0.13103644109692758, 0.13495822218134368, 0.07043119602378156, 0.08092894422820007, 0.08264283306733, 0.19572547564228093, 0.1830161773537624, 0.20205516411992053, 0.16698986750838407, 0.12541178731182534, 0.14646493916767067, 0.1591074314947225, 0.13841069739450307, 0.2148414928599498, 0.13222755735930336, 0.00017625784128028066, 0.0965625273618318, 0.09262624428514699, 0.0171218557000804, 0.09502378336779926, 0.00044333965133824815, 0.09451226001682533, 0.005537987547925116, 0.10416524442178177, 0.13533260652044266, 0.11233219194706834, 0.10692983129743205, 0.03357198710053255, 0.10570879791219756, 0.10295329731328873, 0.05477955749377883, 0.028148264178663007, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08169396432292775, 9.999999999998899e-05, 9.999999999998899e-05, 0.035567190205049504, 0.0038946264291167543, 0.039601814170376004, 0.04449457201966356, 0.019963970947559417, 0.021370474451314347, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004610796749426438, 0.031080212452592293, 0.049369923694344786, 0.0077137648154690375, 0.004771949060915381, 0.007815334453597056, 0.00874199595820957, 0.00861115120765299, 0.02812215098151316, 0.2066006857338929, 0.2645741867034602, 0.2707704988007692, 0.3017493133325536, 0.2856134394662404, 0.27650462296855083, 0.30145180889376, 0.26853119766456235, 0.3266722810068827, 0.06343262558697971, 0.0725366322309261, 0.05358457845822828, 0.06424166286046817, 0.07216009222081154, 0.0614555983653452, 0.07701850966372314, 0.07499294752480601, 0.07617183661901161, 0.10532654311539369, 0.1735484959174457, 0.11842175776965747, 0.1393185322022602, 0.1865047179486481, 0.1224372316199509, 0.16265218690837102, 0.097398398067159, 0.10732109941673351, 0.2036298998447954, 0.16892039772203649, 0.21944739714307704, 0.23692432476643055, 0.1754495870809838, 0.21621241713933714, 0.16333685198823478, 0.17377774300845283, 0.2279834086939223, 0.11302847075117439, 0.08944051490755467, 0.10511681820972918, 0.16313859975923006, 0.12887791442651486, 0.1637896241957928, 0.09401024076710585, 0.14048951553696842, 0.14376363763343347, 0.1703786941428267, 0.2225076126122576, 0.17551378047655886, 0.17590218716052264, 0.19818269629691765, 0.17563690719585434, 0.16696561835256185, 0.16617561842345918, 0.17013209033844956, 0.1600622290398116, 0.16245427112383426, 0.14783155420933058, 0.15178322172455716, 0.15909394948786426, 0.1669154396152458, 0.14430586146557156, 0.15333908981266287, 0.1782059337546974, 0.1492485885462569, 0.1582375468410666, 0.17766680535359813, 0.16590032836469404, 0.16718118102458102, 0.10939427270623203, 0.11713406324543407, 0.12783134018270026, 0.15004415383423841, 0.11698928538675502, 0.10870902115343817, 0.10795720144060128, 0.0800747174698847, 0.15682609110424894, 0.1102789103533407, 0.09107830893484736, 0.24057980182563643, 0.15226514225849896, 0.17910648553155495, 0.18043796533452028, 0.1694236938049406, 0.184625004722904, 0.15959386917734664, 0.16834163877409958, 0.15887525665367197, 0.18444012259864018, 0.1648033140945565, 0.0747033478347735, 0.06299220775188774, 0.06876596633392584, 0.06871823047198344, 0.06346655210698138, 0.05650171267619408, 0.05661206755027437, 0.052241156770692077, 0.05016989628420632]}, "mutation_prompt": null}
{"id": "26e67798-c17a-4f66-b2bf-34efbe6a1459", "solution": "import numpy as np\n\nclass SpeedyDynamicMutationOptimizer:\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_swarms = num_swarms\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.initial_mutation_rate = initial_mutation_rate\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rates = np.full((self.num_swarms, self.swarm_size), self.initial_mutation_rate)\n\n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    adaptive_inertia = self.inertia_weight * (1 - _ / self.budget)\n\n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component\n\n                    if np.random.rand() < mutation_rates[i][j]:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n\n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9\n                        self.social_weight = self.social_weight * 0.9\n                        mutation_rates[i][j] *= 0.9  # Dynamic mutation rate adaptation\n\n        return global_best_position", "name": "SpeedyDynamicMutationOptimizer", "description": "Introducing a dynamic mutation mechanism based on particle performance, adapting mutation rates individually per particle to enhance exploration and exploitation trade-off for quicker convergence.", "configspace": "", "generation": 57, "fitness": 0.14605693658831845, "feedback": "The algorithm SpeedyDynamicMutationOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "b0d646b6-aeaa-4ef5-9bee-79f2d1fbb167", "metadata": {"aucs": [0.34597390393062655, 0.2422673347070251, 0.2852772640641812, 0.26209368333591987, 0.24039512253850193, 0.2633853970810275, 0.2685890036265626, 0.2462561392817657, 0.20940710018340492, 9.999999999998899e-05, 0.014423849706383551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09098839225420274, 0.06540443482516345, 0.09584952734383678, 0.069964229813826, 0.031252111419393436, 0.08333471192361352, 0.07580750886769405, 0.07496907268748598, 0.04988789871840438, 0.0706015551462904, 0.061309098675901064, 0.06538088122993246, 0.06893314757417934, 0.04147937965820747, 0.07220615754025816, 0.047402293207221224, 0.054410437247013, 0.08156363042080628, 0.970825490770831, 0.9796073329559297, 0.9934179102525899, 0.9762503504360511, 0.9466616128832075, 0.9728128119161089, 0.9765353989101724, 0.9586164360544833, 0.9486819757767593, 0.11927033325627578, 0.11747696426398724, 0.06020647956454939, 0.1627272953336627, 0.12458446267780598, 0.14980681157490128, 0.11180164659089364, 0.08080117163558409, 0.07389391565620007, 0.19124072866743558, 0.1667723668606459, 0.19634812546504066, 0.14886811992099247, 0.12673455647744847, 0.14364213944617255, 0.15046848149866943, 0.14163726906252627, 0.17044223800299774, 0.11361464071949867, 0.018850816913703827, 0.12281814288230997, 0.08265238151579246, 9.999999999998899e-05, 0.10391243140264339, 0.008920654989230559, 0.0999206656371372, 0.08268043481135756, 0.10477985384199506, 0.11857602599671813, 0.12103615101348264, 0.11095087824632954, 0.029012734873807844, 0.10722101361619885, 0.10980328019673236, 0.012061141170242484, 0.03153120890108274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06130670212753231, 9.999999999998899e-05, 9.999999999998899e-05, 0.043522083933463684, 0.01896166959903567, 0.051177969190717376, 0.03143358495550541, 0.036693464921961794, 0.016374251943340856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013511244592203653, 0.021677160566104248, 0.07912554019240903, 0.008005671563924066, 9.999999999998899e-05, 0.002582851392690322, 0.008883509157723402, 0.02783955557293516, 0.023097745781979984, 0.19873815000729345, 0.2542165831012634, 0.2864253629637452, 0.2938965972284101, 0.2718462623366622, 0.24276829734317484, 0.3177947353567483, 0.23998085431450877, 0.30516575003919144, 0.049462443133818534, 0.0713693562361275, 0.054959074532049845, 0.07839625258978433, 0.07125184134451867, 0.06091826158608382, 0.07992811863823046, 0.06858764412444396, 0.07883042410289709, 0.13435921917133442, 0.11886754031983215, 0.11919783951763674, 0.1518031137479109, 0.16575339608378659, 0.11660904399674488, 0.1506983861415252, 0.11968563585288361, 0.10630555667858865, 0.20882411458031125, 0.1845005827137426, 0.20174497330505015, 0.24094272551448048, 0.21080450661424643, 0.19379538385552708, 0.16333685198823478, 0.17377774300845283, 0.22721471987419173, 0.09871711914446857, 0.12213216917412917, 0.10511681820972918, 0.1491258899612209, 0.1305676497712429, 0.1637896241957928, 0.10541350179850384, 0.13740841477493326, 0.13465158389856136, 0.17377955864693417, 0.18582475356626682, 0.15804965784577885, 0.1713215462842782, 0.18560178680235773, 0.16649511149160212, 0.17546535425410226, 0.17712125672125112, 0.1834575568425706, 0.15413429707843151, 0.16777587282744222, 0.1478833370959063, 0.15152557694201574, 0.1566116998873287, 0.16215415033842107, 0.14823173045835758, 0.15775931668576504, 0.17475843509425937, 0.151516701469665, 0.15546669099001953, 0.17787517797602215, 0.1657564742081411, 0.1659417959475713, 0.11474574883424071, 0.15983913917641546, 0.12929750765651882, 0.15151791010296278, 0.11684086314133324, 0.10832999847833802, 0.10872702652219524, 0.16646226401534592, 0.1582109452788234, 0.11901135619407122, 0.08910079935628068, 0.22562465702791734, 0.20397800775241992, 0.1865017377129763, 0.16898161507082055, 0.17456059187165662, 0.18548783050024775, 0.17047817613322036, 0.17379751012614508, 0.16976160359369774, 0.1700123391296645, 0.1698223636319166, 0.0747033478347735, 0.08537140136139532, 0.07159866556327366, 0.07444591495701602, 0.07398620931170918, 0.04227173590005773, 0.06502177309255652, 0.05976296833456385, 0.053537308080170654]}, "mutation_prompt": null}
{"id": "38d28390-7901-43da-a1eb-d605e982d7c1", "solution": "import numpy as np\n\nclass SpeedyDynamicMutationOptimizer:\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_swarms = num_swarms\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.initial_mutation_rate = initial_mutation_rate\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rates = np.full((self.num_swarms, self.swarm_size), self.initial_mutation_rate)\n\n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    adaptive_inertia = self.inertia_weight * (1 - _ / self.budget)\n\n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component\n\n                    if np.random.rand() < mutation_rates[i][j]:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n\n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9\n                        self.social_weight = self.social_weight * 0.9\n                        mutation_rates[i][j] *= 0.9  # Dynamic mutation rate adaptation\n\n        return global_best_position", "name": "SpeedyDynamicMutationOptimizer", "description": "Introducing a dynamic mutation mechanism based on particle performance, adapting mutation rates individually per particle to enhance exploration and exploitation trade-off for quicker convergence.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "26e67798-c17a-4f66-b2bf-34efbe6a1459", "metadata": {"aucs": [0.34597390393062655, 0.2422673347070251, 0.2852772640641812, 0.26209368333591987, 0.24039512253850193, 0.2633853970810275, 0.2685890036265626, 0.2462561392817657, 0.20940710018340492, 9.999999999998899e-05, 0.014423849706383551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09098839225420274, 0.06540443482516345, 0.09584952734383678, 0.069964229813826, 0.031252111419393436, 0.08333471192361352, 0.07580750886769405, 0.07496907268748598, 0.04988789871840438, 0.0706015551462904, 0.061309098675901064, 0.06538088122993246, 0.06893314757417934, 0.04147937965820747, 0.07220615754025816, 0.047402293207221224, 0.054410437247013, 0.08156363042080628, 0.970825490770831, 0.9796073329559297, 0.9934179102525899, 0.9762503504360511, 0.9466616128832075, 0.9728128119161089, 0.9765353989101724, 0.9586164360544833, 0.9486819757767593, 0.11927033325627578, 0.11747696426398724, 0.06020647956454939, 0.1627272953336627, 0.12458446267780598, 0.14980681157490128, 0.11180164659089364, 0.08080117163558409, 0.07389391565620007, 0.19124072866743558, 0.1667723668606459, 0.19634812546504066, 0.14886811992099247, 0.12673455647744847, 0.14364213944617255, 0.15046848149866943, 0.14163726906252627, 0.17044223800299774, 0.11361464071949867, 0.018850816913703827, 0.12281814288230997, 0.08265238151579246, 9.999999999998899e-05, 0.10391243140264339, 0.008920654989230559, 0.0999206656371372, 0.08268043481135756, 0.10477985384199506, 0.11857602599671813, 0.12103615101348264, 0.11095087824632954, 0.029012734873807844, 0.10722101361619885, 0.10980328019673236, 0.012061141170242484, 0.03153120890108274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06130670212753231, 9.999999999998899e-05, 9.999999999998899e-05, 0.043522083933463684, 0.01896166959903567, 0.051177969190717376, 0.03143358495550541, 0.036693464921961794, 0.016374251943340856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013511244592203653, 0.021677160566104248, 0.07912554019240903, 0.008005671563924066, 9.999999999998899e-05, 0.002582851392690322, 0.008883509157723402, 0.02783955557293516, 0.023097745781979984, 0.19873815000729345, 0.2542165831012634, 0.2864253629637452, 0.2938965972284101, 0.2718462623366622, 0.24276829734317484, 0.3177947353567483, 0.23998085431450877, 0.30516575003919144, 0.049462443133818534, 0.0713693562361275, 0.054959074532049845, 0.07839625258978433, 0.07125184134451867, 0.06091826158608382, 0.07992811863823046, 0.06858764412444396, 0.07883042410289709, 0.13435921917133442, 0.11886754031983215, 0.11919783951763674, 0.1518031137479109, 0.16575339608378659, 0.11660904399674488, 0.1506983861415252, 0.11968563585288361, 0.10630555667858865, 0.20882411458031125, 0.1845005827137426, 0.20174497330505015, 0.24094272551448048, 0.21080450661424643, 0.19379538385552708, 0.16333685198823478, 0.17377774300845283, 0.22721471987419173, 0.09871711914446857, 0.12213216917412917, 0.10511681820972918, 0.1491258899612209, 0.1305676497712429, 0.1637896241957928, 0.10541350179850384, 0.13740841477493326, 0.13465158389856136, 0.17377955864693417, 0.18582475356626682, 0.15804965784577885, 0.1713215462842782, 0.18560178680235773, 0.16649511149160212, 0.17546535425410226, 0.17712125672125112, 0.1834575568425706, 0.15413429707843151, 0.16777587282744222, 0.1478833370959063, 0.15152557694201574, 0.1566116998873287, 0.16215415033842107, 0.14823173045835758, 0.15775931668576504, 0.17475843509425937, 0.151516701469665, 0.15546669099001953, 0.17787517797602215, 0.1657564742081411, 0.1659417959475713, 0.11474574883424071, 0.15983913917641546, 0.12929750765651882, 0.15151791010296278, 0.11684086314133324, 0.10832999847833802, 0.10872702652219524, 0.16646226401534592, 0.1582109452788234, 0.11901135619407122, 0.08910079935628068, 0.22562465702791734, 0.20397800775241992, 0.1865017377129763, 0.16898161507082055, 0.17456059187165662, 0.18548783050024775, 0.17047817613322036, 0.17379751012614508, 0.16976160359369774, 0.1700123391296645, 0.1698223636319166, 0.0747033478347735, 0.08537140136139532, 0.07159866556327366, 0.07444591495701602, 0.07398620931170918, 0.04227173590005773, 0.06502177309255652, 0.05976296833456385, 0.053537308080170654]}, "mutation_prompt": null}
{"id": "382f217c-9f44-45a5-a432-f08e786fa4ee", "solution": "import numpy as np\n\nclass EnhancedDynamicNeighborhoodOptimizer:\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_mutation_rate=0.1, neighborhood_radius=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.num_swarms = num_swarms\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.initial_mutation_rate = initial_mutation_rate\n        self.neighborhood_radius = neighborhood_radius\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rates = np.full((self.num_swarms, self.swarm_size), self.initial_mutation_rate)\n\n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    adaptive_inertia = self.inertia_weight * (1 - _ / self.budget)\n\n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component\n\n                    if np.random.rand() < mutation_rates[i][j]:\n                        neighborhood = np.array([swarms[i][(j + offset) % self.swarm_size] for offset in range(-int(self.neighborhood_radius * self.swarm_size), int(self.neighborhood_radius * self.swarm_size))])\n                        neighborhood_best = neighborhood[np.argmin([func(p) for p in neighborhood])]\n                        opposite_position = 2 * neighborhood_best - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n\n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9\n                        self.social_weight = self.social_weight * 0.9\n                        mutation_rates[i][j] *= 0.9  # Dynamic mutation rate adaptation\n\n        return global_best_position", "name": "EnhancedDynamicNeighborhoodOptimizer", "description": "Implementing a novel dynamic neighborhood search mechanism within the algorithm to facilitate enhanced local exploration for faster convergence.", "configspace": "", "generation": 59, "fitness": 0.1455928583473781, "feedback": "The algorithm EnhancedDynamicNeighborhoodOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "26e67798-c17a-4f66-b2bf-34efbe6a1459", "metadata": {"aucs": [0.3320411622060113, 0.44248176856309285, 0.3529106088790428, 0.23540373416932625, 0.2525743216085451, 0.327707602341726, 0.3577566174739484, 0.33535066788446954, 0.29535852234822246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009450861743196093, 0.07051604346597762, 0.0665626784560629, 0.04868398381809025, 0.06880249194034027, 0.07475057947692076, 0.09798529164246961, 0.055575551849989635, 0.06917325056494972, 0.0739008320986635, 0.05575426510125503, 0.0764808582276959, 0.04436512255917713, 0.0656708186866859, 0.0300721232678145, 0.06162707619879382, 0.046280607029833165, 0.07281622963192236, 0.051933613724769234, 0.9690222031307576, 0.979076057118551, 0.9934179102525899, 0.9752885844390615, 0.9690841441585792, 0.9675599783825536, 0.9830952466670302, 0.96937662934413, 0.9614241989058175, 0.08092700797811847, 0.09884469208698288, 0.06508270572769237, 0.13249925515110061, 0.13497594628950393, 0.14638272472951774, 0.11023021164775126, 0.10473956769743653, 0.09313421589833892, 0.16018293705785835, 0.14724355392693522, 0.18588761656457808, 0.18600632284417584, 0.14680640503971631, 0.12765478273198627, 0.1327309169207228, 0.17259758675416692, 0.16723253690481543, 0.1278128431497888, 9.999999999998899e-05, 0.10368572473256066, 0.08068052826634597, 9.999999999998899e-05, 9.999999999998899e-05, 0.030609442079073457, 0.0025315344334170264, 0.10355011440695705, 0.0817398858743742, 0.05724105789602696, 0.026851978957832756, 0.1434442980912527, 0.08045235814324392, 0.10163109294628359, 0.011553357291876232, 9.999999999998899e-05, 0.10353740947194745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01951225257416367, 9.999999999998899e-05, 0.018160975235124388, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011083269227026848, 0.027190533995498867, 0.00018597709467682577, 0.015710664914299732, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019537241326275212, 9.999999999998899e-05, 0.025909873345296597, 0.002863247270014302, 0.0044074467385502025, 0.04020341392239657, 0.03724459373694011, 0.007595427885752737, 0.03609750616654983, 0.226688361219204, 0.3371479178339821, 0.31320320593307105, 0.26172448556276373, 0.28665990586126733, 0.26911788577024487, 0.336926781305954, 0.2938219198173747, 0.3953240558576233, 0.062169204641292386, 0.07585349638277328, 0.0725285876145434, 0.06472028000142638, 0.07351156619660215, 0.08035393794979195, 0.06003014652002092, 0.06172593324603781, 0.056685107999876694, 0.13942724722255684, 0.14959105072105028, 0.14176122968600668, 0.14458905709517134, 0.11511042628610535, 0.11465579283522276, 0.16024729936244753, 0.11946424793703825, 0.177636901466796, 0.2148266362099347, 0.15340209396830562, 0.17401313742830804, 0.17026290380009412, 0.14904457192724552, 0.13921834716321813, 0.16485384619795163, 0.17563778196291657, 0.16525306017255714, 0.12767167982135286, 0.06635963224527008, 0.12425052834632766, 0.14191748591160702, 0.12135208154685917, 0.15489072629961043, 0.11880022086025332, 0.11312265959893864, 0.14303411977508618, 0.16780427679977183, 0.16656580534579202, 0.1701203651166726, 0.18893488975086392, 0.17124494224535247, 0.14161043746066604, 0.16544447445083876, 0.16662178877908174, 0.17490673882523278, 0.16020587014586218, 0.16268036981497702, 0.11944939096031848, 0.12423545410959291, 0.15627308761491, 0.14459415846718948, 0.16650049134794898, 0.15126233076395457, 0.17400157813728534, 0.15468035304444183, 0.15704162519256748, 0.13593942669888914, 0.16842986147642192, 0.16446058847437728, 0.11353300032554048, 0.14894804451244326, 0.13997213227459326, 0.136485659705477, 0.12023682001596203, 0.11091322469298137, 0.11769689108517556, 0.15412032706116174, 0.13870980240154274, 0.19374448120026577, 0.1923540633964369, 0.22559864151215703, 0.19828481356571315, 0.155827720967192, 0.17513804585742987, 0.16992491683423105, 0.16982389955329358, 0.163944786184965, 0.16262855790972885, 0.17136126006519004, 0.17269139507405873, 0.16481219809349368, 0.07118919408510405, 0.06262435584552972, 0.062782160455649, 0.07194749651676835, 0.04587884912855933, 0.06347693073385996, 0.06987298791601404, 0.057014512990044564, 0.037984052309330774]}, "mutation_prompt": null}
{"id": "bfb90906-7034-4e0a-851b-9544bf170884", "solution": "import numpy as np\n\nclass AdaptiveSwarmLearningRateOptimizer:\n    def __init__(self, budget, dim, num_swarms=5, swarm_size=10, inertia_weight=0.5, cognitive_weight=1.5, social_weight=2.0, initial_learning_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_swarms = num_swarms\n        self.swarm_size = swarm_size\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.initial_learning_rate = initial_learning_rate\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        learning_rates = np.full((self.num_swarms, self.swarm_size), self.initial_learning_rate)\n\n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    adaptive_inertia = self.inertia_weight * (1 - _ / self.budget)\n\n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component\n\n                    if np.random.rand() < learning_rates[i][j]:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n\n                    if func(swarms[i][j]) < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                    if func(swarms[i][j]) < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9\n                        self.social_weight = self.social_weight * 0.9\n                        learning_rates[i][j] *= 0.9  # Adaptive learning rate mechanism\n\n        return global_best_position", "name": "AdaptiveSwarmLearningRateOptimizer", "description": "Introducing a novel adaptive swarm learning rate mechanism based on the swarm performance to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 60, "fitness": 0.14605693658831845, "feedback": "The algorithm AdaptiveSwarmLearningRateOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "26e67798-c17a-4f66-b2bf-34efbe6a1459", "metadata": {"aucs": [0.34597390393062655, 0.2422673347070251, 0.2852772640641812, 0.26209368333591987, 0.24039512253850193, 0.2633853970810275, 0.2685890036265626, 0.2462561392817657, 0.20940710018340492, 9.999999999998899e-05, 0.014423849706383551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09098839225420274, 0.06540443482516345, 0.09584952734383678, 0.069964229813826, 0.031252111419393436, 0.08333471192361352, 0.07580750886769405, 0.07496907268748598, 0.04988789871840438, 0.0706015551462904, 0.061309098675901064, 0.06538088122993246, 0.06893314757417934, 0.04147937965820747, 0.07220615754025816, 0.047402293207221224, 0.054410437247013, 0.08156363042080628, 0.970825490770831, 0.9796073329559297, 0.9934179102525899, 0.9762503504360511, 0.9466616128832075, 0.9728128119161089, 0.9765353989101724, 0.9586164360544833, 0.9486819757767593, 0.11927033325627578, 0.11747696426398724, 0.06020647956454939, 0.1627272953336627, 0.12458446267780598, 0.14980681157490128, 0.11180164659089364, 0.08080117163558409, 0.07389391565620007, 0.19124072866743558, 0.1667723668606459, 0.19634812546504066, 0.14886811992099247, 0.12673455647744847, 0.14364213944617255, 0.15046848149866943, 0.14163726906252627, 0.17044223800299774, 0.11361464071949867, 0.018850816913703827, 0.12281814288230997, 0.08265238151579246, 9.999999999998899e-05, 0.10391243140264339, 0.008920654989230559, 0.0999206656371372, 0.08268043481135756, 0.10477985384199506, 0.11857602599671813, 0.12103615101348264, 0.11095087824632954, 0.029012734873807844, 0.10722101361619885, 0.10980328019673236, 0.012061141170242484, 0.03153120890108274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06130670212753231, 9.999999999998899e-05, 9.999999999998899e-05, 0.043522083933463684, 0.01896166959903567, 0.051177969190717376, 0.03143358495550541, 0.036693464921961794, 0.016374251943340856, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013511244592203653, 0.021677160566104248, 0.07912554019240903, 0.008005671563924066, 9.999999999998899e-05, 0.002582851392690322, 0.008883509157723402, 0.02783955557293516, 0.023097745781979984, 0.19873815000729345, 0.2542165831012634, 0.2864253629637452, 0.2938965972284101, 0.2718462623366622, 0.24276829734317484, 0.3177947353567483, 0.23998085431450877, 0.30516575003919144, 0.049462443133818534, 0.0713693562361275, 0.054959074532049845, 0.07839625258978433, 0.07125184134451867, 0.06091826158608382, 0.07992811863823046, 0.06858764412444396, 0.07883042410289709, 0.13435921917133442, 0.11886754031983215, 0.11919783951763674, 0.1518031137479109, 0.16575339608378659, 0.11660904399674488, 0.1506983861415252, 0.11968563585288361, 0.10630555667858865, 0.20882411458031125, 0.1845005827137426, 0.20174497330505015, 0.24094272551448048, 0.21080450661424643, 0.19379538385552708, 0.16333685198823478, 0.17377774300845283, 0.22721471987419173, 0.09871711914446857, 0.12213216917412917, 0.10511681820972918, 0.1491258899612209, 0.1305676497712429, 0.1637896241957928, 0.10541350179850384, 0.13740841477493326, 0.13465158389856136, 0.17377955864693417, 0.18582475356626682, 0.15804965784577885, 0.1713215462842782, 0.18560178680235773, 0.16649511149160212, 0.17546535425410226, 0.17712125672125112, 0.1834575568425706, 0.15413429707843151, 0.16777587282744222, 0.1478833370959063, 0.15152557694201574, 0.1566116998873287, 0.16215415033842107, 0.14823173045835758, 0.15775931668576504, 0.17475843509425937, 0.151516701469665, 0.15546669099001953, 0.17787517797602215, 0.1657564742081411, 0.1659417959475713, 0.11474574883424071, 0.15983913917641546, 0.12929750765651882, 0.15151791010296278, 0.11684086314133324, 0.10832999847833802, 0.10872702652219524, 0.16646226401534592, 0.1582109452788234, 0.11901135619407122, 0.08910079935628068, 0.22562465702791734, 0.20397800775241992, 0.1865017377129763, 0.16898161507082055, 0.17456059187165662, 0.18548783050024775, 0.17047817613322036, 0.17379751012614508, 0.16976160359369774, 0.1700123391296645, 0.1698223636319166, 0.0747033478347735, 0.08537140136139532, 0.07159866556327366, 0.07444591495701602, 0.07398620931170918, 0.04227173590005773, 0.06502177309255652, 0.05976296833456385, 0.053537308080170654]}, "mutation_prompt": null}
{"id": "694b2f46-c594-4819-b1b8-8ab2c436dbd1", "solution": "class EnhancedSpeedyDynamicMutationOptimizer(SpeedyDynamicMutationOptimizer):\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rates = np.full((self.num_swarms, self.swarm_size), self.initial_mutation_rate)\n        swarm_scores = [func(p) for p in best_positions]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    adaptive_inertia = self.inertia_weight * (1 - _ / self.budget)\n                    \n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component\n                    \n                    if np.random.rand() < mutation_rates[i][j]:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n                    \n                    current_score = func(swarms[i][j])\n                    if current_score < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                        swarm_scores[i] = current_score\n                    if current_score < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9 + 0.1 * swarm_scores[i] / current_score\n                        self.social_weight = self.social_weight * 0.9 + 0.1 * swarm_scores[i] / current_score\n                        mutation_rates[i][j] *= 0.9  # Dynamic mutation rate adaptation\n        return global_best_position", "name": "EnhancedSpeedyDynamicMutationOptimizer", "description": "Introduce an adaptive strategy to dynamically adjust the cognitive and social weights based on the performance of each swarm to accelerate convergence.", "configspace": "", "generation": 61, "fitness": 0.14608745297080433, "feedback": "The algorithm EnhancedSpeedyDynamicMutationOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.20.", "error": "", "parent_id": "26e67798-c17a-4f66-b2bf-34efbe6a1459", "metadata": {"aucs": [0.33018555112652226, 0.29732972539514635, 0.31435302848794877, 0.2896338687973352, 0.2914280284284009, 0.2586136552280761, 0.3024449521746133, 0.3054790051221111, 0.3071969566896089, 9.999999999998899e-05, 9.999999999998899e-05, 0.015236130580853602, 9.999999999998899e-05, 0.008164969026316804, 0.017414614692111918, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0666512697892585, 0.05653313639610791, 0.0596467173483205, 0.0580045691502894, 0.05716237539769431, 0.05859633370912065, 0.0599409186704859, 0.05420847954485142, 0.06014978655612835, 0.0391414374595932, 0.04915864296268979, 0.04692190913448324, 0.05309256342832591, 0.03904562136222012, 0.048610894966810925, 0.03060880618134998, 0.05370240064463161, 0.04309939390870876, 0.9860129229049824, 0.9904825435010566, 0.9938952594364668, 0.9915718896393075, 0.9801843210033079, 0.9894505735757134, 0.9874504410997984, 0.9807589327337687, 0.9764133208434507, 0.09201282617894335, 0.14280989527687393, 0.10344999167946078, 0.10941796895912481, 0.05738297722365149, 0.11570746159732137, 0.13737438322469975, 0.10638474843434342, 0.13206910927674342, 0.18663518144005653, 0.16441988248302897, 0.15830889385319646, 0.17334698205096333, 0.1833957336618084, 0.14160958263044687, 0.12174799185525376, 0.2084154225040754, 0.12993471101554654, 0.06078643176369203, 0.08514647396750641, 0.08102348307888985, 0.07413099420543423, 0.058008159588650465, 0.017191723994171793, 0.06884064656457634, 0.08823700232603315, 0.05851399096209475, 0.02010261900532928, 0.03170600806206436, 0.016809808565620865, 0.09764458579366897, 0.08804290878789578, 0.09511238625395768, 0.03003049251449663, 0.015453767256639162, 0.15069462863495497, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013672813866427713, 9.999999999998899e-05, 9.999999999998899e-05, 0.018059618215879536, 9.999999999998899e-05, 0.020661222873095908, 0.03791196972703492, 9.999999999998899e-05, 0.026358089690869613, 9.999999999998899e-05, 0.02660249536903536, 0.006168567999449648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031145346899335014, 0.021406020133536874, 0.027629288997783275, 0.022741104562245318, 0.02454637910940949, 0.0016539387319036702, 0.003013424174413193, 0.02390867347890946, 0.03495277071278702, 0.03232542418069939, 0.2686352038533737, 0.28932439068342275, 0.2654917750843103, 0.28899749653579, 0.3018218529246548, 0.2739765456720342, 0.31511601767717423, 0.20859529047229242, 0.30604388818621975, 0.06209787978322512, 0.06544943691374883, 0.05473750373486452, 0.06062391269065226, 0.06664629664610511, 0.06546236529509375, 0.04598964533910044, 0.06174072156244692, 0.05745033558735757, 0.14718647852359812, 0.14828170664028528, 0.12438133418966313, 0.12385335579124335, 0.13728849026816625, 0.14104629094533938, 0.13447972298749933, 0.15507403647808937, 0.13111408244355438, 0.17266549748328053, 0.17768529947352074, 0.1877611842074306, 0.18479430366334215, 0.18777484577999348, 0.1756960038563613, 0.17532587515634257, 0.20733074705638432, 0.1808572405156077, 0.13885718853713314, 0.15288086936380607, 0.11883627221102833, 0.12418325580692258, 0.14793401425269492, 0.13009336049041254, 0.12051274255006938, 0.12686134706140273, 0.11684892129222813, 0.1642787978465492, 0.1741480006547086, 0.1607379556231363, 0.13981691062255652, 0.17242697524838602, 0.1697166305140052, 0.16572174620496094, 0.14944941276865176, 0.15657810054633625, 0.14533692049216096, 0.16192505023768444, 0.13641043748321102, 0.15018508245592765, 0.16080875076278112, 0.15814450126214052, 0.12921324128889833, 0.15065779080796404, 0.19405207910848143, 0.4567663147609978, 0.159689618619138, 0.16296996211058046, 0.15292125037275384, 0.16330601861698635, 0.15809430802035718, 0.13114761947982156, 0.14113297290033222, 0.13964786093171966, 0.16633401717834895, 0.1084922119405255, 0.1795447352635109, 0.10431486351259533, 0.11455229504463116, 0.1537300295012981, 0.2540998530699393, 0.1381772269929612, 0.19452622206381698, 0.1829207184490933, 0.17086529554291896, 0.1641047830466852, 0.17159152306415015, 0.1896054970965413, 0.1734808523933471, 0.1661651119510339, 0.18275033230111448, 0.17821036540409363, 0.045658828469841706, 0.05669018150916194, 0.05762483846855071, 0.04760589410556604, 0.04329672668319273, 0.043956704853318485, 0.04439158723516723, 0.0529555412129008, 0.05258821737610453]}, "mutation_prompt": null}
{"id": "3cb81a67-0f35-46ba-a6c4-63fec87e85db", "solution": "import numpy as np\n\nclass FasterDynamicMutationOptimizer:\n    def __init__(self, budget, dim, swarm_size=20, num_swarms=5):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.num_swarms = num_swarms\n        self.mutation_rates = np.full((self.num_swarms, self.swarm_size), np.random.uniform(0, 1))\n    \n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        swarm_scores = [func(p) for p in best_positions]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    adaptive_inertia = 0.9 + 0.1 * _ / self.budget\n                    \n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component\n                    \n                    if np.random.rand() < self.mutation_rates[i][j]:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n                    \n                    current_score = func(swarms[i][j])\n                    if current_score < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                        swarm_scores[i] = current_score\n                    if current_score < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.mutation_rates[i][j] *= 0.9 + 0.1 * swarm_scores[i] / current_score\n        return global_best_position", "name": "FasterDynamicMutationOptimizer", "description": "Introduce a self-adaptive mechanism to dynamically adjust the mutation rates based on the performance of each swarm to enhance convergence speed. ", "configspace": "", "generation": 62, "fitness": 0.12623227970221637, "feedback": "The algorithm FasterDynamicMutationOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "694b2f46-c594-4819-b1b8-8ab2c436dbd1", "metadata": {"aucs": [0.17621533665235678, 0.1800596573462211, 0.1698879146924842, 0.1957285221868188, 0.2031320140620534, 0.19676136652696163, 0.20284464079176912, 0.2328305741902661, 0.1859111147619661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04189003259590318, 0.07644757886103926, 0.05153970713547529, 0.04343184257822941, 0.053879601371482067, 0.05096916255300399, 0.04084579507123376, 0.06209813788294127, 0.03816617660658994, 0.029737132289897272, 0.05475428324830678, 0.021608829064152957, 0.016430329504153462, 0.025881512152035935, 0.0411265586497499, 0.03664244886147694, 0.030206373877729287, 0.028451301182488176, 0.9603945309653048, 0.9619496076252109, 0.9580756738233716, 0.9590970762478278, 0.9576083449125692, 0.9574108881128474, 0.9537685595083555, 0.9624707660146101, 0.9528760563545393, 0.06588049810705165, 0.0933312349176797, 0.06757418012599914, 0.04992433272805352, 0.05319413503898773, 0.08467525045988511, 0.09019188364467623, 0.05792456580212291, 0.06488914788459277, 0.11462972173001507, 0.13250110503187407, 0.12166986376974387, 0.1515513270779969, 0.16805187212309936, 0.11762842792983919, 0.11406609965401715, 0.136780457463186, 0.15010447785267556, 9.999999999998899e-05, 9.999999999998899e-05, 0.003138902724143966, 0.03836670181104995, 0.004516231074098487, 0.04951144313152622, 0.017356492045265126, 0.03504395304004537, 9.999999999998899e-05, 0.029739526864370758, 0.0066028444177356205, 0.018680154709471597, 9.999999999998899e-05, 0.048754532927843486, 0.029544686400177822, 9.999999999998899e-05, 0.029095643701209317, 0.09719671340025815, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03682198672357573, 0.08467014081763968, 0.04188898638691951, 0.02783968382635682, 0.0435659164651131, 0.020527972086838764, 9.999999999998899e-05, 0.0941484879605925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006406484970844506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027212560835265798, 0.19570624437049666, 0.1875259355418788, 0.2232731588170911, 0.19221310310627082, 0.2394819905650103, 0.21865755786576835, 0.23287912079866768, 0.2188652018710464, 0.21976337368990384, 0.04615840722718145, 0.051479528912834804, 0.05198415560160663, 0.06269637850348664, 0.04895586439760269, 0.04638645016876075, 0.03969551274054761, 0.07154155712686916, 0.05704537009279975, 0.10942440156610667, 0.1075589644405478, 0.1318515506732234, 0.12043266730024571, 0.13620514852070065, 0.13801119668128758, 0.12179996131111548, 0.13611797673835646, 0.13361346953209974, 0.15789786239786174, 0.17201295863705113, 0.16798072446885126, 0.15649148091357568, 0.15808720766185347, 0.16918482718116878, 0.1570309014379263, 0.1625896392968178, 0.15337178797536233, 0.1096442323234067, 0.1478087618976398, 0.1115778917046728, 0.09997092459782309, 0.13589487935579558, 0.10466058916817222, 0.11837759673681758, 0.11374282497684451, 0.10299111233727831, 0.15523781338077136, 0.1541744068156259, 0.14422607011217514, 0.13507875555846183, 0.13609993544940024, 0.14002748761349615, 0.13791605461729328, 0.15422303490112554, 0.16648128963766595, 0.14229948791896563, 0.15374190667841736, 0.1522596522116384, 0.15399515089886695, 0.14777635434452063, 0.17032006276528133, 0.14342597156054726, 0.15465022622444635, 0.15561633126780694, 0.197595089191279, 0.16547266722604237, 0.1584012101525495, 0.14352946681942247, 0.16491546649267042, 0.1442493532709348, 0.10705362795970319, 0.21635288593935997, 0.15595854307840729, 0.10864708551656299, 0.14102910125636137, 0.13493419429458864, 0.15715728347542013, 0.14630855186351077, 0.14242052966356444, 0.15883346732475023, 0.17529593831666845, 0.1554656123019249, 0.18427455875854526, 0.18518525669281827, 0.19280930966817655, 0.17105210975384433, 0.16690309039026796, 0.1708034773073327, 0.18527893128652662, 0.16767869376304245, 0.16808075369036646, 0.05314254240676275, 0.04378532775757116, 0.04936807662055176, 0.03988897715306283, 0.05433572250905583, 0.03871890276903289, 0.057754189443161574, 0.07240985208210293, 0.04472119159809629]}, "mutation_prompt": null}
{"id": "f029fb55-899f-4c09-95a8-6a4ae623df78", "solution": "class EnhancedSpeedyDynamicMutationOptimizer(SpeedyDynamicMutationOptimizer):\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rates = np.full((self.num_swarms, self.swarm_size), self.initial_mutation_rate)\n        swarm_scores = [func(p) for p in best_positions]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    adaptive_inertia = self.inertia_weight * (1 - _ / self.budget)\n                    \n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component\n                    \n                    if np.random.rand() < mutation_rates[i][j]:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n                    \n                    current_score = func(swarms[i][j])\n                    if current_score < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                        swarm_scores[i] = current_score\n                    if current_score < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9 + 0.1 * swarm_scores[i] / current_score\n                        self.social_weight = self.social_weight * 0.9 + 0.1 * swarm_scores[i] / current_score\n                        mutation_rates[i][j] *= 0.9  # Dynamic mutation rate adaptation\n        return global_best_position", "name": "EnhancedSpeedyDynamicMutationOptimizer", "description": "Introduce an adaptive strategy to dynamically adjust the cognitive and social weights based on the performance of each swarm to accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "694b2f46-c594-4819-b1b8-8ab2c436dbd1", "metadata": {"aucs": [0.33018555112652226, 0.29732972539514635, 0.31435302848794877, 0.2896338687973352, 0.2914280284284009, 0.2586136552280761, 0.3024449521746133, 0.3054790051221111, 0.3071969566896089, 9.999999999998899e-05, 9.999999999998899e-05, 0.015236130580853602, 9.999999999998899e-05, 0.008164969026316804, 0.017414614692111918, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0666512697892585, 0.05653313639610791, 0.0596467173483205, 0.0580045691502894, 0.05716237539769431, 0.05859633370912065, 0.0599409186704859, 0.05420847954485142, 0.06014978655612835, 0.0391414374595932, 0.04915864296268979, 0.04692190913448324, 0.05309256342832591, 0.03904562136222012, 0.048610894966810925, 0.03060880618134998, 0.05370240064463161, 0.04309939390870876, 0.9860129229049824, 0.9904825435010566, 0.9938952594364668, 0.9915718896393075, 0.9801843210033079, 0.9894505735757134, 0.9874504410997984, 0.9807589327337687, 0.9764133208434507, 0.09201282617894335, 0.14280989527687393, 0.10344999167946078, 0.10941796895912481, 0.05738297722365149, 0.11570746159732137, 0.13737438322469975, 0.10638474843434342, 0.13206910927674342, 0.18663518144005653, 0.16441988248302897, 0.15830889385319646, 0.17334698205096333, 0.1833957336618084, 0.14160958263044687, 0.12174799185525376, 0.2084154225040754, 0.12993471101554654, 0.06078643176369203, 0.08514647396750641, 0.08102348307888985, 0.07413099420543423, 0.058008159588650465, 0.017191723994171793, 0.06884064656457634, 0.08823700232603315, 0.05851399096209475, 0.02010261900532928, 0.03170600806206436, 0.016809808565620865, 0.09764458579366897, 0.08804290878789578, 0.09511238625395768, 0.03003049251449663, 0.015453767256639162, 0.15069462863495497, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013672813866427713, 9.999999999998899e-05, 9.999999999998899e-05, 0.018059618215879536, 9.999999999998899e-05, 0.020661222873095908, 0.03791196972703492, 9.999999999998899e-05, 0.026358089690869613, 9.999999999998899e-05, 0.02660249536903536, 0.006168567999449648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031145346899335014, 0.021406020133536874, 0.027629288997783275, 0.022741104562245318, 0.02454637910940949, 0.0016539387319036702, 0.003013424174413193, 0.02390867347890946, 0.03495277071278702, 0.03232542418069939, 0.2686352038533737, 0.28932439068342275, 0.2654917750843103, 0.28899749653579, 0.3018218529246548, 0.2739765456720342, 0.31511601767717423, 0.20859529047229242, 0.30604388818621975, 0.06209787978322512, 0.06544943691374883, 0.05473750373486452, 0.06062391269065226, 0.06664629664610511, 0.06546236529509375, 0.04598964533910044, 0.06174072156244692, 0.05745033558735757, 0.14718647852359812, 0.14828170664028528, 0.12438133418966313, 0.12385335579124335, 0.13728849026816625, 0.14104629094533938, 0.13447972298749933, 0.15507403647808937, 0.13111408244355438, 0.17266549748328053, 0.17768529947352074, 0.1877611842074306, 0.18479430366334215, 0.18777484577999348, 0.1756960038563613, 0.17532587515634257, 0.20733074705638432, 0.1808572405156077, 0.13885718853713314, 0.15288086936380607, 0.11883627221102833, 0.12418325580692258, 0.14793401425269492, 0.13009336049041254, 0.12051274255006938, 0.12686134706140273, 0.11684892129222813, 0.1642787978465492, 0.1741480006547086, 0.1607379556231363, 0.13981691062255652, 0.17242697524838602, 0.1697166305140052, 0.16572174620496094, 0.14944941276865176, 0.15657810054633625, 0.14533692049216096, 0.16192505023768444, 0.13641043748321102, 0.15018508245592765, 0.16080875076278112, 0.15814450126214052, 0.12921324128889833, 0.15065779080796404, 0.19405207910848143, 0.4567663147609978, 0.159689618619138, 0.16296996211058046, 0.15292125037275384, 0.16330601861698635, 0.15809430802035718, 0.13114761947982156, 0.14113297290033222, 0.13964786093171966, 0.16633401717834895, 0.1084922119405255, 0.1795447352635109, 0.10431486351259533, 0.11455229504463116, 0.1537300295012981, 0.2540998530699393, 0.1381772269929612, 0.19452622206381698, 0.1829207184490933, 0.17086529554291896, 0.1641047830466852, 0.17159152306415015, 0.1896054970965413, 0.1734808523933471, 0.1661651119510339, 0.18275033230111448, 0.17821036540409363, 0.045658828469841706, 0.05669018150916194, 0.05762483846855071, 0.04760589410556604, 0.04329672668319273, 0.043956704853318485, 0.04439158723516723, 0.0529555412129008, 0.05258821737610453]}, "mutation_prompt": null}
{"id": "42993166-653b-4b93-b81d-40ecfcae38d7", "solution": "import numpy as np\n\nclass HybridEnhancedSpeedyDynamicMutationOptimizer(EnhancedSpeedyDynamicMutationOptimizer):\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rates = np.full((self.num_swarms, self.swarm_size), self.initial_mutation_rate)\n        swarm_scores = [func(p) for p in best_positions]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    pso_component = np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    adaptive_inertia = self.inertia_weight * (1 - _ / self.budget)\n                    \n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component + pso_component\n                    \n                    if np.random.rand() < mutation_rates[i][j]:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n                    \n                    current_score = func(swarms[i][j])\n                    if current_score < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                        swarm_scores[i] = current_score\n                    if current_score < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9 + 0.1 * swarm_scores[i] / current_score\n                        self.social_weight = self.social_weight * 0.9 + 0.1 * swarm_scores[i] / current_score\n                        mutation_rates[i][j] *= 0.9  # Dynamic mutation rate adaptation\n        return global_best_position", "name": "HybridEnhancedSpeedyDynamicMutationOptimizer", "description": "Utilize a hybrid strategy by incorporating Particle Swarm Optimization (PSO) dynamics to enhance exploration and exploitation.", "configspace": "", "generation": 64, "fitness": 0.11726314037896847, "feedback": "The algorithm HybridEnhancedSpeedyDynamicMutationOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "694b2f46-c594-4819-b1b8-8ab2c436dbd1", "metadata": {"aucs": [0.1638973547182071, 0.1984883828794236, 0.17311488970718825, 0.2212690707541306, 0.17861669838930005, 0.18482428496943593, 0.18338601202819627, 0.20025746230168462, 0.17407177963175746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04312656694707129, 0.037001923302113604, 0.0358358215897564, 0.04595526614156353, 0.030968876554508862, 0.062320997162661484, 0.04105639487705026, 0.03384066113901463, 0.021356660939646832, 0.026617498919062954, 0.03993587077482785, 0.04544566983140352, 0.04643779573201978, 0.03280803425817724, 0.04281619086954247, 0.017289927066648114, 0.012832781618962508, 0.01600897658377254, 0.9606157698172653, 0.9930811263627708, 0.991068702511592, 0.9944783530097613, 0.9914165029865504, 0.9881024212729933, 0.989206883709926, 0.9895802542620403, 0.9236552259210272, 0.06274794416174423, 0.07283059610120324, 0.05725741715366972, 0.0692462426896655, 0.06786091424288387, 0.08648189240374393, 0.07351734331348048, 0.07456682677887783, 0.08572782534740364, 0.1369420551629984, 0.12885138338944213, 0.10546963305675217, 0.12306154118681867, 0.10198929593214978, 0.10272645757560872, 0.08358664705821406, 0.11190941687324352, 0.09570160966788466, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016677940533970426, 0.0021163134872703715, 0.001370498159656064, 0.028590320459677243, 9.999999999998899e-05, 0.012362233109347809, 0.03368897994307496, 0.017142998406361798, 0.010793804694788744, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0065445605742303625, 0.05244208812705453, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03763135795162764, 0.02636490085059484, 0.0011025841612998244, 9.999999999998899e-05, 9.999999999998899e-05, 0.046694088614712914, 0.0024349690640765864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001520248915254374, 9.999999999998899e-05, 0.0018181348217183313, 0.00018117708593745618, 0.002483259192688436, 9.999999999998899e-05, 0.004842022383931499, 0.04063638127999181, 0.02488647941390243, 0.140463280439462, 0.19574630634040013, 0.21931187268640306, 0.18584844817771817, 0.1723078181082761, 0.20019662906813707, 0.18122859127406932, 0.15734125594413018, 0.19021111839396687, 0.04847176201169057, 0.03920495418650649, 0.040350626689035884, 0.04635869017087113, 0.05566006106093102, 0.05369513256238312, 0.03763122106719852, 0.032866402277457185, 0.05286400580406203, 0.10882638294741942, 0.13305346947803487, 0.12014658073270912, 0.12267688295219303, 0.11705868405657383, 0.1236992720058524, 0.14576249315279166, 0.1375223214546304, 0.12101076410228029, 0.12857463541305647, 0.15350387402421206, 0.1613932299901244, 0.14923656671725205, 0.15305012014712338, 0.14127161447002567, 0.15377472163824968, 0.17377774300845283, 0.13785363240173343, 0.09983040383114661, 0.06710126964042062, 0.15198590819127367, 0.13068673520970153, 0.104930569938681, 0.08292847671754822, 0.11326327565109018, 0.0997711199450243, 0.09239123229971102, 0.14750137150604836, 0.13001964905022323, 0.14382489929145303, 0.1398680509829383, 0.14225905342921286, 0.13747983951981246, 0.13259265469224213, 0.1663113203037837, 0.15863721108484208, 0.10088388004785032, 0.08059317905444496, 0.13788119885331818, 0.1096822890029856, 0.1315714749916591, 0.14792360902443435, 0.11815294833799217, 0.15442991872585932, 0.0824156502763359, 0.14491871586291416, 0.11634150592124348, 0.16514705766078897, 0.15571798436544815, 0.1400473438559413, 0.13713042758124505, 0.16871960139600628, 0.15112199165609996, 0.10578224218780619, 0.14416730502923325, 0.1091814019972156, 0.0847644792760891, 0.09198866970686337, 0.10907177530728751, 0.15290297415293297, 0.15685434444936364, 0.1092792766765156, 0.16926191723378303, 0.1798714568116897, 0.16097983481254818, 0.1905940495773032, 0.17300294894361723, 0.1694093479980474, 0.16251948459787524, 0.19705845488970763, 0.1492239704202315, 0.17839918004742572, 0.0339021182873499, 0.0444526661508684, 0.0402919490131004, 0.038931540516624064, 0.042177961162634725, 0.03612389465669419, 0.0525036057177547, 0.04158154448142526, 0.04222769605579346]}, "mutation_prompt": null}
{"id": "6f6b9e5d-1174-4aa5-9988-160d6686f517", "solution": "class EnhancedSpeedyDynamicMutationOptimizer(SpeedyDynamicMutationOptimizer):\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rates = np.full((self.num_swarms, self.swarm_size), self.initial_mutation_rate)\n        swarm_scores = [func(p) for p in best_positions]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    adaptive_inertia = self.inertia_weight * (1 - _ / self.budget)\n                    \n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component\n                    \n                    if np.random.rand() < mutation_rates[i][j]:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n                    \n                    current_score = func(swarms[i][j])\n                    if current_score < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                        swarm_scores[i] = current_score\n                    if current_score < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9 + 0.1 * swarm_scores[i] / current_score\n                        self.social_weight = self.social_weight * 0.9 + 0.1 * swarm_scores[i] / current_score\n                        mutation_rates[i][j] *= 0.9  # Dynamic mutation rate adaptation\n        return global_best_position", "name": "EnhancedSpeedyDynamicMutationOptimizer", "description": "Introduce an adaptive strategy to dynamically adjust the cognitive and social weights based on the performance of each swarm to accelerate convergence.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "694b2f46-c594-4819-b1b8-8ab2c436dbd1", "metadata": {"aucs": [0.33018555112652226, 0.29732972539514635, 0.31435302848794877, 0.2896338687973352, 0.2914280284284009, 0.2586136552280761, 0.3024449521746133, 0.3054790051221111, 0.3071969566896089, 9.999999999998899e-05, 9.999999999998899e-05, 0.015236130580853602, 9.999999999998899e-05, 0.008164969026316804, 0.017414614692111918, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0666512697892585, 0.05653313639610791, 0.0596467173483205, 0.0580045691502894, 0.05716237539769431, 0.05859633370912065, 0.0599409186704859, 0.05420847954485142, 0.06014978655612835, 0.0391414374595932, 0.04915864296268979, 0.04692190913448324, 0.05309256342832591, 0.03904562136222012, 0.048610894966810925, 0.03060880618134998, 0.05370240064463161, 0.04309939390870876, 0.9860129229049824, 0.9904825435010566, 0.9938952594364668, 0.9915718896393075, 0.9801843210033079, 0.9894505735757134, 0.9874504410997984, 0.9807589327337687, 0.9764133208434507, 0.09201282617894335, 0.14280989527687393, 0.10344999167946078, 0.10941796895912481, 0.05738297722365149, 0.11570746159732137, 0.13737438322469975, 0.10638474843434342, 0.13206910927674342, 0.18663518144005653, 0.16441988248302897, 0.15830889385319646, 0.17334698205096333, 0.1833957336618084, 0.14160958263044687, 0.12174799185525376, 0.2084154225040754, 0.12993471101554654, 0.06078643176369203, 0.08514647396750641, 0.08102348307888985, 0.07413099420543423, 0.058008159588650465, 0.017191723994171793, 0.06884064656457634, 0.08823700232603315, 0.05851399096209475, 0.02010261900532928, 0.03170600806206436, 0.016809808565620865, 0.09764458579366897, 0.08804290878789578, 0.09511238625395768, 0.03003049251449663, 0.015453767256639162, 0.15069462863495497, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00013672813866427713, 9.999999999998899e-05, 9.999999999998899e-05, 0.018059618215879536, 9.999999999998899e-05, 0.020661222873095908, 0.03791196972703492, 9.999999999998899e-05, 0.026358089690869613, 9.999999999998899e-05, 0.02660249536903536, 0.006168567999449648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031145346899335014, 0.021406020133536874, 0.027629288997783275, 0.022741104562245318, 0.02454637910940949, 0.0016539387319036702, 0.003013424174413193, 0.02390867347890946, 0.03495277071278702, 0.03232542418069939, 0.2686352038533737, 0.28932439068342275, 0.2654917750843103, 0.28899749653579, 0.3018218529246548, 0.2739765456720342, 0.31511601767717423, 0.20859529047229242, 0.30604388818621975, 0.06209787978322512, 0.06544943691374883, 0.05473750373486452, 0.06062391269065226, 0.06664629664610511, 0.06546236529509375, 0.04598964533910044, 0.06174072156244692, 0.05745033558735757, 0.14718647852359812, 0.14828170664028528, 0.12438133418966313, 0.12385335579124335, 0.13728849026816625, 0.14104629094533938, 0.13447972298749933, 0.15507403647808937, 0.13111408244355438, 0.17266549748328053, 0.17768529947352074, 0.1877611842074306, 0.18479430366334215, 0.18777484577999348, 0.1756960038563613, 0.17532587515634257, 0.20733074705638432, 0.1808572405156077, 0.13885718853713314, 0.15288086936380607, 0.11883627221102833, 0.12418325580692258, 0.14793401425269492, 0.13009336049041254, 0.12051274255006938, 0.12686134706140273, 0.11684892129222813, 0.1642787978465492, 0.1741480006547086, 0.1607379556231363, 0.13981691062255652, 0.17242697524838602, 0.1697166305140052, 0.16572174620496094, 0.14944941276865176, 0.15657810054633625, 0.14533692049216096, 0.16192505023768444, 0.13641043748321102, 0.15018508245592765, 0.16080875076278112, 0.15814450126214052, 0.12921324128889833, 0.15065779080796404, 0.19405207910848143, 0.4567663147609978, 0.159689618619138, 0.16296996211058046, 0.15292125037275384, 0.16330601861698635, 0.15809430802035718, 0.13114761947982156, 0.14113297290033222, 0.13964786093171966, 0.16633401717834895, 0.1084922119405255, 0.1795447352635109, 0.10431486351259533, 0.11455229504463116, 0.1537300295012981, 0.2540998530699393, 0.1381772269929612, 0.19452622206381698, 0.1829207184490933, 0.17086529554291896, 0.1641047830466852, 0.17159152306415015, 0.1896054970965413, 0.1734808523933471, 0.1661651119510339, 0.18275033230111448, 0.17821036540409363, 0.045658828469841706, 0.05669018150916194, 0.05762483846855071, 0.04760589410556604, 0.04329672668319273, 0.043956704853318485, 0.04439158723516723, 0.0529555412129008, 0.05258821737610453]}, "mutation_prompt": null}
{"id": "13b57fd2-79e2-49df-9a42-07b3cfa95e71", "solution": "import numpy as np\n\nclass EnhancedFastAdaptiveMutationOptimizer:\n    def __init__(self, budget, dim, swarm_size=30, num_swarms=5, initial_mutation_rate=0.5, cognitive_weight=1.0, social_weight=1.0, inertia_weight=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.num_swarms = num_swarms\n        self.initial_mutation_rate = initial_mutation_rate\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.inertia_weight = inertia_weight\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        velocities = [np.zeros((self.swarm_size, self.dim)) for _ in range(self.num_swarms)]\n        best_positions = [swarms[i][np.argmin([func(p) for p in swarms[i]])] for i in range(self.num_swarms)]\n        global_best_position = best_positions[0].copy()\n        mutation_rates = np.full((self.num_swarms, self.swarm_size), self.initial_mutation_rate)\n        swarm_scores = [func(p) for p in best_positions]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_swarms):\n                for j in range(self.swarm_size):\n                    cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - swarms[i][j])\n                    social_component = self.social_weight * np.random.rand(self.dim) * (global_best_position - swarms[i][j])\n                    adaptive_inertia = self.inertia_weight * (1 - _ / self.budget)\n                    \n                    velocities[i][j] = adaptive_inertia * velocities[i][j] + cognitive_component + social_component\n                    \n                    if np.random.rand() < mutation_rates[i][j]:\n                        opposite_position = 2 * np.mean(swarms[i]) - swarms[i][j]\n                        swarms[i][j] = np.clip(opposite_position + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    else:\n                        swarms[i][j] = np.clip(swarms[i][j] + velocities[i][j], -5.0, 5.0)\n                    \n                    current_score = func(swarms[i][j])\n                    if current_score < func(best_positions[i]):\n                        best_positions[i] = swarms[i][j]\n                        swarm_scores[i] = current_score\n                    if current_score < func(global_best_position):\n                        global_best_position = swarms[i][j]\n                        self.cognitive_weight = self.cognitive_weight * 0.9 + 0.1 * swarm_scores[i] / current_score\n                        self.social_weight = self.social_weight * 0.9 + 0.1 * swarm_scores[i] / current_score\n                        # Adaptive mutation rate adjustment based on recent performance\n                        if swarm_scores[i] / current_score > np.mean(swarm_scores) / func(global_best_position):\n                            mutation_rates[i][j] *= 1.1\n                        else:\n                            mutation_rates[i][j] *= 0.9\n        return global_best_position", "name": "EnhancedFastAdaptiveMutationOptimizer", "description": "Improve convergence speed by introducing a novel adaptive mechanism to adjust mutation rates based on the recent performance of each swarm, promoting exploration and exploitation dynamically.", "configspace": "", "generation": 66, "fitness": 0.13642839986456967, "feedback": "The algorithm EnhancedFastAdaptiveMutationOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.18.", "error": "", "parent_id": "694b2f46-c594-4819-b1b8-8ab2c436dbd1", "metadata": {"aucs": [0.2265443715063289, 0.21963682944783813, 0.21649642802781566, 0.20167967326774838, 0.20035877648027922, 0.22139163047489085, 0.22303641729900625, 0.22989551954344234, 0.2086981356246569, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0597265609939599, 0.05633809532004119, 0.0546831120989657, 0.05009894984449825, 0.04605480359829395, 0.053644818410366835, 0.06462223260653222, 0.046518439329113925, 0.04577963195913437, 0.048595709249456, 0.043325525373220763, 0.045081762050454, 0.05105955701421405, 0.04942110464886451, 0.038696843373965395, 0.04008816111681868, 0.045200947810578485, 0.039868470680719637, 0.9386628037690126, 0.9628730464510723, 0.941543905479489, 0.9695843123599683, 0.9615373340272524, 0.9299306553759591, 0.9343603065353006, 0.9616004724577956, 0.9428169698395795, 0.11837258170078169, 0.09843680940250654, 0.11300070312877708, 0.10598197733887904, 0.11000749822664857, 0.11052778173407918, 0.07416796655921865, 0.07755103306317124, 0.1124095805487163, 0.145294815070798, 0.15342749197863892, 0.14581137522866794, 0.1681118568212212, 0.13992980806186495, 0.13382734534262875, 0.11531170486428932, 0.1305238603161828, 0.12272238203981123, 0.06028133652881029, 9.999999999998899e-05, 0.03351461631982877, 0.04064768637700222, 0.017875371559258224, 0.03825712670567705, 0.0358208715304138, 0.026715063453563004, 0.042423659884702314, 0.054484226296009575, 0.0762082909924382, 0.0796169912313135, 0.02495532981523807, 0.08086148196287979, 0.0555329447499584, 0.07517635642789988, 0.08116623882539675, 0.03274217180598282, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036216564446581834, 0.002696825397870417, 0.017661542553463194, 0.05151900157093636, 0.046884488255346524, 0.05787485456406816, 0.041083962820606, 0.03564570297637093, 0.026052062412519117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027740620448947206, 0.015887003536886213, 0.011877062552259177, 0.0003096022062746284, 0.02214952344786958, 9.999999999998899e-05, 0.008176790095046127, 0.0027319446424962646, 0.018931724123280924, 0.21319644206823785, 0.20802538899243905, 0.23553175506446467, 0.22409327747559094, 0.22737793974605125, 0.2297868946551992, 0.22450927824586475, 0.22416545765953366, 0.251289328758464, 0.05637735119250242, 0.058869527751277406, 0.044360655341642796, 0.06233069252493173, 0.0638203422222805, 0.06148440771093333, 0.04740054405380145, 0.06499578194134992, 0.06014055078911462, 0.14147785628693343, 0.1178299790245223, 0.15085052229893858, 0.13766266535167793, 0.13511880823300437, 0.10888226748664742, 0.11470585825298352, 0.13521631273487078, 0.11536792360039694, 0.1781817870919118, 0.20802138216096755, 0.18576202467749492, 0.1830719044802268, 0.1876540411320875, 0.1848681337739546, 0.17774785915486357, 0.18742501818393076, 0.18682050798099348, 0.14224162920424732, 0.12667537920083505, 0.12913512603829136, 0.15263394226531546, 0.12618239581663693, 0.15608496062183297, 0.14355664333939366, 0.14045202683344526, 0.13068582743880286, 0.17746625617665346, 0.16388972281434766, 0.1601981199029593, 0.16331780178651112, 0.16446353184265805, 0.17497918338719554, 0.17344050954424617, 0.18502868124758776, 0.18966260954192327, 0.15527546139453274, 0.1564892560947706, 0.15120963317877556, 0.15692417261157787, 0.1703618765300161, 0.16045169387276914, 0.16423102798099154, 0.15862690339959118, 0.163001479727086, 0.1974339106060573, 0.1590830371967249, 0.1538676997309374, 0.1624712302297836, 0.2007808778624457, 0.14476617831155092, 0.12223640044947992, 0.13893082914283927, 0.15672515201547066, 0.2111709457751283, 0.12885811631992838, 0.15769873875784401, 0.13446425962804187, 0.15192265482872314, 0.14476170158356616, 0.18639706336454065, 0.14459131136908487, 0.24861478352022448, 0.1728188632451616, 0.1840951386782479, 0.17513235974673957, 0.1698858331458346, 0.1601006279108418, 0.17690648575175583, 0.1627064415749796, 0.17387518528811252, 0.16948153803032096, 0.05545349736290395, 0.06996397148628986, 0.060100311632014014, 0.04863230848382194, 0.06374818089731216, 0.05865726866912557, 0.06859438266726103, 0.0618150253667038, 0.05818437323751735]}, "mutation_prompt": null}
{"id": "34d78353-b29a-4b83-9f2c-7d99df812611", "solution": "import numpy as np\n\nclass DynamicNeighborhoodSearchOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                candidate_position = np.clip(swarm[i] + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n        return best_position", "name": "DynamicNeighborhoodSearchOptimizer", "description": "Enhancing convergence by introducing dynamic neighborhood search for local exploration and exploitation.", "configspace": "", "generation": 67, "fitness": 0.15859002655066667, "feedback": "The algorithm DynamicNeighborhoodSearchOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "694b2f46-c594-4819-b1b8-8ab2c436dbd1", "metadata": {"aucs": [0.27492877682265526, 0.28318555761392106, 0.28653432643288423, 0.2873997500640796, 0.28947778458613627, 0.2715493597994477, 0.28009481071530307, 0.2693620700490482, 0.2717325649365745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07333737549128305, 0.07675420507573305, 0.09220621590920641, 0.08452506702648477, 0.07878115960982124, 0.07928635236522763, 0.07464810953004652, 0.07060407715748185, 0.0866148544518417, 0.08349535463457047, 0.06865895031512936, 0.05429744222106325, 0.06038569999841803, 0.07149167827273795, 0.05634234410211736, 0.05820368102442386, 0.08019274012012034, 0.059629318495662886, 0.9440655937440774, 0.9107053727159824, 0.9212002677186311, 0.8991686921208355, 0.900139328465661, 0.9037667410146863, 0.9356096798435672, 0.8909404284183817, 0.907257655283215, 0.16327465635017435, 0.13495814838002262, 0.13847369751230565, 0.15735402392641573, 0.1753361586501525, 0.1369951092748546, 0.15665605682653005, 0.15192413277740757, 0.17795328971894664, 0.20241127206596143, 0.1992200097814102, 0.1966022960518541, 0.21485110950424802, 0.18620380605845643, 0.1821311599116323, 0.20493724981302586, 0.17569949871897406, 0.17442507322380296, 0.08461336128833596, 0.0848953526206373, 0.10858266968658792, 0.08475669571113575, 0.08411313817662869, 0.08170649722141732, 0.07158305597750936, 0.07928626241498693, 0.07548403646737045, 0.10604702607740835, 0.07214766454970467, 0.07353012950313664, 0.07223291953191835, 0.08412725760444151, 0.11745567035095172, 0.07084595227028823, 0.09878486133025655, 0.09858834282147744, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056291700006718015, 0.08081545604494911, 0.045383821504774824, 0.03127257247394977, 0.04918599081000541, 0.017482424475028013, 0.07892719064086573, 0.06453226268020784, 0.05341218425778804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030232835463079977, 0.03827763413777596, 0.04301697594885168, 0.04610095953462956, 0.019516114402747364, 0.02607235068551017, 0.03580062385545424, 0.021157892770145903, 0.025741531861101397, 0.2783746591457431, 0.28226959517442096, 0.2933423494857935, 0.27529120447843514, 0.2929976290663955, 0.2696831716732062, 0.2695254874121362, 0.2555520223329878, 0.2767669152857678, 0.07066517048390675, 0.07165234934222553, 0.07804090350452209, 0.07415007620965275, 0.07978024621173152, 0.0725665796015803, 0.06945154737086978, 0.07278610822207432, 0.08397672259998179, 0.138707751847008, 0.13065843616285833, 0.12791882448969139, 0.15075184612024217, 0.15451136520605901, 0.1267303850139413, 0.15649599352820365, 0.13389876158454395, 0.1493648931276823, 0.2154127684356898, 0.2096620562776138, 0.2306683706834809, 0.20605510193937893, 0.20337965834216176, 0.2056130116504019, 0.18685691991729902, 0.1933168444294212, 0.21151598027968088, 0.14822752003987827, 0.15466259166654395, 0.14825380362596352, 0.14002451101662194, 0.16012240125400845, 0.15121802393580341, 0.14229028740421512, 0.13144683063634344, 0.13420249879067447, 0.18250979463732497, 0.1904483886388576, 0.18600482602412616, 0.187978537680082, 0.19252227642246678, 0.17019526685782382, 0.1942400300373982, 0.18495951718712267, 0.1794711421022117, 0.17361315962749557, 0.1661526644678425, 0.169660403463874, 0.16795834822437605, 0.17960286454418906, 0.16569331273446408, 0.17087808276547767, 0.16598680289385226, 0.16761758809149818, 0.16647202707569997, 0.16734529191247038, 0.2644401556715098, 0.32721541177076074, 0.16963060244927042, 0.17656157525795957, 0.17253896786996215, 0.17023780207058403, 0.1485591895044972, 0.25999018814315134, 0.26545488913877957, 0.26660964563563194, 0.19096962875101597, 0.2603499080444168, 0.27132006597288993, 0.1362691204383475, 0.15537853182273031, 0.14726766702411676, 0.16975410942823854, 0.17197768969933824, 0.16617250972361586, 0.18106379877042977, 0.17231957251214658, 0.17575063164796734, 0.17743571964861016, 0.18241103707326223, 0.1917315915918436, 0.0798629039516745, 0.06435035105212994, 0.07578944151899791, 0.07657024498826304, 0.06819872003697092, 0.08589577972702422, 0.0613025472018871, 0.07942803385006969, 0.07380565271000161]}, "mutation_prompt": null}
{"id": "ff3f848a-b219-4008-a098-f68552381d46", "solution": "import numpy as np\n\nclass AdaptiveMutationDynamicNeighborhoodSearchOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5, initial_mut_prob=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n        self.mut_prob = initial_mut_prob\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])\n        diversity_history = [np.mean(np.std(swarm, axis=0))]\n\n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                candidate_position = np.clip(swarm[i] + np.random.normal(0, 1, self.dim) * self.mut_prob, -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n            diversity = np.mean(np.std(swarm, axis=0))\n            if diversity > diversity_history[-1]:\n                self.mut_prob *= 1.05  # Increase mutation probability\n            else:\n                self.mut_prob *= 0.95  # Decrease mutation probability\n            diversity_history.append(diversity)\n\n        return best_position", "name": "AdaptiveMutationDynamicNeighborhoodSearchOptimizer", "description": "Introducing adaptive mutation probability based on population diversity to improve convergence speed.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 13, 9, '        diversity_history = [np.mean(np.std(swarm, axis=0))]\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 13, 9, '        diversity_history = [np.mean(np.std(swarm, axis=0))]\\n'))", "parent_id": "34d78353-b29a-4b83-9f2c-7d99df812611", "metadata": {}, "mutation_prompt": null}
{"id": "b9f4a5d4-166c-4921-901a-17c55e5b3758", "solution": "import numpy as np\n\nclass DynamicNeighborhoodSearchOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                candidate_position = np.clip(swarm[i] + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n        return best_position", "name": "DynamicNeighborhoodSearchOptimizer", "description": "Enhancing convergence by introducing dynamic neighborhood search for local exploration and exploitation.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "34d78353-b29a-4b83-9f2c-7d99df812611", "metadata": {"aucs": [0.27492877682265526, 0.28318555761392106, 0.28653432643288423, 0.2873997500640796, 0.28947778458613627, 0.2715493597994477, 0.28009481071530307, 0.2693620700490482, 0.2717325649365745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07333737549128305, 0.07675420507573305, 0.09220621590920641, 0.08452506702648477, 0.07878115960982124, 0.07928635236522763, 0.07464810953004652, 0.07060407715748185, 0.0866148544518417, 0.08349535463457047, 0.06865895031512936, 0.05429744222106325, 0.06038569999841803, 0.07149167827273795, 0.05634234410211736, 0.05820368102442386, 0.08019274012012034, 0.059629318495662886, 0.9440655937440774, 0.9107053727159824, 0.9212002677186311, 0.8991686921208355, 0.900139328465661, 0.9037667410146863, 0.9356096798435672, 0.8909404284183817, 0.907257655283215, 0.16327465635017435, 0.13495814838002262, 0.13847369751230565, 0.15735402392641573, 0.1753361586501525, 0.1369951092748546, 0.15665605682653005, 0.15192413277740757, 0.17795328971894664, 0.20241127206596143, 0.1992200097814102, 0.1966022960518541, 0.21485110950424802, 0.18620380605845643, 0.1821311599116323, 0.20493724981302586, 0.17569949871897406, 0.17442507322380296, 0.08461336128833596, 0.0848953526206373, 0.10858266968658792, 0.08475669571113575, 0.08411313817662869, 0.08170649722141732, 0.07158305597750936, 0.07928626241498693, 0.07548403646737045, 0.10604702607740835, 0.07214766454970467, 0.07353012950313664, 0.07223291953191835, 0.08412725760444151, 0.11745567035095172, 0.07084595227028823, 0.09878486133025655, 0.09858834282147744, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056291700006718015, 0.08081545604494911, 0.045383821504774824, 0.03127257247394977, 0.04918599081000541, 0.017482424475028013, 0.07892719064086573, 0.06453226268020784, 0.05341218425778804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030232835463079977, 0.03827763413777596, 0.04301697594885168, 0.04610095953462956, 0.019516114402747364, 0.02607235068551017, 0.03580062385545424, 0.021157892770145903, 0.025741531861101397, 0.2783746591457431, 0.28226959517442096, 0.2933423494857935, 0.27529120447843514, 0.2929976290663955, 0.2696831716732062, 0.2695254874121362, 0.2555520223329878, 0.2767669152857678, 0.07066517048390675, 0.07165234934222553, 0.07804090350452209, 0.07415007620965275, 0.07978024621173152, 0.0725665796015803, 0.06945154737086978, 0.07278610822207432, 0.08397672259998179, 0.138707751847008, 0.13065843616285833, 0.12791882448969139, 0.15075184612024217, 0.15451136520605901, 0.1267303850139413, 0.15649599352820365, 0.13389876158454395, 0.1493648931276823, 0.2154127684356898, 0.2096620562776138, 0.2306683706834809, 0.20605510193937893, 0.20337965834216176, 0.2056130116504019, 0.18685691991729902, 0.1933168444294212, 0.21151598027968088, 0.14822752003987827, 0.15466259166654395, 0.14825380362596352, 0.14002451101662194, 0.16012240125400845, 0.15121802393580341, 0.14229028740421512, 0.13144683063634344, 0.13420249879067447, 0.18250979463732497, 0.1904483886388576, 0.18600482602412616, 0.187978537680082, 0.19252227642246678, 0.17019526685782382, 0.1942400300373982, 0.18495951718712267, 0.1794711421022117, 0.17361315962749557, 0.1661526644678425, 0.169660403463874, 0.16795834822437605, 0.17960286454418906, 0.16569331273446408, 0.17087808276547767, 0.16598680289385226, 0.16761758809149818, 0.16647202707569997, 0.16734529191247038, 0.2644401556715098, 0.32721541177076074, 0.16963060244927042, 0.17656157525795957, 0.17253896786996215, 0.17023780207058403, 0.1485591895044972, 0.25999018814315134, 0.26545488913877957, 0.26660964563563194, 0.19096962875101597, 0.2603499080444168, 0.27132006597288993, 0.1362691204383475, 0.15537853182273031, 0.14726766702411676, 0.16975410942823854, 0.17197768969933824, 0.16617250972361586, 0.18106379877042977, 0.17231957251214658, 0.17575063164796734, 0.17743571964861016, 0.18241103707326223, 0.1917315915918436, 0.0798629039516745, 0.06435035105212994, 0.07578944151899791, 0.07657024498826304, 0.06819872003697092, 0.08589577972702422, 0.0613025472018871, 0.07942803385006969, 0.07380565271000161]}, "mutation_prompt": null}
{"id": "738ef09a-dd18-4506-a5b5-0d4698974ec3", "solution": "import numpy as np\n\nclass ImprovedDynamicNeighborhoodSearchOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                mutation_strength = np.random.normal(0, 1, self.dim) * self.mutation_rate * np.abs(swarm[i] - best_position)\n                candidate_position = np.clip(swarm[i] + mutation_strength, -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n        return best_position", "name": "ImprovedDynamicNeighborhoodSearchOptimizer", "description": "Introducing a dynamic mutation strategy based on individual performance to enhance exploration and exploitation.", "configspace": "", "generation": 70, "fitness": 0.09804751744127095, "feedback": "The algorithm ImprovedDynamicNeighborhoodSearchOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "34d78353-b29a-4b83-9f2c-7d99df812611", "metadata": {"aucs": [0.36678976362430693, 0.3798761590299856, 0.3653424282825545, 0.22451660564416387, 0.26335669144653173, 0.15872449171074587, 0.07675400071190275, 0.35238679808055207, 0.23272201669677872, 0.06694923424209775, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06275264404302128, 9.999999999998899e-05, 9.999999999998899e-05, 0.038060878793401254, 0.011720030844980966, 0.025552576543391492, 0.029713060589552365, 9.999999999998899e-05, 0.041913048754790516, 0.04006406316536226, 0.021606955333530964, 0.05889729523713827, 0.04315750848065458, 0.04061762776234756, 0.01608403543501713, 0.03560545627365341, 9.999999999998899e-05, 0.030680148861843337, 0.01540903614676592, 9.999999999998899e-05, 0.0054299852663216575, 0.03275992535201255, 9.999999999998899e-05, 0.2076091524122443, 0.182618972501418, 0.07914580047459618, 0.16450788913600123, 0.15351350885380688, 0.1500824389827169, 0.15520762199961047, 0.1085778062147359, 0.17443523945595896, 0.2449942024332148, 0.06904288131115499, 0.09834033511837514, 0.1494842267074591, 0.04366855676418768, 0.06257048543079946, 0.15426471332469005, 0.10371064696351784, 0.08144748223324438, 0.07219318187200696, 0.10545952353047883, 0.09628639027423924, 0.08655597919080704, 0.07518768081654947, 0.0254374592963712, 0.06312061895537624, 0.07875098973261918, 0.044197661866827054, 0.10246072104878512, 0.12058860134015736, 0.170890046440607, 0.05500280367374111, 0.0961330643316125, 9.999999999998899e-05, 9.999999999998899e-05, 0.11191895350349501, 0.042365690333252104, 0.009028850287519541, 0.11428103379090049, 0.10652614094502255, 0.09871912695910068, 0.1326427820206414, 0.035080675841488995, 0.12763579344605136, 0.1760695980754754, 0.11305274728894288, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051073379087788306, 0.1383895408797844, 0.11392070847247471, 0.04108727429805381, 0.03132739417435515, 0.027736721576133272, 0.15202734511077998, 0.08032313382817324, 0.049045455429560736, 9.999999999998899e-05, 9.999999999998899e-05, 0.02561261700543893, 0.05783292914604121, 9.999999999998899e-05, 0.002137202521110715, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013626363348354764, 9.999999999998899e-05, 9.999999999998899e-05, 0.13296260789447512, 0.11293946043194625, 0.015440864388561182, 0.11166933595081208, 0.03625016518176016, 0.20068226737768124, 0.21057917764562972, 0.2112365838162592, 0.262729939643607, 0.2818429036781356, 0.2803034566980065, 0.14790110326884898, 0.2854290383086985, 0.2192495780052227, 0.050412362136751265, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03233086503207416, 0.03652420303439119, 0.009085970707855995, 0.037399103600032735, 0.06055125350719426, 0.13543517039239072, 0.15493548102108012, 0.19007237739052107, 0.14560382588962817, 0.15994308311354566, 0.1445152948916404, 0.1500204792965767, 0.13428109227584828, 0.14247779906969205, 0.12361595713218287, 0.14277446457122767, 0.11490247267693698, 0.12685866284370673, 0.1490870557432783, 0.11881223096964966, 0.11420206329748472, 0.13352761516988298, 0.09609029256825707, 0.05851026014301419, 0.13599353478000376, 0.05608262642849926, 0.06282010151521267, 0.09238981524968182, 0.06501804609519768, 0.05745343327694319, 0.0693853353204762, 0.033613337789065945, 0.14365391928815385, 0.16162180031048323, 0.1414014677332287, 0.15622429089365653, 0.16066530549479063, 0.1871807308833876, 0.14689169270206182, 0.14871066530602262, 0.15601684995065646, 9.999999999998899e-05, 0.14888015595113102, 9.999999999998899e-05, 0.12470770496088768, 0.17319177712518974, 0.1877449381768358, 0.16670802969519594, 0.17855084877284955, 9.999999999998899e-05, 0.16045370992510766, 0.09420810041818317, 0.1379524978247737, 0.1754027581258928, 0.17111666029009798, 0.08997926809597179, 0.11106653092173346, 0.16347752937084536, 0.11783994647646834, 0.08137559881466894, 0.1336000929516371, 0.14256959355746712, 0.18445701397748926, 0.1958087659890847, 0.12183765548527159, 0.211656661975412, 0.1398143183487085, 0.11119779824989218, 0.18107130609483324, 0.1899702209409314, 0.1857373999413392, 0.19898159890942657, 0.17067151328914476, 0.16704394563149394, 0.16497312301693, 0.17622471492627556, 0.1679153360240352, 0.04968476067247962, 0.04431425894226815, 0.04532390577883039, 0.02454004337944149, 0.0330697657527631, 0.02243247678688276, 0.0233739384233701, 0.048098769336407554, 0.0470392557936109]}, "mutation_prompt": null}
{"id": "021912f8-6b8f-41ee-8ce8-82f2db1a887c", "solution": "import numpy as np\n\nclass HybridParticleSwarmOptimizer:\n    def __init__(self, budget, dim, num_particles=10, inertia_weight=0.5, cognitive_param=1.5, social_param=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_param = cognitive_param\n        self.social_param = social_param\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_velocity = self.cognitive_param * np.random.random() * (best_position - swarm[i])\n                social_velocity = self.social_param * np.random.random() * (swarm[np.argmin([func(p) for p in swarm])] - swarm[i])\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_velocity + social_velocity\n                swarm[i] = np.clip(swarm[i] + velocities[i], -5.0, 5.0)\n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n        return best_position", "name": "HybridParticleSwarmOptimizer", "description": "Utilizing a hybrid strategy incorporating particle swarm optimization with parameter adaptation for efficient global and local search balance.", "configspace": "", "generation": 71, "fitness": 0.08103189114582861, "feedback": "The algorithm HybridParticleSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.15.", "error": "", "parent_id": "34d78353-b29a-4b83-9f2c-7d99df812611", "metadata": {"aucs": [0.16678915915718517, 0.21944231289931304, 0.09375013875552718, 0.11580835149529778, 0.11187499289176539, 0.10641560885145174, 0.11553124813220128, 0.14807044100758504, 0.12002881549479316, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04009981224987169, 0.03884673775962022, 9.999999999998899e-05, 0.01563734733561395, 0.022483690385947552, 0.014773061704730583, 0.0361279228178335, 0.02960287800645578, 9.999999999998899e-05, 0.0021509183365399087, 9.999999999998899e-05, 0.0401196519978142, 0.02152171755776966, 0.0018843743306100613, 0.017722609306173975, 0.00816465868760008, 0.0008435425980256595, 0.0018131118776304467, 0.9762761107754712, 0.9821422351070184, 0.984940688474867, 0.9862474662616395, 0.0996462160152638, 0.07484978959682398, 0.09956228006225898, 0.9893060796179792, 0.05555187831342445, 0.02784580361489697, 9.999999999998899e-05, 0.053553037773628076, 9.999999999998899e-05, 0.09857042207312172, 0.0869957514074462, 0.015266914471426918, 0.030162974600901893, 9.999999999998899e-05, 0.12546965967672785, 0.06275667309810651, 0.06251868860033705, 0.05431052929287783, 0.009593312739686777, 0.04091997834887684, 0.05962589410601027, 0.0005108113150390503, 0.042413336302733806, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01729643626916244, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008977843911771033, 0.00787175005452534, 0.0013817131482943834, 9.999999999998899e-05, 0.09419940862567999, 9.999999999998899e-05, 9.999999999998899e-05, 0.08009389763032837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014870817507096734, 0.020142573425652177, 0.05245672335370177, 0.08996530371298173, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00835359001207292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21662936497230834, 0.24657703930478436, 0.18663490682507755, 0.1137527092717655, 0.1280870488611625, 0.09884106547397187, 0.16101062238173547, 0.1145899563216819, 0.14858864260310056, 0.01810279253845415, 0.002435713819636698, 0.014884850019392215, 0.0368652698358779, 0.014335312786622256, 0.02923913637994302, 9.999999999998899e-05, 0.0019414604034796445, 0.054244085922926955, 0.15129562434774912, 0.1316691710375506, 0.09844348719285789, 0.1343022319304853, 0.0845547648806807, 0.1115582006690411, 0.08476848062479037, 0.06493236501820976, 0.11537940194506502, 0.11567790334372408, 0.11238002077327214, 0.10917997035630689, 0.11179865633035546, 0.12235180161182158, 0.13452490968620645, 0.12168920907490433, 0.12444312154973247, 0.09311595229466352, 0.059490186705528636, 0.07444895706287247, 0.05310307251686863, 0.07856352156300594, 0.07158197311037384, 0.0791760093495355, 0.08501799560010337, 0.06782684825619323, 0.06970125123040838, 0.11720754354151974, 0.09868426266614982, 0.1290167353690047, 0.1543367551720789, 0.09332176207703147, 0.11480972236287268, 0.15060108194998356, 0.11645654038215325, 0.15682231208578468, 0.12881152199358237, 0.1532325101594153, 0.11828304517209376, 0.14971624829983377, 0.14900149590773404, 0.14848099821526206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10182206104553648, 0.06863037112872827, 0.1427490665303368, 0.08307571916985634, 0.16669844307739512, 0.15340345726496052, 0.10582089291692898, 0.086096084511052, 0.0744123784583558, 0.06645342961576062, 0.06510103132139433, 0.07406190837770832, 0.06097869783325227, 0.04178643769601609, 0.1315727323820589, 0.1556189692801625, 0.0544183132817041, 0.13775371188298646, 0.12374951044330096, 0.16302976919936263, 0.156019561681507, 0.14950245313508237, 0.14641823220314654, 0.16221931952322755, 0.14926867162057456, 0.12040508408358852, 0.15559465043851017, 0.05510772713748269, 0.03471179343926234, 0.0381961177670741, 0.027608679593809526, 0.03633883678015315, 0.019687335313835375, 0.018382388984732323, 0.023473726836264697, 0.015853629469955055]}, "mutation_prompt": null}
{"id": "1e8e4011-31e8-4a73-bb82-93082b90ca5d", "solution": "import numpy as np\n\nclass AdaptiveMutationOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        mutation_rate = 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                candidate_position = np.clip(swarm[i] + np.random.normal(0, mutation_rate, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n                        mutation_rate *= 0.99  # Adapt mutation rate based on performance\n        return best_position", "name": "AdaptiveMutationOptimizer", "description": "Introducing a novel adaptive mutation strategy based on function evaluations to dynamically adjust the exploration-exploitation balance for faster convergence.", "configspace": "", "generation": 72, "fitness": 0.16102071554719638, "feedback": "The algorithm AdaptiveMutationOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "34d78353-b29a-4b83-9f2c-7d99df812611", "metadata": {"aucs": [0.28360515673857967, 0.26773751913009247, 0.2743258791563252, 0.28816334949971845, 0.2939750642285429, 0.27777702788424363, 0.29756131088770954, 0.2586771267342569, 0.28688642510693385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06905352933711728, 0.07244154006155745, 0.06622930283062722, 0.06835067228772729, 0.07079139214635866, 0.08666458281459344, 0.0784609041370049, 0.06658460630247298, 0.06367346016097986, 0.06991627685463642, 0.06647523157434188, 0.0652221866875452, 0.071582286994187, 0.06898484643603353, 0.06200899277175265, 0.06621386941132423, 0.05595679214345406, 0.05438140522877333, 0.9440655937440774, 0.910719429002758, 0.9211677702275014, 0.8991881785109688, 0.9000072501002687, 0.9029128488944624, 0.9069527481560966, 0.8906855680516973, 0.9060496784554682, 0.158224190686294, 0.169782093359507, 0.1550747867100295, 0.1647997478519415, 0.16320281421681027, 0.2031217765564307, 0.16216894226525147, 0.15150710958151792, 0.18510056272981568, 0.21374207548516955, 0.18970827351708086, 0.19687814622280764, 0.2022287318040702, 0.19866017669015468, 0.2111447433311826, 0.20868631986869135, 0.19453491502957, 0.2537567298659146, 0.07127619489131776, 0.07279041737210157, 0.10546652599799855, 0.09170117012496326, 0.08493253958938862, 0.11651928057492555, 0.10039226674986257, 0.08868910110764139, 0.0904954594235936, 0.09518002767757261, 0.08191522672544527, 0.11173795719864266, 0.08985620284252183, 0.0887954109643635, 0.11121320773518839, 0.09297295740808909, 0.07664314062988653, 0.07347830394856136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11237769391934294, 0.08015400214523705, 0.04732247600429618, 0.03126374288933875, 0.06180621350694615, 0.029011864887031558, 0.09981698958412577, 0.06498326209475291, 0.03983176050155757, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02707718943157944, 0.03519650075657499, 0.02201847977765714, 0.03520685015480962, 0.048611999140563245, 0.04518928056045557, 0.03149310284102502, 0.03447264567316055, 0.02904502189559388, 0.2717459256632635, 0.2800051638259361, 0.2923520431895079, 0.2936703440095645, 0.2951709507278081, 0.30989567920962713, 0.2704252087729756, 0.2870408426436615, 0.2789235742506829, 0.07063428892923873, 0.0659554898237853, 0.07455068936876763, 0.06823840587344987, 0.07890794966557546, 0.07177907573279318, 0.08153630021380542, 0.07192186221439856, 0.0793620393850637, 0.1444237126863318, 0.14023826035905518, 0.1387412798669404, 0.13359053887466288, 0.13818344506924773, 0.15728415775797966, 0.13654677686399697, 0.13969981331456927, 0.1536375488208932, 0.20666246162287416, 0.208101528199109, 0.20781014096411754, 0.1962774923261189, 0.20635882455606191, 0.22198064109790472, 0.19402253506459222, 0.20706141594048988, 0.19842142879920377, 0.1528193545076052, 0.1460121789458131, 0.14825380362596352, 0.15501862395251864, 0.15625092078296943, 0.14555747177548295, 0.156076656075549, 0.14564401054284648, 0.12541737190208713, 0.18807143205414978, 0.1879148584082394, 0.21147059311378436, 0.1806227383845197, 0.1921506952607419, 0.20436598016188334, 0.17509577769643203, 0.2189805617996884, 0.16824991561986113, 0.16916918216693744, 0.16605256568919757, 0.166112066639992, 0.16978343741075863, 0.1704979960372528, 0.17132914786550701, 0.16425728606286705, 0.17073408886667585, 0.15920777130664787, 0.16894661528316612, 0.16508056343652733, 0.2671732019503543, 0.28375138835629077, 0.16984126739274108, 0.17549155667193916, 0.17133490097092874, 0.17089766082291702, 0.1465410819167009, 0.3194672643323361, 0.25311580033460723, 0.2620245455735143, 0.18395940877466666, 0.22687867607854673, 0.2572745157172778, 0.15019191834315915, 0.15512709000482916, 0.17679409326862294, 0.1878735140699067, 0.17433340476963644, 0.16872369084638428, 0.17115212809786184, 0.18026981152677835, 0.18036140145340518, 0.17156311953762382, 0.18643500847534544, 0.1731965894542593, 0.07615403847599644, 0.11467081609171981, 0.07598866078654809, 0.07626633503151115, 0.0638535069489784, 0.07866474890109243, 0.0760814176233966, 0.08483956963862493, 0.062474519707660714]}, "mutation_prompt": null}
{"id": "e06b0315-83c0-4f44-a5e3-aa240a9d9215", "solution": "import numpy as np\n\nclass AdaptiveMutationOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        mutation_rate = 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                candidate_position = np.clip(swarm[i] + np.random.normal(0, mutation_rate, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n                        mutation_rate *= 0.99  # Adapt mutation rate based on performance\n        return best_position", "name": "AdaptiveMutationOptimizer", "description": "Introducing a novel adaptive mutation strategy based on function evaluations to dynamically adjust the exploration-exploitation balance for faster convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1e8e4011-31e8-4a73-bb82-93082b90ca5d", "metadata": {"aucs": [0.28360515673857967, 0.26773751913009247, 0.2743258791563252, 0.28816334949971845, 0.2939750642285429, 0.27777702788424363, 0.29756131088770954, 0.2586771267342569, 0.28688642510693385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06905352933711728, 0.07244154006155745, 0.06622930283062722, 0.06835067228772729, 0.07079139214635866, 0.08666458281459344, 0.0784609041370049, 0.06658460630247298, 0.06367346016097986, 0.06991627685463642, 0.06647523157434188, 0.0652221866875452, 0.071582286994187, 0.06898484643603353, 0.06200899277175265, 0.06621386941132423, 0.05595679214345406, 0.05438140522877333, 0.9440655937440774, 0.910719429002758, 0.9211677702275014, 0.8991881785109688, 0.9000072501002687, 0.9029128488944624, 0.9069527481560966, 0.8906855680516973, 0.9060496784554682, 0.158224190686294, 0.169782093359507, 0.1550747867100295, 0.1647997478519415, 0.16320281421681027, 0.2031217765564307, 0.16216894226525147, 0.15150710958151792, 0.18510056272981568, 0.21374207548516955, 0.18970827351708086, 0.19687814622280764, 0.2022287318040702, 0.19866017669015468, 0.2111447433311826, 0.20868631986869135, 0.19453491502957, 0.2537567298659146, 0.07127619489131776, 0.07279041737210157, 0.10546652599799855, 0.09170117012496326, 0.08493253958938862, 0.11651928057492555, 0.10039226674986257, 0.08868910110764139, 0.0904954594235936, 0.09518002767757261, 0.08191522672544527, 0.11173795719864266, 0.08985620284252183, 0.0887954109643635, 0.11121320773518839, 0.09297295740808909, 0.07664314062988653, 0.07347830394856136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11237769391934294, 0.08015400214523705, 0.04732247600429618, 0.03126374288933875, 0.06180621350694615, 0.029011864887031558, 0.09981698958412577, 0.06498326209475291, 0.03983176050155757, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02707718943157944, 0.03519650075657499, 0.02201847977765714, 0.03520685015480962, 0.048611999140563245, 0.04518928056045557, 0.03149310284102502, 0.03447264567316055, 0.02904502189559388, 0.2717459256632635, 0.2800051638259361, 0.2923520431895079, 0.2936703440095645, 0.2951709507278081, 0.30989567920962713, 0.2704252087729756, 0.2870408426436615, 0.2789235742506829, 0.07063428892923873, 0.0659554898237853, 0.07455068936876763, 0.06823840587344987, 0.07890794966557546, 0.07177907573279318, 0.08153630021380542, 0.07192186221439856, 0.0793620393850637, 0.1444237126863318, 0.14023826035905518, 0.1387412798669404, 0.13359053887466288, 0.13818344506924773, 0.15728415775797966, 0.13654677686399697, 0.13969981331456927, 0.1536375488208932, 0.20666246162287416, 0.208101528199109, 0.20781014096411754, 0.1962774923261189, 0.20635882455606191, 0.22198064109790472, 0.19402253506459222, 0.20706141594048988, 0.19842142879920377, 0.1528193545076052, 0.1460121789458131, 0.14825380362596352, 0.15501862395251864, 0.15625092078296943, 0.14555747177548295, 0.156076656075549, 0.14564401054284648, 0.12541737190208713, 0.18807143205414978, 0.1879148584082394, 0.21147059311378436, 0.1806227383845197, 0.1921506952607419, 0.20436598016188334, 0.17509577769643203, 0.2189805617996884, 0.16824991561986113, 0.16916918216693744, 0.16605256568919757, 0.166112066639992, 0.16978343741075863, 0.1704979960372528, 0.17132914786550701, 0.16425728606286705, 0.17073408886667585, 0.15920777130664787, 0.16894661528316612, 0.16508056343652733, 0.2671732019503543, 0.28375138835629077, 0.16984126739274108, 0.17549155667193916, 0.17133490097092874, 0.17089766082291702, 0.1465410819167009, 0.3194672643323361, 0.25311580033460723, 0.2620245455735143, 0.18395940877466666, 0.22687867607854673, 0.2572745157172778, 0.15019191834315915, 0.15512709000482916, 0.17679409326862294, 0.1878735140699067, 0.17433340476963644, 0.16872369084638428, 0.17115212809786184, 0.18026981152677835, 0.18036140145340518, 0.17156311953762382, 0.18643500847534544, 0.1731965894542593, 0.07615403847599644, 0.11467081609171981, 0.07598866078654809, 0.07626633503151115, 0.0638535069489784, 0.07866474890109243, 0.0760814176233966, 0.08483956963862493, 0.062474519707660714]}, "mutation_prompt": null}
{"id": "fe27faa0-f6db-40ad-96c1-d66f51985d51", "solution": "import numpy as np\n\nclass MultiSwarmOptimizer:\n    def __init__(self, budget, dim, num_swarm=5):\n        self.budget = budget\n        self.dim = dim\n        self.num_swarm = num_swarm\n\n    def __call__(self, func):\n        swarms = [np.random.uniform(-5.0, 5.0, (self.num_swarm, self.dim)) for _ in range(self.num_swarm)]\n        best_positions = [swarm[np.argmin([func(p) for p in swarm])] for swarm in swarms]\n        mutation_rates = np.ones(self.num_swarm)\n\n        for _ in range(self.budget):\n            for j in range(self.num_swarm):\n                for i in range(self.num_swarm):\n                    if i != j:\n                        candidate_position = np.clip(swarms[j][i] + np.random.normal(0, mutation_rates[j], self.dim), -5.0, 5.0)\n                        if func(candidate_position) < func(swarms[j][i]):\n                            swarms[j][i] = candidate_position\n                            if func(candidate_position) < func(best_positions[j]):\n                                best_positions[j] = candidate_position\n                                mutation_rates[j] *= 0.99  # Adapt mutation rate based on performance\n        return best_positions[np.argmin([func(p) for p in best_positions])]", "name": "MultiSwarmOptimizer", "description": "Employ a multi-swarm approach with dynamically adjusting mutation rates to enhance exploration and exploitation, leading to faster convergence.", "configspace": "", "generation": 74, "fitness": 0.14735567934309676, "feedback": "The algorithm MultiSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.15.", "error": "", "parent_id": "1e8e4011-31e8-4a73-bb82-93082b90ca5d", "metadata": {"aucs": [0.25157628212401273, 0.275126883335978, 0.261996006423623, 0.2743573559648629, 0.24534350184160614, 0.2683444417868316, 0.2570563473854762, 0.2592201572462256, 0.28027564507774927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07141322898144431, 0.06807363634074592, 0.06217351320040365, 0.08736278406378317, 0.07714467555435423, 0.06334703208559389, 0.07935880400517437, 0.05469783972549469, 0.07336489547473757, 0.044331256192958746, 0.06802388541630011, 0.052415424968879076, 0.05775920488441566, 0.05878213091139517, 0.051138550853748854, 0.06038282094131098, 0.06724926707333778, 0.06613308453254407, 0.755203741461981, 0.7526411552647284, 0.7781641132688255, 0.7266708638100169, 0.906402655960409, 0.7517195082117085, 0.7787123214092018, 0.6307575025741857, 0.8353935624675716, 0.13433181808101458, 0.14380630870904898, 0.133510160241202, 0.14042952423991484, 0.12435880273858457, 0.13988781110277793, 0.12445731203484667, 0.1354092726006405, 0.1335642343329222, 0.16345806459210066, 0.18507386669868842, 0.16604139740874302, 0.18800613540315558, 0.19316751746649896, 0.16405651218249273, 0.18623937815548774, 0.1791906419207806, 0.1914226013895034, 0.09042086276167771, 0.06546572292307595, 0.08856604619731356, 0.07169928005892601, 0.056249688413822496, 0.0951690320013282, 0.06245956025414068, 0.05640937730696549, 0.0661646583683001, 0.07018788369310258, 0.08201029034891638, 0.09396393255207636, 0.07881071014999674, 0.0690483798179059, 0.08293147169962756, 0.07636616276740082, 0.0624282099626402, 0.04765350542176583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06410181273576832, 0.041177898240102095, 0.0612138566863647, 0.04615187994888292, 0.04658341635209584, 0.0949460098715772, 0.06195023633832386, 0.11084138735894722, 0.05819139848401955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022371950089024706, 0.015632179893611875, 0.01944034472627376, 0.027475635989482328, 0.018254279334428802, 0.027247182753237786, 0.013941635004543262, 0.026458165166436398, 0.039014343497708825, 0.2458239048495976, 0.2551867157027383, 0.24959161345383252, 0.24953761955488807, 0.2542545003435607, 0.2550365253086173, 0.2594683904269476, 0.2620775298476058, 0.2792995349515697, 0.059116373973688185, 0.05305643829447271, 0.06635962874352719, 0.06441152954452412, 0.06136173751063867, 0.0722850915019786, 0.07232996175844442, 0.06675529051306972, 0.08416174718752989, 0.11461636410791654, 0.1395982658633924, 0.12379826943219363, 0.14188405959100858, 0.15109941672661298, 0.16717404315748408, 0.1543932885359034, 0.14062848808730755, 0.1554178878899637, 0.19516079541889852, 0.1856530245926411, 0.18984711082255168, 0.19826902839961336, 0.19828308277799422, 0.19452864462065078, 0.18017686415627232, 0.20115427571323508, 0.19308461283350375, 0.12907047201702393, 0.13174078729540684, 0.12897709915100808, 0.15467903974891595, 0.13416360775294256, 0.13593380228479623, 0.1346241630851024, 0.1421520628147599, 0.12313214219413149, 0.1893538460862082, 0.18428224855831699, 0.19610960438246894, 0.17017489853830847, 0.17793388713336244, 0.17079018122005218, 0.1798904537097027, 0.1886938984872807, 0.18691515949166515, 0.16626635669727907, 0.16843287199859625, 0.16165041041740913, 0.16154851000620074, 0.16659971122866024, 0.1700455715325947, 0.17443692579874348, 0.1719347319545288, 0.16120656906554265, 0.17610692207193102, 0.16869149677496154, 0.20935264509313178, 0.2943507567903325, 0.2787649585952833, 0.2796155386354766, 0.1668764984890928, 0.2731799479657394, 0.22066768628339584, 0.24377569656543518, 0.27038232859580635, 0.15884271787652648, 0.21217721686140412, 0.16624759941747946, 0.27420098139142224, 0.15676224334669875, 0.21574286267589726, 0.17506624656311598, 0.17687661910519292, 0.17831179353969218, 0.16369880906354006, 0.17971010348764827, 0.1734616460163243, 0.1772005755430235, 0.17669934843891932, 0.17491048398282005, 0.18781413001116654, 0.0701011030501244, 0.06901281062693743, 0.07968106957233889, 0.055766931359213956, 0.07326574900149985, 0.06389986824469729, 0.06006522371624701, 0.0651964724356745, 0.07450516078549663]}, "mutation_prompt": null}
{"id": "06c44d2e-7262-447c-8905-90605977fa91", "solution": "import numpy as np\n\nclass DynamicMutationOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        mutation_rates = np.ones(self.dim)\n\n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                candidate_position = np.clip(swarm[i] + np.random.normal(0, mutation_rates, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n                        mutation_rates *= 0.99  # Adapt mutation rates based on performance\n        return best_position", "name": "DynamicMutationOptimizer", "description": "Enhancing exploration by introducing a dynamic mutation control mechanism that adjusts mutation rates individually for each dimension.", "configspace": "", "generation": 75, "fitness": 0.16102071554719638, "feedback": "The algorithm DynamicMutationOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "1e8e4011-31e8-4a73-bb82-93082b90ca5d", "metadata": {"aucs": [0.28360515673857967, 0.26773751913009247, 0.2743258791563252, 0.28816334949971845, 0.2939750642285429, 0.27777702788424363, 0.29756131088770954, 0.2586771267342569, 0.28688642510693385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06905352933711728, 0.07244154006155745, 0.06622930283062722, 0.06835067228772729, 0.07079139214635866, 0.08666458281459344, 0.0784609041370049, 0.06658460630247298, 0.06367346016097986, 0.06991627685463642, 0.06647523157434188, 0.0652221866875452, 0.071582286994187, 0.06898484643603353, 0.06200899277175265, 0.06621386941132423, 0.05595679214345406, 0.05438140522877333, 0.9440655937440774, 0.910719429002758, 0.9211677702275014, 0.8991881785109688, 0.9000072501002687, 0.9029128488944624, 0.9069527481560966, 0.8906855680516973, 0.9060496784554682, 0.158224190686294, 0.169782093359507, 0.1550747867100295, 0.1647997478519415, 0.16320281421681027, 0.2031217765564307, 0.16216894226525147, 0.15150710958151792, 0.18510056272981568, 0.21374207548516955, 0.18970827351708086, 0.19687814622280764, 0.2022287318040702, 0.19866017669015468, 0.2111447433311826, 0.20868631986869135, 0.19453491502957, 0.2537567298659146, 0.07127619489131776, 0.07279041737210157, 0.10546652599799855, 0.09170117012496326, 0.08493253958938862, 0.11651928057492555, 0.10039226674986257, 0.08868910110764139, 0.0904954594235936, 0.09518002767757261, 0.08191522672544527, 0.11173795719864266, 0.08985620284252183, 0.0887954109643635, 0.11121320773518839, 0.09297295740808909, 0.07664314062988653, 0.07347830394856136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11237769391934294, 0.08015400214523705, 0.04732247600429618, 0.03126374288933875, 0.06180621350694615, 0.029011864887031558, 0.09981698958412577, 0.06498326209475291, 0.03983176050155757, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02707718943157944, 0.03519650075657499, 0.02201847977765714, 0.03520685015480962, 0.048611999140563245, 0.04518928056045557, 0.03149310284102502, 0.03447264567316055, 0.02904502189559388, 0.2717459256632635, 0.2800051638259361, 0.2923520431895079, 0.2936703440095645, 0.2951709507278081, 0.30989567920962713, 0.2704252087729756, 0.2870408426436615, 0.2789235742506829, 0.07063428892923873, 0.0659554898237853, 0.07455068936876763, 0.06823840587344987, 0.07890794966557546, 0.07177907573279318, 0.08153630021380542, 0.07192186221439856, 0.0793620393850637, 0.1444237126863318, 0.14023826035905518, 0.1387412798669404, 0.13359053887466288, 0.13818344506924773, 0.15728415775797966, 0.13654677686399697, 0.13969981331456927, 0.1536375488208932, 0.20666246162287416, 0.208101528199109, 0.20781014096411754, 0.1962774923261189, 0.20635882455606191, 0.22198064109790472, 0.19402253506459222, 0.20706141594048988, 0.19842142879920377, 0.1528193545076052, 0.1460121789458131, 0.14825380362596352, 0.15501862395251864, 0.15625092078296943, 0.14555747177548295, 0.156076656075549, 0.14564401054284648, 0.12541737190208713, 0.18807143205414978, 0.1879148584082394, 0.21147059311378436, 0.1806227383845197, 0.1921506952607419, 0.20436598016188334, 0.17509577769643203, 0.2189805617996884, 0.16824991561986113, 0.16916918216693744, 0.16605256568919757, 0.166112066639992, 0.16978343741075863, 0.1704979960372528, 0.17132914786550701, 0.16425728606286705, 0.17073408886667585, 0.15920777130664787, 0.16894661528316612, 0.16508056343652733, 0.2671732019503543, 0.28375138835629077, 0.16984126739274108, 0.17549155667193916, 0.17133490097092874, 0.17089766082291702, 0.1465410819167009, 0.3194672643323361, 0.25311580033460723, 0.2620245455735143, 0.18395940877466666, 0.22687867607854673, 0.2572745157172778, 0.15019191834315915, 0.15512709000482916, 0.17679409326862294, 0.1878735140699067, 0.17433340476963644, 0.16872369084638428, 0.17115212809786184, 0.18026981152677835, 0.18036140145340518, 0.17156311953762382, 0.18643500847534544, 0.1731965894542593, 0.07615403847599644, 0.11467081609171981, 0.07598866078654809, 0.07626633503151115, 0.0638535069489784, 0.07866474890109243, 0.0760814176233966, 0.08483956963862493, 0.062474519707660714]}, "mutation_prompt": null}
{"id": "5e1caaef-40c8-4aab-b6b9-262e688f0cf9", "solution": "import numpy as np\n\nclass DynamicPopulationOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        mutation_rate = 1.0\n        \n        for _ in range(self.budget):\n            for i in range(len(swarm)):\n                candidate_position = np.clip(swarm[i] + np.random.normal(0, mutation_rate, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n                        mutation_rate *= 0.99  # Adapt mutation rate based on performance\n            \n            if np.random.rand() < 0.1:  # Dynamic Population Resizing\n                if np.random.rand() < 0.5 and len(swarm) < 20:\n                    swarm = np.vstack([swarm, np.random.uniform(-5.0, 5.0, (1, self.dim))])\n                elif len(swarm) > 1:\n                    remove_idx = np.random.choice(len(swarm))\n                    swarm = np.delete(swarm, remove_idx, axis=0)\n        \n        return best_position", "name": "DynamicPopulationOptimizer", "description": "Employ a dynamic population resizing strategy to adjust the number of neighbors based on their performance and cluster placement for improved exploration and exploitation balance.", "configspace": "", "generation": 76, "fitness": 0.15470521997119327, "feedback": "The algorithm DynamicPopulationOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "1e8e4011-31e8-4a73-bb82-93082b90ca5d", "metadata": {"aucs": [0.2781307159198356, 0.248311429408977, 0.24518318197932665, 0.26603669120090756, 0.26738420792756556, 0.29591236480184113, 0.2792377117322403, 0.2593633095289687, 0.25873525762692096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06479694473043385, 0.06235834110951888, 0.06296313106697449, 0.07291956072771522, 0.07413888692933757, 0.07333812967221398, 0.09479125957375345, 0.07148209320665433, 0.07717477887457058, 0.056609778303723934, 0.0545420466026304, 0.0659041035805008, 0.06508442121613933, 0.06637656472997278, 0.056405413344395305, 0.06280063507086109, 0.05753060012511291, 0.054055568507453966, 0.9015827032868596, 0.9115651506386834, 0.799907703156292, 0.8642287345037569, 0.8367096030206795, 0.9219827876420864, 0.8575045225472793, 0.941377234176977, 0.9371093310913852, 0.14995326749487536, 0.1369778554727833, 0.12975180097542982, 0.1316340255262305, 0.18493783841110467, 0.1658342358956002, 0.14615003817931593, 0.12636930343689923, 0.13427045438310248, 0.17125249588038938, 0.2006530764194301, 0.17280194393064796, 0.17688437844108285, 0.18062894062679768, 0.18675609531193438, 0.20278167239478895, 0.22921785190055477, 0.17603811689805648, 0.0780747596988054, 0.06675134547636663, 0.09390617739291462, 0.0493838688117465, 0.06642815256334689, 0.06949123733834384, 0.07757966355636103, 0.0500470518996915, 0.06646582554514913, 0.06155421312485054, 0.07442057193807128, 0.07335355771064878, 0.09647287151960193, 0.07089955740219944, 0.08818572781741263, 0.06267066664837495, 0.08816950050357064, 0.10195399159738228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07615391519939807, 0.08085762461157575, 0.038883154953208376, 0.044651856864828865, 0.0467721375355844, 0.04468674251515603, 0.05256352576082313, 0.05719075898393944, 0.06218536034238309, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03461045546981656, 0.022531939177864335, 0.011774407789990393, 0.02455151825004609, 0.01243811326278843, 0.018258583630811343, 0.035089997029342124, 0.013486537502207296, 0.02183900826253049, 0.2950548888913752, 0.26310724976699384, 0.26054171865073217, 0.2762779572390246, 0.27536677205941273, 0.3106275395413569, 0.2610779887911031, 0.2926467273186608, 0.25759481096020087, 0.05370904093607476, 0.055790444877913625, 0.06830553360466296, 0.0659170334931205, 0.08561994908842174, 0.07601830879720528, 0.08125463489641238, 0.06319189434162831, 0.062465646562667954, 0.11802613426486208, 0.14728718211170144, 0.14829385323829924, 0.14349784235577134, 0.13771644030052432, 0.15550001697896354, 0.13469462751971917, 0.14081796032756466, 0.1457571177198328, 0.19028246143355687, 0.19646229217699396, 0.2023349620932322, 0.19225359364984818, 0.22417675219265643, 0.19425744777168574, 0.20321445964780982, 0.1754317254628358, 0.18880044108327998, 0.12959014565904747, 0.13260331141206205, 0.13355576280249948, 0.14084401265011215, 0.13627416113469115, 0.133605988185032, 0.13584390386297907, 0.14753988744865454, 0.13539770615299562, 0.1708735626123392, 0.1909762952322771, 0.17543725276404676, 0.16247601144492674, 0.18180183436244046, 0.22423231166404978, 0.18523810431989285, 0.17703844963626492, 0.16995676506258894, 0.17207029781705951, 0.18397357952631221, 0.17443778998904724, 0.16631365826384936, 0.16588100186695354, 0.1719627775606346, 0.18526881302140275, 0.16383822834645156, 0.17194562999371465, 0.24455621399595706, 0.24819175096909207, 0.17621883717209041, 0.24516471564187714, 0.20749061139272362, 0.25463217913377856, 0.28766111272577977, 0.29743072399310644, 0.23804975370967985, 0.28007577070865075, 0.1977409218493602, 0.21325334450979916, 0.22628120597303225, 0.16414690004584886, 0.16761036102722504, 0.18012458336638826, 0.15245977644603936, 0.20367101521123787, 0.17620166097386514, 0.18534119700907947, 0.21568753316389377, 0.18994210539774314, 0.17272021756806266, 0.18002157231883464, 0.1664024021531615, 0.18654306174498292, 0.17041892954380544, 0.06317451118571038, 0.0705090388160432, 0.06871152608112074, 0.07088868453275832, 0.07207569211695553, 0.06810341935771524, 0.07429894786088931, 0.06672851129470547, 0.06798536501961572]}, "mutation_prompt": null}
{"id": "c4e76818-5edf-47fa-af8e-e5dfa390710d", "solution": "import numpy as np\n\nclass AdaptiveMutationOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        mutation_rate = 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                candidate_position = np.clip(swarm[i] + np.random.normal(0, mutation_rate, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n                        mutation_rate *= 0.99  # Adapt mutation rate based on performance\n        return best_position", "name": "AdaptiveMutationOptimizer", "description": "Introducing a novel adaptive mutation strategy based on function evaluations to dynamically adjust the exploration-exploitation balance for faster convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1e8e4011-31e8-4a73-bb82-93082b90ca5d", "metadata": {"aucs": [0.28360515673857967, 0.26773751913009247, 0.2743258791563252, 0.28816334949971845, 0.2939750642285429, 0.27777702788424363, 0.29756131088770954, 0.2586771267342569, 0.28688642510693385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06905352933711728, 0.07244154006155745, 0.06622930283062722, 0.06835067228772729, 0.07079139214635866, 0.08666458281459344, 0.0784609041370049, 0.06658460630247298, 0.06367346016097986, 0.06991627685463642, 0.06647523157434188, 0.0652221866875452, 0.071582286994187, 0.06898484643603353, 0.06200899277175265, 0.06621386941132423, 0.05595679214345406, 0.05438140522877333, 0.9440655937440774, 0.910719429002758, 0.9211677702275014, 0.8991881785109688, 0.9000072501002687, 0.9029128488944624, 0.9069527481560966, 0.8906855680516973, 0.9060496784554682, 0.158224190686294, 0.169782093359507, 0.1550747867100295, 0.1647997478519415, 0.16320281421681027, 0.2031217765564307, 0.16216894226525147, 0.15150710958151792, 0.18510056272981568, 0.21374207548516955, 0.18970827351708086, 0.19687814622280764, 0.2022287318040702, 0.19866017669015468, 0.2111447433311826, 0.20868631986869135, 0.19453491502957, 0.2537567298659146, 0.07127619489131776, 0.07279041737210157, 0.10546652599799855, 0.09170117012496326, 0.08493253958938862, 0.11651928057492555, 0.10039226674986257, 0.08868910110764139, 0.0904954594235936, 0.09518002767757261, 0.08191522672544527, 0.11173795719864266, 0.08985620284252183, 0.0887954109643635, 0.11121320773518839, 0.09297295740808909, 0.07664314062988653, 0.07347830394856136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11237769391934294, 0.08015400214523705, 0.04732247600429618, 0.03126374288933875, 0.06180621350694615, 0.029011864887031558, 0.09981698958412577, 0.06498326209475291, 0.03983176050155757, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02707718943157944, 0.03519650075657499, 0.02201847977765714, 0.03520685015480962, 0.048611999140563245, 0.04518928056045557, 0.03149310284102502, 0.03447264567316055, 0.02904502189559388, 0.2717459256632635, 0.2800051638259361, 0.2923520431895079, 0.2936703440095645, 0.2951709507278081, 0.30989567920962713, 0.2704252087729756, 0.2870408426436615, 0.2789235742506829, 0.07063428892923873, 0.0659554898237853, 0.07455068936876763, 0.06823840587344987, 0.07890794966557546, 0.07177907573279318, 0.08153630021380542, 0.07192186221439856, 0.0793620393850637, 0.1444237126863318, 0.14023826035905518, 0.1387412798669404, 0.13359053887466288, 0.13818344506924773, 0.15728415775797966, 0.13654677686399697, 0.13969981331456927, 0.1536375488208932, 0.20666246162287416, 0.208101528199109, 0.20781014096411754, 0.1962774923261189, 0.20635882455606191, 0.22198064109790472, 0.19402253506459222, 0.20706141594048988, 0.19842142879920377, 0.1528193545076052, 0.1460121789458131, 0.14825380362596352, 0.15501862395251864, 0.15625092078296943, 0.14555747177548295, 0.156076656075549, 0.14564401054284648, 0.12541737190208713, 0.18807143205414978, 0.1879148584082394, 0.21147059311378436, 0.1806227383845197, 0.1921506952607419, 0.20436598016188334, 0.17509577769643203, 0.2189805617996884, 0.16824991561986113, 0.16916918216693744, 0.16605256568919757, 0.166112066639992, 0.16978343741075863, 0.1704979960372528, 0.17132914786550701, 0.16425728606286705, 0.17073408886667585, 0.15920777130664787, 0.16894661528316612, 0.16508056343652733, 0.2671732019503543, 0.28375138835629077, 0.16984126739274108, 0.17549155667193916, 0.17133490097092874, 0.17089766082291702, 0.1465410819167009, 0.3194672643323361, 0.25311580033460723, 0.2620245455735143, 0.18395940877466666, 0.22687867607854673, 0.2572745157172778, 0.15019191834315915, 0.15512709000482916, 0.17679409326862294, 0.1878735140699067, 0.17433340476963644, 0.16872369084638428, 0.17115212809786184, 0.18026981152677835, 0.18036140145340518, 0.17156311953762382, 0.18643500847534544, 0.1731965894542593, 0.07615403847599644, 0.11467081609171981, 0.07598866078654809, 0.07626633503151115, 0.0638535069489784, 0.07866474890109243, 0.0760814176233966, 0.08483956963862493, 0.062474519707660714]}, "mutation_prompt": null}
{"id": "925fdcd4-77e2-4e50-81ee-efedf46b44da", "solution": "import numpy as np\n\nclass AdaptiveMutationOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        mutation_rate = 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                candidate_position = np.clip(swarm[i] + np.random.normal(0, mutation_rate, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n                        mutation_rate *= 0.99  # Adapt mutation rate based on performance\n        return best_position", "name": "AdaptiveMutationOptimizer", "description": "Introducing a novel adaptive mutation strategy based on function evaluations to dynamically adjust the exploration-exploitation balance for faster convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1e8e4011-31e8-4a73-bb82-93082b90ca5d", "metadata": {"aucs": [0.28360515673857967, 0.26773751913009247, 0.2743258791563252, 0.28816334949971845, 0.2939750642285429, 0.27777702788424363, 0.29756131088770954, 0.2586771267342569, 0.28688642510693385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06905352933711728, 0.07244154006155745, 0.06622930283062722, 0.06835067228772729, 0.07079139214635866, 0.08666458281459344, 0.0784609041370049, 0.06658460630247298, 0.06367346016097986, 0.06991627685463642, 0.06647523157434188, 0.0652221866875452, 0.071582286994187, 0.06898484643603353, 0.06200899277175265, 0.06621386941132423, 0.05595679214345406, 0.05438140522877333, 0.9440655937440774, 0.910719429002758, 0.9211677702275014, 0.8991881785109688, 0.9000072501002687, 0.9029128488944624, 0.9069527481560966, 0.8906855680516973, 0.9060496784554682, 0.158224190686294, 0.169782093359507, 0.1550747867100295, 0.1647997478519415, 0.16320281421681027, 0.2031217765564307, 0.16216894226525147, 0.15150710958151792, 0.18510056272981568, 0.21374207548516955, 0.18970827351708086, 0.19687814622280764, 0.2022287318040702, 0.19866017669015468, 0.2111447433311826, 0.20868631986869135, 0.19453491502957, 0.2537567298659146, 0.07127619489131776, 0.07279041737210157, 0.10546652599799855, 0.09170117012496326, 0.08493253958938862, 0.11651928057492555, 0.10039226674986257, 0.08868910110764139, 0.0904954594235936, 0.09518002767757261, 0.08191522672544527, 0.11173795719864266, 0.08985620284252183, 0.0887954109643635, 0.11121320773518839, 0.09297295740808909, 0.07664314062988653, 0.07347830394856136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11237769391934294, 0.08015400214523705, 0.04732247600429618, 0.03126374288933875, 0.06180621350694615, 0.029011864887031558, 0.09981698958412577, 0.06498326209475291, 0.03983176050155757, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02707718943157944, 0.03519650075657499, 0.02201847977765714, 0.03520685015480962, 0.048611999140563245, 0.04518928056045557, 0.03149310284102502, 0.03447264567316055, 0.02904502189559388, 0.2717459256632635, 0.2800051638259361, 0.2923520431895079, 0.2936703440095645, 0.2951709507278081, 0.30989567920962713, 0.2704252087729756, 0.2870408426436615, 0.2789235742506829, 0.07063428892923873, 0.0659554898237853, 0.07455068936876763, 0.06823840587344987, 0.07890794966557546, 0.07177907573279318, 0.08153630021380542, 0.07192186221439856, 0.0793620393850637, 0.1444237126863318, 0.14023826035905518, 0.1387412798669404, 0.13359053887466288, 0.13818344506924773, 0.15728415775797966, 0.13654677686399697, 0.13969981331456927, 0.1536375488208932, 0.20666246162287416, 0.208101528199109, 0.20781014096411754, 0.1962774923261189, 0.20635882455606191, 0.22198064109790472, 0.19402253506459222, 0.20706141594048988, 0.19842142879920377, 0.1528193545076052, 0.1460121789458131, 0.14825380362596352, 0.15501862395251864, 0.15625092078296943, 0.14555747177548295, 0.156076656075549, 0.14564401054284648, 0.12541737190208713, 0.18807143205414978, 0.1879148584082394, 0.21147059311378436, 0.1806227383845197, 0.1921506952607419, 0.20436598016188334, 0.17509577769643203, 0.2189805617996884, 0.16824991561986113, 0.16916918216693744, 0.16605256568919757, 0.166112066639992, 0.16978343741075863, 0.1704979960372528, 0.17132914786550701, 0.16425728606286705, 0.17073408886667585, 0.15920777130664787, 0.16894661528316612, 0.16508056343652733, 0.2671732019503543, 0.28375138835629077, 0.16984126739274108, 0.17549155667193916, 0.17133490097092874, 0.17089766082291702, 0.1465410819167009, 0.3194672643323361, 0.25311580033460723, 0.2620245455735143, 0.18395940877466666, 0.22687867607854673, 0.2572745157172778, 0.15019191834315915, 0.15512709000482916, 0.17679409326862294, 0.1878735140699067, 0.17433340476963644, 0.16872369084638428, 0.17115212809786184, 0.18026981152677835, 0.18036140145340518, 0.17156311953762382, 0.18643500847534544, 0.1731965894542593, 0.07615403847599644, 0.11467081609171981, 0.07598866078654809, 0.07626633503151115, 0.0638535069489784, 0.07866474890109243, 0.0760814176233966, 0.08483956963862493, 0.062474519707660714]}, "mutation_prompt": null}
{"id": "9d3ef9cd-f371-4665-8e48-3b2f4badfc92", "solution": "import numpy as np\n\nclass AdaptiveMutationOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        mutation_rate = 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                candidate_position = np.clip(swarm[i] + np.random.normal(0, mutation_rate, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n                        mutation_rate *= 0.99  # Adapt mutation rate based on performance\n        return best_position", "name": "AdaptiveMutationOptimizer", "description": "Introducing a novel adaptive mutation strategy based on function evaluations to dynamically adjust the exploration-exploitation balance for faster convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1e8e4011-31e8-4a73-bb82-93082b90ca5d", "metadata": {"aucs": [0.28360515673857967, 0.26773751913009247, 0.2743258791563252, 0.28816334949971845, 0.2939750642285429, 0.27777702788424363, 0.29756131088770954, 0.2586771267342569, 0.28688642510693385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06905352933711728, 0.07244154006155745, 0.06622930283062722, 0.06835067228772729, 0.07079139214635866, 0.08666458281459344, 0.0784609041370049, 0.06658460630247298, 0.06367346016097986, 0.06991627685463642, 0.06647523157434188, 0.0652221866875452, 0.071582286994187, 0.06898484643603353, 0.06200899277175265, 0.06621386941132423, 0.05595679214345406, 0.05438140522877333, 0.9440655937440774, 0.910719429002758, 0.9211677702275014, 0.8991881785109688, 0.9000072501002687, 0.9029128488944624, 0.9069527481560966, 0.8906855680516973, 0.9060496784554682, 0.158224190686294, 0.169782093359507, 0.1550747867100295, 0.1647997478519415, 0.16320281421681027, 0.2031217765564307, 0.16216894226525147, 0.15150710958151792, 0.18510056272981568, 0.21374207548516955, 0.18970827351708086, 0.19687814622280764, 0.2022287318040702, 0.19866017669015468, 0.2111447433311826, 0.20868631986869135, 0.19453491502957, 0.2537567298659146, 0.07127619489131776, 0.07279041737210157, 0.10546652599799855, 0.09170117012496326, 0.08493253958938862, 0.11651928057492555, 0.10039226674986257, 0.08868910110764139, 0.0904954594235936, 0.09518002767757261, 0.08191522672544527, 0.11173795719864266, 0.08985620284252183, 0.0887954109643635, 0.11121320773518839, 0.09297295740808909, 0.07664314062988653, 0.07347830394856136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11237769391934294, 0.08015400214523705, 0.04732247600429618, 0.03126374288933875, 0.06180621350694615, 0.029011864887031558, 0.09981698958412577, 0.06498326209475291, 0.03983176050155757, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02707718943157944, 0.03519650075657499, 0.02201847977765714, 0.03520685015480962, 0.048611999140563245, 0.04518928056045557, 0.03149310284102502, 0.03447264567316055, 0.02904502189559388, 0.2717459256632635, 0.2800051638259361, 0.2923520431895079, 0.2936703440095645, 0.2951709507278081, 0.30989567920962713, 0.2704252087729756, 0.2870408426436615, 0.2789235742506829, 0.07063428892923873, 0.0659554898237853, 0.07455068936876763, 0.06823840587344987, 0.07890794966557546, 0.07177907573279318, 0.08153630021380542, 0.07192186221439856, 0.0793620393850637, 0.1444237126863318, 0.14023826035905518, 0.1387412798669404, 0.13359053887466288, 0.13818344506924773, 0.15728415775797966, 0.13654677686399697, 0.13969981331456927, 0.1536375488208932, 0.20666246162287416, 0.208101528199109, 0.20781014096411754, 0.1962774923261189, 0.20635882455606191, 0.22198064109790472, 0.19402253506459222, 0.20706141594048988, 0.19842142879920377, 0.1528193545076052, 0.1460121789458131, 0.14825380362596352, 0.15501862395251864, 0.15625092078296943, 0.14555747177548295, 0.156076656075549, 0.14564401054284648, 0.12541737190208713, 0.18807143205414978, 0.1879148584082394, 0.21147059311378436, 0.1806227383845197, 0.1921506952607419, 0.20436598016188334, 0.17509577769643203, 0.2189805617996884, 0.16824991561986113, 0.16916918216693744, 0.16605256568919757, 0.166112066639992, 0.16978343741075863, 0.1704979960372528, 0.17132914786550701, 0.16425728606286705, 0.17073408886667585, 0.15920777130664787, 0.16894661528316612, 0.16508056343652733, 0.2671732019503543, 0.28375138835629077, 0.16984126739274108, 0.17549155667193916, 0.17133490097092874, 0.17089766082291702, 0.1465410819167009, 0.3194672643323361, 0.25311580033460723, 0.2620245455735143, 0.18395940877466666, 0.22687867607854673, 0.2572745157172778, 0.15019191834315915, 0.15512709000482916, 0.17679409326862294, 0.1878735140699067, 0.17433340476963644, 0.16872369084638428, 0.17115212809786184, 0.18026981152677835, 0.18036140145340518, 0.17156311953762382, 0.18643500847534544, 0.1731965894542593, 0.07615403847599644, 0.11467081609171981, 0.07598866078654809, 0.07626633503151115, 0.0638535069489784, 0.07866474890109243, 0.0760814176233966, 0.08483956963862493, 0.062474519707660714]}, "mutation_prompt": null}
{"id": "ec8ec220-28e6-4bf9-a1e6-7b6469b97d11", "solution": "import numpy as np\n\nclass AdaptiveMutationOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        mutation_rate = 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                candidate_position = np.clip(swarm[i] + np.random.normal(0, mutation_rate, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n                        mutation_rate *= 0.99  # Adapt mutation rate based on performance\n        return best_position", "name": "AdaptiveMutationOptimizer", "description": "Introducing a novel adaptive mutation strategy based on function evaluations to dynamically adjust the exploration-exploitation balance for faster convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1e8e4011-31e8-4a73-bb82-93082b90ca5d", "metadata": {"aucs": [0.28360515673857967, 0.26773751913009247, 0.2743258791563252, 0.28816334949971845, 0.2939750642285429, 0.27777702788424363, 0.29756131088770954, 0.2586771267342569, 0.28688642510693385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06905352933711728, 0.07244154006155745, 0.06622930283062722, 0.06835067228772729, 0.07079139214635866, 0.08666458281459344, 0.0784609041370049, 0.06658460630247298, 0.06367346016097986, 0.06991627685463642, 0.06647523157434188, 0.0652221866875452, 0.071582286994187, 0.06898484643603353, 0.06200899277175265, 0.06621386941132423, 0.05595679214345406, 0.05438140522877333, 0.9440655937440774, 0.910719429002758, 0.9211677702275014, 0.8991881785109688, 0.9000072501002687, 0.9029128488944624, 0.9069527481560966, 0.8906855680516973, 0.9060496784554682, 0.158224190686294, 0.169782093359507, 0.1550747867100295, 0.1647997478519415, 0.16320281421681027, 0.2031217765564307, 0.16216894226525147, 0.15150710958151792, 0.18510056272981568, 0.21374207548516955, 0.18970827351708086, 0.19687814622280764, 0.2022287318040702, 0.19866017669015468, 0.2111447433311826, 0.20868631986869135, 0.19453491502957, 0.2537567298659146, 0.07127619489131776, 0.07279041737210157, 0.10546652599799855, 0.09170117012496326, 0.08493253958938862, 0.11651928057492555, 0.10039226674986257, 0.08868910110764139, 0.0904954594235936, 0.09518002767757261, 0.08191522672544527, 0.11173795719864266, 0.08985620284252183, 0.0887954109643635, 0.11121320773518839, 0.09297295740808909, 0.07664314062988653, 0.07347830394856136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11237769391934294, 0.08015400214523705, 0.04732247600429618, 0.03126374288933875, 0.06180621350694615, 0.029011864887031558, 0.09981698958412577, 0.06498326209475291, 0.03983176050155757, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02707718943157944, 0.03519650075657499, 0.02201847977765714, 0.03520685015480962, 0.048611999140563245, 0.04518928056045557, 0.03149310284102502, 0.03447264567316055, 0.02904502189559388, 0.2717459256632635, 0.2800051638259361, 0.2923520431895079, 0.2936703440095645, 0.2951709507278081, 0.30989567920962713, 0.2704252087729756, 0.2870408426436615, 0.2789235742506829, 0.07063428892923873, 0.0659554898237853, 0.07455068936876763, 0.06823840587344987, 0.07890794966557546, 0.07177907573279318, 0.08153630021380542, 0.07192186221439856, 0.0793620393850637, 0.1444237126863318, 0.14023826035905518, 0.1387412798669404, 0.13359053887466288, 0.13818344506924773, 0.15728415775797966, 0.13654677686399697, 0.13969981331456927, 0.1536375488208932, 0.20666246162287416, 0.208101528199109, 0.20781014096411754, 0.1962774923261189, 0.20635882455606191, 0.22198064109790472, 0.19402253506459222, 0.20706141594048988, 0.19842142879920377, 0.1528193545076052, 0.1460121789458131, 0.14825380362596352, 0.15501862395251864, 0.15625092078296943, 0.14555747177548295, 0.156076656075549, 0.14564401054284648, 0.12541737190208713, 0.18807143205414978, 0.1879148584082394, 0.21147059311378436, 0.1806227383845197, 0.1921506952607419, 0.20436598016188334, 0.17509577769643203, 0.2189805617996884, 0.16824991561986113, 0.16916918216693744, 0.16605256568919757, 0.166112066639992, 0.16978343741075863, 0.1704979960372528, 0.17132914786550701, 0.16425728606286705, 0.17073408886667585, 0.15920777130664787, 0.16894661528316612, 0.16508056343652733, 0.2671732019503543, 0.28375138835629077, 0.16984126739274108, 0.17549155667193916, 0.17133490097092874, 0.17089766082291702, 0.1465410819167009, 0.3194672643323361, 0.25311580033460723, 0.2620245455735143, 0.18395940877466666, 0.22687867607854673, 0.2572745157172778, 0.15019191834315915, 0.15512709000482916, 0.17679409326862294, 0.1878735140699067, 0.17433340476963644, 0.16872369084638428, 0.17115212809786184, 0.18026981152677835, 0.18036140145340518, 0.17156311953762382, 0.18643500847534544, 0.1731965894542593, 0.07615403847599644, 0.11467081609171981, 0.07598866078654809, 0.07626633503151115, 0.0638535069489784, 0.07866474890109243, 0.0760814176233966, 0.08483956963862493, 0.062474519707660714]}, "mutation_prompt": null}
{"id": "a5008c80-1ddd-4670-86a2-92f1c0fd686b", "solution": "import numpy as np\n\nclass EnhancedMutationOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5, global_explore_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n        self.global_explore_rate = global_explore_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        mutation_rate = 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                if np.random.rand() < self.global_explore_rate:\n                    candidate_position = np.random.uniform(-5.0, 5.0, self.dim)\n                else:\n                    candidate_position = np.clip(swarm[i] + np.random.normal(0, mutation_rate, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n                        mutation_rate *= 0.99  # Adapt mutation rate based on performance\n        return best_position", "name": "EnhancedMutationOptimizer", "description": "Introducing a dynamic mutation strategy based on local search and global exploration to enhance convergence speed.", "configspace": "", "generation": 81, "fitness": 0.16367938737937718, "feedback": "The algorithm EnhancedMutationOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "1e8e4011-31e8-4a73-bb82-93082b90ca5d", "metadata": {"aucs": [0.2776438160381436, 0.2874050547815652, 0.26758537150487083, 0.32973518975522176, 0.28304364216491273, 0.2957780923212284, 0.2866730544553302, 0.29462838344907727, 0.30149017842183534, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06493901702233285, 0.0801045149593147, 0.09079570570023354, 0.07886916332421334, 0.07488405994327818, 0.06446446584010168, 0.07058018134027355, 0.0818553923135158, 0.06900466787955883, 0.06412485652116229, 0.09029552138802688, 0.07240593512147442, 0.06544867324721348, 0.05986924707032826, 0.06941165720122333, 0.06623165107721163, 0.0700266876075768, 0.062404466442906426, 0.8178853138867348, 0.9050158377537306, 0.9041250321857881, 0.9208539649407906, 0.9225922664452074, 0.8877717747859707, 0.8863673329105605, 0.8731748303686914, 0.8467445637629513, 0.20289276284501956, 0.15583019107311047, 0.15732308641935056, 0.15660637524049703, 0.16344107559457965, 0.17928077676672216, 0.15421288604849592, 0.14786652535618616, 0.1648889893311163, 0.2165834686085153, 0.2024967109908128, 0.19120284248712638, 0.19411582843735564, 0.1912555581039873, 0.19094253171091313, 0.19629378295664368, 0.18089175257289503, 0.1743521192545171, 0.07694393646859499, 0.08894510381114706, 0.07445513390378766, 0.07946941913523553, 0.08106708185676637, 0.09231134253633388, 0.11000056891690713, 0.09330142867358715, 0.08692830077467328, 0.0903572103233864, 0.06287564019630476, 0.08899668901925473, 0.08326763233290313, 0.0751208234863876, 0.08402464831031575, 0.08932458383167774, 0.08194351236821418, 0.10440969636659869, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04323341621118704, 0.050419008267295395, 0.08818033770417555, 0.05435745356683164, 0.02597136299029823, 0.02747946188678052, 0.06590629775129087, 0.041010469638381064, 0.08205822180565137, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018459927769350126, 0.04730491325565145, 0.04121427371814279, 0.03777544977942193, 0.03638826234835302, 0.04930262268261376, 0.02959781927526217, 0.030714802109142347, 0.031518928970461046, 0.3034176888178005, 0.27377851227732297, 0.31094294491535346, 0.2996435031959277, 0.28974663882454854, 0.30029710061296466, 0.29585313637232935, 0.33067206901349855, 0.2765456720275179, 0.07612534662998005, 0.0778583541379656, 0.08513642692070844, 0.07247657567509791, 0.07472611300947118, 0.07135359634036831, 0.07213265009819225, 0.06660595268578651, 0.06998765863171252, 0.11849521674010899, 0.14694800154470844, 0.12864736762537798, 0.14511249803016124, 0.15611690933176192, 0.1493279155815035, 0.16421919686048225, 0.1552191793215819, 0.16851649910617872, 0.21326061547400554, 0.21607782754867588, 0.17255133871399908, 0.20431797999545676, 0.23161742875531832, 0.19566892355751597, 0.19874274505846456, 0.19529368329883, 0.20584406093040652, 0.1599236421880702, 0.1422542040618604, 0.15876822922019473, 0.1617075527140852, 0.20008515474212896, 0.1499788954949659, 0.16379887547847627, 0.13205608514170708, 0.14639577246535607, 0.1649513377010584, 0.18144436655751361, 0.16044343200349664, 0.2079150948255758, 0.19051670714658298, 0.19563079080237655, 0.18056121189596108, 0.17329627741617182, 0.18426945134766404, 0.16970847030623482, 0.1707206279477621, 0.16740815550914645, 0.16912395545162184, 0.19884921176587245, 0.17369096117275495, 0.17147379385177597, 0.16615993030838194, 0.1694925841433973, 0.18524369398629847, 0.32807307354707804, 0.39645427212650086, 0.38395400308469163, 0.33358134305773024, 0.2579449758709643, 0.1352682166313831, 0.27907261079230006, 0.1499081679589115, 0.2375281919810216, 0.23503439605740806, 0.26864278444687195, 0.21995045797261303, 0.2965013772814583, 0.1977903853293681, 0.143024695919992, 0.18095129463541093, 0.19517087192079718, 0.19510889562457445, 0.17612133399252194, 0.18312479876197107, 0.18506227217457116, 0.19586636288232562, 0.1876053290472942, 0.1706782384064789, 0.2044566712982392, 0.18663236266204508, 0.07719340371954075, 0.0692958166412867, 0.06942846932000868, 0.07888617608249737, 0.07252610779382762, 0.07478638695146944, 0.08107651769510527, 0.07192042594342951, 0.07493858325344449]}, "mutation_prompt": null}
{"id": "c87c15a8-dfe7-4a2d-afd6-ca8b03d62e71", "solution": "import numpy as np\n\nclass EnhancedMutationOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5, global_explore_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n        self.global_explore_rate = global_explore_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        mutation_rate = 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                if np.random.rand() < self.global_explore_rate:\n                    candidate_position = np.random.uniform(-5.0, 5.0, self.dim)\n                else:\n                    candidate_position = np.clip(swarm[i] + np.random.normal(0, mutation_rate, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n                        mutation_rate *= 0.99  # Adapt mutation rate based on performance\n        return best_position", "name": "EnhancedMutationOptimizer", "description": "Introducing a dynamic mutation strategy based on local search and global exploration to enhance convergence speed.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a5008c80-1ddd-4670-86a2-92f1c0fd686b", "metadata": {"aucs": [0.2776438160381436, 0.2874050547815652, 0.26758537150487083, 0.32973518975522176, 0.28304364216491273, 0.2957780923212284, 0.2866730544553302, 0.29462838344907727, 0.30149017842183534, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06493901702233285, 0.0801045149593147, 0.09079570570023354, 0.07886916332421334, 0.07488405994327818, 0.06446446584010168, 0.07058018134027355, 0.0818553923135158, 0.06900466787955883, 0.06412485652116229, 0.09029552138802688, 0.07240593512147442, 0.06544867324721348, 0.05986924707032826, 0.06941165720122333, 0.06623165107721163, 0.0700266876075768, 0.062404466442906426, 0.8178853138867348, 0.9050158377537306, 0.9041250321857881, 0.9208539649407906, 0.9225922664452074, 0.8877717747859707, 0.8863673329105605, 0.8731748303686914, 0.8467445637629513, 0.20289276284501956, 0.15583019107311047, 0.15732308641935056, 0.15660637524049703, 0.16344107559457965, 0.17928077676672216, 0.15421288604849592, 0.14786652535618616, 0.1648889893311163, 0.2165834686085153, 0.2024967109908128, 0.19120284248712638, 0.19411582843735564, 0.1912555581039873, 0.19094253171091313, 0.19629378295664368, 0.18089175257289503, 0.1743521192545171, 0.07694393646859499, 0.08894510381114706, 0.07445513390378766, 0.07946941913523553, 0.08106708185676637, 0.09231134253633388, 0.11000056891690713, 0.09330142867358715, 0.08692830077467328, 0.0903572103233864, 0.06287564019630476, 0.08899668901925473, 0.08326763233290313, 0.0751208234863876, 0.08402464831031575, 0.08932458383167774, 0.08194351236821418, 0.10440969636659869, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04323341621118704, 0.050419008267295395, 0.08818033770417555, 0.05435745356683164, 0.02597136299029823, 0.02747946188678052, 0.06590629775129087, 0.041010469638381064, 0.08205822180565137, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018459927769350126, 0.04730491325565145, 0.04121427371814279, 0.03777544977942193, 0.03638826234835302, 0.04930262268261376, 0.02959781927526217, 0.030714802109142347, 0.031518928970461046, 0.3034176888178005, 0.27377851227732297, 0.31094294491535346, 0.2996435031959277, 0.28974663882454854, 0.30029710061296466, 0.29585313637232935, 0.33067206901349855, 0.2765456720275179, 0.07612534662998005, 0.0778583541379656, 0.08513642692070844, 0.07247657567509791, 0.07472611300947118, 0.07135359634036831, 0.07213265009819225, 0.06660595268578651, 0.06998765863171252, 0.11849521674010899, 0.14694800154470844, 0.12864736762537798, 0.14511249803016124, 0.15611690933176192, 0.1493279155815035, 0.16421919686048225, 0.1552191793215819, 0.16851649910617872, 0.21326061547400554, 0.21607782754867588, 0.17255133871399908, 0.20431797999545676, 0.23161742875531832, 0.19566892355751597, 0.19874274505846456, 0.19529368329883, 0.20584406093040652, 0.1599236421880702, 0.1422542040618604, 0.15876822922019473, 0.1617075527140852, 0.20008515474212896, 0.1499788954949659, 0.16379887547847627, 0.13205608514170708, 0.14639577246535607, 0.1649513377010584, 0.18144436655751361, 0.16044343200349664, 0.2079150948255758, 0.19051670714658298, 0.19563079080237655, 0.18056121189596108, 0.17329627741617182, 0.18426945134766404, 0.16970847030623482, 0.1707206279477621, 0.16740815550914645, 0.16912395545162184, 0.19884921176587245, 0.17369096117275495, 0.17147379385177597, 0.16615993030838194, 0.1694925841433973, 0.18524369398629847, 0.32807307354707804, 0.39645427212650086, 0.38395400308469163, 0.33358134305773024, 0.2579449758709643, 0.1352682166313831, 0.27907261079230006, 0.1499081679589115, 0.2375281919810216, 0.23503439605740806, 0.26864278444687195, 0.21995045797261303, 0.2965013772814583, 0.1977903853293681, 0.143024695919992, 0.18095129463541093, 0.19517087192079718, 0.19510889562457445, 0.17612133399252194, 0.18312479876197107, 0.18506227217457116, 0.19586636288232562, 0.1876053290472942, 0.1706782384064789, 0.2044566712982392, 0.18663236266204508, 0.07719340371954075, 0.0692958166412867, 0.06942846932000868, 0.07888617608249737, 0.07252610779382762, 0.07478638695146944, 0.08107651769510527, 0.07192042594342951, 0.07493858325344449]}, "mutation_prompt": null}
{"id": "13fbd73f-fa13-46b9-a3a1-1d540bc78a5d", "solution": "import numpy as np\n\nclass EnhancedMutationOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5, global_explore_rate=0.1, adapt_rate=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n        self.global_explore_rate = global_explore_rate\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])\n        mutation_rate = 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                if np.random.rand() < self.global_explore_rate:\n                    candidate_position = np.random.uniform(-5.0, 5.0, self.dim)\n                else:\n                    candidate_position = np.clip(swarm[i] + np.random.normal(0, mutation_rate, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n                        self.global_explore_rate *= self.adapt_rate  # Adjust global exploration rate based on performance\n        return best_position", "name": "EnhancedMutationOptimizer", "description": "Implement a mechanism to dynamically adjust the global exploration rate based on the current performance to guide the search process effectively and speed up convergence.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 14, 9, '        mutation_rate = 1.0\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 14, 9, '        mutation_rate = 1.0\\n'))", "parent_id": "a5008c80-1ddd-4670-86a2-92f1c0fd686b", "metadata": {}, "mutation_prompt": null}
{"id": "fee21a81-bc87-4dce-bed0-f1b529703d9e", "solution": "import numpy as np\n\nclass EnhancedMutationOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5, global_explore_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n        self.global_explore_rate = global_explore_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        mutation_rate = 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                if np.random.rand() < self.global_explore_rate:\n                    candidate_position = np.random.uniform(-5.0, 5.0, self.dim)\n                else:\n                    candidate_position = np.clip(swarm[i] + np.random.normal(0, mutation_rate, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n                        mutation_rate *= 0.99  # Adapt mutation rate based on performance\n        return best_position", "name": "EnhancedMutationOptimizer", "description": "Introducing a dynamic mutation strategy based on local search and global exploration to enhance convergence speed.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a5008c80-1ddd-4670-86a2-92f1c0fd686b", "metadata": {"aucs": [0.2776438160381436, 0.2874050547815652, 0.26758537150487083, 0.32973518975522176, 0.28304364216491273, 0.2957780923212284, 0.2866730544553302, 0.29462838344907727, 0.30149017842183534, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06493901702233285, 0.0801045149593147, 0.09079570570023354, 0.07886916332421334, 0.07488405994327818, 0.06446446584010168, 0.07058018134027355, 0.0818553923135158, 0.06900466787955883, 0.06412485652116229, 0.09029552138802688, 0.07240593512147442, 0.06544867324721348, 0.05986924707032826, 0.06941165720122333, 0.06623165107721163, 0.0700266876075768, 0.062404466442906426, 0.8178853138867348, 0.9050158377537306, 0.9041250321857881, 0.9208539649407906, 0.9225922664452074, 0.8877717747859707, 0.8863673329105605, 0.8731748303686914, 0.8467445637629513, 0.20289276284501956, 0.15583019107311047, 0.15732308641935056, 0.15660637524049703, 0.16344107559457965, 0.17928077676672216, 0.15421288604849592, 0.14786652535618616, 0.1648889893311163, 0.2165834686085153, 0.2024967109908128, 0.19120284248712638, 0.19411582843735564, 0.1912555581039873, 0.19094253171091313, 0.19629378295664368, 0.18089175257289503, 0.1743521192545171, 0.07694393646859499, 0.08894510381114706, 0.07445513390378766, 0.07946941913523553, 0.08106708185676637, 0.09231134253633388, 0.11000056891690713, 0.09330142867358715, 0.08692830077467328, 0.0903572103233864, 0.06287564019630476, 0.08899668901925473, 0.08326763233290313, 0.0751208234863876, 0.08402464831031575, 0.08932458383167774, 0.08194351236821418, 0.10440969636659869, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04323341621118704, 0.050419008267295395, 0.08818033770417555, 0.05435745356683164, 0.02597136299029823, 0.02747946188678052, 0.06590629775129087, 0.041010469638381064, 0.08205822180565137, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018459927769350126, 0.04730491325565145, 0.04121427371814279, 0.03777544977942193, 0.03638826234835302, 0.04930262268261376, 0.02959781927526217, 0.030714802109142347, 0.031518928970461046, 0.3034176888178005, 0.27377851227732297, 0.31094294491535346, 0.2996435031959277, 0.28974663882454854, 0.30029710061296466, 0.29585313637232935, 0.33067206901349855, 0.2765456720275179, 0.07612534662998005, 0.0778583541379656, 0.08513642692070844, 0.07247657567509791, 0.07472611300947118, 0.07135359634036831, 0.07213265009819225, 0.06660595268578651, 0.06998765863171252, 0.11849521674010899, 0.14694800154470844, 0.12864736762537798, 0.14511249803016124, 0.15611690933176192, 0.1493279155815035, 0.16421919686048225, 0.1552191793215819, 0.16851649910617872, 0.21326061547400554, 0.21607782754867588, 0.17255133871399908, 0.20431797999545676, 0.23161742875531832, 0.19566892355751597, 0.19874274505846456, 0.19529368329883, 0.20584406093040652, 0.1599236421880702, 0.1422542040618604, 0.15876822922019473, 0.1617075527140852, 0.20008515474212896, 0.1499788954949659, 0.16379887547847627, 0.13205608514170708, 0.14639577246535607, 0.1649513377010584, 0.18144436655751361, 0.16044343200349664, 0.2079150948255758, 0.19051670714658298, 0.19563079080237655, 0.18056121189596108, 0.17329627741617182, 0.18426945134766404, 0.16970847030623482, 0.1707206279477621, 0.16740815550914645, 0.16912395545162184, 0.19884921176587245, 0.17369096117275495, 0.17147379385177597, 0.16615993030838194, 0.1694925841433973, 0.18524369398629847, 0.32807307354707804, 0.39645427212650086, 0.38395400308469163, 0.33358134305773024, 0.2579449758709643, 0.1352682166313831, 0.27907261079230006, 0.1499081679589115, 0.2375281919810216, 0.23503439605740806, 0.26864278444687195, 0.21995045797261303, 0.2965013772814583, 0.1977903853293681, 0.143024695919992, 0.18095129463541093, 0.19517087192079718, 0.19510889562457445, 0.17612133399252194, 0.18312479876197107, 0.18506227217457116, 0.19586636288232562, 0.1876053290472942, 0.1706782384064789, 0.2044566712982392, 0.18663236266204508, 0.07719340371954075, 0.0692958166412867, 0.06942846932000868, 0.07888617608249737, 0.07252610779382762, 0.07478638695146944, 0.08107651769510527, 0.07192042594342951, 0.07493858325344449]}, "mutation_prompt": null}
{"id": "2a5a470c-6bbe-45d1-b2bb-f87538d190b8", "solution": "class HybridDEPSOptimizer:\n    def __init__(self, budget, dim, num_particles=10, f=0.5, cr=0.9, w=0.7):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.f = f\n        self.cr = cr\n        self.w = w\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_particles, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])\n        velocity = np.zeros((self.num_particles, self.dim))\n        \n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                trial_vector = np.clip(swarm[i] + self.f * (swarm[np.random.choice(self.num_particles)] - swarm[np.random.choice(self.num_particles)]), -5.0, 5.0)\n                for j in range(self.dim):\n                    if np.random.rand() < self.cr or j == np.random.choice(self.dim):\n                        swarm[i, j] = trial_vector[j]\n                velocity[i] = self.w * velocity[i] + np.random.rand() * (best_position - swarm[i])\n                swarm[i] = np.clip(swarm[i] + velocity[i], -5.0, 5.0)\n                if func(swarm[i]) < func(best_position):\n                    best_position = swarm[i]\n        return best_position", "name": "HybridDEPSOptimizer", "description": "Implement a hybrid algorithm combining Differential Evolution and Particle Swarm Optimization to enhance the convergence speed by leveraging both exploration and exploitation capabilities efficiently.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 13, 9, '        velocity = np.zeros((self.num_particles, self.dim))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 13, 9, '        velocity = np.zeros((self.num_particles, self.dim))\\n'))", "parent_id": "a5008c80-1ddd-4670-86a2-92f1c0fd686b", "metadata": {}, "mutation_prompt": null}
{"id": "1ea1fd97-1fe3-4580-a5cf-04b493e259de", "solution": "import numpy as np\n\nclass EnhancedMutationOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5, global_explore_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n        self.global_explore_rate = global_explore_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        mutation_rate = 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                if np.random.rand() < self.global_explore_rate:\n                    candidate_position = np.random.uniform(-5.0, 5.0, self.dim)\n                else:\n                    candidate_position = np.clip(swarm[i] + np.random.normal(0, mutation_rate, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n                        mutation_rate *= 0.99  # Adapt mutation rate based on performance\n        return best_position", "name": "EnhancedMutationOptimizer", "description": "Introducing a dynamic mutation strategy based on local search and global exploration to enhance convergence speed.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a5008c80-1ddd-4670-86a2-92f1c0fd686b", "metadata": {"aucs": [0.2776438160381436, 0.2874050547815652, 0.26758537150487083, 0.32973518975522176, 0.28304364216491273, 0.2957780923212284, 0.2866730544553302, 0.29462838344907727, 0.30149017842183534, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06493901702233285, 0.0801045149593147, 0.09079570570023354, 0.07886916332421334, 0.07488405994327818, 0.06446446584010168, 0.07058018134027355, 0.0818553923135158, 0.06900466787955883, 0.06412485652116229, 0.09029552138802688, 0.07240593512147442, 0.06544867324721348, 0.05986924707032826, 0.06941165720122333, 0.06623165107721163, 0.0700266876075768, 0.062404466442906426, 0.8178853138867348, 0.9050158377537306, 0.9041250321857881, 0.9208539649407906, 0.9225922664452074, 0.8877717747859707, 0.8863673329105605, 0.8731748303686914, 0.8467445637629513, 0.20289276284501956, 0.15583019107311047, 0.15732308641935056, 0.15660637524049703, 0.16344107559457965, 0.17928077676672216, 0.15421288604849592, 0.14786652535618616, 0.1648889893311163, 0.2165834686085153, 0.2024967109908128, 0.19120284248712638, 0.19411582843735564, 0.1912555581039873, 0.19094253171091313, 0.19629378295664368, 0.18089175257289503, 0.1743521192545171, 0.07694393646859499, 0.08894510381114706, 0.07445513390378766, 0.07946941913523553, 0.08106708185676637, 0.09231134253633388, 0.11000056891690713, 0.09330142867358715, 0.08692830077467328, 0.0903572103233864, 0.06287564019630476, 0.08899668901925473, 0.08326763233290313, 0.0751208234863876, 0.08402464831031575, 0.08932458383167774, 0.08194351236821418, 0.10440969636659869, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04323341621118704, 0.050419008267295395, 0.08818033770417555, 0.05435745356683164, 0.02597136299029823, 0.02747946188678052, 0.06590629775129087, 0.041010469638381064, 0.08205822180565137, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018459927769350126, 0.04730491325565145, 0.04121427371814279, 0.03777544977942193, 0.03638826234835302, 0.04930262268261376, 0.02959781927526217, 0.030714802109142347, 0.031518928970461046, 0.3034176888178005, 0.27377851227732297, 0.31094294491535346, 0.2996435031959277, 0.28974663882454854, 0.30029710061296466, 0.29585313637232935, 0.33067206901349855, 0.2765456720275179, 0.07612534662998005, 0.0778583541379656, 0.08513642692070844, 0.07247657567509791, 0.07472611300947118, 0.07135359634036831, 0.07213265009819225, 0.06660595268578651, 0.06998765863171252, 0.11849521674010899, 0.14694800154470844, 0.12864736762537798, 0.14511249803016124, 0.15611690933176192, 0.1493279155815035, 0.16421919686048225, 0.1552191793215819, 0.16851649910617872, 0.21326061547400554, 0.21607782754867588, 0.17255133871399908, 0.20431797999545676, 0.23161742875531832, 0.19566892355751597, 0.19874274505846456, 0.19529368329883, 0.20584406093040652, 0.1599236421880702, 0.1422542040618604, 0.15876822922019473, 0.1617075527140852, 0.20008515474212896, 0.1499788954949659, 0.16379887547847627, 0.13205608514170708, 0.14639577246535607, 0.1649513377010584, 0.18144436655751361, 0.16044343200349664, 0.2079150948255758, 0.19051670714658298, 0.19563079080237655, 0.18056121189596108, 0.17329627741617182, 0.18426945134766404, 0.16970847030623482, 0.1707206279477621, 0.16740815550914645, 0.16912395545162184, 0.19884921176587245, 0.17369096117275495, 0.17147379385177597, 0.16615993030838194, 0.1694925841433973, 0.18524369398629847, 0.32807307354707804, 0.39645427212650086, 0.38395400308469163, 0.33358134305773024, 0.2579449758709643, 0.1352682166313831, 0.27907261079230006, 0.1499081679589115, 0.2375281919810216, 0.23503439605740806, 0.26864278444687195, 0.21995045797261303, 0.2965013772814583, 0.1977903853293681, 0.143024695919992, 0.18095129463541093, 0.19517087192079718, 0.19510889562457445, 0.17612133399252194, 0.18312479876197107, 0.18506227217457116, 0.19586636288232562, 0.1876053290472942, 0.1706782384064789, 0.2044566712982392, 0.18663236266204508, 0.07719340371954075, 0.0692958166412867, 0.06942846932000868, 0.07888617608249737, 0.07252610779382762, 0.07478638695146944, 0.08107651769510527, 0.07192042594342951, 0.07493858325344449]}, "mutation_prompt": null}
{"id": "1da52c6b-b5c4-4583-9d8e-0f3be380bf09", "solution": "import numpy as np\n\nclass EnhancedMutationOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5, global_explore_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n        self.global_explore_rate = global_explore_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        mutation_rate = 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                if np.random.rand() < self.global_explore_rate:\n                    candidate_position = np.random.uniform(-5.0, 5.0, self.dim)\n                else:\n                    candidate_position = np.clip(swarm[i] + np.random.normal(0, mutation_rate, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n                        mutation_rate *= 0.99  # Adapt mutation rate based on performance\n        return best_position", "name": "EnhancedMutationOptimizer", "description": "Introducing a dynamic mutation strategy based on local search and global exploration to enhance convergence speed.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a5008c80-1ddd-4670-86a2-92f1c0fd686b", "metadata": {"aucs": [0.2776438160381436, 0.2874050547815652, 0.26758537150487083, 0.32973518975522176, 0.28304364216491273, 0.2957780923212284, 0.2866730544553302, 0.29462838344907727, 0.30149017842183534, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06493901702233285, 0.0801045149593147, 0.09079570570023354, 0.07886916332421334, 0.07488405994327818, 0.06446446584010168, 0.07058018134027355, 0.0818553923135158, 0.06900466787955883, 0.06412485652116229, 0.09029552138802688, 0.07240593512147442, 0.06544867324721348, 0.05986924707032826, 0.06941165720122333, 0.06623165107721163, 0.0700266876075768, 0.062404466442906426, 0.8178853138867348, 0.9050158377537306, 0.9041250321857881, 0.9208539649407906, 0.9225922664452074, 0.8877717747859707, 0.8863673329105605, 0.8731748303686914, 0.8467445637629513, 0.20289276284501956, 0.15583019107311047, 0.15732308641935056, 0.15660637524049703, 0.16344107559457965, 0.17928077676672216, 0.15421288604849592, 0.14786652535618616, 0.1648889893311163, 0.2165834686085153, 0.2024967109908128, 0.19120284248712638, 0.19411582843735564, 0.1912555581039873, 0.19094253171091313, 0.19629378295664368, 0.18089175257289503, 0.1743521192545171, 0.07694393646859499, 0.08894510381114706, 0.07445513390378766, 0.07946941913523553, 0.08106708185676637, 0.09231134253633388, 0.11000056891690713, 0.09330142867358715, 0.08692830077467328, 0.0903572103233864, 0.06287564019630476, 0.08899668901925473, 0.08326763233290313, 0.0751208234863876, 0.08402464831031575, 0.08932458383167774, 0.08194351236821418, 0.10440969636659869, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04323341621118704, 0.050419008267295395, 0.08818033770417555, 0.05435745356683164, 0.02597136299029823, 0.02747946188678052, 0.06590629775129087, 0.041010469638381064, 0.08205822180565137, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018459927769350126, 0.04730491325565145, 0.04121427371814279, 0.03777544977942193, 0.03638826234835302, 0.04930262268261376, 0.02959781927526217, 0.030714802109142347, 0.031518928970461046, 0.3034176888178005, 0.27377851227732297, 0.31094294491535346, 0.2996435031959277, 0.28974663882454854, 0.30029710061296466, 0.29585313637232935, 0.33067206901349855, 0.2765456720275179, 0.07612534662998005, 0.0778583541379656, 0.08513642692070844, 0.07247657567509791, 0.07472611300947118, 0.07135359634036831, 0.07213265009819225, 0.06660595268578651, 0.06998765863171252, 0.11849521674010899, 0.14694800154470844, 0.12864736762537798, 0.14511249803016124, 0.15611690933176192, 0.1493279155815035, 0.16421919686048225, 0.1552191793215819, 0.16851649910617872, 0.21326061547400554, 0.21607782754867588, 0.17255133871399908, 0.20431797999545676, 0.23161742875531832, 0.19566892355751597, 0.19874274505846456, 0.19529368329883, 0.20584406093040652, 0.1599236421880702, 0.1422542040618604, 0.15876822922019473, 0.1617075527140852, 0.20008515474212896, 0.1499788954949659, 0.16379887547847627, 0.13205608514170708, 0.14639577246535607, 0.1649513377010584, 0.18144436655751361, 0.16044343200349664, 0.2079150948255758, 0.19051670714658298, 0.19563079080237655, 0.18056121189596108, 0.17329627741617182, 0.18426945134766404, 0.16970847030623482, 0.1707206279477621, 0.16740815550914645, 0.16912395545162184, 0.19884921176587245, 0.17369096117275495, 0.17147379385177597, 0.16615993030838194, 0.1694925841433973, 0.18524369398629847, 0.32807307354707804, 0.39645427212650086, 0.38395400308469163, 0.33358134305773024, 0.2579449758709643, 0.1352682166313831, 0.27907261079230006, 0.1499081679589115, 0.2375281919810216, 0.23503439605740806, 0.26864278444687195, 0.21995045797261303, 0.2965013772814583, 0.1977903853293681, 0.143024695919992, 0.18095129463541093, 0.19517087192079718, 0.19510889562457445, 0.17612133399252194, 0.18312479876197107, 0.18506227217457116, 0.19586636288232562, 0.1876053290472942, 0.1706782384064789, 0.2044566712982392, 0.18663236266204508, 0.07719340371954075, 0.0692958166412867, 0.06942846932000868, 0.07888617608249737, 0.07252610779382762, 0.07478638695146944, 0.08107651769510527, 0.07192042594342951, 0.07493858325344449]}, "mutation_prompt": null}
{"id": "d44c4469-2119-4526-a831-01776ce01bef", "solution": "import numpy as np\n\nclass DynamicNeighborhoodOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5, global_explore_rate=0.1, neighborhood_update_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n        self.global_explore_rate = global_explore_rate\n        self.neighborhood_update_rate = neighborhood_update_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        mutation_rate = 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                if np.random.rand() < self.global_explore_rate:\n                    candidate_position = np.random.uniform(-5.0, 5.0, self.dim)\n                else:\n                    candidate_position = np.clip(swarm[i] + np.random.normal(0, mutation_rate, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n                        mutation_rate *= 0.99  # Adapt mutation rate based on performance\n            # Implement dynamic neighborhood update\n            if np.random.rand() < self.neighborhood_update_rate:\n                best_position_index = np.argmin([func(p) for p in swarm])\n                swarm = np.concatenate((swarm[:best_position_index], np.random.uniform(-5.0, 5.0, (1, self.dim)), swarm[best_position_index+1:]), axis=0)\n\n        return best_position", "name": "DynamicNeighborhoodOptimizer", "description": "Implementing a dynamic neighborhood update strategy to improve exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 88, "fitness": 0.12035132410926709, "feedback": "The algorithm DynamicNeighborhoodOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.11.", "error": "", "parent_id": "a5008c80-1ddd-4670-86a2-92f1c0fd686b", "metadata": {"aucs": [0.2500239297934427, 0.26616449552165855, 0.25265964040264854, 0.2725847381097274, 0.24626983881271558, 0.2357073545422741, 0.2518582193341091, 0.2606158817135972, 0.24164084389543206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06862410399570995, 0.0707742681776452, 0.06218378973401417, 0.055808090240228925, 0.07594677189265353, 0.058265634132224076, 0.05485559397182027, 0.06266747376097825, 0.07022607721399998, 0.04310372125777828, 0.052436630354652736, 0.04659515406968817, 0.07990363929130473, 0.04416584399123202, 0.05583040452835575, 0.04053104691034737, 0.04965601718752821, 0.056643499336873515, 0.15741347047117904, 0.9221691617339263, 0.1717797617898723, 0.17066304433417046, 0.25846056285051444, 0.17318396085374188, 0.6355633765818027, 0.6000871171286972, 0.2226420878644847, 0.1144586880284505, 0.1715301204907269, 0.0942097939323121, 0.11374398818865616, 0.09980042152313073, 0.1457379980068525, 0.11028694764905389, 0.10676966582837433, 0.09414260865941049, 0.15926218861684482, 0.14935007398726408, 0.12873434284083562, 0.16756139520594493, 0.16421889227216102, 0.159091675463649, 0.15306860164865066, 0.15706124810776922, 0.13844995213414346, 0.06444614192745046, 0.05274534084367677, 0.057467154425424494, 0.050487294667236116, 0.08243769890523744, 0.04907468916959912, 0.04881640665532705, 0.048784256874561116, 0.05669118868486134, 0.04013176145298114, 0.05137307807939484, 0.03630151363628231, 0.06158416462011551, 0.06571834132801546, 0.06370758524346964, 0.07910097320017939, 0.06084888215657924, 0.056119621730873814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04939495741105615, 0.0564372276298607, 0.06533517192259675, 0.056158325294027756, 0.05593057433823323, 0.03277928643596373, 0.07915056457296199, 0.0694025965779076, 0.057313824498334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03621233125969814, 0.033665329305764824, 0.01211636603510946, 0.023848871957706463, 0.01046524902328505, 0.02404585576727236, 0.003337713756608185, 0.0049920638097681325, 0.013397586505069725, 0.2755776519728478, 0.24375748761613003, 0.2301795204749858, 0.24417088577767243, 0.2569815292188351, 0.2569529564031906, 0.2532055212557406, 0.23978817230574234, 0.24552566970209477, 0.06123038406538839, 0.05747541370904996, 0.055084316082888996, 0.05001762102473151, 0.0564529199776167, 0.06515662376064846, 0.06184216779428353, 0.04773981931143312, 0.05957597908853818, 0.12742379083488253, 0.12496243894106607, 0.1404311444984374, 0.1288958543919957, 0.16910790927995933, 0.13048440714724807, 0.1205461833264182, 0.1199689475510679, 0.12356290151700489, 0.18732811145002304, 0.17033659435681692, 0.16796814334531662, 0.16460830186055975, 0.1784096652105689, 0.1669356992872606, 0.16162128985379332, 0.16610427542367667, 0.17100994014603055, 0.1265143744218069, 0.12050003864986392, 0.13996362152130548, 0.11206875801750471, 0.1322669993867075, 0.11746998560270117, 0.13452417356527802, 0.1133458534320878, 0.1308430008473993, 0.19026655785366953, 0.20289512151587796, 0.1616585056091555, 0.18389382369151286, 0.16710634498619326, 0.1597702260762589, 0.19342039268295497, 0.16556739574031532, 0.18663975307644776, 0.1645849768330343, 0.18928350509452718, 0.1618206115103309, 0.16418441137405082, 0.16547659611418697, 0.1722882933345059, 0.17012300204433728, 0.15611406010597328, 0.16151146012770445, 0.14634084631969035, 0.16506732581831707, 0.17236642600921603, 0.16182767234049478, 0.2144172536117106, 0.17637091584848785, 0.20388177290754106, 0.18151003908178553, 0.21537516149695368, 0.16240301926711798, 0.2614461576020298, 0.16096318576683644, 0.236267125890122, 0.14780782124267866, 0.1959501223826351, 0.14813786050038502, 0.20687623051829873, 0.15636513411621833, 0.17668279978847168, 0.17218849271147296, 0.17838179129162235, 0.1770372927216689, 0.1683266393136631, 0.18250012929380277, 0.17501336925654432, 0.1787410031145329, 0.1802284125266309, 0.056925809338217226, 0.06211043193556509, 0.08276002997400123, 0.056032667430398364, 0.06627961940531224, 0.06986456602926261, 0.06304550120818764, 0.06714783985946049, 0.0670196224349705]}, "mutation_prompt": null}
{"id": "58bbe308-57ef-482d-922c-c8c4cfa0e701", "solution": "import numpy as np\n\nclass CooperativeCompetitiveSwarmOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5, global_explore_rate=0.1, competitive_rate=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n        self.global_explore_rate = global_explore_rate\n        self.competitive_rate = competitive_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        mutation_rate = 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                if np.random.rand() < self.global_explore_rate:\n                    candidate_position = np.random.uniform(-5.0, 5.0, self.dim)\n                else:\n                    candidate_position = np.clip(swarm[i] + np.random.normal(0, mutation_rate, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if np.random.rand() < self.competitive_rate:\n                        competition_indices = np.random.choice(np.delete(np.arange(self.num_neighbors), i), 2, replace=False)\n                        competitor = np.argmin([func(swarm[c]) for c in competition_indices])\n                        if func(swarm[competition_indices[competitor]]) < func(best_position):\n                            best_position = swarm[competition_indices[competitor]]\n                if func(candidate_position) < func(best_position):\n                    best_position = candidate_position\n                    mutation_rate *= 0.99  # Adapt mutation rate based on performance\n        return best_position", "name": "CooperativeCompetitiveSwarmOptimizer", "description": "Introducing a cooperative competitive swarm optimization strategy where individuals cooperate to explore the search space while competing to find the best solutions.", "configspace": "", "generation": 89, "fitness": 0.1470227174701942, "feedback": "The algorithm CooperativeCompetitiveSwarmOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "a5008c80-1ddd-4670-86a2-92f1c0fd686b", "metadata": {"aucs": [0.25118485796969703, 0.26370875478203015, 0.26237996164714594, 0.2353626262575912, 0.26793657694012263, 0.26700035953802304, 0.25241029150427796, 0.2784948330205601, 0.2841932908440583, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027935712605545726, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060317159370362194, 0.07143946203959894, 0.05255703285380364, 0.07489852632990734, 0.05586931439662479, 0.07033195823174776, 0.07077927733547351, 0.05690665508646775, 0.0786851363680795, 0.054808572506535036, 0.05371430304338354, 0.07378271482081944, 0.06626018175593595, 0.051683545223650484, 0.057554464974561625, 0.06328517433459713, 0.045384877338218055, 0.06322890637656453, 0.7593469888199443, 0.7934718532952949, 0.8215691676699064, 0.8268814618552188, 0.895294061401774, 0.7229398030899457, 0.8726481519331551, 0.9014271396745961, 0.9130740141065731, 0.1290340094037754, 0.12930432392299007, 0.1347884051391256, 0.1506628723585851, 0.14073575645678937, 0.13890725094304635, 0.17667818868612262, 0.14807973968675414, 0.1396523211407077, 0.15878448162534076, 0.1515091328486906, 0.17756396041431766, 0.16574705836124792, 0.17022496249438335, 0.2305798896701703, 0.17383475768856338, 0.18880982915622224, 0.15009033095107438, 0.10243394110266779, 0.08459029309096044, 0.08366869424842593, 0.06212972982151188, 0.0730859650274639, 0.07162578283317778, 0.06657510828577651, 0.07246686191589746, 0.07837563389289681, 0.06311184607096387, 0.06025214412699165, 0.05240792838668973, 0.06120117628961741, 0.084887210781327, 0.06599192229699458, 0.08139376987777269, 0.07627626826174705, 0.06312125461953488, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031229730147952495, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06248901137343599, 0.04476531655270777, 0.08081359503533858, 0.03617244843444389, 0.026257484964630207, 0.029638497277833853, 0.07265947699435016, 0.038053209207172256, 0.04448190344787728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019848926005237133, 0.02673020642286339, 0.043488653606960415, 0.02419970478293887, 0.013578866224660646, 0.02187066806134974, 0.024777620334332506, 0.014214573343342418, 0.04316714808214506, 0.25101355652503077, 0.2440797611568606, 0.27544813878499963, 0.2686101109189072, 0.2781737198143259, 0.30535157409947955, 0.26229475205294195, 0.2705167798195043, 0.24918814157428482, 0.06810707263108218, 0.05957771048092708, 0.0677797409468196, 0.07288718181599219, 0.060566356179842074, 0.059480831788981, 0.0771441581704787, 0.06487171328049368, 0.06547166060838716, 0.14087020334977518, 0.10874389660496109, 0.10513103588303618, 0.12465658893998699, 0.12555239994484713, 0.129401380669955, 0.11988928292937595, 0.12464290110736387, 0.12982112187554917, 0.19370352650549705, 0.2017680319930819, 0.18972089840413064, 0.19843924591635864, 0.19556693097644917, 0.19154131336982128, 0.18466767927537364, 0.19258286292502313, 0.1941988327773373, 0.14251555312422515, 0.12470387904895142, 0.13434436281748385, 0.14928728099839195, 0.1405503100250618, 0.1367556807935285, 0.12862295981261396, 0.14731719407418242, 0.13351641539276626, 0.17520429646820723, 0.18409529721312545, 0.16983609854158654, 0.16883275712451762, 0.16509866550652297, 0.16287825989353188, 0.1820576022583057, 0.16081923299307332, 0.15979741028972005, 0.17213311221316285, 0.16442170000866496, 0.16777926278258126, 0.16585442211786505, 0.1695157816723467, 0.16188251846049517, 0.167846833764551, 0.15741196781066558, 0.16374042133999467, 0.14973200381247642, 0.16591441691774567, 0.17028597788066602, 0.22283605037644172, 0.2562371807015905, 0.22669390569169734, 0.20625922348733194, 0.26657227114409954, 0.1396821989111835, 0.2548036091768209, 0.18730899352634134, 0.2003034483676227, 0.22475578949668806, 0.18836130516286254, 0.1604851143299575, 0.17818707132118672, 0.19274504615632115, 0.2631116648705031, 0.1685974833199071, 0.17533244602697573, 0.16446156047616223, 0.180142839264537, 0.17605733628036324, 0.17632773753611874, 0.1666783794056349, 0.1643172432805392, 0.1930579025370679, 0.06457031132035462, 0.06762028802098485, 0.07893828688632476, 0.05961094484220342, 0.07762610979325058, 0.07006925902784755, 0.06586944802475991, 0.06273777924085844, 0.05731786326159782]}, "mutation_prompt": null}
{"id": "a90b6fbc-6eda-4fe4-bcdb-d2e444b0f1a2", "solution": "import numpy as np\n\nclass EnhancedMutationOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5, global_explore_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n        self.global_explore_rate = global_explore_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        mutation_rate = 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                if np.random.rand() < self.global_explore_rate:\n                    candidate_position = np.random.uniform(-5.0, 5.0, self.dim)\n                else:\n                    candidate_position = np.clip(swarm[i] + np.random.normal(0, mutation_rate, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n                        mutation_rate *= 0.99  # Adapt mutation rate based on performance\n        return best_position", "name": "EnhancedMutationOptimizer", "description": "Introducing a dynamic mutation strategy based on local search and global exploration to enhance convergence speed.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a5008c80-1ddd-4670-86a2-92f1c0fd686b", "metadata": {"aucs": [0.2776438160381436, 0.2874050547815652, 0.26758537150487083, 0.32973518975522176, 0.28304364216491273, 0.2957780923212284, 0.2866730544553302, 0.29462838344907727, 0.30149017842183534, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06493901702233285, 0.0801045149593147, 0.09079570570023354, 0.07886916332421334, 0.07488405994327818, 0.06446446584010168, 0.07058018134027355, 0.0818553923135158, 0.06900466787955883, 0.06412485652116229, 0.09029552138802688, 0.07240593512147442, 0.06544867324721348, 0.05986924707032826, 0.06941165720122333, 0.06623165107721163, 0.0700266876075768, 0.062404466442906426, 0.8178853138867348, 0.9050158377537306, 0.9041250321857881, 0.9208539649407906, 0.9225922664452074, 0.8877717747859707, 0.8863673329105605, 0.8731748303686914, 0.8467445637629513, 0.20289276284501956, 0.15583019107311047, 0.15732308641935056, 0.15660637524049703, 0.16344107559457965, 0.17928077676672216, 0.15421288604849592, 0.14786652535618616, 0.1648889893311163, 0.2165834686085153, 0.2024967109908128, 0.19120284248712638, 0.19411582843735564, 0.1912555581039873, 0.19094253171091313, 0.19629378295664368, 0.18089175257289503, 0.1743521192545171, 0.07694393646859499, 0.08894510381114706, 0.07445513390378766, 0.07946941913523553, 0.08106708185676637, 0.09231134253633388, 0.11000056891690713, 0.09330142867358715, 0.08692830077467328, 0.0903572103233864, 0.06287564019630476, 0.08899668901925473, 0.08326763233290313, 0.0751208234863876, 0.08402464831031575, 0.08932458383167774, 0.08194351236821418, 0.10440969636659869, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04323341621118704, 0.050419008267295395, 0.08818033770417555, 0.05435745356683164, 0.02597136299029823, 0.02747946188678052, 0.06590629775129087, 0.041010469638381064, 0.08205822180565137, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018459927769350126, 0.04730491325565145, 0.04121427371814279, 0.03777544977942193, 0.03638826234835302, 0.04930262268261376, 0.02959781927526217, 0.030714802109142347, 0.031518928970461046, 0.3034176888178005, 0.27377851227732297, 0.31094294491535346, 0.2996435031959277, 0.28974663882454854, 0.30029710061296466, 0.29585313637232935, 0.33067206901349855, 0.2765456720275179, 0.07612534662998005, 0.0778583541379656, 0.08513642692070844, 0.07247657567509791, 0.07472611300947118, 0.07135359634036831, 0.07213265009819225, 0.06660595268578651, 0.06998765863171252, 0.11849521674010899, 0.14694800154470844, 0.12864736762537798, 0.14511249803016124, 0.15611690933176192, 0.1493279155815035, 0.16421919686048225, 0.1552191793215819, 0.16851649910617872, 0.21326061547400554, 0.21607782754867588, 0.17255133871399908, 0.20431797999545676, 0.23161742875531832, 0.19566892355751597, 0.19874274505846456, 0.19529368329883, 0.20584406093040652, 0.1599236421880702, 0.1422542040618604, 0.15876822922019473, 0.1617075527140852, 0.20008515474212896, 0.1499788954949659, 0.16379887547847627, 0.13205608514170708, 0.14639577246535607, 0.1649513377010584, 0.18144436655751361, 0.16044343200349664, 0.2079150948255758, 0.19051670714658298, 0.19563079080237655, 0.18056121189596108, 0.17329627741617182, 0.18426945134766404, 0.16970847030623482, 0.1707206279477621, 0.16740815550914645, 0.16912395545162184, 0.19884921176587245, 0.17369096117275495, 0.17147379385177597, 0.16615993030838194, 0.1694925841433973, 0.18524369398629847, 0.32807307354707804, 0.39645427212650086, 0.38395400308469163, 0.33358134305773024, 0.2579449758709643, 0.1352682166313831, 0.27907261079230006, 0.1499081679589115, 0.2375281919810216, 0.23503439605740806, 0.26864278444687195, 0.21995045797261303, 0.2965013772814583, 0.1977903853293681, 0.143024695919992, 0.18095129463541093, 0.19517087192079718, 0.19510889562457445, 0.17612133399252194, 0.18312479876197107, 0.18506227217457116, 0.19586636288232562, 0.1876053290472942, 0.1706782384064789, 0.2044566712982392, 0.18663236266204508, 0.07719340371954075, 0.0692958166412867, 0.06942846932000868, 0.07888617608249737, 0.07252610779382762, 0.07478638695146944, 0.08107651769510527, 0.07192042594342951, 0.07493858325344449]}, "mutation_prompt": null}
{"id": "17fe161e-5316-4455-812c-c332cf1eb008", "solution": "import numpy as np\n\nclass EnhancedMutationOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5, global_explore_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n        self.global_explore_rate = global_explore_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        mutation_rate = 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                if np.random.rand() < self.global_explore_rate:\n                    candidate_position = np.random.uniform(-5.0, 5.0, self.dim)\n                else:\n                    candidate_position = np.clip(swarm[i] + np.random.normal(0, mutation_rate, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n                        mutation_rate *= 0.99  # Adapt mutation rate based on performance\n        return best_position", "name": "EnhancedMutationOptimizer", "description": "Introducing a dynamic mutation strategy based on local search and global exploration to enhance convergence speed.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a5008c80-1ddd-4670-86a2-92f1c0fd686b", "metadata": {"aucs": [0.2776438160381436, 0.2874050547815652, 0.26758537150487083, 0.32973518975522176, 0.28304364216491273, 0.2957780923212284, 0.2866730544553302, 0.29462838344907727, 0.30149017842183534, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06493901702233285, 0.0801045149593147, 0.09079570570023354, 0.07886916332421334, 0.07488405994327818, 0.06446446584010168, 0.07058018134027355, 0.0818553923135158, 0.06900466787955883, 0.06412485652116229, 0.09029552138802688, 0.07240593512147442, 0.06544867324721348, 0.05986924707032826, 0.06941165720122333, 0.06623165107721163, 0.0700266876075768, 0.062404466442906426, 0.8178853138867348, 0.9050158377537306, 0.9041250321857881, 0.9208539649407906, 0.9225922664452074, 0.8877717747859707, 0.8863673329105605, 0.8731748303686914, 0.8467445637629513, 0.20289276284501956, 0.15583019107311047, 0.15732308641935056, 0.15660637524049703, 0.16344107559457965, 0.17928077676672216, 0.15421288604849592, 0.14786652535618616, 0.1648889893311163, 0.2165834686085153, 0.2024967109908128, 0.19120284248712638, 0.19411582843735564, 0.1912555581039873, 0.19094253171091313, 0.19629378295664368, 0.18089175257289503, 0.1743521192545171, 0.07694393646859499, 0.08894510381114706, 0.07445513390378766, 0.07946941913523553, 0.08106708185676637, 0.09231134253633388, 0.11000056891690713, 0.09330142867358715, 0.08692830077467328, 0.0903572103233864, 0.06287564019630476, 0.08899668901925473, 0.08326763233290313, 0.0751208234863876, 0.08402464831031575, 0.08932458383167774, 0.08194351236821418, 0.10440969636659869, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04323341621118704, 0.050419008267295395, 0.08818033770417555, 0.05435745356683164, 0.02597136299029823, 0.02747946188678052, 0.06590629775129087, 0.041010469638381064, 0.08205822180565137, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018459927769350126, 0.04730491325565145, 0.04121427371814279, 0.03777544977942193, 0.03638826234835302, 0.04930262268261376, 0.02959781927526217, 0.030714802109142347, 0.031518928970461046, 0.3034176888178005, 0.27377851227732297, 0.31094294491535346, 0.2996435031959277, 0.28974663882454854, 0.30029710061296466, 0.29585313637232935, 0.33067206901349855, 0.2765456720275179, 0.07612534662998005, 0.0778583541379656, 0.08513642692070844, 0.07247657567509791, 0.07472611300947118, 0.07135359634036831, 0.07213265009819225, 0.06660595268578651, 0.06998765863171252, 0.11849521674010899, 0.14694800154470844, 0.12864736762537798, 0.14511249803016124, 0.15611690933176192, 0.1493279155815035, 0.16421919686048225, 0.1552191793215819, 0.16851649910617872, 0.21326061547400554, 0.21607782754867588, 0.17255133871399908, 0.20431797999545676, 0.23161742875531832, 0.19566892355751597, 0.19874274505846456, 0.19529368329883, 0.20584406093040652, 0.1599236421880702, 0.1422542040618604, 0.15876822922019473, 0.1617075527140852, 0.20008515474212896, 0.1499788954949659, 0.16379887547847627, 0.13205608514170708, 0.14639577246535607, 0.1649513377010584, 0.18144436655751361, 0.16044343200349664, 0.2079150948255758, 0.19051670714658298, 0.19563079080237655, 0.18056121189596108, 0.17329627741617182, 0.18426945134766404, 0.16970847030623482, 0.1707206279477621, 0.16740815550914645, 0.16912395545162184, 0.19884921176587245, 0.17369096117275495, 0.17147379385177597, 0.16615993030838194, 0.1694925841433973, 0.18524369398629847, 0.32807307354707804, 0.39645427212650086, 0.38395400308469163, 0.33358134305773024, 0.2579449758709643, 0.1352682166313831, 0.27907261079230006, 0.1499081679589115, 0.2375281919810216, 0.23503439605740806, 0.26864278444687195, 0.21995045797261303, 0.2965013772814583, 0.1977903853293681, 0.143024695919992, 0.18095129463541093, 0.19517087192079718, 0.19510889562457445, 0.17612133399252194, 0.18312479876197107, 0.18506227217457116, 0.19586636288232562, 0.1876053290472942, 0.1706782384064789, 0.2044566712982392, 0.18663236266204508, 0.07719340371954075, 0.0692958166412867, 0.06942846932000868, 0.07888617608249737, 0.07252610779382762, 0.07478638695146944, 0.08107651769510527, 0.07192042594342951, 0.07493858325344449]}, "mutation_prompt": null}
{"id": "11c55fad-9aad-4629-94c1-9cf8ed91b7ed", "solution": "import numpy as np\n\nclass EnhancedMutationOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5, global_explore_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n        self.global_explore_rate = global_explore_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        mutation_rate = 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                if np.random.rand() < self.global_explore_rate:\n                    candidate_position = np.random.uniform(-5.0, 5.0, self.dim)\n                else:\n                    candidate_position = np.clip(swarm[i] + np.random.normal(0, mutation_rate, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n                        mutation_rate *= 0.99  # Adapt mutation rate based on performance\n        return best_position", "name": "EnhancedMutationOptimizer", "description": "Introducing a dynamic mutation strategy based on local search and global exploration to enhance convergence speed.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a5008c80-1ddd-4670-86a2-92f1c0fd686b", "metadata": {"aucs": [0.2776438160381436, 0.2874050547815652, 0.26758537150487083, 0.32973518975522176, 0.28304364216491273, 0.2957780923212284, 0.2866730544553302, 0.29462838344907727, 0.30149017842183534, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06493901702233285, 0.0801045149593147, 0.09079570570023354, 0.07886916332421334, 0.07488405994327818, 0.06446446584010168, 0.07058018134027355, 0.0818553923135158, 0.06900466787955883, 0.06412485652116229, 0.09029552138802688, 0.07240593512147442, 0.06544867324721348, 0.05986924707032826, 0.06941165720122333, 0.06623165107721163, 0.0700266876075768, 0.062404466442906426, 0.8178853138867348, 0.9050158377537306, 0.9041250321857881, 0.9208539649407906, 0.9225922664452074, 0.8877717747859707, 0.8863673329105605, 0.8731748303686914, 0.8467445637629513, 0.20289276284501956, 0.15583019107311047, 0.15732308641935056, 0.15660637524049703, 0.16344107559457965, 0.17928077676672216, 0.15421288604849592, 0.14786652535618616, 0.1648889893311163, 0.2165834686085153, 0.2024967109908128, 0.19120284248712638, 0.19411582843735564, 0.1912555581039873, 0.19094253171091313, 0.19629378295664368, 0.18089175257289503, 0.1743521192545171, 0.07694393646859499, 0.08894510381114706, 0.07445513390378766, 0.07946941913523553, 0.08106708185676637, 0.09231134253633388, 0.11000056891690713, 0.09330142867358715, 0.08692830077467328, 0.0903572103233864, 0.06287564019630476, 0.08899668901925473, 0.08326763233290313, 0.0751208234863876, 0.08402464831031575, 0.08932458383167774, 0.08194351236821418, 0.10440969636659869, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04323341621118704, 0.050419008267295395, 0.08818033770417555, 0.05435745356683164, 0.02597136299029823, 0.02747946188678052, 0.06590629775129087, 0.041010469638381064, 0.08205822180565137, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018459927769350126, 0.04730491325565145, 0.04121427371814279, 0.03777544977942193, 0.03638826234835302, 0.04930262268261376, 0.02959781927526217, 0.030714802109142347, 0.031518928970461046, 0.3034176888178005, 0.27377851227732297, 0.31094294491535346, 0.2996435031959277, 0.28974663882454854, 0.30029710061296466, 0.29585313637232935, 0.33067206901349855, 0.2765456720275179, 0.07612534662998005, 0.0778583541379656, 0.08513642692070844, 0.07247657567509791, 0.07472611300947118, 0.07135359634036831, 0.07213265009819225, 0.06660595268578651, 0.06998765863171252, 0.11849521674010899, 0.14694800154470844, 0.12864736762537798, 0.14511249803016124, 0.15611690933176192, 0.1493279155815035, 0.16421919686048225, 0.1552191793215819, 0.16851649910617872, 0.21326061547400554, 0.21607782754867588, 0.17255133871399908, 0.20431797999545676, 0.23161742875531832, 0.19566892355751597, 0.19874274505846456, 0.19529368329883, 0.20584406093040652, 0.1599236421880702, 0.1422542040618604, 0.15876822922019473, 0.1617075527140852, 0.20008515474212896, 0.1499788954949659, 0.16379887547847627, 0.13205608514170708, 0.14639577246535607, 0.1649513377010584, 0.18144436655751361, 0.16044343200349664, 0.2079150948255758, 0.19051670714658298, 0.19563079080237655, 0.18056121189596108, 0.17329627741617182, 0.18426945134766404, 0.16970847030623482, 0.1707206279477621, 0.16740815550914645, 0.16912395545162184, 0.19884921176587245, 0.17369096117275495, 0.17147379385177597, 0.16615993030838194, 0.1694925841433973, 0.18524369398629847, 0.32807307354707804, 0.39645427212650086, 0.38395400308469163, 0.33358134305773024, 0.2579449758709643, 0.1352682166313831, 0.27907261079230006, 0.1499081679589115, 0.2375281919810216, 0.23503439605740806, 0.26864278444687195, 0.21995045797261303, 0.2965013772814583, 0.1977903853293681, 0.143024695919992, 0.18095129463541093, 0.19517087192079718, 0.19510889562457445, 0.17612133399252194, 0.18312479876197107, 0.18506227217457116, 0.19586636288232562, 0.1876053290472942, 0.1706782384064789, 0.2044566712982392, 0.18663236266204508, 0.07719340371954075, 0.0692958166412867, 0.06942846932000868, 0.07888617608249737, 0.07252610779382762, 0.07478638695146944, 0.08107651769510527, 0.07192042594342951, 0.07493858325344449]}, "mutation_prompt": null}
{"id": "4100c7f2-1e74-49e5-85e0-479644d76a8d", "solution": "import numpy as np\n\nclass EnhancedMutationOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5, global_explore_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n        self.global_explore_rate = global_explore_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        mutation_rate = 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                if np.random.rand() < self.global_explore_rate:\n                    candidate_position = np.random.uniform(-5.0, 5.0, self.dim)\n                else:\n                    candidate_position = np.clip(swarm[i] + np.random.normal(0, mutation_rate, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n                        mutation_rate *= 0.99  # Adapt mutation rate based on performance\n        return best_position", "name": "EnhancedMutationOptimizer", "description": "Introducing a dynamic mutation strategy based on local search and global exploration to enhance convergence speed.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a5008c80-1ddd-4670-86a2-92f1c0fd686b", "metadata": {"aucs": [0.2776438160381436, 0.2874050547815652, 0.26758537150487083, 0.32973518975522176, 0.28304364216491273, 0.2957780923212284, 0.2866730544553302, 0.29462838344907727, 0.30149017842183534, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06493901702233285, 0.0801045149593147, 0.09079570570023354, 0.07886916332421334, 0.07488405994327818, 0.06446446584010168, 0.07058018134027355, 0.0818553923135158, 0.06900466787955883, 0.06412485652116229, 0.09029552138802688, 0.07240593512147442, 0.06544867324721348, 0.05986924707032826, 0.06941165720122333, 0.06623165107721163, 0.0700266876075768, 0.062404466442906426, 0.8178853138867348, 0.9050158377537306, 0.9041250321857881, 0.9208539649407906, 0.9225922664452074, 0.8877717747859707, 0.8863673329105605, 0.8731748303686914, 0.8467445637629513, 0.20289276284501956, 0.15583019107311047, 0.15732308641935056, 0.15660637524049703, 0.16344107559457965, 0.17928077676672216, 0.15421288604849592, 0.14786652535618616, 0.1648889893311163, 0.2165834686085153, 0.2024967109908128, 0.19120284248712638, 0.19411582843735564, 0.1912555581039873, 0.19094253171091313, 0.19629378295664368, 0.18089175257289503, 0.1743521192545171, 0.07694393646859499, 0.08894510381114706, 0.07445513390378766, 0.07946941913523553, 0.08106708185676637, 0.09231134253633388, 0.11000056891690713, 0.09330142867358715, 0.08692830077467328, 0.0903572103233864, 0.06287564019630476, 0.08899668901925473, 0.08326763233290313, 0.0751208234863876, 0.08402464831031575, 0.08932458383167774, 0.08194351236821418, 0.10440969636659869, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04323341621118704, 0.050419008267295395, 0.08818033770417555, 0.05435745356683164, 0.02597136299029823, 0.02747946188678052, 0.06590629775129087, 0.041010469638381064, 0.08205822180565137, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018459927769350126, 0.04730491325565145, 0.04121427371814279, 0.03777544977942193, 0.03638826234835302, 0.04930262268261376, 0.02959781927526217, 0.030714802109142347, 0.031518928970461046, 0.3034176888178005, 0.27377851227732297, 0.31094294491535346, 0.2996435031959277, 0.28974663882454854, 0.30029710061296466, 0.29585313637232935, 0.33067206901349855, 0.2765456720275179, 0.07612534662998005, 0.0778583541379656, 0.08513642692070844, 0.07247657567509791, 0.07472611300947118, 0.07135359634036831, 0.07213265009819225, 0.06660595268578651, 0.06998765863171252, 0.11849521674010899, 0.14694800154470844, 0.12864736762537798, 0.14511249803016124, 0.15611690933176192, 0.1493279155815035, 0.16421919686048225, 0.1552191793215819, 0.16851649910617872, 0.21326061547400554, 0.21607782754867588, 0.17255133871399908, 0.20431797999545676, 0.23161742875531832, 0.19566892355751597, 0.19874274505846456, 0.19529368329883, 0.20584406093040652, 0.1599236421880702, 0.1422542040618604, 0.15876822922019473, 0.1617075527140852, 0.20008515474212896, 0.1499788954949659, 0.16379887547847627, 0.13205608514170708, 0.14639577246535607, 0.1649513377010584, 0.18144436655751361, 0.16044343200349664, 0.2079150948255758, 0.19051670714658298, 0.19563079080237655, 0.18056121189596108, 0.17329627741617182, 0.18426945134766404, 0.16970847030623482, 0.1707206279477621, 0.16740815550914645, 0.16912395545162184, 0.19884921176587245, 0.17369096117275495, 0.17147379385177597, 0.16615993030838194, 0.1694925841433973, 0.18524369398629847, 0.32807307354707804, 0.39645427212650086, 0.38395400308469163, 0.33358134305773024, 0.2579449758709643, 0.1352682166313831, 0.27907261079230006, 0.1499081679589115, 0.2375281919810216, 0.23503439605740806, 0.26864278444687195, 0.21995045797261303, 0.2965013772814583, 0.1977903853293681, 0.143024695919992, 0.18095129463541093, 0.19517087192079718, 0.19510889562457445, 0.17612133399252194, 0.18312479876197107, 0.18506227217457116, 0.19586636288232562, 0.1876053290472942, 0.1706782384064789, 0.2044566712982392, 0.18663236266204508, 0.07719340371954075, 0.0692958166412867, 0.06942846932000868, 0.07888617608249737, 0.07252610779382762, 0.07478638695146944, 0.08107651769510527, 0.07192042594342951, 0.07493858325344449]}, "mutation_prompt": null}
{"id": "dfffe451-52ef-4aaa-ade3-c2f81efbd8ca", "solution": "import numpy as np\n\nclass DynamicNeighborhoodOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5, global_explore_rate=0.1, neighborhood_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n        self.global_explore_rate = global_explore_rate\n        self.neighborhood_rate = neighborhood_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        mutation_rate = 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                if np.random.rand() < self.global_explore_rate:\n                    candidate_position = np.random.uniform(-5.0, 5.0, self.dim)\n                else:\n                    candidate_position = np.clip(swarm[i] + np.random.normal(0, mutation_rate, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n                        mutation_rate *= 0.99\n\n            if np.random.rand() < self.neighborhood_rate:\n                new_swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n                best_new_position = new_swarm[np.argmin([func(p) for p in new_swarm])]\n                if func(best_new_position) < func(best_position):\n                    swarm = new_swarm\n                    best_position = best_new_position\n\n        return best_position", "name": "DynamicNeighborhoodOptimizer", "description": "Incorporating a dynamic neighborhood restructuring mechanism to adapt to function landscape changes and enhance exploration-exploitation balance.", "configspace": "", "generation": 94, "fitness": 0.16048586324782213, "feedback": "The algorithm DynamicNeighborhoodOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "a5008c80-1ddd-4670-86a2-92f1c0fd686b", "metadata": {"aucs": [0.2680797692659881, 0.320995727400456, 0.2671055801986071, 0.2739235335739605, 0.26347222694011885, 0.2914309331308562, 0.27281701269872216, 0.28035411387984455, 0.28288390687874854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002066364843031576, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11039262280621409, 0.09303252624148406, 0.07782680542274178, 0.07258600465737286, 0.07053978469274935, 0.06955695752412516, 0.06985985081542145, 0.09423907156459521, 0.07367475751157126, 0.05639364364728283, 0.06645726986047462, 0.050259350252001456, 0.05928285796472488, 0.06846810751607735, 0.05617352524340946, 0.055462464433074454, 0.05798708241778805, 0.054304268774383324, 0.8456934300128626, 0.9503701852958402, 0.8913857989489377, 0.8456340450752297, 0.9037587810007778, 0.9311888198432257, 0.9167107543098387, 0.8935897476509661, 0.9037003660470128, 0.18019507913366073, 0.18598418952320206, 0.16025362611725502, 0.15053395436012396, 0.16180285191861843, 0.17900893705188958, 0.1666923684934749, 0.1630467721448331, 0.1568059424435343, 0.2023331510401164, 0.17745275327741705, 0.17594069992096517, 0.18263779072478814, 0.183528968093016, 0.20899879500715401, 0.2043088571514109, 0.1652011406167454, 0.2044019141504234, 0.08907947675675953, 0.0672591093853665, 0.07650049785605328, 0.07924566251855814, 0.08880177098812125, 0.11845701488396321, 0.09075416431296923, 0.07622958664421509, 0.07397068808779073, 0.07780759039607033, 0.07973174280681272, 0.07565963728972513, 0.09759147411779145, 0.07551282530918813, 0.09288684991846807, 0.09014081202378454, 0.08031843540485495, 0.08651925199881572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11321641612556888, 0.054758297906422726, 0.07541124824761103, 0.038461849503491075, 0.02235719758929222, 0.02254422055428007, 0.05140992907187081, 0.07666572516370418, 0.03372631860512065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018758920211892294, 0.02972262333369058, 0.02386373846683687, 0.017747784410659717, 0.03376248897788936, 0.04076229278883836, 0.028497958706705684, 0.02268659726916522, 0.02442443197202615, 0.28027555433026574, 0.2717642205219609, 0.2720492283733703, 0.27796414594319063, 0.2797441117675459, 0.28392581492630764, 0.27057436785786904, 0.27063357048153236, 0.28508359349578927, 0.07552669961310532, 0.09275581257228327, 0.06563448607901323, 0.08200744790482173, 0.07558183783874572, 0.08173448528855043, 0.06397513706824143, 0.06905889833143719, 0.08102843468767007, 0.15534579451415897, 0.1344806391793536, 0.19008886776832046, 0.1369663528650219, 0.14597311463479, 0.14394984273785738, 0.14630853197631988, 0.14731584318120639, 0.14178797083504835, 0.20822901854053788, 0.20348029538725276, 0.20934371065739676, 0.2002938740855924, 0.20244716535714125, 0.20544754850402647, 0.20293628070020053, 0.20226258302842437, 0.20292727640065633, 0.1531250350764718, 0.13801980986829598, 0.14925871742642416, 0.1604158134801248, 0.14787707263368755, 0.15349322824720946, 0.15559510849695912, 0.16342287910191977, 0.13509982452798885, 0.20304592735291427, 0.18615126966881845, 0.16759621620504572, 0.1761974538672968, 0.17703304187964108, 0.16509197100376882, 0.17158293207990005, 0.17737126623921318, 0.1768384208509015, 0.17638371638426398, 0.1675503738566444, 0.16363763746567206, 0.1604204269807471, 0.17578548674906702, 0.16765259657633702, 0.16531968039516431, 0.16426202886346475, 0.16973588485730906, 0.16989938279652483, 0.13733777213153442, 0.2798947228015609, 0.3794856156827223, 0.22007224298407568, 0.4126322497744007, 0.3170766869443029, 0.13374241678311027, 0.16986669412875877, 0.19600585925636216, 0.24401612265189787, 0.25852102717055736, 0.31453434690441706, 0.18112366467224428, 0.2776786870040101, 0.19269615738490398, 0.19178357384206013, 0.16216142295161495, 0.17944064237668622, 0.175590630410299, 0.1840214885072251, 0.17132132014856505, 0.16565164129913268, 0.19388593499252782, 0.183658028470016, 0.1853845341691276, 0.18117753962260463, 0.0788529186786463, 0.06653933639932441, 0.06917443509001242, 0.07008656358197318, 0.0739977801039482, 0.08304523139146347, 0.0735112156544514, 0.07854457868340925, 0.06703714940133321]}, "mutation_prompt": null}
{"id": "73646f30-4ed2-431f-bda1-477589cd9be7", "solution": "import numpy as np\n\nclass DynamicPopulationOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5, diversity_threshold=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n        self.diversity_threshold = diversity_threshold\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        mutation_rate = 1.0\n\n        for _ in range(self.budget):\n            diversity = np.mean(np.std(swarm, axis=0))\n            if diversity < self.diversity_threshold:\n                self.num_neighbors = min(2 * self.num_neighbors, 100)  # Increase population size if diversity is low\n\n            for i in range(self.num_neighbors):\n                if np.random.rand() < 0.1:\n                    candidate_position = np.random.uniform(-5.0, 5.0, self.dim)\n                else:\n                    candidate_position = np.clip(swarm[i] + np.random.normal(0, mutation_rate, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n                        mutation_rate *= 0.99  # Adapt mutation rate based on performance\n        return best_position", "name": "DynamicPopulationOptimizer", "description": "Implement a dynamic population size adaptation mechanism based on the population diversity to enhance exploration-exploitation balance and speed up convergence.", "configspace": "", "generation": 95, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 5 is out of bounds for axis 0 with size 5').", "error": "IndexError('index 5 is out of bounds for axis 0 with size 5')", "parent_id": "a5008c80-1ddd-4670-86a2-92f1c0fd686b", "metadata": {}, "mutation_prompt": null}
{"id": "151abb14-2c2c-464e-a247-291e9296e7e7", "solution": "import numpy as np\n\nclass DynamicNeighborhoodOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5, global_explore_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n        self.global_explore_rate = global_explore_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                neighbors = np.delete(swarm, i, axis=0)\n                best_neighbor = neighbors[np.argmin([func(p) for p in neighbors])]\n                candidate_position = np.clip(swarm[i] + np.random.normal(0, 0.1, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n        return best_position", "name": "DynamicNeighborhoodOptimizer", "description": "Implement a dynamic neighborhood reassignment strategy to promote diverse exploration and exploit promising regions effectively for faster convergence.", "configspace": "", "generation": 96, "fitness": 0.08980915658853494, "feedback": "The algorithm DynamicNeighborhoodOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "a5008c80-1ddd-4670-86a2-92f1c0fd686b", "metadata": {"aucs": [0.305790212011933, 0.30887190893394467, 0.30518273197597723, 0.1556128055613768, 0.2787653514708296, 0.1957487957279076, 0.2281643352124556, 0.2600237237451771, 0.2983261130142084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009456679894789266, 9.999999999998899e-05, 9.999999999998899e-05, 0.023657770212534124, 0.01106027906529039, 0.005810977781065763, 0.03662848239830929, 0.015069685657638887, 0.008856419171316188, 0.005000470488393138, 0.0032016272184967054, 9.999999999998899e-05, 0.002664246390079228, 0.00017963937123754992, 9.999999999998899e-05, 0.012220159692286292, 0.0007163592916472616, 9.999999999998899e-05, 0.13365017041275917, 0.05876276378984635, 0.0859188119917742, 0.07849620019595005, 0.07607891429228908, 0.07377304979897437, 0.06240377355079363, 0.08937787879804437, 0.06526992465619552, 0.1348771956971505, 0.06461069908143524, 0.10028548644411095, 0.11658198780833351, 0.17969867922276028, 0.1785278456471795, 0.1657449638372125, 0.04172382401722974, 0.05578626643704554, 0.08509448934178598, 0.02312755685797907, 0.02010870682395094, 0.01496919771505889, 9.999999999998899e-05, 9.999999999998899e-05, 0.04383268371822291, 9.999999999998899e-05, 0.027713220611972456, 0.11076167420956662, 0.09664605599291354, 0.09834581872452741, 0.09522062058637126, 0.09446044345027915, 0.08400236251259485, 0.09674037014587444, 0.08690836235859223, 0.0917483511427537, 0.11512469493044641, 0.08334406852975118, 0.07633948078197461, 0.1077125146170742, 0.06848698931678776, 0.0721006614205224, 0.12629787677010773, 0.08060242639933313, 0.08476992924360838, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007858211644088398, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041645750551213, 0.05772923384388928, 0.0996040985353549, 0.058315764757414734, 0.03621656875816148, 0.016198616092892415, 0.11270957498806533, 0.03408192236901686, 0.0487953210495542, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0017755453724163095, 0.025569284753924837, 0.03126337619821429, 0.019591336096758227, 0.05421134815920481, 0.014388781943731055, 0.02402615204586578, 0.03280334201543389, 0.08171142954997068, 0.26170904764307024, 0.29235700190144576, 0.35304422081668607, 0.19593506951721407, 0.2647456719292727, 0.15672481148841289, 0.2372743906803384, 0.2445876176460281, 0.2659587351973922, 9.999999999998899e-05, 0.0008518984984619005, 9.999999999998899e-05, 9.999999999998899e-05, 0.01484815019702368, 0.02072077188410626, 9.999999999998899e-05, 0.001087002894514466, 0.06147103631813866, 0.13247783709334837, 0.16513596393496865, 0.1275120853142746, 0.13056775128470177, 0.11324115341018715, 0.12580692353301615, 0.14758732869107538, 0.14995639046606446, 0.12412123906478645, 0.12408819258229453, 0.12217154439232514, 0.11570520718204025, 0.14311208649017826, 0.11399786559784297, 0.11446989502681959, 0.13560065981158587, 0.12358991000671993, 0.09122770338521424, 0.05849836592446023, 0.05875978814086613, 0.05869262779855833, 0.07879279014455531, 0.054711189255171155, 0.07449604515495645, 0.06916741969113338, 0.06051797009153248, 0.024818070667827485, 0.14039052847528533, 0.0858781573871591, 0.10710031179110924, 0.1684880637827817, 0.09423596559213487, 0.0917943384688622, 0.14825974878754222, 0.08277493640818645, 0.12813830927629355, 0.12963914297259038, 0.12752400046848522, 0.11944873624762153, 0.13246045603472556, 0.1380869569685852, 0.16897954701370854, 0.13737745602761864, 0.12123267632921253, 0.0986447874718287, 0.163625400824849, 0.11952096187129335, 0.4267524258344956, 0.3464098352210524, 0.1939077194105383, 0.09585113549515267, 0.15841694672023132, 0.14063503485115836, 0.1375594272541395, 0.29144452696832046, 0.2208468351279077, 0.18510282003725176, 0.13178850007731346, 0.21660488365679875, 0.15911245662594464, 0.124638141846792, 0.07239744976720908, 0.10713548122620364, 0.17421108151181375, 0.1953320882171956, 0.17114817064936994, 0.16704598443792307, 0.16409138965533188, 0.17106703683670588, 0.15785375838048277, 0.17475708220702946, 0.16759778483511878, 0.029839022007187133, 0.021076439523228352, 0.02667246750758845, 0.02481107185565712, 0.02591496600295673, 0.017954885270664467, 0.030078989160364666, 0.025465158095442142, 0.02776889139228711]}, "mutation_prompt": null}
{"id": "d30d04fb-f328-4cfa-a782-39fda44250d6", "solution": "import numpy as np\n\nclass EnhancedInertiaOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5, inertia_weight=0.5, inertia_decay=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n        self.inertia_weight = inertia_weight\n        self.inertia_decay = inertia_decay\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])\n        inertia_weight = self.inertia_weight\n\n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                candidate_position = np.clip(swarm[i] + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n                        inertia_weight = max(0.2, inertia_weight * self.inertia_decay)  # Adapt inertia weight based on fitness improvement\n                else:\n                    swarm[i] = swarm[i] + inertia_weight * (candidate_position - swarm[i])\n\n        return best_position", "name": "EnhancedInertiaOptimizer", "description": "Integrating a dynamic inertia weight adaptation mechanism based on fitness improvement to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 14, 9, '        inertia_weight = self.inertia_weight\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 14, 9, '        inertia_weight = self.inertia_weight\\n'))", "parent_id": "a5008c80-1ddd-4670-86a2-92f1c0fd686b", "metadata": {}, "mutation_prompt": null}
{"id": "f05bf2af-01cc-442b-a147-750444e117b7", "solution": "import numpy as np\n\nclass CoevolutionaryOptimizer:\n    def __init__(self, budget, dim, num_subpopulations=5, num_individuals_per_subpopulation=10):\n        self.budget = budget\n        self.dim = dim\n        self.num_subpopulations = num_subpopulations\n        self.num_individuals_per_subpopulation = num_individuals_per_subpopulation\n\n    def __call__(self, func):\n        subpopulations = [np.random.uniform(-5.0, 5.0, (self.num_individuals_per_subpopulation, self.dim)) for _ in range(self.num_subpopulations)]\n        best_positions = [pop[np.argmin([func(p) for p in pop])] for pop in subpopulations]\n\n        for _ in range(self.budget):\n            for i in range(self.num_subpopulations):\n                for j in range(self.num_individuals_per_subpopulation):\n                    candidate_position = np.clip(subpopulations[i][j] + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    if func(candidate_position) < func(subpopulations[i][j]):\n                        subpopulations[i][j] = candidate_position\n                        if func(candidate_position) < func(best_positions[i]):\n                            best_positions[i] = candidate_position\n\n        return best_positions[np.argmin([func(p) for p in best_positions])]", "name": "CoevolutionaryOptimizer", "description": "Implement a competitive coevolutionary algorithm where multiple subpopulations compete and share information to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 98, "fitness": 0.1207399256094375, "feedback": "The algorithm CoevolutionaryOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.10.", "error": "", "parent_id": "a5008c80-1ddd-4670-86a2-92f1c0fd686b", "metadata": {"aucs": [0.23570891834818286, 0.2281292365804224, 0.24714092563670675, 0.20892311192647972, 0.22134538713204144, 0.23609350457517886, 0.24144183878022563, 0.25169693586523123, 0.24281664446104034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05187489832308878, 0.06421808742441426, 0.06519518449362927, 0.07399489666514814, 0.05974173442885855, 0.06731712743469631, 0.06317616458819852, 0.06003538847134682, 0.06642320567341886, 0.045717750055191964, 0.04326300623844981, 0.03924437540482251, 0.042219291997219965, 0.04088261694548567, 0.047171152573389, 0.05190403552279643, 0.04494082212948436, 0.03916190131351127, 0.3801679794917755, 0.33328390348986825, 0.4151082448550153, 0.49177963636774624, 0.29881369575564565, 0.5444365275817015, 0.546194171244694, 0.46435289962755255, 0.5082637962036827, 0.15047461558979724, 0.08641910503765504, 0.08858206395674917, 0.10620199535855723, 0.11217392636761614, 0.10828396933002549, 0.10152518019149226, 0.10835803841725045, 0.0986592451660645, 0.15614747037723087, 0.15763999878014112, 0.14403753892028448, 0.15502632057079246, 0.15513009604125982, 0.1552338733028229, 0.1514429238108027, 0.14056940422244224, 0.1591745719504979, 0.05197214539938699, 0.02762553972184434, 0.027834206149358942, 0.03889185322175159, 0.0703682264849218, 0.03224649489561848, 0.07528246898078594, 0.04384180402209237, 0.04023184011260561, 0.026244153444830998, 0.06895607326399167, 0.03277393526973282, 0.060682049843384656, 0.04925936744858772, 0.04776434708711075, 0.07465833877151906, 0.07255441535640017, 0.03820151457181331, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058617609684638916, 0.0481789320854521, 0.0398676104087764, 0.06592244861207652, 0.06394543248712847, 0.039930746734202494, 0.062278176607219904, 0.09036660083112402, 0.07544942466045501, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035429723176911843, 0.004689557115211795, 0.003805749078009679, 0.012041082110708312, 0.013782103956119451, 0.0031793003731563907, 0.01881089679775827, 0.012744487735315113, 0.011228312390541562, 0.23144785827816539, 0.2389826887326425, 0.23427758708899027, 0.23795808951350583, 0.21846029761155428, 0.23212756307120097, 0.2429012649888468, 0.2162867150751694, 0.22801555421373865, 0.06078971038772685, 0.05039082953295493, 0.053766589282153276, 0.07106381560879615, 0.058455393484823204, 0.06980758455928626, 0.05166174405248325, 0.05344160745188331, 0.051602561923205004, 0.13549435724886827, 0.11685999743567299, 0.1370059508740855, 0.13487654447804376, 0.15114665636645552, 0.12981409132925614, 0.11997393292178826, 0.15575816061060688, 0.15412156715803282, 0.17556562617432359, 0.18528023793443948, 0.20296095570712547, 0.18279291543197984, 0.17684929437779462, 0.1814903359161374, 0.1853293441933771, 0.18622049933830154, 0.17744459823207648, 0.13690679954284168, 0.12373403282409146, 0.11887390959864264, 0.13556551226567648, 0.12217311679727427, 0.11902979996317775, 0.10989102826425734, 0.12429414122876659, 0.12290057013662559, 0.1544983465994928, 0.1779868409787152, 0.18466553296082322, 0.19954488345261712, 0.16167891072416773, 0.1826383134773495, 0.1820701931765486, 0.17134089560281296, 0.16286960119100136, 0.15657795350085457, 0.1512688841869, 0.14523718528424778, 0.15650455066166846, 0.14566914981158774, 0.14529859362448516, 0.15774423080338162, 0.14493085116258064, 0.15190473960247197, 0.188434178915302, 0.1745603028432512, 0.24268976596698022, 0.23043917995094065, 0.1624167858405965, 0.18183102293463416, 0.29767806202335145, 0.1654596265533541, 0.18094753538848962, 0.2082081119343442, 0.18864525960370326, 0.16867287669877384, 0.20166902935167297, 0.21897875805858535, 0.17959244324452195, 0.1856123421324407, 0.14811263685414067, 0.17303904567427308, 0.17377664225799505, 0.16994618881065704, 0.16939303974573483, 0.17218811920955035, 0.17674701377259283, 0.17417020794423388, 0.1729610798293394, 0.18773499831974272, 0.17646540725321125, 0.05409101586819465, 0.05860708266712844, 0.06783168343963042, 0.06928471028597138, 0.0665010127939033, 0.06931060246862675, 0.06319226650822474, 0.057723043444253164, 0.05896221201245366]}, "mutation_prompt": null}
{"id": "c1bab0b2-8acd-4d1e-9127-bfeda9d93b6e", "solution": "import numpy as np\n\nclass EnhancedMutationOptimizer:\n    def __init__(self, budget, dim, num_neighbors=5, global_explore_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_neighbors = num_neighbors\n        self.global_explore_rate = global_explore_rate\n\n    def __call__(self, func):\n        swarm = np.random.uniform(-5.0, 5.0, (self.num_neighbors, self.dim))\n        best_position = swarm[np.argmin([func(p) for p in swarm])]\n        mutation_rate = 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.num_neighbors):\n                if np.random.rand() < self.global_explore_rate:\n                    candidate_position = np.random.uniform(-5.0, 5.0, self.dim)\n                else:\n                    candidate_position = np.clip(swarm[i] + np.random.normal(0, mutation_rate, self.dim), -5.0, 5.0)\n                if func(candidate_position) < func(swarm[i]):\n                    swarm[i] = candidate_position\n                    if func(candidate_position) < func(best_position):\n                        best_position = candidate_position\n                        mutation_rate *= 0.99  # Adapt mutation rate based on performance\n        return best_position", "name": "EnhancedMutationOptimizer", "description": "Introducing a dynamic mutation strategy based on local search and global exploration to enhance convergence speed.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a5008c80-1ddd-4670-86a2-92f1c0fd686b", "metadata": {"aucs": [0.2776438160381436, 0.2874050547815652, 0.26758537150487083, 0.32973518975522176, 0.28304364216491273, 0.2957780923212284, 0.2866730544553302, 0.29462838344907727, 0.30149017842183534, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06493901702233285, 0.0801045149593147, 0.09079570570023354, 0.07886916332421334, 0.07488405994327818, 0.06446446584010168, 0.07058018134027355, 0.0818553923135158, 0.06900466787955883, 0.06412485652116229, 0.09029552138802688, 0.07240593512147442, 0.06544867324721348, 0.05986924707032826, 0.06941165720122333, 0.06623165107721163, 0.0700266876075768, 0.062404466442906426, 0.8178853138867348, 0.9050158377537306, 0.9041250321857881, 0.9208539649407906, 0.9225922664452074, 0.8877717747859707, 0.8863673329105605, 0.8731748303686914, 0.8467445637629513, 0.20289276284501956, 0.15583019107311047, 0.15732308641935056, 0.15660637524049703, 0.16344107559457965, 0.17928077676672216, 0.15421288604849592, 0.14786652535618616, 0.1648889893311163, 0.2165834686085153, 0.2024967109908128, 0.19120284248712638, 0.19411582843735564, 0.1912555581039873, 0.19094253171091313, 0.19629378295664368, 0.18089175257289503, 0.1743521192545171, 0.07694393646859499, 0.08894510381114706, 0.07445513390378766, 0.07946941913523553, 0.08106708185676637, 0.09231134253633388, 0.11000056891690713, 0.09330142867358715, 0.08692830077467328, 0.0903572103233864, 0.06287564019630476, 0.08899668901925473, 0.08326763233290313, 0.0751208234863876, 0.08402464831031575, 0.08932458383167774, 0.08194351236821418, 0.10440969636659869, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04323341621118704, 0.050419008267295395, 0.08818033770417555, 0.05435745356683164, 0.02597136299029823, 0.02747946188678052, 0.06590629775129087, 0.041010469638381064, 0.08205822180565137, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018459927769350126, 0.04730491325565145, 0.04121427371814279, 0.03777544977942193, 0.03638826234835302, 0.04930262268261376, 0.02959781927526217, 0.030714802109142347, 0.031518928970461046, 0.3034176888178005, 0.27377851227732297, 0.31094294491535346, 0.2996435031959277, 0.28974663882454854, 0.30029710061296466, 0.29585313637232935, 0.33067206901349855, 0.2765456720275179, 0.07612534662998005, 0.0778583541379656, 0.08513642692070844, 0.07247657567509791, 0.07472611300947118, 0.07135359634036831, 0.07213265009819225, 0.06660595268578651, 0.06998765863171252, 0.11849521674010899, 0.14694800154470844, 0.12864736762537798, 0.14511249803016124, 0.15611690933176192, 0.1493279155815035, 0.16421919686048225, 0.1552191793215819, 0.16851649910617872, 0.21326061547400554, 0.21607782754867588, 0.17255133871399908, 0.20431797999545676, 0.23161742875531832, 0.19566892355751597, 0.19874274505846456, 0.19529368329883, 0.20584406093040652, 0.1599236421880702, 0.1422542040618604, 0.15876822922019473, 0.1617075527140852, 0.20008515474212896, 0.1499788954949659, 0.16379887547847627, 0.13205608514170708, 0.14639577246535607, 0.1649513377010584, 0.18144436655751361, 0.16044343200349664, 0.2079150948255758, 0.19051670714658298, 0.19563079080237655, 0.18056121189596108, 0.17329627741617182, 0.18426945134766404, 0.16970847030623482, 0.1707206279477621, 0.16740815550914645, 0.16912395545162184, 0.19884921176587245, 0.17369096117275495, 0.17147379385177597, 0.16615993030838194, 0.1694925841433973, 0.18524369398629847, 0.32807307354707804, 0.39645427212650086, 0.38395400308469163, 0.33358134305773024, 0.2579449758709643, 0.1352682166313831, 0.27907261079230006, 0.1499081679589115, 0.2375281919810216, 0.23503439605740806, 0.26864278444687195, 0.21995045797261303, 0.2965013772814583, 0.1977903853293681, 0.143024695919992, 0.18095129463541093, 0.19517087192079718, 0.19510889562457445, 0.17612133399252194, 0.18312479876197107, 0.18506227217457116, 0.19586636288232562, 0.1876053290472942, 0.1706782384064789, 0.2044566712982392, 0.18663236266204508, 0.07719340371954075, 0.0692958166412867, 0.06942846932000868, 0.07888617608249737, 0.07252610779382762, 0.07478638695146944, 0.08107651769510527, 0.07192042594342951, 0.07493858325344449]}, "mutation_prompt": null}
