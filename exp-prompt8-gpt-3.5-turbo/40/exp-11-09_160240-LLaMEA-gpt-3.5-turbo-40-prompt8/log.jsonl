{"id": "afe9ece6-7039-4c64-851e-b116d519ca7c", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "70afd55d-89e5-4454-90d2-5265bcab26b1", "solution": "import numpy as np\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        mutation_scaling_factor = 0.5\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            diversity = np.std(population)\n            mutation_rate = mutation_scaling_factor / diversity\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + mutation_rate * np.random.normal(0, 1, self.dim)\n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Introducing dynamic mutation scaling based on population diversity enhances convergence speed.", "configspace": "", "generation": 1, "fitness": 0.0872443685900121, "feedback": "The algorithm DynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "afe9ece6-7039-4c64-851e-b116d519ca7c", "metadata": {"aucs": [0.15796629411109464, 0.17308330042036923, 0.15391762241435702, 0.15334210411822802, 0.19404355399985518, 0.1895377580546871, 0.1522534709739708, 0.1374850313369128, 0.1641368692384798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040559725244184275, 0.04543175668492827, 0.04786023291033248, 0.05018019840238319, 0.03659671667746822, 0.04499576649232773, 0.03746623173122321, 0.03776906656004919, 0.0348400767443231, 0.024813501852623987, 0.03352147764511504, 0.03584321361451437, 0.047532383032761416, 0.04197502955658894, 0.045027676423725516, 0.027577783393609057, 0.04105622817036769, 0.03080574040782158, 0.08243228963521909, 0.07477658441946644, 0.09050578489168781, 0.0841928800243692, 0.07555241680873748, 0.08673433671295949, 0.06891606272973427, 0.07863383032166171, 0.07486644881094906, 0.09134237437019932, 0.06760782656640696, 0.0676878774621884, 0.052908471746426766, 0.12406169066732853, 0.05757444888627594, 0.04160304607410448, 0.08002320097077431, 0.06570450659774218, 0.11571931870431984, 0.11701178888793495, 0.116419371360313, 0.09989655095657768, 0.10223788127725386, 0.13094530455704534, 0.10681707439131682, 0.12485753140810307, 0.152896621931649, 0.016729297348716643, 0.01374022311990064, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012724715238983109, 0.014604814471857797, 0.0037880202379173555, 0.021789015228267816, 0.01748479961402305, 9.999999999998899e-05, 0.0013660280328445795, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018908481935637766, 9.999999999998899e-05, 0.0017397114934383229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04243483068291676, 0.0773112064623932, 0.04109407068567483, 0.02159780055353311, 0.050041568642219314, 0.08869755207027008, 0.041436985347230615, 0.08324615646636868, 0.038817347358417464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014661859389958565, 9.999999999998899e-05, 0.0051048720807135295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1865224257122855, 0.18861079746641451, 0.18627503786393063, 0.2243003282655679, 0.17585312950153298, 0.17974455967164227, 0.19416098670462356, 0.17190894428457182, 0.2136282567126251, 0.03970084786925221, 0.046701448752047736, 0.04528892216142977, 0.04103575012889504, 0.039967151598948814, 0.05173310665455921, 0.04752495743229179, 0.04619004783418168, 0.05020687652004163, 0.127107317109603, 0.12369052550162796, 0.14875152513092393, 0.12153811265045533, 0.1261271750756483, 0.14073568239517154, 0.12667754749816573, 0.13132785825295346, 0.13573139145677937, 0.16178725336923816, 0.16596453029512048, 0.17222619303525166, 0.16402258148201532, 0.15837706715330369, 0.16415098902304204, 0.15501714289190727, 0.16920401443871758, 0.15355229762222056, 0.11668604074133004, 0.10409350481455493, 0.09404249747696303, 0.11120052378506007, 0.11511915507301296, 0.10109532620933692, 0.09584609236564956, 0.10405696926254127, 0.10203335638451594, 0.16089117840562317, 0.1627648104879278, 0.1628569994280693, 0.17294123735097655, 0.1468824824142837, 0.1509547233186791, 0.15960197603452564, 0.14994168926441875, 0.17609822405927533, 0.14862876987412366, 0.1470959172995634, 0.12477782246420577, 0.14115511595893926, 0.1467450321114817, 0.14132408734923518, 0.14127055784355613, 0.14117604256454175, 0.1468842490465222, 0.1341678881109467, 0.1798405790339641, 0.24448168591351838, 0.1638449157265246, 0.1549484933216847, 0.1560989800387711, 0.16595759450264247, 0.1538700213988461, 0.16953024182190024, 0.15236805294569855, 0.15809413780018544, 0.1789932506793238, 0.1335550868806471, 0.20355404280533362, 0.1642621110170317, 0.13728654974469934, 0.1501390672727757, 0.2130410162121691, 0.19051438791686381, 0.18976558309108482, 0.18516506370263408, 0.18800355086313425, 0.19947004048046646, 0.1746077451947805, 0.1791004189859876, 0.18679112687484956, 0.1832444927125766, 0.05864098444173993, 0.058865893430602556, 0.0579033731347558, 0.05799044743733661, 0.05232339244061823, 0.05858550137143281, 0.046340561578235406, 0.04761548588267306, 0.05972087938310666]}, "mutation_prompt": null}
{"id": "0ee3dca1-c402-402e-bc6c-5fdf4e54b8fc", "solution": "import numpy as np\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        mutation_scaling_factor = 0.5\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            diversity = np.std(population)\n            mutation_rate = mutation_scaling_factor / diversity\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + mutation_rate * np.random.normal(0, 1, self.dim)\n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Introducing dynamic mutation scaling based on population diversity enhances convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70afd55d-89e5-4454-90d2-5265bcab26b1", "metadata": {"aucs": [0.15796629411109464, 0.17308330042036923, 0.15391762241435702, 0.15334210411822802, 0.19404355399985518, 0.1895377580546871, 0.1522534709739708, 0.1374850313369128, 0.1641368692384798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040559725244184275, 0.04543175668492827, 0.04786023291033248, 0.05018019840238319, 0.03659671667746822, 0.04499576649232773, 0.03746623173122321, 0.03776906656004919, 0.0348400767443231, 0.024813501852623987, 0.03352147764511504, 0.03584321361451437, 0.047532383032761416, 0.04197502955658894, 0.045027676423725516, 0.027577783393609057, 0.04105622817036769, 0.03080574040782158, 0.08243228963521909, 0.07477658441946644, 0.09050578489168781, 0.0841928800243692, 0.07555241680873748, 0.08673433671295949, 0.06891606272973427, 0.07863383032166171, 0.07486644881094906, 0.09134237437019932, 0.06760782656640696, 0.0676878774621884, 0.052908471746426766, 0.12406169066732853, 0.05757444888627594, 0.04160304607410448, 0.08002320097077431, 0.06570450659774218, 0.11571931870431984, 0.11701178888793495, 0.116419371360313, 0.09989655095657768, 0.10223788127725386, 0.13094530455704534, 0.10681707439131682, 0.12485753140810307, 0.152896621931649, 0.016729297348716643, 0.01374022311990064, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012724715238983109, 0.014604814471857797, 0.0037880202379173555, 0.021789015228267816, 0.01748479961402305, 9.999999999998899e-05, 0.0013660280328445795, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018908481935637766, 9.999999999998899e-05, 0.0017397114934383229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04243483068291676, 0.0773112064623932, 0.04109407068567483, 0.02159780055353311, 0.050041568642219314, 0.08869755207027008, 0.041436985347230615, 0.08324615646636868, 0.038817347358417464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014661859389958565, 9.999999999998899e-05, 0.0051048720807135295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1865224257122855, 0.18861079746641451, 0.18627503786393063, 0.2243003282655679, 0.17585312950153298, 0.17974455967164227, 0.19416098670462356, 0.17190894428457182, 0.2136282567126251, 0.03970084786925221, 0.046701448752047736, 0.04528892216142977, 0.04103575012889504, 0.039967151598948814, 0.05173310665455921, 0.04752495743229179, 0.04619004783418168, 0.05020687652004163, 0.127107317109603, 0.12369052550162796, 0.14875152513092393, 0.12153811265045533, 0.1261271750756483, 0.14073568239517154, 0.12667754749816573, 0.13132785825295346, 0.13573139145677937, 0.16178725336923816, 0.16596453029512048, 0.17222619303525166, 0.16402258148201532, 0.15837706715330369, 0.16415098902304204, 0.15501714289190727, 0.16920401443871758, 0.15355229762222056, 0.11668604074133004, 0.10409350481455493, 0.09404249747696303, 0.11120052378506007, 0.11511915507301296, 0.10109532620933692, 0.09584609236564956, 0.10405696926254127, 0.10203335638451594, 0.16089117840562317, 0.1627648104879278, 0.1628569994280693, 0.17294123735097655, 0.1468824824142837, 0.1509547233186791, 0.15960197603452564, 0.14994168926441875, 0.17609822405927533, 0.14862876987412366, 0.1470959172995634, 0.12477782246420577, 0.14115511595893926, 0.1467450321114817, 0.14132408734923518, 0.14127055784355613, 0.14117604256454175, 0.1468842490465222, 0.1341678881109467, 0.1798405790339641, 0.24448168591351838, 0.1638449157265246, 0.1549484933216847, 0.1560989800387711, 0.16595759450264247, 0.1538700213988461, 0.16953024182190024, 0.15236805294569855, 0.15809413780018544, 0.1789932506793238, 0.1335550868806471, 0.20355404280533362, 0.1642621110170317, 0.13728654974469934, 0.1501390672727757, 0.2130410162121691, 0.19051438791686381, 0.18976558309108482, 0.18516506370263408, 0.18800355086313425, 0.19947004048046646, 0.1746077451947805, 0.1791004189859876, 0.18679112687484956, 0.1832444927125766, 0.05864098444173993, 0.058865893430602556, 0.0579033731347558, 0.05799044743733661, 0.05232339244061823, 0.05858550137143281, 0.046340561578235406, 0.04761548588267306, 0.05972087938310666]}, "mutation_prompt": null}
{"id": "06cfd88c-2e1e-4432-8f9f-b8a606d222fb", "solution": "import numpy as np\n\nclass FastDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        mutation_scaling_factor = 0.5\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            avg_fitness_diff = np.mean([abs(f - best_fitness) for f in fitness_values])\n            mutation_rate = mutation_scaling_factor / (1 + avg_fitness_diff)\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + mutation_rate * np.random.normal(0, 1, self.dim)\n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                \n                    if fitness < best_fitness:\n                        best_solution = mutated_solution\n                        best_fitness = fitness\n        \n        return best_solution", "name": "FastDynamicMutationMetaheuristic", "description": "Implementing a dynamic mutation strategy that adapts mutation rate based on the fitness improvement of individuals, promoting faster convergence.", "configspace": "", "generation": 3, "fitness": 0.08387453490994108, "feedback": "The algorithm FastDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "70afd55d-89e5-4454-90d2-5265bcab26b1", "metadata": {"aucs": [0.15681993898726254, 0.1647463812878146, 0.15382050151815851, 0.15329467021498244, 0.19127539399057958, 0.18952202076262004, 0.15171823855787459, 0.13355944085002902, 0.16072547944491067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035388386244508574, 0.039447799055690846, 0.04807893270313068, 0.05017737023724944, 0.029481419792527275, 0.04182273993649088, 0.03483403348658398, 0.034032141721551334, 0.031113458348158596, 0.024813501852623987, 0.03140778023809909, 0.03525675378517812, 0.047532383032761416, 0.035479479650945334, 0.023239894620827206, 0.02549534960294675, 0.038956894701082656, 0.022575265726046734, 0.08243228963521909, 0.07408323697620345, 0.08402912464128676, 0.08408109412547293, 0.07518487399503115, 0.08597332435697769, 0.06870548237261442, 0.07562868854481875, 0.07337164524622564, 0.07804916436221343, 0.06760782656640696, 0.053183678035303994, 0.05178598267244783, 0.12396838491592121, 0.05637040176645847, 0.03705737489559979, 0.07461765265131326, 0.06267449812897197, 0.11353516713886225, 0.10604448359377838, 0.1070640411250543, 0.09980928293042945, 0.09762831196841726, 0.11564484807017583, 0.10584511236059335, 0.12296578534942926, 0.15209600952410218, 0.01672933516361441, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014604814471857797, 9.999999999998899e-05, 0.021789015228267816, 0.01748502119581119, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012692444663664482, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03451249584603355, 0.07548994404869991, 0.03978868512109934, 0.003201042848850033, 0.01381024515478968, 0.004125476613522583, 0.028806872844805542, 0.08233889760778434, 0.019978020949135478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014696246577927896, 9.999999999998899e-05, 0.0051048720807135295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18638242945082562, 0.18867635081002454, 0.18352538070748192, 0.22422238480148438, 0.17286146132538105, 0.17949026449183036, 0.19413305349873644, 0.16792648536816612, 0.19814566339433737, 0.03923114550594564, 0.043234211666763445, 0.03562268443962735, 0.03879175877606811, 0.038154089557877024, 0.0504684713953355, 0.04531385097630447, 0.04633755985520949, 0.050266223156052225, 0.12634314964062454, 0.11963154157753941, 0.14879799084519618, 0.11676206580424264, 0.1199692074727352, 0.12541864067125386, 0.11937862466188576, 0.1317947746492495, 0.13430312595294402, 0.1592495332760393, 0.16678322862535655, 0.15877419196866327, 0.1663455266023358, 0.1576297634637509, 0.15276962975182484, 0.14901910330419832, 0.15665382418630214, 0.15233899480334, 0.10163540934294812, 0.09467251697408541, 0.09312836065638785, 0.1127188415193745, 0.09921584425030794, 0.10588398938607846, 0.0935533822055652, 0.10781656460493727, 0.09353594788828146, 0.1610437782712577, 0.16167759265287351, 0.16195586060137468, 0.1732798593944519, 0.1664438923692071, 0.1618430989601266, 0.1631981144697051, 0.16185569093864705, 0.16661731544597136, 0.14072465142468316, 0.14111552802260763, 0.12445909942187294, 0.13007737346212178, 0.13877483841211957, 0.1348381920550934, 0.1396264584812097, 0.12898089053134532, 0.14050900689125045, 0.13196778881633797, 0.16848590093238003, 0.24558165261883946, 0.16370719868108896, 0.14301672198266313, 0.15610606953494222, 0.16586251596645674, 0.1446516475061831, 0.1685719918317804, 0.1392478072844131, 0.15645531443076066, 0.1614936636267954, 0.1335811482991679, 0.18885537462175905, 0.15671125267485908, 0.13731485559306655, 0.1434609541556332, 0.20631053761153095, 0.19052372779406446, 0.1931611183175318, 0.18562869344106192, 0.18904691323152378, 0.20146914883936118, 0.16919500798810405, 0.18129924968224365, 0.1814163505383567, 0.18592415368231308, 0.042000789205752564, 0.06836325601093596, 0.04587685748074877, 0.059683984607713736, 0.04368922023673116, 0.053838977059219584, 0.0456743604018216, 0.05265805839904736, 0.059655145874024096]}, "mutation_prompt": null}
{"id": "2a73d3ec-4bda-45bb-a3df-a8bc3ad58c13", "solution": "import numpy as np\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        mutation_scaling_factor = 0.5\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            diversity = np.std(population)\n            mutation_rate = mutation_scaling_factor / diversity\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + mutation_rate * np.random.normal(0, 1, self.dim)\n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Introducing dynamic mutation scaling based on population diversity enhances convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "70afd55d-89e5-4454-90d2-5265bcab26b1", "metadata": {"aucs": [0.15796629411109464, 0.17308330042036923, 0.15391762241435702, 0.15334210411822802, 0.19404355399985518, 0.1895377580546871, 0.1522534709739708, 0.1374850313369128, 0.1641368692384798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040559725244184275, 0.04543175668492827, 0.04786023291033248, 0.05018019840238319, 0.03659671667746822, 0.04499576649232773, 0.03746623173122321, 0.03776906656004919, 0.0348400767443231, 0.024813501852623987, 0.03352147764511504, 0.03584321361451437, 0.047532383032761416, 0.04197502955658894, 0.045027676423725516, 0.027577783393609057, 0.04105622817036769, 0.03080574040782158, 0.08243228963521909, 0.07477658441946644, 0.09050578489168781, 0.0841928800243692, 0.07555241680873748, 0.08673433671295949, 0.06891606272973427, 0.07863383032166171, 0.07486644881094906, 0.09134237437019932, 0.06760782656640696, 0.0676878774621884, 0.052908471746426766, 0.12406169066732853, 0.05757444888627594, 0.04160304607410448, 0.08002320097077431, 0.06570450659774218, 0.11571931870431984, 0.11701178888793495, 0.116419371360313, 0.09989655095657768, 0.10223788127725386, 0.13094530455704534, 0.10681707439131682, 0.12485753140810307, 0.152896621931649, 0.016729297348716643, 0.01374022311990064, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012724715238983109, 0.014604814471857797, 0.0037880202379173555, 0.021789015228267816, 0.01748479961402305, 9.999999999998899e-05, 0.0013660280328445795, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018908481935637766, 9.999999999998899e-05, 0.0017397114934383229, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04243483068291676, 0.0773112064623932, 0.04109407068567483, 0.02159780055353311, 0.050041568642219314, 0.08869755207027008, 0.041436985347230615, 0.08324615646636868, 0.038817347358417464, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014661859389958565, 9.999999999998899e-05, 0.0051048720807135295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1865224257122855, 0.18861079746641451, 0.18627503786393063, 0.2243003282655679, 0.17585312950153298, 0.17974455967164227, 0.19416098670462356, 0.17190894428457182, 0.2136282567126251, 0.03970084786925221, 0.046701448752047736, 0.04528892216142977, 0.04103575012889504, 0.039967151598948814, 0.05173310665455921, 0.04752495743229179, 0.04619004783418168, 0.05020687652004163, 0.127107317109603, 0.12369052550162796, 0.14875152513092393, 0.12153811265045533, 0.1261271750756483, 0.14073568239517154, 0.12667754749816573, 0.13132785825295346, 0.13573139145677937, 0.16178725336923816, 0.16596453029512048, 0.17222619303525166, 0.16402258148201532, 0.15837706715330369, 0.16415098902304204, 0.15501714289190727, 0.16920401443871758, 0.15355229762222056, 0.11668604074133004, 0.10409350481455493, 0.09404249747696303, 0.11120052378506007, 0.11511915507301296, 0.10109532620933692, 0.09584609236564956, 0.10405696926254127, 0.10203335638451594, 0.16089117840562317, 0.1627648104879278, 0.1628569994280693, 0.17294123735097655, 0.1468824824142837, 0.1509547233186791, 0.15960197603452564, 0.14994168926441875, 0.17609822405927533, 0.14862876987412366, 0.1470959172995634, 0.12477782246420577, 0.14115511595893926, 0.1467450321114817, 0.14132408734923518, 0.14127055784355613, 0.14117604256454175, 0.1468842490465222, 0.1341678881109467, 0.1798405790339641, 0.24448168591351838, 0.1638449157265246, 0.1549484933216847, 0.1560989800387711, 0.16595759450264247, 0.1538700213988461, 0.16953024182190024, 0.15236805294569855, 0.15809413780018544, 0.1789932506793238, 0.1335550868806471, 0.20355404280533362, 0.1642621110170317, 0.13728654974469934, 0.1501390672727757, 0.2130410162121691, 0.19051438791686381, 0.18976558309108482, 0.18516506370263408, 0.18800355086313425, 0.19947004048046646, 0.1746077451947805, 0.1791004189859876, 0.18679112687484956, 0.1832444927125766, 0.05864098444173993, 0.058865893430602556, 0.0579033731347558, 0.05799044743733661, 0.05232339244061823, 0.05858550137143281, 0.046340561578235406, 0.04761548588267306, 0.05972087938310666]}, "mutation_prompt": null}
{"id": "86466ec4-84bc-48e4-bec3-cc9ada5d0e2d", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        mutation_scaling_factor = 0.5\n        mutation_stage = 1\n        mutation_rate = 0.5\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            diversity = np.std(population)\n            if diversity < 1e-6:\n                mutation_stage = 2\n            elif diversity > 0.1:\n                mutation_stage = 1\n            \n            for idx, ind in enumerate(population):\n                if mutation_stage == 1:\n                    mutated_solution = ind + mutation_rate * np.random.normal(0, 1, self.dim)\n                else:\n                    idxs = np.random.choice(range(pop_size), 2, replace=False)\n                    donor = population[idxs[0]] + 0.5 * (population[idxs[1]] - ind)\n                    mutated_solution = ind + mutation_rate * (donor - ind)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedDynamicMutationMetaheuristic", "description": "Introducing a multi-stage mutation strategy with adaptive mutation rate and differential evolution to enhance exploration-exploitation balance and accelerate convergence.", "configspace": "", "generation": 5, "fitness": 0.08892838783454902, "feedback": "The algorithm EnhancedDynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "70afd55d-89e5-4454-90d2-5265bcab26b1", "metadata": {"aucs": [0.15975458721059677, 0.1851376646132762, 0.1624031523462134, 0.15345807688241964, 0.19114399548312622, 0.18954938506921148, 0.15408664252320536, 0.14186368422702145, 0.16652668161207984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03997742467894039, 0.04480585181680086, 0.06332738557722006, 0.05073384435538286, 0.03421530139128681, 0.04275998857750096, 0.05006993335736665, 0.03676427990948905, 0.04259523953329847, 0.028423258604218793, 0.03166261547877969, 0.035538858822405595, 0.047532383032761416, 0.04781311387311038, 0.024619664306368194, 0.029024459294894278, 0.03898524695782313, 0.025169242493083388, 0.08243228963521909, 0.0782352097046618, 0.1008730724092296, 0.08488392036757908, 0.07702500868927709, 0.08637541177208097, 0.07384468317484172, 0.08324619077859774, 0.07850440941945258, 0.07977446234230012, 0.09928848527572887, 0.07675002214888105, 0.06442747855150555, 0.12421695911259101, 0.06530652085581856, 0.0656534229623601, 0.08035953638878623, 0.06300408243496769, 0.12104096074043591, 0.10816784426645631, 0.11686274802692187, 0.10010320872338485, 0.12030656260803485, 0.13387834793205844, 0.10856524513497656, 0.12501248202414572, 0.15213494043434717, 0.016729297348716643, 0.017297516299682125, 0.0025706615595596505, 9.999999999998899e-05, 0.00032885607120747284, 0.014604814471857797, 0.03802249172554961, 0.021789015228267816, 0.01748479961402305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00035936888211618445, 9.999999999998899e-05, 0.001269083692873707, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05940784203990768, 0.07548990042029402, 0.05358619524076347, 0.014234882377998082, 0.07335963100094778, 0.024495830000665575, 0.048791784936453975, 0.08343408448430889, 0.03941387359578108, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014661859389958565, 9.999999999998899e-05, 0.0051048720807135295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18674079103094487, 0.19886502803552575, 0.19118687200992113, 0.24545881180921691, 0.17596592234030317, 0.1796815631700176, 0.19416278377262497, 0.20137257187422242, 0.202090996394916, 0.04351288313051116, 0.043669979255737235, 0.03729378838295705, 0.04114339247825316, 0.038469844030724065, 0.05053370667974744, 0.04526936934765069, 0.048025332430983836, 0.05026668651216171, 0.12801225065672484, 0.12253053189197383, 0.14908960161577212, 0.13711964848570535, 0.13717105916634376, 0.13303357929680204, 0.12992305593865638, 0.1312822284711448, 0.13909422735508903, 0.15987550980346754, 0.1660077812232046, 0.16781957269863323, 0.1607667565288179, 0.15725327417648094, 0.16214406721550645, 0.14907112606565387, 0.15705797563385349, 0.16156375030890135, 0.10336119842328118, 0.11118085987847959, 0.09491144996734635, 0.11131812763809434, 0.09962886597238152, 0.10175309810239574, 0.10123327713871955, 0.11137861872890842, 0.114280797035057, 0.1578760960262674, 0.16773772963299338, 0.15574212067781956, 0.17311692883773266, 0.14550133769138685, 0.16339606402567264, 0.1544285586724009, 0.1528829278365732, 0.16661731544597136, 0.1471296708836538, 0.15724109815124465, 0.13373801497516902, 0.14288234908469255, 0.16182224912214627, 0.14880594176315387, 0.14642559787129505, 0.1356256284648487, 0.14804759453349903, 0.1587451772354045, 0.19833718336629247, 0.2445229120725687, 0.16368625365911993, 0.16648658413058892, 0.17169801119453254, 0.1675452919652538, 0.16363299344529514, 0.16992267740460543, 0.14794562145680434, 0.1579765881103714, 0.17178968556622443, 0.14321601840052556, 0.18766013648443836, 0.15928338865225866, 0.13902643688340655, 0.1493976935551654, 0.21805770855117512, 0.19054368992308413, 0.17941390677082059, 0.19777183084928274, 0.19330866504700117, 0.19952473764848233, 0.1838974417217728, 0.17898002425921078, 0.18330254099561383, 0.18247862715330077, 0.05577121833802845, 0.058043974658463005, 0.07068053852323342, 0.0578933429771481, 0.04704815489605685, 0.053971289672085865, 0.05862475358421726, 0.05333051875830419, 0.059574190147948514]}, "mutation_prompt": null}
{"id": "531607ad-bbed-4520-8e4a-3703aa65a5ad", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        mutation_scaling_factor = 0.5\n        mutation_stage = 1\n        mutation_rate = 0.5\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            diversity = np.std(population)\n            if diversity < 1e-6:\n                mutation_stage = 2\n            elif diversity > 0.1:\n                mutation_stage = 1\n            \n            for idx, ind in enumerate(population):\n                if mutation_stage == 1:\n                    mutated_solution = ind + mutation_rate * np.random.normal(0, 1, self.dim)\n                else:\n                    idxs = np.random.choice(range(pop_size), 2, replace=False)\n                    donor = population[idxs[0]] + 0.5 * (population[idxs[1]] - ind)\n                    mutated_solution = ind + mutation_rate * (donor - ind)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedDynamicMutationMetaheuristic", "description": "Introducing a multi-stage mutation strategy with adaptive mutation rate and differential evolution to enhance exploration-exploitation balance and accelerate convergence.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86466ec4-84bc-48e4-bec3-cc9ada5d0e2d", "metadata": {"aucs": [0.15975458721059677, 0.1851376646132762, 0.1624031523462134, 0.15345807688241964, 0.19114399548312622, 0.18954938506921148, 0.15408664252320536, 0.14186368422702145, 0.16652668161207984, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03997742467894039, 0.04480585181680086, 0.06332738557722006, 0.05073384435538286, 0.03421530139128681, 0.04275998857750096, 0.05006993335736665, 0.03676427990948905, 0.04259523953329847, 0.028423258604218793, 0.03166261547877969, 0.035538858822405595, 0.047532383032761416, 0.04781311387311038, 0.024619664306368194, 0.029024459294894278, 0.03898524695782313, 0.025169242493083388, 0.08243228963521909, 0.0782352097046618, 0.1008730724092296, 0.08488392036757908, 0.07702500868927709, 0.08637541177208097, 0.07384468317484172, 0.08324619077859774, 0.07850440941945258, 0.07977446234230012, 0.09928848527572887, 0.07675002214888105, 0.06442747855150555, 0.12421695911259101, 0.06530652085581856, 0.0656534229623601, 0.08035953638878623, 0.06300408243496769, 0.12104096074043591, 0.10816784426645631, 0.11686274802692187, 0.10010320872338485, 0.12030656260803485, 0.13387834793205844, 0.10856524513497656, 0.12501248202414572, 0.15213494043434717, 0.016729297348716643, 0.017297516299682125, 0.0025706615595596505, 9.999999999998899e-05, 0.00032885607120747284, 0.014604814471857797, 0.03802249172554961, 0.021789015228267816, 0.01748479961402305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00035936888211618445, 9.999999999998899e-05, 0.001269083692873707, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05940784203990768, 0.07548990042029402, 0.05358619524076347, 0.014234882377998082, 0.07335963100094778, 0.024495830000665575, 0.048791784936453975, 0.08343408448430889, 0.03941387359578108, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014661859389958565, 9.999999999998899e-05, 0.0051048720807135295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18674079103094487, 0.19886502803552575, 0.19118687200992113, 0.24545881180921691, 0.17596592234030317, 0.1796815631700176, 0.19416278377262497, 0.20137257187422242, 0.202090996394916, 0.04351288313051116, 0.043669979255737235, 0.03729378838295705, 0.04114339247825316, 0.038469844030724065, 0.05053370667974744, 0.04526936934765069, 0.048025332430983836, 0.05026668651216171, 0.12801225065672484, 0.12253053189197383, 0.14908960161577212, 0.13711964848570535, 0.13717105916634376, 0.13303357929680204, 0.12992305593865638, 0.1312822284711448, 0.13909422735508903, 0.15987550980346754, 0.1660077812232046, 0.16781957269863323, 0.1607667565288179, 0.15725327417648094, 0.16214406721550645, 0.14907112606565387, 0.15705797563385349, 0.16156375030890135, 0.10336119842328118, 0.11118085987847959, 0.09491144996734635, 0.11131812763809434, 0.09962886597238152, 0.10175309810239574, 0.10123327713871955, 0.11137861872890842, 0.114280797035057, 0.1578760960262674, 0.16773772963299338, 0.15574212067781956, 0.17311692883773266, 0.14550133769138685, 0.16339606402567264, 0.1544285586724009, 0.1528829278365732, 0.16661731544597136, 0.1471296708836538, 0.15724109815124465, 0.13373801497516902, 0.14288234908469255, 0.16182224912214627, 0.14880594176315387, 0.14642559787129505, 0.1356256284648487, 0.14804759453349903, 0.1587451772354045, 0.19833718336629247, 0.2445229120725687, 0.16368625365911993, 0.16648658413058892, 0.17169801119453254, 0.1675452919652538, 0.16363299344529514, 0.16992267740460543, 0.14794562145680434, 0.1579765881103714, 0.17178968556622443, 0.14321601840052556, 0.18766013648443836, 0.15928338865225866, 0.13902643688340655, 0.1493976935551654, 0.21805770855117512, 0.19054368992308413, 0.17941390677082059, 0.19777183084928274, 0.19330866504700117, 0.19952473764848233, 0.1838974417217728, 0.17898002425921078, 0.18330254099561383, 0.18247862715330077, 0.05577121833802845, 0.058043974658463005, 0.07068053852323342, 0.0578933429771481, 0.04704815489605685, 0.053971289672085865, 0.05862475358421726, 0.05333051875830419, 0.059574190147948514]}, "mutation_prompt": null}
{"id": "b23d18a8-c07c-42d0-9778-3adea2df8aea", "solution": "import numpy as np\n\nclass AdaptiveMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    mutation_rates[idx] *= 0.9\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "AdaptiveMutationMetaheuristic", "description": "Implement a novel adaptive mutation strategy that adjusts scaling factor and mutation rate based on individual fitness to expedite convergence.", "configspace": "", "generation": 7, "fitness": 0.11698315376068023, "feedback": "The algorithm AdaptiveMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.17.", "error": "", "parent_id": "86466ec4-84bc-48e4-bec3-cc9ada5d0e2d", "metadata": {"aucs": [0.1568683786195696, 0.1645482463848048, 0.1539217282159363, 0.1533813523364863, 0.19114593948056624, 0.18954897615687616, 0.15185059840796766, 0.13341332383652682, 0.16377744710719655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03531648885665584, 0.041868295766915975, 0.04798240185222835, 0.05016370285465688, 0.038900983292526115, 0.04215969818350718, 0.04437107053746714, 0.03464779498830173, 0.031766305545441686, 0.033260613176165466, 0.031837964775105476, 0.037099428330877315, 0.047532383032761416, 0.03549644974948862, 0.023134511405013658, 0.02574936485564938, 0.038975208718045384, 0.022463302128953533, 0.8435351983252493, 0.8110473731619567, 0.8483507540104704, 0.8541464546280881, 0.8670546332692901, 0.8571279260789284, 0.8828525255949035, 0.852823421314525, 0.8473818442524923, 0.07804905720821131, 0.06779195502420043, 0.05318367156701098, 0.05218990240635757, 0.12829024386715027, 0.05744521641601241, 0.03705737339985604, 0.07462591411386255, 0.06300408243496769, 0.11353516713886225, 0.10952427936969289, 0.10728701406008645, 0.10081004541996952, 0.09876694020924037, 0.1175120964878188, 0.10972564015490294, 0.1250739808720911, 0.15212844879573528, 0.016729297348716643, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014604814471857797, 9.999999999998899e-05, 0.021789015228267816, 0.041528333664128114, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001269083692873707, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035447341785554864, 0.07617715478604037, 0.03978866356612265, 0.0032009091475845297, 0.013810161113607, 0.004125277410908512, 0.04590586511507533, 0.08233889460592814, 0.03102006522636147, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014661859389958565, 9.999999999998899e-05, 0.0051048720807135295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18688333426154113, 0.18861017546794978, 0.18426213283101522, 0.2242769079905419, 0.17281320070250805, 0.17955716474903582, 0.19415910904427514, 0.176308717948907, 0.20420091901204418, 0.03913522020980087, 0.04338085213586795, 0.036897067988191146, 0.04011351997405943, 0.03844363779037285, 0.050461212416420875, 0.045269483864061155, 0.045927559881829616, 0.05208431490219445, 0.12801225065672484, 0.11878375883450176, 0.14954663454624972, 0.1394278813614721, 0.1433981609983006, 0.12151752682751427, 0.12205470977326094, 0.12999196968925264, 0.13517044604134987, 0.1579031042611716, 0.1660077812232046, 0.1644627000605795, 0.15871725908220236, 0.17255892108929216, 0.14924146244757264, 0.1491340661303313, 0.15634098113975525, 0.15944728494315497, 0.10182521725992466, 0.09462690030894205, 0.12879266679945867, 0.11277558093062234, 0.1019953458477717, 0.09952971065650851, 0.09315195635499529, 0.10383199649400554, 0.10095052512100355, 0.1578760960262674, 0.15888091148526196, 0.1365582685477138, 0.1730547150889883, 0.14931010713811488, 0.13904157551176866, 0.14953243060328802, 0.15478213306955024, 0.16661731544597136, 0.14072465142468316, 0.14344742488700835, 0.12686388023879736, 0.13255307585874831, 0.14123253404814806, 0.14589064227665383, 0.13962645695787756, 0.12898020630164997, 0.14763399473044625, 0.16027147336076597, 0.16845393089750593, 0.2445229120725687, 0.16368625365911993, 0.14237479491771043, 0.1614686085288386, 0.1650849739858926, 0.144725308866392, 0.17009304716080442, 0.14053511641842686, 0.15634048984409854, 0.15937008541154485, 0.13544216408141652, 0.18885979223501903, 0.1594419355812179, 0.13728654974469934, 0.14345030461768415, 0.23678731631839078, 0.19054368992308413, 0.1746669595797613, 0.18354541238005406, 0.18957275431287224, 0.20025363637817972, 0.17062453381260934, 0.17689684108471593, 0.17331386035763063, 0.19940104395080538, 0.042272302112647986, 0.057710463197787276, 0.04436871972577405, 0.05762214549950262, 0.04370407433919443, 0.05415456553487441, 0.04604011168932687, 0.04757434540238714, 0.05960821882162748]}, "mutation_prompt": null}
{"id": "e5fb15d7-a11e-4bfe-b00e-0eca834d0f6e", "solution": "import numpy as np\n\nclass AdaptiveMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    mutation_rates[idx] *= 0.9\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "AdaptiveMutationMetaheuristic", "description": "Implement a novel adaptive mutation strategy that adjusts scaling factor and mutation rate based on individual fitness to expedite convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b23d18a8-c07c-42d0-9778-3adea2df8aea", "metadata": {"aucs": [0.1568683786195696, 0.1645482463848048, 0.1539217282159363, 0.1533813523364863, 0.19114593948056624, 0.18954897615687616, 0.15185059840796766, 0.13341332383652682, 0.16377744710719655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03531648885665584, 0.041868295766915975, 0.04798240185222835, 0.05016370285465688, 0.038900983292526115, 0.04215969818350718, 0.04437107053746714, 0.03464779498830173, 0.031766305545441686, 0.033260613176165466, 0.031837964775105476, 0.037099428330877315, 0.047532383032761416, 0.03549644974948862, 0.023134511405013658, 0.02574936485564938, 0.038975208718045384, 0.022463302128953533, 0.8435351983252493, 0.8110473731619567, 0.8483507540104704, 0.8541464546280881, 0.8670546332692901, 0.8571279260789284, 0.8828525255949035, 0.852823421314525, 0.8473818442524923, 0.07804905720821131, 0.06779195502420043, 0.05318367156701098, 0.05218990240635757, 0.12829024386715027, 0.05744521641601241, 0.03705737339985604, 0.07462591411386255, 0.06300408243496769, 0.11353516713886225, 0.10952427936969289, 0.10728701406008645, 0.10081004541996952, 0.09876694020924037, 0.1175120964878188, 0.10972564015490294, 0.1250739808720911, 0.15212844879573528, 0.016729297348716643, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014604814471857797, 9.999999999998899e-05, 0.021789015228267816, 0.041528333664128114, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001269083692873707, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035447341785554864, 0.07617715478604037, 0.03978866356612265, 0.0032009091475845297, 0.013810161113607, 0.004125277410908512, 0.04590586511507533, 0.08233889460592814, 0.03102006522636147, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014661859389958565, 9.999999999998899e-05, 0.0051048720807135295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18688333426154113, 0.18861017546794978, 0.18426213283101522, 0.2242769079905419, 0.17281320070250805, 0.17955716474903582, 0.19415910904427514, 0.176308717948907, 0.20420091901204418, 0.03913522020980087, 0.04338085213586795, 0.036897067988191146, 0.04011351997405943, 0.03844363779037285, 0.050461212416420875, 0.045269483864061155, 0.045927559881829616, 0.05208431490219445, 0.12801225065672484, 0.11878375883450176, 0.14954663454624972, 0.1394278813614721, 0.1433981609983006, 0.12151752682751427, 0.12205470977326094, 0.12999196968925264, 0.13517044604134987, 0.1579031042611716, 0.1660077812232046, 0.1644627000605795, 0.15871725908220236, 0.17255892108929216, 0.14924146244757264, 0.1491340661303313, 0.15634098113975525, 0.15944728494315497, 0.10182521725992466, 0.09462690030894205, 0.12879266679945867, 0.11277558093062234, 0.1019953458477717, 0.09952971065650851, 0.09315195635499529, 0.10383199649400554, 0.10095052512100355, 0.1578760960262674, 0.15888091148526196, 0.1365582685477138, 0.1730547150889883, 0.14931010713811488, 0.13904157551176866, 0.14953243060328802, 0.15478213306955024, 0.16661731544597136, 0.14072465142468316, 0.14344742488700835, 0.12686388023879736, 0.13255307585874831, 0.14123253404814806, 0.14589064227665383, 0.13962645695787756, 0.12898020630164997, 0.14763399473044625, 0.16027147336076597, 0.16845393089750593, 0.2445229120725687, 0.16368625365911993, 0.14237479491771043, 0.1614686085288386, 0.1650849739858926, 0.144725308866392, 0.17009304716080442, 0.14053511641842686, 0.15634048984409854, 0.15937008541154485, 0.13544216408141652, 0.18885979223501903, 0.1594419355812179, 0.13728654974469934, 0.14345030461768415, 0.23678731631839078, 0.19054368992308413, 0.1746669595797613, 0.18354541238005406, 0.18957275431287224, 0.20025363637817972, 0.17062453381260934, 0.17689684108471593, 0.17331386035763063, 0.19940104395080538, 0.042272302112647986, 0.057710463197787276, 0.04436871972577405, 0.05762214549950262, 0.04370407433919443, 0.05415456553487441, 0.04604011168932687, 0.04757434540238714, 0.05960821882162748]}, "mutation_prompt": null}
{"id": "41c770cc-9e61-4e45-9d90-bec2764a3c83", "solution": "import numpy as np\n\nclass AdaptiveMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    mutation_rates[idx] *= 0.9\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "AdaptiveMutationMetaheuristic", "description": "Implement a novel adaptive mutation strategy that adjusts scaling factor and mutation rate based on individual fitness to expedite convergence.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b23d18a8-c07c-42d0-9778-3adea2df8aea", "metadata": {"aucs": [0.1568683786195696, 0.1645482463848048, 0.1539217282159363, 0.1533813523364863, 0.19114593948056624, 0.18954897615687616, 0.15185059840796766, 0.13341332383652682, 0.16377744710719655, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03531648885665584, 0.041868295766915975, 0.04798240185222835, 0.05016370285465688, 0.038900983292526115, 0.04215969818350718, 0.04437107053746714, 0.03464779498830173, 0.031766305545441686, 0.033260613176165466, 0.031837964775105476, 0.037099428330877315, 0.047532383032761416, 0.03549644974948862, 0.023134511405013658, 0.02574936485564938, 0.038975208718045384, 0.022463302128953533, 0.8435351983252493, 0.8110473731619567, 0.8483507540104704, 0.8541464546280881, 0.8670546332692901, 0.8571279260789284, 0.8828525255949035, 0.852823421314525, 0.8473818442524923, 0.07804905720821131, 0.06779195502420043, 0.05318367156701098, 0.05218990240635757, 0.12829024386715027, 0.05744521641601241, 0.03705737339985604, 0.07462591411386255, 0.06300408243496769, 0.11353516713886225, 0.10952427936969289, 0.10728701406008645, 0.10081004541996952, 0.09876694020924037, 0.1175120964878188, 0.10972564015490294, 0.1250739808720911, 0.15212844879573528, 0.016729297348716643, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014604814471857797, 9.999999999998899e-05, 0.021789015228267816, 0.041528333664128114, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001269083692873707, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035447341785554864, 0.07617715478604037, 0.03978866356612265, 0.0032009091475845297, 0.013810161113607, 0.004125277410908512, 0.04590586511507533, 0.08233889460592814, 0.03102006522636147, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014661859389958565, 9.999999999998899e-05, 0.0051048720807135295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18688333426154113, 0.18861017546794978, 0.18426213283101522, 0.2242769079905419, 0.17281320070250805, 0.17955716474903582, 0.19415910904427514, 0.176308717948907, 0.20420091901204418, 0.03913522020980087, 0.04338085213586795, 0.036897067988191146, 0.04011351997405943, 0.03844363779037285, 0.050461212416420875, 0.045269483864061155, 0.045927559881829616, 0.05208431490219445, 0.12801225065672484, 0.11878375883450176, 0.14954663454624972, 0.1394278813614721, 0.1433981609983006, 0.12151752682751427, 0.12205470977326094, 0.12999196968925264, 0.13517044604134987, 0.1579031042611716, 0.1660077812232046, 0.1644627000605795, 0.15871725908220236, 0.17255892108929216, 0.14924146244757264, 0.1491340661303313, 0.15634098113975525, 0.15944728494315497, 0.10182521725992466, 0.09462690030894205, 0.12879266679945867, 0.11277558093062234, 0.1019953458477717, 0.09952971065650851, 0.09315195635499529, 0.10383199649400554, 0.10095052512100355, 0.1578760960262674, 0.15888091148526196, 0.1365582685477138, 0.1730547150889883, 0.14931010713811488, 0.13904157551176866, 0.14953243060328802, 0.15478213306955024, 0.16661731544597136, 0.14072465142468316, 0.14344742488700835, 0.12686388023879736, 0.13255307585874831, 0.14123253404814806, 0.14589064227665383, 0.13962645695787756, 0.12898020630164997, 0.14763399473044625, 0.16027147336076597, 0.16845393089750593, 0.2445229120725687, 0.16368625365911993, 0.14237479491771043, 0.1614686085288386, 0.1650849739858926, 0.144725308866392, 0.17009304716080442, 0.14053511641842686, 0.15634048984409854, 0.15937008541154485, 0.13544216408141652, 0.18885979223501903, 0.1594419355812179, 0.13728654974469934, 0.14345030461768415, 0.23678731631839078, 0.19054368992308413, 0.1746669595797613, 0.18354541238005406, 0.18957275431287224, 0.20025363637817972, 0.17062453381260934, 0.17689684108471593, 0.17331386035763063, 0.19940104395080538, 0.042272302112647986, 0.057710463197787276, 0.04436871972577405, 0.05762214549950262, 0.04370407433919443, 0.05415456553487441, 0.04604011168932687, 0.04757434540238714, 0.05960821882162748]}, "mutation_prompt": null}
{"id": "4dcb181c-df38-4734-ba90-860d0e6b8388", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            # Introduce elitism\n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:  # Perturb a percentage of population\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedAdaptiveMutationMetaheuristic", "description": "Introduce an elitism mechanism to preserve the best solution found so far and encourage exploration by perturbing a percentage of the population with higher mutation rates.", "configspace": "", "generation": 10, "fitness": 0.12355707750456804, "feedback": "The algorithm EnhancedAdaptiveMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "b23d18a8-c07c-42d0-9778-3adea2df8aea", "metadata": {"aucs": [0.19594721132603998, 0.16682224647308375, 0.19054437050572726, 0.18815923427990255, 0.1717171093244939, 0.19105173958304245, 0.1651142699779946, 0.16288053978223527, 0.1893886226989968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04129638554855286, 0.0464090973408221, 0.03801547726578536, 0.04707034996098414, 0.04356539955381489, 0.04956127389460274, 0.04373941743772425, 0.041402513129529916, 0.04204653927942126, 0.03499306114361134, 0.028209914286641102, 0.029025266736591004, 0.05131955645266717, 0.038181622738895915, 0.051541086796232594, 0.03715941909948284, 0.020639130234311742, 0.029981568423183336, 0.8701546202627305, 0.9447794261655992, 0.8797756746377406, 0.9295996869054712, 0.9309610343827321, 0.8954242290730111, 0.9436075351374167, 0.9337448018280077, 0.8901179223289569, 0.06300375920927781, 0.06758854430559458, 0.10178198883826939, 0.08626582184154907, 0.08877488686731017, 0.0623465480896519, 0.08283558117495449, 0.0750339699379674, 0.09760632670853175, 0.11351473588303529, 0.14587589604253348, 0.10257820947497909, 0.11108602841431858, 0.12489230226823089, 0.09185080095041409, 0.14586423429064377, 0.13532976926321594, 0.14757582566466243, 9.999999999998899e-05, 0.015898161692576518, 0.00584954452284292, 0.025833732408438337, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020129895056585356, 0.001055991024031977, 0.01061031206663543, 0.00010665878611615387, 9.999999999998899e-05, 9.999999999998899e-05, 0.012373437610068816, 9.999999999998899e-05, 9.999999999998899e-05, 0.021209960305608733, 0.02385732230342763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028714367776040084, 0.04238010497830835, 0.053110453855020556, 0.03879284093481583, 0.03485610424212715, 0.05934827983297286, 0.06478783599993299, 0.078621940958014, 0.05158544863467618, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004341048134122727, 0.014787525993826933, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01909459139508507, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1957315882440286, 0.20549840902151595, 0.19949247530377634, 0.19167018795768231, 0.18273186808732256, 0.19398378902960578, 0.20565860982957718, 0.19961289896033985, 0.2125079301561409, 0.04083070725556337, 0.03745653651366043, 0.0468794853716239, 0.05610832736257121, 0.033097062432857594, 0.030412805482211147, 0.04842416640134595, 0.03645590056637571, 0.07392755799846762, 0.12942039923922544, 0.1197514734006423, 0.11783380224737572, 0.1393084890108981, 0.15308795077968262, 0.1482348316531963, 0.1475555873986013, 0.12176883641855674, 0.1319741081072633, 0.17915584729759426, 0.15824225951185766, 0.15069600930178662, 0.1695887279520617, 0.15304323524369068, 0.16226694400186026, 0.16286413319585458, 0.16695876373599783, 0.15239518795751916, 0.1030912121837857, 0.09630149950507816, 0.10639541226490112, 0.09254308105303666, 0.12851488786781107, 0.11416620842066005, 0.1356768673369967, 0.11488114648539482, 0.10687513078179145, 0.1472602990159526, 0.14876086615406892, 0.18800828260299585, 0.15349500887157197, 0.16602056343827587, 0.17549240216397266, 0.16600566632508507, 0.14120366541362417, 0.15463167619549112, 0.149492516059049, 0.1433321777208708, 0.14151315745146276, 0.12329725577711304, 0.14926645444351394, 0.14871155223630217, 0.13881972258332298, 0.14682029426875942, 0.1464973435726461, 0.15721168163438015, 0.13351228537009174, 0.24483244779366842, 0.17792980817517712, 0.18398116578707702, 0.21768477983524814, 0.17200475641902813, 0.18383383497261163, 0.13912948984789075, 0.15339361484263625, 0.15696706728485055, 0.17828470941084928, 0.14868312518457882, 0.14204089377844753, 0.1387741673445747, 0.16265457146461737, 0.1418580300861475, 0.14444470759578598, 0.2013313118577985, 0.1768362756826105, 0.17352114226789495, 0.17862347464016382, 0.16892822641270555, 0.18434286654819232, 0.1643716897986165, 0.18031615884924668, 0.20459084033800168, 0.0524765977607321, 0.042949614061288055, 0.04472291406756901, 0.05310373293292303, 0.08816620467329117, 0.04877242108574087, 0.049701676005955986, 0.05534521754801569, 0.050224760824902126]}, "mutation_prompt": null}
{"id": "dcc5c800-18ce-4ea7-9ac5-1dd58bcd52a4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            # Introduce elitism\n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:  # Perturb a percentage of population\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedAdaptiveMutationMetaheuristic", "description": "Introduce an elitism mechanism to preserve the best solution found so far and encourage exploration by perturbing a percentage of the population with higher mutation rates.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4dcb181c-df38-4734-ba90-860d0e6b8388", "metadata": {"aucs": [0.19594721132603998, 0.16682224647308375, 0.19054437050572726, 0.18815923427990255, 0.1717171093244939, 0.19105173958304245, 0.1651142699779946, 0.16288053978223527, 0.1893886226989968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04129638554855286, 0.0464090973408221, 0.03801547726578536, 0.04707034996098414, 0.04356539955381489, 0.04956127389460274, 0.04373941743772425, 0.041402513129529916, 0.04204653927942126, 0.03499306114361134, 0.028209914286641102, 0.029025266736591004, 0.05131955645266717, 0.038181622738895915, 0.051541086796232594, 0.03715941909948284, 0.020639130234311742, 0.029981568423183336, 0.8701546202627305, 0.9447794261655992, 0.8797756746377406, 0.9295996869054712, 0.9309610343827321, 0.8954242290730111, 0.9436075351374167, 0.9337448018280077, 0.8901179223289569, 0.06300375920927781, 0.06758854430559458, 0.10178198883826939, 0.08626582184154907, 0.08877488686731017, 0.0623465480896519, 0.08283558117495449, 0.0750339699379674, 0.09760632670853175, 0.11351473588303529, 0.14587589604253348, 0.10257820947497909, 0.11108602841431858, 0.12489230226823089, 0.09185080095041409, 0.14586423429064377, 0.13532976926321594, 0.14757582566466243, 9.999999999998899e-05, 0.015898161692576518, 0.00584954452284292, 0.025833732408438337, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020129895056585356, 0.001055991024031977, 0.01061031206663543, 0.00010665878611615387, 9.999999999998899e-05, 9.999999999998899e-05, 0.012373437610068816, 9.999999999998899e-05, 9.999999999998899e-05, 0.021209960305608733, 0.02385732230342763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028714367776040084, 0.04238010497830835, 0.053110453855020556, 0.03879284093481583, 0.03485610424212715, 0.05934827983297286, 0.06478783599993299, 0.078621940958014, 0.05158544863467618, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004341048134122727, 0.014787525993826933, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01909459139508507, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1957315882440286, 0.20549840902151595, 0.19949247530377634, 0.19167018795768231, 0.18273186808732256, 0.19398378902960578, 0.20565860982957718, 0.19961289896033985, 0.2125079301561409, 0.04083070725556337, 0.03745653651366043, 0.0468794853716239, 0.05610832736257121, 0.033097062432857594, 0.030412805482211147, 0.04842416640134595, 0.03645590056637571, 0.07392755799846762, 0.12942039923922544, 0.1197514734006423, 0.11783380224737572, 0.1393084890108981, 0.15308795077968262, 0.1482348316531963, 0.1475555873986013, 0.12176883641855674, 0.1319741081072633, 0.17915584729759426, 0.15824225951185766, 0.15069600930178662, 0.1695887279520617, 0.15304323524369068, 0.16226694400186026, 0.16286413319585458, 0.16695876373599783, 0.15239518795751916, 0.1030912121837857, 0.09630149950507816, 0.10639541226490112, 0.09254308105303666, 0.12851488786781107, 0.11416620842066005, 0.1356768673369967, 0.11488114648539482, 0.10687513078179145, 0.1472602990159526, 0.14876086615406892, 0.18800828260299585, 0.15349500887157197, 0.16602056343827587, 0.17549240216397266, 0.16600566632508507, 0.14120366541362417, 0.15463167619549112, 0.149492516059049, 0.1433321777208708, 0.14151315745146276, 0.12329725577711304, 0.14926645444351394, 0.14871155223630217, 0.13881972258332298, 0.14682029426875942, 0.1464973435726461, 0.15721168163438015, 0.13351228537009174, 0.24483244779366842, 0.17792980817517712, 0.18398116578707702, 0.21768477983524814, 0.17200475641902813, 0.18383383497261163, 0.13912948984789075, 0.15339361484263625, 0.15696706728485055, 0.17828470941084928, 0.14868312518457882, 0.14204089377844753, 0.1387741673445747, 0.16265457146461737, 0.1418580300861475, 0.14444470759578598, 0.2013313118577985, 0.1768362756826105, 0.17352114226789495, 0.17862347464016382, 0.16892822641270555, 0.18434286654819232, 0.1643716897986165, 0.18031615884924668, 0.20459084033800168, 0.0524765977607321, 0.042949614061288055, 0.04472291406756901, 0.05310373293292303, 0.08816620467329117, 0.04877242108574087, 0.049701676005955986, 0.05534521754801569, 0.050224760824902126]}, "mutation_prompt": null}
{"id": "7ab717bc-a5b0-4ae3-b74d-5d0691f0b8d4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            # Introduce elitism\n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:  # Perturb a percentage of population\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedAdaptiveMutationMetaheuristic", "description": "Introduce an elitism mechanism to preserve the best solution found so far and encourage exploration by perturbing a percentage of the population with higher mutation rates.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4dcb181c-df38-4734-ba90-860d0e6b8388", "metadata": {"aucs": [0.19594721132603998, 0.16682224647308375, 0.19054437050572726, 0.18815923427990255, 0.1717171093244939, 0.19105173958304245, 0.1651142699779946, 0.16288053978223527, 0.1893886226989968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04129638554855286, 0.0464090973408221, 0.03801547726578536, 0.04707034996098414, 0.04356539955381489, 0.04956127389460274, 0.04373941743772425, 0.041402513129529916, 0.04204653927942126, 0.03499306114361134, 0.028209914286641102, 0.029025266736591004, 0.05131955645266717, 0.038181622738895915, 0.051541086796232594, 0.03715941909948284, 0.020639130234311742, 0.029981568423183336, 0.8701546202627305, 0.9447794261655992, 0.8797756746377406, 0.9295996869054712, 0.9309610343827321, 0.8954242290730111, 0.9436075351374167, 0.9337448018280077, 0.8901179223289569, 0.06300375920927781, 0.06758854430559458, 0.10178198883826939, 0.08626582184154907, 0.08877488686731017, 0.0623465480896519, 0.08283558117495449, 0.0750339699379674, 0.09760632670853175, 0.11351473588303529, 0.14587589604253348, 0.10257820947497909, 0.11108602841431858, 0.12489230226823089, 0.09185080095041409, 0.14586423429064377, 0.13532976926321594, 0.14757582566466243, 9.999999999998899e-05, 0.015898161692576518, 0.00584954452284292, 0.025833732408438337, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020129895056585356, 0.001055991024031977, 0.01061031206663543, 0.00010665878611615387, 9.999999999998899e-05, 9.999999999998899e-05, 0.012373437610068816, 9.999999999998899e-05, 9.999999999998899e-05, 0.021209960305608733, 0.02385732230342763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028714367776040084, 0.04238010497830835, 0.053110453855020556, 0.03879284093481583, 0.03485610424212715, 0.05934827983297286, 0.06478783599993299, 0.078621940958014, 0.05158544863467618, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004341048134122727, 0.014787525993826933, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01909459139508507, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1957315882440286, 0.20549840902151595, 0.19949247530377634, 0.19167018795768231, 0.18273186808732256, 0.19398378902960578, 0.20565860982957718, 0.19961289896033985, 0.2125079301561409, 0.04083070725556337, 0.03745653651366043, 0.0468794853716239, 0.05610832736257121, 0.033097062432857594, 0.030412805482211147, 0.04842416640134595, 0.03645590056637571, 0.07392755799846762, 0.12942039923922544, 0.1197514734006423, 0.11783380224737572, 0.1393084890108981, 0.15308795077968262, 0.1482348316531963, 0.1475555873986013, 0.12176883641855674, 0.1319741081072633, 0.17915584729759426, 0.15824225951185766, 0.15069600930178662, 0.1695887279520617, 0.15304323524369068, 0.16226694400186026, 0.16286413319585458, 0.16695876373599783, 0.15239518795751916, 0.1030912121837857, 0.09630149950507816, 0.10639541226490112, 0.09254308105303666, 0.12851488786781107, 0.11416620842066005, 0.1356768673369967, 0.11488114648539482, 0.10687513078179145, 0.1472602990159526, 0.14876086615406892, 0.18800828260299585, 0.15349500887157197, 0.16602056343827587, 0.17549240216397266, 0.16600566632508507, 0.14120366541362417, 0.15463167619549112, 0.149492516059049, 0.1433321777208708, 0.14151315745146276, 0.12329725577711304, 0.14926645444351394, 0.14871155223630217, 0.13881972258332298, 0.14682029426875942, 0.1464973435726461, 0.15721168163438015, 0.13351228537009174, 0.24483244779366842, 0.17792980817517712, 0.18398116578707702, 0.21768477983524814, 0.17200475641902813, 0.18383383497261163, 0.13912948984789075, 0.15339361484263625, 0.15696706728485055, 0.17828470941084928, 0.14868312518457882, 0.14204089377844753, 0.1387741673445747, 0.16265457146461737, 0.1418580300861475, 0.14444470759578598, 0.2013313118577985, 0.1768362756826105, 0.17352114226789495, 0.17862347464016382, 0.16892822641270555, 0.18434286654819232, 0.1643716897986165, 0.18031615884924668, 0.20459084033800168, 0.0524765977607321, 0.042949614061288055, 0.04472291406756901, 0.05310373293292303, 0.08816620467329117, 0.04877242108574087, 0.049701676005955986, 0.05534521754801569, 0.050224760824902126]}, "mutation_prompt": null}
{"id": "4c3e2c8e-e9eb-49c2-856c-1bea2c5a0898", "solution": "import numpy as np\n\nclass EnhancedAdaptiveMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            # Introduce elitism\n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:  # Perturb a percentage of population\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedAdaptiveMutationMetaheuristic", "description": "Introduce an elitism mechanism to preserve the best solution found so far and encourage exploration by perturbing a percentage of the population with higher mutation rates.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4dcb181c-df38-4734-ba90-860d0e6b8388", "metadata": {"aucs": [0.19594721132603998, 0.16682224647308375, 0.19054437050572726, 0.18815923427990255, 0.1717171093244939, 0.19105173958304245, 0.1651142699779946, 0.16288053978223527, 0.1893886226989968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04129638554855286, 0.0464090973408221, 0.03801547726578536, 0.04707034996098414, 0.04356539955381489, 0.04956127389460274, 0.04373941743772425, 0.041402513129529916, 0.04204653927942126, 0.03499306114361134, 0.028209914286641102, 0.029025266736591004, 0.05131955645266717, 0.038181622738895915, 0.051541086796232594, 0.03715941909948284, 0.020639130234311742, 0.029981568423183336, 0.8701546202627305, 0.9447794261655992, 0.8797756746377406, 0.9295996869054712, 0.9309610343827321, 0.8954242290730111, 0.9436075351374167, 0.9337448018280077, 0.8901179223289569, 0.06300375920927781, 0.06758854430559458, 0.10178198883826939, 0.08626582184154907, 0.08877488686731017, 0.0623465480896519, 0.08283558117495449, 0.0750339699379674, 0.09760632670853175, 0.11351473588303529, 0.14587589604253348, 0.10257820947497909, 0.11108602841431858, 0.12489230226823089, 0.09185080095041409, 0.14586423429064377, 0.13532976926321594, 0.14757582566466243, 9.999999999998899e-05, 0.015898161692576518, 0.00584954452284292, 0.025833732408438337, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020129895056585356, 0.001055991024031977, 0.01061031206663543, 0.00010665878611615387, 9.999999999998899e-05, 9.999999999998899e-05, 0.012373437610068816, 9.999999999998899e-05, 9.999999999998899e-05, 0.021209960305608733, 0.02385732230342763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028714367776040084, 0.04238010497830835, 0.053110453855020556, 0.03879284093481583, 0.03485610424212715, 0.05934827983297286, 0.06478783599993299, 0.078621940958014, 0.05158544863467618, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004341048134122727, 0.014787525993826933, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01909459139508507, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1957315882440286, 0.20549840902151595, 0.19949247530377634, 0.19167018795768231, 0.18273186808732256, 0.19398378902960578, 0.20565860982957718, 0.19961289896033985, 0.2125079301561409, 0.04083070725556337, 0.03745653651366043, 0.0468794853716239, 0.05610832736257121, 0.033097062432857594, 0.030412805482211147, 0.04842416640134595, 0.03645590056637571, 0.07392755799846762, 0.12942039923922544, 0.1197514734006423, 0.11783380224737572, 0.1393084890108981, 0.15308795077968262, 0.1482348316531963, 0.1475555873986013, 0.12176883641855674, 0.1319741081072633, 0.17915584729759426, 0.15824225951185766, 0.15069600930178662, 0.1695887279520617, 0.15304323524369068, 0.16226694400186026, 0.16286413319585458, 0.16695876373599783, 0.15239518795751916, 0.1030912121837857, 0.09630149950507816, 0.10639541226490112, 0.09254308105303666, 0.12851488786781107, 0.11416620842066005, 0.1356768673369967, 0.11488114648539482, 0.10687513078179145, 0.1472602990159526, 0.14876086615406892, 0.18800828260299585, 0.15349500887157197, 0.16602056343827587, 0.17549240216397266, 0.16600566632508507, 0.14120366541362417, 0.15463167619549112, 0.149492516059049, 0.1433321777208708, 0.14151315745146276, 0.12329725577711304, 0.14926645444351394, 0.14871155223630217, 0.13881972258332298, 0.14682029426875942, 0.1464973435726461, 0.15721168163438015, 0.13351228537009174, 0.24483244779366842, 0.17792980817517712, 0.18398116578707702, 0.21768477983524814, 0.17200475641902813, 0.18383383497261163, 0.13912948984789075, 0.15339361484263625, 0.15696706728485055, 0.17828470941084928, 0.14868312518457882, 0.14204089377844753, 0.1387741673445747, 0.16265457146461737, 0.1418580300861475, 0.14444470759578598, 0.2013313118577985, 0.1768362756826105, 0.17352114226789495, 0.17862347464016382, 0.16892822641270555, 0.18434286654819232, 0.1643716897986165, 0.18031615884924668, 0.20459084033800168, 0.0524765977607321, 0.042949614061288055, 0.04472291406756901, 0.05310373293292303, 0.08816620467329117, 0.04877242108574087, 0.049701676005955986, 0.05534521754801569, 0.050224760824902126]}, "mutation_prompt": null}
{"id": "8dc5444f-6810-42eb-968a-3ee68f8b6a7c", "solution": "import numpy as np\n\nclass DynamicPopulationSizeMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        scaling_factors = np.full(10, 0.5)\n        mutation_rates = np.full(10, 0.5)\n        pop_size = 10\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:  # Perturb a percentage of population\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n            \n            if np.random.uniform(0, 1) < 0.1:  # Dynamic population size adjustment\n                new_pop_size = max(2, min(20, int(pop_size * np.random.normal(1, 0.5))))\n                population = population[:new_pop_size]\n                fitness_values = fitness_values[:new_pop_size]\n                scaling_factors = np.concatenate((scaling_factors, np.full(new_pop_size - pop_size, 0.5)))\n                mutation_rates = np.concatenate((mutation_rates, np.full(new_pop_size - pop_size, 0.5)))\n                pop_size = new_pop_size\n        \n        return best_solution", "name": "DynamicPopulationSizeMetaheuristic", "description": "Implement a dynamic mechanism to adjust the population size during the optimization process, allowing for adaptive exploration-exploitation balance.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('negative dimensions are not allowed').", "error": "ValueError('negative dimensions are not allowed')", "parent_id": "4dcb181c-df38-4734-ba90-860d0e6b8388", "metadata": {}, "mutation_prompt": null}
{"id": "45e0d496-a63b-492c-a732-04af16935687", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 15, "fitness": 0.1779026092644486, "feedback": "The algorithm EnhancedFastConvergenceMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "4dcb181c-df38-4734-ba90-860d0e6b8388", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "1eeef27b-46c8-484c-835d-104cbadf79be", "solution": "import numpy as np\n\nclass DiversePopulationInitializationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) + np.random.normal(0, 0.5, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "DiversePopulationInitializationMetaheuristic", "description": "Introduce a diverse population initialization strategy to enhance exploration and convergence speed.", "configspace": "", "generation": 16, "fitness": 0.1743203559886168, "feedback": "The algorithm DiversePopulationInitializationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6151696028345726, 0.5558882499798836, 0.5583141706955379, 0.6037127563439693, 0.5859427877080359, 0.5580728014690166, 0.5369208663599079, 0.5980760821738746, 0.5091278857166655, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003791869884114396, 9.999999999998899e-05, 0.00921368353017138, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07113728475687675, 0.039882906057306045, 0.05951904098305405, 0.037475667916183064, 0.03863572071270194, 0.04284658319020307, 0.04031387239160489, 0.05290559037995057, 0.04650650417239144, 0.14182593596375426, 0.03686644284310847, 0.03435716391657129, 0.039598973906880164, 0.02948290788799246, 0.045273423785906375, 0.03640297578677987, 0.029783820127101346, 0.03135322017529285, 0.8852898145865785, 0.8473523138365637, 0.6944676980420581, 0.84088068937694, 0.8551542614573084, 0.8063041973105836, 0.8332772286986164, 0.7152230437637452, 0.7622613443680468, 0.12212736075216812, 0.19077831672018397, 0.10943578571224533, 0.3323651619996594, 0.2188346383931853, 0.19451878265107903, 0.24506784571239126, 0.13870765436473032, 0.14273719663414364, 0.12696957156625444, 0.20577051220046838, 0.17146758236177462, 0.14845464151582488, 0.20575133171850923, 0.24597448397636645, 0.12831552862881235, 0.1512849348358175, 0.1765471072973227, 0.11793539324987234, 0.11401458671281084, 0.09838862635724344, 9.999999999998899e-05, 0.13029102538298443, 0.10576090382557501, 0.11543618328623251, 0.17959294162687112, 0.16983729464626884, 0.13665397957062453, 0.12727999915578692, 0.11546501383561958, 0.1084278926008384, 0.1132946845439119, 9.999999999998899e-05, 0.14798048576578982, 0.09863031055529559, 0.1311169126797429, 0.0038289785251026665, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043445503142353625, 0.0704804446572187, 0.038628330788588405, 0.05412873210694524, 0.033981124442769906, 0.06334015982902907, 0.03581974589417891, 0.03452181888479122, 0.02857577070562034, 0.059984310470760804, 0.08981914016041337, 0.020681403813070598, 0.04940975482894705, 0.040115918641911996, 0.01294085353836294, 0.03635294556667501, 0.06057113818292692, 0.05359444316765061, 0.06944665342508594, 0.12216034950290267, 0.07252642931548381, 0.046143685230566334, 0.11349361394776591, 0.06005089338885117, 0.05385374239175833, 0.09390929645885904, 0.016461232803364312, 0.4084093351433824, 0.3851914182880064, 0.39760079146940697, 0.4198268092620233, 0.38006919946274054, 0.4590911778093194, 0.3467899326073368, 0.3743892322577501, 0.45211616475087213, 0.033725492571339055, 0.03896554274166175, 0.05199666512076473, 0.06190559593341838, 0.0613892010671927, 0.03855568703872991, 0.053413015836469624, 0.040853873134955254, 0.049536440498473944, 0.12820313308016162, 0.2100180657113767, 0.22832024749432722, 0.1656585489986665, 0.2009863715435677, 0.1672935850691336, 0.16834990884130352, 0.17157606553555493, 0.20632132475155474, 0.15843462640702544, 0.1562683164781391, 0.16680283257745354, 0.15509787827522648, 0.18366957512138182, 0.15356857945040114, 0.16926943068892852, 0.18816688298483897, 0.16444350483543624, 0.10843724222279694, 0.17910378428834972, 0.10061943771355941, 0.13310866750270922, 0.1018684682169756, 0.12733846607932098, 0.10622305827119838, 0.10434050878032852, 0.10403589664596369, 0.1820559754229416, 0.17409942889872543, 0.1693694041298358, 0.18203687773003296, 0.17040092350857883, 0.17644822047734832, 0.14775946682934915, 0.16290671194435324, 0.19597706863006914, 0.16287603851101007, 0.1692300539420014, 0.16935579700649284, 0.16817951673193898, 0.1730868178815792, 0.15896012242814528, 0.16883033331248243, 0.15107750991576463, 0.17733091397193368, 0.17390172883787547, 0.1661232912554853, 0.1514931481556283, 0.17132208401522275, 0.1723410134562946, 0.5149421391925306, 0.7512624436138667, 0.16845026526802498, 0.19197483440149887, 0.16802208888320025, 0.15664550650981668, 0.22692968316006967, 0.13961204540647032, 0.16840973929349168, 0.20707447619166586, 0.19432953116465745, 0.16667249780101778, 0.12765391757446343, 0.19185321703417024, 0.19299992705849167, 0.20012367734398717, 0.2067006524116699, 0.19297701836592762, 0.19318038756406786, 0.20595039265534754, 0.17983606887294967, 0.20216166046812034, 0.07970671419465747, 0.06247325863786424, 0.07455742134460164, 0.07771700464227727, 0.059750840892270896, 0.07271510663451697, 0.04519845979919446, 0.05155191159881689, 0.05487379116640545]}, "mutation_prompt": null}
{"id": "36402338-5de6-449d-a6c4-d332962ea289", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "1818c601-909f-4f91-9430-f716181c1af3", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "c7ffe4c2-9715-4eaf-9301-ae6a632cc068", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "5e7fa2c7-b4bd-463c-a794-9a756027c2e9", "solution": "import numpy as np\n\nclass DynamicEnsembleMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        num_subpopulations = 5\n        subpop_size = 10\n        scaling_factors = np.full((num_subpopulations, subpop_size), 0.5)\n        mutation_rates = np.full((num_subpopulations, subpop_size), 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // (num_subpopulations * subpop_size)):\n            for i in range(num_subpopulations):\n                population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(subpop_size)]\n                fitness_values = [func(ind) for ind in population]\n\n                best_idx = np.argmin(fitness_values)\n                if fitness_values[best_idx] < best_fitness:\n                    best_solution = population[best_idx]\n                    best_fitness = fitness_values[best_idx]\n                \n                for idx, ind in enumerate(population):\n                    mutated_solution = ind + scaling_factors[i][idx] * np.random.normal(0, 1, self.dim)\n                    \n                    fitness = func(mutated_solution)\n                    if fitness < fitness_values[idx]:\n                        population[idx] = mutated_solution\n                        fitness_values[idx] = fitness\n                        scaling_factors[i][idx] *= 1.1\n                        if np.random.uniform(0, 1) < 0.2:\n                            mutation_rates[i][idx] *= 1.2\n                        else:\n                            mutation_rates[i][idx] *= 0.9\n                    else:\n                        scaling_factors[i][idx] *= 0.9\n                        mutation_rates[i][idx] *= 0.8\n                \n        return best_solution", "name": "DynamicEnsembleMetaheuristic", "description": "Utilize a dynamic ensemble approach where multiple subpopulations with different mutation rates and scaling factors cooperatively explore the search space, enhancing convergence speed through diverse exploration.", "configspace": "", "generation": 20, "fitness": 0.09074832522929485, "feedback": "The algorithm DynamicEnsembleMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.16430415774674634, 0.1588392926038834, 0.15908632427528624, 0.18136822050166523, 0.1727144939994394, 0.16438206100024422, 0.17553417887488176, 0.15472269971164054, 0.177169022223008, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058046311650955196, 0.07344001489928165, 0.04497866055187438, 0.04559755538648391, 0.04774452059582035, 0.0515842434770577, 0.045216306573426124, 0.041575518660479927, 0.05598082633934609, 0.0223874936910593, 0.04365371639048521, 0.029887053534120245, 0.04765310531992273, 0.03182627396155857, 0.02817746810649535, 0.029368587438711957, 0.03457220896749691, 0.04012719602970827, 0.08076845458107274, 0.08265520862663234, 0.07523901292854229, 0.07557368745562776, 0.08964826792171587, 0.08096833460327091, 0.07853503410272566, 0.07654364354799659, 0.09652425029210132, 0.09354144969434508, 0.06973286446740146, 0.10178198883826939, 0.08920342803224068, 0.07079323045832497, 0.06335695932953966, 0.08234872030766205, 0.08443438943815507, 0.06728466005797129, 0.11502385666419757, 0.12105238212603964, 0.09373581677726195, 0.11751758020471659, 0.11859980698264949, 0.12143130931851231, 0.11524353903715456, 0.14457417264517503, 0.15840375331040446, 0.04978861443479654, 0.023617851233356135, 9.999999999998899e-05, 0.06083876897850171, 0.015426916051232142, 9.999999999998899e-05, 0.002023463441162332, 0.024265344021386248, 9.999999999998899e-05, 0.02972715504132939, 0.011052265712614417, 0.004441237759874039, 0.0004932810295217305, 0.00044841208946033717, 9.999999999998899e-05, 0.01127469714926188, 0.006895145310865658, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035606242217910755, 0.058334803786263545, 0.04520028991554648, 0.08804998892677962, 0.09989330872065216, 0.05238180696406858, 0.041256710329969026, 0.08368206431096603, 0.07666565205374076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035495187463777667, 0.20226780277682088, 0.17379503574996102, 0.19332019579065118, 0.17961617776928962, 0.18602814178035088, 0.21110740722361554, 0.2013140243370255, 0.19517981453168276, 0.1955526041423924, 0.03995015642377897, 0.03752122853155293, 0.043219026028336716, 0.05610832736257121, 0.043487164643165266, 0.04317569924146336, 0.05091373648024278, 0.0629786014327508, 0.03913384707962564, 0.11886473278860554, 0.14604510844441176, 0.13051502864662745, 0.1337320279122659, 0.13208746883293132, 0.1393045547399061, 0.1520583241924287, 0.1437901457842401, 0.17051016933486207, 0.16946690911611817, 0.17216668519146228, 0.16454911058494204, 0.1785519870734693, 0.16004274187271494, 0.16591840111547262, 0.16365835346237856, 0.15625419601267698, 0.1559669793320665, 0.09612731095161076, 0.12854137927935294, 0.10398495964212284, 0.12215618049194454, 0.12255330263369435, 0.1040505544789797, 0.12476863564794771, 0.1191570975343258, 0.11018722978721673, 0.15155679452632398, 0.16154946061823772, 0.18130261260506675, 0.15405545497466788, 0.16530212849492942, 0.1474478705586143, 0.1660664726979334, 0.14702751990242047, 0.16278601573762408, 0.13571809602938978, 0.1458960366999279, 0.1461852223032536, 0.1463848880089288, 0.16381071563777916, 0.14376391485539897, 0.1408152427288415, 0.1361086872232372, 0.14473091433259577, 0.1660453218245993, 0.16264394506904623, 0.25398907259069314, 0.22530453395199335, 0.14601617527133381, 0.21680784353530724, 0.15509531628466433, 0.15818761477972754, 0.17095561972143625, 0.15382256819089868, 0.18321630288121826, 0.1489699282942445, 0.13368083174784717, 0.14075220853406845, 0.1612191567278074, 0.14670417331395547, 0.18704754400751666, 0.15226575870111592, 0.19411294243032717, 0.182302121406149, 0.1738297918950631, 0.19315313994361094, 0.18149271997443617, 0.1818075566043944, 0.18594261419280678, 0.17763603090952584, 0.22636952137195943, 0.05931495878523163, 0.05234880968978961, 0.053676732728452414, 0.0630277817253404, 0.04907009266545759, 0.04527754119676575, 0.05099078569367155, 0.06600603265052196, 0.049001693605063346]}, "mutation_prompt": null}
{"id": "a7bf5dbf-3aff-4399-a22a-a7355a675488", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "98e38fec-7788-4d64-aee0-9d03d59b6a45", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceImprovedMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            best_individual = population[best_idx]\n            best_fitness = fitness_values[best_idx]\n\n            for idx, ind in enumerate(population):\n                direction = best_individual - ind\n                mutated_solution = ind + scaling_factors[idx] * direction\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9\n                    mutation_rates[idx] *= 0.8\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceImprovedMetaheuristic", "description": "Implement a novel strategy where the best individual guides the entire population towards promising regions by adjusting their positions based on the best solution's direction.", "configspace": "", "generation": 22, "fitness": 0.12931819319888604, "feedback": "The algorithm EnhancedFastConvergenceImprovedMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.179822747169885, 0.1901095308991061, 0.17613883479949677, 0.17754678503019972, 0.20172369384522482, 0.1672532038572514, 0.15971290440368135, 0.1774133923080946, 0.17960962257285118, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05597312943139421, 0.06339193963104772, 0.04323662902007941, 0.04662357649158899, 0.04988531507599947, 0.04430026197487391, 0.0540414401853937, 0.04479737385377214, 0.053996282542557505, 0.021510709876286227, 0.04099720542330454, 0.04149317054353019, 0.031573073821434594, 0.04399945951318518, 0.0284435505994316, 0.04093074158261656, 0.04468682150352288, 0.04821279696368708, 0.9508629958836426, 0.9441717065161871, 0.9479318736586713, 0.9653349463843705, 0.9534303293485732, 0.9653658858571599, 0.9312345265868757, 0.9579575340642059, 0.9616183388213079, 0.08473271447029873, 0.06908470404073108, 0.06608631695872313, 0.060675209749602055, 0.07478916103460309, 0.05119246480702755, 0.08638832087086934, 0.06936075239036432, 0.10256685464968818, 0.14209489226669791, 0.13254680755601056, 0.12432299433245553, 0.12766181514650266, 0.11156244016882466, 0.12179457585553533, 0.12224892658556052, 0.11706595432754496, 0.1255407786864835, 9.999999999998899e-05, 0.0006791443184148704, 0.006489784214201988, 9.999999999998899e-05, 0.008189801647218387, 0.004118155354279951, 0.00655832312092719, 0.0031655247724345914, 0.019108638096507313, 0.0021234863933484727, 0.002847179233731234, 0.022465106935898427, 0.0510415398923969, 0.005567677403327753, 0.00996376430868573, 0.029264837692244527, 0.00689577865550306, 0.002847120799625791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05256538631488561, 0.06769599069713983, 0.10210649164594576, 0.0521856851099366, 0.04401360373505736, 0.018359482825033635, 0.061289265492174505, 0.06602562726236372, 0.060421321119554894, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009747328512522468, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003373557506632263, 9.999999999998899e-05, 0.2171620453392743, 0.1959439618722778, 0.18471873762197588, 0.22799392083551184, 0.2090358787873, 0.20615248591455992, 0.19832108334117104, 0.22827704963198148, 0.19329260766612122, 0.04176443014904385, 0.04314067539778643, 0.042664296994201156, 0.04711241880989692, 0.055359118348923264, 0.05168119785346592, 0.06430150375558619, 0.05841361552500601, 0.04250910600819735, 0.14263303692208706, 0.13589365683420307, 0.16430880813500592, 0.14706321745918116, 0.13857864349741555, 0.16139332117435445, 0.1418706245388044, 0.13833741693808166, 0.12612923537565346, 0.16714692639164075, 0.18116863461887978, 0.1781148961938015, 0.17711767369077314, 0.1718354382283369, 0.1728006293787281, 0.1735654331767793, 0.17570532803359606, 0.17857634227533092, 0.0975803709326255, 0.09879744445542094, 0.12018932438647012, 0.15729885318233738, 0.10121267319005933, 0.1074570537554711, 0.11468706791951921, 0.1483879063529484, 0.1102234004341639, 0.15205029422335337, 0.1707977563224511, 0.16474349734094407, 0.15611576206860533, 0.15933582587437867, 0.17758280299375784, 0.15911021043563722, 0.17758456610464668, 0.18059363262759565, 0.14066162084787504, 0.1564431910734878, 0.14954145676903285, 0.14734226186535726, 0.1568668750522858, 0.17127385653402594, 0.15440132206054258, 0.16205382426262627, 0.1560760112254942, 0.17081101877236105, 0.18263039798939973, 0.1625272485729733, 0.18876821468741356, 0.1534347360704178, 0.20876372352691697, 0.1556159739035431, 0.2001706784877617, 0.17310214981565353, 0.15941509443319046, 0.15531977703523991, 0.18629537393842266, 0.13596707785617201, 0.15615923370904694, 0.14448827539987874, 0.1301329418387439, 0.25897084889399835, 0.14389382796532246, 0.19619619505254948, 0.18209333814899475, 0.17927705220329737, 0.16962558685447238, 0.18182548245631125, 0.18096612499760822, 0.19409043602819342, 0.1874595017322055, 0.19024470445382413, 0.055565790380526, 0.06460602332670518, 0.06528752307581565, 0.06131676502578265, 0.07769820990553922, 0.06514323593234184, 0.058623225643271826, 0.06512622508322052, 0.06486784175821725]}, "mutation_prompt": null}
{"id": "27c506cb-8810-4724-b649-d15ab25a47da", "solution": "import numpy as np\n\nclass AdaptiveSelectionMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            \n            for idx in range(pop_size):\n                selected_idx = np.random.choice(range(pop_size), p=[1 - (fitness_values[i] - min(fitness_values))/(max(fitness_values) - min(fitness_values)) for i in range(pop_size)])\n                mutated_solution = population[selected_idx] + scaling_factors[selected_idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[selected_idx]:\n                    population[selected_idx] = mutated_solution\n                    fitness_values[selected_idx] = fitness\n                    scaling_factors[selected_idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[selected_idx] *= 1.2\n                    else:\n                        mutation_rates[selected_idx] *= 0.9\n                else:\n                    scaling_factors[selected_idx] *= 0.9\n                    mutation_rates[selected_idx] *= 0.8\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "AdaptiveSelectionMetaheuristic", "description": "Introduce an adaptive selection mechanism that probabilistically selects individuals based on their fitness values to promote exploration and exploitation efficiently.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('probabilities do not sum to 1').", "error": "ValueError('probabilities do not sum to 1')", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {}, "mutation_prompt": null}
{"id": "6ce60498-4577-4fcb-b282-8826937df732", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "05bdbe36-a8cf-4bda-bb77-3935ac20a33f", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "9a0ddc50-e3be-4985-afdb-b3b2c14643f0", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "46d445d4-d50b-4701-9e9a-3f4d4303900f", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "8de6ce7e-9905-403e-a062-760f10befffb", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "81569bf1-337c-4aa3-a1b3-f39a44335087", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "ef000a73-580d-4812-89bb-a802be8ddc07", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "ec0bed07-d4ef-40cd-9d8e-22d6eb7140bc", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "6084271d-c05a-425a-bb44-a9fce6fd60b3", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "840c4719-f78f-4e90-af67-b7b80ceaa9f1", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "fcd9c40f-c3ae-4832-9a04-2e6cf03e0b65", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "90767381-153c-4acc-8e00-0bcea3ef1c89", "solution": "class EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.history_fitness = []\n\n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                    if len(self.history_fitness) >= 2 and self.history_fitness[-1] < self.history_fitness[-2]:\n                        mutation_rates[idx] *= 1.1  # Increase mutation rate for recent fitness improvements\n                else:\n                    scaling_factors[idx] *= 0.9\n                    mutation_rates[idx] *= 0.8\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n\n            self.history_fitness.append(best_fitness)\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic adjustment of the mutation rates based on recent fitness improvements to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": 0.1779026092644486, "feedback": "The algorithm EnhancedFastConvergenceMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "57834223-5269-4c77-975c-035f456aad7d", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "4659349f-b47d-431f-9c4f-8b6aacd06b17", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristicImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  \n                    mutation_rates[idx] *= 0.8  \n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n                    \n                if np.random.uniform(0, 1) < 0.1:  # Modify mutation rates based on diversity\n                    mutation_rates = np.clip(mutation_rates + np.random.uniform(-0.1, 0.1), 0.1, 1.0)\n                if np.random.uniform(0, 1) < 0.1:  # Introduce diversity to the population\n                    population[np.random.randint(pop_size)] = np.random.uniform(-5.0, 5.0, self.dim)\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristicImproved", "description": "Implement a novel mechanism to dynamically adjust the mutation rates based on fitness improvements while enhancing diversity to expedite convergence.", "configspace": "", "generation": 37, "fitness": 0.17174211887996693, "feedback": "The algorithm EnhancedFastConvergenceMetaheuristicImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.18.", "error": "", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.5492350954241738, 0.5952845334869004, 0.6274733899176383, 0.5811758737888124, 0.5054489756651154, 0.4866802320751429, 0.5916235808967704, 0.4550739060531419, 0.6282537266012345, 9.999999999998899e-05, 9.999999999998899e-05, 0.04366748544123478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014581654451667814, 9.999999999998899e-05, 9.999999999998899e-05, 0.08259872801363222, 0.06449269228961363, 0.06454603469203757, 0.05292258486748147, 0.03636882842726208, 0.0520425751970206, 0.05997382560749065, 0.07157014628307556, 0.05501450864837065, 0.031661440763706694, 0.09457106465946286, 0.05074066611325234, 0.03825501153162436, 0.05323470130988661, 0.0439964977020223, 0.06985133397663956, 0.033999843847956845, 0.04809322435770502, 0.8848405005114647, 0.7837633656111563, 0.7891476142175979, 0.8712308715060599, 0.7666404256409785, 0.8678493077687035, 0.8456894058539219, 0.4146740320139476, 0.8137981985891577, 0.11685475210438412, 0.25849455978887537, 0.2523129656708455, 0.2977120333313955, 0.23489697199109882, 0.1394805742789278, 0.15553821794594969, 0.23817230909983267, 0.2831906609406538, 0.1622665393697691, 0.14174965179283006, 0.1709538738458286, 0.15298140209248012, 0.14368354393402483, 0.1454764065774654, 0.14080122027222464, 0.1257187101989552, 0.23746175969095673, 0.1333966992982445, 9.999999999998899e-05, 9.999999999998899e-05, 0.1254620897033526, 0.0008814421198685141, 0.11500725645489673, 0.10024101560108434, 0.11770674997634256, 0.1017506451343334, 0.11909479481841878, 0.0067879159568161596, 0.21982988005383752, 0.13080943232045883, 0.028132991969982535, 0.2075011417107725, 0.17321901289109154, 0.021288954348800737, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11809353320359917, 0.04646619349108372, 0.05478120678216236, 0.05703536993839986, 0.026824979667490312, 0.03161369175475648, 0.061564489902506514, 0.041324600628631414, 0.053359247733857584, 0.03093885662218565, 0.013122346119404216, 0.0383998110567807, 0.012736788977343871, 0.0645163803206853, 0.05655912652810857, 0.031246345012475696, 0.03580067725801506, 0.05572145490389535, 0.07009820595832883, 0.06375723925018828, 0.0895054261586723, 0.029859485993733004, 0.02994766228391743, 0.013189517997962863, 0.07474957304887653, 0.06957254395115087, 0.019209885283986705, 0.4550364312907563, 0.3700471383959999, 0.42072371319052104, 0.39619179789754866, 0.3489417332428997, 0.3844329063337444, 0.40102513025224096, 0.3514323417371249, 0.42229840780657546, 0.06642546202020327, 0.07129214660985639, 0.05797279799111188, 0.0710098977312571, 0.05075997156127399, 0.058399325895371335, 0.08581512813350145, 0.05849791635195922, 0.057697140679433545, 0.1649773673929521, 0.1598641183254298, 0.12222845200961452, 0.16228810813458316, 0.1485853326724348, 0.17352810338430313, 0.16017038929068717, 0.21381789203263257, 0.15830332240466793, 0.15761068290897928, 0.2120795947335219, 0.1576688711670795, 0.16503159762765718, 0.1575285367517838, 0.16650796766212628, 0.18994267623961392, 0.2315992122876811, 0.16161319471189906, 0.20303183769423871, 0.10201539421499417, 0.11396129403439059, 0.244853162845026, 0.11762364714942686, 0.13429627736756078, 0.14729681931356242, 0.11633203657726843, 0.10032050434297746, 0.19264381875360426, 0.16344199467392795, 0.17538537221443473, 0.18337625207715924, 0.15084025265998313, 0.18282097875321845, 0.16182651563066686, 0.1519722812468135, 0.18457339656597738, 0.15317305294978856, 0.16918956380220174, 0.1825067808331462, 0.1630757357930539, 0.19991223249791923, 0.17303464319652595, 0.17817963960905525, 0.18154450916704923, 0.19062717398545204, 0.17135588560847914, 0.1740314968451392, 0.16647521377412522, 0.19417800954836306, 0.1824158367382146, 0.16324381549205425, 0.16483500633685066, 0.4703333609072472, 0.17447759494782988, 0.1518989289224859, 0.16292935945680198, 0.3812010785990274, 0.2038185869405148, 0.24772054973378388, 0.2021920251126399, 0.2052443444197236, 0.2548083168825628, 0.17970369614104054, 0.18389530073287974, 0.19018939007425728, 0.1952393817575644, 0.19190255500470188, 0.18666771492380807, 0.18377310101451128, 0.19833364963612043, 0.18359850084196472, 0.17738458235253507, 0.05210268398424611, 0.05114789823491628, 0.0623251407154658, 0.0871730700099077, 0.053491775731632885, 0.065076845443097, 0.05165312099055186, 0.049870473533357274, 0.06159271295994495]}, "mutation_prompt": null}
{"id": "350c510d-979f-4129-8217-62b09fdd4865", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "f33a1302-fece-458e-b245-2cfc2807764c", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "b433230e-2b9f-42fe-84ea-47d2bf964997", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "a583c9ca-e585-4136-8c47-7018db12d748", "solution": "import numpy as np\n\nclass FastConvergenceWithDynamicScaling:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n\n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n\n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n\n                fitness = func(mutated_solution)\n                fitness_diff = fitness - fitness_values[idx]\n\n                if fitness_diff < 0:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    mutation_rates[idx] *= 1.2 if np.random.uniform(0, 1) < 0.2 else 0.9\n                else:\n                    scaling_factors[idx] *= 0.9\n                    mutation_rates[idx] *= 0.8\n\n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n\n        return best_solution", "name": "FastConvergenceWithDynamicScaling", "description": "Introduce a dynamic scaling and mutation mechanism that adjusts based on the fitness differences, promoting faster convergence.", "configspace": "", "generation": 41, "fitness": 0.1779026092644486, "feedback": "The algorithm FastConvergenceWithDynamicScaling got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "b52ceeae-0057-44de-b2cc-7d382f46105c", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "5c518aa1-7e85-436b-b453-69b9d753c950", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "8bcad0ff-33d5-40b8-9318-7da6de5b5064", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "99115745-0d05-4461-897b-89fb921aefe0", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "d8fd5751-a024-4e94-8f07-bdf9d8a344f5", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "57f2ff2d-024a-44bb-91be-df4672cb01f3", "solution": "import numpy as np\n\nclass DynamicMutationSelectionMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    if fitness > best_fitness:\n                        mutation_rates[idx] *= 1.1  # Increase mutation rate for preserving diversity\n                    else:\n                        mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "DynamicMutationSelectionMetaheuristic", "description": "Implement a dynamic selection strategy for mutation rates based on a combination of fitness improvements and diversity preservation, enhancing convergence speed.", "configspace": "", "generation": 47, "fitness": 0.1779026092644486, "feedback": "The algorithm DynamicMutationSelectionMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "6fe9a17d-c6a0-467f-8bee-163c54a59c3e", "solution": "import numpy as np\n\nclass FastAdaptiveMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n                mutation_rates[idx] = mutation_rates[idx] * (1.0 - np.log(fitness_values[idx] - best_fitness))\n        \n        return best_solution", "name": "FastAdaptiveMutationMetaheuristic", "description": "Implement a novel adaptive mutation strategy based on the individual solution's fitness progress, dynamically adjusting mutation rates to enhance convergence speed.", "configspace": "", "generation": 48, "fitness": 0.1779026092644486, "feedback": "The algorithm FastAdaptiveMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "4d4e18eb-a6ec-41df-b4ee-14dc78f589ed", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "a1a0026b-018d-4a02-a075-b9d0e3b93260", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "b861f55e-2ed8-4656-89f5-51f1c78b4a88", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "8e0b715e-b55b-4bff-8b61-c64a01afab59", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "3f82c9b8-8c51-4fbe-b77d-9c4026941dce", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "d6370831-9ac6-4b1b-a192-eee4cba1ab2e", "solution": "import numpy as np\n\nclass DynamicNeighborhoodSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                neighborhood = [population[i] for i in np.random.choice(len(population), 3, replace=False)]\n                \n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  \n                    mutation_rates[idx] *= 0.8  \n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "DynamicNeighborhoodSearch", "description": "Utilize a dynamic neighborhood search strategy that incorporates the best solutions from neighboring individuals to enhance exploration and exploitation.", "configspace": "", "generation": 54, "fitness": 0.17586716124732332, "feedback": "The algorithm DynamicNeighborhoodSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.5734174576189819, 0.5429276020062057, 0.6073005334645392, 0.552477158500806, 0.5521182977314694, 0.5704076695007037, 0.5140365127364013, 0.5472288474648876, 0.49363976353798467, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02620959875610729, 0.038850489606285565, 0.060291647872712906, 0.0459288339338364, 0.06091708531219264, 0.04784373699521771, 0.09581928958040065, 0.05917068407672321, 0.05789540609624566, 0.060713144430304955, 0.024932788267464256, 0.030273240864393536, 0.032562214416794966, 0.08057707889951105, 0.03185566306548393, 0.033189679040658504, 0.03527380683356973, 0.06725497221886212, 0.04104538953410741, 0.8213672641525703, 0.7788155304907254, 0.9063846360045349, 0.9308191122777786, 0.823191899065505, 0.38979787498971086, 0.8213727434765812, 0.41286486626746244, 0.7801279725555635, 0.2610050536853087, 0.29305921016541736, 0.28740853091221497, 0.16716033670014918, 0.2754671631119773, 0.20111252311625327, 0.1682972639036605, 0.05901160665143601, 0.1792154213950713, 0.14017169835882703, 0.1050160966321011, 0.10946987481300252, 0.16773225699419292, 0.12533698166261764, 0.26384595425108914, 0.11085979356761033, 0.11732805692676629, 0.22521186121962067, 0.13074659429691327, 9.999999999998899e-05, 0.12072246151415933, 0.17876682753229978, 0.20054600204181838, 0.00686133442807535, 0.20004026858955337, 0.15453975262318143, 0.14386293334636702, 0.16810968973307194, 0.12224777641333862, 0.12001265889331914, 0.13702958864220272, 0.16142539576517678, 0.1352919540626133, 0.1893161031839593, 0.2060044584190599, 0.0816241673695507, 9.999999999998899e-05, 9.999999999998899e-05, 0.08188120629193785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.047625834549481105, 0.0608221701717504, 0.0455654683821729, 0.07488912264509906, 0.035299845245011396, 0.04926833632629968, 0.06396763563405894, 0.05507157913120375, 0.03992850794286351, 0.018448042697508882, 0.00785330066919343, 0.04301838405513114, 0.03294706259803859, 0.07286782308487527, 0.11154520710902471, 0.06643335215671742, 0.06473839902016587, 0.03842955076299426, 0.12471671414773156, 0.049838931718787505, 0.02091486042800228, 0.08640004794257516, 0.07284288785271331, 0.12400014054631303, 0.01378422309419347, 0.07556372235360309, 0.07459281560459585, 0.40232349381572385, 0.37276398136819, 0.36945021934225675, 0.37292240741955685, 0.3873464080735274, 0.3749714247270487, 0.388563918625747, 0.38709612863813037, 0.39628971772717936, 0.07030015623330688, 0.1022437036049092, 0.073686774854415, 0.05570367297828582, 0.05350050356685676, 0.06157254912439125, 0.05319642735038055, 0.05242445262772655, 0.0675057073716081, 0.14012791469483965, 0.13773997926758808, 0.23900182160539396, 0.18378341447638213, 0.17335880722258612, 0.16842115511232658, 0.17708714079917431, 0.15612159348602295, 0.244824858351392, 0.1567025221788555, 0.1773934506320859, 0.16162893252189892, 0.25018291562386497, 0.2681757671230104, 0.21808020984124699, 0.15669853175589066, 0.2003337853232514, 0.2653274560829334, 0.11571605528474505, 0.13056692978931095, 0.10975145103556339, 0.09834623096176309, 0.0997146985313404, 0.20664290638270588, 0.12817291187076718, 0.11259390264351055, 0.09211368213001225, 0.16957188309585125, 0.19047221287410998, 0.15023785112627197, 0.16897591601236128, 0.1590050623697714, 0.16483227889668162, 0.16402774216481286, 0.16318239752181785, 0.1575700154313212, 0.18125991078576642, 0.14225265365901707, 0.1713875179035369, 0.16122818564141894, 0.16503915906843303, 0.16895675657914822, 0.1651375433119885, 0.18437359783925755, 0.16984040159742986, 0.1915814252649506, 0.5902830323215971, 0.4087611167392553, 0.15617623768395317, 0.18397907920125633, 0.4702270797442627, 0.15764538516350657, 0.15200029898211453, 0.15162467066633123, 0.13488520245889124, 0.28970815296462793, 0.19941456514164124, 0.14599411281372454, 0.1279926807619608, 0.24265707784826784, 0.15391919178034263, 0.28786699637565694, 0.15063489285622766, 0.19500735500620137, 0.1826351202855443, 0.1849861647126726, 0.19640276573391113, 0.18023692431488547, 0.19377744769862604, 0.1892987783299216, 0.18343137835489676, 0.20183964278624833, 0.0630462693728141, 0.04718907373460657, 0.06397980714413021, 0.06725844530624348, 0.06150319887239564, 0.0737339084076708, 0.06272148554057244, 0.059502034333284826, 0.05987075793464425]}, "mutation_prompt": null}
{"id": "00fd3a50-7a5b-480f-9821-2e52e28c8b4a", "solution": "import numpy as np\n\nclass DynamicPopulationSizeMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n\n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n\n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n\n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n\n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n\n            # Dynamic population size adaptation based on fitness improvements\n            if np.random.uniform(0, 1) < 0.2:\n                pop_size = max(5, min(20, pop_size + np.sum(np.array(fitness_values) < best_fitness)))\n                scaling_factors = np.full(pop_size, 0.5)\n                mutation_rates = np.full(pop_size, 0.5)\n\n        return best_solution", "name": "DynamicPopulationSizeMetaheuristic", "description": "Introduce a dynamic population size adaptation mechanism to adjust the number of individuals based on fitness improvements, promoting faster convergence.", "configspace": "", "generation": 55, "fitness": 0.15222055608313648, "feedback": "The algorithm DynamicPopulationSizeMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.3173849672143817, 0.3311906121373599, 0.30619512804058546, 0.3354585812662517, 0.2935033977997997, 0.31050910250155883, 0.29385512487258947, 0.311332452573161, 0.2931403351315396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07091514547612054, 0.05982149589224339, 0.05994214697231803, 0.04909708230610066, 0.05743051270045996, 0.07187163253625273, 0.0598129908192766, 0.07258168134473708, 0.04812315182078186, 0.06572664545522477, 0.03775603612493428, 0.05333493172131054, 0.05169955140637372, 0.05764127492267779, 0.042733624598697006, 0.04938354743367268, 0.03922018712363973, 0.04469408481312598, 0.8111012560038237, 0.8271713844588453, 0.7786992344638739, 0.839779112776669, 0.8517887906973669, 0.8807334210630345, 0.8511817755523149, 0.736078953343724, 0.8242118085307903, 0.14047420273331812, 0.14783365219117672, 0.17190606678512854, 0.15769200596216437, 0.1310296015661797, 0.17451435605147436, 0.12590256713910153, 0.12560749227921464, 0.17637713741506122, 0.17600593366133066, 0.22792184355435752, 0.1544938717063531, 0.17452565301866285, 0.23567580418841338, 0.19178859497831469, 0.15027622606116253, 0.21686417065757146, 0.20229063388604596, 0.07238403106390656, 0.041852669548542165, 0.10226630797300718, 0.10215884860822722, 0.04833257340877595, 0.09443897755969832, 0.09834054964313332, 0.08687123030778399, 0.07846503237653779, 0.09360051081963372, 0.08528974115595644, 0.07083117690410723, 0.12638525144356205, 0.03501014035236494, 0.11307765101000955, 0.09639144174192893, 0.08436159660279174, 0.0823981340136728, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05739966886256498, 0.05198428676765421, 0.05436760253522932, 0.029343775267196226, 0.0506841776763175, 0.05102797875407483, 0.11565323183485943, 0.05000124202980716, 0.0562188170612099, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01894089372377472, 0.03339637998365197, 0.01951760993273033, 0.039955631793110125, 0.034433096569922106, 0.028239472830023815, 0.02746446809372205, 0.020022648436558654, 0.03198927631751014, 0.2988510936957922, 0.2704502202287292, 0.30657838514147184, 0.3185539285541401, 0.29469718016648705, 0.28624245469378606, 0.31731967432604224, 0.2826730390737715, 0.2974796101769226, 0.041640116846337505, 0.06981941247553547, 0.05483184607800373, 0.060975813540242285, 0.04507658472980003, 0.03765325048537127, 0.07764839308546634, 0.04709699411989732, 0.056153561745320935, 0.13162894885101684, 0.1571085467860155, 0.15777360275665164, 0.150368629590803, 0.14360281477346526, 0.12634177247589762, 0.14633936751219057, 0.14065973477181792, 0.12716955481405623, 0.1523261064977669, 0.19572749984448423, 0.16070250172916511, 0.23907299957877837, 0.23161246942395264, 0.18197446071413292, 0.217938003298358, 0.1753066420369409, 0.21866208273664756, 0.15170548757646884, 0.12467574132873271, 0.15025922028241967, 0.1618826154803632, 0.14223027284777212, 0.16850806600745005, 0.1339585491181151, 0.14469137006355082, 0.12605514696562425, 0.1593758733659113, 0.15475388981571103, 0.18285065121841604, 0.15091906213624884, 0.15715958115734252, 0.1474428230232292, 0.16142512825670052, 0.16316120782900467, 0.15859365956634064, 0.16233673563386908, 0.1645664199170811, 0.1626324453181165, 0.16100688865326118, 0.15793049889131905, 0.15913575390286583, 0.17179448991087487, 0.1713228596478944, 0.15137379026335818, 0.18532338238427215, 0.27529633984813173, 0.33396683455562703, 0.18850788802610963, 0.17993789702386898, 0.1622190637397114, 0.152168929816755, 0.16363493446427912, 0.17693801881250404, 0.1977786660136468, 0.24247964522437215, 0.19192986118676314, 0.16803404441498637, 0.26492485234926744, 0.2600809677027224, 0.1635245693878029, 0.14387867700815238, 0.2095557151275712, 0.18460394581803063, 0.20352694043674613, 0.17890037497429423, 0.19831258201406976, 0.21498425903213025, 0.17937230667121096, 0.18372625219919358, 0.18380252653355633, 0.20085044991475065, 0.05613345340409159, 0.04777928287215527, 0.06761718895661994, 0.06185948049756751, 0.06801920636952274, 0.06497261683533939, 0.04956079379837652, 0.06274196543141075, 0.04081357684435838]}, "mutation_prompt": null}
{"id": "31b7562f-3dfe-4031-84ef-87271483f22d", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "1b9284c0-aba5-4f82-8aea-824173caafe7", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "ef4a795b-961b-431c-ad2b-695a46fdc614", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "73715f1f-4500-4552-9e93-ea84bc115fd8", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "c6eb16d6-e0e8-447c-8f22-54cab35e75df", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9\n                    mutation_rates[idx] *= 0.8\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n            \n            # Introduce population diversity maintenance\n            population_mean = np.mean(population, axis=0)\n            for idx in range(pop_size):\n                population[idx] = population[idx] + 0.1 * np.random.normal(0, 1, self.dim) + 0.9 * population_mean\n            \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a population diversity maintenance mechanism to encourage exploration and prevent premature convergence.", "configspace": "", "generation": 60, "fitness": 0.17600787868425927, "feedback": "The algorithm EnhancedFastConvergenceMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.5598004189717558, 0.49903556901136603, 0.5806032933944123, 0.5457404425931743, 0.5839838765841269, 0.5220104299937254, 0.4782797115001073, 0.5214890076223985, 0.5693926499259108, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010117204383259804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04964981157766779, 0.06358303581748337, 0.03867608822579527, 0.11010126021203759, 0.06823978195476799, 0.0691686274747011, 0.04382402214693393, 0.058815275280101, 0.035985159769127084, 0.0430204019555811, 0.07037222226117024, 0.043229659933092246, 0.04104792597577456, 0.06688584071164483, 0.06091878118048466, 0.023744563121199103, 0.08113456817138653, 0.05785734234864759, 0.8667661477410951, 0.8613615890453965, 0.9088781487969658, 0.8384430469381212, 0.8037211619733045, 0.8757298794938031, 0.6812817334037347, 0.8260096616920795, 0.9235702700538087, 0.09852715611079188, 0.18407413050593024, 0.060597230663513635, 0.18674969340433734, 0.20085163228266334, 0.19798458532515173, 0.17206136578059728, 0.09133144472746824, 0.17952314491178656, 0.11408872518691437, 0.10782917232164213, 0.12134427718462903, 0.16728346309419617, 0.13767430801213776, 0.27555360650861727, 0.10814215777420177, 0.1262622059022196, 0.14892327772841085, 0.008630404945793257, 0.006684182372850622, 0.11663905444073353, 0.08852664714074088, 0.09686532250462732, 0.17118864277603374, 0.14831871038371136, 0.14179853206551474, 0.11831488318442696, 0.14159784803560582, 0.12405647087058591, 9.999999999998899e-05, 0.23751064306138192, 0.13375683169566055, 0.001243926719527888, 0.21624252690648083, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048202144204150366, 0.10060252608232789, 0.05927232567720242, 0.048482863010948285, 0.06144109040261536, 0.023786050724215912, 0.05304726596504039, 0.06455986999896046, 0.029335663897647968, 0.05353374571573477, 0.009908944322878366, 0.027489971671101232, 0.03291402233096774, 0.019914131525547774, 0.04450970424944478, 0.06916406537159014, 0.06510167640066156, 0.04636313218740595, 9.999999999998899e-05, 0.05096559857928218, 0.14880699039298795, 0.15774257978727002, 0.12988033221906337, 0.02809845573636538, 0.05479796651924984, 0.1565397264490721, 0.0417636875057642, 0.38145151488884743, 0.3280551044987664, 0.38465333474951047, 0.41803184705203145, 0.37858558048644064, 0.39968032720101143, 0.36747856107011534, 0.43114971595902285, 0.4275810091306723, 0.06557549039106125, 0.07510999721358147, 0.05578680489920862, 0.0809285856231321, 0.03919045658797682, 0.03604246990336446, 0.05753559985473389, 0.06441701171205239, 0.07863067998404827, 0.21947451261626194, 0.14968032405374798, 0.21172755815734, 0.250152676283791, 0.27546374832077036, 0.17515021649475238, 0.2749622634277442, 0.1567716372538518, 0.30932635343221204, 0.15023666506046252, 0.16348944585639058, 0.14861671242180075, 0.20698391950856876, 0.26432744638893346, 0.23403474674575298, 0.19414830746851441, 0.19617567328680752, 0.20466961313929977, 0.09882652402292535, 0.11214667092889508, 0.12106091800841112, 0.10957504026192932, 0.14678869754576895, 0.11241333465783776, 0.09744384202951373, 0.22367778722097953, 0.16168049137929652, 0.18763682168750973, 0.16493882434543516, 0.17008794653896098, 0.15034872892686602, 0.1439981060186819, 0.17323727258179555, 0.1897506346431692, 0.17078265859785535, 0.15094712799770094, 0.15902720976237394, 0.17026662200221931, 0.1958726618068647, 0.1559905469509204, 0.14868413924601154, 0.18836085861520535, 0.17113715250753125, 0.1936854279616832, 0.1643619116443411, 0.17231876697580661, 0.8281984038805998, 0.24389302928019574, 0.16772456143769543, 0.18704170245044727, 0.187316347445332, 0.1626749464571291, 0.1645715665032702, 0.15626176027398542, 0.1838499214574254, 0.18427649227388365, 0.42413863223465775, 0.15214383154492805, 0.15122056071177936, 0.1645353450607867, 0.15467679023613312, 0.15727850618972827, 0.24255433971194962, 0.21220267676387905, 0.19846024067421997, 0.1758518743298526, 0.1817047578383706, 0.18507267374007175, 0.22688589294106742, 0.19428556456085, 0.1959983406576381, 0.181693536066732, 0.0658398026031376, 0.06767036499720358, 0.05472941645134599, 0.06020651592700765, 0.06428552915203578, 0.06602190044492218, 0.05013048577497081, 0.06345038353222043, 0.06866860345789105]}, "mutation_prompt": null}
{"id": "273024b7-fab8-4e0e-9e2f-bec500d1d7d3", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "e90ac5c1-d2c1-480f-9363-835260f2ae33", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n            \n            # Introduce elitism - preserve the best solution\n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce an elitism mechanism that preserves the best solutions across generations to expedite convergence.", "configspace": "", "generation": 62, "fitness": 0.1779026092644486, "feedback": "The algorithm EnhancedFastConvergenceMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "b2987c3e-b60b-4403-b242-9135eada62f9", "solution": "class EnhancedAdaptiveStepSizeMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        step_sizes = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                exploration_factor = np.exp(-0.1 * fitness_values[idx])  # Adjust exploration based on fitness\n                step_size = step_sizes[idx] * exploration_factor\n                \n                mutated_solution = ind + step_size * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    step_sizes[idx] *= 1.1\n                else:\n                    step_sizes[idx] *= 0.9  # Decrease step size for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedAdaptiveStepSizeMetaheuristic", "description": "Introduce an adaptive search step size mechanism based on the fitness landscape to dynamically adjust exploration and exploitation trade-off.", "configspace": "", "generation": 63, "fitness": 0.09037589091751688, "feedback": "The algorithm EnhancedAdaptiveStepSizeMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.15671512249381903, 0.1644419708888354, 0.1538087622347406, 0.15327837710747916, 0.19112843211545272, 0.1895205550136687, 0.15805248095629, 0.13822407823651917, 0.16053755324352914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03531179494873882, 0.039400400996564944, 0.047855384150850444, 0.05015954929772182, 0.02939213371103433, 0.04182137500607552, 0.03483349860264151, 0.03403162781990832, 0.03111093098566564, 0.024813501852623987, 0.03140240491827484, 0.03525675378517812, 0.047532383032761416, 0.03547783645298619, 0.023134511405013658, 0.025434328762383496, 0.038954027513051215, 0.022463302128953533, 0.42099224883509323, 0.41595668216569437, 0.18320068237659848, 0.08407720383153316, 0.07517539732273693, 0.0859691667621093, 0.06870413870323921, 0.07561850026923056, 0.07335706741709869, 0.07804905720821131, 0.06760782656640696, 0.05318367156701098, 0.05178593543729881, 0.12396809298763278, 0.056370375818246776, 0.03705737339985604, 0.0746176416006421, 0.06267441632755577, 0.11353516713886225, 0.10604448359377838, 0.1070640411250543, 0.09980928293042945, 0.09762831196841726, 0.11564484807017583, 0.10584511236059335, 0.12251183545182698, 0.15209600952410218, 0.016729297348716643, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014604814471857797, 9.999999999998899e-05, 0.021789015228267816, 0.01748479961402305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001269083692873707, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034512479637375915, 0.07548990042029402, 0.03978866356612265, 0.0032009091475845297, 0.013810161113607, 0.004125277410908512, 0.028806795090615234, 0.08233889460592814, 0.01997797118003386, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014661859389958565, 9.999999999998899e-05, 0.0051048720807135295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.34617700740635804, 0.3257320414596152, 0.3494134547494899, 0.24812977350499754, 0.2054758444229291, 0.22072653638738093, 0.19413113085745803, 0.16774605653169472, 0.19739984805294775, 0.03913522020980087, 0.04323097898675665, 0.03561529114556394, 0.03874161570286483, 0.038110981688398216, 0.050461212416420875, 0.045214640680110274, 0.06231776954630808, 0.052048974534052994, 0.12632272391922816, 0.11876685135467813, 0.14873045569413257, 0.11634984260811176, 0.11426285723622254, 0.12665569091987705, 0.11925834422670123, 0.12996894869387488, 0.13430312595294402, 0.1621488678836055, 0.1659373482599038, 0.1644310739744297, 0.1586337103060983, 0.15722170124430812, 0.1489937119324526, 0.14887718250529447, 0.1562475539774315, 0.15065241050473144, 0.10167134552744994, 0.09461445876643793, 0.09307663691206602, 0.11053447919379544, 0.09832970942211994, 0.09950244883365444, 0.09311903884422756, 0.10382847782710436, 0.09342174801922587, 0.1578760960262674, 0.15965396207255889, 0.16146797407059044, 0.17293700797982725, 0.1521373518839706, 0.1416538838484026, 0.14948133338905867, 0.1483648367462551, 0.16661731544597136, 0.14072465142468316, 0.14111530594806976, 0.12445857906101043, 0.13007678446560145, 0.1387747664386647, 0.1348379254291946, 0.13962645695787756, 0.12898020630164997, 0.1405087449847906, 0.13184396800218, 0.1684172648948623, 0.24446861563996103, 0.1666933381666853, 0.15780558681696444, 0.1560989800387711, 0.1650849739858926, 0.14464920842368068, 0.16847239870703723, 0.1385189850787809, 0.15630126925542842, 0.1588589747470418, 0.1335275872273438, 0.18555067676548953, 0.15613754887230769, 0.13728654974469934, 0.15294461027293382, 0.2332260423172421, 0.19051390683468394, 0.22210292309960233, 0.19788814571851598, 0.18753780594093816, 0.20080462144268219, 0.20877044790593569, 0.18866020353366786, 0.1802347270069573, 0.18765826348137493, 0.041966774189603706, 0.057710463197787276, 0.043369193801392925, 0.057340552867038985, 0.04368922023673116, 0.05327521845204197, 0.06322254173388142, 0.05354974666640244, 0.061016355400326905]}, "mutation_prompt": null}
{"id": "48ae295d-870d-46c5-8344-43d5e938d3cc", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "7ad4060c-6e11-4671-9124-c0b041b28ebd", "solution": "import numpy as np\n\nclass HybridFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9\n                    mutation_rates[idx] *= 0.8\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n                    \n                # Introduce a local search strategy\n                local_search_solution = ind + 0.1 * np.random.normal(0, 1, self.dim)  # Local search step\n                local_fitness = func(local_search_solution)\n                if local_fitness < fitness_values[idx]:\n                    population[idx] = local_search_solution\n                    fitness_values[idx] = local_fitness\n                    scaling_factors[idx] *= 1.05  # Adjust scaling factor\n                    mutation_rates[idx] *= 1.1  # Adjust mutation rate\n                \n        return best_solution", "name": "HybridFastConvergenceMetaheuristic", "description": "Implement a hybrid metaheuristic algorithm by combining the EnhancedFastConvergenceMetaheuristic with a local search strategy to exploit promising regions more effectively.", "configspace": "", "generation": 65, "fitness": 0.15878993315754714, "feedback": "The algorithm HybridFastConvergenceMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.381161062814219, 0.3730102767387501, 0.39285861372565, 0.36205804970621436, 0.35299534660911525, 0.2927183166168681, 0.3358766283451008, 0.36879333803822256, 0.3522521961929709, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08179435332713092, 0.052063937089872114, 0.04121580607009179, 0.06096550527456457, 0.05242885316805901, 0.08201520186285982, 0.04035019470165646, 0.08020657811777221, 0.09866944575489256, 0.07383050574982974, 0.0685732966354442, 0.04383887958149624, 0.05867661186177664, 0.037528783593126724, 0.08207249828809349, 0.10238279840483977, 0.05867179901083441, 0.0304657794781773, 0.9106940392594812, 0.827460533127338, 0.9148930054449063, 0.9297428322591251, 0.8437422477143546, 0.8228815377224558, 0.7536775954555512, 0.8429997017098114, 0.8770590137256137, 0.18086081774296048, 0.12221999687657825, 0.20634519314009092, 0.15984565793268835, 0.15263742426338445, 0.14614905479719364, 0.11474114467833185, 0.11250557506021364, 0.1847688917447048, 0.13928206532351795, 0.12862431794195306, 0.103367449670839, 0.16957953146638305, 0.10984839367420896, 0.27326816794546893, 0.08164089497013938, 0.17212982582368042, 0.15037600815146557, 0.1355308975998476, 9.999999999998899e-05, 0.0007949645381357673, 9.999999999998899e-05, 0.13174385329482063, 0.1052146660083303, 0.038377698355034906, 9.999999999998899e-05, 0.13630333352325252, 0.1298482872632286, 0.0023492333675553256, 0.11492486740325458, 0.11194237618243807, 0.04831750218458508, 0.12218808504611789, 0.15982167275808445, 9.999999999998899e-05, 0.08060979126865753, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009507318313607849, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04560949828371652, 0.0649324809856533, 0.043183825252265495, 0.050599456034448265, 0.06883889049705394, 0.02606100903771913, 0.13186525982334896, 0.0669903291834244, 0.04656746716860294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026948979939058537, 0.067770949965689, 0.035977522770609505, 0.054235298723498304, 0.06608005680978224, 0.05510478195254109, 0.0742134497852518, 0.05448041184569152, 0.0668575946520219, 0.3285092128208772, 0.31177212239623686, 0.3181142905929135, 0.32896133413642037, 0.30796354596886333, 0.33704860288934746, 0.37212558252798567, 0.3077329533318356, 0.32216077182332614, 0.04887469706422254, 0.06626118835065409, 0.07089083756749492, 0.07722263732806967, 0.06918377726083402, 0.036488199295076296, 0.09444696075677494, 0.06446351868522127, 0.07350320359595719, 0.15147943175113088, 0.1584076734894626, 0.20660710811987992, 0.1917941745627627, 0.14588400510417598, 0.14675356821985386, 0.13784377086923905, 0.14401595056573202, 0.1917077343377851, 0.22101327892312883, 0.2381656845394774, 0.17384149982883046, 0.17559663851582608, 0.19530708033964417, 0.20844547771794564, 0.15752543933355212, 0.23166473712864877, 0.2452117120352969, 0.1602435284903353, 0.11421288985887801, 0.14004469895680938, 0.12441369783020984, 0.13074276553524145, 0.13526906750377277, 0.15537094419076325, 0.12214479392065003, 0.17502449877704385, 0.179621078908217, 0.17598290007173378, 0.1756403020474936, 0.16136766294840688, 0.1585704142633344, 0.17068768926683875, 0.15832813872690044, 0.1656615054288323, 0.15189949663264157, 0.1524383893291228, 0.19096307741604768, 0.15848641134271368, 0.16963890452526575, 0.17723385509405476, 0.15186613807082683, 0.14593856716861142, 0.17003341789379522, 0.1556940291069212, 0.16497395625986666, 0.16364956355940108, 0.19638724914776962, 0.21197320500920547, 0.18091042740437902, 0.3458839775185868, 0.21656802914963824, 0.16407037609454966, 0.19879817746560768, 0.3060036297042813, 0.23071918517426926, 0.16373604805899267, 0.16814412101450382, 0.26066587171202793, 0.15343532544466998, 0.2969757382465007, 0.1690045606559244, 0.19591799206102023, 0.18817270839773192, 0.18627946396508066, 0.18676386047522842, 0.18657688353307622, 0.18429413955493767, 0.1789604503250526, 0.18150892822365472, 0.19463810744404797, 0.18133187054225186, 0.06801138706574716, 0.08396249329256211, 0.0690251314847814, 0.05853552700647291, 0.06924877352553427, 0.05844164010342934, 0.061342365028920764, 0.05512955315958046, 0.06847019594355863]}, "mutation_prompt": null}
{"id": "cfe0526d-04e3-4bd8-877b-881627231d14", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "7e81e82d-7f72-4409-b936-e09c7b55fa64", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "9f891d51-95a6-4aec-8c82-ff0207a97b9b", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        crossover_probs = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            for idx in range(pop_size):\n                target_idx = np.random.choice([i for i in range(pop_size) if i != idx])\n                donor_idx1, donor_idx2 = np.random.choice([i for i in range(pop_size) if i not in [idx, target_idx]], size=2, replace=False)\n                \n                mutated_solution = population[idx] + scaling_factors[idx] * (population[donor_idx1] - population[donor_idx2])\n                crossover_prob = np.clip(crossover_probs[idx], 0, 1)\n                trial_solution = np.where(np.random.uniform(0, 1, self.dim) < crossover_prob, mutated_solution, population[idx])\n                \n                trial_fitness = func(trial_solution)\n                if trial_fitness < fitness_values[idx]:\n                    population[idx] = trial_solution\n                    fitness_values[idx] = trial_fitness\n                    scaling_factors[idx] *= 1.1\n                    crossover_probs[idx] *= 1.1\n                else:\n                    scaling_factors[idx] *= 0.9\n                    crossover_probs[idx] *= 0.9\n                \n                if trial_fitness < best_fitness:\n                    best_solution = trial_solution\n                    best_fitness = trial_fitness\n        \n        return best_solution", "name": "SelfAdaptiveDifferentialEvolution", "description": "Implement a self-adaptive differential evolution algorithm where the mutation strategy and crossover probability adapt based on the performance of each individual, aiming to enhance convergence speed.", "configspace": "", "generation": 68, "fitness": 0.08495569437341094, "feedback": "The algorithm SelfAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.16970537810190178, 0.16551894379949694, 0.1849464373805043, 0.17044860581575072, 0.13160033194768606, 0.1669723119653781, 0.15754784551792056, 0.22828016919061134, 0.16694839468678624, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04044915347742262, 0.04470653236389821, 0.053565801411643243, 0.03692973989858361, 0.03738079577064968, 0.047805356797356424, 0.03873675782681185, 0.04225205337869098, 0.04778589194507732, 0.021902812470708577, 0.04167942253277801, 0.041528611696727946, 0.04189721119398604, 0.0364048254133017, 0.021665048525402963, 0.02381384924144092, 0.03387965888095479, 0.03214831965654008, 0.07670963673926834, 0.0972124109697785, 0.07439938310423055, 0.0879302639082411, 0.07237072387145016, 0.09912151868330343, 0.09121803027888165, 0.08886480940453456, 0.13353791204872445, 0.06008002005379198, 0.06483394421723765, 0.08275764333554614, 0.057895418173295354, 0.05306677633976764, 0.08877922975235342, 0.05849795417157477, 0.08042173887585946, 0.06412322824686723, 0.12220719248929668, 0.13187980233150798, 0.11188395949902463, 0.09429604045173345, 0.13348032574272495, 0.09684281787584736, 0.1283608895873518, 0.10197825005496941, 0.11564736875788617, 9.999999999998899e-05, 0.007631456640213252, 9.999999999998899e-05, 0.060949303589927006, 9.999999999998899e-05, 0.008979793432325689, 0.0013496849219835072, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00023122333066527556, 0.006206648707783868, 9.999999999998899e-05, 0.0068324447441200364, 0.01628122502114182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0259942489287025, 0.02228877705253529, 0.04019953801826637, 0.04338307790184448, 0.10345772118234342, 0.030655020271253997, 0.024486249638404844, 0.0451859128805816, 0.04403718552583924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008186589416670942, 9.999999999998899e-05, 0.1828206834157201, 0.21364594262367287, 0.18520036203797763, 0.22837211188776296, 0.1769591978662549, 0.1936909682783169, 0.20623835972514115, 0.18215408025256374, 0.21095237984795467, 0.040191123938725815, 0.038357132093046364, 0.03339867760873272, 0.036406822353508006, 0.04079636915699991, 0.04058942286031764, 0.04134352114711892, 0.04151765865211021, 0.042670333338230004, 0.14207329876746155, 0.14354144298292137, 0.13203533618218977, 0.12234479460096959, 0.13049397827591291, 0.13705668735019083, 0.12194171129714615, 0.11957551801252808, 0.17641913029982226, 0.1492961499022123, 0.16455906556229438, 0.15888437306647007, 0.15453967698932558, 0.16023790668176607, 0.15823114078594114, 0.16561546001257177, 0.16443791934759122, 0.1693963255654498, 0.10125325887355097, 0.09602299318873886, 0.09110072404350722, 0.1175030156972765, 0.10120699386195775, 0.09388539072372737, 0.11325423021172376, 0.09733034793588036, 0.11052301452898916, 0.1497584521867531, 0.17319484329759394, 0.1579924247797495, 0.14182445223540785, 0.16243454596730533, 0.14511841379227064, 0.1596503630412821, 0.13739358468491025, 0.18673001120814436, 0.1332199304606334, 0.13934575233059254, 0.1462354120141447, 0.1596327385326889, 0.1582828179787773, 0.1346187683033797, 0.14289874735813324, 0.14386455844918, 0.14640365587196758, 0.1456108918729334, 0.15350724672518878, 0.1552154634999009, 0.1511391554349999, 0.14077316527262407, 0.15229447713998656, 0.13981283243904818, 0.15454151235482827, 0.1592635615023673, 0.15033014055895477, 0.15429084749497834, 0.1364393511446773, 0.14116536127470358, 0.13824467820352382, 0.13209086204631926, 0.11122789995381044, 0.13574204966793058, 0.1585871926986061, 0.20648919308862923, 0.16651917576609243, 0.19308888131648827, 0.1756429963091095, 0.1772593223963298, 0.17663470247257007, 0.19319126326860558, 0.17969598564416533, 0.17123552314074075, 0.058588375186576225, 0.0578162562812653, 0.06669538303301326, 0.04787123315224473, 0.03905756317226827, 0.04056209544373246, 0.053814706577768656, 0.04703110181615611, 0.04656138192277648]}, "mutation_prompt": null}
{"id": "84e0603c-37f6-4a1e-8a0c-3f4a2154ee4e", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "142a4030-5d25-4ee6-b259-7d8d5f58573f", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "9b630c12-1f6f-42d0-b89e-77ab333ada5b", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "70f2bc05-868a-4bcc-a601-624d3a687b9e", "solution": "import numpy as np\n\nclass AdaptiveSelectionMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            fitness_values_normalized = 1 / np.array(fitness_values)\n            selection_probabilities = fitness_values_normalized / np.sum(fitness_values_normalized)\n            \n            selected_idx = np.random.choice(range(pop_size), size=pop_size, replace=True, p=selection_probabilities)\n            \n            for idx, ind in enumerate(population):\n                if idx in selected_idx:\n                    mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                    \n                    fitness = func(mutated_solution)\n                    if fitness < fitness_values[idx]:\n                        population[idx] = mutated_solution\n                        fitness_values[idx] = fitness\n                        scaling_factors[idx] *= 1.1\n                        if np.random.uniform(0, 1) < 0.2:\n                            mutation_rates[idx] *= 1.2\n                        else:\n                            mutation_rates[idx] *= 0.9\n                    else:\n                        scaling_factors[idx] *= 0.9\n                        mutation_rates[idx] *= 0.8\n                \n                    if fitness < best_fitness:\n                        best_solution = mutated_solution\n                        best_fitness = fitness\n                else:\n                    scaling_factors[idx] *= 0.9\n                    mutation_rates[idx] *= 0.8\n        \n        return best_solution", "name": "AdaptiveSelectionMetaheuristic", "description": "Introducing a novel adaptive selection mechanism where individuals with higher fitness have a higher chance of being selected for mutation to exploit promising regions more effectively.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('probabilities are not non-negative').", "error": "ValueError('probabilities are not non-negative')", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {}, "mutation_prompt": null}
{"id": "b44141d7-c793-43c8-9140-eb1b404d3ec7", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "0d86ebf1-2dbc-471a-9f52-f2f4e481be99", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "e3fc6af6-551c-4636-81de-43b764461ea5", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "5a3d8492-8e80-4709-9cbf-5e0c1474a1de", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "ed781a1e-9e61-4ab8-b3cc-a1a39df987d0", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "0fd51a83-246b-4817-8c47-b15b5f6a4a02", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "919e3d1a-5348-4d4a-9e7f-5c9aeaa1251b", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "a0ae12bb-52c3-4cfe-aa2d-c638d7607df9", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "1493e9f7-34f9-433f-88d8-6a2918d388da", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "7ebde34a-17cf-42c8-b8f8-e6c4e58b28a9", "solution": "class DynamicEnsembleMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        mutation_operators = [self.mutation_strategy_1, self.mutation_strategy_2, self.mutation_strategy_3]\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                selected_operator = np.random.choice(mutation_operators)\n                mutated_solution = selected_operator(ind)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                \n                    if np.random.uniform(0, 1) < 0.2:\n                        self.adapt_mutation_parameters()\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution\n    \n    def mutation_strategy_1(self, solution):\n        return solution + 0.1 * np.random.normal(0, 1, self.dim)\n    \n    def mutation_strategy_2(self, solution):\n        return solution + 0.2 * np.random.normal(0, 1, self.dim)\n    \n    def mutation_strategy_3(self, solution):\n        return solution + 0.3 * np.random.normal(0, 1, self.dim)\n    \n    def adapt_mutation_parameters(self):\n        # Custom logic to adapt mutation parameters dynamically\n        pass", "name": "DynamicEnsembleMutationMetaheuristic", "description": "Introduce dynamic ensemble mutation strategies by combining different mutation operators to explore the search space more efficiently.", "configspace": "", "generation": 82, "fitness": 0.15063359532133797, "feedback": "The algorithm DynamicEnsembleMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.15.", "error": "", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.3710026580201753, 0.3787527337258322, 0.3561360548706386, 0.33179414720886113, 0.354469995490301, 0.35483323767587194, 0.33919551597170683, 0.3653187152317888, 0.3644480950104467, 0.004312781703381896, 9.999999999998899e-05, 9.999999999998899e-05, 0.00637649735202428, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041032805922808446, 0.045731805006556936, 0.06218851616294374, 0.05053491751892403, 0.04952482154674687, 0.04630043227860392, 0.04119151998656834, 0.05858820769954198, 0.042505034036187994, 0.030302634799479145, 0.03814088012072703, 0.03533856707403649, 0.04785089674215437, 0.030179058207339016, 0.08863684099246516, 0.02498250074634767, 0.03183396508751668, 0.040370985350085875, 0.615284629925685, 0.861531865715169, 0.7364018140392568, 0.758069095499286, 0.7075456837966982, 0.7869990069556799, 0.5905202122957325, 0.5834789497406676, 0.6857950505463204, 0.15934806555625092, 0.1375553225040096, 0.1735694530510964, 0.13641038824040463, 0.2649941716161377, 0.19932059134833102, 0.22891347560337105, 0.16874197735758212, 0.2164745011021667, 0.1331876017713146, 0.17721928663237196, 0.14128956058074582, 0.1871553534628897, 0.15221174243427482, 0.14774100507092502, 0.11552164392294084, 0.10120390567041249, 0.21568501514283767, 9.999999999998899e-05, 0.0938754933428736, 0.0856232081576127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12367821380146038, 0.1628246480573745, 0.033043468534735054, 0.12996748669964386, 0.0021034606624449337, 0.12240879374853708, 0.1475232661224476, 0.09723180307966728, 0.13085545392630882, 0.15358958699054126, 0.10604896184683443, 0.10868297845931951, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027825836033568363, 0.07218966761100476, 0.06412146000408392, 0.06746773250016436, 0.04295076103592488, 0.03797641193016443, 0.09793438661243492, 0.04829191261947585, 0.09196964646423789, 9.999999999998899e-05, 9.999999999998899e-05, 0.001289854777320354, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019519971888477983, 0.04707604390699982, 0.04305816165226006, 0.06161966498430227, 0.07484228911393753, 0.07617151552313117, 0.04911228851329941, 0.060603318238837356, 0.059820772668278566, 0.32880706125321457, 0.3475055020481237, 0.3531905942665745, 0.309236397837766, 0.34813963623175437, 0.35481353128185733, 0.35544632180563496, 0.35345365090251124, 0.39310677353762336, 0.06880229478441235, 0.041497532399196624, 0.050213836105730714, 0.03791091483231379, 0.04684313852099409, 0.0655748721058389, 0.04070277801424893, 0.044327135502925885, 0.05581792476820502, 0.1733955298291736, 0.14506882370164642, 0.15866586319721754, 0.15539216243420817, 0.13871519709289692, 0.16272560243120882, 0.17384533700577864, 0.16026487138631396, 0.12085813389590638, 0.14865662202238894, 0.15701274905043205, 0.16853210582440448, 0.15909950470863454, 0.15248874301628146, 0.15911769675928678, 0.17357315533620643, 0.16669377498199323, 0.16393390116835183, 0.1557161243758043, 0.10232791205611269, 0.14339634058440953, 0.12355935858190459, 0.12604501048722783, 0.10460938187286406, 0.12305054344623201, 0.09658202358130952, 0.11170511477788825, 0.151053311819478, 0.14557808842083253, 0.20163387953653944, 0.16849689386455047, 0.1434121284640587, 0.16992208792102925, 0.1610275790264144, 0.15187820978615652, 0.16642792035256737, 0.17415914491290674, 0.16659137021266246, 0.15657751272005394, 0.1650140339549403, 0.14157063232903688, 0.16185157819489782, 0.16040882941418644, 0.16295731188333595, 0.16232777782962005, 0.19108808176525716, 0.19273417669417425, 0.4563653345253418, 0.16869790633290194, 0.1719530013563132, 0.4745377420750295, 0.15631301086159732, 0.150998969801579, 0.17315859868679784, 0.1650994299269074, 0.3056402870563918, 0.2696912604778915, 0.14387059531785384, 0.15574891480824826, 0.20560903327530544, 0.2043654329115765, 0.18114659066147742, 0.20529562315493555, 0.18933996098831463, 0.17884222893113033, 0.1933315554997468, 0.17580067553258305, 0.1975275364702297, 0.18502258222964552, 0.18229394222630657, 0.19568986231852192, 0.175925790314446, 0.052054541480954675, 0.04329984353397065, 0.046410137706144994, 0.08352387366380098, 0.05645520754333133, 0.06653190295152267, 0.04565712884072204, 0.05393374074382462, 0.0534496076656229]}, "mutation_prompt": null}
{"id": "3867d38f-a967-4019-bf98-296388f5e607", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "609aa4e7-95f4-48d8-9450-80abaa3b6553", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristicImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                if np.random.uniform(0, 1) < 0.5:\n                    mutated_solution = ind + scaling_factors[idx] * (population[np.random.choice(pop_size)] - ind) + mutation_rates[idx] * np.random.normal(0, 1, self.dim)\n                else:\n                    mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9\n                    mutation_rates[idx] *= 0.8\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristicImproved", "description": "Implement a mutation strategy based on a combination of differential evolution and Gaussian mutation to enhance exploration and exploitation for faster convergence.", "configspace": "", "generation": 84, "fitness": 0.14845507541576536, "feedback": "The algorithm EnhancedFastConvergenceMetaheuristicImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.15.", "error": "", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.29703665140615676, 0.26872592636355463, 0.3002680543138734, 0.3083660145575329, 0.29192623380320415, 0.2925388996989753, 0.2437263032883472, 0.25565445760228145, 0.31793858291733046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06925463762946715, 0.05036528956782038, 0.0746286284554808, 0.05730475376987365, 0.07944073615078628, 0.059952105960097146, 0.0709580992792277, 0.06524763003551837, 0.05343807424245517, 0.04677857903540894, 0.05189876041844088, 0.06188268469966829, 0.05317284042813275, 0.05188272358715529, 0.056510538662499665, 0.04241232840269382, 0.05125483602116687, 0.06801756570934325, 0.7871219239113378, 0.588111615263837, 0.67161300847848, 0.7327928188407375, 0.829340444059413, 0.7333743406719144, 0.8772061460187753, 0.7191049674162815, 0.12010134873391853, 0.14309534017054049, 0.13759832805957573, 0.1438014538127662, 0.19309217743057194, 0.15897110872211673, 0.13087853315918951, 0.11672366306915627, 0.147683093848612, 0.13003422706454115, 0.14682055587168874, 0.14023389287488297, 0.1494727544847394, 0.30803777528802734, 0.15818602754292987, 0.16199224564765846, 0.16038841596597286, 0.16175521472479704, 0.16371093612944498, 0.10216097827483572, 0.09880924968035087, 0.06400629955553161, 0.02551575876160883, 0.11369515802168151, 0.0608389883127991, 0.09969637770743778, 0.09531006748561655, 0.0820293955995598, 0.07245277754666546, 0.14266574461420345, 0.11924321715203767, 0.0993877454948282, 0.05604660487975688, 0.07217499090613144, 0.11090530931955367, 0.10538539793044488, 0.10506596681061275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0726057449993659, 0.04613938037355858, 0.08617609651552471, 0.037449248636915344, 0.07261217610500992, 0.04705773590038498, 0.05815166778695424, 0.0343958380861179, 0.0410725593070147, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04105379499864481, 0.039167271129639136, 0.026359381917833713, 0.058655856573650245, 0.06907237793719434, 0.02001479196915623, 0.009199533585799502, 0.03911930321313284, 0.022351234515350926, 0.28321133783661534, 0.2992189645819905, 0.294022778394356, 0.3209243083625182, 0.2727770995414658, 0.2590624784641089, 0.2816560578045637, 0.28613435162804, 0.3140525707798154, 0.03764654325242611, 0.05341433063334844, 0.03103152471171633, 0.07183175805649189, 0.06355174533800512, 0.06802243512087847, 0.04796352005702664, 0.05636117950387376, 0.059618763317177415, 0.13014498057586676, 0.1616463071053167, 0.15336278582474572, 0.23955379336701577, 0.1938237966152092, 0.16932879358637876, 0.18734170953881546, 0.19462459085423367, 0.16468426400926128, 0.17813143533969633, 0.21479492381918786, 0.173088476194039, 0.18203339792236484, 0.2109475737241009, 0.20426627352757665, 0.21821466978782722, 0.20578223083917735, 0.16599238020767249, 0.1319908088591677, 0.14016321578404844, 0.14733045473530693, 0.15624752935942798, 0.15884887104686818, 0.15183897561895632, 0.12071056388686396, 0.10402239820001846, 0.1617041241494953, 0.16361362949924818, 0.17709994469448065, 0.16054685637446053, 0.16838150689552045, 0.17237959389373025, 0.18065127790827118, 0.20002236901152315, 0.16552051071247753, 0.19077328252104508, 0.16530234580434333, 0.17296517576101011, 0.1541117777073876, 0.16464091188612529, 0.16946348939333988, 0.18158885730928032, 0.1588268614778442, 0.17224327397877337, 0.18510184722591316, 0.2899844017392902, 0.1836253550865672, 0.18174176736133885, 0.18601371439904324, 0.18876499698376414, 0.16686176569501876, 0.2028259386297584, 0.20489262221099047, 0.161698454906418, 0.2909809961312143, 0.33715861922904733, 0.2456083629600635, 0.266738025035565, 0.22218295289387135, 0.15725323090668986, 0.18168054749307272, 0.27927324906466744, 0.17934642202750983, 0.190175997894376, 0.1958504005235735, 0.20338238155099098, 0.18116686311329755, 0.19869319587528267, 0.20697683825135682, 0.2107827054425374, 0.17815028372741415, 0.17915764403569046, 0.06594401043389897, 0.0656700544006884, 0.06330794958247554, 0.06787876473698362, 0.055716549043478336, 0.07178559697094244, 0.06739344101051337, 0.055786364750322726, 0.05692292691646905]}, "mutation_prompt": null}
{"id": "c039792c-4f97-4512-a0fe-3128c28a2fed", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "fed0c4a0-0f7c-4799-abbb-635f201f0ed9", "solution": "class EnhancedFastConvergenceMetaheuristicImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        diversity_threshold = 0.1\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9\n                    mutation_rates[idx] *= 0.8\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n              \n            if np.mean(population, axis=0).std() < diversity_threshold:\n                for idx in range(pop_size):\n                    random_solution = np.random.uniform(-5.0, 5.0, self.dim)\n                    population[idx] = random_solution\n                    fitness_values[idx] = func(random_solution)\n                    \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristicImproved", "description": "Introduce a novel adaptive diversity mechanism that maintains diversity in the population to prevent premature convergence and enhance exploration.", "configspace": "", "generation": 86, "fitness": 0.17731083775350084, "feedback": "The algorithm EnhancedFastConvergenceMetaheuristicImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.5863866430052559, 0.5196331400775507, 0.5935256970344982, 0.6163799960086411, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5759353279571351, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.058769792854713176, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.10851603545452437, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.04671046747003216, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.059814287307657255, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.780406191186261, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.3286651666287558, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.18824487589334027, 0.0568290005925044, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.055432990599285414, 0.04968112584681417, 0.10977737131166976, 0.03679526250713283, 0.03233218678237704, 0.11184952051088437, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38702220479699345, 0.414354248258739, 0.44028927265785933, 0.4185555336098199, 0.3799368380040954, 0.39681134886857994, 0.38649892852951373, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06244933350753412, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.16449249827890056, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11289558364065866, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.1721357456013256, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18125003515564508, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.18530503013169142, 0.1947067753130738, 0.15955895668320952, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3940695172392802, 0.1663330922373074, 0.2539294967015864, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.10794769016508565, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.19203383829670728, 0.19215805253863827, 0.19793038600255264, 0.18469918061695745, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "96dcdcb2-7173-475f-8c54-18ac88517797", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "3264c344-2617-4524-8d3c-087ebc7dadf3", "solution": "class EnhancedFastConvergenceImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        diversity_factors = np.full(pop_size, 1.0)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim) * diversity_factors[idx]\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                        diversity_factors[idx] *= 1.1\n                    else:\n                        mutation_rates[idx] *= 0.9\n                        diversity_factors[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9\n                    mutation_rates[idx] *= 0.8\n                    diversity_factors[idx] *= 0.95\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceImproved", "description": "Implement adaptive mutation strengths and diversity control to enhance exploration-exploitation balance", "configspace": "", "generation": 88, "fitness": 0.09278324914768164, "feedback": "The algorithm EnhancedFastConvergenceImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.2175657979335418, 0.14535704058842147, 0.1985325730446167, 0.1777844184779036, 0.16582486337668179, 0.17258916431521043, 0.1991431916349723, 0.18031973234629406, 0.15420673549887776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036969241705613776, 0.06110088978125372, 0.040348131224266726, 0.03855060591060333, 0.045693068252753655, 0.06158174074949185, 0.0518938788990545, 0.0371889740262179, 0.04314072965088123, 0.03381241920629985, 0.042883079759435505, 0.020608999217863633, 0.04760470840496456, 0.019070746093743263, 0.03428172186356715, 0.03720540881626766, 0.05117846141821791, 0.04719975605092641, 0.08503568124992777, 0.07861998775527879, 0.09053664670716788, 0.08279172362559661, 0.08051283503023587, 0.0871066447862715, 0.06494103653597538, 0.0704959853556002, 0.07242414152988264, 0.08575752344565357, 0.06340553409094196, 0.10178198883826939, 0.08247466215136323, 0.04227701791732619, 0.0625431664875079, 0.06723158247362093, 0.04835208508874511, 0.0948013660416569, 0.12711380404322903, 0.10964034719131266, 0.10809172677356638, 0.09744504836723589, 0.12010841063871136, 0.11877517914236146, 0.10190505164909913, 0.1287300485064521, 0.14707531349862657, 0.013478323335654019, 9.999999999998899e-05, 0.0008601048956002888, 0.0076565083177109194, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032208418456093346, 0.010844324522462534, 0.0004191249854433865, 0.20479511510628512, 9.999999999998899e-05, 9.999999999998899e-05, 0.009662565890464991, 0.011308532316473996, 9.999999999998899e-05, 0.02451373796290568, 0.015644527994366997, 0.013001017548571858, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04584594345238824, 0.060478087646380074, 0.07473995475686623, 0.0599712409294445, 0.02232720114552844, 0.04450093217959272, 0.11578030964330077, 0.050841006882669015, 0.034626442571009663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00555090039733841, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0077167445764254605, 0.23369373711648, 0.19378137088300296, 0.1918393224870374, 0.16649590223367416, 0.24288112273166151, 0.18064275191660273, 0.17429174691914617, 0.18265202941412162, 0.17562866688741707, 0.040872666388401147, 0.03164192359151019, 0.04514392951982249, 0.04813648505663948, 0.06570759953495231, 0.04189043315009844, 0.07266735269850655, 0.03920153116110303, 0.049322871984243455, 0.18930000795885404, 0.12646462294110095, 0.18115949876796256, 0.15502084599464216, 0.1530341305531181, 0.1296338598915694, 0.3386736981099441, 0.12719099035220316, 0.17152607635764983, 0.16540113936650191, 0.17935157653131262, 0.1565576154682723, 0.16490518606305538, 0.17570645799441498, 0.16078954411483615, 0.16915910690508174, 0.14905438792628178, 0.16197784921131475, 0.12988383680910887, 0.1270625785885131, 0.11311414613870707, 0.12645901613971655, 0.10164403038855796, 0.1290162927208799, 0.12481246185518047, 0.12222101047451084, 0.10625154873471909, 0.15155994065955147, 0.16997506651108196, 0.16298445131392236, 0.207276698414954, 0.1529057019803165, 0.17521722795940586, 0.16575128074867063, 0.22787425222964897, 0.2011641322725941, 0.16692232458936962, 0.14639216731807192, 0.12905249638168914, 0.12305735741045631, 0.14386570350571803, 0.14988963261995558, 0.16049664118588647, 0.14308075039437484, 0.14967343077811912, 0.12790613893824243, 0.18139144002679475, 0.16033749939968855, 0.1483843779140992, 0.1862187209308227, 0.1556387025381749, 0.13775499092518917, 0.15328588471618698, 0.1648999279188723, 0.11345458693117638, 0.14862025704388104, 0.1918808329619156, 0.16612293414099455, 0.10603376628773697, 0.21929589142191086, 0.1663896695544521, 0.16860143275911665, 0.1530929432316217, 0.19714616904118087, 0.19052656220948583, 0.2076684748125951, 0.24335006661855996, 0.2161345198608695, 0.1953201453355422, 0.18800471015850895, 0.18817057403239734, 0.19066239995952927, 0.04870257594404592, 0.06217509781290553, 0.07091092114011865, 0.04982632996663783, 0.04603486853983485, 0.06299566995391326, 0.04708671755304494, 0.05223172189847625, 0.07252797104244724]}, "mutation_prompt": null}
{"id": "7169a7e2-f880-400a-a639-8416109cc830", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "3ab75a3b-bfdd-4a17-b8f3-c129fb35d9d4", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "9a750388-ec61-4471-bcc0-2db9e0774e34", "solution": "class EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            elite_idx = np.argsort(fitness_values)[:pop_size // 2]  # Select elite solutions\n            \n            for idx in range(pop_size):\n                if idx not in elite_idx:\n                    mutated_solution = population[idx] + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                    \n                    fitness = func(mutated_solution)\n                    if fitness < fitness_values[idx]:\n                        population[idx] = mutated_solution\n                        fitness_values[idx] = fitness\n                        scaling_factors[idx] *= 1.1\n                        if np.random.uniform(0, 1) < 0.2:\n                            mutation_rates[idx] *= 1.2\n                        else:\n                            mutation_rates[idx] *= 0.9\n                    else:\n                        scaling_factors[idx] *= 0.9\n                        mutation_rates[idx] *= 0.8\n                    \n                    if fitness < best_fitness:\n                        best_solution = mutated_solution\n                        best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce elite selection mechanism to focus on exploiting the best solutions for faster convergence.", "configspace": "", "generation": 91, "fitness": 0.08773682449516347, "feedback": "The algorithm EnhancedFastConvergenceMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.16526065512643395, 0.16842776021968275, 0.1477060959790788, 0.2016645788164565, 0.17942085376581485, 0.24086444322878042, 0.1763116957303208, 0.15299365327993586, 0.15017379609442982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06898258359625997, 0.04425959229645138, 0.04569824413874157, 0.03923633657269643, 0.03768509318457314, 0.04957484307642457, 0.039118680158250374, 0.05838302702911291, 0.05775363196916283, 0.033301471821812756, 0.026745946854503155, 0.04493405027510122, 0.028173937898929635, 0.03137479392576448, 0.030596732263587945, 0.034102696090497764, 0.040697199862361644, 0.024889224173945346, 0.08078894324954311, 0.0712703663834956, 0.07310331525283653, 0.08349643394804063, 0.06766643626203117, 0.06910639565082966, 0.07885203231015403, 0.07930044168362438, 0.08077446769410768, 0.06190740834425468, 0.07453781643887036, 0.09246720018817445, 0.06594795622869565, 0.055689938893542235, 0.060923327775306846, 0.08579483633944152, 0.07788463233234366, 0.09102198886505919, 0.123335450331579, 0.10143066400867262, 0.11327143759595637, 0.10213140906630414, 0.11519975544504868, 0.10923033733537868, 0.13776854192304744, 0.1284993270765884, 0.10712382855327318, 0.016666507066400493, 0.02495963095691245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014562893042748715, 0.015303346767782777, 0.01201330949724888, 0.007981942475245751, 0.009080365442290295, 0.0027896308136939885, 9.999999999998899e-05, 0.02645239104799657, 0.005239472883295071, 9.999999999998899e-05, 0.020940614719573536, 9.999999999998899e-05, 0.002623574940805673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022196768192175087, 0.08516021686090103, 0.055830620912186935, 0.037635479064951904, 0.10099007123088977, 0.05647308130941309, 0.04547582847448739, 0.023518881225927935, 0.06032674771867841, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012578593798977633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004345429728929595, 9.999999999998899e-05, 0.19931579555102885, 0.17689553507575073, 0.20819290745826702, 0.20013874628158157, 0.19875460385476285, 0.19070450284766527, 0.16987600157199845, 0.1814568451886266, 0.21165333700021993, 0.04062344550174857, 0.04527591339816062, 0.03124122854352085, 0.03543969411161707, 0.03722458515646632, 0.05149303141921957, 0.04510470356185747, 0.04274109642320201, 0.03815610524532498, 0.15303122595655716, 0.12688415755905502, 0.13635500519887467, 0.13377998652276835, 0.12927994035660473, 0.14655960564641168, 0.1468182670823036, 0.14566075366952913, 0.1270583443301435, 0.1551335130211382, 0.17409041163840389, 0.17879832457994016, 0.1678488705372131, 0.1573464716511338, 0.16973034531047437, 0.15744624579477517, 0.157809963324696, 0.1659299807656438, 0.11263904236611721, 0.1091958710578601, 0.11880203759747077, 0.1019636732077357, 0.14588575344444998, 0.1086562038323553, 0.13995038761899325, 0.13986224329234775, 0.11048830128419285, 0.15075067230861972, 0.1503594934788276, 0.1511135366933135, 0.14577666451379878, 0.15498328290158647, 0.1632253075812572, 0.15563207176941773, 0.15137108065894622, 0.1825646237151357, 0.15002169400568943, 0.16013612087084206, 0.14911749895207016, 0.14804940703156078, 0.13820293966047847, 0.13222498453225706, 0.1551825329310752, 0.1384601326385969, 0.12319220390219321, 0.19503426666784562, 0.14560532510901758, 0.18904253981010988, 0.207721517845886, 0.14626048385729373, 0.1677879366871381, 0.15268204038901845, 0.1539700637742848, 0.18416770453085896, 0.15574049973490434, 0.1583689052977061, 0.12793300468320046, 0.13964734289574587, 0.13137955473675922, 0.12569329807221508, 0.12344114662392625, 0.12505961664005227, 0.15113917687035916, 0.18758099357478752, 0.17845067689092753, 0.18523075829722624, 0.212371139400361, 0.1906884557235492, 0.18475794855198213, 0.1754178383917835, 0.18760532883793068, 0.1783942567050062, 0.05997091744708016, 0.04895949622975715, 0.06592906302283863, 0.05637285315133955, 0.0477602989899778, 0.04647850386499053, 0.058351916357987976, 0.05003335581237989, 0.06046690771838481]}, "mutation_prompt": null}
{"id": "325ae665-9ff9-46c3-b4db-b953c9c56166", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "7db55950-1540-4a40-b972-8d6da6efe23d", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "00c4ebd0-2955-467b-a9cb-74a141906e14", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "f0418de4-3b2e-4e89-bd64-fb6b6d9895e4", "solution": "import numpy as np\n\nclass DynamicNeighborhoodSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                neighbors = [ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim) for _ in range(5)]\n                \n                best_neighbor_fitness = min([func(nb) for nb in neighbors])\n                best_neighbor_idx = np.argmin([func(nb) for nb in neighbors])\n                \n                if best_neighbor_fitness < fitness_values[idx]:\n                    population[idx] = neighbors[best_neighbor_idx]\n                    fitness_values[idx] = best_neighbor_fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9\n                    mutation_rates[idx] *= 0.8\n                \n                if best_neighbor_fitness < best_fitness:\n                    best_solution = neighbors[best_neighbor_idx]\n                    best_fitness = best_neighbor_fitness\n        \n        return best_solution", "name": "DynamicNeighborhoodSearch", "description": "Utilize a dynamic neighborhood search mechanism to explore the solution space more effectively and enhance exploitation of promising regions.", "configspace": "", "generation": 95, "fitness": 0.12217900354090337, "feedback": "The algorithm DynamicNeighborhoodSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.17.", "error": "", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.19751275269587898, 0.2122742035562163, 0.18475938818247128, 0.21601360712795292, 0.16083639739353184, 0.18386346539643306, 0.2143588604750275, 0.15481590038603155, 0.2039625873983002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03291522682919945, 0.04781416919887982, 0.03730153199951092, 0.0337540390647757, 0.053754465053907574, 0.03942307896287389, 0.030692021964361493, 0.039582814690941825, 0.04210543253513699, 0.027646811206361366, 0.05670166077244232, 0.02844895571079009, 0.027126119548134597, 0.028593669150129397, 0.04832899483060593, 0.025237122750546237, 0.0265054158498933, 0.0146686578146904, 0.8708813319963281, 0.8972320626228629, 0.807242697832989, 0.8584158485882419, 0.8541431989233346, 0.8517453065858337, 0.8542343918949253, 0.8558296138260888, 0.8673731730581824, 0.07952958978542324, 0.09081419059508467, 0.07580259965968361, 0.09748750659555261, 0.06255964446206508, 0.09059160006996247, 0.0627675009498796, 0.07695178821855864, 0.07956334599800485, 0.11008719280016344, 0.10490317450639575, 0.11132559806757403, 0.13797551510507833, 0.1076903497027748, 0.11462100810074494, 0.0884148384096245, 0.12741987837514845, 0.1942264960456741, 0.01418388106770252, 9.999999999998899e-05, 0.10345630907341441, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0065290383124357865, 0.009644824903054405, 0.06613326666015762, 0.02741366079244545, 0.005917421894170327, 0.0016096615477568799, 0.0007224969741719267, 0.08837132213001275, 0.011360419393809607, 0.054241581862285226, 0.012378218649770734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09208222373434671, 0.027094115499432525, 0.07881445343701365, 0.028065459490146938, 0.02363440272114914, 0.01764749101653984, 0.0576656729530034, 0.07327082954378639, 0.02494690913062836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000626929085050465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.22364183186028785, 0.20398981551884587, 0.21208694177247933, 0.20582802266668865, 0.22551492855304145, 0.19158456237726673, 0.20398551320384184, 0.1984455365944695, 0.22504586277774818, 0.02667665197039737, 0.024385831539677882, 0.04817887457089187, 0.03407936028752068, 0.04547358653303257, 0.035248632283193526, 0.045103403274146525, 0.03919339631082697, 0.04653883495517219, 0.16887199674780407, 0.13217825949822948, 0.1352079962705608, 0.15080664495916385, 0.1525448956928367, 0.10995893867255258, 0.1343002256192849, 0.134394614285528, 0.13133613461001825, 0.1742554428738824, 0.15314731477492483, 0.14418088326012712, 0.18381263053008312, 0.15984004502622684, 0.16288502392048654, 0.1646194415514034, 0.15650133965944113, 0.17158888955903207, 0.08555668019695606, 0.09910384509236303, 0.09118338373207402, 0.12452364820633954, 0.09135097149128846, 0.09918295018887768, 0.11771814121764002, 0.14076524487333697, 0.09856325748503891, 0.14062476168271054, 0.1511629418886078, 0.14759747734789053, 0.16676385763747004, 0.13522587436285372, 0.1335661717849942, 0.18653988787732667, 0.16205840013824324, 0.1520623265662292, 0.15807962991264757, 0.1525321246214275, 0.1382774467320964, 0.15925221414278823, 0.16250042070804227, 0.12520566883177908, 0.15216592844108123, 0.1412599098299181, 0.16264285727670502, 0.20509306518166126, 0.1504415657208732, 0.12579857503871283, 0.16334706044471747, 0.16368139287477246, 0.2736606056369336, 0.17289855773006002, 0.14533680075889877, 0.1443063044405315, 0.16088047300251784, 0.2574510635156039, 0.17857291990882462, 0.12192213979225597, 0.14827803947602425, 0.15061030158603483, 0.19258053612647896, 0.13583554879432758, 0.10997474772106941, 0.17469112963919764, 0.1728582948715306, 0.18038460717527105, 0.16620451126601088, 0.16998089782205383, 0.18084485615141888, 0.16798456480792978, 0.18270337399724268, 0.17735192181514325, 0.04026095974683197, 0.06207276107216109, 0.04631966781378871, 0.04662026892190951, 0.05527320761026089, 0.046168674506401164, 0.05574078551072348, 0.05403001436236787, 0.05096885997325973]}, "mutation_prompt": null}
{"id": "bd0a3a29-f7a3-4881-a63c-bdda18b3e6ce", "solution": "import numpy as np\n\nclass EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < 0.2:\n                        mutation_rates[idx] *= 1.2\n                    else:\n                        mutation_rates[idx] *= 0.9\n                else:\n                    scaling_factors[idx] *= 0.9  # Decrease scaling factor for non-improving solutions\n                    mutation_rates[idx] *= 0.8  # Decrease mutation rate for non-improving solutions\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce a dynamic mutation mechanism that adapts the mutation rates based on the fitness improvements, promoting faster convergence.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.6018037133133128, 0.5196331400775507, 0.5935256970344982, 0.596678636047804, 0.5382795319346552, 0.5676907562523049, 0.533764697017265, 0.5667238078421666, 0.5937544574849287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591446591843943, 0.07459410760418372, 0.04681083326734037, 0.05868427064994608, 0.055472762920580676, 0.07416927026665421, 0.09759371156299479, 0.06463027550599221, 0.057815386194124185, 0.04613707685036228, 0.06767213266988314, 0.04357318058087789, 0.046699431672524994, 0.03159132618591576, 0.06122446929942127, 0.027015340955623524, 0.05632463836432766, 0.028572713517513337, 0.8788154296343741, 0.8603948394265233, 0.8695756232249585, 0.8317452512627674, 0.7679805055722481, 0.8282767876542729, 0.8840912186608034, 0.8307173623958227, 0.8801358356496692, 0.19395352786367803, 0.10385729149982859, 0.32931382008589727, 0.11842732306739889, 0.17764854338315472, 0.2476841128903703, 0.32447352868278156, 0.34299147260195495, 0.21283165271008497, 0.13144923210370907, 0.14628209770480693, 0.10550490088807896, 0.11147024829136043, 0.14874476855673546, 0.18667691904811357, 0.10197671834446842, 0.13377388835948845, 0.17291239104430767, 0.10043848675266875, 0.18936196293415708, 9.999999999998899e-05, 0.12021835434534955, 9.999999999998899e-05, 0.21964257662640208, 0.15351944727336564, 0.08552184047813516, 9.999999999998899e-05, 0.13856194400326827, 0.1285908318179836, 0.13994557057197887, 0.1564989327748535, 0.135669744678373, 0.11440305865861322, 0.15243171346215945, 0.07449474926326727, 0.10915226014774893, 0.0007354372603949333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04505696685162308, 0.04684794752591914, 0.10130776923513951, 0.06535224877805523, 0.019062213017921215, 0.06044794796854258, 0.12289741181961433, 0.016930613989571075, 0.03552238685689901, 0.02903790511123794, 0.017549543471428675, 0.07037607280736191, 0.04968112584681417, 0.10977737131166976, 0.036771572382917284, 0.03233218678237704, 0.11179579415391183, 0.03986039661293761, 0.13819433406012416, 0.03582866148072661, 0.08833500066726452, 0.056249594231975064, 0.07773392728027151, 0.13433158389764577, 0.09836235590598807, 0.026393828468962766, 0.04575353891065337, 0.4050033750409864, 0.38386117170591494, 0.414354248258739, 0.44028927265785933, 0.4071251881847312, 0.3799368380040954, 0.39681134886857994, 0.41832501297065006, 0.42366931126274365, 0.05511815223493177, 0.03983433063545905, 0.04239719257647334, 0.04263887730286353, 0.06245704007230324, 0.05970067408086943, 0.08442601843860287, 0.04402946828233001, 0.08575624495356182, 0.19293618578351346, 0.19533668697883455, 0.16608725638134547, 0.14928076485713282, 0.19171250936051065, 0.17385715385151357, 0.17174505840376408, 0.17308300647550512, 0.20763762465683533, 0.1474109090990796, 0.15216912321642462, 0.16372903458654742, 0.24594236420489912, 0.15993212824630154, 0.15176409486872744, 0.19595200158167914, 0.1645572939227442, 0.20626029900095666, 0.10928655142791122, 0.1328300790399144, 0.1034717390730453, 0.11302900413722639, 0.1456465874618893, 0.10294355857722515, 0.1299340223605201, 0.16623659286439985, 0.12992434359745808, 0.17294243375689589, 0.18062732940745518, 0.19239753430665218, 0.18166900931165308, 0.14763557994794652, 0.19975218215842927, 0.15861950777533307, 0.16787303617193083, 0.18372280777679517, 0.20523309406529622, 0.18392978901700985, 0.14377973384808285, 0.1807418403255473, 0.17274753184147817, 0.17061107296973, 0.1856420878619064, 0.1947067753130738, 0.15916007242398023, 0.1660399970767461, 0.16052329795124765, 0.12610806043160994, 0.19198177434865815, 0.2181432211564609, 0.15832342945536615, 0.2305136545195764, 0.1632328982792196, 0.17930281943509851, 0.3151959762672555, 0.23860848443310234, 0.3908467843779563, 0.1663330922373074, 0.24711507889901696, 0.20816125066088098, 0.21188771723348176, 0.1662646388131972, 0.12769406071577782, 0.1858245150675235, 0.1756855569425495, 0.19382472360924552, 0.1886010483495436, 0.17723188157354763, 0.19215805253863827, 0.19793038600255264, 0.18469075224129727, 0.18321328492234767, 0.04716466398192187, 0.06139389406281681, 0.06811785176605223, 0.07133580794294103, 0.07370897016809541, 0.06909178140475092, 0.05158855688852981, 0.07089973706978381, 0.06697241039487778]}, "mutation_prompt": null}
{"id": "210aae99-ac31-42d6-a5a3-87c7bfb72272", "solution": "class EnhancedFastConvergenceMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        crossover_probs = np.full(pop_size, 0.5)  # Introduce crossover probabilities\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < crossover_probs[idx]:  # Utilize crossover probability\n                        crossover_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                        crossover_fitness = func(crossover_solution)\n                        if crossover_fitness < fitness_values[idx]:\n                            population[idx] = crossover_solution\n                            fitness_values[idx] = crossover_fitness\n                else:\n                    scaling_factors[idx] *= 0.9\n                    crossover_probs[idx] *= 0.95  # Adjust crossover probability\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "EnhancedFastConvergenceMetaheuristic", "description": "Introduce adaptive crossover probabilities to guide the exploration-exploitation balance, enhancing convergence.", "configspace": "", "generation": 97, "fitness": 0.18025200670572072, "feedback": "The algorithm EnhancedFastConvergenceMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "45e0d496-a63b-492c-a732-04af16935687", "metadata": {"aucs": [0.5200561475264703, 0.5626278573292793, 0.6086537922478596, 0.5411933324034373, 0.5970890773987712, 0.5194453948533335, 0.5346412665490936, 0.5267671949582187, 0.6029954176462953, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10675143475803739, 0.03992037563613127, 0.068557264904887, 0.049184301856468715, 0.03636163559929173, 0.05595042467688616, 0.08430091039025578, 0.08979673635376106, 0.041209888887223545, 0.037772278669116366, 0.05425748822522203, 0.03277861701000606, 0.0331238630054137, 0.055644505284743184, 0.08638347320076079, 0.02428119548441554, 0.03133682215957034, 0.03942583976694736, 0.7668838176226132, 0.8610678837784947, 0.917683231440246, 0.7368768113056755, 0.7742036695765477, 0.771888157739949, 0.726471268955136, 0.9251277623814889, 0.8747377374681886, 0.27191344375087867, 0.23296758302487874, 0.09152909726657832, 0.12959375132360074, 0.1825144104248626, 0.2701932051309339, 0.25222808414922715, 0.23935415489569456, 0.1751511248152825, 0.17124340516925474, 0.13500255858377264, 0.1808764112843264, 0.08772499660531341, 0.2018881835171913, 0.1582603672301155, 0.09148303229229826, 0.17146000078645807, 0.1691106584705283, 0.12324318001427037, 0.09309243668599543, 0.09490348438675411, 0.1820516545792208, 0.10945314244376392, 0.11077873968478635, 0.1164297942517507, 0.14706474753056842, 0.1421058797012391, 0.18962250704040684, 0.10808028461950803, 0.11347199480215497, 0.13832047435111616, 0.13327638572243272, 9.999999999998899e-05, 0.16060371674909324, 0.07917852976226591, 0.09843950360408704, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06620150292182347, 0.07715978959810599, 0.03740494452974619, 0.05172213379266455, 0.05838766098998771, 0.04441286857826088, 0.11000758334000815, 0.07953734279710734, 0.04254984758939884, 0.057734156392462155, 0.046895109492702924, 0.07505519435726782, 0.02368583102733024, 0.061412807849034245, 0.052128959829701116, 0.07795013433302667, 0.039963989825837265, 0.03231611937227841, 0.08911446702319359, 0.09517335929711901, 0.09358466181590852, 0.16598702884293415, 0.05606556806690843, 0.023200081229055702, 0.03935189599368916, 0.03934499197865027, 0.012229165482788074, 0.4083352951935393, 0.37649764447227807, 0.40290701691891084, 0.4122042633112538, 0.44556474556547887, 0.3896056956983157, 0.39822338016388814, 0.39654258703356504, 0.38940991199826736, 0.08296562511748162, 0.06522192134154503, 0.04137356801185266, 0.063786234819739, 0.056030310848302234, 0.05111321314422057, 0.06317052889560915, 0.05592803056659723, 0.06437533113972527, 0.19610408012255143, 0.14997444426018958, 0.1937813186587145, 0.14908673691227525, 0.15092713500551913, 0.15144320141186218, 0.18896325152592053, 0.17381259887222344, 0.17483825533694486, 0.1852003114555566, 0.16014157751578462, 0.15840021747342414, 0.2159129205226038, 0.1686272166309244, 0.15559749341235785, 0.18860740670520082, 0.16598496343875035, 0.17320148831073257, 0.10599260492664075, 0.12990236358630014, 0.16046120158852084, 0.16992925604182962, 0.16587828810869087, 0.12652928493046145, 0.10521422827278126, 0.19092718888071813, 0.11069155753910331, 0.17484456475672816, 0.24036209131305009, 0.1942779585313511, 0.18249808221648223, 0.15220606710029494, 0.20892615756283106, 0.22032827251764053, 0.16908792547722784, 0.19089267084158368, 0.16763728583263815, 0.1777431550883073, 0.17351612773636316, 0.1592691709841667, 0.17741274180134536, 0.15714311913872403, 0.18756813402092998, 0.1568349959902624, 0.17390070798683477, 0.17143767481180316, 0.18097921384461446, 0.15526561705490838, 0.15895752957426923, 0.18614264993864538, 0.70497638585515, 0.6144356147737654, 0.16402697306015346, 0.1774957210463608, 0.20444755571603368, 0.18853228611159667, 0.1353091599241698, 0.26901980647559376, 0.22796144474916413, 0.16427704518003772, 0.20220536987147752, 0.32873089924837073, 0.15685876445018698, 0.2027009803776164, 0.1842597219132719, 0.19925271515109932, 0.17071292061125676, 0.2164831880940732, 0.1969776193229592, 0.19660839631835347, 0.20181379463095372, 0.211568705075187, 0.08626571802088145, 0.05752463574990796, 0.09586734217723114, 0.06857124766576195, 0.049260774008362596, 0.06954460678532182, 0.07561533589995284, 0.06317636997532916, 0.06479954234010388]}, "mutation_prompt": null}
{"id": "9fa995e2-0e67-4a54-8b6a-3e1340884f7f", "solution": "import numpy as np\n\nclass DynamicMutationMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutation_rate = 1 - fitness_values[idx] / best_fitness\n                mutated_solution = ind + scaling_factors[idx] * mutation_rate * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                else:\n                    scaling_factors[idx] *= 0.9\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n        \n        return best_solution", "name": "DynamicMutationMetaheuristic", "description": "Improve convergence speed by incorporating a dynamic mutation strategy based on fitness evaluations.", "configspace": "", "generation": 98, "fitness": 0.08363396323205087, "feedback": "The algorithm DynamicMutationMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "210aae99-ac31-42d6-a5a3-87c7bfb72272", "metadata": {"aucs": [0.15671512249381903, 0.1644419708888354, 0.1538087622347406, 0.15327837710747916, 0.19112843211545272, 0.1895205550136687, 0.15169206113002565, 0.1333784169804716, 0.16053755324352914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03531179494873882, 0.039400400996564944, 0.047855384150850444, 0.05015954929772182, 0.029398404068944783, 0.04182137500607552, 0.03483349860264151, 0.03403162781990832, 0.03111093098566564, 0.024813501852623987, 0.03140240491827484, 0.03525675378517812, 0.047532383032761416, 0.03547783645298619, 0.023134511405013658, 0.025619457499808762, 0.038954027513051215, 0.022463302128953533, 0.08243228963521909, 0.07405858233545115, 0.08380938464725773, 0.08407720383153316, 0.07517539732273693, 0.0859691667621093, 0.06870413870323921, 0.07561850026923056, 0.07335706741709869, 0.07804905720821131, 0.06760782656640696, 0.05318367156701098, 0.061720068590766286, 0.12396809081694882, 0.05769818983584285, 0.03705737339985604, 0.0746176416006421, 0.06267441632755577, 0.11353516713886225, 0.10605660817300033, 0.10710258557703578, 0.09980928293042945, 0.09782460819237404, 0.11564484807017583, 0.11235049784133244, 0.12251183545182698, 0.15212584034054577, 0.016729297348716643, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014604814471857797, 9.999999999998899e-05, 0.021789015228267816, 0.01748479961402305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001269083692873707, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0348186434351595, 0.07548990042029402, 0.03978866356612265, 0.0032009091475845297, 0.013810161113607, 0.004125277410908512, 0.028806795090615234, 0.08233889460592814, 0.028262714618393914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014661859389958565, 9.999999999998899e-05, 0.0051048720807135295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18637856984350787, 0.18861017546794978, 0.18344916188929583, 0.22421936936607967, 0.17279320788867847, 0.17947588429343397, 0.19413113085745803, 0.16774605653169472, 0.19739984805294775, 0.03913522020980087, 0.04323097898675665, 0.03561529114556394, 0.03874161570286483, 0.038110981688398216, 0.050461212416420875, 0.045214640680110274, 0.04592750914771582, 0.05020687652004163, 0.12704051250607884, 0.13880128243432133, 0.15026070771491917, 0.11621926143101269, 0.11668924532627223, 0.12038223196479703, 0.13860585085732824, 0.12996894869387488, 0.13857980805844616, 0.15681663051097383, 0.1659373482599038, 0.15881992177201376, 0.1586337103060983, 0.15731548985729948, 0.1489937119324526, 0.14887718250529447, 0.1562475539774315, 0.15065241050473144, 0.10179763245124618, 0.09892510806702226, 0.09307663691206602, 0.1106370952752217, 0.0983516195682409, 0.09951195441275251, 0.09311903884422679, 0.10382847782710436, 0.09342231945414803, 0.15966140212735813, 0.16053451185967516, 0.13739287608126105, 0.1726784583656903, 0.1462565447202573, 0.1383374320268762, 0.14948133337791458, 0.1483648367462551, 0.16661731544597136, 0.14117965407215727, 0.14165887738377891, 0.12445857906101043, 0.13007678446560145, 0.1387747664386647, 0.1348379254291946, 0.1397800725689876, 0.12898020630164997, 0.1405087449847906, 0.13184434882959595, 0.1684172648948623, 0.24446861563996103, 0.16368559363562485, 0.14216946615053094, 0.15610635279083485, 0.1650849739858926, 0.14464920842368068, 0.16847239870703723, 0.1385189850787809, 0.15630126925542842, 0.1588589747470418, 0.1335275872273438, 0.18555067676548953, 0.15613754887230769, 0.13728654974469934, 0.15588356607423937, 0.20597703727938343, 0.1948456584080257, 0.19091359019742038, 0.19835699457374378, 0.19067415192215664, 0.19869859230124454, 0.1745291433375885, 0.1904464965254722, 0.19614163567831933, 0.17215922768499836, 0.041997489419442924, 0.057752688040637934, 0.04346143398630231, 0.057342632031310625, 0.04368922023673116, 0.05373178469252726, 0.046114285683059864, 0.05252540058546806, 0.05987203368320315]}, "mutation_prompt": null}
{"id": "e757cf7c-2999-463b-8407-9eef8e8953f5", "solution": "class DynamicPopulationSizeMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n    \n    def __call__(self, func):\n        pop_size = 10\n        scaling_factors = np.full(pop_size, 0.5)\n        mutation_rates = np.full(pop_size, 0.5)\n        crossover_probs = np.full(pop_size, 0.5)  # Introduce crossover probabilities\n        \n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        \n        for _ in range(self.budget // pop_size):\n            population = [np.random.uniform(-5.0, 5.0, self.dim) for _ in range(pop_size)]\n            fitness_values = [func(ind) for ind in population]\n            \n            best_idx = np.argmin(fitness_values)\n            population[best_idx] = best_solution\n            fitness_values[best_idx] = best_fitness\n            \n            for idx, ind in enumerate(population):\n                mutated_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                \n                fitness = func(mutated_solution)\n                if fitness < fitness_values[idx]:\n                    population[idx] = mutated_solution\n                    fitness_values[idx] = fitness\n                    scaling_factors[idx] *= 1.1\n                    if np.random.uniform(0, 1) < crossover_probs[idx]:  # Utilize crossover probability\n                        crossover_solution = ind + scaling_factors[idx] * np.random.normal(0, 1, self.dim)\n                        crossover_fitness = func(crossover_solution)\n                        if crossover_fitness < fitness_values[idx]:\n                            population[idx] = crossover_solution\n                            fitness_values[idx] = crossover_fitness\n                else:\n                    scaling_factors[idx] *= 0.9\n                    crossover_probs[idx] *= 0.95  # Adjust crossover probability\n                \n                if fitness < best_fitness:\n                    best_solution = mutated_solution\n                    best_fitness = fitness\n            \n            if np.random.uniform(0, 1) < 0.1:  # Introduce dynamic population size mechanism\n                pop_size = min(50, int(pop_size * 1.2))  # Increase population size dynamically\n        \n        return best_solution", "name": "DynamicPopulationSizeMetaheuristic", "description": "Improve convergence speed by introducing a dynamic population size mechanism that adapts based on the optimization progress.", "configspace": "", "generation": 99, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 10 is out of bounds for axis 0 with size 10').", "error": "IndexError('index 10 is out of bounds for axis 0 with size 10')", "parent_id": "210aae99-ac31-42d6-a5a3-87c7bfb72272", "metadata": {}, "mutation_prompt": null}
