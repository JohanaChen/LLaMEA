{"id": "fab1c0b5-d988-46d3-8d47-b2fe13fa8e18", "solution": "import numpy as np\n\nclass EGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                positions[i] = update_position(positions[i], best_position, c1, c2)\n                positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n        \n        return best_position", "name": "EGWO", "description": "An Enhanced Grey Wolf Optimizer (EGWO) algorithm that combines the Grey Wolf Optimizer with a novel solution update strategy based on the alpha, beta, and delta wolves for solving black box optimization problems efficiently.", "configspace": "", "generation": 0, "fitness": 0.14798139319305262, "feedback": "The algorithm EGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": null, "metadata": {"aucs": [0.31407651760172284, 0.25465004536628244, 0.2964078732519151, 0.2207685681636995, 0.2358278656818098, 0.22489131292481757, 0.23962262911370014, 0.23770030160780498, 0.2391918252821187, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005795238037084927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06296240193522484, 0.04892999826283195, 0.07269242472425774, 0.06555923322122126, 0.07796731136351942, 0.05427214411379533, 0.07988823142677315, 0.0692954696810213, 0.06373302170311124, 0.062491302516195946, 0.049779045222383855, 0.06954734798498963, 0.06178735287146975, 0.061487142574654485, 0.08541582499656519, 0.061904503623295803, 0.0656411808072388, 0.0667045332730799, 0.9621495626417332, 0.7279434085845693, 0.9524272718809171, 0.9506932150245213, 0.8626993306939454, 0.7486449886197746, 0.8155441189452807, 0.8989643382272402, 0.7871822652372007, 0.10598027592666581, 0.09252532397534874, 0.09535463119149068, 0.13546302244090824, 0.16818458770881284, 0.12766416113589363, 0.1403449298859314, 0.12442156127912463, 0.116247763835854, 0.18647745567299479, 0.191836259254777, 0.18993226831189114, 0.15361745627834533, 0.15514767850652877, 0.1748568973288953, 0.15856209840734004, 0.1465011452584406, 0.14354132977524237, 0.12253031585214236, 0.09775108849185854, 0.08118554898498209, 0.0668647245219347, 0.054060555832605495, 0.0302148390387853, 0.014991889427898086, 0.048883998502934456, 0.07701358303628336, 0.16102059874643815, 0.14584915698132372, 0.1659012628665565, 0.029966506226409173, 0.0985600301062497, 0.09834141552492581, 0.21705060668720977, 0.14621440195692192, 0.11502188063415253, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009544728537778768, 9.999999999998899e-05, 0.08634150383025807, 0.08037335316604732, 0.04887880785925314, 0.07861786196489806, 0.010072886211647147, 0.016432068497422958, 0.07389447263691451, 0.057728274762706366, 0.04384022600509052, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03308536941394924, 0.010778572928137553, 0.004193915625417155, 0.011662579720892574, 0.0004875273189794971, 9.999999999998899e-05, 0.005862208785427536, 0.021959842672313767, 0.013973824200444351, 0.2465299156235805, 0.24263458749905997, 0.2581514160071132, 0.26218694245270746, 0.23957210726691425, 0.2642849372993956, 0.22888569477606957, 0.2455607712826554, 0.2702697394232386, 0.06646582956534786, 0.04984623392954801, 0.055440622496795156, 0.05541932439633679, 0.07251516360972365, 0.06396664484195425, 0.07107992358148518, 0.06099104296642088, 0.0808136769590535, 0.17470447177750137, 0.13418325423666955, 0.180010149254349, 0.13024750192677126, 0.13256461492182303, 0.11941689609081296, 0.13075630609715772, 0.12611405032395107, 0.12766175521646406, 0.16985106834496733, 0.16170420162646426, 0.19397002213386205, 0.22143312977069896, 0.23398940072486107, 0.22592159611711427, 0.20594469209898203, 0.19512441184784735, 0.2075812521180076, 0.13049784746148219, 0.11961383945584914, 0.1512210406272474, 0.10299322702103941, 0.10038299830103714, 0.16462478768226863, 0.12048255773022643, 0.13852839113507198, 0.12418257326723303, 0.2458751346126794, 0.18346448378872726, 0.19065882966039271, 0.1863971773924088, 0.20211056648251413, 0.22107155889151786, 0.19044126294358288, 0.18866077071208376, 0.19801347968779603, 0.1578696885960098, 0.15887742139696126, 0.1638646082125017, 0.1683686333854577, 0.16263699124363962, 0.16424483068158136, 0.1590437645191869, 0.17085730252471598, 0.15417637816622443, 0.1803849215814496, 0.17717549504514063, 0.15413235661573932, 0.16061886916094903, 0.18815346795894305, 0.17051887839993485, 0.19325254792287028, 0.17828481959838027, 0.16320733226011674, 0.29442075163170844, 0.16204841603464049, 0.12711699751041883, 0.13871717626432145, 0.1651460050914455, 0.16873271582452276, 0.15025940147528982, 0.2146700383788135, 0.25190129380983217, 0.18822055387370473, 0.18749252164832397, 0.18283183778595025, 0.1801763855882067, 0.18997820532033483, 0.1867817588116677, 0.17747581651550426, 0.1899841923309853, 0.19984036705514663, 0.06298520523973783, 0.057848481757236225, 0.06388034589857838, 0.06499334909567078, 0.08190577044726521, 0.07002764553667962, 0.05313757649816886, 0.058454921407442684, 0.06062259521966007]}, "mutation_prompt": null}
{"id": "6922e27f-59e5-4419-82e3-665ce6b46db5", "solution": "import numpy as np\n\nclass EGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                positions[i] = update_position(positions[i], best_position, c1, c2)\n                positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n        \n        return best_position", "name": "EGWO", "description": "An Enhanced Grey Wolf Optimizer (EGWO) algorithm that combines the Grey Wolf Optimizer with a novel solution update strategy based on the alpha, beta, and delta wolves for solving black box optimization problems efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fab1c0b5-d988-46d3-8d47-b2fe13fa8e18", "metadata": {"aucs": [0.31407651760172284, 0.25465004536628244, 0.2964078732519151, 0.2207685681636995, 0.2358278656818098, 0.22489131292481757, 0.23962262911370014, 0.23770030160780498, 0.2391918252821187, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005795238037084927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06296240193522484, 0.04892999826283195, 0.07269242472425774, 0.06555923322122126, 0.07796731136351942, 0.05427214411379533, 0.07988823142677315, 0.0692954696810213, 0.06373302170311124, 0.062491302516195946, 0.049779045222383855, 0.06954734798498963, 0.06178735287146975, 0.061487142574654485, 0.08541582499656519, 0.061904503623295803, 0.0656411808072388, 0.0667045332730799, 0.9621495626417332, 0.7279434085845693, 0.9524272718809171, 0.9506932150245213, 0.8626993306939454, 0.7486449886197746, 0.8155441189452807, 0.8989643382272402, 0.7871822652372007, 0.10598027592666581, 0.09252532397534874, 0.09535463119149068, 0.13546302244090824, 0.16818458770881284, 0.12766416113589363, 0.1403449298859314, 0.12442156127912463, 0.116247763835854, 0.18647745567299479, 0.191836259254777, 0.18993226831189114, 0.15361745627834533, 0.15514767850652877, 0.1748568973288953, 0.15856209840734004, 0.1465011452584406, 0.14354132977524237, 0.12253031585214236, 0.09775108849185854, 0.08118554898498209, 0.0668647245219347, 0.054060555832605495, 0.0302148390387853, 0.014991889427898086, 0.048883998502934456, 0.07701358303628336, 0.16102059874643815, 0.14584915698132372, 0.1659012628665565, 0.029966506226409173, 0.0985600301062497, 0.09834141552492581, 0.21705060668720977, 0.14621440195692192, 0.11502188063415253, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009544728537778768, 9.999999999998899e-05, 0.08634150383025807, 0.08037335316604732, 0.04887880785925314, 0.07861786196489806, 0.010072886211647147, 0.016432068497422958, 0.07389447263691451, 0.057728274762706366, 0.04384022600509052, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03308536941394924, 0.010778572928137553, 0.004193915625417155, 0.011662579720892574, 0.0004875273189794971, 9.999999999998899e-05, 0.005862208785427536, 0.021959842672313767, 0.013973824200444351, 0.2465299156235805, 0.24263458749905997, 0.2581514160071132, 0.26218694245270746, 0.23957210726691425, 0.2642849372993956, 0.22888569477606957, 0.2455607712826554, 0.2702697394232386, 0.06646582956534786, 0.04984623392954801, 0.055440622496795156, 0.05541932439633679, 0.07251516360972365, 0.06396664484195425, 0.07107992358148518, 0.06099104296642088, 0.0808136769590535, 0.17470447177750137, 0.13418325423666955, 0.180010149254349, 0.13024750192677126, 0.13256461492182303, 0.11941689609081296, 0.13075630609715772, 0.12611405032395107, 0.12766175521646406, 0.16985106834496733, 0.16170420162646426, 0.19397002213386205, 0.22143312977069896, 0.23398940072486107, 0.22592159611711427, 0.20594469209898203, 0.19512441184784735, 0.2075812521180076, 0.13049784746148219, 0.11961383945584914, 0.1512210406272474, 0.10299322702103941, 0.10038299830103714, 0.16462478768226863, 0.12048255773022643, 0.13852839113507198, 0.12418257326723303, 0.2458751346126794, 0.18346448378872726, 0.19065882966039271, 0.1863971773924088, 0.20211056648251413, 0.22107155889151786, 0.19044126294358288, 0.18866077071208376, 0.19801347968779603, 0.1578696885960098, 0.15887742139696126, 0.1638646082125017, 0.1683686333854577, 0.16263699124363962, 0.16424483068158136, 0.1590437645191869, 0.17085730252471598, 0.15417637816622443, 0.1803849215814496, 0.17717549504514063, 0.15413235661573932, 0.16061886916094903, 0.18815346795894305, 0.17051887839993485, 0.19325254792287028, 0.17828481959838027, 0.16320733226011674, 0.29442075163170844, 0.16204841603464049, 0.12711699751041883, 0.13871717626432145, 0.1651460050914455, 0.16873271582452276, 0.15025940147528982, 0.2146700383788135, 0.25190129380983217, 0.18822055387370473, 0.18749252164832397, 0.18283183778595025, 0.1801763855882067, 0.18997820532033483, 0.1867817588116677, 0.17747581651550426, 0.1899841923309853, 0.19984036705514663, 0.06298520523973783, 0.057848481757236225, 0.06388034589857838, 0.06499334909567078, 0.08190577044726521, 0.07002764553667962, 0.05313757649816886, 0.058454921407442684, 0.06062259521966007]}, "mutation_prompt": null}
{"id": "ae335006-0377-4357-be80-7034fd654b88", "solution": "import numpy as np\n\nclass EGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                positions[i] = update_position(positions[i], best_position, c1, c2)\n                positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n        \n        return best_position", "name": "EGWO", "description": "An Enhanced Grey Wolf Optimizer (EGWO) algorithm that combines the Grey Wolf Optimizer with a novel solution update strategy based on the alpha, beta, and delta wolves for solving black box optimization problems efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fab1c0b5-d988-46d3-8d47-b2fe13fa8e18", "metadata": {"aucs": [0.31407651760172284, 0.25465004536628244, 0.2964078732519151, 0.2207685681636995, 0.2358278656818098, 0.22489131292481757, 0.23962262911370014, 0.23770030160780498, 0.2391918252821187, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005795238037084927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06296240193522484, 0.04892999826283195, 0.07269242472425774, 0.06555923322122126, 0.07796731136351942, 0.05427214411379533, 0.07988823142677315, 0.0692954696810213, 0.06373302170311124, 0.062491302516195946, 0.049779045222383855, 0.06954734798498963, 0.06178735287146975, 0.061487142574654485, 0.08541582499656519, 0.061904503623295803, 0.0656411808072388, 0.0667045332730799, 0.9621495626417332, 0.7279434085845693, 0.9524272718809171, 0.9506932150245213, 0.8626993306939454, 0.7486449886197746, 0.8155441189452807, 0.8989643382272402, 0.7871822652372007, 0.10598027592666581, 0.09252532397534874, 0.09535463119149068, 0.13546302244090824, 0.16818458770881284, 0.12766416113589363, 0.1403449298859314, 0.12442156127912463, 0.116247763835854, 0.18647745567299479, 0.191836259254777, 0.18993226831189114, 0.15361745627834533, 0.15514767850652877, 0.1748568973288953, 0.15856209840734004, 0.1465011452584406, 0.14354132977524237, 0.12253031585214236, 0.09775108849185854, 0.08118554898498209, 0.0668647245219347, 0.054060555832605495, 0.0302148390387853, 0.014991889427898086, 0.048883998502934456, 0.07701358303628336, 0.16102059874643815, 0.14584915698132372, 0.1659012628665565, 0.029966506226409173, 0.0985600301062497, 0.09834141552492581, 0.21705060668720977, 0.14621440195692192, 0.11502188063415253, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009544728537778768, 9.999999999998899e-05, 0.08634150383025807, 0.08037335316604732, 0.04887880785925314, 0.07861786196489806, 0.010072886211647147, 0.016432068497422958, 0.07389447263691451, 0.057728274762706366, 0.04384022600509052, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03308536941394924, 0.010778572928137553, 0.004193915625417155, 0.011662579720892574, 0.0004875273189794971, 9.999999999998899e-05, 0.005862208785427536, 0.021959842672313767, 0.013973824200444351, 0.2465299156235805, 0.24263458749905997, 0.2581514160071132, 0.26218694245270746, 0.23957210726691425, 0.2642849372993956, 0.22888569477606957, 0.2455607712826554, 0.2702697394232386, 0.06646582956534786, 0.04984623392954801, 0.055440622496795156, 0.05541932439633679, 0.07251516360972365, 0.06396664484195425, 0.07107992358148518, 0.06099104296642088, 0.0808136769590535, 0.17470447177750137, 0.13418325423666955, 0.180010149254349, 0.13024750192677126, 0.13256461492182303, 0.11941689609081296, 0.13075630609715772, 0.12611405032395107, 0.12766175521646406, 0.16985106834496733, 0.16170420162646426, 0.19397002213386205, 0.22143312977069896, 0.23398940072486107, 0.22592159611711427, 0.20594469209898203, 0.19512441184784735, 0.2075812521180076, 0.13049784746148219, 0.11961383945584914, 0.1512210406272474, 0.10299322702103941, 0.10038299830103714, 0.16462478768226863, 0.12048255773022643, 0.13852839113507198, 0.12418257326723303, 0.2458751346126794, 0.18346448378872726, 0.19065882966039271, 0.1863971773924088, 0.20211056648251413, 0.22107155889151786, 0.19044126294358288, 0.18866077071208376, 0.19801347968779603, 0.1578696885960098, 0.15887742139696126, 0.1638646082125017, 0.1683686333854577, 0.16263699124363962, 0.16424483068158136, 0.1590437645191869, 0.17085730252471598, 0.15417637816622443, 0.1803849215814496, 0.17717549504514063, 0.15413235661573932, 0.16061886916094903, 0.18815346795894305, 0.17051887839993485, 0.19325254792287028, 0.17828481959838027, 0.16320733226011674, 0.29442075163170844, 0.16204841603464049, 0.12711699751041883, 0.13871717626432145, 0.1651460050914455, 0.16873271582452276, 0.15025940147528982, 0.2146700383788135, 0.25190129380983217, 0.18822055387370473, 0.18749252164832397, 0.18283183778595025, 0.1801763855882067, 0.18997820532033483, 0.1867817588116677, 0.17747581651550426, 0.1899841923309853, 0.19984036705514663, 0.06298520523973783, 0.057848481757236225, 0.06388034589857838, 0.06499334909567078, 0.08190577044726521, 0.07002764553667962, 0.05313757649816886, 0.058454921407442684, 0.06062259521966007]}, "mutation_prompt": null}
{"id": "a73169ba-a705-4272-afda-693cfe7140e0", "solution": "class AdaptiveEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        a = 2.0\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                positions[i] = update_position(positions[i], best_position, c1, c2)\n                positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n                a = max(0.5, min(2.0, a * 1.1))  # Adaptive adjustment of 'a' based on improvement\n\n        return best_position", "name": "AdaptiveEGWO", "description": "Implement an adaptive parameter update mechanism based on the fitness improvement to dynamically adjust the exploration-exploitation trade-off, enhancing convergence speed.", "configspace": "", "generation": 3, "fitness": 0.14798139319305262, "feedback": "The algorithm AdaptiveEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "fab1c0b5-d988-46d3-8d47-b2fe13fa8e18", "metadata": {"aucs": [0.31407651760172284, 0.25465004536628244, 0.2964078732519151, 0.2207685681636995, 0.2358278656818098, 0.22489131292481757, 0.23962262911370014, 0.23770030160780498, 0.2391918252821187, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005795238037084927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06296240193522484, 0.04892999826283195, 0.07269242472425774, 0.06555923322122126, 0.07796731136351942, 0.05427214411379533, 0.07988823142677315, 0.0692954696810213, 0.06373302170311124, 0.062491302516195946, 0.049779045222383855, 0.06954734798498963, 0.06178735287146975, 0.061487142574654485, 0.08541582499656519, 0.061904503623295803, 0.0656411808072388, 0.0667045332730799, 0.9621495626417332, 0.7279434085845693, 0.9524272718809171, 0.9506932150245213, 0.8626993306939454, 0.7486449886197746, 0.8155441189452807, 0.8989643382272402, 0.7871822652372007, 0.10598027592666581, 0.09252532397534874, 0.09535463119149068, 0.13546302244090824, 0.16818458770881284, 0.12766416113589363, 0.1403449298859314, 0.12442156127912463, 0.116247763835854, 0.18647745567299479, 0.191836259254777, 0.18993226831189114, 0.15361745627834533, 0.15514767850652877, 0.1748568973288953, 0.15856209840734004, 0.1465011452584406, 0.14354132977524237, 0.12253031585214236, 0.09775108849185854, 0.08118554898498209, 0.0668647245219347, 0.054060555832605495, 0.0302148390387853, 0.014991889427898086, 0.048883998502934456, 0.07701358303628336, 0.16102059874643815, 0.14584915698132372, 0.1659012628665565, 0.029966506226409173, 0.0985600301062497, 0.09834141552492581, 0.21705060668720977, 0.14621440195692192, 0.11502188063415253, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009544728537778768, 9.999999999998899e-05, 0.08634150383025807, 0.08037335316604732, 0.04887880785925314, 0.07861786196489806, 0.010072886211647147, 0.016432068497422958, 0.07389447263691451, 0.057728274762706366, 0.04384022600509052, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03308536941394924, 0.010778572928137553, 0.004193915625417155, 0.011662579720892574, 0.0004875273189794971, 9.999999999998899e-05, 0.005862208785427536, 0.021959842672313767, 0.013973824200444351, 0.2465299156235805, 0.24263458749905997, 0.2581514160071132, 0.26218694245270746, 0.23957210726691425, 0.2642849372993956, 0.22888569477606957, 0.2455607712826554, 0.2702697394232386, 0.06646582956534786, 0.04984623392954801, 0.055440622496795156, 0.05541932439633679, 0.07251516360972365, 0.06396664484195425, 0.07107992358148518, 0.06099104296642088, 0.0808136769590535, 0.17470447177750137, 0.13418325423666955, 0.180010149254349, 0.13024750192677126, 0.13256461492182303, 0.11941689609081296, 0.13075630609715772, 0.12611405032395107, 0.12766175521646406, 0.16985106834496733, 0.16170420162646426, 0.19397002213386205, 0.22143312977069896, 0.23398940072486107, 0.22592159611711427, 0.20594469209898203, 0.19512441184784735, 0.2075812521180076, 0.13049784746148219, 0.11961383945584914, 0.1512210406272474, 0.10299322702103941, 0.10038299830103714, 0.16462478768226863, 0.12048255773022643, 0.13852839113507198, 0.12418257326723303, 0.2458751346126794, 0.18346448378872726, 0.19065882966039271, 0.1863971773924088, 0.20211056648251413, 0.22107155889151786, 0.19044126294358288, 0.18866077071208376, 0.19801347968779603, 0.1578696885960098, 0.15887742139696126, 0.1638646082125017, 0.1683686333854577, 0.16263699124363962, 0.16424483068158136, 0.1590437645191869, 0.17085730252471598, 0.15417637816622443, 0.1803849215814496, 0.17717549504514063, 0.15413235661573932, 0.16061886916094903, 0.18815346795894305, 0.17051887839993485, 0.19325254792287028, 0.17828481959838027, 0.16320733226011674, 0.29442075163170844, 0.16204841603464049, 0.12711699751041883, 0.13871717626432145, 0.1651460050914455, 0.16873271582452276, 0.15025940147528982, 0.2146700383788135, 0.25190129380983217, 0.18822055387370473, 0.18749252164832397, 0.18283183778595025, 0.1801763855882067, 0.18997820532033483, 0.1867817588116677, 0.17747581651550426, 0.1899841923309853, 0.19984036705514663, 0.06298520523973783, 0.057848481757236225, 0.06388034589857838, 0.06499334909567078, 0.08190577044726521, 0.07002764553667962, 0.05313757649816886, 0.058454921407442684, 0.06062259521966007]}, "mutation_prompt": null}
{"id": "428f3336-fc24-4f88-86c5-2270639fca63", "solution": "import numpy as np\n\nclass EGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                positions[i] = update_position(positions[i], best_position, c1, c2)\n                positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n        \n        return best_position", "name": "EGWO", "description": "An Enhanced Grey Wolf Optimizer (EGWO) algorithm that combines the Grey Wolf Optimizer with a novel solution update strategy based on the alpha, beta, and delta wolves for solving black box optimization problems efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fab1c0b5-d988-46d3-8d47-b2fe13fa8e18", "metadata": {"aucs": [0.31407651760172284, 0.25465004536628244, 0.2964078732519151, 0.2207685681636995, 0.2358278656818098, 0.22489131292481757, 0.23962262911370014, 0.23770030160780498, 0.2391918252821187, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005795238037084927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06296240193522484, 0.04892999826283195, 0.07269242472425774, 0.06555923322122126, 0.07796731136351942, 0.05427214411379533, 0.07988823142677315, 0.0692954696810213, 0.06373302170311124, 0.062491302516195946, 0.049779045222383855, 0.06954734798498963, 0.06178735287146975, 0.061487142574654485, 0.08541582499656519, 0.061904503623295803, 0.0656411808072388, 0.0667045332730799, 0.9621495626417332, 0.7279434085845693, 0.9524272718809171, 0.9506932150245213, 0.8626993306939454, 0.7486449886197746, 0.8155441189452807, 0.8989643382272402, 0.7871822652372007, 0.10598027592666581, 0.09252532397534874, 0.09535463119149068, 0.13546302244090824, 0.16818458770881284, 0.12766416113589363, 0.1403449298859314, 0.12442156127912463, 0.116247763835854, 0.18647745567299479, 0.191836259254777, 0.18993226831189114, 0.15361745627834533, 0.15514767850652877, 0.1748568973288953, 0.15856209840734004, 0.1465011452584406, 0.14354132977524237, 0.12253031585214236, 0.09775108849185854, 0.08118554898498209, 0.0668647245219347, 0.054060555832605495, 0.0302148390387853, 0.014991889427898086, 0.048883998502934456, 0.07701358303628336, 0.16102059874643815, 0.14584915698132372, 0.1659012628665565, 0.029966506226409173, 0.0985600301062497, 0.09834141552492581, 0.21705060668720977, 0.14621440195692192, 0.11502188063415253, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009544728537778768, 9.999999999998899e-05, 0.08634150383025807, 0.08037335316604732, 0.04887880785925314, 0.07861786196489806, 0.010072886211647147, 0.016432068497422958, 0.07389447263691451, 0.057728274762706366, 0.04384022600509052, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03308536941394924, 0.010778572928137553, 0.004193915625417155, 0.011662579720892574, 0.0004875273189794971, 9.999999999998899e-05, 0.005862208785427536, 0.021959842672313767, 0.013973824200444351, 0.2465299156235805, 0.24263458749905997, 0.2581514160071132, 0.26218694245270746, 0.23957210726691425, 0.2642849372993956, 0.22888569477606957, 0.2455607712826554, 0.2702697394232386, 0.06646582956534786, 0.04984623392954801, 0.055440622496795156, 0.05541932439633679, 0.07251516360972365, 0.06396664484195425, 0.07107992358148518, 0.06099104296642088, 0.0808136769590535, 0.17470447177750137, 0.13418325423666955, 0.180010149254349, 0.13024750192677126, 0.13256461492182303, 0.11941689609081296, 0.13075630609715772, 0.12611405032395107, 0.12766175521646406, 0.16985106834496733, 0.16170420162646426, 0.19397002213386205, 0.22143312977069896, 0.23398940072486107, 0.22592159611711427, 0.20594469209898203, 0.19512441184784735, 0.2075812521180076, 0.13049784746148219, 0.11961383945584914, 0.1512210406272474, 0.10299322702103941, 0.10038299830103714, 0.16462478768226863, 0.12048255773022643, 0.13852839113507198, 0.12418257326723303, 0.2458751346126794, 0.18346448378872726, 0.19065882966039271, 0.1863971773924088, 0.20211056648251413, 0.22107155889151786, 0.19044126294358288, 0.18866077071208376, 0.19801347968779603, 0.1578696885960098, 0.15887742139696126, 0.1638646082125017, 0.1683686333854577, 0.16263699124363962, 0.16424483068158136, 0.1590437645191869, 0.17085730252471598, 0.15417637816622443, 0.1803849215814496, 0.17717549504514063, 0.15413235661573932, 0.16061886916094903, 0.18815346795894305, 0.17051887839993485, 0.19325254792287028, 0.17828481959838027, 0.16320733226011674, 0.29442075163170844, 0.16204841603464049, 0.12711699751041883, 0.13871717626432145, 0.1651460050914455, 0.16873271582452276, 0.15025940147528982, 0.2146700383788135, 0.25190129380983217, 0.18822055387370473, 0.18749252164832397, 0.18283183778595025, 0.1801763855882067, 0.18997820532033483, 0.1867817588116677, 0.17747581651550426, 0.1899841923309853, 0.19984036705514663, 0.06298520523973783, 0.057848481757236225, 0.06388034589857838, 0.06499334909567078, 0.08190577044726521, 0.07002764553667962, 0.05313757649816886, 0.058454921407442684, 0.06062259521966007]}, "mutation_prompt": null}
{"id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "solution": "import numpy as np\n\nclass DynamicEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  # Dynamic parameter adaptation\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicEGWO", "description": "Implement a dynamic parameter adaptation mechanism in the EGWO algorithm to adjust the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 5, "fitness": 0.15034636325877282, "feedback": "The algorithm DynamicEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "fab1c0b5-d988-46d3-8d47-b2fe13fa8e18", "metadata": {"aucs": [0.251366727107578, 0.23878376212313324, 0.2841598693170565, 0.2251472392291255, 0.24520379645853918, 0.28458276858389187, 0.2946650243068214, 0.2484392634071364, 0.25314828689798974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03046424855497476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06213365837326923, 0.05240375492006866, 0.06937100258922368, 0.06871562705095091, 0.0574257881493333, 0.0662836876437064, 0.05906659474070597, 0.07926547594196487, 0.06316681221192155, 0.04128485780830582, 0.04022946463012489, 0.051054627134425545, 0.06415611204257021, 0.06647117651497536, 0.06852622353116966, 0.05234500012086685, 0.05833682521535899, 0.05481712269281702, 0.875774133947442, 0.9162614590036159, 0.5822583698295516, 0.9741065877621614, 0.7894561242932201, 0.927368308961065, 0.7117693636654234, 0.8578904781565598, 0.8663062960981534, 0.09515823251116895, 0.07305595031074608, 0.13219729698146243, 0.1624187649101414, 0.12996309850716914, 0.1299454518823442, 0.14027245603205662, 0.13987315390406652, 0.108062622075627, 0.19250971849685627, 0.20040190289053905, 0.1919672503023312, 0.14552448172677546, 0.12359079596190836, 0.14613834936744952, 0.16638578349109578, 0.16847743997685227, 0.1520701398315687, 0.1330742216416151, 0.05890485386501765, 0.07055172770456453, 0.04897876805542911, 0.05350454134400784, 0.014973748205715176, 0.04863325352924208, 0.03446276611087529, 0.07899116700186237, 0.2128708354561608, 0.14921890624407896, 0.13262440028127387, 0.1563073187665054, 0.18182654421045485, 0.10564029128021557, 0.15664520976734253, 0.012961461464513602, 0.1302921425795317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0444532250323435, 0.05034519477509436, 0.05218655759675017, 0.05388151713473577, 0.037423270423919575, 0.04287019198363906, 0.05110330569065136, 0.0756695397757452, 0.050274695618277465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021288855323658762, 9.999999999998899e-05, 0.028524772591609904, 0.004458712101405582, 9.999999999998899e-05, 0.0025027370654792103, 0.027279489317943995, 0.020303039983955884, 0.0238998884130589, 0.2526738342245243, 0.25978489891170775, 0.26858893486842694, 0.22500466835876076, 0.25815453238012287, 0.2679710356858557, 0.269325810455595, 0.25459972875859294, 0.27801666899839883, 0.06995815865316768, 0.0515895027639337, 0.06532379244375675, 0.027958122491678505, 0.08762002010174241, 0.06455844647029518, 0.0646735021952547, 0.07465394071327958, 0.07133239326574203, 0.1784394178965184, 0.13055128526686655, 0.18831824396943664, 0.13538245579449848, 0.14468457662954204, 0.12660120826260024, 0.14941250750800938, 0.16200321050053512, 0.1226021939490205, 0.20797796225066356, 0.19062632838771776, 0.1807662209916303, 0.20908471462474876, 0.20802624091895694, 0.22863455228530938, 0.18368399110385536, 0.20708041710994307, 0.18699871084085795, 0.14263681156844976, 0.1396345943329912, 0.13906127200342622, 0.15101613044658302, 0.15559824319223736, 0.17199794363901078, 0.13073029278814952, 0.154851837737091, 0.1251911001979379, 0.19037486299535455, 0.20240298818798586, 0.17532922095196413, 0.1937147103572333, 0.17727791515976055, 0.19874093799266268, 0.20586379387416653, 0.1838226093171933, 0.20679280171592562, 0.16087831137791675, 0.15989026464240308, 0.16336696270482665, 0.1586539865010571, 0.15957267377140538, 0.1684080698564958, 0.1603503035209456, 0.17925203036117632, 0.16081408484865445, 0.1297304744666108, 0.15794865146203552, 0.1504872515843303, 0.16790919195053555, 0.2626620282988331, 0.2066959186625562, 0.243533872843551, 0.1515739628031515, 0.28924662053838524, 0.133075376525305, 0.19836893366618702, 0.1999287178606347, 0.277337022012053, 0.25427378232875475, 0.21801451800457172, 0.2635265947686486, 0.20913925180673631, 0.26351987138025823, 0.18103613180004974, 0.1727275504684922, 0.1838136727156392, 0.1787987285311945, 0.1885270383432417, 0.1962997306020926, 0.20252267460111006, 0.1777526818713675, 0.188047079326926, 0.05946082524957996, 0.05389029310743154, 0.06606352646983593, 0.0796646525228798, 0.07440614576694082, 0.04405591828901745, 0.06555033945369015, 0.050887907421223066, 0.0655045838045002]}, "mutation_prompt": null}
{"id": "5529713f-f66a-435a-b708-3981e92e5993", "solution": "import numpy as np\n\nclass DynamicEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  # Dynamic parameter adaptation\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicEGWO", "description": "Implement a dynamic parameter adaptation mechanism in the EGWO algorithm to adjust the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.251366727107578, 0.23878376212313324, 0.2841598693170565, 0.2251472392291255, 0.24520379645853918, 0.28458276858389187, 0.2946650243068214, 0.2484392634071364, 0.25314828689798974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03046424855497476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06213365837326923, 0.05240375492006866, 0.06937100258922368, 0.06871562705095091, 0.0574257881493333, 0.0662836876437064, 0.05906659474070597, 0.07926547594196487, 0.06316681221192155, 0.04128485780830582, 0.04022946463012489, 0.051054627134425545, 0.06415611204257021, 0.06647117651497536, 0.06852622353116966, 0.05234500012086685, 0.05833682521535899, 0.05481712269281702, 0.875774133947442, 0.9162614590036159, 0.5822583698295516, 0.9741065877621614, 0.7894561242932201, 0.927368308961065, 0.7117693636654234, 0.8578904781565598, 0.8663062960981534, 0.09515823251116895, 0.07305595031074608, 0.13219729698146243, 0.1624187649101414, 0.12996309850716914, 0.1299454518823442, 0.14027245603205662, 0.13987315390406652, 0.108062622075627, 0.19250971849685627, 0.20040190289053905, 0.1919672503023312, 0.14552448172677546, 0.12359079596190836, 0.14613834936744952, 0.16638578349109578, 0.16847743997685227, 0.1520701398315687, 0.1330742216416151, 0.05890485386501765, 0.07055172770456453, 0.04897876805542911, 0.05350454134400784, 0.014973748205715176, 0.04863325352924208, 0.03446276611087529, 0.07899116700186237, 0.2128708354561608, 0.14921890624407896, 0.13262440028127387, 0.1563073187665054, 0.18182654421045485, 0.10564029128021557, 0.15664520976734253, 0.012961461464513602, 0.1302921425795317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0444532250323435, 0.05034519477509436, 0.05218655759675017, 0.05388151713473577, 0.037423270423919575, 0.04287019198363906, 0.05110330569065136, 0.0756695397757452, 0.050274695618277465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021288855323658762, 9.999999999998899e-05, 0.028524772591609904, 0.004458712101405582, 9.999999999998899e-05, 0.0025027370654792103, 0.027279489317943995, 0.020303039983955884, 0.0238998884130589, 0.2526738342245243, 0.25978489891170775, 0.26858893486842694, 0.22500466835876076, 0.25815453238012287, 0.2679710356858557, 0.269325810455595, 0.25459972875859294, 0.27801666899839883, 0.06995815865316768, 0.0515895027639337, 0.06532379244375675, 0.027958122491678505, 0.08762002010174241, 0.06455844647029518, 0.0646735021952547, 0.07465394071327958, 0.07133239326574203, 0.1784394178965184, 0.13055128526686655, 0.18831824396943664, 0.13538245579449848, 0.14468457662954204, 0.12660120826260024, 0.14941250750800938, 0.16200321050053512, 0.1226021939490205, 0.20797796225066356, 0.19062632838771776, 0.1807662209916303, 0.20908471462474876, 0.20802624091895694, 0.22863455228530938, 0.18368399110385536, 0.20708041710994307, 0.18699871084085795, 0.14263681156844976, 0.1396345943329912, 0.13906127200342622, 0.15101613044658302, 0.15559824319223736, 0.17199794363901078, 0.13073029278814952, 0.154851837737091, 0.1251911001979379, 0.19037486299535455, 0.20240298818798586, 0.17532922095196413, 0.1937147103572333, 0.17727791515976055, 0.19874093799266268, 0.20586379387416653, 0.1838226093171933, 0.20679280171592562, 0.16087831137791675, 0.15989026464240308, 0.16336696270482665, 0.1586539865010571, 0.15957267377140538, 0.1684080698564958, 0.1603503035209456, 0.17925203036117632, 0.16081408484865445, 0.1297304744666108, 0.15794865146203552, 0.1504872515843303, 0.16790919195053555, 0.2626620282988331, 0.2066959186625562, 0.243533872843551, 0.1515739628031515, 0.28924662053838524, 0.133075376525305, 0.19836893366618702, 0.1999287178606347, 0.277337022012053, 0.25427378232875475, 0.21801451800457172, 0.2635265947686486, 0.20913925180673631, 0.26351987138025823, 0.18103613180004974, 0.1727275504684922, 0.1838136727156392, 0.1787987285311945, 0.1885270383432417, 0.1962997306020926, 0.20252267460111006, 0.1777526818713675, 0.188047079326926, 0.05946082524957996, 0.05389029310743154, 0.06606352646983593, 0.0796646525228798, 0.07440614576694082, 0.04405591828901745, 0.06555033945369015, 0.050887907421223066, 0.0655045838045002]}, "mutation_prompt": null}
{"id": "4a3aa462-931c-4dce-bb5d-8a14224e5473", "solution": "class EnhancedDynamicEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position) + 0.1 * np.random.randn(self.dim), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  # Dynamic parameter adaptation\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "EnhancedDynamicEGWO", "description": "Introducing a stochastic perturbation mechanism to diversify the search space exploration and accelerate convergence.", "configspace": "", "generation": 7, "fitness": 0.14412291313803255, "feedback": "The algorithm EnhancedDynamicEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.16.", "error": "", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.28366848481243834, 0.2475205694114232, 0.25914459287335845, 0.19281974543021596, 0.2619638613700437, 0.246703993888981, 0.22911844448399066, 0.26390233219530423, 0.23544203462848734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06032557254317794, 0.05877811482222317, 0.06069770377229411, 0.0641289005350425, 0.0804253133896482, 0.06644780053911259, 0.06983887028539526, 0.0776427129267575, 0.06513821968068478, 0.05489508972263135, 0.06043394530432111, 0.043668015040088215, 0.05527599595613086, 0.05401349487134288, 0.038364854020227934, 0.04390099246669832, 0.056653121954524766, 0.04591557753147879, 0.8457025936939323, 0.9086259112521596, 0.9041253295706628, 0.8649144854111974, 0.9687333283053445, 0.8662817281922333, 0.6297339477781505, 0.5925366353121605, 0.8148350721332411, 0.10130280099349309, 0.09974878499049933, 0.137277951021753, 0.1224405181307211, 0.13545639724726988, 0.12160734103651372, 0.1330945734376333, 0.11332848180425792, 0.1499572392093662, 0.16661277667540175, 0.1801195835112045, 0.18356258445094875, 0.160671640013065, 0.16695336757549306, 0.14781363614205945, 0.20300899864945643, 0.13337815052285418, 0.15002618718351823, 0.0823271950624086, 0.06507407198019521, 0.08786383817723797, 0.05485110744481303, 0.062236993804044904, 0.0767190974899562, 0.06261263544962004, 0.0004859577551579175, 0.06959084065758159, 0.11166659031958914, 0.15205323576460905, 0.020730722342357844, 0.09594642897384853, 0.019930803997392443, 0.1395067497487682, 0.13455494506537746, 0.14031388912298393, 0.10585384542381193, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013904489648363771, 0.036414289070650585, 0.061741192710404014, 0.030550122262634982, 0.06416240480285906, 0.04538460653203091, 0.02808161788329855, 0.04095705320385279, 0.05141035079063472, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01713047208656393, 0.007776683627447656, 0.003575277577938296, 0.009527641062890502, 0.0025218648747017403, 0.011112159850993675, 0.004632339490312054, 0.004869997436716567, 0.022946007165048465, 0.26667707930650053, 0.27142982072876387, 0.26715854950348095, 0.23330067329985782, 0.2459502199193584, 0.25420272682769496, 0.2718558090649489, 0.25303503957067197, 0.26868766283599366, 0.07247145251171516, 0.07222820566818411, 0.06971935412389119, 0.06456255495434993, 0.061234614693207345, 0.06177694468043449, 0.07275962509661915, 0.06280370586434514, 0.06302895157039035, 0.14523003498152398, 0.13825922383272682, 0.1529579525866015, 0.13482669750117182, 0.12825833648183338, 0.12996613562271853, 0.13596957667968967, 0.13866634802056965, 0.14181777264918016, 0.1877970107110446, 0.2059933958339759, 0.18778110765867562, 0.18423909440575092, 0.20442057691639748, 0.21434167204310128, 0.18306196617252934, 0.18032847666188012, 0.2093218390592254, 0.13419667383887768, 0.11127107332623876, 0.1435598930086862, 0.1544195601768954, 0.13446804342239027, 0.15540734547095914, 0.1436342152287865, 0.14523531369461395, 0.13872059649935253, 0.1772589764772965, 0.1737644081348826, 0.1745481859854806, 0.1883524968487037, 0.16053532389330427, 0.20082924227309773, 0.19867181525111433, 0.20036102930892052, 0.18376192473692932, 0.16039772454899937, 0.16305942916076765, 0.15776613639445458, 0.17490410517549315, 0.15097032142730638, 0.16369038721855045, 0.17506821915530912, 0.16681128311299576, 0.15684613245134837, 0.14963039809629042, 0.15359752858410702, 0.18145661435592408, 0.1656278995768835, 0.16996193858354147, 0.16738149034513894, 0.1888504404243423, 0.13420492623787617, 0.1462470142629716, 0.225041025485063, 0.25927011307119197, 0.12512288158258744, 0.248603058350363, 0.11843991654659025, 0.16631330808353118, 0.18841812590650664, 0.23405860254941402, 0.2783953604459828, 0.1871173961468775, 0.1881321166940807, 0.16880382491553647, 0.1727167061812792, 0.1869610057161586, 0.17576243283516546, 0.1965801419890012, 0.18936987012764617, 0.180298434659956, 0.05981938662988873, 0.07536882642017173, 0.0864947954338231, 0.0700690771293011, 0.0859627260840593, 0.08739576890040457, 0.05510162884713754, 0.06168612795312134, 0.05726234704464772]}, "mutation_prompt": null}
{"id": "d9e186a3-551e-4428-91e6-e98ae2385fb9", "solution": "import numpy as np\n\nclass DynamicEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  # Dynamic parameter adaptation\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicEGWO", "description": "Implement a dynamic parameter adaptation mechanism in the EGWO algorithm to adjust the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.251366727107578, 0.23878376212313324, 0.2841598693170565, 0.2251472392291255, 0.24520379645853918, 0.28458276858389187, 0.2946650243068214, 0.2484392634071364, 0.25314828689798974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03046424855497476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06213365837326923, 0.05240375492006866, 0.06937100258922368, 0.06871562705095091, 0.0574257881493333, 0.0662836876437064, 0.05906659474070597, 0.07926547594196487, 0.06316681221192155, 0.04128485780830582, 0.04022946463012489, 0.051054627134425545, 0.06415611204257021, 0.06647117651497536, 0.06852622353116966, 0.05234500012086685, 0.05833682521535899, 0.05481712269281702, 0.875774133947442, 0.9162614590036159, 0.5822583698295516, 0.9741065877621614, 0.7894561242932201, 0.927368308961065, 0.7117693636654234, 0.8578904781565598, 0.8663062960981534, 0.09515823251116895, 0.07305595031074608, 0.13219729698146243, 0.1624187649101414, 0.12996309850716914, 0.1299454518823442, 0.14027245603205662, 0.13987315390406652, 0.108062622075627, 0.19250971849685627, 0.20040190289053905, 0.1919672503023312, 0.14552448172677546, 0.12359079596190836, 0.14613834936744952, 0.16638578349109578, 0.16847743997685227, 0.1520701398315687, 0.1330742216416151, 0.05890485386501765, 0.07055172770456453, 0.04897876805542911, 0.05350454134400784, 0.014973748205715176, 0.04863325352924208, 0.03446276611087529, 0.07899116700186237, 0.2128708354561608, 0.14921890624407896, 0.13262440028127387, 0.1563073187665054, 0.18182654421045485, 0.10564029128021557, 0.15664520976734253, 0.012961461464513602, 0.1302921425795317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0444532250323435, 0.05034519477509436, 0.05218655759675017, 0.05388151713473577, 0.037423270423919575, 0.04287019198363906, 0.05110330569065136, 0.0756695397757452, 0.050274695618277465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021288855323658762, 9.999999999998899e-05, 0.028524772591609904, 0.004458712101405582, 9.999999999998899e-05, 0.0025027370654792103, 0.027279489317943995, 0.020303039983955884, 0.0238998884130589, 0.2526738342245243, 0.25978489891170775, 0.26858893486842694, 0.22500466835876076, 0.25815453238012287, 0.2679710356858557, 0.269325810455595, 0.25459972875859294, 0.27801666899839883, 0.06995815865316768, 0.0515895027639337, 0.06532379244375675, 0.027958122491678505, 0.08762002010174241, 0.06455844647029518, 0.0646735021952547, 0.07465394071327958, 0.07133239326574203, 0.1784394178965184, 0.13055128526686655, 0.18831824396943664, 0.13538245579449848, 0.14468457662954204, 0.12660120826260024, 0.14941250750800938, 0.16200321050053512, 0.1226021939490205, 0.20797796225066356, 0.19062632838771776, 0.1807662209916303, 0.20908471462474876, 0.20802624091895694, 0.22863455228530938, 0.18368399110385536, 0.20708041710994307, 0.18699871084085795, 0.14263681156844976, 0.1396345943329912, 0.13906127200342622, 0.15101613044658302, 0.15559824319223736, 0.17199794363901078, 0.13073029278814952, 0.154851837737091, 0.1251911001979379, 0.19037486299535455, 0.20240298818798586, 0.17532922095196413, 0.1937147103572333, 0.17727791515976055, 0.19874093799266268, 0.20586379387416653, 0.1838226093171933, 0.20679280171592562, 0.16087831137791675, 0.15989026464240308, 0.16336696270482665, 0.1586539865010571, 0.15957267377140538, 0.1684080698564958, 0.1603503035209456, 0.17925203036117632, 0.16081408484865445, 0.1297304744666108, 0.15794865146203552, 0.1504872515843303, 0.16790919195053555, 0.2626620282988331, 0.2066959186625562, 0.243533872843551, 0.1515739628031515, 0.28924662053838524, 0.133075376525305, 0.19836893366618702, 0.1999287178606347, 0.277337022012053, 0.25427378232875475, 0.21801451800457172, 0.2635265947686486, 0.20913925180673631, 0.26351987138025823, 0.18103613180004974, 0.1727275504684922, 0.1838136727156392, 0.1787987285311945, 0.1885270383432417, 0.1962997306020926, 0.20252267460111006, 0.1777526818713675, 0.188047079326926, 0.05946082524957996, 0.05389029310743154, 0.06606352646983593, 0.0796646525228798, 0.07440614576694082, 0.04405591828901745, 0.06555033945369015, 0.050887907421223066, 0.0655045838045002]}, "mutation_prompt": null}
{"id": "a4ae6172-5f0c-4894-aa98-96497d09981d", "solution": "import numpy as np\n\nclass EnhancedDynamicEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c, rank):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position) * (1 - rank / self.budget), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                rank = np.argsort(fitness).tolist().index(i) + 1\n                if np.random.rand() > 0.5:\n                    positions[i] = update_position(positions[i], best_position, a, c1, rank)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], a, c3, rank)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "EnhancedDynamicEGWO", "description": "Introducing a dynamic scaling factor based on fitness rank to adjust the exploration behavior and improve convergence speed.", "configspace": "", "generation": 9, "fitness": 0.14288365323327024, "feedback": "The algorithm EnhancedDynamicEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.2192999150518834, 0.22052754863808233, 0.24211495198880162, 0.20845813022607496, 0.20201956781800123, 0.18224278681233175, 0.23706203021014316, 0.18915023109545548, 0.21248299512947055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046997404980851254, 0.0501377218843434, 0.04855103809770045, 0.051520726579416976, 0.06800644204212936, 0.06324131132874522, 0.050923314469395686, 0.08571546167187893, 0.06602197569922752, 0.042861004023174054, 0.05729788969124017, 0.06392399175542451, 0.060594500346757396, 0.0394912725103197, 0.04334846247431379, 0.05659043523375784, 0.0507481114272712, 0.05542313585808478, 0.9421037698303931, 0.9452735495878956, 0.9679529936344056, 0.9635638207310665, 0.9800487779264804, 0.8912954867112275, 0.9594629091022823, 0.9668932829078226, 0.9842617875544434, 0.09157463281027722, 0.11056057708783373, 0.06618636383139509, 0.12253865502431749, 0.10983984867348007, 0.1110919674594536, 0.09580063482217915, 0.08880042541806599, 0.07730473238813751, 0.16006023689686733, 0.15956019343486094, 0.16764250035568606, 0.14469099148674758, 0.13171245843786106, 0.14158907156083256, 0.1301092908584487, 0.15494015776172076, 0.1478028582644043, 0.05730045217136681, 0.06190099738141486, 0.05532560008518417, 0.019233265323251758, 0.046841319898516476, 0.021322612830315668, 0.047721721071940504, 0.06718098486148649, 0.005293451087944212, 0.009716184498011371, 0.034440626311521005, 0.12382805132150554, 0.16700657089022786, 0.13447276548446685, 0.1415964590025074, 0.1355859680186453, 0.1397382742421398, 0.11167129894943317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003433400719182744, 9.999999999998899e-05, 0.0708802625262056, 0.019657781528533258, 0.03289469629084596, 0.07506030823936471, 0.08348847971712525, 0.049273201735644534, 0.01333985498939727, 0.03711278442715715, 0.0800523176521789, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015408312740799013, 9.999999999998899e-05, 0.005421595693327119, 0.00047048539809479983, 9.999999999998899e-05, 0.0010395277330524921, 0.006244346733581541, 9.999999999998899e-05, 0.008342223026112539, 0.20687019912550708, 0.2048741870310845, 0.25931804522458546, 0.21985028175089805, 0.2279094176182812, 0.237830112735546, 0.24349788475580147, 0.245067355365852, 0.24553052003090392, 0.051282100592555446, 0.05600377853995653, 0.045417171846476645, 0.057449592868300536, 0.06131241364978213, 0.07333699667031579, 0.0634825293915261, 0.05419454584279304, 0.06708505865037462, 0.13874011266472808, 0.18696213587794341, 0.1615822615157545, 0.11807103462389112, 0.12505616287725863, 0.13834349312442118, 0.1538489384430115, 0.11394283832093621, 0.13238398391722805, 0.1806679646522793, 0.17070016933703958, 0.17791143545933374, 0.2134787803452276, 0.21912044142989862, 0.20908368106521424, 0.19914415166781152, 0.1756579589020657, 0.18643223595772496, 0.13363885140745058, 0.11888162724743778, 0.10457783484543393, 0.1114498284893296, 0.10371656891497605, 0.165763377090697, 0.14113743536587786, 0.09091147549262857, 0.12509876929983332, 0.15330993011586924, 0.15741012481258754, 0.19936069077408924, 0.18141130819679463, 0.2103135006875736, 0.1646748573103185, 0.17806615871148912, 0.18464068976217007, 0.20261533314265467, 0.18066291997314743, 0.16102685166256103, 0.163763916951708, 0.14856367226724032, 0.15727967530567588, 0.15263780920742598, 0.14955700388950877, 0.15490807725362943, 0.15872464585105595, 0.14920469046263773, 0.17817449745897396, 0.1611865381418195, 0.25696356170608714, 0.2046611743486767, 0.17020657768619707, 0.26789594781937665, 0.12273724945003084, 0.16631884079805803, 0.1899462871152242, 0.1549726334350784, 0.15554113327375707, 0.17676229002812793, 0.19664060305798692, 0.16141131472546022, 0.16912829710210475, 0.21253551928137837, 0.22211805374214055, 0.19588167160128878, 0.18887508658339536, 0.18767075355216933, 0.16911235013704085, 0.17869981182806693, 0.18157655083705704, 0.18374755034946988, 0.17904600244155444, 0.18478009295846087, 0.05806798826588111, 0.04853625340291767, 0.06575057983194987, 0.0540573245759588, 0.05852213055566535, 0.06377290319359108, 0.053698474261266727, 0.05409347860584368, 0.055511526334126926]}, "mutation_prompt": null}
{"id": "c12ab048-5d31-41f7-9c9c-34702ae936b1", "solution": "import numpy as np\n\nclass DynamicEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  # Dynamic parameter adaptation\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicEGWO", "description": "Implement a dynamic parameter adaptation mechanism in the EGWO algorithm to adjust the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.251366727107578, 0.23878376212313324, 0.2841598693170565, 0.2251472392291255, 0.24520379645853918, 0.28458276858389187, 0.2946650243068214, 0.2484392634071364, 0.25314828689798974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03046424855497476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06213365837326923, 0.05240375492006866, 0.06937100258922368, 0.06871562705095091, 0.0574257881493333, 0.0662836876437064, 0.05906659474070597, 0.07926547594196487, 0.06316681221192155, 0.04128485780830582, 0.04022946463012489, 0.051054627134425545, 0.06415611204257021, 0.06647117651497536, 0.06852622353116966, 0.05234500012086685, 0.05833682521535899, 0.05481712269281702, 0.875774133947442, 0.9162614590036159, 0.5822583698295516, 0.9741065877621614, 0.7894561242932201, 0.927368308961065, 0.7117693636654234, 0.8578904781565598, 0.8663062960981534, 0.09515823251116895, 0.07305595031074608, 0.13219729698146243, 0.1624187649101414, 0.12996309850716914, 0.1299454518823442, 0.14027245603205662, 0.13987315390406652, 0.108062622075627, 0.19250971849685627, 0.20040190289053905, 0.1919672503023312, 0.14552448172677546, 0.12359079596190836, 0.14613834936744952, 0.16638578349109578, 0.16847743997685227, 0.1520701398315687, 0.1330742216416151, 0.05890485386501765, 0.07055172770456453, 0.04897876805542911, 0.05350454134400784, 0.014973748205715176, 0.04863325352924208, 0.03446276611087529, 0.07899116700186237, 0.2128708354561608, 0.14921890624407896, 0.13262440028127387, 0.1563073187665054, 0.18182654421045485, 0.10564029128021557, 0.15664520976734253, 0.012961461464513602, 0.1302921425795317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0444532250323435, 0.05034519477509436, 0.05218655759675017, 0.05388151713473577, 0.037423270423919575, 0.04287019198363906, 0.05110330569065136, 0.0756695397757452, 0.050274695618277465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021288855323658762, 9.999999999998899e-05, 0.028524772591609904, 0.004458712101405582, 9.999999999998899e-05, 0.0025027370654792103, 0.027279489317943995, 0.020303039983955884, 0.0238998884130589, 0.2526738342245243, 0.25978489891170775, 0.26858893486842694, 0.22500466835876076, 0.25815453238012287, 0.2679710356858557, 0.269325810455595, 0.25459972875859294, 0.27801666899839883, 0.06995815865316768, 0.0515895027639337, 0.06532379244375675, 0.027958122491678505, 0.08762002010174241, 0.06455844647029518, 0.0646735021952547, 0.07465394071327958, 0.07133239326574203, 0.1784394178965184, 0.13055128526686655, 0.18831824396943664, 0.13538245579449848, 0.14468457662954204, 0.12660120826260024, 0.14941250750800938, 0.16200321050053512, 0.1226021939490205, 0.20797796225066356, 0.19062632838771776, 0.1807662209916303, 0.20908471462474876, 0.20802624091895694, 0.22863455228530938, 0.18368399110385536, 0.20708041710994307, 0.18699871084085795, 0.14263681156844976, 0.1396345943329912, 0.13906127200342622, 0.15101613044658302, 0.15559824319223736, 0.17199794363901078, 0.13073029278814952, 0.154851837737091, 0.1251911001979379, 0.19037486299535455, 0.20240298818798586, 0.17532922095196413, 0.1937147103572333, 0.17727791515976055, 0.19874093799266268, 0.20586379387416653, 0.1838226093171933, 0.20679280171592562, 0.16087831137791675, 0.15989026464240308, 0.16336696270482665, 0.1586539865010571, 0.15957267377140538, 0.1684080698564958, 0.1603503035209456, 0.17925203036117632, 0.16081408484865445, 0.1297304744666108, 0.15794865146203552, 0.1504872515843303, 0.16790919195053555, 0.2626620282988331, 0.2066959186625562, 0.243533872843551, 0.1515739628031515, 0.28924662053838524, 0.133075376525305, 0.19836893366618702, 0.1999287178606347, 0.277337022012053, 0.25427378232875475, 0.21801451800457172, 0.2635265947686486, 0.20913925180673631, 0.26351987138025823, 0.18103613180004974, 0.1727275504684922, 0.1838136727156392, 0.1787987285311945, 0.1885270383432417, 0.1962997306020926, 0.20252267460111006, 0.1777526818713675, 0.188047079326926, 0.05946082524957996, 0.05389029310743154, 0.06606352646983593, 0.0796646525228798, 0.07440614576694082, 0.04405591828901745, 0.06555033945369015, 0.050887907421223066, 0.0655045838045002]}, "mutation_prompt": null}
{"id": "2b4a4679-6c32-40f7-9dbb-f0f884b5c2f8", "solution": "import numpy as np\n\nclass DynamicEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  # Dynamic parameter adaptation\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicEGWO", "description": "Implement a dynamic parameter adaptation mechanism in the EGWO algorithm to adjust the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.251366727107578, 0.23878376212313324, 0.2841598693170565, 0.2251472392291255, 0.24520379645853918, 0.28458276858389187, 0.2946650243068214, 0.2484392634071364, 0.25314828689798974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03046424855497476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06213365837326923, 0.05240375492006866, 0.06937100258922368, 0.06871562705095091, 0.0574257881493333, 0.0662836876437064, 0.05906659474070597, 0.07926547594196487, 0.06316681221192155, 0.04128485780830582, 0.04022946463012489, 0.051054627134425545, 0.06415611204257021, 0.06647117651497536, 0.06852622353116966, 0.05234500012086685, 0.05833682521535899, 0.05481712269281702, 0.875774133947442, 0.9162614590036159, 0.5822583698295516, 0.9741065877621614, 0.7894561242932201, 0.927368308961065, 0.7117693636654234, 0.8578904781565598, 0.8663062960981534, 0.09515823251116895, 0.07305595031074608, 0.13219729698146243, 0.1624187649101414, 0.12996309850716914, 0.1299454518823442, 0.14027245603205662, 0.13987315390406652, 0.108062622075627, 0.19250971849685627, 0.20040190289053905, 0.1919672503023312, 0.14552448172677546, 0.12359079596190836, 0.14613834936744952, 0.16638578349109578, 0.16847743997685227, 0.1520701398315687, 0.1330742216416151, 0.05890485386501765, 0.07055172770456453, 0.04897876805542911, 0.05350454134400784, 0.014973748205715176, 0.04863325352924208, 0.03446276611087529, 0.07899116700186237, 0.2128708354561608, 0.14921890624407896, 0.13262440028127387, 0.1563073187665054, 0.18182654421045485, 0.10564029128021557, 0.15664520976734253, 0.012961461464513602, 0.1302921425795317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0444532250323435, 0.05034519477509436, 0.05218655759675017, 0.05388151713473577, 0.037423270423919575, 0.04287019198363906, 0.05110330569065136, 0.0756695397757452, 0.050274695618277465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021288855323658762, 9.999999999998899e-05, 0.028524772591609904, 0.004458712101405582, 9.999999999998899e-05, 0.0025027370654792103, 0.027279489317943995, 0.020303039983955884, 0.0238998884130589, 0.2526738342245243, 0.25978489891170775, 0.26858893486842694, 0.22500466835876076, 0.25815453238012287, 0.2679710356858557, 0.269325810455595, 0.25459972875859294, 0.27801666899839883, 0.06995815865316768, 0.0515895027639337, 0.06532379244375675, 0.027958122491678505, 0.08762002010174241, 0.06455844647029518, 0.0646735021952547, 0.07465394071327958, 0.07133239326574203, 0.1784394178965184, 0.13055128526686655, 0.18831824396943664, 0.13538245579449848, 0.14468457662954204, 0.12660120826260024, 0.14941250750800938, 0.16200321050053512, 0.1226021939490205, 0.20797796225066356, 0.19062632838771776, 0.1807662209916303, 0.20908471462474876, 0.20802624091895694, 0.22863455228530938, 0.18368399110385536, 0.20708041710994307, 0.18699871084085795, 0.14263681156844976, 0.1396345943329912, 0.13906127200342622, 0.15101613044658302, 0.15559824319223736, 0.17199794363901078, 0.13073029278814952, 0.154851837737091, 0.1251911001979379, 0.19037486299535455, 0.20240298818798586, 0.17532922095196413, 0.1937147103572333, 0.17727791515976055, 0.19874093799266268, 0.20586379387416653, 0.1838226093171933, 0.20679280171592562, 0.16087831137791675, 0.15989026464240308, 0.16336696270482665, 0.1586539865010571, 0.15957267377140538, 0.1684080698564958, 0.1603503035209456, 0.17925203036117632, 0.16081408484865445, 0.1297304744666108, 0.15794865146203552, 0.1504872515843303, 0.16790919195053555, 0.2626620282988331, 0.2066959186625562, 0.243533872843551, 0.1515739628031515, 0.28924662053838524, 0.133075376525305, 0.19836893366618702, 0.1999287178606347, 0.277337022012053, 0.25427378232875475, 0.21801451800457172, 0.2635265947686486, 0.20913925180673631, 0.26351987138025823, 0.18103613180004974, 0.1727275504684922, 0.1838136727156392, 0.1787987285311945, 0.1885270383432417, 0.1962997306020926, 0.20252267460111006, 0.1777526818713675, 0.188047079326926, 0.05946082524957996, 0.05389029310743154, 0.06606352646983593, 0.0796646525228798, 0.07440614576694082, 0.04405591828901745, 0.06555033945369015, 0.050887907421223066, 0.0655045838045002]}, "mutation_prompt": null}
{"id": "d35f882b-a7b8-4cf6-93e9-83f108cc9c73", "solution": "import numpy as np\n\nclass DynamicEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  # Dynamic parameter adaptation\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicEGWO", "description": "Implement a dynamic parameter adaptation mechanism in the EGWO algorithm to adjust the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.251366727107578, 0.23878376212313324, 0.2841598693170565, 0.2251472392291255, 0.24520379645853918, 0.28458276858389187, 0.2946650243068214, 0.2484392634071364, 0.25314828689798974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03046424855497476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06213365837326923, 0.05240375492006866, 0.06937100258922368, 0.06871562705095091, 0.0574257881493333, 0.0662836876437064, 0.05906659474070597, 0.07926547594196487, 0.06316681221192155, 0.04128485780830582, 0.04022946463012489, 0.051054627134425545, 0.06415611204257021, 0.06647117651497536, 0.06852622353116966, 0.05234500012086685, 0.05833682521535899, 0.05481712269281702, 0.875774133947442, 0.9162614590036159, 0.5822583698295516, 0.9741065877621614, 0.7894561242932201, 0.927368308961065, 0.7117693636654234, 0.8578904781565598, 0.8663062960981534, 0.09515823251116895, 0.07305595031074608, 0.13219729698146243, 0.1624187649101414, 0.12996309850716914, 0.1299454518823442, 0.14027245603205662, 0.13987315390406652, 0.108062622075627, 0.19250971849685627, 0.20040190289053905, 0.1919672503023312, 0.14552448172677546, 0.12359079596190836, 0.14613834936744952, 0.16638578349109578, 0.16847743997685227, 0.1520701398315687, 0.1330742216416151, 0.05890485386501765, 0.07055172770456453, 0.04897876805542911, 0.05350454134400784, 0.014973748205715176, 0.04863325352924208, 0.03446276611087529, 0.07899116700186237, 0.2128708354561608, 0.14921890624407896, 0.13262440028127387, 0.1563073187665054, 0.18182654421045485, 0.10564029128021557, 0.15664520976734253, 0.012961461464513602, 0.1302921425795317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0444532250323435, 0.05034519477509436, 0.05218655759675017, 0.05388151713473577, 0.037423270423919575, 0.04287019198363906, 0.05110330569065136, 0.0756695397757452, 0.050274695618277465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021288855323658762, 9.999999999998899e-05, 0.028524772591609904, 0.004458712101405582, 9.999999999998899e-05, 0.0025027370654792103, 0.027279489317943995, 0.020303039983955884, 0.0238998884130589, 0.2526738342245243, 0.25978489891170775, 0.26858893486842694, 0.22500466835876076, 0.25815453238012287, 0.2679710356858557, 0.269325810455595, 0.25459972875859294, 0.27801666899839883, 0.06995815865316768, 0.0515895027639337, 0.06532379244375675, 0.027958122491678505, 0.08762002010174241, 0.06455844647029518, 0.0646735021952547, 0.07465394071327958, 0.07133239326574203, 0.1784394178965184, 0.13055128526686655, 0.18831824396943664, 0.13538245579449848, 0.14468457662954204, 0.12660120826260024, 0.14941250750800938, 0.16200321050053512, 0.1226021939490205, 0.20797796225066356, 0.19062632838771776, 0.1807662209916303, 0.20908471462474876, 0.20802624091895694, 0.22863455228530938, 0.18368399110385536, 0.20708041710994307, 0.18699871084085795, 0.14263681156844976, 0.1396345943329912, 0.13906127200342622, 0.15101613044658302, 0.15559824319223736, 0.17199794363901078, 0.13073029278814952, 0.154851837737091, 0.1251911001979379, 0.19037486299535455, 0.20240298818798586, 0.17532922095196413, 0.1937147103572333, 0.17727791515976055, 0.19874093799266268, 0.20586379387416653, 0.1838226093171933, 0.20679280171592562, 0.16087831137791675, 0.15989026464240308, 0.16336696270482665, 0.1586539865010571, 0.15957267377140538, 0.1684080698564958, 0.1603503035209456, 0.17925203036117632, 0.16081408484865445, 0.1297304744666108, 0.15794865146203552, 0.1504872515843303, 0.16790919195053555, 0.2626620282988331, 0.2066959186625562, 0.243533872843551, 0.1515739628031515, 0.28924662053838524, 0.133075376525305, 0.19836893366618702, 0.1999287178606347, 0.277337022012053, 0.25427378232875475, 0.21801451800457172, 0.2635265947686486, 0.20913925180673631, 0.26351987138025823, 0.18103613180004974, 0.1727275504684922, 0.1838136727156392, 0.1787987285311945, 0.1885270383432417, 0.1962997306020926, 0.20252267460111006, 0.1777526818713675, 0.188047079326926, 0.05946082524957996, 0.05389029310743154, 0.06606352646983593, 0.0796646525228798, 0.07440614576694082, 0.04405591828901745, 0.06555033945369015, 0.050887907421223066, 0.0655045838045002]}, "mutation_prompt": null}
{"id": "9d4b6c85-c70c-4abf-822c-81b6ff1e6743", "solution": "import numpy as np\n\nclass DynamicMutatedEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        prev_fitness = np.copy(fitness)\n        fitness_improvement_rate = np.zeros(5)\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  # Dynamic parameter adaptation based on fitness improvement rate\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n                new_fitness = func(positions[i])\n                improvement = (prev_fitness[i] - new_fitness) / prev_fitness[i] if prev_fitness[i] != 0 else 1\n                fitness_improvement_rate[i] = improvement\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n            prev_fitness = np.copy(fitness)\n\n        return best_position", "name": "DynamicMutatedEGWO", "description": "Introduce a dynamic mutation strategy based on the fitness improvement rate to adaptively adjust exploration and exploitation during optimization.", "configspace": "", "generation": 13, "fitness": 0.13453128051335847, "feedback": "The algorithm DynamicMutatedEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.15.", "error": "", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.22615087814512358, 0.21522893308024482, 0.27875985010813087, 0.20815466163673024, 0.2220043028958414, 0.26314518077633453, 0.25830430236866486, 0.22613988042622502, 0.24567608450616396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027507953945496544, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058648605735410864, 0.050752751152260855, 0.04952751259851118, 0.05967321167250117, 0.05356117723972598, 0.052069197870661665, 0.05569167671058206, 0.0663911175154861, 0.05947750885837655, 0.030281207749790484, 0.035170371690000146, 0.04658829491437955, 0.05963919317463262, 0.057284828598032855, 0.05201237160136929, 0.041801307266674526, 0.05296305811231128, 0.04682660226898261, 0.7768992788255574, 0.8499479843514074, 0.2486906905287487, 0.9541657559383291, 0.6215785350442077, 0.8697830552642586, 0.48170501617618566, 0.7446276604263526, 0.7599579788230041, 0.09023820967925766, 0.058418486304061434, 0.10140418734380852, 0.13720100651671074, 0.11607151298229978, 0.10638395421906588, 0.1315507163863927, 0.10773228254662204, 0.09438500067715683, 0.17563788007341552, 0.18827028385293842, 0.17384203640111462, 0.14159531116632174, 0.11425048944709904, 0.13484013065677336, 0.15506876313577922, 0.14868403681069087, 0.14224979752788713, 0.11253336252746571, 0.04759873391511704, 0.055269633276918695, 0.02471943039371416, 0.0358289757286846, 0.006539767434114552, 0.028461213269721508, 0.013977403759600548, 0.05291315262813623, 0.19650824819200696, 0.1368494119791812, 0.12405001870683285, 0.13512731866783856, 0.16684082179290072, 0.09450227607822892, 0.1388908312610847, 0.004274555937013758, 0.11879594435308316, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03193028866472747, 0.03704148391059503, 0.032077695990894384, 0.03646282949143809, 0.018561319686609234, 0.032726940301136764, 0.0447013935858106, 0.059587206048897, 0.03215432378242844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017478507697282875, 9.999999999998899e-05, 0.021732382026154684, 0.004098734553448002, 9.999999999998899e-05, 9.999999999998899e-05, 0.02134087768469617, 0.007639191300754966, 0.022445892428761494, 0.24481523699725538, 0.2443784624527915, 0.24934757843278543, 0.21030343773682147, 0.2517218050179576, 0.2537551569479911, 0.2574640618478715, 0.2514872251120772, 0.2571834656587322, 0.06684491042685037, 0.038764239319993954, 0.060578069862472717, 0.026888134327203495, 0.07497881077804103, 0.059795671702243425, 0.05232690519101235, 0.0632441592507077, 0.055319921989296916, 0.1745574717878683, 0.12207623135021006, 0.17132526491444655, 0.13099164790779994, 0.13817389079251807, 0.12012562199782861, 0.14693609867285318, 0.14067688605059792, 0.11834977294572546, 0.18887442318115444, 0.18045338157559077, 0.16845931492341226, 0.19938336316573013, 0.20115031233048908, 0.2191999913678937, 0.17578091346772984, 0.18321697339830767, 0.17185193098092555, 0.1291396336289905, 0.12775449643533754, 0.12895154803363218, 0.14589837290718788, 0.13827309238043928, 0.1677943602429648, 0.1273962945403, 0.14709576652242673, 0.11371271495654456, 0.17350780082976613, 0.1796603283687349, 0.1631923788855032, 0.16969404136709432, 0.17065600221178134, 0.19626723177658345, 0.20174543623817232, 0.16904586291709134, 0.1859323640705287, 0.1535980628499899, 0.15421969359521903, 0.15768472869968375, 0.14942069564704685, 0.15359800078958274, 0.1634776810551133, 0.15590043387975072, 0.17347416377609004, 0.1583303197500573, 0.12145679821240374, 0.1472682583895828, 0.14262312525308385, 0.16417835197253317, 0.24460844962369854, 0.1709353158045589, 0.21325043184347325, 0.14803333219676496, 0.26491776554649304, 0.12781688446102912, 0.16224754122208618, 0.18903568989646236, 0.2658962932307436, 0.2300690165266428, 0.18548203396227736, 0.23439270855482053, 0.1438464923211089, 0.24533743733812718, 0.17604321148314306, 0.16197205318617414, 0.1809901927271138, 0.17507098906993757, 0.1812078345418029, 0.17639216693192572, 0.1813082985495602, 0.1678557279469446, 0.18172605220525762, 0.05327878948059883, 0.0483470237611604, 0.05960082753254614, 0.07132503858523342, 0.06106756932687363, 0.04119602573909065, 0.06261064110694536, 0.04981673345159765, 0.060177007905461544]}, "mutation_prompt": null}
{"id": "a07d2d27-b046-4e34-b85a-0b2c710fbc1b", "solution": "import numpy as np\n\nclass EnhancedDynamicEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  # Dynamic parameter adaptation\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introducing dynamic local search\n                if np.random.rand() < 0.3:\n                    local_search_point = np.clip(positions[i] + np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    if func(local_search_point) < func(positions[i]):\n                        positions[i] = local_search_point\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "EnhancedDynamicEGWO", "description": "Introduce a dynamic local search mechanism within the algorithm to exploit promising regions more effectively for faster convergence.", "configspace": "", "generation": 14, "fitness": 0.14330957404898345, "feedback": "The algorithm EnhancedDynamicEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.16.", "error": "", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.24263033468094186, 0.22792722377487673, 0.2503476183071761, 0.22859765849073543, 0.21884564721619448, 0.23455446326086016, 0.2154987544748881, 0.2355606698776782, 0.2088837908923371, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014589209413918947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053286361243091274, 0.06560030157818497, 0.07965501406052589, 0.053027190748613284, 0.061499645274500137, 0.054240190455791204, 0.05956717334252948, 0.059163890937011465, 0.07488664135010259, 0.0466534513932394, 0.05371342879331564, 0.06515240960514113, 0.045607183393731376, 0.06405080221766768, 0.06080133713365299, 0.04918815014180711, 0.056229754924970066, 0.05122756382632032, 0.8979705691992635, 0.75967015442063, 0.912072507267964, 0.7967665383233014, 0.8976790592699087, 0.7923302573399282, 0.7411444390918983, 0.9390888783706952, 0.7805276643504099, 0.1460690634797145, 0.13507495712660844, 0.11742139306309796, 0.13793130140533316, 0.11065210820884464, 0.12029959502142318, 0.11813939179314692, 0.11269851660377639, 0.11550867133622122, 0.17564983355318453, 0.19396906485248655, 0.15465716030553178, 0.16892484621895942, 0.1628347180960542, 0.1596603460330358, 0.14701290187192773, 0.18802309623255298, 0.12304480510838989, 0.041833760945646614, 0.08499763790855996, 0.05465846495487714, 0.04793209050288061, 0.06845210502650168, 0.04924456538997424, 0.052477244648144405, 0.019765724587339384, 0.08831007115389389, 0.13540669549893358, 0.15616414497007058, 0.016086380054764926, 0.1065364655091855, 0.11658277756094615, 0.08547900916649065, 0.10644715556431861, 0.10631683207082765, 0.11472844893245127, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053221178469647246, 0.05772316631936247, 0.10722976504023807, 0.0698708610974712, 0.0023707594209714244, 9.999999999998899e-05, 0.07600542476341965, 0.06321410863296895, 0.03729354908150784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015564690825114358, 9.999999999998899e-05, 0.006539470706017125, 0.00302524383157865, 0.024307111476488896, 0.005348488844177934, 0.010412572776204998, 0.010100495594460468, 0.013744189855702471, 0.27018585318630284, 0.228835493746258, 0.24323856938923172, 0.22862407251108374, 0.24426532391785005, 0.22984863484990703, 0.2538988155748302, 0.2610844747793253, 0.2217385140884085, 0.05587495407558185, 0.06973724703417516, 0.06923901618645101, 0.054972817766042126, 0.06405143341084207, 0.08041379421586203, 0.07072058809786808, 0.06889320276322486, 0.07503326158219426, 0.13490355500265871, 0.12087892144277901, 0.1595473439116678, 0.19351321202057847, 0.14200444549282254, 0.16944307202889142, 0.11530125414981118, 0.15876361170974618, 0.13905846935674782, 0.17948142274349588, 0.17891723509404778, 0.1880325814096685, 0.2011598240354049, 0.16663228377662676, 0.2043352842065287, 0.17920650647007952, 0.19085163971860375, 0.21128992268229818, 0.10621491619821699, 0.13352395801282946, 0.12258084643247658, 0.1335004660997392, 0.13031568634316026, 0.12718886697451215, 0.14193469446758156, 0.12235059638747503, 0.1302019916435514, 0.19049347328249944, 0.1675320748962822, 0.1550142823069045, 0.16797524187747026, 0.1745969226646099, 0.15225432796284843, 0.18522633131332422, 0.21571933400506327, 0.17430019037226918, 0.1676230929040583, 0.15164209162878883, 0.15531813773814807, 0.1596526766508587, 0.165986390519282, 0.15974483484452429, 0.1531214614295484, 0.16179614907306494, 0.16622793217231102, 0.1430339407881498, 0.16344084203104814, 0.15559254054387672, 0.17301808467712654, 0.17607698636497204, 0.30938236118295837, 0.1797963272595553, 0.13904322182246165, 0.16502524054345868, 0.16196973244574442, 0.16112740044815765, 0.1782996178976235, 0.20500698307601017, 0.22974455709731678, 0.16634182154890387, 0.2231848078350266, 0.27450820029659107, 0.30305000688533124, 0.1764571937627768, 0.17948790937574122, 0.18527006646017374, 0.19694209802444318, 0.18949359386907294, 0.18277043317400898, 0.17340680084327997, 0.1822267604959673, 0.1893086260277581, 0.05223323235780952, 0.058555238523770425, 0.060592672104147094, 0.07723073221687082, 0.0614106652623444, 0.05725276935260004, 0.06557174545510902, 0.0608731099394727, 0.05612970402624273]}, "mutation_prompt": null}
{"id": "9ac493ed-c937-4eb6-8ff2-effed944fdbc", "solution": "import numpy as np\n\nclass DynamicEGWOEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def local_search(self, position, best, a, c):\n        return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                \n                if np.random.rand() > 0.5:  # Hybridization with local search\n                    local_best = positions[i]\n                    for _ in range(5):\n                        local_best = self.local_search(local_best, best_position, c1, c2)\n                    positions[i] = local_best\n                else:\n                    if np.random.rand() > 0.5:  # Dynamic parameter adaptation\n                        positions[i] = update_position(positions[i], best_position, c1, c2)\n                    else:\n                        positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicEGWOEnhanced", "description": "Introducing a hybridization strategy by incorporating a local search step to exploit promising areas in the search space, enhancing convergence speed.", "configspace": "", "generation": 15, "fitness": 0.14701117539295613, "feedback": "The algorithm DynamicEGWOEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.13.", "error": "", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.2704187194981881, 0.2718703055959032, 0.2817376913870786, 0.22670297364495096, 0.2072667109691042, 0.20719018347944929, 0.2545983645575923, 0.24206412853706827, 0.21529929912216417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09632872053911556, 0.010754317252937073, 0.0018322079990941154, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05112852674417245, 0.06229557142830944, 0.06792688082467391, 0.08419631627907143, 0.08656947562142236, 0.07688285677847029, 0.08540951490058724, 0.07981479909399081, 0.0627502333543285, 0.0656667865181857, 0.06307580019777526, 0.07422159698712383, 0.07181399514077547, 0.07796784245258859, 0.05446994134672822, 0.07118648348752121, 0.07495596031931162, 0.08267430632004558, 0.2602063821203777, 0.9218499812040797, 0.7088553130938487, 0.5987991619562644, 0.3674509045652701, 0.4198181100150499, 0.8075209253618117, 0.777798210750534, 0.6321967407004118, 0.10955538296035205, 0.11744500927147383, 0.11142444642031546, 0.15262238378120163, 0.14156926035559814, 0.14130246853089934, 0.1596316635402778, 0.10617183025255816, 0.12691740388275863, 0.21651081204955036, 0.1560373906850414, 0.13670338641548951, 0.14189003772594355, 0.16270949990249306, 0.14197198182915505, 0.13516482730889312, 0.16670563843804698, 0.16717872785715404, 0.15256184831429798, 0.10751439579548094, 0.12074944237198071, 0.09165735738554937, 0.0699803818256125, 0.07662400765283472, 0.08674111894900582, 0.07899807259665215, 0.06600870420156446, 0.15702354801550278, 0.20825735591567396, 0.1767581003489006, 0.13357721086895402, 0.15782002114672455, 0.1415956879516871, 0.20955853931092183, 0.1298486222549613, 0.15445267023580456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002731679087053629, 9.999999999998899e-05, 0.07916071872072228, 0.09373841112345604, 0.04321531932744782, 0.07314408969910202, 0.05770049979085601, 0.04488235360425119, 0.07854977781481143, 0.07787634295205792, 0.07394146027340776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02423205653502114, 0.015437836293299867, 0.017658800840262168, 0.02584501117354976, 0.020075362357627302, 0.0007824056789078604, 0.010678813542083332, 0.007113193035969023, 0.011285227399346565, 0.25105508421130485, 0.24727615606405184, 0.2824522986893264, 0.2735356038199884, 0.2565629799036384, 0.2562846507717267, 0.27153053254247284, 0.2769797865958902, 0.27788230864938757, 0.0669817591552665, 0.05466478053641477, 0.04771473769174339, 0.07193526457530008, 0.06442852702637358, 0.0813902415952189, 0.08087106854935355, 0.07599465877626099, 0.07394677140358596, 0.14249454590472688, 0.14539679424912644, 0.1574771225720919, 0.13921152963740568, 0.13669026782698235, 0.13844401689447372, 0.12841970656348645, 0.16000836959115927, 0.14219730658279428, 0.18856870785326096, 0.2023508435113024, 0.1689792855439689, 0.23272114886112916, 0.2406744435130782, 0.22174407679661623, 0.2021168419417505, 0.21195330225717401, 0.175449128220593, 0.15906217870671813, 0.13117302920773544, 0.1388524169618588, 0.17682616414607255, 0.20856493819431365, 0.17651091566950305, 0.13828335067569153, 0.14821072559912296, 0.1236884389932249, 0.23444366289761398, 0.23067695324772064, 0.2104275898294954, 0.19583266297372792, 0.1991031395701801, 0.1717427342238398, 0.25338637606160797, 0.21451167092003176, 0.19729810133334247, 0.17128171284663218, 0.16330039889324321, 0.17313325892370834, 0.1671394331507643, 0.1783154584383001, 0.16199816238993459, 0.1643284242300862, 0.1642504140757175, 0.16569852173834276, 0.17726677523101042, 0.17365126980796486, 0.17206229372852044, 0.2635955189935757, 0.16704584704312297, 0.2482335768775692, 0.16004535846769052, 0.16561241118735215, 0.3478078657682868, 0.2552602703321688, 0.18700791120225058, 0.18585099051428955, 0.22343950503432286, 0.14057429961237178, 0.18627755662290402, 0.16454892020453227, 0.31800718201956, 0.22442409733269786, 0.18570929810865833, 0.18593460806619888, 0.18923681808772363, 0.18410845668952447, 0.19166339430513912, 0.18576853158555828, 0.16623401188780973, 0.17946437599654852, 0.17782390458638653, 0.0595651064071997, 0.07041832522693636, 0.06201132726830205, 0.06412645275151552, 0.08623864116784485, 0.06418727026276194, 0.07650101565542178, 0.08532494148970582, 0.06980543683422402]}, "mutation_prompt": null}
{"id": "79dfedcb-d986-4cd8-84f8-14c9082b0ffb", "solution": "import numpy as np\n\nclass DynamicProbabilisticEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() < 0.5 + 0.3 * (self.budget - _) / self.budget:  # Dynamic probabilistic adaptation\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicProbabilisticEGWO", "description": "Introduce a probabilistic mechanism to dynamically adjust the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 16, "fitness": 0.1449272370399491, "feedback": "The algorithm DynamicProbabilisticEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.15.", "error": "", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.271422217015187, 0.2526226691511825, 0.24697877671017165, 0.2311315510238915, 0.2165284219694279, 0.2178222093192842, 0.2078330192074418, 0.31161246616390614, 0.26854483111785066, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05935277996572985, 0.11295490578299072, 0.060300076982779505, 0.06798308338483039, 0.07626336968505143, 0.06915478281415288, 0.07414708683755178, 0.06863400580475698, 0.06779838063589472, 0.0550101088862508, 0.06226780100786733, 0.07552598102689678, 0.061050902062141144, 0.060106540803398834, 0.06223793413206791, 0.0786351065006553, 0.0521978418907183, 0.06965935170276094, 0.861736099796298, 0.6023199039990685, 0.9105832333376774, 0.7091053159176035, 0.7830476516692456, 0.9561376864114921, 0.280643073874312, 0.8326910791809105, 0.7006770099106752, 0.16617150257898117, 0.10976224201071616, 0.13072015298802886, 0.1428611267310318, 0.16388421885213988, 0.10472565287649338, 0.14345994707670706, 0.12283847196913555, 0.10351628427110027, 0.19737783216175409, 0.20604102208220076, 0.21314563402541153, 0.17157583445062574, 0.1559186618459003, 0.1483140182218956, 0.17328257482447884, 0.1631207753658338, 0.14394087160047275, 0.10763559413813595, 0.07180059246104376, 0.056167899820951384, 0.06950903851227574, 0.02241312794962036, 0.040042773754025096, 0.04125334895753607, 0.03767826825120024, 0.06733202982926745, 0.1359661705601829, 0.1483633925359289, 0.15509012100495678, 0.1142796040589974, 0.0493053569871279, 0.16515214281983903, 0.1861524425151201, 0.1818193323300762, 0.2239950455652161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0055449533854160515, 9.999999999998899e-05, 9.999999999998899e-05, 0.029173859773563127, 0.10381730550569668, 0.09490286436226647, 0.06279895443132977, 0.060628251098273744, 0.06477661233243492, 0.07054345298777587, 0.03536055862655596, 0.06796057751363316, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014472169417954706, 0.0006331462927768872, 0.0016792789286710352, 0.00579103559096672, 0.00042391076925196725, 0.020917136817514392, 0.0022157767685774266, 0.014384541594097078, 0.22823472864415417, 0.2753169114741657, 0.2755919598675327, 0.22834039267845807, 0.2580601618516103, 0.23666874507159696, 0.24183119078512072, 0.2729651691285807, 0.23722890349805292, 0.06904495364288465, 0.051426742578738804, 0.05092851304971935, 0.0678076053457527, 0.07411643619590591, 0.03445792966722894, 0.06309742503943194, 0.06934707463095768, 0.06888998152691561, 0.1299948970811523, 0.1436220460789771, 0.1554599616561051, 0.13832093132828704, 0.1252646838823419, 0.16128559971861067, 0.14069459449219734, 0.16468832155583135, 0.1461231485651906, 0.1659475345633309, 0.17459739460350587, 0.18021894745791356, 0.21734083265271764, 0.19053356637185548, 0.20384771917864686, 0.16455523859019472, 0.19428537216670005, 0.2106797521720366, 0.1369205337189423, 0.1121305993804228, 0.10751078956730253, 0.16368129395049713, 0.15507766189672278, 0.13668067719993326, 0.13468852784173502, 0.1499702960969671, 0.13693136800066297, 0.22465837026546076, 0.1696019697351696, 0.1760476998732955, 0.18308826925533372, 0.19406484189204698, 0.19371379163585323, 0.2550148576235223, 0.19834304135787018, 0.2153753669352626, 0.16294511540930146, 0.1693509843009502, 0.16727193922091133, 0.15880240866662954, 0.16927291260307553, 0.16463194231025102, 0.1653630713140577, 0.1828444454403788, 0.1616973359609234, 0.1433208333551078, 0.14928760497627624, 0.16972600489690626, 0.2154635096869939, 0.1953221958714676, 0.26759264369255376, 0.1087042541456179, 0.1130027410141331, 0.21135590007028815, 0.12398408712450404, 0.16094292050605674, 0.15963351006966708, 0.16357869219785992, 0.24416330474138326, 0.13789774234324592, 0.27667189208105725, 0.14110155176335049, 0.2710797276362217, 0.20247998663298106, 0.18923163133731047, 0.17936078401701105, 0.19790132779665948, 0.16948530115200078, 0.17802991019821057, 0.18441916615802867, 0.19910488076477295, 0.1916493631132946, 0.09365752382425985, 0.07003748769665674, 0.06888353675780323, 0.05952360859768124, 0.0601178576987631, 0.06808989722418679, 0.0672751396107466, 0.06219986828899815, 0.06545658747777416]}, "mutation_prompt": null}
{"id": "8c7caba8-8d9e-47e3-ad04-9e96a766f364", "solution": "import numpy as np\n\nclass AdaptiveMutationEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c, fitness_improvement):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position) * fitness_improvement, -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                fitness_improvement = 1 + (fitness[best_idx] - fitness[i]) / np.maximum(1e-10, fitness[i])\n                if np.random.rand() > 0.5:\n                    positions[i] = update_position(positions[i], best_position, c1, c2, fitness_improvement)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3, fitness_improvement)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "AdaptiveMutationEGWO", "description": "Introduce an adaptive mutation mechanism based on the fitness improvement to promote exploration and exploitation dynamically.", "configspace": "", "generation": 17, "fitness": 0.10385125839643863, "feedback": "The algorithm AdaptiveMutationEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.15.", "error": "", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.2692603833555579, 0.24201935114279327, 0.2663907614780425, 0.20956606356858276, 0.2684623182797957, 0.22211949015748, 0.03222514068478122, 0.050684222013999025, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002886593226830714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021853900120540337, 9.999999999998899e-05, 9.999999999998899e-05, 0.08664995699969202, 0.054281474686298625, 0.06328508952159995, 0.06352486588935613, 0.06144979854649535, 0.055774526062687624, 0.011849214522354656, 9.999999999998899e-05, 9.999999999998899e-05, 0.06991859013019364, 0.05260853617351202, 0.04358239510976769, 0.03859483509012096, 0.06698175868210987, 0.0590808992965447, 0.10042292048430501, 0.8232038982528609, 0.8684027772716835, 0.8171383287800952, 0.9277006117881043, 0.9250210328925494, 0.2608704575464472, 0.3501927359967677, 0.843893160745159, 0.037130963626180846, 9.999999999998899e-05, 0.07088804340200949, 0.0740747233847282, 0.01871144940935987, 0.05273281235729521, 0.06355612036710612, 9.999999999998899e-05, 9.999999999998899e-05, 0.21260033400634704, 0.15345858881912278, 0.19851874629233246, 0.14090833783106005, 0.14352383847348593, 0.09942249784339952, 0.1873084473936384, 0.08527275003692669, 0.08264703923814265, 0.07481583268541692, 9.999999999998899e-05, 0.05791178181744139, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007755216193861658, 0.004615760535784608, 0.004422366684613044, 9.999999999998899e-05, 0.17382259928582267, 0.027003683691977476, 0.006346670453231118, 9.999999999998899e-05, 0.08285815340192826, 0.09185388380181136, 0.013919925320033721, 0.05552700571629399, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006741848087468472, 0.02042329695701961, 9.999999999998899e-05, 9.999999999998899e-05, 0.03750070164855246, 0.014829636599137719, 0.05837920814670028, 0.015189539482671877, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00994231656353406, 0.01731332341030356, 0.007515810019688596, 0.0011716950832411088, 0.0013155452516182553, 0.0011579857923590398, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07049561263078763, 0.11082270692999574, 0.15687947825175796, 0.06711180782050574, 0.10861128383112295, 0.07363420060684767, 0.264285278832867, 0.2600670808648793, 0.2748339988595587, 0.0634675925354895, 0.060707351589061376, 0.05802840819902977, 0.048924711282384625, 0.0753035213166049, 0.05724951235334452, 0.03907223049833897, 0.032179868121670396, 0.03554163152257228, 0.13080660228135532, 0.16944816148237063, 0.14181825128166659, 0.09855305120349966, 0.0766937433115078, 0.0765870341065753, 0.15791746897072212, 0.14010087735698884, 0.17275449957724553, 0.12549747927207178, 0.11671627726305178, 0.11618223940393468, 0.18636474561587013, 0.17337877026652837, 0.2231412473646961, 0.16755161072810154, 0.19602074799164604, 0.1910872348731193, 0.09540741317544366, 0.07609302751245106, 0.07832678217118394, 0.16017367469955257, 0.17605546515995973, 0.1317612751589975, 0.12892368144404698, 0.13588324413721453, 0.13522048386831298, 0.0916346253723066, 0.05071847567910681, 0.06804331621272863, 0.1878796263144884, 0.1968475743203557, 0.17146298986837682, 0.1994611649087802, 0.19573860002141397, 0.1871649080945591, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1286426500672293, 0.15024923037329718, 0.1116504809590102, 0.12810569141736627, 0.00018550342584533475, 0.12145616499544465, 0.1578575773093065, 0.15888476783825645, 0.16592979062672708, 0.16228701231774845, 0.17832790693517253, 0.13183948026352887, 0.03391929261879634, 0.056615725614002965, 0.053674301379695866, 0.03600096115587692, 0.03967402848431323, 0.016401521055428026, 0.2659162490209487, 0.13604569863488414, 0.23179305564976838, 0.06672782995155135, 0.07520958155579371, 0.04994743022157477, 0.18009169190516006, 0.17057589261410833, 0.18285997472962257, 0.1872002886605436, 0.1722536651030443, 0.19286422224364896, 0.13683184088444955, 0.13680922636012216, 0.1369047677127443, 0.05383672602147871, 0.06234186984653911, 0.06037679312949784, 0.057211192324654436, 0.06389575540752557, 0.06960646551834893, 0.06623713044122992, 0.06678721473802396, 0.0809143377662005]}, "mutation_prompt": null}
{"id": "f43016cc-c7f8-4767-a4bf-11fbd8b061b2", "solution": "import numpy as np\n\nclass DynamicPopulationSizeEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        num_population = 5  # Initial population size\n        positions = np.random.uniform(-5.0, 5.0, (num_population, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - num_population):\n            a = 2 - 2 * _ / (self.budget - num_population - 1)  # linearly decreasing a value\n            for i in range(num_population):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  # Dynamic parameter adaptation\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n            # Dynamically adjust the population size\n            num_population = min(10, int(5 + 5 * (_ / (self.budget - num_population))))\n            positions = np.vstack((positions, np.random.uniform(-5.0, 5.0, (num_population - len(positions), self.dim)))\n            fitness = np.append(fitness, [func(p) for p in positions[len(positions)-num_population:]])\n\n        return best_position", "name": "DynamicPopulationSizeEGWO", "description": "Introduce a mechanism to dynamically adjust the population size during optimization to improve convergence speed.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 41, 13, '            fitness = np.append(fitness, [func(p) for p in positions[len(positions)-num_population:]])\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 41, 13, '            fitness = np.append(fitness, [func(p) for p in positions[len(positions)-num_population:]])\\n'))", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {}, "mutation_prompt": null}
{"id": "4359c9f9-1121-4aa0-af46-ec0a879609f1", "solution": "import numpy as np\n\nclass FastDynamicEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c, m_rate):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position) * m_rate, -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            m_rate = 1.0 / (1 + np.exp(-10 * (_ - self.budget/2) / self.budget))  # Adaptive mutation rate\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:\n                    positions[i] = update_position(positions[i], best_position, c1, c2, m_rate)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3, m_rate)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "FastDynamicEGWO", "description": "Introduce a novel adaptive mutation strategy that adjusts the mutation rate based on the fitness landscape to improve convergence speed.", "configspace": "", "generation": 19, "fitness": 0.036500660446498585, "feedback": "The algorithm FastDynamicEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.08033266120432003, 0.07755894598759427, 0.08498168890438806, 0.020660615444688446, 0.05836125330655684, 0.02678789246364066, 0.03222514068478122, 0.058376599016977004, 0.0671238205125606, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009664598449733441, 9.999999999998899e-05, 9.999999999998899e-05, 0.007824413650786899, 0.0013066182012347882, 0.009341050605373713, 0.01968165448829773, 0.004189959328754211, 0.0011318729629501423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00012888982790770775, 9.999999999998899e-05, 0.0469652194645972, 0.03378166493598567, 0.04287777107098589, 0.039088515291900494, 0.04687545855643349, 0.034814154772746964, 0.03327721672346584, 0.048986754550083944, 0.03042658756996186, 9.999999999998899e-05, 0.0009171518680305413, 9.999999999998899e-05, 9.999999999998899e-05, 0.00040902041297719016, 0.018265983355113535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03331272837715937, 9.999999999998899e-05, 0.0030015931121595285, 0.013723175738535764, 9.999999999998899e-05, 9.999999999998899e-05, 0.028836291943545644, 9.999999999998899e-05, 0.010247490809527693, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010042068762508016, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006101191525991201, 0.0015140690380474053, 0.033135225303859484, 0.0016016158275129477, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02505973865677169, 0.1075957232456558, 0.14838054695461433, 0.07232960278563438, 0.0886073426321704, 0.045418048310442494, 0.09461470627041313, 0.08586996337697239, 0.11609974833947234, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013197570543277415, 0.006857681968712281, 9.999999999998899e-05, 0.004371167980065205, 0.0291874446939544, 0.09960971042230271, 0.10330475811882589, 0.0923569899495984, 0.09861114112721459, 0.09854742009382411, 0.09256863283858152, 0.12128229927648548, 0.09797209678200358, 0.10557909824513789, 0.10958920124272886, 0.11994658771025513, 0.10907479547372712, 0.10889739802448262, 0.10470819512599205, 0.10272908346203946, 0.11913606553417522, 0.10265944682934858, 0.08628523783208097, 0.05590527859082972, 0.059150716149611204, 0.05209784554212438, 0.04858521572994434, 0.053102011179240294, 0.05089009113515808, 0.06074645114383126, 0.03988806756086327, 0.02080258301465765, 0.10420167423587245, 0.07545402470739104, 0.08399650962151495, 0.11151500583018392, 0.10043533987029818, 0.09858845322125076, 0.12245976138762271, 0.06805302646588773, 0.14578492205062554, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07300173318010961, 0.05667131582768725, 0.060002801372903036, 0.08405249814109772, 0.1207914665021157, 0.03702143651862211, 0.04551224444740143, 0.07623688403605244, 0.06095236341937993, 0.039099853280055163, 0.07216694878007746, 0.021309389022882708, 0.0386466321056288, 0.04439359294675582, 0.045511073114331335, 0.018793841700635472, 0.017044710990728573, 0.0260498422085651, 0.18530321560259777, 0.1784380921021188, 0.17354718118320256, 0.18200340172471052, 0.18077019990327858, 0.1930883333269049, 0.182206426229385, 0.1789342757097716, 0.1866887444930716, 0.03326530025316421, 0.015881760113876986, 0.031019552963379327, 0.011020557816892707, 0.014192650138287521, 0.01457713899907409, 0.011909799370827368, 0.031130357918146778, 0.028828882017791657]}, "mutation_prompt": null}
{"id": "6515e948-b453-4675-bb6e-de19697d8521", "solution": "import numpy as np\n\nclass EnhancedDynamicEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                c4 = 2 * np.random.rand(self.dim)  # Introducing an additional random direction\n                if np.random.rand() > 0.5:  # Dynamic parameter adaptation\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c4)  # Using different directions\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "EnhancedDynamicEGWO", "description": "Improve exploration by introducing multiple search directions per iteration, enhancing diversity in population movement.", "configspace": "", "generation": 20, "fitness": 0.14798668518705427, "feedback": "The algorithm EnhancedDynamicEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.15.", "error": "", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.23771052990596464, 0.24449319428811855, 0.2173697583203087, 0.19965985156360633, 0.1915878799289078, 0.2098552136771229, 0.2529953472904456, 0.22578633497084322, 0.2355953647254435, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020802412005896942, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061938478901594096, 0.059794668155191744, 0.06477314019296121, 0.06915863334012662, 0.07705017117254442, 0.06379118387332106, 0.0646308842861616, 0.07123934472566051, 0.0829722741101876, 0.06295863657177159, 0.061855743374870875, 0.04590405487822824, 0.048355439611799556, 0.05060157190847914, 0.07406571634314241, 0.0748463671426769, 0.05860015843472888, 0.05143076503807842, 0.885588642330556, 0.7146026894658766, 0.4140430931767597, 0.6167736634012511, 0.723322432295836, 0.8116440935540138, 0.7297682135264703, 0.836893185011075, 0.9181875317592813, 0.10330024527301762, 0.09469731396236347, 0.11738722300518256, 0.13975877264780212, 0.1335946654949106, 0.1264012690528039, 0.13483061395141627, 0.14598464972059322, 0.10593607890263557, 0.2084368743869328, 0.20912323063464278, 0.20586358073541733, 0.16712478526035734, 0.16071096428077947, 0.16228792294183403, 0.18379285747702567, 0.15299567057774088, 0.1390396599151773, 0.04279946300520421, 0.10720212541070773, 0.09483232744307624, 0.057576729112423175, 0.042239940352140515, 0.06446306637000432, 0.07476486941118388, 0.07583719801162114, 0.046069659940567886, 0.16515730555675323, 0.12297015828115687, 0.18779561082686314, 0.14977496883581776, 0.1448126178512137, 0.11836071327641606, 0.16806911929231372, 0.1356592924728608, 0.19879894524838626, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009402071176922044, 9.999999999998899e-05, 9.999999999998899e-05, 0.046736330687457084, 0.04636459507758339, 0.0555982455470998, 0.07676321316415602, 0.05151976553347215, 0.02663068562677362, 0.06552655781772632, 0.07364125095051954, 0.06788280204168551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02290585433077208, 0.013702588045702013, 0.007616290514991797, 0.009422220329618702, 0.006600422921886229, 9.999999999998899e-05, 0.017701086919152842, 0.010391057753166066, 0.23464181124207495, 0.2577080026360029, 0.22363080943700597, 0.23881206407813416, 0.24561184624958854, 0.24646580689962294, 0.2631850069733255, 0.24858438665815696, 0.2573496638940026, 0.059603496821807544, 0.05121826776697258, 0.053128638218199686, 0.06053406827494834, 0.06252847500848024, 0.08013429523477589, 0.059092803528508764, 0.07292084595074433, 0.06482000278227729, 0.1349756289880093, 0.14990911644569282, 0.11186433740068769, 0.1420384921935951, 0.1542547115738775, 0.13512237714909736, 0.1501087756951327, 0.14550073105848382, 0.15015074347316637, 0.17937849639812953, 0.19631773097386418, 0.16408682626278603, 0.24003278529701, 0.21889312768315072, 0.19800711594590525, 0.1863028455179434, 0.21525406279200998, 0.1873525104901409, 0.12864360613620718, 0.1374497269104903, 0.1028372274267807, 0.15867371421331355, 0.1410158656575966, 0.16465218006102078, 0.13445819194306563, 0.14119026665186996, 0.13838180350144136, 0.19877007924044687, 0.19072965159424582, 0.19402250488555495, 0.2718689576170441, 0.22529668954607718, 0.19675675876879728, 0.20864887234902119, 0.2147238880548049, 0.23804526318980657, 0.16858693283997095, 0.16293678028519587, 0.15903079769994233, 0.16004597428485745, 0.1609081855769462, 0.1639053593671279, 0.16694635378190692, 0.16295986276094898, 0.16010591338417468, 0.16970396702171475, 0.19456327614372626, 0.15931420949563257, 0.15821807769717633, 0.557645546925454, 0.23478691039319366, 0.18995931067754168, 0.317628631798727, 0.21225224077679927, 0.2212744222175299, 0.16995461289813651, 0.1623263131757856, 0.16486312702366235, 0.19080578227551537, 0.26427435094363183, 0.25154615606365127, 0.15862365327468164, 0.3377933990251618, 0.18660174096326776, 0.1897579947897312, 0.1768455791211594, 0.18171404233275656, 0.16996539447448888, 0.20006017219323435, 0.1870240452486771, 0.17603409502761913, 0.17040304622588942, 0.07917312919776598, 0.06091007983833863, 0.07002963614919222, 0.057720358903294966, 0.05746360636163539, 0.08133195186451503, 0.059951246264409175, 0.06047390926846019, 0.0628156790122637]}, "mutation_prompt": null}
{"id": "a3b066f5-3dba-4c82-b409-c133f5165d99", "solution": "import numpy as np\n\nclass DynamicEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  # Dynamic parameter adaptation\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicEGWO", "description": "Implement a dynamic parameter adaptation mechanism in the EGWO algorithm to adjust the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.251366727107578, 0.23878376212313324, 0.2841598693170565, 0.2251472392291255, 0.24520379645853918, 0.28458276858389187, 0.2946650243068214, 0.2484392634071364, 0.25314828689798974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03046424855497476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06213365837326923, 0.05240375492006866, 0.06937100258922368, 0.06871562705095091, 0.0574257881493333, 0.0662836876437064, 0.05906659474070597, 0.07926547594196487, 0.06316681221192155, 0.04128485780830582, 0.04022946463012489, 0.051054627134425545, 0.06415611204257021, 0.06647117651497536, 0.06852622353116966, 0.05234500012086685, 0.05833682521535899, 0.05481712269281702, 0.875774133947442, 0.9162614590036159, 0.5822583698295516, 0.9741065877621614, 0.7894561242932201, 0.927368308961065, 0.7117693636654234, 0.8578904781565598, 0.8663062960981534, 0.09515823251116895, 0.07305595031074608, 0.13219729698146243, 0.1624187649101414, 0.12996309850716914, 0.1299454518823442, 0.14027245603205662, 0.13987315390406652, 0.108062622075627, 0.19250971849685627, 0.20040190289053905, 0.1919672503023312, 0.14552448172677546, 0.12359079596190836, 0.14613834936744952, 0.16638578349109578, 0.16847743997685227, 0.1520701398315687, 0.1330742216416151, 0.05890485386501765, 0.07055172770456453, 0.04897876805542911, 0.05350454134400784, 0.014973748205715176, 0.04863325352924208, 0.03446276611087529, 0.07899116700186237, 0.2128708354561608, 0.14921890624407896, 0.13262440028127387, 0.1563073187665054, 0.18182654421045485, 0.10564029128021557, 0.15664520976734253, 0.012961461464513602, 0.1302921425795317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0444532250323435, 0.05034519477509436, 0.05218655759675017, 0.05388151713473577, 0.037423270423919575, 0.04287019198363906, 0.05110330569065136, 0.0756695397757452, 0.050274695618277465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021288855323658762, 9.999999999998899e-05, 0.028524772591609904, 0.004458712101405582, 9.999999999998899e-05, 0.0025027370654792103, 0.027279489317943995, 0.020303039983955884, 0.0238998884130589, 0.2526738342245243, 0.25978489891170775, 0.26858893486842694, 0.22500466835876076, 0.25815453238012287, 0.2679710356858557, 0.269325810455595, 0.25459972875859294, 0.27801666899839883, 0.06995815865316768, 0.0515895027639337, 0.06532379244375675, 0.027958122491678505, 0.08762002010174241, 0.06455844647029518, 0.0646735021952547, 0.07465394071327958, 0.07133239326574203, 0.1784394178965184, 0.13055128526686655, 0.18831824396943664, 0.13538245579449848, 0.14468457662954204, 0.12660120826260024, 0.14941250750800938, 0.16200321050053512, 0.1226021939490205, 0.20797796225066356, 0.19062632838771776, 0.1807662209916303, 0.20908471462474876, 0.20802624091895694, 0.22863455228530938, 0.18368399110385536, 0.20708041710994307, 0.18699871084085795, 0.14263681156844976, 0.1396345943329912, 0.13906127200342622, 0.15101613044658302, 0.15559824319223736, 0.17199794363901078, 0.13073029278814952, 0.154851837737091, 0.1251911001979379, 0.19037486299535455, 0.20240298818798586, 0.17532922095196413, 0.1937147103572333, 0.17727791515976055, 0.19874093799266268, 0.20586379387416653, 0.1838226093171933, 0.20679280171592562, 0.16087831137791675, 0.15989026464240308, 0.16336696270482665, 0.1586539865010571, 0.15957267377140538, 0.1684080698564958, 0.1603503035209456, 0.17925203036117632, 0.16081408484865445, 0.1297304744666108, 0.15794865146203552, 0.1504872515843303, 0.16790919195053555, 0.2626620282988331, 0.2066959186625562, 0.243533872843551, 0.1515739628031515, 0.28924662053838524, 0.133075376525305, 0.19836893366618702, 0.1999287178606347, 0.277337022012053, 0.25427378232875475, 0.21801451800457172, 0.2635265947686486, 0.20913925180673631, 0.26351987138025823, 0.18103613180004974, 0.1727275504684922, 0.1838136727156392, 0.1787987285311945, 0.1885270383432417, 0.1962997306020926, 0.20252267460111006, 0.1777526818713675, 0.188047079326926, 0.05946082524957996, 0.05389029310743154, 0.06606352646983593, 0.0796646525228798, 0.07440614576694082, 0.04405591828901745, 0.06555033945369015, 0.050887907421223066, 0.0655045838045002]}, "mutation_prompt": null}
{"id": "ba4177c4-f3fd-4f3c-a4e0-7e334bbc8aa0", "solution": "class DynamicPopSizeEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        population_size = 5  # Initial population size\n        positions = np.random.uniform(-5.0, 5.0, (population_size, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - population_size):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(population_size):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            # Dynamic population size adjustment\n            if np.random.rand() > 0.5 and population_size < 10:\n                population_size += 1\n                positions = np.vstack((positions, np.random.uniform(-5.0, 5.0, (1, self.dim)))\n                fitness = np.append(fitness, func(positions[-1]))\n\n        return best_position", "name": "DynamicPopSizeEGWO", "description": "Introducing a dynamic population size adjustment mechanism to adaptively control the number of search agents during optimization to enhance convergence speed.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 40, 17, '                fitness = np.append(fitness, func(positions[-1]))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 40, 17, '                fitness = np.append(fitness, func(positions[-1]))\\n'))", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {}, "mutation_prompt": null}
{"id": "8e4601ea-e7af-40b1-b31a-6c426e6969f6", "solution": "import numpy as np\n\nclass DynamicEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  # Dynamic parameter adaptation\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicEGWO", "description": "Implement a dynamic parameter adaptation mechanism in the EGWO algorithm to adjust the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.251366727107578, 0.23878376212313324, 0.2841598693170565, 0.2251472392291255, 0.24520379645853918, 0.28458276858389187, 0.2946650243068214, 0.2484392634071364, 0.25314828689798974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03046424855497476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06213365837326923, 0.05240375492006866, 0.06937100258922368, 0.06871562705095091, 0.0574257881493333, 0.0662836876437064, 0.05906659474070597, 0.07926547594196487, 0.06316681221192155, 0.04128485780830582, 0.04022946463012489, 0.051054627134425545, 0.06415611204257021, 0.06647117651497536, 0.06852622353116966, 0.05234500012086685, 0.05833682521535899, 0.05481712269281702, 0.875774133947442, 0.9162614590036159, 0.5822583698295516, 0.9741065877621614, 0.7894561242932201, 0.927368308961065, 0.7117693636654234, 0.8578904781565598, 0.8663062960981534, 0.09515823251116895, 0.07305595031074608, 0.13219729698146243, 0.1624187649101414, 0.12996309850716914, 0.1299454518823442, 0.14027245603205662, 0.13987315390406652, 0.108062622075627, 0.19250971849685627, 0.20040190289053905, 0.1919672503023312, 0.14552448172677546, 0.12359079596190836, 0.14613834936744952, 0.16638578349109578, 0.16847743997685227, 0.1520701398315687, 0.1330742216416151, 0.05890485386501765, 0.07055172770456453, 0.04897876805542911, 0.05350454134400784, 0.014973748205715176, 0.04863325352924208, 0.03446276611087529, 0.07899116700186237, 0.2128708354561608, 0.14921890624407896, 0.13262440028127387, 0.1563073187665054, 0.18182654421045485, 0.10564029128021557, 0.15664520976734253, 0.012961461464513602, 0.1302921425795317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0444532250323435, 0.05034519477509436, 0.05218655759675017, 0.05388151713473577, 0.037423270423919575, 0.04287019198363906, 0.05110330569065136, 0.0756695397757452, 0.050274695618277465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021288855323658762, 9.999999999998899e-05, 0.028524772591609904, 0.004458712101405582, 9.999999999998899e-05, 0.0025027370654792103, 0.027279489317943995, 0.020303039983955884, 0.0238998884130589, 0.2526738342245243, 0.25978489891170775, 0.26858893486842694, 0.22500466835876076, 0.25815453238012287, 0.2679710356858557, 0.269325810455595, 0.25459972875859294, 0.27801666899839883, 0.06995815865316768, 0.0515895027639337, 0.06532379244375675, 0.027958122491678505, 0.08762002010174241, 0.06455844647029518, 0.0646735021952547, 0.07465394071327958, 0.07133239326574203, 0.1784394178965184, 0.13055128526686655, 0.18831824396943664, 0.13538245579449848, 0.14468457662954204, 0.12660120826260024, 0.14941250750800938, 0.16200321050053512, 0.1226021939490205, 0.20797796225066356, 0.19062632838771776, 0.1807662209916303, 0.20908471462474876, 0.20802624091895694, 0.22863455228530938, 0.18368399110385536, 0.20708041710994307, 0.18699871084085795, 0.14263681156844976, 0.1396345943329912, 0.13906127200342622, 0.15101613044658302, 0.15559824319223736, 0.17199794363901078, 0.13073029278814952, 0.154851837737091, 0.1251911001979379, 0.19037486299535455, 0.20240298818798586, 0.17532922095196413, 0.1937147103572333, 0.17727791515976055, 0.19874093799266268, 0.20586379387416653, 0.1838226093171933, 0.20679280171592562, 0.16087831137791675, 0.15989026464240308, 0.16336696270482665, 0.1586539865010571, 0.15957267377140538, 0.1684080698564958, 0.1603503035209456, 0.17925203036117632, 0.16081408484865445, 0.1297304744666108, 0.15794865146203552, 0.1504872515843303, 0.16790919195053555, 0.2626620282988331, 0.2066959186625562, 0.243533872843551, 0.1515739628031515, 0.28924662053838524, 0.133075376525305, 0.19836893366618702, 0.1999287178606347, 0.277337022012053, 0.25427378232875475, 0.21801451800457172, 0.2635265947686486, 0.20913925180673631, 0.26351987138025823, 0.18103613180004974, 0.1727275504684922, 0.1838136727156392, 0.1787987285311945, 0.1885270383432417, 0.1962997306020926, 0.20252267460111006, 0.1777526818713675, 0.188047079326926, 0.05946082524957996, 0.05389029310743154, 0.06606352646983593, 0.0796646525228798, 0.07440614576694082, 0.04405591828901745, 0.06555033945369015, 0.050887907421223066, 0.0655045838045002]}, "mutation_prompt": null}
{"id": "1a82f466-0403-42e4-a7f4-f4d3ee7b84a2", "solution": "import numpy as np\n\nclass DynamicEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  # Dynamic parameter adaptation\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicEGWO", "description": "Implement a dynamic parameter adaptation mechanism in the EGWO algorithm to adjust the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.251366727107578, 0.23878376212313324, 0.2841598693170565, 0.2251472392291255, 0.24520379645853918, 0.28458276858389187, 0.2946650243068214, 0.2484392634071364, 0.25314828689798974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03046424855497476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06213365837326923, 0.05240375492006866, 0.06937100258922368, 0.06871562705095091, 0.0574257881493333, 0.0662836876437064, 0.05906659474070597, 0.07926547594196487, 0.06316681221192155, 0.04128485780830582, 0.04022946463012489, 0.051054627134425545, 0.06415611204257021, 0.06647117651497536, 0.06852622353116966, 0.05234500012086685, 0.05833682521535899, 0.05481712269281702, 0.875774133947442, 0.9162614590036159, 0.5822583698295516, 0.9741065877621614, 0.7894561242932201, 0.927368308961065, 0.7117693636654234, 0.8578904781565598, 0.8663062960981534, 0.09515823251116895, 0.07305595031074608, 0.13219729698146243, 0.1624187649101414, 0.12996309850716914, 0.1299454518823442, 0.14027245603205662, 0.13987315390406652, 0.108062622075627, 0.19250971849685627, 0.20040190289053905, 0.1919672503023312, 0.14552448172677546, 0.12359079596190836, 0.14613834936744952, 0.16638578349109578, 0.16847743997685227, 0.1520701398315687, 0.1330742216416151, 0.05890485386501765, 0.07055172770456453, 0.04897876805542911, 0.05350454134400784, 0.014973748205715176, 0.04863325352924208, 0.03446276611087529, 0.07899116700186237, 0.2128708354561608, 0.14921890624407896, 0.13262440028127387, 0.1563073187665054, 0.18182654421045485, 0.10564029128021557, 0.15664520976734253, 0.012961461464513602, 0.1302921425795317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0444532250323435, 0.05034519477509436, 0.05218655759675017, 0.05388151713473577, 0.037423270423919575, 0.04287019198363906, 0.05110330569065136, 0.0756695397757452, 0.050274695618277465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021288855323658762, 9.999999999998899e-05, 0.028524772591609904, 0.004458712101405582, 9.999999999998899e-05, 0.0025027370654792103, 0.027279489317943995, 0.020303039983955884, 0.0238998884130589, 0.2526738342245243, 0.25978489891170775, 0.26858893486842694, 0.22500466835876076, 0.25815453238012287, 0.2679710356858557, 0.269325810455595, 0.25459972875859294, 0.27801666899839883, 0.06995815865316768, 0.0515895027639337, 0.06532379244375675, 0.027958122491678505, 0.08762002010174241, 0.06455844647029518, 0.0646735021952547, 0.07465394071327958, 0.07133239326574203, 0.1784394178965184, 0.13055128526686655, 0.18831824396943664, 0.13538245579449848, 0.14468457662954204, 0.12660120826260024, 0.14941250750800938, 0.16200321050053512, 0.1226021939490205, 0.20797796225066356, 0.19062632838771776, 0.1807662209916303, 0.20908471462474876, 0.20802624091895694, 0.22863455228530938, 0.18368399110385536, 0.20708041710994307, 0.18699871084085795, 0.14263681156844976, 0.1396345943329912, 0.13906127200342622, 0.15101613044658302, 0.15559824319223736, 0.17199794363901078, 0.13073029278814952, 0.154851837737091, 0.1251911001979379, 0.19037486299535455, 0.20240298818798586, 0.17532922095196413, 0.1937147103572333, 0.17727791515976055, 0.19874093799266268, 0.20586379387416653, 0.1838226093171933, 0.20679280171592562, 0.16087831137791675, 0.15989026464240308, 0.16336696270482665, 0.1586539865010571, 0.15957267377140538, 0.1684080698564958, 0.1603503035209456, 0.17925203036117632, 0.16081408484865445, 0.1297304744666108, 0.15794865146203552, 0.1504872515843303, 0.16790919195053555, 0.2626620282988331, 0.2066959186625562, 0.243533872843551, 0.1515739628031515, 0.28924662053838524, 0.133075376525305, 0.19836893366618702, 0.1999287178606347, 0.277337022012053, 0.25427378232875475, 0.21801451800457172, 0.2635265947686486, 0.20913925180673631, 0.26351987138025823, 0.18103613180004974, 0.1727275504684922, 0.1838136727156392, 0.1787987285311945, 0.1885270383432417, 0.1962997306020926, 0.20252267460111006, 0.1777526818713675, 0.188047079326926, 0.05946082524957996, 0.05389029310743154, 0.06606352646983593, 0.0796646525228798, 0.07440614576694082, 0.04405591828901745, 0.06555033945369015, 0.050887907421223066, 0.0655045838045002]}, "mutation_prompt": null}
{"id": "9fcd949b-4ae3-4f19-a9f9-9f015693bf6a", "solution": "import numpy as np\n\nclass DynamicEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  # Dynamic parameter adaptation\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicEGWO", "description": "Implement a dynamic parameter adaptation mechanism in the EGWO algorithm to adjust the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.251366727107578, 0.23878376212313324, 0.2841598693170565, 0.2251472392291255, 0.24520379645853918, 0.28458276858389187, 0.2946650243068214, 0.2484392634071364, 0.25314828689798974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03046424855497476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06213365837326923, 0.05240375492006866, 0.06937100258922368, 0.06871562705095091, 0.0574257881493333, 0.0662836876437064, 0.05906659474070597, 0.07926547594196487, 0.06316681221192155, 0.04128485780830582, 0.04022946463012489, 0.051054627134425545, 0.06415611204257021, 0.06647117651497536, 0.06852622353116966, 0.05234500012086685, 0.05833682521535899, 0.05481712269281702, 0.875774133947442, 0.9162614590036159, 0.5822583698295516, 0.9741065877621614, 0.7894561242932201, 0.927368308961065, 0.7117693636654234, 0.8578904781565598, 0.8663062960981534, 0.09515823251116895, 0.07305595031074608, 0.13219729698146243, 0.1624187649101414, 0.12996309850716914, 0.1299454518823442, 0.14027245603205662, 0.13987315390406652, 0.108062622075627, 0.19250971849685627, 0.20040190289053905, 0.1919672503023312, 0.14552448172677546, 0.12359079596190836, 0.14613834936744952, 0.16638578349109578, 0.16847743997685227, 0.1520701398315687, 0.1330742216416151, 0.05890485386501765, 0.07055172770456453, 0.04897876805542911, 0.05350454134400784, 0.014973748205715176, 0.04863325352924208, 0.03446276611087529, 0.07899116700186237, 0.2128708354561608, 0.14921890624407896, 0.13262440028127387, 0.1563073187665054, 0.18182654421045485, 0.10564029128021557, 0.15664520976734253, 0.012961461464513602, 0.1302921425795317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0444532250323435, 0.05034519477509436, 0.05218655759675017, 0.05388151713473577, 0.037423270423919575, 0.04287019198363906, 0.05110330569065136, 0.0756695397757452, 0.050274695618277465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021288855323658762, 9.999999999998899e-05, 0.028524772591609904, 0.004458712101405582, 9.999999999998899e-05, 0.0025027370654792103, 0.027279489317943995, 0.020303039983955884, 0.0238998884130589, 0.2526738342245243, 0.25978489891170775, 0.26858893486842694, 0.22500466835876076, 0.25815453238012287, 0.2679710356858557, 0.269325810455595, 0.25459972875859294, 0.27801666899839883, 0.06995815865316768, 0.0515895027639337, 0.06532379244375675, 0.027958122491678505, 0.08762002010174241, 0.06455844647029518, 0.0646735021952547, 0.07465394071327958, 0.07133239326574203, 0.1784394178965184, 0.13055128526686655, 0.18831824396943664, 0.13538245579449848, 0.14468457662954204, 0.12660120826260024, 0.14941250750800938, 0.16200321050053512, 0.1226021939490205, 0.20797796225066356, 0.19062632838771776, 0.1807662209916303, 0.20908471462474876, 0.20802624091895694, 0.22863455228530938, 0.18368399110385536, 0.20708041710994307, 0.18699871084085795, 0.14263681156844976, 0.1396345943329912, 0.13906127200342622, 0.15101613044658302, 0.15559824319223736, 0.17199794363901078, 0.13073029278814952, 0.154851837737091, 0.1251911001979379, 0.19037486299535455, 0.20240298818798586, 0.17532922095196413, 0.1937147103572333, 0.17727791515976055, 0.19874093799266268, 0.20586379387416653, 0.1838226093171933, 0.20679280171592562, 0.16087831137791675, 0.15989026464240308, 0.16336696270482665, 0.1586539865010571, 0.15957267377140538, 0.1684080698564958, 0.1603503035209456, 0.17925203036117632, 0.16081408484865445, 0.1297304744666108, 0.15794865146203552, 0.1504872515843303, 0.16790919195053555, 0.2626620282988331, 0.2066959186625562, 0.243533872843551, 0.1515739628031515, 0.28924662053838524, 0.133075376525305, 0.19836893366618702, 0.1999287178606347, 0.277337022012053, 0.25427378232875475, 0.21801451800457172, 0.2635265947686486, 0.20913925180673631, 0.26351987138025823, 0.18103613180004974, 0.1727275504684922, 0.1838136727156392, 0.1787987285311945, 0.1885270383432417, 0.1962997306020926, 0.20252267460111006, 0.1777526818713675, 0.188047079326926, 0.05946082524957996, 0.05389029310743154, 0.06606352646983593, 0.0796646525228798, 0.07440614576694082, 0.04405591828901745, 0.06555033945369015, 0.050887907421223066, 0.0655045838045002]}, "mutation_prompt": null}
{"id": "f4edf82a-9276-41af-997e-2eb00532ef81", "solution": "import numpy as np\n\nclass DynamicEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  # Dynamic parameter adaptation\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicEGWO", "description": "Implement a dynamic parameter adaptation mechanism in the EGWO algorithm to adjust the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.251366727107578, 0.23878376212313324, 0.2841598693170565, 0.2251472392291255, 0.24520379645853918, 0.28458276858389187, 0.2946650243068214, 0.2484392634071364, 0.25314828689798974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03046424855497476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06213365837326923, 0.05240375492006866, 0.06937100258922368, 0.06871562705095091, 0.0574257881493333, 0.0662836876437064, 0.05906659474070597, 0.07926547594196487, 0.06316681221192155, 0.04128485780830582, 0.04022946463012489, 0.051054627134425545, 0.06415611204257021, 0.06647117651497536, 0.06852622353116966, 0.05234500012086685, 0.05833682521535899, 0.05481712269281702, 0.875774133947442, 0.9162614590036159, 0.5822583698295516, 0.9741065877621614, 0.7894561242932201, 0.927368308961065, 0.7117693636654234, 0.8578904781565598, 0.8663062960981534, 0.09515823251116895, 0.07305595031074608, 0.13219729698146243, 0.1624187649101414, 0.12996309850716914, 0.1299454518823442, 0.14027245603205662, 0.13987315390406652, 0.108062622075627, 0.19250971849685627, 0.20040190289053905, 0.1919672503023312, 0.14552448172677546, 0.12359079596190836, 0.14613834936744952, 0.16638578349109578, 0.16847743997685227, 0.1520701398315687, 0.1330742216416151, 0.05890485386501765, 0.07055172770456453, 0.04897876805542911, 0.05350454134400784, 0.014973748205715176, 0.04863325352924208, 0.03446276611087529, 0.07899116700186237, 0.2128708354561608, 0.14921890624407896, 0.13262440028127387, 0.1563073187665054, 0.18182654421045485, 0.10564029128021557, 0.15664520976734253, 0.012961461464513602, 0.1302921425795317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0444532250323435, 0.05034519477509436, 0.05218655759675017, 0.05388151713473577, 0.037423270423919575, 0.04287019198363906, 0.05110330569065136, 0.0756695397757452, 0.050274695618277465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021288855323658762, 9.999999999998899e-05, 0.028524772591609904, 0.004458712101405582, 9.999999999998899e-05, 0.0025027370654792103, 0.027279489317943995, 0.020303039983955884, 0.0238998884130589, 0.2526738342245243, 0.25978489891170775, 0.26858893486842694, 0.22500466835876076, 0.25815453238012287, 0.2679710356858557, 0.269325810455595, 0.25459972875859294, 0.27801666899839883, 0.06995815865316768, 0.0515895027639337, 0.06532379244375675, 0.027958122491678505, 0.08762002010174241, 0.06455844647029518, 0.0646735021952547, 0.07465394071327958, 0.07133239326574203, 0.1784394178965184, 0.13055128526686655, 0.18831824396943664, 0.13538245579449848, 0.14468457662954204, 0.12660120826260024, 0.14941250750800938, 0.16200321050053512, 0.1226021939490205, 0.20797796225066356, 0.19062632838771776, 0.1807662209916303, 0.20908471462474876, 0.20802624091895694, 0.22863455228530938, 0.18368399110385536, 0.20708041710994307, 0.18699871084085795, 0.14263681156844976, 0.1396345943329912, 0.13906127200342622, 0.15101613044658302, 0.15559824319223736, 0.17199794363901078, 0.13073029278814952, 0.154851837737091, 0.1251911001979379, 0.19037486299535455, 0.20240298818798586, 0.17532922095196413, 0.1937147103572333, 0.17727791515976055, 0.19874093799266268, 0.20586379387416653, 0.1838226093171933, 0.20679280171592562, 0.16087831137791675, 0.15989026464240308, 0.16336696270482665, 0.1586539865010571, 0.15957267377140538, 0.1684080698564958, 0.1603503035209456, 0.17925203036117632, 0.16081408484865445, 0.1297304744666108, 0.15794865146203552, 0.1504872515843303, 0.16790919195053555, 0.2626620282988331, 0.2066959186625562, 0.243533872843551, 0.1515739628031515, 0.28924662053838524, 0.133075376525305, 0.19836893366618702, 0.1999287178606347, 0.277337022012053, 0.25427378232875475, 0.21801451800457172, 0.2635265947686486, 0.20913925180673631, 0.26351987138025823, 0.18103613180004974, 0.1727275504684922, 0.1838136727156392, 0.1787987285311945, 0.1885270383432417, 0.1962997306020926, 0.20252267460111006, 0.1777526818713675, 0.188047079326926, 0.05946082524957996, 0.05389029310743154, 0.06606352646983593, 0.0796646525228798, 0.07440614576694082, 0.04405591828901745, 0.06555033945369015, 0.050887907421223066, 0.0655045838045002]}, "mutation_prompt": null}
{"id": "2acc3524-0136-44a7-92e6-ed7c060a8e29", "solution": "import numpy as np\n\nclass DynamicEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  # Dynamic parameter adaptation\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicEGWO", "description": "Implement a dynamic parameter adaptation mechanism in the EGWO algorithm to adjust the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.251366727107578, 0.23878376212313324, 0.2841598693170565, 0.2251472392291255, 0.24520379645853918, 0.28458276858389187, 0.2946650243068214, 0.2484392634071364, 0.25314828689798974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03046424855497476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06213365837326923, 0.05240375492006866, 0.06937100258922368, 0.06871562705095091, 0.0574257881493333, 0.0662836876437064, 0.05906659474070597, 0.07926547594196487, 0.06316681221192155, 0.04128485780830582, 0.04022946463012489, 0.051054627134425545, 0.06415611204257021, 0.06647117651497536, 0.06852622353116966, 0.05234500012086685, 0.05833682521535899, 0.05481712269281702, 0.875774133947442, 0.9162614590036159, 0.5822583698295516, 0.9741065877621614, 0.7894561242932201, 0.927368308961065, 0.7117693636654234, 0.8578904781565598, 0.8663062960981534, 0.09515823251116895, 0.07305595031074608, 0.13219729698146243, 0.1624187649101414, 0.12996309850716914, 0.1299454518823442, 0.14027245603205662, 0.13987315390406652, 0.108062622075627, 0.19250971849685627, 0.20040190289053905, 0.1919672503023312, 0.14552448172677546, 0.12359079596190836, 0.14613834936744952, 0.16638578349109578, 0.16847743997685227, 0.1520701398315687, 0.1330742216416151, 0.05890485386501765, 0.07055172770456453, 0.04897876805542911, 0.05350454134400784, 0.014973748205715176, 0.04863325352924208, 0.03446276611087529, 0.07899116700186237, 0.2128708354561608, 0.14921890624407896, 0.13262440028127387, 0.1563073187665054, 0.18182654421045485, 0.10564029128021557, 0.15664520976734253, 0.012961461464513602, 0.1302921425795317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0444532250323435, 0.05034519477509436, 0.05218655759675017, 0.05388151713473577, 0.037423270423919575, 0.04287019198363906, 0.05110330569065136, 0.0756695397757452, 0.050274695618277465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021288855323658762, 9.999999999998899e-05, 0.028524772591609904, 0.004458712101405582, 9.999999999998899e-05, 0.0025027370654792103, 0.027279489317943995, 0.020303039983955884, 0.0238998884130589, 0.2526738342245243, 0.25978489891170775, 0.26858893486842694, 0.22500466835876076, 0.25815453238012287, 0.2679710356858557, 0.269325810455595, 0.25459972875859294, 0.27801666899839883, 0.06995815865316768, 0.0515895027639337, 0.06532379244375675, 0.027958122491678505, 0.08762002010174241, 0.06455844647029518, 0.0646735021952547, 0.07465394071327958, 0.07133239326574203, 0.1784394178965184, 0.13055128526686655, 0.18831824396943664, 0.13538245579449848, 0.14468457662954204, 0.12660120826260024, 0.14941250750800938, 0.16200321050053512, 0.1226021939490205, 0.20797796225066356, 0.19062632838771776, 0.1807662209916303, 0.20908471462474876, 0.20802624091895694, 0.22863455228530938, 0.18368399110385536, 0.20708041710994307, 0.18699871084085795, 0.14263681156844976, 0.1396345943329912, 0.13906127200342622, 0.15101613044658302, 0.15559824319223736, 0.17199794363901078, 0.13073029278814952, 0.154851837737091, 0.1251911001979379, 0.19037486299535455, 0.20240298818798586, 0.17532922095196413, 0.1937147103572333, 0.17727791515976055, 0.19874093799266268, 0.20586379387416653, 0.1838226093171933, 0.20679280171592562, 0.16087831137791675, 0.15989026464240308, 0.16336696270482665, 0.1586539865010571, 0.15957267377140538, 0.1684080698564958, 0.1603503035209456, 0.17925203036117632, 0.16081408484865445, 0.1297304744666108, 0.15794865146203552, 0.1504872515843303, 0.16790919195053555, 0.2626620282988331, 0.2066959186625562, 0.243533872843551, 0.1515739628031515, 0.28924662053838524, 0.133075376525305, 0.19836893366618702, 0.1999287178606347, 0.277337022012053, 0.25427378232875475, 0.21801451800457172, 0.2635265947686486, 0.20913925180673631, 0.26351987138025823, 0.18103613180004974, 0.1727275504684922, 0.1838136727156392, 0.1787987285311945, 0.1885270383432417, 0.1962997306020926, 0.20252267460111006, 0.1777526818713675, 0.188047079326926, 0.05946082524957996, 0.05389029310743154, 0.06606352646983593, 0.0796646525228798, 0.07440614576694082, 0.04405591828901745, 0.06555033945369015, 0.050887907421223066, 0.0655045838045002]}, "mutation_prompt": null}
{"id": "973888c5-86e9-4cb3-bb05-461de077c388", "solution": "class EnhancedDynamicEGWO(DynamicEGWO):\n    def __call__(self, func):\n        def update_position(position, best, a, c, w):\n            return np.clip(position + a * w * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        w = 0.9  # Initial inertia weight\n        \n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            w = 0.4 + 0.5 * np.exp(-0.01 * _)  # Dynamic inertia weight updating\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  # Dynamic parameter adaptation\n                    positions[i] = update_position(positions[i], best_position, c1, c2, w)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3, w)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n        \n        return best_position", "name": "EnhancedDynamicEGWO", "description": "Introduce a dynamic inertia weight updating mechanism to adjust the impact of previous velocities on the particle movements, enhancing convergence speed.", "configspace": "", "generation": 28, "fitness": 0.12365140863978598, "feedback": "The algorithm EnhancedDynamicEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.2743637640074388, 0.26276446087000727, 0.2620145175185229, 0.24448701100176196, 0.17678500228691696, 0.2276811040092973, 0.26749697977595543, 0.25598599851140214, 0.24007787221831656, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013948924032118115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07153413269643027, 0.04920152025928126, 0.0839067251298915, 0.0953126433623176, 0.060654944229550756, 0.07095019941574099, 0.0821026674801888, 0.06802787410410382, 0.05979928201362439, 0.05258171424511471, 0.05959535156163187, 0.0516395139550756, 0.08304745257256396, 0.05629664065707651, 0.06379346131508845, 0.023604340820983616, 0.07918686227303406, 0.062318096952814095, 0.23833570654828284, 0.577982156418869, 0.13504922554204912, 0.23948082498089251, 0.17722888160392836, 0.13994672729819613, 0.21205577579947166, 0.24389112737193908, 0.13367110757069023, 0.12317993334392285, 0.08201064916932155, 0.06431200955886685, 0.11614953810433037, 0.10630273111707378, 0.11672374465712221, 0.15163933167223453, 0.08424582327391794, 0.0878897361428077, 0.18474220191950386, 0.12574780787081308, 0.21339704891146272, 0.17167885864641175, 0.16168798844872057, 0.16483385031052644, 0.1440517410588833, 0.16421817029689556, 0.14430237184005967, 0.12706137384217908, 0.03484825235570077, 0.08238371337776462, 0.03181342629362438, 0.047974649444600614, 9.999999999998899e-05, 0.02301869342796803, 0.06406582988647536, 0.09293652446790146, 0.12757892466458232, 0.16021682729910658, 0.10852089596308867, 0.1478069978416564, 0.11501855490024604, 0.14367492559936001, 0.1510097657858449, 0.010752804606713684, 0.12618137498766613, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07052791598493569, 0.08120115600477784, 0.05493638917079391, 0.05506086787805087, 0.0398151182827281, 0.05583253214452266, 0.07404967923985828, 0.04734904325720868, 0.08164166643882997, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006465368362788104, 0.01188052678465068, 0.024414528445639738, 9.999999999998899e-05, 0.007904884199309015, 0.01612204067162515, 0.009893539348723612, 0.016955055341737357, 0.013863662030708435, 0.26686106827160094, 0.2590956820851382, 0.2740142385918509, 0.29783265469710163, 0.26500155213803356, 0.2559289176620021, 0.24173160395628113, 0.2185644014419521, 0.29587820883208427, 0.044100874084677, 0.05462229486618286, 0.06962025894647483, 0.06000086443277852, 0.08525452690365687, 0.08998220879829766, 0.06707465989629857, 0.07125401409779097, 0.077723227159329, 0.14172959408182761, 0.12316051735980238, 0.13171013809481624, 0.14329473434672924, 0.1313045814827336, 0.16578540154065124, 0.14695335891746075, 0.127664048967162, 0.1271049843340204, 0.16560102151755585, 0.17457407849042605, 0.19112890987130582, 0.21220589270280255, 0.20890037890540325, 0.23737026180827692, 0.20348678989184388, 0.181265919008623, 0.19288193489268957, 0.1044100245188958, 0.13465572354418764, 0.13915347240032117, 0.12978281728455732, 0.1479296318037424, 0.17297744736469645, 0.14819990765387825, 0.14215942875741727, 0.14872588929824992, 0.19398791390608694, 0.1751868054988156, 0.23001960309652036, 0.16967283271645972, 0.18666500891425652, 0.19672922396076475, 0.19541078849165328, 0.18766978500354048, 0.17441839135209358, 0.16038851863200398, 0.16761071714839637, 0.16998539620337594, 0.1554761820663747, 0.16793313093448292, 0.16648404412279105, 0.16669399042849198, 0.1657694818787191, 0.17254698598295015, 0.16488015854557436, 0.1538527969028659, 0.16890424311261176, 0.17009977799242515, 0.3389529603013619, 0.32262194084791396, 0.17118462153151648, 0.1396400334710104, 0.20599862989139273, 0.36095763668221814, 0.159112251721935, 0.2724049503228836, 0.2077588618656061, 0.2294242573567683, 0.14827797863225767, 0.29468166193665535, 0.17585501978715057, 0.19094960062613975, 0.16718251255094074, 0.17538613146608584, 0.19091926104039392, 0.19191305835121297, 0.17959662472313864, 0.18589629804149432, 0.17076610006549076, 0.18663389700818078, 0.17939156918890586, 0.0597806165799486, 0.07466231790149336, 0.06480824470032476, 0.0629408609863491, 0.05764367704497675, 0.05826133497665942, 0.06629862286205213, 0.061329311104254325, 0.05893786494939013]}, "mutation_prompt": null}
{"id": "2fcab264-2283-4231-b7de-f015c1d476cb", "solution": "import numpy as np\n\nclass DynamicEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  # Dynamic parameter adaptation\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicEGWO", "description": "Implement a dynamic parameter adaptation mechanism in the EGWO algorithm to adjust the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.251366727107578, 0.23878376212313324, 0.2841598693170565, 0.2251472392291255, 0.24520379645853918, 0.28458276858389187, 0.2946650243068214, 0.2484392634071364, 0.25314828689798974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03046424855497476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06213365837326923, 0.05240375492006866, 0.06937100258922368, 0.06871562705095091, 0.0574257881493333, 0.0662836876437064, 0.05906659474070597, 0.07926547594196487, 0.06316681221192155, 0.04128485780830582, 0.04022946463012489, 0.051054627134425545, 0.06415611204257021, 0.06647117651497536, 0.06852622353116966, 0.05234500012086685, 0.05833682521535899, 0.05481712269281702, 0.875774133947442, 0.9162614590036159, 0.5822583698295516, 0.9741065877621614, 0.7894561242932201, 0.927368308961065, 0.7117693636654234, 0.8578904781565598, 0.8663062960981534, 0.09515823251116895, 0.07305595031074608, 0.13219729698146243, 0.1624187649101414, 0.12996309850716914, 0.1299454518823442, 0.14027245603205662, 0.13987315390406652, 0.108062622075627, 0.19250971849685627, 0.20040190289053905, 0.1919672503023312, 0.14552448172677546, 0.12359079596190836, 0.14613834936744952, 0.16638578349109578, 0.16847743997685227, 0.1520701398315687, 0.1330742216416151, 0.05890485386501765, 0.07055172770456453, 0.04897876805542911, 0.05350454134400784, 0.014973748205715176, 0.04863325352924208, 0.03446276611087529, 0.07899116700186237, 0.2128708354561608, 0.14921890624407896, 0.13262440028127387, 0.1563073187665054, 0.18182654421045485, 0.10564029128021557, 0.15664520976734253, 0.012961461464513602, 0.1302921425795317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0444532250323435, 0.05034519477509436, 0.05218655759675017, 0.05388151713473577, 0.037423270423919575, 0.04287019198363906, 0.05110330569065136, 0.0756695397757452, 0.050274695618277465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021288855323658762, 9.999999999998899e-05, 0.028524772591609904, 0.004458712101405582, 9.999999999998899e-05, 0.0025027370654792103, 0.027279489317943995, 0.020303039983955884, 0.0238998884130589, 0.2526738342245243, 0.25978489891170775, 0.26858893486842694, 0.22500466835876076, 0.25815453238012287, 0.2679710356858557, 0.269325810455595, 0.25459972875859294, 0.27801666899839883, 0.06995815865316768, 0.0515895027639337, 0.06532379244375675, 0.027958122491678505, 0.08762002010174241, 0.06455844647029518, 0.0646735021952547, 0.07465394071327958, 0.07133239326574203, 0.1784394178965184, 0.13055128526686655, 0.18831824396943664, 0.13538245579449848, 0.14468457662954204, 0.12660120826260024, 0.14941250750800938, 0.16200321050053512, 0.1226021939490205, 0.20797796225066356, 0.19062632838771776, 0.1807662209916303, 0.20908471462474876, 0.20802624091895694, 0.22863455228530938, 0.18368399110385536, 0.20708041710994307, 0.18699871084085795, 0.14263681156844976, 0.1396345943329912, 0.13906127200342622, 0.15101613044658302, 0.15559824319223736, 0.17199794363901078, 0.13073029278814952, 0.154851837737091, 0.1251911001979379, 0.19037486299535455, 0.20240298818798586, 0.17532922095196413, 0.1937147103572333, 0.17727791515976055, 0.19874093799266268, 0.20586379387416653, 0.1838226093171933, 0.20679280171592562, 0.16087831137791675, 0.15989026464240308, 0.16336696270482665, 0.1586539865010571, 0.15957267377140538, 0.1684080698564958, 0.1603503035209456, 0.17925203036117632, 0.16081408484865445, 0.1297304744666108, 0.15794865146203552, 0.1504872515843303, 0.16790919195053555, 0.2626620282988331, 0.2066959186625562, 0.243533872843551, 0.1515739628031515, 0.28924662053838524, 0.133075376525305, 0.19836893366618702, 0.1999287178606347, 0.277337022012053, 0.25427378232875475, 0.21801451800457172, 0.2635265947686486, 0.20913925180673631, 0.26351987138025823, 0.18103613180004974, 0.1727275504684922, 0.1838136727156392, 0.1787987285311945, 0.1885270383432417, 0.1962997306020926, 0.20252267460111006, 0.1777526818713675, 0.188047079326926, 0.05946082524957996, 0.05389029310743154, 0.06606352646983593, 0.0796646525228798, 0.07440614576694082, 0.04405591828901745, 0.06555033945369015, 0.050887907421223066, 0.0655045838045002]}, "mutation_prompt": null}
{"id": "29f1a858-ee60-4b91-94f6-0f078fd81296", "solution": "import numpy as np\n\nclass DynamicEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  # Dynamic parameter adaptation\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicEGWO", "description": "Implement a dynamic parameter adaptation mechanism in the EGWO algorithm to adjust the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.251366727107578, 0.23878376212313324, 0.2841598693170565, 0.2251472392291255, 0.24520379645853918, 0.28458276858389187, 0.2946650243068214, 0.2484392634071364, 0.25314828689798974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03046424855497476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06213365837326923, 0.05240375492006866, 0.06937100258922368, 0.06871562705095091, 0.0574257881493333, 0.0662836876437064, 0.05906659474070597, 0.07926547594196487, 0.06316681221192155, 0.04128485780830582, 0.04022946463012489, 0.051054627134425545, 0.06415611204257021, 0.06647117651497536, 0.06852622353116966, 0.05234500012086685, 0.05833682521535899, 0.05481712269281702, 0.875774133947442, 0.9162614590036159, 0.5822583698295516, 0.9741065877621614, 0.7894561242932201, 0.927368308961065, 0.7117693636654234, 0.8578904781565598, 0.8663062960981534, 0.09515823251116895, 0.07305595031074608, 0.13219729698146243, 0.1624187649101414, 0.12996309850716914, 0.1299454518823442, 0.14027245603205662, 0.13987315390406652, 0.108062622075627, 0.19250971849685627, 0.20040190289053905, 0.1919672503023312, 0.14552448172677546, 0.12359079596190836, 0.14613834936744952, 0.16638578349109578, 0.16847743997685227, 0.1520701398315687, 0.1330742216416151, 0.05890485386501765, 0.07055172770456453, 0.04897876805542911, 0.05350454134400784, 0.014973748205715176, 0.04863325352924208, 0.03446276611087529, 0.07899116700186237, 0.2128708354561608, 0.14921890624407896, 0.13262440028127387, 0.1563073187665054, 0.18182654421045485, 0.10564029128021557, 0.15664520976734253, 0.012961461464513602, 0.1302921425795317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0444532250323435, 0.05034519477509436, 0.05218655759675017, 0.05388151713473577, 0.037423270423919575, 0.04287019198363906, 0.05110330569065136, 0.0756695397757452, 0.050274695618277465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021288855323658762, 9.999999999998899e-05, 0.028524772591609904, 0.004458712101405582, 9.999999999998899e-05, 0.0025027370654792103, 0.027279489317943995, 0.020303039983955884, 0.0238998884130589, 0.2526738342245243, 0.25978489891170775, 0.26858893486842694, 0.22500466835876076, 0.25815453238012287, 0.2679710356858557, 0.269325810455595, 0.25459972875859294, 0.27801666899839883, 0.06995815865316768, 0.0515895027639337, 0.06532379244375675, 0.027958122491678505, 0.08762002010174241, 0.06455844647029518, 0.0646735021952547, 0.07465394071327958, 0.07133239326574203, 0.1784394178965184, 0.13055128526686655, 0.18831824396943664, 0.13538245579449848, 0.14468457662954204, 0.12660120826260024, 0.14941250750800938, 0.16200321050053512, 0.1226021939490205, 0.20797796225066356, 0.19062632838771776, 0.1807662209916303, 0.20908471462474876, 0.20802624091895694, 0.22863455228530938, 0.18368399110385536, 0.20708041710994307, 0.18699871084085795, 0.14263681156844976, 0.1396345943329912, 0.13906127200342622, 0.15101613044658302, 0.15559824319223736, 0.17199794363901078, 0.13073029278814952, 0.154851837737091, 0.1251911001979379, 0.19037486299535455, 0.20240298818798586, 0.17532922095196413, 0.1937147103572333, 0.17727791515976055, 0.19874093799266268, 0.20586379387416653, 0.1838226093171933, 0.20679280171592562, 0.16087831137791675, 0.15989026464240308, 0.16336696270482665, 0.1586539865010571, 0.15957267377140538, 0.1684080698564958, 0.1603503035209456, 0.17925203036117632, 0.16081408484865445, 0.1297304744666108, 0.15794865146203552, 0.1504872515843303, 0.16790919195053555, 0.2626620282988331, 0.2066959186625562, 0.243533872843551, 0.1515739628031515, 0.28924662053838524, 0.133075376525305, 0.19836893366618702, 0.1999287178606347, 0.277337022012053, 0.25427378232875475, 0.21801451800457172, 0.2635265947686486, 0.20913925180673631, 0.26351987138025823, 0.18103613180004974, 0.1727275504684922, 0.1838136727156392, 0.1787987285311945, 0.1885270383432417, 0.1962997306020926, 0.20252267460111006, 0.1777526818713675, 0.188047079326926, 0.05946082524957996, 0.05389029310743154, 0.06606352646983593, 0.0796646525228798, 0.07440614576694082, 0.04405591828901745, 0.06555033945369015, 0.050887907421223066, 0.0655045838045002]}, "mutation_prompt": null}
{"id": "f8270a8f-4f87-4aac-b61c-9a847d56ac1b", "solution": "import numpy as np\n\nclass DynamicEGWO_FasterConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  # Dynamic parameter adaptation with scaling factor\n                    scaling_factor = np.clip(np.exp(-_ / self.budget), 0.1, 1.0)  # Introduce dynamic scaling factor\n                    positions[i] = update_position(positions[i], best_position, a * scaling_factor, c1)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], a * scaling_factor, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicEGWO_FasterConvergence", "description": "Introduce a dynamic scaling factor to adaptively adjust the step size for each individual during optimization.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'scaling_factor' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'scaling_factor' referenced before assignment\")", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {}, "mutation_prompt": null}
{"id": "12c8f15c-15ae-4d57-b895-38970730b78e", "solution": "import numpy as np\n\nclass DynamicEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  # Dynamic parameter adaptation\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicEGWO", "description": "Implement a dynamic parameter adaptation mechanism in the EGWO algorithm to adjust the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.251366727107578, 0.23878376212313324, 0.2841598693170565, 0.2251472392291255, 0.24520379645853918, 0.28458276858389187, 0.2946650243068214, 0.2484392634071364, 0.25314828689798974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03046424855497476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06213365837326923, 0.05240375492006866, 0.06937100258922368, 0.06871562705095091, 0.0574257881493333, 0.0662836876437064, 0.05906659474070597, 0.07926547594196487, 0.06316681221192155, 0.04128485780830582, 0.04022946463012489, 0.051054627134425545, 0.06415611204257021, 0.06647117651497536, 0.06852622353116966, 0.05234500012086685, 0.05833682521535899, 0.05481712269281702, 0.875774133947442, 0.9162614590036159, 0.5822583698295516, 0.9741065877621614, 0.7894561242932201, 0.927368308961065, 0.7117693636654234, 0.8578904781565598, 0.8663062960981534, 0.09515823251116895, 0.07305595031074608, 0.13219729698146243, 0.1624187649101414, 0.12996309850716914, 0.1299454518823442, 0.14027245603205662, 0.13987315390406652, 0.108062622075627, 0.19250971849685627, 0.20040190289053905, 0.1919672503023312, 0.14552448172677546, 0.12359079596190836, 0.14613834936744952, 0.16638578349109578, 0.16847743997685227, 0.1520701398315687, 0.1330742216416151, 0.05890485386501765, 0.07055172770456453, 0.04897876805542911, 0.05350454134400784, 0.014973748205715176, 0.04863325352924208, 0.03446276611087529, 0.07899116700186237, 0.2128708354561608, 0.14921890624407896, 0.13262440028127387, 0.1563073187665054, 0.18182654421045485, 0.10564029128021557, 0.15664520976734253, 0.012961461464513602, 0.1302921425795317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0444532250323435, 0.05034519477509436, 0.05218655759675017, 0.05388151713473577, 0.037423270423919575, 0.04287019198363906, 0.05110330569065136, 0.0756695397757452, 0.050274695618277465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021288855323658762, 9.999999999998899e-05, 0.028524772591609904, 0.004458712101405582, 9.999999999998899e-05, 0.0025027370654792103, 0.027279489317943995, 0.020303039983955884, 0.0238998884130589, 0.2526738342245243, 0.25978489891170775, 0.26858893486842694, 0.22500466835876076, 0.25815453238012287, 0.2679710356858557, 0.269325810455595, 0.25459972875859294, 0.27801666899839883, 0.06995815865316768, 0.0515895027639337, 0.06532379244375675, 0.027958122491678505, 0.08762002010174241, 0.06455844647029518, 0.0646735021952547, 0.07465394071327958, 0.07133239326574203, 0.1784394178965184, 0.13055128526686655, 0.18831824396943664, 0.13538245579449848, 0.14468457662954204, 0.12660120826260024, 0.14941250750800938, 0.16200321050053512, 0.1226021939490205, 0.20797796225066356, 0.19062632838771776, 0.1807662209916303, 0.20908471462474876, 0.20802624091895694, 0.22863455228530938, 0.18368399110385536, 0.20708041710994307, 0.18699871084085795, 0.14263681156844976, 0.1396345943329912, 0.13906127200342622, 0.15101613044658302, 0.15559824319223736, 0.17199794363901078, 0.13073029278814952, 0.154851837737091, 0.1251911001979379, 0.19037486299535455, 0.20240298818798586, 0.17532922095196413, 0.1937147103572333, 0.17727791515976055, 0.19874093799266268, 0.20586379387416653, 0.1838226093171933, 0.20679280171592562, 0.16087831137791675, 0.15989026464240308, 0.16336696270482665, 0.1586539865010571, 0.15957267377140538, 0.1684080698564958, 0.1603503035209456, 0.17925203036117632, 0.16081408484865445, 0.1297304744666108, 0.15794865146203552, 0.1504872515843303, 0.16790919195053555, 0.2626620282988331, 0.2066959186625562, 0.243533872843551, 0.1515739628031515, 0.28924662053838524, 0.133075376525305, 0.19836893366618702, 0.1999287178606347, 0.277337022012053, 0.25427378232875475, 0.21801451800457172, 0.2635265947686486, 0.20913925180673631, 0.26351987138025823, 0.18103613180004974, 0.1727275504684922, 0.1838136727156392, 0.1787987285311945, 0.1885270383432417, 0.1962997306020926, 0.20252267460111006, 0.1777526818713675, 0.188047079326926, 0.05946082524957996, 0.05389029310743154, 0.06606352646983593, 0.0796646525228798, 0.07440614576694082, 0.04405591828901745, 0.06555033945369015, 0.050887907421223066, 0.0655045838045002]}, "mutation_prompt": null}
{"id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "solution": "import numpy as np\n\nclass DynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicLocalSearchEGWO", "description": "Introducing a dynamic local search mechanism to exploit promising regions and accelerate convergence in the optimization process.", "configspace": "", "generation": 33, "fitness": 0.1509297638555972, "feedback": "The algorithm DynamicLocalSearchEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "8ae1c18e-4a59-46fc-99e8-345564f0e31f", "metadata": {"aucs": [0.26079807998161475, 0.25370519694792715, 0.2832902782852714, 0.2427655012494946, 0.2257797464441047, 0.20461079355923628, 0.2512148944238244, 0.2689696202604094, 0.28928826294463506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028991102965230442, 9.999999999998899e-05, 0.002479049995991911, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07596463265177122, 0.051511788406105374, 0.051646424693632786, 0.08335682788384635, 0.07820616845277417, 0.05899062106109065, 0.07801574514304088, 0.0724353813131201, 0.08704934024600264, 0.05047340893010477, 0.044226568217622275, 0.06898041226895457, 0.0596331498887499, 0.08192632505964048, 0.052936139501477686, 0.047421272505755785, 0.07503392125182962, 0.06178819145168235, 0.914817020617437, 0.8804452438058202, 0.903726788057482, 0.8251570058415243, 0.9364077222834006, 0.5215689040327629, 0.7070398817873448, 0.8631477521199341, 0.8845299224712146, 0.10759712441459668, 0.10360535502697021, 0.09878204326765205, 0.14818047799245337, 0.10899155165482022, 0.1144052460556022, 0.1325381117828045, 0.15880710097401662, 0.10916828971738812, 0.2066015336792203, 0.13556923102515117, 0.18861718254269677, 0.16065719666084555, 0.15575522415573573, 0.1328497936492007, 0.1411009460182986, 0.1729802419833204, 0.16658538301937442, 0.09466083999222086, 0.09744487081129083, 0.08550202237459248, 0.0081403156289247, 0.06768010525791213, 0.0532228043720977, 0.01898860641903921, 0.10869243441859999, 0.08964384709379136, 0.166860603446919, 0.1393007407896939, 0.14900281418225025, 0.14849393314045134, 0.16967637874137875, 0.17488313005035339, 0.19890955995415693, 0.15869166226075682, 0.15819396703656252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056351180123178524, 0.030651363837808643, 0.07819635243590295, 0.07253621718235681, 0.02738485967643378, 0.06251911852918779, 0.07722288586591253, 0.03181298340161576, 0.11358396400702131, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013305489656010305, 0.019217914077023668, 0.004791577222646115, 0.006777131467916808, 0.008356161817307695, 9.999999999998899e-05, 0.024089370350374506, 0.0006769838298033015, 0.0035589196689328473, 0.23982241905858503, 0.2590590011961599, 0.26874340462036794, 0.22790906468542993, 0.2553922743313699, 0.24095576135506802, 0.2505759693597036, 0.2879071493948442, 0.2612069217974258, 0.0684656077669108, 0.06509146585937542, 0.05531754063208605, 0.060103917024896925, 0.05996567042789358, 0.07731788155873187, 0.05852295434849619, 0.06473828555196692, 0.06693846404701365, 0.13940086840544974, 0.13627209514022032, 0.12329817007509425, 0.1734396310366395, 0.1521135471670617, 0.15658609056241457, 0.1818868021749368, 0.13448965360750098, 0.1530693697837482, 0.1822886668830236, 0.18909105022865158, 0.17194847939519298, 0.24063007827068283, 0.1770539895434775, 0.19881132576671867, 0.2221324320078304, 0.20132201934228078, 0.17450798054498606, 0.13516552743778354, 0.13104280628442921, 0.11638153551081831, 0.1662862831498585, 0.1443517716546754, 0.1753272766073335, 0.12355168020139462, 0.13224336874357356, 0.09359156810850378, 0.21943220856180434, 0.1657705794593034, 0.2264544372609668, 0.21060465818478036, 0.18020029265826176, 0.15586176390448692, 0.16981992337140805, 0.16878710246717, 0.19160559323069715, 0.1642560279323949, 0.16006634897458827, 0.17253855791319728, 0.16416348790914181, 0.160605383321889, 0.15224299161651944, 0.16361330805017438, 0.15841681280332154, 0.159521615143575, 0.17688435524373325, 0.2043453714508795, 0.24110269002925522, 0.2360463165774913, 0.1788077776768927, 0.27061381811403173, 0.14217006392124043, 0.19682684794680005, 0.2135541957311783, 0.32219942574978666, 0.24060118912498463, 0.12637985118352935, 0.14327297178505938, 0.1679643139177528, 0.23506092156228175, 0.26189402204337153, 0.19839071730466018, 0.24134381931982518, 0.18406850354537374, 0.19544370630893937, 0.18086312512656977, 0.1877533593927535, 0.19762620271441134, 0.17053904553576738, 0.1713712558811178, 0.17309181343228885, 0.1964670889314194, 0.04988893371285852, 0.05995326031639292, 0.08054039693880166, 0.07207331658859262, 0.06917921660358661, 0.10173652049052839, 0.05468450101290978, 0.06378644521144483, 0.06328248922576263]}, "mutation_prompt": null}
{"id": "f7386e54-f1f2-49ea-9d36-c0b90444fedd", "solution": "import numpy as np\n\nclass DynamicLocalSearchEGWOEnhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        adaptive_explore_rate = 0.5  # Initialize the adaptive explore rate\n        \n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > adaptive_explore_rate:  # Adjust exploration based on fitness landscape\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                    \n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n                \n                # Update adaptive explore rate based on improvement\n                if np.random.rand() < 0.5:  # 10% code difference\n                    adaptive_explore_rate = min(1.0, adaptive_explore_rate * 1.1)\n                else:\n                    adaptive_explore_rate = max(0.0, adaptive_explore_rate * 0.9)\n\n        return best_position", "name": "DynamicLocalSearchEGWOEnhanced", "description": "Incorporating a self-adaptive mechanism to adjust the exploration and exploitation balance dynamically based on the fitness landscape to accelerate convergence speed.", "configspace": "", "generation": 34, "fitness": 0.14752508855336016, "feedback": "The algorithm DynamicLocalSearchEGWOEnhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.27646225567159877, 0.27077802428148945, 0.25963948606482934, 0.2051987714086827, 0.2129415795827413, 0.21711516001192854, 0.26735733184041643, 0.23583856175952955, 0.26103363352754516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02909813377410031, 0.0027940376460763305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06572322285795962, 0.057391239105825664, 0.07240982137351604, 0.08780285626625939, 0.06419126415011744, 0.08067141162779501, 0.07420328381939922, 0.05913772044207288, 0.05158263427732179, 0.06020126591305164, 0.06714953301242366, 0.047393777516003155, 0.057122834660496835, 0.051947753127791985, 0.05329346325611972, 0.06489001921095283, 0.06127496650036501, 0.08199034284687146, 0.8223914318983903, 0.8834983244799858, 0.9022236297912503, 0.968263072852022, 0.7591203606896764, 0.5299557829502173, 0.695399590689646, 0.6042982399934662, 0.8867998963463526, 0.11016700911228383, 0.11502984055976229, 0.1374375064689739, 0.1354428838668228, 0.17748039862702003, 0.15856097668927138, 0.13676838524715873, 0.13377333758094534, 0.12713968112149399, 0.16617191272672793, 0.20246436601437934, 0.14008919120599417, 0.17355542083778897, 0.15193141309238978, 0.16623173640936817, 0.14252148760334526, 0.1543603257706887, 0.1842165528341546, 0.1092517885216866, 0.11133659480128388, 0.05281382263180401, 0.05800597771346094, 0.0731743825844936, 0.0435489333542286, 0.037876823940145354, 0.05862784546799105, 0.040064257947394655, 0.15555118369852594, 0.11639011679938727, 0.1422098878683613, 0.10715569722831275, 0.10349463637983625, 0.1505750971541323, 0.2030106486552795, 0.09457226170208854, 0.15589276712969058, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0253997177536619, 0.007360825625436718, 0.08116153996617936, 0.07271870702494432, 0.04251165505192478, 0.06835139492267195, 0.025197197554301387, 0.028329095775594393, 0.05919949855030682, 0.03769683560056214, 0.06879926912644951, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003548129941201683, 0.0073995965164190824, 9.999999999998899e-05, 0.0021896105479741745, 0.03224825157331501, 0.009915635736009287, 0.013942665212907879, 0.004276157564899075, 0.00847836602478469, 0.2647705607184302, 0.228888036558466, 0.2503757594246334, 0.2720786589404596, 0.24653261429898599, 0.24575874277307397, 0.27627893290433536, 0.2798788397842549, 0.2977370988984739, 0.05429770903916831, 0.0676978274737261, 0.051850882949858845, 0.06818294472180897, 0.05845014759730749, 0.05886067105008752, 0.0836229974593996, 0.08839257297218306, 0.07637898214715244, 0.14569225449087952, 0.1342147942731925, 0.19249147465619743, 0.17483297404071252, 0.1663173147585285, 0.15061037235018926, 0.14208847809767688, 0.1408964371577085, 0.13394215363154127, 0.188024821589296, 0.19898019980191284, 0.16616688611648223, 0.1930479834495371, 0.22868307079032746, 0.2063945992376367, 0.19717980205227537, 0.1883176541212005, 0.1836296471510217, 0.1308774565314963, 0.12005676497670026, 0.12469189472038966, 0.14751123044825531, 0.13696639984122372, 0.16465131591903703, 0.12688031266111743, 0.15295203538295277, 0.12312529021187935, 0.22769076706132874, 0.21297274406714428, 0.18488902001911922, 0.21201930753327847, 0.2124948895773242, 0.19820692383156058, 0.22964257368080265, 0.20371244635934727, 0.20788370192500683, 0.16906313629692726, 0.15793966984334018, 0.16236515876089053, 0.17076019059309855, 0.1606562839142862, 0.1525482370149246, 0.15508801644541326, 0.1639315349716236, 0.16167643804998222, 0.1269721964746885, 0.16907518571784352, 0.15145467584568617, 0.2899750586040347, 0.17088079383611532, 0.16468835827201633, 0.3324058786904919, 0.1188016695048495, 0.12811852643013988, 0.22674357282390867, 0.2715211805094635, 0.23842012667897494, 0.16771798644824798, 0.1554069369707377, 0.2642647361051653, 0.18076898125908736, 0.09709138422567887, 0.15624085248330888, 0.17657407769396938, 0.1717279995300296, 0.1768626243575343, 0.17371739795771957, 0.19349344470095697, 0.20288523531999658, 0.17335026280452925, 0.17145358343767114, 0.18049903653861132, 0.06472034449182318, 0.06268162630905949, 0.06533778239178556, 0.06545236321851589, 0.07370555421024727, 0.060235505370708764, 0.05937626168031418, 0.06099049635303033, 0.07240477752177776]}, "mutation_prompt": null}
{"id": "042deae9-b3b2-47a2-9fee-1919ca940a1f", "solution": "import numpy as np\n\nclass DynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicLocalSearchEGWO", "description": "Introducing a dynamic local search mechanism to exploit promising regions and accelerate convergence in the optimization process.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.26079807998161475, 0.25370519694792715, 0.2832902782852714, 0.2427655012494946, 0.2257797464441047, 0.20461079355923628, 0.2512148944238244, 0.2689696202604094, 0.28928826294463506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028991102965230442, 9.999999999998899e-05, 0.002479049995991911, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07596463265177122, 0.051511788406105374, 0.051646424693632786, 0.08335682788384635, 0.07820616845277417, 0.05899062106109065, 0.07801574514304088, 0.0724353813131201, 0.08704934024600264, 0.05047340893010477, 0.044226568217622275, 0.06898041226895457, 0.0596331498887499, 0.08192632505964048, 0.052936139501477686, 0.047421272505755785, 0.07503392125182962, 0.06178819145168235, 0.914817020617437, 0.8804452438058202, 0.903726788057482, 0.8251570058415243, 0.9364077222834006, 0.5215689040327629, 0.7070398817873448, 0.8631477521199341, 0.8845299224712146, 0.10759712441459668, 0.10360535502697021, 0.09878204326765205, 0.14818047799245337, 0.10899155165482022, 0.1144052460556022, 0.1325381117828045, 0.15880710097401662, 0.10916828971738812, 0.2066015336792203, 0.13556923102515117, 0.18861718254269677, 0.16065719666084555, 0.15575522415573573, 0.1328497936492007, 0.1411009460182986, 0.1729802419833204, 0.16658538301937442, 0.09466083999222086, 0.09744487081129083, 0.08550202237459248, 0.0081403156289247, 0.06768010525791213, 0.0532228043720977, 0.01898860641903921, 0.10869243441859999, 0.08964384709379136, 0.166860603446919, 0.1393007407896939, 0.14900281418225025, 0.14849393314045134, 0.16967637874137875, 0.17488313005035339, 0.19890955995415693, 0.15869166226075682, 0.15819396703656252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056351180123178524, 0.030651363837808643, 0.07819635243590295, 0.07253621718235681, 0.02738485967643378, 0.06251911852918779, 0.07722288586591253, 0.03181298340161576, 0.11358396400702131, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013305489656010305, 0.019217914077023668, 0.004791577222646115, 0.006777131467916808, 0.008356161817307695, 9.999999999998899e-05, 0.024089370350374506, 0.0006769838298033015, 0.0035589196689328473, 0.23982241905858503, 0.2590590011961599, 0.26874340462036794, 0.22790906468542993, 0.2553922743313699, 0.24095576135506802, 0.2505759693597036, 0.2879071493948442, 0.2612069217974258, 0.0684656077669108, 0.06509146585937542, 0.05531754063208605, 0.060103917024896925, 0.05996567042789358, 0.07731788155873187, 0.05852295434849619, 0.06473828555196692, 0.06693846404701365, 0.13940086840544974, 0.13627209514022032, 0.12329817007509425, 0.1734396310366395, 0.1521135471670617, 0.15658609056241457, 0.1818868021749368, 0.13448965360750098, 0.1530693697837482, 0.1822886668830236, 0.18909105022865158, 0.17194847939519298, 0.24063007827068283, 0.1770539895434775, 0.19881132576671867, 0.2221324320078304, 0.20132201934228078, 0.17450798054498606, 0.13516552743778354, 0.13104280628442921, 0.11638153551081831, 0.1662862831498585, 0.1443517716546754, 0.1753272766073335, 0.12355168020139462, 0.13224336874357356, 0.09359156810850378, 0.21943220856180434, 0.1657705794593034, 0.2264544372609668, 0.21060465818478036, 0.18020029265826176, 0.15586176390448692, 0.16981992337140805, 0.16878710246717, 0.19160559323069715, 0.1642560279323949, 0.16006634897458827, 0.17253855791319728, 0.16416348790914181, 0.160605383321889, 0.15224299161651944, 0.16361330805017438, 0.15841681280332154, 0.159521615143575, 0.17688435524373325, 0.2043453714508795, 0.24110269002925522, 0.2360463165774913, 0.1788077776768927, 0.27061381811403173, 0.14217006392124043, 0.19682684794680005, 0.2135541957311783, 0.32219942574978666, 0.24060118912498463, 0.12637985118352935, 0.14327297178505938, 0.1679643139177528, 0.23506092156228175, 0.26189402204337153, 0.19839071730466018, 0.24134381931982518, 0.18406850354537374, 0.19544370630893937, 0.18086312512656977, 0.1877533593927535, 0.19762620271441134, 0.17053904553576738, 0.1713712558811178, 0.17309181343228885, 0.1964670889314194, 0.04988893371285852, 0.05995326031639292, 0.08054039693880166, 0.07207331658859262, 0.06917921660358661, 0.10173652049052839, 0.05468450101290978, 0.06378644521144483, 0.06328248922576263]}, "mutation_prompt": null}
{"id": "405ca466-80cc-44a5-a36d-3366ae9678ed", "solution": "import numpy as np\n\nclass DynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicLocalSearchEGWO", "description": "Introducing a dynamic local search mechanism to exploit promising regions and accelerate convergence in the optimization process.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.26079807998161475, 0.25370519694792715, 0.2832902782852714, 0.2427655012494946, 0.2257797464441047, 0.20461079355923628, 0.2512148944238244, 0.2689696202604094, 0.28928826294463506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028991102965230442, 9.999999999998899e-05, 0.002479049995991911, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07596463265177122, 0.051511788406105374, 0.051646424693632786, 0.08335682788384635, 0.07820616845277417, 0.05899062106109065, 0.07801574514304088, 0.0724353813131201, 0.08704934024600264, 0.05047340893010477, 0.044226568217622275, 0.06898041226895457, 0.0596331498887499, 0.08192632505964048, 0.052936139501477686, 0.047421272505755785, 0.07503392125182962, 0.06178819145168235, 0.914817020617437, 0.8804452438058202, 0.903726788057482, 0.8251570058415243, 0.9364077222834006, 0.5215689040327629, 0.7070398817873448, 0.8631477521199341, 0.8845299224712146, 0.10759712441459668, 0.10360535502697021, 0.09878204326765205, 0.14818047799245337, 0.10899155165482022, 0.1144052460556022, 0.1325381117828045, 0.15880710097401662, 0.10916828971738812, 0.2066015336792203, 0.13556923102515117, 0.18861718254269677, 0.16065719666084555, 0.15575522415573573, 0.1328497936492007, 0.1411009460182986, 0.1729802419833204, 0.16658538301937442, 0.09466083999222086, 0.09744487081129083, 0.08550202237459248, 0.0081403156289247, 0.06768010525791213, 0.0532228043720977, 0.01898860641903921, 0.10869243441859999, 0.08964384709379136, 0.166860603446919, 0.1393007407896939, 0.14900281418225025, 0.14849393314045134, 0.16967637874137875, 0.17488313005035339, 0.19890955995415693, 0.15869166226075682, 0.15819396703656252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056351180123178524, 0.030651363837808643, 0.07819635243590295, 0.07253621718235681, 0.02738485967643378, 0.06251911852918779, 0.07722288586591253, 0.03181298340161576, 0.11358396400702131, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013305489656010305, 0.019217914077023668, 0.004791577222646115, 0.006777131467916808, 0.008356161817307695, 9.999999999998899e-05, 0.024089370350374506, 0.0006769838298033015, 0.0035589196689328473, 0.23982241905858503, 0.2590590011961599, 0.26874340462036794, 0.22790906468542993, 0.2553922743313699, 0.24095576135506802, 0.2505759693597036, 0.2879071493948442, 0.2612069217974258, 0.0684656077669108, 0.06509146585937542, 0.05531754063208605, 0.060103917024896925, 0.05996567042789358, 0.07731788155873187, 0.05852295434849619, 0.06473828555196692, 0.06693846404701365, 0.13940086840544974, 0.13627209514022032, 0.12329817007509425, 0.1734396310366395, 0.1521135471670617, 0.15658609056241457, 0.1818868021749368, 0.13448965360750098, 0.1530693697837482, 0.1822886668830236, 0.18909105022865158, 0.17194847939519298, 0.24063007827068283, 0.1770539895434775, 0.19881132576671867, 0.2221324320078304, 0.20132201934228078, 0.17450798054498606, 0.13516552743778354, 0.13104280628442921, 0.11638153551081831, 0.1662862831498585, 0.1443517716546754, 0.1753272766073335, 0.12355168020139462, 0.13224336874357356, 0.09359156810850378, 0.21943220856180434, 0.1657705794593034, 0.2264544372609668, 0.21060465818478036, 0.18020029265826176, 0.15586176390448692, 0.16981992337140805, 0.16878710246717, 0.19160559323069715, 0.1642560279323949, 0.16006634897458827, 0.17253855791319728, 0.16416348790914181, 0.160605383321889, 0.15224299161651944, 0.16361330805017438, 0.15841681280332154, 0.159521615143575, 0.17688435524373325, 0.2043453714508795, 0.24110269002925522, 0.2360463165774913, 0.1788077776768927, 0.27061381811403173, 0.14217006392124043, 0.19682684794680005, 0.2135541957311783, 0.32219942574978666, 0.24060118912498463, 0.12637985118352935, 0.14327297178505938, 0.1679643139177528, 0.23506092156228175, 0.26189402204337153, 0.19839071730466018, 0.24134381931982518, 0.18406850354537374, 0.19544370630893937, 0.18086312512656977, 0.1877533593927535, 0.19762620271441134, 0.17053904553576738, 0.1713712558811178, 0.17309181343228885, 0.1964670889314194, 0.04988893371285852, 0.05995326031639292, 0.08054039693880166, 0.07207331658859262, 0.06917921660358661, 0.10173652049052839, 0.05468450101290978, 0.06378644521144483, 0.06328248922576263]}, "mutation_prompt": null}
{"id": "5d2a4cab-cc54-4069-8bef-49ba5f0b3ad0", "solution": "import numpy as np\n\nclass DynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicLocalSearchEGWO", "description": "Introducing a dynamic local search mechanism to exploit promising regions and accelerate convergence in the optimization process.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.26079807998161475, 0.25370519694792715, 0.2832902782852714, 0.2427655012494946, 0.2257797464441047, 0.20461079355923628, 0.2512148944238244, 0.2689696202604094, 0.28928826294463506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028991102965230442, 9.999999999998899e-05, 0.002479049995991911, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07596463265177122, 0.051511788406105374, 0.051646424693632786, 0.08335682788384635, 0.07820616845277417, 0.05899062106109065, 0.07801574514304088, 0.0724353813131201, 0.08704934024600264, 0.05047340893010477, 0.044226568217622275, 0.06898041226895457, 0.0596331498887499, 0.08192632505964048, 0.052936139501477686, 0.047421272505755785, 0.07503392125182962, 0.06178819145168235, 0.914817020617437, 0.8804452438058202, 0.903726788057482, 0.8251570058415243, 0.9364077222834006, 0.5215689040327629, 0.7070398817873448, 0.8631477521199341, 0.8845299224712146, 0.10759712441459668, 0.10360535502697021, 0.09878204326765205, 0.14818047799245337, 0.10899155165482022, 0.1144052460556022, 0.1325381117828045, 0.15880710097401662, 0.10916828971738812, 0.2066015336792203, 0.13556923102515117, 0.18861718254269677, 0.16065719666084555, 0.15575522415573573, 0.1328497936492007, 0.1411009460182986, 0.1729802419833204, 0.16658538301937442, 0.09466083999222086, 0.09744487081129083, 0.08550202237459248, 0.0081403156289247, 0.06768010525791213, 0.0532228043720977, 0.01898860641903921, 0.10869243441859999, 0.08964384709379136, 0.166860603446919, 0.1393007407896939, 0.14900281418225025, 0.14849393314045134, 0.16967637874137875, 0.17488313005035339, 0.19890955995415693, 0.15869166226075682, 0.15819396703656252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056351180123178524, 0.030651363837808643, 0.07819635243590295, 0.07253621718235681, 0.02738485967643378, 0.06251911852918779, 0.07722288586591253, 0.03181298340161576, 0.11358396400702131, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013305489656010305, 0.019217914077023668, 0.004791577222646115, 0.006777131467916808, 0.008356161817307695, 9.999999999998899e-05, 0.024089370350374506, 0.0006769838298033015, 0.0035589196689328473, 0.23982241905858503, 0.2590590011961599, 0.26874340462036794, 0.22790906468542993, 0.2553922743313699, 0.24095576135506802, 0.2505759693597036, 0.2879071493948442, 0.2612069217974258, 0.0684656077669108, 0.06509146585937542, 0.05531754063208605, 0.060103917024896925, 0.05996567042789358, 0.07731788155873187, 0.05852295434849619, 0.06473828555196692, 0.06693846404701365, 0.13940086840544974, 0.13627209514022032, 0.12329817007509425, 0.1734396310366395, 0.1521135471670617, 0.15658609056241457, 0.1818868021749368, 0.13448965360750098, 0.1530693697837482, 0.1822886668830236, 0.18909105022865158, 0.17194847939519298, 0.24063007827068283, 0.1770539895434775, 0.19881132576671867, 0.2221324320078304, 0.20132201934228078, 0.17450798054498606, 0.13516552743778354, 0.13104280628442921, 0.11638153551081831, 0.1662862831498585, 0.1443517716546754, 0.1753272766073335, 0.12355168020139462, 0.13224336874357356, 0.09359156810850378, 0.21943220856180434, 0.1657705794593034, 0.2264544372609668, 0.21060465818478036, 0.18020029265826176, 0.15586176390448692, 0.16981992337140805, 0.16878710246717, 0.19160559323069715, 0.1642560279323949, 0.16006634897458827, 0.17253855791319728, 0.16416348790914181, 0.160605383321889, 0.15224299161651944, 0.16361330805017438, 0.15841681280332154, 0.159521615143575, 0.17688435524373325, 0.2043453714508795, 0.24110269002925522, 0.2360463165774913, 0.1788077776768927, 0.27061381811403173, 0.14217006392124043, 0.19682684794680005, 0.2135541957311783, 0.32219942574978666, 0.24060118912498463, 0.12637985118352935, 0.14327297178505938, 0.1679643139177528, 0.23506092156228175, 0.26189402204337153, 0.19839071730466018, 0.24134381931982518, 0.18406850354537374, 0.19544370630893937, 0.18086312512656977, 0.1877533593927535, 0.19762620271441134, 0.17053904553576738, 0.1713712558811178, 0.17309181343228885, 0.1964670889314194, 0.04988893371285852, 0.05995326031639292, 0.08054039693880166, 0.07207331658859262, 0.06917921660358661, 0.10173652049052839, 0.05468450101290978, 0.06378644521144483, 0.06328248922576263]}, "mutation_prompt": null}
{"id": "c473754a-009d-4159-aad0-bde312cb8720", "solution": "import numpy as np\n\nclass DynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicLocalSearchEGWO", "description": "Introducing a dynamic local search mechanism to exploit promising regions and accelerate convergence in the optimization process.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.26079807998161475, 0.25370519694792715, 0.2832902782852714, 0.2427655012494946, 0.2257797464441047, 0.20461079355923628, 0.2512148944238244, 0.2689696202604094, 0.28928826294463506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028991102965230442, 9.999999999998899e-05, 0.002479049995991911, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07596463265177122, 0.051511788406105374, 0.051646424693632786, 0.08335682788384635, 0.07820616845277417, 0.05899062106109065, 0.07801574514304088, 0.0724353813131201, 0.08704934024600264, 0.05047340893010477, 0.044226568217622275, 0.06898041226895457, 0.0596331498887499, 0.08192632505964048, 0.052936139501477686, 0.047421272505755785, 0.07503392125182962, 0.06178819145168235, 0.914817020617437, 0.8804452438058202, 0.903726788057482, 0.8251570058415243, 0.9364077222834006, 0.5215689040327629, 0.7070398817873448, 0.8631477521199341, 0.8845299224712146, 0.10759712441459668, 0.10360535502697021, 0.09878204326765205, 0.14818047799245337, 0.10899155165482022, 0.1144052460556022, 0.1325381117828045, 0.15880710097401662, 0.10916828971738812, 0.2066015336792203, 0.13556923102515117, 0.18861718254269677, 0.16065719666084555, 0.15575522415573573, 0.1328497936492007, 0.1411009460182986, 0.1729802419833204, 0.16658538301937442, 0.09466083999222086, 0.09744487081129083, 0.08550202237459248, 0.0081403156289247, 0.06768010525791213, 0.0532228043720977, 0.01898860641903921, 0.10869243441859999, 0.08964384709379136, 0.166860603446919, 0.1393007407896939, 0.14900281418225025, 0.14849393314045134, 0.16967637874137875, 0.17488313005035339, 0.19890955995415693, 0.15869166226075682, 0.15819396703656252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056351180123178524, 0.030651363837808643, 0.07819635243590295, 0.07253621718235681, 0.02738485967643378, 0.06251911852918779, 0.07722288586591253, 0.03181298340161576, 0.11358396400702131, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013305489656010305, 0.019217914077023668, 0.004791577222646115, 0.006777131467916808, 0.008356161817307695, 9.999999999998899e-05, 0.024089370350374506, 0.0006769838298033015, 0.0035589196689328473, 0.23982241905858503, 0.2590590011961599, 0.26874340462036794, 0.22790906468542993, 0.2553922743313699, 0.24095576135506802, 0.2505759693597036, 0.2879071493948442, 0.2612069217974258, 0.0684656077669108, 0.06509146585937542, 0.05531754063208605, 0.060103917024896925, 0.05996567042789358, 0.07731788155873187, 0.05852295434849619, 0.06473828555196692, 0.06693846404701365, 0.13940086840544974, 0.13627209514022032, 0.12329817007509425, 0.1734396310366395, 0.1521135471670617, 0.15658609056241457, 0.1818868021749368, 0.13448965360750098, 0.1530693697837482, 0.1822886668830236, 0.18909105022865158, 0.17194847939519298, 0.24063007827068283, 0.1770539895434775, 0.19881132576671867, 0.2221324320078304, 0.20132201934228078, 0.17450798054498606, 0.13516552743778354, 0.13104280628442921, 0.11638153551081831, 0.1662862831498585, 0.1443517716546754, 0.1753272766073335, 0.12355168020139462, 0.13224336874357356, 0.09359156810850378, 0.21943220856180434, 0.1657705794593034, 0.2264544372609668, 0.21060465818478036, 0.18020029265826176, 0.15586176390448692, 0.16981992337140805, 0.16878710246717, 0.19160559323069715, 0.1642560279323949, 0.16006634897458827, 0.17253855791319728, 0.16416348790914181, 0.160605383321889, 0.15224299161651944, 0.16361330805017438, 0.15841681280332154, 0.159521615143575, 0.17688435524373325, 0.2043453714508795, 0.24110269002925522, 0.2360463165774913, 0.1788077776768927, 0.27061381811403173, 0.14217006392124043, 0.19682684794680005, 0.2135541957311783, 0.32219942574978666, 0.24060118912498463, 0.12637985118352935, 0.14327297178505938, 0.1679643139177528, 0.23506092156228175, 0.26189402204337153, 0.19839071730466018, 0.24134381931982518, 0.18406850354537374, 0.19544370630893937, 0.18086312512656977, 0.1877533593927535, 0.19762620271441134, 0.17053904553576738, 0.1713712558811178, 0.17309181343228885, 0.1964670889314194, 0.04988893371285852, 0.05995326031639292, 0.08054039693880166, 0.07207331658859262, 0.06917921660358661, 0.10173652049052839, 0.05468450101290978, 0.06378644521144483, 0.06328248922576263]}, "mutation_prompt": null}
{"id": "8af0b738-1b46-40ab-a8e7-1a7c1751848d", "solution": "import numpy as np\n\nclass DynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicLocalSearchEGWO", "description": "Introducing a dynamic local search mechanism to exploit promising regions and accelerate convergence in the optimization process.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.26079807998161475, 0.25370519694792715, 0.2832902782852714, 0.2427655012494946, 0.2257797464441047, 0.20461079355923628, 0.2512148944238244, 0.2689696202604094, 0.28928826294463506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028991102965230442, 9.999999999998899e-05, 0.002479049995991911, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07596463265177122, 0.051511788406105374, 0.051646424693632786, 0.08335682788384635, 0.07820616845277417, 0.05899062106109065, 0.07801574514304088, 0.0724353813131201, 0.08704934024600264, 0.05047340893010477, 0.044226568217622275, 0.06898041226895457, 0.0596331498887499, 0.08192632505964048, 0.052936139501477686, 0.047421272505755785, 0.07503392125182962, 0.06178819145168235, 0.914817020617437, 0.8804452438058202, 0.903726788057482, 0.8251570058415243, 0.9364077222834006, 0.5215689040327629, 0.7070398817873448, 0.8631477521199341, 0.8845299224712146, 0.10759712441459668, 0.10360535502697021, 0.09878204326765205, 0.14818047799245337, 0.10899155165482022, 0.1144052460556022, 0.1325381117828045, 0.15880710097401662, 0.10916828971738812, 0.2066015336792203, 0.13556923102515117, 0.18861718254269677, 0.16065719666084555, 0.15575522415573573, 0.1328497936492007, 0.1411009460182986, 0.1729802419833204, 0.16658538301937442, 0.09466083999222086, 0.09744487081129083, 0.08550202237459248, 0.0081403156289247, 0.06768010525791213, 0.0532228043720977, 0.01898860641903921, 0.10869243441859999, 0.08964384709379136, 0.166860603446919, 0.1393007407896939, 0.14900281418225025, 0.14849393314045134, 0.16967637874137875, 0.17488313005035339, 0.19890955995415693, 0.15869166226075682, 0.15819396703656252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056351180123178524, 0.030651363837808643, 0.07819635243590295, 0.07253621718235681, 0.02738485967643378, 0.06251911852918779, 0.07722288586591253, 0.03181298340161576, 0.11358396400702131, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013305489656010305, 0.019217914077023668, 0.004791577222646115, 0.006777131467916808, 0.008356161817307695, 9.999999999998899e-05, 0.024089370350374506, 0.0006769838298033015, 0.0035589196689328473, 0.23982241905858503, 0.2590590011961599, 0.26874340462036794, 0.22790906468542993, 0.2553922743313699, 0.24095576135506802, 0.2505759693597036, 0.2879071493948442, 0.2612069217974258, 0.0684656077669108, 0.06509146585937542, 0.05531754063208605, 0.060103917024896925, 0.05996567042789358, 0.07731788155873187, 0.05852295434849619, 0.06473828555196692, 0.06693846404701365, 0.13940086840544974, 0.13627209514022032, 0.12329817007509425, 0.1734396310366395, 0.1521135471670617, 0.15658609056241457, 0.1818868021749368, 0.13448965360750098, 0.1530693697837482, 0.1822886668830236, 0.18909105022865158, 0.17194847939519298, 0.24063007827068283, 0.1770539895434775, 0.19881132576671867, 0.2221324320078304, 0.20132201934228078, 0.17450798054498606, 0.13516552743778354, 0.13104280628442921, 0.11638153551081831, 0.1662862831498585, 0.1443517716546754, 0.1753272766073335, 0.12355168020139462, 0.13224336874357356, 0.09359156810850378, 0.21943220856180434, 0.1657705794593034, 0.2264544372609668, 0.21060465818478036, 0.18020029265826176, 0.15586176390448692, 0.16981992337140805, 0.16878710246717, 0.19160559323069715, 0.1642560279323949, 0.16006634897458827, 0.17253855791319728, 0.16416348790914181, 0.160605383321889, 0.15224299161651944, 0.16361330805017438, 0.15841681280332154, 0.159521615143575, 0.17688435524373325, 0.2043453714508795, 0.24110269002925522, 0.2360463165774913, 0.1788077776768927, 0.27061381811403173, 0.14217006392124043, 0.19682684794680005, 0.2135541957311783, 0.32219942574978666, 0.24060118912498463, 0.12637985118352935, 0.14327297178505938, 0.1679643139177528, 0.23506092156228175, 0.26189402204337153, 0.19839071730466018, 0.24134381931982518, 0.18406850354537374, 0.19544370630893937, 0.18086312512656977, 0.1877533593927535, 0.19762620271441134, 0.17053904553576738, 0.1713712558811178, 0.17309181343228885, 0.1964670889314194, 0.04988893371285852, 0.05995326031639292, 0.08054039693880166, 0.07207331658859262, 0.06917921660358661, 0.10173652049052839, 0.05468450101290978, 0.06378644521144483, 0.06328248922576263]}, "mutation_prompt": null}
{"id": "0eaa7547-8078-458b-a13c-c34e8e9f2cd7", "solution": "import numpy as np\n\nclass DynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicLocalSearchEGWO", "description": "Introducing a dynamic local search mechanism to exploit promising regions and accelerate convergence in the optimization process.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.26079807998161475, 0.25370519694792715, 0.2832902782852714, 0.2427655012494946, 0.2257797464441047, 0.20461079355923628, 0.2512148944238244, 0.2689696202604094, 0.28928826294463506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028991102965230442, 9.999999999998899e-05, 0.002479049995991911, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07596463265177122, 0.051511788406105374, 0.051646424693632786, 0.08335682788384635, 0.07820616845277417, 0.05899062106109065, 0.07801574514304088, 0.0724353813131201, 0.08704934024600264, 0.05047340893010477, 0.044226568217622275, 0.06898041226895457, 0.0596331498887499, 0.08192632505964048, 0.052936139501477686, 0.047421272505755785, 0.07503392125182962, 0.06178819145168235, 0.914817020617437, 0.8804452438058202, 0.903726788057482, 0.8251570058415243, 0.9364077222834006, 0.5215689040327629, 0.7070398817873448, 0.8631477521199341, 0.8845299224712146, 0.10759712441459668, 0.10360535502697021, 0.09878204326765205, 0.14818047799245337, 0.10899155165482022, 0.1144052460556022, 0.1325381117828045, 0.15880710097401662, 0.10916828971738812, 0.2066015336792203, 0.13556923102515117, 0.18861718254269677, 0.16065719666084555, 0.15575522415573573, 0.1328497936492007, 0.1411009460182986, 0.1729802419833204, 0.16658538301937442, 0.09466083999222086, 0.09744487081129083, 0.08550202237459248, 0.0081403156289247, 0.06768010525791213, 0.0532228043720977, 0.01898860641903921, 0.10869243441859999, 0.08964384709379136, 0.166860603446919, 0.1393007407896939, 0.14900281418225025, 0.14849393314045134, 0.16967637874137875, 0.17488313005035339, 0.19890955995415693, 0.15869166226075682, 0.15819396703656252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056351180123178524, 0.030651363837808643, 0.07819635243590295, 0.07253621718235681, 0.02738485967643378, 0.06251911852918779, 0.07722288586591253, 0.03181298340161576, 0.11358396400702131, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013305489656010305, 0.019217914077023668, 0.004791577222646115, 0.006777131467916808, 0.008356161817307695, 9.999999999998899e-05, 0.024089370350374506, 0.0006769838298033015, 0.0035589196689328473, 0.23982241905858503, 0.2590590011961599, 0.26874340462036794, 0.22790906468542993, 0.2553922743313699, 0.24095576135506802, 0.2505759693597036, 0.2879071493948442, 0.2612069217974258, 0.0684656077669108, 0.06509146585937542, 0.05531754063208605, 0.060103917024896925, 0.05996567042789358, 0.07731788155873187, 0.05852295434849619, 0.06473828555196692, 0.06693846404701365, 0.13940086840544974, 0.13627209514022032, 0.12329817007509425, 0.1734396310366395, 0.1521135471670617, 0.15658609056241457, 0.1818868021749368, 0.13448965360750098, 0.1530693697837482, 0.1822886668830236, 0.18909105022865158, 0.17194847939519298, 0.24063007827068283, 0.1770539895434775, 0.19881132576671867, 0.2221324320078304, 0.20132201934228078, 0.17450798054498606, 0.13516552743778354, 0.13104280628442921, 0.11638153551081831, 0.1662862831498585, 0.1443517716546754, 0.1753272766073335, 0.12355168020139462, 0.13224336874357356, 0.09359156810850378, 0.21943220856180434, 0.1657705794593034, 0.2264544372609668, 0.21060465818478036, 0.18020029265826176, 0.15586176390448692, 0.16981992337140805, 0.16878710246717, 0.19160559323069715, 0.1642560279323949, 0.16006634897458827, 0.17253855791319728, 0.16416348790914181, 0.160605383321889, 0.15224299161651944, 0.16361330805017438, 0.15841681280332154, 0.159521615143575, 0.17688435524373325, 0.2043453714508795, 0.24110269002925522, 0.2360463165774913, 0.1788077776768927, 0.27061381811403173, 0.14217006392124043, 0.19682684794680005, 0.2135541957311783, 0.32219942574978666, 0.24060118912498463, 0.12637985118352935, 0.14327297178505938, 0.1679643139177528, 0.23506092156228175, 0.26189402204337153, 0.19839071730466018, 0.24134381931982518, 0.18406850354537374, 0.19544370630893937, 0.18086312512656977, 0.1877533593927535, 0.19762620271441134, 0.17053904553576738, 0.1713712558811178, 0.17309181343228885, 0.1964670889314194, 0.04988893371285852, 0.05995326031639292, 0.08054039693880166, 0.07207331658859262, 0.06917921660358661, 0.10173652049052839, 0.05468450101290978, 0.06378644521144483, 0.06328248922576263]}, "mutation_prompt": null}
{"id": "d5f9dcf0-d636-473e-949c-1f5fe458b8fb", "solution": "import numpy as np\n\nclass DynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicLocalSearchEGWO", "description": "Introducing a dynamic local search mechanism to exploit promising regions and accelerate convergence in the optimization process.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.26079807998161475, 0.25370519694792715, 0.2832902782852714, 0.2427655012494946, 0.2257797464441047, 0.20461079355923628, 0.2512148944238244, 0.2689696202604094, 0.28928826294463506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028991102965230442, 9.999999999998899e-05, 0.002479049995991911, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07596463265177122, 0.051511788406105374, 0.051646424693632786, 0.08335682788384635, 0.07820616845277417, 0.05899062106109065, 0.07801574514304088, 0.0724353813131201, 0.08704934024600264, 0.05047340893010477, 0.044226568217622275, 0.06898041226895457, 0.0596331498887499, 0.08192632505964048, 0.052936139501477686, 0.047421272505755785, 0.07503392125182962, 0.06178819145168235, 0.914817020617437, 0.8804452438058202, 0.903726788057482, 0.8251570058415243, 0.9364077222834006, 0.5215689040327629, 0.7070398817873448, 0.8631477521199341, 0.8845299224712146, 0.10759712441459668, 0.10360535502697021, 0.09878204326765205, 0.14818047799245337, 0.10899155165482022, 0.1144052460556022, 0.1325381117828045, 0.15880710097401662, 0.10916828971738812, 0.2066015336792203, 0.13556923102515117, 0.18861718254269677, 0.16065719666084555, 0.15575522415573573, 0.1328497936492007, 0.1411009460182986, 0.1729802419833204, 0.16658538301937442, 0.09466083999222086, 0.09744487081129083, 0.08550202237459248, 0.0081403156289247, 0.06768010525791213, 0.0532228043720977, 0.01898860641903921, 0.10869243441859999, 0.08964384709379136, 0.166860603446919, 0.1393007407896939, 0.14900281418225025, 0.14849393314045134, 0.16967637874137875, 0.17488313005035339, 0.19890955995415693, 0.15869166226075682, 0.15819396703656252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056351180123178524, 0.030651363837808643, 0.07819635243590295, 0.07253621718235681, 0.02738485967643378, 0.06251911852918779, 0.07722288586591253, 0.03181298340161576, 0.11358396400702131, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013305489656010305, 0.019217914077023668, 0.004791577222646115, 0.006777131467916808, 0.008356161817307695, 9.999999999998899e-05, 0.024089370350374506, 0.0006769838298033015, 0.0035589196689328473, 0.23982241905858503, 0.2590590011961599, 0.26874340462036794, 0.22790906468542993, 0.2553922743313699, 0.24095576135506802, 0.2505759693597036, 0.2879071493948442, 0.2612069217974258, 0.0684656077669108, 0.06509146585937542, 0.05531754063208605, 0.060103917024896925, 0.05996567042789358, 0.07731788155873187, 0.05852295434849619, 0.06473828555196692, 0.06693846404701365, 0.13940086840544974, 0.13627209514022032, 0.12329817007509425, 0.1734396310366395, 0.1521135471670617, 0.15658609056241457, 0.1818868021749368, 0.13448965360750098, 0.1530693697837482, 0.1822886668830236, 0.18909105022865158, 0.17194847939519298, 0.24063007827068283, 0.1770539895434775, 0.19881132576671867, 0.2221324320078304, 0.20132201934228078, 0.17450798054498606, 0.13516552743778354, 0.13104280628442921, 0.11638153551081831, 0.1662862831498585, 0.1443517716546754, 0.1753272766073335, 0.12355168020139462, 0.13224336874357356, 0.09359156810850378, 0.21943220856180434, 0.1657705794593034, 0.2264544372609668, 0.21060465818478036, 0.18020029265826176, 0.15586176390448692, 0.16981992337140805, 0.16878710246717, 0.19160559323069715, 0.1642560279323949, 0.16006634897458827, 0.17253855791319728, 0.16416348790914181, 0.160605383321889, 0.15224299161651944, 0.16361330805017438, 0.15841681280332154, 0.159521615143575, 0.17688435524373325, 0.2043453714508795, 0.24110269002925522, 0.2360463165774913, 0.1788077776768927, 0.27061381811403173, 0.14217006392124043, 0.19682684794680005, 0.2135541957311783, 0.32219942574978666, 0.24060118912498463, 0.12637985118352935, 0.14327297178505938, 0.1679643139177528, 0.23506092156228175, 0.26189402204337153, 0.19839071730466018, 0.24134381931982518, 0.18406850354537374, 0.19544370630893937, 0.18086312512656977, 0.1877533593927535, 0.19762620271441134, 0.17053904553576738, 0.1713712558811178, 0.17309181343228885, 0.1964670889314194, 0.04988893371285852, 0.05995326031639292, 0.08054039693880166, 0.07207331658859262, 0.06917921660358661, 0.10173652049052839, 0.05468450101290978, 0.06378644521144483, 0.06328248922576263]}, "mutation_prompt": null}
{"id": "aae6e17c-cabf-4007-8e61-a083318ec8d6", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce adaptive weight update\n                fitness_trend = np.mean(fitness) - fitness[i]\n                weight = 0.5 + 0.5 * np.tanh(fitness_trend)\n                positions[i] = np.clip(positions[i] + weight * (2 * np.random.rand(self.dim) - 1), -5.0, 5.0)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO", "description": "Introducing a novel adaptive weight update mechanism based on the fitness trend to guide exploration and exploitation dynamically.", "configspace": "", "generation": 42, "fitness": 0.13277989808588211, "feedback": "The algorithm AdaptiveDynamicLocalSearchEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.2278690630846708, 0.23707465319727494, 0.2865462986613172, 0.22165543124874443, 0.22770298360925512, 0.21123654243042778, 0.2487462717315545, 0.2813360799472998, 0.23722918787522673, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052581047608045495, 0.06962997550024319, 0.0554940243359584, 0.0657806456429385, 0.0926261436919289, 0.06440299356776635, 0.051284049007338406, 0.06863388940865212, 0.05302803952967938, 0.06081668988800959, 0.03759728824280717, 0.08806995828332909, 0.046031389667174905, 0.056484169964747366, 0.046935809184589616, 0.06719718946682829, 0.0559203704416803, 0.06800999631808213, 0.7755895696957069, 0.2951096626199645, 0.6773613557852123, 0.5260016124962362, 0.27460290663680387, 0.6333325137672763, 0.38698870908297023, 0.8016628899628774, 0.38462981630200743, 0.08621193843058372, 0.12146230686560411, 0.1484766503312518, 0.12812740058085614, 0.13942862913088994, 0.13325464383903873, 0.13821405883625282, 0.12349948054718529, 0.13029293180675794, 0.17694281258921585, 0.1565362013797007, 0.19121428158088472, 0.19201326992783174, 0.1462074457004615, 0.15120332352992105, 0.17422131780461914, 0.2137334772506162, 0.14757102884418727, 0.0451767367994238, 0.04864837165327862, 0.06021072131702021, 0.02721843360555609, 0.03637368356899917, 0.052902745253899375, 0.026897303335371325, 0.052904446841678276, 0.07038199807792878, 0.10673927968453767, 0.12769051352255012, 0.10139330104628352, 0.10349554219902002, 0.0987705463165457, 0.10846017067553004, 0.08062606793372107, 0.11231974494281416, 0.15848659206247573, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03647554928248353, 0.10614126070402963, 0.0544309794365434, 0.06066684183927851, 0.05149483414982858, 0.05761965540486802, 0.03293685410976177, 0.05398477835664217, 0.09296391477081101, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011697917437133443, 0.020251339868628038, 0.02346533742359347, 0.009795316563645073, 0.003265534780047319, 9.999999999998899e-05, 0.012665387888122104, 0.0031223507039292997, 0.016114863508438937, 0.23259297877901752, 0.23538498639558747, 0.27404198374506983, 0.2739342521989332, 0.2507571471923258, 0.2454961495516763, 0.23874614275987283, 0.2728367227173222, 0.2454335593087339, 0.05695548173121401, 0.055071561086172505, 0.0643469668725496, 0.06766338362004098, 0.07604617065604602, 0.07120204277219366, 0.06179617690051842, 0.06863993099032928, 0.07241131291662806, 0.17522946095132796, 0.15119878484460714, 0.1199473139675421, 0.136361933282787, 0.16642171882711554, 0.15972508832617893, 0.16002343229827332, 0.1386916115808724, 0.134296936279382, 0.1858000520783616, 0.17935819235207728, 0.1797930893024723, 0.20628597135940396, 0.19778323113697283, 0.18547255084081427, 0.20119087012878623, 0.2036316939548266, 0.1885565546006691, 0.12458852886880867, 0.13049953254792002, 0.13803933380952316, 0.11401266168935109, 0.11228763475061665, 0.09521192501327691, 0.13977930367647828, 0.1459214814541827, 0.1490900420854432, 0.17231674477065406, 0.16066969704945255, 0.16918557387567745, 0.18221097938990527, 0.18282477956677334, 0.16866036161825193, 0.162801665443853, 0.18555700103723916, 0.18889216459713676, 0.16510169388044993, 0.16633207040663534, 0.15951348872428495, 0.15524721688674292, 0.15392664087003904, 0.15452344150274533, 0.1548703025821665, 0.14806373649167837, 0.15898854816078256, 0.14518562647887134, 0.24367745725159662, 0.16390297415347688, 0.16956305412143735, 0.1666540261340177, 0.1826084302558859, 0.1559625241434367, 0.27617292116865844, 0.16432186891442013, 0.16534298933024405, 0.19901918635770155, 0.23827591803537784, 0.26263095599870445, 0.17711398690060198, 0.17002544630528882, 0.1672043872991864, 0.25217512987531376, 0.2745678492128776, 0.17815225966598758, 0.1965622346569238, 0.19521887860204912, 0.17967917071581518, 0.19038242625809976, 0.18900668027352874, 0.17468465139282385, 0.18553353014460505, 0.1763670203353922, 0.047828644942451315, 0.05838921355426652, 0.07116020231016063, 0.06411530154172962, 0.059502980226668445, 0.058279307733179686, 0.06290899358795177, 0.0843363284738251, 0.05930411121630985]}, "mutation_prompt": null}
{"id": "c2287d80-606c-4f02-8a8c-4ddfe5b0ae8e", "solution": "import numpy as np\n\nclass DynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicLocalSearchEGWO", "description": "Introducing a dynamic local search mechanism to exploit promising regions and accelerate convergence in the optimization process.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.26079807998161475, 0.25370519694792715, 0.2832902782852714, 0.2427655012494946, 0.2257797464441047, 0.20461079355923628, 0.2512148944238244, 0.2689696202604094, 0.28928826294463506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028991102965230442, 9.999999999998899e-05, 0.002479049995991911, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07596463265177122, 0.051511788406105374, 0.051646424693632786, 0.08335682788384635, 0.07820616845277417, 0.05899062106109065, 0.07801574514304088, 0.0724353813131201, 0.08704934024600264, 0.05047340893010477, 0.044226568217622275, 0.06898041226895457, 0.0596331498887499, 0.08192632505964048, 0.052936139501477686, 0.047421272505755785, 0.07503392125182962, 0.06178819145168235, 0.914817020617437, 0.8804452438058202, 0.903726788057482, 0.8251570058415243, 0.9364077222834006, 0.5215689040327629, 0.7070398817873448, 0.8631477521199341, 0.8845299224712146, 0.10759712441459668, 0.10360535502697021, 0.09878204326765205, 0.14818047799245337, 0.10899155165482022, 0.1144052460556022, 0.1325381117828045, 0.15880710097401662, 0.10916828971738812, 0.2066015336792203, 0.13556923102515117, 0.18861718254269677, 0.16065719666084555, 0.15575522415573573, 0.1328497936492007, 0.1411009460182986, 0.1729802419833204, 0.16658538301937442, 0.09466083999222086, 0.09744487081129083, 0.08550202237459248, 0.0081403156289247, 0.06768010525791213, 0.0532228043720977, 0.01898860641903921, 0.10869243441859999, 0.08964384709379136, 0.166860603446919, 0.1393007407896939, 0.14900281418225025, 0.14849393314045134, 0.16967637874137875, 0.17488313005035339, 0.19890955995415693, 0.15869166226075682, 0.15819396703656252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056351180123178524, 0.030651363837808643, 0.07819635243590295, 0.07253621718235681, 0.02738485967643378, 0.06251911852918779, 0.07722288586591253, 0.03181298340161576, 0.11358396400702131, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013305489656010305, 0.019217914077023668, 0.004791577222646115, 0.006777131467916808, 0.008356161817307695, 9.999999999998899e-05, 0.024089370350374506, 0.0006769838298033015, 0.0035589196689328473, 0.23982241905858503, 0.2590590011961599, 0.26874340462036794, 0.22790906468542993, 0.2553922743313699, 0.24095576135506802, 0.2505759693597036, 0.2879071493948442, 0.2612069217974258, 0.0684656077669108, 0.06509146585937542, 0.05531754063208605, 0.060103917024896925, 0.05996567042789358, 0.07731788155873187, 0.05852295434849619, 0.06473828555196692, 0.06693846404701365, 0.13940086840544974, 0.13627209514022032, 0.12329817007509425, 0.1734396310366395, 0.1521135471670617, 0.15658609056241457, 0.1818868021749368, 0.13448965360750098, 0.1530693697837482, 0.1822886668830236, 0.18909105022865158, 0.17194847939519298, 0.24063007827068283, 0.1770539895434775, 0.19881132576671867, 0.2221324320078304, 0.20132201934228078, 0.17450798054498606, 0.13516552743778354, 0.13104280628442921, 0.11638153551081831, 0.1662862831498585, 0.1443517716546754, 0.1753272766073335, 0.12355168020139462, 0.13224336874357356, 0.09359156810850378, 0.21943220856180434, 0.1657705794593034, 0.2264544372609668, 0.21060465818478036, 0.18020029265826176, 0.15586176390448692, 0.16981992337140805, 0.16878710246717, 0.19160559323069715, 0.1642560279323949, 0.16006634897458827, 0.17253855791319728, 0.16416348790914181, 0.160605383321889, 0.15224299161651944, 0.16361330805017438, 0.15841681280332154, 0.159521615143575, 0.17688435524373325, 0.2043453714508795, 0.24110269002925522, 0.2360463165774913, 0.1788077776768927, 0.27061381811403173, 0.14217006392124043, 0.19682684794680005, 0.2135541957311783, 0.32219942574978666, 0.24060118912498463, 0.12637985118352935, 0.14327297178505938, 0.1679643139177528, 0.23506092156228175, 0.26189402204337153, 0.19839071730466018, 0.24134381931982518, 0.18406850354537374, 0.19544370630893937, 0.18086312512656977, 0.1877533593927535, 0.19762620271441134, 0.17053904553576738, 0.1713712558811178, 0.17309181343228885, 0.1964670889314194, 0.04988893371285852, 0.05995326031639292, 0.08054039693880166, 0.07207331658859262, 0.06917921660358661, 0.10173652049052839, 0.05468450101290978, 0.06378644521144483, 0.06328248922576263]}, "mutation_prompt": null}
{"id": "9dafaec5-8b23-4659-bae3-42dd91d78c10", "solution": "import numpy as np\n\nclass FastDynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    # Modified update formula to increase influence of the best position\n                    positions[i] = np.clip(positions[i] + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c3 * best_position - positions[i]), -5.0, 5.0)\n\n                if np.random.rand() < 0.3: \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "FastDynamicLocalSearchEGWO", "description": "Enhancing convergence speed by increasing the influence of the best position on updating other positions through a modified formula.", "configspace": "", "generation": 44, "fitness": 0.15070173493771907, "feedback": "The algorithm FastDynamicLocalSearchEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.18.", "error": "", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.24902657920792692, 0.2751601102922746, 0.2947914027351195, 0.19612638131536153, 0.21961244178597306, 0.19737297180292146, 0.2527698098880047, 0.24038725116481996, 0.2681774167925014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002795638056123595, 9.999999999998899e-05, 0.016352453373915332, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05006124046180216, 0.08765567263494234, 0.06338213544586069, 0.06638634339898275, 0.05379498345979428, 0.056204870973966536, 0.06579919311315408, 0.08379125587918645, 0.06718876924435113, 0.03109866279716167, 0.044427532342254716, 0.06524206716014547, 0.07711980686982933, 0.0649984394122779, 0.047426520796250426, 0.04953200027934057, 0.05161063735859639, 0.06225097864550522, 0.9145666462358121, 0.8964614534530644, 0.9420851440899288, 0.9707702460174419, 0.9790960965022517, 0.8792892392369525, 0.8208540883384698, 0.8244654643269712, 0.8841628071377164, 0.10521621742442078, 0.10676723905237107, 0.09889638790540323, 0.13687522501454774, 0.12111493695207609, 0.13504320199741382, 0.09258515411483426, 0.1360752631839005, 0.10377324530252519, 0.18958398170464474, 0.21053061804069606, 0.18839443455901494, 0.1310201862211392, 0.16086149242590364, 0.16977280659136762, 0.15094017962336315, 0.1858917413412845, 0.13692673401351463, 0.0822437136295937, 0.02776214532644916, 0.08903503358312304, 0.05367941846893287, 0.09830371413384231, 0.06159167678597621, 0.03399027816187483, 0.056167339978289044, 0.036581700176771315, 0.1439169448052211, 0.1568183217218173, 0.11553242082100201, 0.1355463773019534, 0.1720295534856372, 0.16971987515524356, 0.17012780504501157, 0.12232838751237685, 0.12266607151285558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04595322968937576, 0.09706126506301915, 0.04677757627047885, 0.05900395978078998, 0.0558788745175014, 0.03726370692501191, 0.057958934245702975, 0.04548425672529299, 0.0651971677249874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007128547227007065, 0.015271045284940388, 0.0031293379351574613, 9.999999999998899e-05, 0.00984143912704627, 9.999999999998899e-05, 0.01212946883330368, 0.015199196947207616, 0.010642876229908893, 0.2430802782175837, 0.2458053584549169, 0.22476785564102642, 0.2549694340110771, 0.2255957147346841, 0.2855542722487715, 0.2294705867584902, 0.2469488617588831, 0.2649819393354239, 0.05945835305157221, 0.04109991999875273, 0.058923432239482154, 0.06869516589791969, 0.07064499007578307, 0.07489981691679148, 0.06831599013050704, 0.07290125247285117, 0.0597294572567294, 0.14394298782861648, 0.13341495219606736, 0.13667611639870758, 0.1576727022150275, 0.14544583598391925, 0.15837385652466385, 0.15778244429712196, 0.1382096161170504, 0.13450969524759038, 0.1837004530769908, 0.18420083062334347, 0.1867531767811954, 0.2204659054928788, 0.22383374057052863, 0.2167424534372231, 0.20577923935027598, 0.188495042303229, 0.17893071693380502, 0.14411191344426466, 0.1502022848756367, 0.13388849397755798, 0.12165492388112764, 0.15387598528604163, 0.18402125044649076, 0.1185823208033211, 0.13197816558999298, 0.13043681100849847, 0.20161118457449734, 0.2068946799906053, 0.19888527577140835, 0.22334936044827625, 0.18987776705103976, 0.24179429347656156, 0.173064869210528, 0.20238516814832896, 0.20371768746296592, 0.1647412096480061, 0.1637715674718977, 0.1617381581770687, 0.1620644995694296, 0.16713375670541608, 0.15880266862574843, 0.1651597284921832, 0.16109347669860563, 0.1692348628293614, 0.169833055978321, 0.1268936537012436, 0.17515282242546715, 0.24989260498329435, 0.16054839637783713, 0.164302368620175, 0.15340201112239393, 0.14453036464826907, 0.18805305053170351, 0.3252960611783393, 0.1553841097320413, 0.28159489296548235, 0.2029457087659864, 0.32674269894854613, 0.1606272530898395, 0.17854683937617788, 0.11915554900435577, 0.21885777566803877, 0.17950163483301929, 0.18413132100713325, 0.18393610019106588, 0.18661757775544097, 0.1674976790598024, 0.1790757444211173, 0.1896794974340834, 0.1801903661477665, 0.1865475412317934, 0.06641133834165414, 0.05883455886784705, 0.05982980964238738, 0.05755941936756337, 0.05614984871438122, 0.05352826269199473, 0.05479982780062076, 0.059053507444416176, 0.06440122860530284]}, "mutation_prompt": null}
{"id": "8da74e7e-0342-4fcc-8fb5-468ccbd388d8", "solution": "import numpy as np\n\nclass EnhancedDynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce probabilistic selection for diversity\n                if np.random.rand() < np.exp(-0.1 * np.linalg.norm(positions[i] - best_position)):  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "EnhancedDynamicLocalSearchEGWO", "description": "Implementing a probabilistic selection mechanism for updating candidate solutions to promote diversity and exploration in the search space.", "configspace": "", "generation": 45, "fitness": 0.14335975329652423, "feedback": "The algorithm EnhancedDynamicLocalSearchEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.15.", "error": "", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.2655237709123748, 0.27351900586906697, 0.27074303247211073, 0.23328690007034947, 0.21827900660476451, 0.20733727126173795, 0.2608283297823758, 0.282392582345657, 0.2578609600174524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020162584305453146, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054449046128656975, 0.05465167397632098, 0.06710308593908898, 0.06820529920916929, 0.06657701939300442, 0.06617943677024818, 0.060269385573571865, 0.08450039689156996, 0.08782545416585619, 0.06848180721064623, 0.05283193480631343, 0.054148313823090266, 0.05235337904322801, 0.05138245029692079, 0.05396596258266795, 0.047327692689023926, 0.06440228305450657, 0.05635720987814841, 0.6999066407200737, 0.5709807123944478, 0.37120356320608605, 0.8480640112338714, 0.7199037339894974, 0.7383095736672571, 0.8406398445496958, 0.6512581444941804, 0.9503926989447147, 0.10437071995055136, 0.12272613809011168, 0.1277021718475989, 0.04180021214634089, 0.13655520227738904, 0.1715384403403155, 0.10241243435226044, 0.13027811678488366, 0.14803673814871887, 0.21765133943422244, 0.19158949985961504, 0.18886146392274095, 0.1631244028114901, 0.19297925151249995, 0.14867536426824468, 0.1674234576392304, 0.15734080202114908, 0.1754262975605272, 0.09923679079339232, 0.07467180283808972, 0.10056446545249675, 0.025396141392024618, 0.025084617155740174, 0.056845808503241835, 0.09815305570497679, 0.09808611780170173, 0.03777401116562562, 0.1331701503585817, 0.15688358311403827, 0.1571718211109543, 0.13747936668662264, 0.15296368910979652, 0.12517737361192927, 0.1512863445697622, 0.138959053183922, 0.15908117258161492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03882911185946303, 0.06778140161771495, 0.04737464208289599, 0.051309325194837774, 0.04487762735234169, 0.07033772735256005, 0.06567475854921978, 0.0610200060433328, 0.1281126400266006, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011570930699938753, 0.010990736468456053, 0.015659590360407316, 0.01597236113373368, 0.01572929396917877, 0.012968699497840186, 0.008593409851289424, 0.22789068795350897, 0.22562033404912485, 0.24620833892055893, 0.23496421392133926, 0.24708154696410134, 0.2689755950153724, 0.25060211312108105, 0.27245769715885604, 0.27845246225846265, 0.06151731179943909, 0.06659010115923936, 0.04922008321331828, 0.07210351316835872, 0.05891762231634734, 0.06954571016391364, 0.08076264061094374, 0.063719638214071, 0.07389264173483079, 0.11149743282283509, 0.1513685389747892, 0.14230582818469906, 0.1380937653328529, 0.15525251724458922, 0.12289700173127294, 0.13713521765299752, 0.1519466626064706, 0.14247271509426696, 0.2003044396768776, 0.18178980144697476, 0.15545589187662168, 0.1955077215210257, 0.23712214409171994, 0.22767797643753462, 0.14978840871956223, 0.188487496138957, 0.17683720262730263, 0.10422301523825694, 0.1421656084140679, 0.11211209384169307, 0.14072727179880107, 0.1533820730219102, 0.1635656675527265, 0.130425147872553, 0.1418026608585764, 0.09708779366831799, 0.1967916432537008, 0.18040693504987282, 0.19052828337512762, 0.24016629882373308, 0.20265095700697844, 0.20466021021014635, 0.1781906298153293, 0.22917855260747722, 0.19273108419548768, 0.16278761680719545, 0.15872245083472447, 0.1642198231739347, 0.15892523890261379, 0.16493509419260932, 0.16361441500854013, 0.1630766823856471, 0.16636379327025863, 0.1661306086912151, 0.14975076199546622, 0.1883963775632268, 0.16044316636874156, 0.17702740805910366, 0.2360480040302022, 0.1634326441633771, 0.11725458210605033, 0.17122508094794653, 0.17658770159630333, 0.30444126258061355, 0.1672496075998715, 0.1691131333398309, 0.25071988493782216, 0.18998347776862434, 0.11850340091436795, 0.14625285963272705, 0.2151301051668434, 0.2525205455351358, 0.2134959924050931, 0.19077400269950373, 0.19469049486292056, 0.17723063311354859, 0.18697007274638, 0.18304764762076653, 0.1847540978999973, 0.1788571567624947, 0.16912116315589587, 0.059645487618848914, 0.053571549179332045, 0.06907545997375308, 0.059537322190540753, 0.0641551547885647, 0.0677395098991912, 0.06140979604523278, 0.07318041320271662, 0.0626522113470761]}, "mutation_prompt": null}
{"id": "4d7ea17f-5845-4f32-adb3-7be04c23d2ad", "solution": "import numpy as np\n\nclass DynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicLocalSearchEGWO", "description": "Introducing a dynamic local search mechanism to exploit promising regions and accelerate convergence in the optimization process.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.26079807998161475, 0.25370519694792715, 0.2832902782852714, 0.2427655012494946, 0.2257797464441047, 0.20461079355923628, 0.2512148944238244, 0.2689696202604094, 0.28928826294463506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028991102965230442, 9.999999999998899e-05, 0.002479049995991911, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07596463265177122, 0.051511788406105374, 0.051646424693632786, 0.08335682788384635, 0.07820616845277417, 0.05899062106109065, 0.07801574514304088, 0.0724353813131201, 0.08704934024600264, 0.05047340893010477, 0.044226568217622275, 0.06898041226895457, 0.0596331498887499, 0.08192632505964048, 0.052936139501477686, 0.047421272505755785, 0.07503392125182962, 0.06178819145168235, 0.914817020617437, 0.8804452438058202, 0.903726788057482, 0.8251570058415243, 0.9364077222834006, 0.5215689040327629, 0.7070398817873448, 0.8631477521199341, 0.8845299224712146, 0.10759712441459668, 0.10360535502697021, 0.09878204326765205, 0.14818047799245337, 0.10899155165482022, 0.1144052460556022, 0.1325381117828045, 0.15880710097401662, 0.10916828971738812, 0.2066015336792203, 0.13556923102515117, 0.18861718254269677, 0.16065719666084555, 0.15575522415573573, 0.1328497936492007, 0.1411009460182986, 0.1729802419833204, 0.16658538301937442, 0.09466083999222086, 0.09744487081129083, 0.08550202237459248, 0.0081403156289247, 0.06768010525791213, 0.0532228043720977, 0.01898860641903921, 0.10869243441859999, 0.08964384709379136, 0.166860603446919, 0.1393007407896939, 0.14900281418225025, 0.14849393314045134, 0.16967637874137875, 0.17488313005035339, 0.19890955995415693, 0.15869166226075682, 0.15819396703656252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056351180123178524, 0.030651363837808643, 0.07819635243590295, 0.07253621718235681, 0.02738485967643378, 0.06251911852918779, 0.07722288586591253, 0.03181298340161576, 0.11358396400702131, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013305489656010305, 0.019217914077023668, 0.004791577222646115, 0.006777131467916808, 0.008356161817307695, 9.999999999998899e-05, 0.024089370350374506, 0.0006769838298033015, 0.0035589196689328473, 0.23982241905858503, 0.2590590011961599, 0.26874340462036794, 0.22790906468542993, 0.2553922743313699, 0.24095576135506802, 0.2505759693597036, 0.2879071493948442, 0.2612069217974258, 0.0684656077669108, 0.06509146585937542, 0.05531754063208605, 0.060103917024896925, 0.05996567042789358, 0.07731788155873187, 0.05852295434849619, 0.06473828555196692, 0.06693846404701365, 0.13940086840544974, 0.13627209514022032, 0.12329817007509425, 0.1734396310366395, 0.1521135471670617, 0.15658609056241457, 0.1818868021749368, 0.13448965360750098, 0.1530693697837482, 0.1822886668830236, 0.18909105022865158, 0.17194847939519298, 0.24063007827068283, 0.1770539895434775, 0.19881132576671867, 0.2221324320078304, 0.20132201934228078, 0.17450798054498606, 0.13516552743778354, 0.13104280628442921, 0.11638153551081831, 0.1662862831498585, 0.1443517716546754, 0.1753272766073335, 0.12355168020139462, 0.13224336874357356, 0.09359156810850378, 0.21943220856180434, 0.1657705794593034, 0.2264544372609668, 0.21060465818478036, 0.18020029265826176, 0.15586176390448692, 0.16981992337140805, 0.16878710246717, 0.19160559323069715, 0.1642560279323949, 0.16006634897458827, 0.17253855791319728, 0.16416348790914181, 0.160605383321889, 0.15224299161651944, 0.16361330805017438, 0.15841681280332154, 0.159521615143575, 0.17688435524373325, 0.2043453714508795, 0.24110269002925522, 0.2360463165774913, 0.1788077776768927, 0.27061381811403173, 0.14217006392124043, 0.19682684794680005, 0.2135541957311783, 0.32219942574978666, 0.24060118912498463, 0.12637985118352935, 0.14327297178505938, 0.1679643139177528, 0.23506092156228175, 0.26189402204337153, 0.19839071730466018, 0.24134381931982518, 0.18406850354537374, 0.19544370630893937, 0.18086312512656977, 0.1877533593927535, 0.19762620271441134, 0.17053904553576738, 0.1713712558811178, 0.17309181343228885, 0.1964670889314194, 0.04988893371285852, 0.05995326031639292, 0.08054039693880166, 0.07207331658859262, 0.06917921660358661, 0.10173652049052839, 0.05468450101290978, 0.06378644521144483, 0.06328248922576263]}, "mutation_prompt": null}
{"id": "984dc282-b18f-4a5f-b8d3-6c5bd55e0a20", "solution": "import numpy as np\n\nclass DynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicLocalSearchEGWO", "description": "Introducing a dynamic local search mechanism to exploit promising regions and accelerate convergence in the optimization process.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.26079807998161475, 0.25370519694792715, 0.2832902782852714, 0.2427655012494946, 0.2257797464441047, 0.20461079355923628, 0.2512148944238244, 0.2689696202604094, 0.28928826294463506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028991102965230442, 9.999999999998899e-05, 0.002479049995991911, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07596463265177122, 0.051511788406105374, 0.051646424693632786, 0.08335682788384635, 0.07820616845277417, 0.05899062106109065, 0.07801574514304088, 0.0724353813131201, 0.08704934024600264, 0.05047340893010477, 0.044226568217622275, 0.06898041226895457, 0.0596331498887499, 0.08192632505964048, 0.052936139501477686, 0.047421272505755785, 0.07503392125182962, 0.06178819145168235, 0.914817020617437, 0.8804452438058202, 0.903726788057482, 0.8251570058415243, 0.9364077222834006, 0.5215689040327629, 0.7070398817873448, 0.8631477521199341, 0.8845299224712146, 0.10759712441459668, 0.10360535502697021, 0.09878204326765205, 0.14818047799245337, 0.10899155165482022, 0.1144052460556022, 0.1325381117828045, 0.15880710097401662, 0.10916828971738812, 0.2066015336792203, 0.13556923102515117, 0.18861718254269677, 0.16065719666084555, 0.15575522415573573, 0.1328497936492007, 0.1411009460182986, 0.1729802419833204, 0.16658538301937442, 0.09466083999222086, 0.09744487081129083, 0.08550202237459248, 0.0081403156289247, 0.06768010525791213, 0.0532228043720977, 0.01898860641903921, 0.10869243441859999, 0.08964384709379136, 0.166860603446919, 0.1393007407896939, 0.14900281418225025, 0.14849393314045134, 0.16967637874137875, 0.17488313005035339, 0.19890955995415693, 0.15869166226075682, 0.15819396703656252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056351180123178524, 0.030651363837808643, 0.07819635243590295, 0.07253621718235681, 0.02738485967643378, 0.06251911852918779, 0.07722288586591253, 0.03181298340161576, 0.11358396400702131, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013305489656010305, 0.019217914077023668, 0.004791577222646115, 0.006777131467916808, 0.008356161817307695, 9.999999999998899e-05, 0.024089370350374506, 0.0006769838298033015, 0.0035589196689328473, 0.23982241905858503, 0.2590590011961599, 0.26874340462036794, 0.22790906468542993, 0.2553922743313699, 0.24095576135506802, 0.2505759693597036, 0.2879071493948442, 0.2612069217974258, 0.0684656077669108, 0.06509146585937542, 0.05531754063208605, 0.060103917024896925, 0.05996567042789358, 0.07731788155873187, 0.05852295434849619, 0.06473828555196692, 0.06693846404701365, 0.13940086840544974, 0.13627209514022032, 0.12329817007509425, 0.1734396310366395, 0.1521135471670617, 0.15658609056241457, 0.1818868021749368, 0.13448965360750098, 0.1530693697837482, 0.1822886668830236, 0.18909105022865158, 0.17194847939519298, 0.24063007827068283, 0.1770539895434775, 0.19881132576671867, 0.2221324320078304, 0.20132201934228078, 0.17450798054498606, 0.13516552743778354, 0.13104280628442921, 0.11638153551081831, 0.1662862831498585, 0.1443517716546754, 0.1753272766073335, 0.12355168020139462, 0.13224336874357356, 0.09359156810850378, 0.21943220856180434, 0.1657705794593034, 0.2264544372609668, 0.21060465818478036, 0.18020029265826176, 0.15586176390448692, 0.16981992337140805, 0.16878710246717, 0.19160559323069715, 0.1642560279323949, 0.16006634897458827, 0.17253855791319728, 0.16416348790914181, 0.160605383321889, 0.15224299161651944, 0.16361330805017438, 0.15841681280332154, 0.159521615143575, 0.17688435524373325, 0.2043453714508795, 0.24110269002925522, 0.2360463165774913, 0.1788077776768927, 0.27061381811403173, 0.14217006392124043, 0.19682684794680005, 0.2135541957311783, 0.32219942574978666, 0.24060118912498463, 0.12637985118352935, 0.14327297178505938, 0.1679643139177528, 0.23506092156228175, 0.26189402204337153, 0.19839071730466018, 0.24134381931982518, 0.18406850354537374, 0.19544370630893937, 0.18086312512656977, 0.1877533593927535, 0.19762620271441134, 0.17053904553576738, 0.1713712558811178, 0.17309181343228885, 0.1964670889314194, 0.04988893371285852, 0.05995326031639292, 0.08054039693880166, 0.07207331658859262, 0.06917921660358661, 0.10173652049052839, 0.05468450101290978, 0.06378644521144483, 0.06328248922576263]}, "mutation_prompt": null}
{"id": "c8afc703-f1d1-4a73-a068-60d56f3a2a05", "solution": "import numpy as np\n\nclass DynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicLocalSearchEGWO", "description": "Introducing a dynamic local search mechanism to exploit promising regions and accelerate convergence in the optimization process.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.26079807998161475, 0.25370519694792715, 0.2832902782852714, 0.2427655012494946, 0.2257797464441047, 0.20461079355923628, 0.2512148944238244, 0.2689696202604094, 0.28928826294463506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028991102965230442, 9.999999999998899e-05, 0.002479049995991911, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07596463265177122, 0.051511788406105374, 0.051646424693632786, 0.08335682788384635, 0.07820616845277417, 0.05899062106109065, 0.07801574514304088, 0.0724353813131201, 0.08704934024600264, 0.05047340893010477, 0.044226568217622275, 0.06898041226895457, 0.0596331498887499, 0.08192632505964048, 0.052936139501477686, 0.047421272505755785, 0.07503392125182962, 0.06178819145168235, 0.914817020617437, 0.8804452438058202, 0.903726788057482, 0.8251570058415243, 0.9364077222834006, 0.5215689040327629, 0.7070398817873448, 0.8631477521199341, 0.8845299224712146, 0.10759712441459668, 0.10360535502697021, 0.09878204326765205, 0.14818047799245337, 0.10899155165482022, 0.1144052460556022, 0.1325381117828045, 0.15880710097401662, 0.10916828971738812, 0.2066015336792203, 0.13556923102515117, 0.18861718254269677, 0.16065719666084555, 0.15575522415573573, 0.1328497936492007, 0.1411009460182986, 0.1729802419833204, 0.16658538301937442, 0.09466083999222086, 0.09744487081129083, 0.08550202237459248, 0.0081403156289247, 0.06768010525791213, 0.0532228043720977, 0.01898860641903921, 0.10869243441859999, 0.08964384709379136, 0.166860603446919, 0.1393007407896939, 0.14900281418225025, 0.14849393314045134, 0.16967637874137875, 0.17488313005035339, 0.19890955995415693, 0.15869166226075682, 0.15819396703656252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056351180123178524, 0.030651363837808643, 0.07819635243590295, 0.07253621718235681, 0.02738485967643378, 0.06251911852918779, 0.07722288586591253, 0.03181298340161576, 0.11358396400702131, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013305489656010305, 0.019217914077023668, 0.004791577222646115, 0.006777131467916808, 0.008356161817307695, 9.999999999998899e-05, 0.024089370350374506, 0.0006769838298033015, 0.0035589196689328473, 0.23982241905858503, 0.2590590011961599, 0.26874340462036794, 0.22790906468542993, 0.2553922743313699, 0.24095576135506802, 0.2505759693597036, 0.2879071493948442, 0.2612069217974258, 0.0684656077669108, 0.06509146585937542, 0.05531754063208605, 0.060103917024896925, 0.05996567042789358, 0.07731788155873187, 0.05852295434849619, 0.06473828555196692, 0.06693846404701365, 0.13940086840544974, 0.13627209514022032, 0.12329817007509425, 0.1734396310366395, 0.1521135471670617, 0.15658609056241457, 0.1818868021749368, 0.13448965360750098, 0.1530693697837482, 0.1822886668830236, 0.18909105022865158, 0.17194847939519298, 0.24063007827068283, 0.1770539895434775, 0.19881132576671867, 0.2221324320078304, 0.20132201934228078, 0.17450798054498606, 0.13516552743778354, 0.13104280628442921, 0.11638153551081831, 0.1662862831498585, 0.1443517716546754, 0.1753272766073335, 0.12355168020139462, 0.13224336874357356, 0.09359156810850378, 0.21943220856180434, 0.1657705794593034, 0.2264544372609668, 0.21060465818478036, 0.18020029265826176, 0.15586176390448692, 0.16981992337140805, 0.16878710246717, 0.19160559323069715, 0.1642560279323949, 0.16006634897458827, 0.17253855791319728, 0.16416348790914181, 0.160605383321889, 0.15224299161651944, 0.16361330805017438, 0.15841681280332154, 0.159521615143575, 0.17688435524373325, 0.2043453714508795, 0.24110269002925522, 0.2360463165774913, 0.1788077776768927, 0.27061381811403173, 0.14217006392124043, 0.19682684794680005, 0.2135541957311783, 0.32219942574978666, 0.24060118912498463, 0.12637985118352935, 0.14327297178505938, 0.1679643139177528, 0.23506092156228175, 0.26189402204337153, 0.19839071730466018, 0.24134381931982518, 0.18406850354537374, 0.19544370630893937, 0.18086312512656977, 0.1877533593927535, 0.19762620271441134, 0.17053904553576738, 0.1713712558811178, 0.17309181343228885, 0.1964670889314194, 0.04988893371285852, 0.05995326031639292, 0.08054039693880166, 0.07207331658859262, 0.06917921660358661, 0.10173652049052839, 0.05468450101290978, 0.06378644521144483, 0.06328248922576263]}, "mutation_prompt": null}
{"id": "f9036be5-9994-4d8d-86c3-c5347af206d2", "solution": "import numpy as np\n\nclass AdaptiveInertiaDynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c, w):\n            return np.clip(position + a * w * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        w = 0.5  # Initial inertia weight\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            w = max(0.1, w - 0.4 / self.budget)  # Update inertia weight\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2, w)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3, w)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "AdaptiveInertiaDynamicLocalSearchEGWO", "description": "Introducing adaptive inertia weight to balance exploration and exploitation for faster convergence.", "configspace": "", "generation": 49, "fitness": 0.12670110735379264, "feedback": "The algorithm AdaptiveInertiaDynamicLocalSearchEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.23886581536616414, 0.3002135012828612, 0.27716358814157915, 0.16867279134279012, 0.23659760421409937, 0.2294303720512345, 0.22992885575982702, 0.24124449980926355, 0.2765893148900258, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017272676726202363, 0.034802885156434815, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0649183256265895, 0.07528910046085091, 0.03749009095257083, 0.08288847612788608, 0.06143576112564819, 0.06883845695419333, 0.08315192104501079, 0.07824657718133143, 0.11567598043284144, 0.04107154555991632, 0.0577801410177925, 0.045643924852163176, 0.04137517646311695, 0.05032988254917403, 0.06743399046833198, 0.052021346489633524, 0.04487107248005373, 0.049712363867629006, 0.34607762181617374, 0.7989732452994134, 0.22093800671915131, 0.6571743357355309, 0.1790119804734155, 0.09787216427728962, 0.21535276951516003, 0.23959018160062906, 0.37380418232810153, 0.10594459890574981, 0.03522703220170165, 0.08509619873825436, 0.14267280029233675, 0.16827529794011575, 0.09464967315890205, 0.13663669396467593, 0.07735750042388667, 0.09980032240159287, 0.14806967448869712, 0.13334837201304894, 0.14211017299360085, 0.14071615368760704, 0.13632417672944408, 0.1315326329689187, 0.1818455912858462, 0.13702004425684955, 0.1527261410827947, 0.091681828494933, 0.053070728000248035, 0.059824416398660096, 0.00040230953816444703, 0.08039105215007403, 0.03651070195401207, 9.999999999998899e-05, 0.055344601065809185, 0.04485086274659733, 0.17828608265631374, 0.09647885554819657, 0.09204716275897029, 0.05906887768529645, 0.04247140108841796, 0.12230332858629334, 0.13600034589504995, 0.054573604078891336, 0.1315456960312955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10145993632293959, 0.06847764145007873, 0.0471179723253321, 0.024254764332034773, 0.03565150018313301, 0.04596557837736548, 0.09749031590370938, 0.04908315134991004, 0.04214453030948173, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025368190339219998, 0.0044435359312127165, 0.005631135116424546, 0.01455383271988231, 0.0022446440063246254, 0.011545489803944653, 0.014169396858225491, 0.015342146979243854, 0.25718601383556694, 0.2683568068312352, 0.2830911408224528, 0.2610096703072783, 0.26735438798392075, 0.2183339419224024, 0.23261145401077543, 0.27532563353076567, 0.26724415805811197, 0.047528770103183904, 0.05338617937109447, 0.06006908064308958, 0.053142027516389856, 0.06509983286593524, 0.06197154177763009, 0.047243017650585695, 0.0520759403618245, 0.07995496758509579, 0.12176273727612696, 0.13066289664930575, 0.1603098197449232, 0.13873790072725622, 0.1532846514245645, 0.14313034889628906, 0.19228473065128915, 0.1546156326029965, 0.1310002384695632, 0.1722098618471084, 0.1744972858509375, 0.1897705629415537, 0.1543518052408206, 0.21684740424776616, 0.18661830078061237, 0.17567663581980464, 0.20544017194468567, 0.19411205234624518, 0.10505524176150649, 0.12366361560116934, 0.12961763925919856, 0.1502178675323057, 0.1187385266378822, 0.1250880352087952, 0.12119162782598136, 0.15184920933751112, 0.09788332595827454, 0.17415065161387178, 0.19674564032606623, 0.31276449496442493, 0.17732788864562476, 0.2232781391926345, 0.2211375643541138, 0.21184472984269664, 0.17729726966936776, 0.19260217767307009, 0.16476728709895083, 0.17068050371283738, 0.165156955829039, 0.17467282821060814, 0.1689488911182121, 0.16541571090344265, 0.1688395642068008, 0.14756113321264197, 0.1655626869455047, 0.17787354660965538, 0.16160728880994524, 0.14856724843442137, 0.17070232118295392, 0.3670027601216229, 0.27733314689582445, 0.170220102615523, 0.32898906451814025, 0.12339419731442869, 0.28167740729101653, 0.1466197523654913, 0.3262588412798707, 0.17720988252630687, 0.17134529138207177, 0.2273020593718561, 0.2986597348442812, 0.30915110757418596, 0.2151668313526479, 0.1839585412451452, 0.1829034250044307, 0.18616316381099063, 0.17507334784483664, 0.19977829756912946, 0.17804932640122384, 0.18347296389215573, 0.17833398915171494, 0.18718367202245267, 0.07064209465450255, 0.06568404147590046, 0.0721735613133827, 0.05859832754371941, 0.06300196409496461, 0.07716110893546735, 0.05446075630964009, 0.061939286639922875, 0.07182470605787716]}, "mutation_prompt": null}
{"id": "a3cef848-7a16-4db0-bd36-c24a46e09efb", "solution": "import numpy as np\n\nclass AdaptiveMutationDynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                \n                # Adaptive mutation rates based on individual performance\n                mutation_rate = max(0.3, 0.5 - _ / self.budget)  # Adapt mutation rate based on iteration\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2 * mutation_rate)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3 * mutation_rate, c3 * mutation_rate)\n                \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "AdaptiveMutationDynamicLocalSearchEGWO", "description": "Introducing adaptive mutation rates based on individual performance to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 50, "fitness": 0.10487092456489401, "feedback": "The algorithm AdaptiveMutationDynamicLocalSearchEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.2534578762409213, 0.24287912903493447, 0.1409876750002479, 0.15735968821058344, 0.13799994321512643, 0.07470272521783006, 0.19921031855966453, 0.18249988151445218, 0.17819625643625003, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04517571085906347, 0.045107238815536244, 0.053028729283677745, 0.05466967479385043, 0.06451137882309854, 0.07840022224449006, 0.05503809060684983, 0.04706994662899655, 0.0531447514287009, 0.04573118180437541, 0.04410978188350634, 0.039983731565139013, 0.03938658064939571, 0.057449117083320345, 0.04651177325394584, 0.030339144609413782, 0.06312443852816485, 0.03490574019967829, 0.09827976841292385, 0.11158659240850133, 0.07032674406940276, 0.08140047114333193, 0.10383326849759211, 0.05974898934990125, 0.08151185057800958, 0.08520265394383619, 0.07850479008451294, 0.06154879086876486, 0.03178735730246318, 0.05022635383601304, 0.05230151250723525, 0.067572634243105, 0.08522506592221202, 0.08059131456271373, 0.051694219587024026, 9.999999999998899e-05, 0.15044120299565533, 0.13264089910989663, 0.17298745717280295, 0.21861355172891972, 0.11657828546597959, 0.1048072464014358, 0.10635084897355196, 0.15165057773247648, 0.12318948630014714, 0.05794705860036142, 0.0975982604536152, 0.07043085102132629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042760451968207436, 0.06523032613049817, 0.14682805842821633, 0.11382975471736112, 0.1767074050869205, 0.14245405568416192, 0.1437948653475003, 0.12861380931621003, 0.22031211198368916, 0.09868721098930477, 0.21428037763083885, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0683640514381535, 0.08777198758171056, 0.09996390454605886, 0.05564559237277589, 0.035452577458735646, 0.048951054630640645, 0.05750059526858897, 0.04849292886372658, 0.07153312039406556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013630858903661447, 0.009633212521903411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19297492314821585, 0.21077555123634795, 0.2000258869106014, 0.22707153788946766, 0.2440309097917095, 0.21912722238746718, 0.2315302991289352, 0.22513546011621388, 0.19573293732352515, 0.014129431328116171, 0.027119214997985197, 0.01918262100277901, 0.05799901327983881, 0.05800479953160498, 0.02760767500221195, 0.05600893787863226, 0.0762659365803049, 0.060148420240205946, 0.11907094775170701, 0.11821333887749785, 0.1248454182412484, 0.12806644919615096, 0.12122810291293828, 0.14854693388202844, 0.17033906780827912, 0.1267594242044876, 0.12182307063850273, 0.16575119017826057, 0.1718153748934539, 0.17247765591096265, 0.21709228499600608, 0.2149114040121498, 0.1710171600063044, 0.14588655286074081, 0.15731111813606424, 0.15169955376656397, 0.09912057385199657, 0.14129450451960934, 0.09637495705191124, 0.13577406891425448, 0.125674735609414, 0.14701432981525997, 0.0991371633376219, 0.1259463985650986, 0.11807629198622982, 0.2545590120481179, 0.26009483911692854, 0.2489271628160954, 0.24029834667053018, 0.24341816102767788, 0.2457268191445574, 0.23290207270614516, 0.2500792175160227, 0.254048697675203, 0.154294441217115, 0.1657357688111024, 0.16212216528396806, 0.1622721815492274, 0.16354331438427727, 0.16719800892405545, 0.16239616159918457, 0.1604444587644711, 0.16333924715131232, 0.15336066264264625, 0.15741510642633838, 0.13950945264370584, 0.22992982779304572, 0.16416700944285056, 0.18827878406868814, 0.1564918095069413, 0.15888663617859788, 0.21082513658427737, 0.26764193728811536, 0.400070375716574, 0.1515581351461256, 0.21350198358545092, 0.16508956732294278, 0.10795301432920101, 0.10773783544645499, 0.10729018942593505, 0.16923721903389943, 0.19174238242179598, 0.19693213656631203, 0.17710702299326309, 0.18855515454256844, 0.1682276888458042, 0.18157030942352548, 0.19167904207164466, 0.18863424428381304, 0.1726043964976114, 0.06161715018296432, 0.05174929744837642, 0.07947160978559809, 0.06639565270859038, 0.0593077001691219, 0.052304323173573586, 0.05431849088762086, 0.08240464259285984, 0.055117711707518]}, "mutation_prompt": null}
{"id": "57f688d2-2cfb-4bcc-ba77-2943ab2b17a0", "solution": "import numpy as np\n\nclass DynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicLocalSearchEGWO", "description": "Introducing a dynamic local search mechanism to exploit promising regions and accelerate convergence in the optimization process.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.26079807998161475, 0.25370519694792715, 0.2832902782852714, 0.2427655012494946, 0.2257797464441047, 0.20461079355923628, 0.2512148944238244, 0.2689696202604094, 0.28928826294463506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028991102965230442, 9.999999999998899e-05, 0.002479049995991911, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07596463265177122, 0.051511788406105374, 0.051646424693632786, 0.08335682788384635, 0.07820616845277417, 0.05899062106109065, 0.07801574514304088, 0.0724353813131201, 0.08704934024600264, 0.05047340893010477, 0.044226568217622275, 0.06898041226895457, 0.0596331498887499, 0.08192632505964048, 0.052936139501477686, 0.047421272505755785, 0.07503392125182962, 0.06178819145168235, 0.914817020617437, 0.8804452438058202, 0.903726788057482, 0.8251570058415243, 0.9364077222834006, 0.5215689040327629, 0.7070398817873448, 0.8631477521199341, 0.8845299224712146, 0.10759712441459668, 0.10360535502697021, 0.09878204326765205, 0.14818047799245337, 0.10899155165482022, 0.1144052460556022, 0.1325381117828045, 0.15880710097401662, 0.10916828971738812, 0.2066015336792203, 0.13556923102515117, 0.18861718254269677, 0.16065719666084555, 0.15575522415573573, 0.1328497936492007, 0.1411009460182986, 0.1729802419833204, 0.16658538301937442, 0.09466083999222086, 0.09744487081129083, 0.08550202237459248, 0.0081403156289247, 0.06768010525791213, 0.0532228043720977, 0.01898860641903921, 0.10869243441859999, 0.08964384709379136, 0.166860603446919, 0.1393007407896939, 0.14900281418225025, 0.14849393314045134, 0.16967637874137875, 0.17488313005035339, 0.19890955995415693, 0.15869166226075682, 0.15819396703656252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056351180123178524, 0.030651363837808643, 0.07819635243590295, 0.07253621718235681, 0.02738485967643378, 0.06251911852918779, 0.07722288586591253, 0.03181298340161576, 0.11358396400702131, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013305489656010305, 0.019217914077023668, 0.004791577222646115, 0.006777131467916808, 0.008356161817307695, 9.999999999998899e-05, 0.024089370350374506, 0.0006769838298033015, 0.0035589196689328473, 0.23982241905858503, 0.2590590011961599, 0.26874340462036794, 0.22790906468542993, 0.2553922743313699, 0.24095576135506802, 0.2505759693597036, 0.2879071493948442, 0.2612069217974258, 0.0684656077669108, 0.06509146585937542, 0.05531754063208605, 0.060103917024896925, 0.05996567042789358, 0.07731788155873187, 0.05852295434849619, 0.06473828555196692, 0.06693846404701365, 0.13940086840544974, 0.13627209514022032, 0.12329817007509425, 0.1734396310366395, 0.1521135471670617, 0.15658609056241457, 0.1818868021749368, 0.13448965360750098, 0.1530693697837482, 0.1822886668830236, 0.18909105022865158, 0.17194847939519298, 0.24063007827068283, 0.1770539895434775, 0.19881132576671867, 0.2221324320078304, 0.20132201934228078, 0.17450798054498606, 0.13516552743778354, 0.13104280628442921, 0.11638153551081831, 0.1662862831498585, 0.1443517716546754, 0.1753272766073335, 0.12355168020139462, 0.13224336874357356, 0.09359156810850378, 0.21943220856180434, 0.1657705794593034, 0.2264544372609668, 0.21060465818478036, 0.18020029265826176, 0.15586176390448692, 0.16981992337140805, 0.16878710246717, 0.19160559323069715, 0.1642560279323949, 0.16006634897458827, 0.17253855791319728, 0.16416348790914181, 0.160605383321889, 0.15224299161651944, 0.16361330805017438, 0.15841681280332154, 0.159521615143575, 0.17688435524373325, 0.2043453714508795, 0.24110269002925522, 0.2360463165774913, 0.1788077776768927, 0.27061381811403173, 0.14217006392124043, 0.19682684794680005, 0.2135541957311783, 0.32219942574978666, 0.24060118912498463, 0.12637985118352935, 0.14327297178505938, 0.1679643139177528, 0.23506092156228175, 0.26189402204337153, 0.19839071730466018, 0.24134381931982518, 0.18406850354537374, 0.19544370630893937, 0.18086312512656977, 0.1877533593927535, 0.19762620271441134, 0.17053904553576738, 0.1713712558811178, 0.17309181343228885, 0.1964670889314194, 0.04988893371285852, 0.05995326031639292, 0.08054039693880166, 0.07207331658859262, 0.06917921660358661, 0.10173652049052839, 0.05468450101290978, 0.06378644521144483, 0.06328248922576263]}, "mutation_prompt": null}
{"id": "549ac66f-4e20-47ab-abac-f918078bdf67", "solution": "import numpy as np\n\nclass CooperativeLearningEnhancedDLS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce cooperative learning for faster convergence\n                if np.random.rand() < 0.3:  \n                    teacher_idx = best_idx\n                    while teacher_idx == best_idx:\n                        teacher_idx = np.random.randint(5)\n                    positions[i] = update_position(positions[i], positions[teacher_idx], c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "CooperativeLearningEnhancedDLS", "description": "Introducing a cooperative learning mechanism to enhance exploration and exploitation of the search space for faster convergence.", "configspace": "", "generation": 52, "fitness": 0.14327851036396708, "feedback": "The algorithm CooperativeLearningEnhancedDLS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.16.", "error": "", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.23303033837324583, 0.2604525679197427, 0.23642276111623473, 0.2428750954207567, 0.1850825637650878, 0.191773760962358, 0.2123696553842639, 0.24239775419111753, 0.24605470982570055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04284443710628927, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0534863366619156, 0.05620549572768574, 0.060921565558155866, 0.06397931284674596, 0.05305832444312164, 0.08857508510211776, 0.05637204477545743, 0.06248491555809832, 0.054419130354002476, 0.04851302349380093, 0.03962851140121926, 0.04207037367222388, 0.05151098937723131, 0.04173990775856584, 0.04135147627504643, 0.062269904530340314, 0.04621786870741995, 0.06306318567627733, 0.7365816970487165, 0.7921390589935364, 0.7867063363235363, 0.874238454439896, 0.888177519106897, 0.9489288723701447, 0.7017368442084402, 0.9105678429138501, 0.8569031157084018, 0.11065277625962988, 0.10087932515379072, 0.09923444983648555, 0.11027265760030891, 0.10757257967145284, 0.0964144669821857, 0.13474470081281398, 0.09985933211713183, 0.11021827210172064, 0.15626415125341608, 0.17280778874057612, 0.18777595370546085, 0.13812331309754733, 0.12328629027343163, 0.16365762663937966, 0.142298511223519, 0.15296303234148179, 0.2098574558532732, 0.04278873107088588, 0.06147987894216844, 0.04401079763925553, 0.040748056170462066, 0.036872354214253944, 0.10642722222245882, 0.049304001552865295, 0.01666685788792599, 0.05794647115877327, 0.10981361342986551, 0.1192043766394012, 0.12275905366820661, 0.08644438321944048, 0.14202570373076506, 0.13520842176990588, 0.14685758710231345, 0.13924482655393244, 0.2050414540957849, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06518877223834063, 0.03775281970156397, 0.03603629951325871, 0.07663570156663968, 0.004513632126861511, 0.0780966392771072, 0.039908386103147286, 0.06856001552273461, 0.052133813653389316, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00033346602124817437, 9.999999999998899e-05, 0.02382177685512621, 0.0003626806628828083, 9.999999999998899e-05, 0.013186856862752339, 0.004934980308581749, 0.008893228416377519, 9.999999999998899e-05, 0.24015041995449538, 0.2699500144316147, 0.23507705590441252, 0.24985071357615884, 0.2411071744840383, 0.25004396695597875, 0.27319136681481127, 0.2291340876755522, 0.22636241193206763, 0.06391702993057735, 0.04867121388790163, 0.06359294451973596, 0.07931489055393559, 0.06491569337373693, 0.05960470629958514, 0.06440628134291004, 0.05878194369228473, 0.051817179216256615, 0.14616523684650584, 0.13477745260984408, 0.13775385695440379, 0.12006698315621711, 0.1439370636843469, 0.15341236332644892, 0.13304755349477804, 0.14441465889146965, 0.14728800190911528, 0.18595460880847348, 0.17476833156878457, 0.18723711108490848, 0.21776261272444597, 0.1996162153741069, 0.22079007260933436, 0.1794955720825543, 0.18904217170851312, 0.19704722054625246, 0.131412769325016, 0.14091239537431155, 0.13355271323948914, 0.15314731539272852, 0.1412168979552182, 0.16587292537410359, 0.12056849357467514, 0.1266361354402119, 0.13132875089024032, 0.17519311224151846, 0.16862901243335782, 0.19601446478265083, 0.17816236804117402, 0.1876531206056662, 0.21426078827890294, 0.18080284300174843, 0.16611067376428912, 0.16539906220216416, 0.15612296724282948, 0.15636152433752015, 0.15283830052376468, 0.1582457448106932, 0.16529359718595937, 0.1562843825521657, 0.14035525777899271, 0.16163821875580908, 0.16087051602529556, 0.146225397802758, 0.17116537639473295, 0.1682274868841227, 0.15364238069623148, 0.15959033218171204, 0.28921161075986335, 0.16043128799603523, 0.2918155625421256, 0.17201488905430828, 0.19903255247760487, 0.1630562951137654, 0.17709941004938823, 0.21895316872549586, 0.21451549938591008, 0.1646037950436483, 0.3183318649731135, 0.2115117443740816, 0.12464812264974678, 0.1717610970832737, 0.192750273708875, 0.18562350671160577, 0.17665679680278845, 0.22221811821840343, 0.1657194311758794, 0.20559573210479853, 0.1732806293037893, 0.18251335904011146, 0.05746398090855931, 0.059515384892835366, 0.06597127638585842, 0.05628222381382242, 0.04771050089563411, 0.0709721692233155, 0.05906985909228246, 0.06104904090077756, 0.054441167532658485]}, "mutation_prompt": null}
{"id": "f2898ee3-bbc3-40cc-b624-8a5dd49deb09", "solution": "import numpy as np\n\nclass DynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicLocalSearchEGWO", "description": "Introducing a dynamic local search mechanism to exploit promising regions and accelerate convergence in the optimization process.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.26079807998161475, 0.25370519694792715, 0.2832902782852714, 0.2427655012494946, 0.2257797464441047, 0.20461079355923628, 0.2512148944238244, 0.2689696202604094, 0.28928826294463506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028991102965230442, 9.999999999998899e-05, 0.002479049995991911, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07596463265177122, 0.051511788406105374, 0.051646424693632786, 0.08335682788384635, 0.07820616845277417, 0.05899062106109065, 0.07801574514304088, 0.0724353813131201, 0.08704934024600264, 0.05047340893010477, 0.044226568217622275, 0.06898041226895457, 0.0596331498887499, 0.08192632505964048, 0.052936139501477686, 0.047421272505755785, 0.07503392125182962, 0.06178819145168235, 0.914817020617437, 0.8804452438058202, 0.903726788057482, 0.8251570058415243, 0.9364077222834006, 0.5215689040327629, 0.7070398817873448, 0.8631477521199341, 0.8845299224712146, 0.10759712441459668, 0.10360535502697021, 0.09878204326765205, 0.14818047799245337, 0.10899155165482022, 0.1144052460556022, 0.1325381117828045, 0.15880710097401662, 0.10916828971738812, 0.2066015336792203, 0.13556923102515117, 0.18861718254269677, 0.16065719666084555, 0.15575522415573573, 0.1328497936492007, 0.1411009460182986, 0.1729802419833204, 0.16658538301937442, 0.09466083999222086, 0.09744487081129083, 0.08550202237459248, 0.0081403156289247, 0.06768010525791213, 0.0532228043720977, 0.01898860641903921, 0.10869243441859999, 0.08964384709379136, 0.166860603446919, 0.1393007407896939, 0.14900281418225025, 0.14849393314045134, 0.16967637874137875, 0.17488313005035339, 0.19890955995415693, 0.15869166226075682, 0.15819396703656252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056351180123178524, 0.030651363837808643, 0.07819635243590295, 0.07253621718235681, 0.02738485967643378, 0.06251911852918779, 0.07722288586591253, 0.03181298340161576, 0.11358396400702131, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013305489656010305, 0.019217914077023668, 0.004791577222646115, 0.006777131467916808, 0.008356161817307695, 9.999999999998899e-05, 0.024089370350374506, 0.0006769838298033015, 0.0035589196689328473, 0.23982241905858503, 0.2590590011961599, 0.26874340462036794, 0.22790906468542993, 0.2553922743313699, 0.24095576135506802, 0.2505759693597036, 0.2879071493948442, 0.2612069217974258, 0.0684656077669108, 0.06509146585937542, 0.05531754063208605, 0.060103917024896925, 0.05996567042789358, 0.07731788155873187, 0.05852295434849619, 0.06473828555196692, 0.06693846404701365, 0.13940086840544974, 0.13627209514022032, 0.12329817007509425, 0.1734396310366395, 0.1521135471670617, 0.15658609056241457, 0.1818868021749368, 0.13448965360750098, 0.1530693697837482, 0.1822886668830236, 0.18909105022865158, 0.17194847939519298, 0.24063007827068283, 0.1770539895434775, 0.19881132576671867, 0.2221324320078304, 0.20132201934228078, 0.17450798054498606, 0.13516552743778354, 0.13104280628442921, 0.11638153551081831, 0.1662862831498585, 0.1443517716546754, 0.1753272766073335, 0.12355168020139462, 0.13224336874357356, 0.09359156810850378, 0.21943220856180434, 0.1657705794593034, 0.2264544372609668, 0.21060465818478036, 0.18020029265826176, 0.15586176390448692, 0.16981992337140805, 0.16878710246717, 0.19160559323069715, 0.1642560279323949, 0.16006634897458827, 0.17253855791319728, 0.16416348790914181, 0.160605383321889, 0.15224299161651944, 0.16361330805017438, 0.15841681280332154, 0.159521615143575, 0.17688435524373325, 0.2043453714508795, 0.24110269002925522, 0.2360463165774913, 0.1788077776768927, 0.27061381811403173, 0.14217006392124043, 0.19682684794680005, 0.2135541957311783, 0.32219942574978666, 0.24060118912498463, 0.12637985118352935, 0.14327297178505938, 0.1679643139177528, 0.23506092156228175, 0.26189402204337153, 0.19839071730466018, 0.24134381931982518, 0.18406850354537374, 0.19544370630893937, 0.18086312512656977, 0.1877533593927535, 0.19762620271441134, 0.17053904553576738, 0.1713712558811178, 0.17309181343228885, 0.1964670889314194, 0.04988893371285852, 0.05995326031639292, 0.08054039693880166, 0.07207331658859262, 0.06917921660358661, 0.10173652049052839, 0.05468450101290978, 0.06378644521144483, 0.06328248922576263]}, "mutation_prompt": null}
{"id": "a366c70e-07e2-46f4-b413-3a5b94ea4f31", "solution": "import numpy as np\n\nclass AdaptiveMutatedLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        evals = 5\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * evals / self.budget\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce adaptive mutation based on function evaluations\n                if evals % 5 == 0:  # 10% code difference\n                    a = 2 - 2 * evals / self.budget\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            evals += 1\n\n        return best_position", "name": "AdaptiveMutatedLocalSearchEGWO", "description": "Introducing an adaptive mutation strategy based on the function evaluations to dynamically adjust the exploration-exploitation trade-off for faster convergence.", "configspace": "", "generation": 54, "fitness": 0.15034636325877282, "feedback": "The algorithm AdaptiveMutatedLocalSearchEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.251366727107578, 0.23878376212313324, 0.2841598693170565, 0.2251472392291255, 0.24520379645853918, 0.28458276858389187, 0.2946650243068214, 0.2484392634071364, 0.25314828689798974, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03046424855497476, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06213365837326923, 0.05240375492006866, 0.06937100258922368, 0.06871562705095091, 0.0574257881493333, 0.0662836876437064, 0.05906659474070597, 0.07926547594196487, 0.06316681221192155, 0.04128485780830582, 0.04022946463012489, 0.051054627134425545, 0.06415611204257021, 0.06647117651497536, 0.06852622353116966, 0.05234500012086685, 0.05833682521535899, 0.05481712269281702, 0.875774133947442, 0.9162614590036159, 0.5822583698295516, 0.9741065877621614, 0.7894561242932201, 0.927368308961065, 0.7117693636654234, 0.8578904781565598, 0.8663062960981534, 0.09515823251116895, 0.07305595031074608, 0.13219729698146243, 0.1624187649101414, 0.12996309850716914, 0.1299454518823442, 0.14027245603205662, 0.13987315390406652, 0.108062622075627, 0.19250971849685627, 0.20040190289053905, 0.1919672503023312, 0.14552448172677546, 0.12359079596190836, 0.14613834936744952, 0.16638578349109578, 0.16847743997685227, 0.1520701398315687, 0.1330742216416151, 0.05890485386501765, 0.07055172770456453, 0.04897876805542911, 0.05350454134400784, 0.014973748205715176, 0.04863325352924208, 0.03446276611087529, 0.07899116700186237, 0.2128708354561608, 0.14921890624407896, 0.13262440028127387, 0.1563073187665054, 0.18182654421045485, 0.10564029128021557, 0.15664520976734253, 0.012961461464513602, 0.1302921425795317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0444532250323435, 0.05034519477509436, 0.05218655759675017, 0.05388151713473577, 0.037423270423919575, 0.04287019198363906, 0.05110330569065136, 0.0756695397757452, 0.050274695618277465, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021288855323658762, 9.999999999998899e-05, 0.028524772591609904, 0.004458712101405582, 9.999999999998899e-05, 0.0025027370654792103, 0.027279489317943995, 0.020303039983955884, 0.0238998884130589, 0.2526738342245243, 0.25978489891170775, 0.26858893486842694, 0.22500466835876076, 0.25815453238012287, 0.2679710356858557, 0.269325810455595, 0.25459972875859294, 0.27801666899839883, 0.06995815865316768, 0.0515895027639337, 0.06532379244375675, 0.027958122491678505, 0.08762002010174241, 0.06455844647029518, 0.0646735021952547, 0.07465394071327958, 0.07133239326574203, 0.1784394178965184, 0.13055128526686655, 0.18831824396943664, 0.13538245579449848, 0.14468457662954204, 0.12660120826260024, 0.14941250750800938, 0.16200321050053512, 0.1226021939490205, 0.20797796225066356, 0.19062632838771776, 0.1807662209916303, 0.20908471462474876, 0.20802624091895694, 0.22863455228530938, 0.18368399110385536, 0.20708041710994307, 0.18699871084085795, 0.14263681156844976, 0.1396345943329912, 0.13906127200342622, 0.15101613044658302, 0.15559824319223736, 0.17199794363901078, 0.13073029278814952, 0.154851837737091, 0.1251911001979379, 0.19037486299535455, 0.20240298818798586, 0.17532922095196413, 0.1937147103572333, 0.17727791515976055, 0.19874093799266268, 0.20586379387416653, 0.1838226093171933, 0.20679280171592562, 0.16087831137791675, 0.15989026464240308, 0.16336696270482665, 0.1586539865010571, 0.15957267377140538, 0.1684080698564958, 0.1603503035209456, 0.17925203036117632, 0.16081408484865445, 0.1297304744666108, 0.15794865146203552, 0.1504872515843303, 0.16790919195053555, 0.2626620282988331, 0.2066959186625562, 0.243533872843551, 0.1515739628031515, 0.28924662053838524, 0.133075376525305, 0.19836893366618702, 0.1999287178606347, 0.277337022012053, 0.25427378232875475, 0.21801451800457172, 0.2635265947686486, 0.20913925180673631, 0.26351987138025823, 0.18103613180004974, 0.1727275504684922, 0.1838136727156392, 0.1787987285311945, 0.1885270383432417, 0.1962997306020926, 0.20252267460111006, 0.1777526818713675, 0.188047079326926, 0.05946082524957996, 0.05389029310743154, 0.06606352646983593, 0.0796646525228798, 0.07440614576694082, 0.04405591828901745, 0.06555033945369015, 0.050887907421223066, 0.0655045838045002]}, "mutation_prompt": null}
{"id": "2aa45d38-5341-4b3a-b1ab-55ff0ab53d8a", "solution": "import numpy as np\n\nclass DynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicLocalSearchEGWO", "description": "Introducing a dynamic local search mechanism to exploit promising regions and accelerate convergence in the optimization process.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.26079807998161475, 0.25370519694792715, 0.2832902782852714, 0.2427655012494946, 0.2257797464441047, 0.20461079355923628, 0.2512148944238244, 0.2689696202604094, 0.28928826294463506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028991102965230442, 9.999999999998899e-05, 0.002479049995991911, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07596463265177122, 0.051511788406105374, 0.051646424693632786, 0.08335682788384635, 0.07820616845277417, 0.05899062106109065, 0.07801574514304088, 0.0724353813131201, 0.08704934024600264, 0.05047340893010477, 0.044226568217622275, 0.06898041226895457, 0.0596331498887499, 0.08192632505964048, 0.052936139501477686, 0.047421272505755785, 0.07503392125182962, 0.06178819145168235, 0.914817020617437, 0.8804452438058202, 0.903726788057482, 0.8251570058415243, 0.9364077222834006, 0.5215689040327629, 0.7070398817873448, 0.8631477521199341, 0.8845299224712146, 0.10759712441459668, 0.10360535502697021, 0.09878204326765205, 0.14818047799245337, 0.10899155165482022, 0.1144052460556022, 0.1325381117828045, 0.15880710097401662, 0.10916828971738812, 0.2066015336792203, 0.13556923102515117, 0.18861718254269677, 0.16065719666084555, 0.15575522415573573, 0.1328497936492007, 0.1411009460182986, 0.1729802419833204, 0.16658538301937442, 0.09466083999222086, 0.09744487081129083, 0.08550202237459248, 0.0081403156289247, 0.06768010525791213, 0.0532228043720977, 0.01898860641903921, 0.10869243441859999, 0.08964384709379136, 0.166860603446919, 0.1393007407896939, 0.14900281418225025, 0.14849393314045134, 0.16967637874137875, 0.17488313005035339, 0.19890955995415693, 0.15869166226075682, 0.15819396703656252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056351180123178524, 0.030651363837808643, 0.07819635243590295, 0.07253621718235681, 0.02738485967643378, 0.06251911852918779, 0.07722288586591253, 0.03181298340161576, 0.11358396400702131, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013305489656010305, 0.019217914077023668, 0.004791577222646115, 0.006777131467916808, 0.008356161817307695, 9.999999999998899e-05, 0.024089370350374506, 0.0006769838298033015, 0.0035589196689328473, 0.23982241905858503, 0.2590590011961599, 0.26874340462036794, 0.22790906468542993, 0.2553922743313699, 0.24095576135506802, 0.2505759693597036, 0.2879071493948442, 0.2612069217974258, 0.0684656077669108, 0.06509146585937542, 0.05531754063208605, 0.060103917024896925, 0.05996567042789358, 0.07731788155873187, 0.05852295434849619, 0.06473828555196692, 0.06693846404701365, 0.13940086840544974, 0.13627209514022032, 0.12329817007509425, 0.1734396310366395, 0.1521135471670617, 0.15658609056241457, 0.1818868021749368, 0.13448965360750098, 0.1530693697837482, 0.1822886668830236, 0.18909105022865158, 0.17194847939519298, 0.24063007827068283, 0.1770539895434775, 0.19881132576671867, 0.2221324320078304, 0.20132201934228078, 0.17450798054498606, 0.13516552743778354, 0.13104280628442921, 0.11638153551081831, 0.1662862831498585, 0.1443517716546754, 0.1753272766073335, 0.12355168020139462, 0.13224336874357356, 0.09359156810850378, 0.21943220856180434, 0.1657705794593034, 0.2264544372609668, 0.21060465818478036, 0.18020029265826176, 0.15586176390448692, 0.16981992337140805, 0.16878710246717, 0.19160559323069715, 0.1642560279323949, 0.16006634897458827, 0.17253855791319728, 0.16416348790914181, 0.160605383321889, 0.15224299161651944, 0.16361330805017438, 0.15841681280332154, 0.159521615143575, 0.17688435524373325, 0.2043453714508795, 0.24110269002925522, 0.2360463165774913, 0.1788077776768927, 0.27061381811403173, 0.14217006392124043, 0.19682684794680005, 0.2135541957311783, 0.32219942574978666, 0.24060118912498463, 0.12637985118352935, 0.14327297178505938, 0.1679643139177528, 0.23506092156228175, 0.26189402204337153, 0.19839071730466018, 0.24134381931982518, 0.18406850354537374, 0.19544370630893937, 0.18086312512656977, 0.1877533593927535, 0.19762620271441134, 0.17053904553576738, 0.1713712558811178, 0.17309181343228885, 0.1964670889314194, 0.04988893371285852, 0.05995326031639292, 0.08054039693880166, 0.07207331658859262, 0.06917921660358661, 0.10173652049052839, 0.05468450101290978, 0.06378644521144483, 0.06328248922576263]}, "mutation_prompt": null}
{"id": "0a8ced94-f3b8-42e7-81b2-46120b92937a", "solution": "import numpy as np\n\nclass DynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicLocalSearchEGWO", "description": "Introducing a dynamic local search mechanism to exploit promising regions and accelerate convergence in the optimization process.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.26079807998161475, 0.25370519694792715, 0.2832902782852714, 0.2427655012494946, 0.2257797464441047, 0.20461079355923628, 0.2512148944238244, 0.2689696202604094, 0.28928826294463506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028991102965230442, 9.999999999998899e-05, 0.002479049995991911, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07596463265177122, 0.051511788406105374, 0.051646424693632786, 0.08335682788384635, 0.07820616845277417, 0.05899062106109065, 0.07801574514304088, 0.0724353813131201, 0.08704934024600264, 0.05047340893010477, 0.044226568217622275, 0.06898041226895457, 0.0596331498887499, 0.08192632505964048, 0.052936139501477686, 0.047421272505755785, 0.07503392125182962, 0.06178819145168235, 0.914817020617437, 0.8804452438058202, 0.903726788057482, 0.8251570058415243, 0.9364077222834006, 0.5215689040327629, 0.7070398817873448, 0.8631477521199341, 0.8845299224712146, 0.10759712441459668, 0.10360535502697021, 0.09878204326765205, 0.14818047799245337, 0.10899155165482022, 0.1144052460556022, 0.1325381117828045, 0.15880710097401662, 0.10916828971738812, 0.2066015336792203, 0.13556923102515117, 0.18861718254269677, 0.16065719666084555, 0.15575522415573573, 0.1328497936492007, 0.1411009460182986, 0.1729802419833204, 0.16658538301937442, 0.09466083999222086, 0.09744487081129083, 0.08550202237459248, 0.0081403156289247, 0.06768010525791213, 0.0532228043720977, 0.01898860641903921, 0.10869243441859999, 0.08964384709379136, 0.166860603446919, 0.1393007407896939, 0.14900281418225025, 0.14849393314045134, 0.16967637874137875, 0.17488313005035339, 0.19890955995415693, 0.15869166226075682, 0.15819396703656252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056351180123178524, 0.030651363837808643, 0.07819635243590295, 0.07253621718235681, 0.02738485967643378, 0.06251911852918779, 0.07722288586591253, 0.03181298340161576, 0.11358396400702131, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013305489656010305, 0.019217914077023668, 0.004791577222646115, 0.006777131467916808, 0.008356161817307695, 9.999999999998899e-05, 0.024089370350374506, 0.0006769838298033015, 0.0035589196689328473, 0.23982241905858503, 0.2590590011961599, 0.26874340462036794, 0.22790906468542993, 0.2553922743313699, 0.24095576135506802, 0.2505759693597036, 0.2879071493948442, 0.2612069217974258, 0.0684656077669108, 0.06509146585937542, 0.05531754063208605, 0.060103917024896925, 0.05996567042789358, 0.07731788155873187, 0.05852295434849619, 0.06473828555196692, 0.06693846404701365, 0.13940086840544974, 0.13627209514022032, 0.12329817007509425, 0.1734396310366395, 0.1521135471670617, 0.15658609056241457, 0.1818868021749368, 0.13448965360750098, 0.1530693697837482, 0.1822886668830236, 0.18909105022865158, 0.17194847939519298, 0.24063007827068283, 0.1770539895434775, 0.19881132576671867, 0.2221324320078304, 0.20132201934228078, 0.17450798054498606, 0.13516552743778354, 0.13104280628442921, 0.11638153551081831, 0.1662862831498585, 0.1443517716546754, 0.1753272766073335, 0.12355168020139462, 0.13224336874357356, 0.09359156810850378, 0.21943220856180434, 0.1657705794593034, 0.2264544372609668, 0.21060465818478036, 0.18020029265826176, 0.15586176390448692, 0.16981992337140805, 0.16878710246717, 0.19160559323069715, 0.1642560279323949, 0.16006634897458827, 0.17253855791319728, 0.16416348790914181, 0.160605383321889, 0.15224299161651944, 0.16361330805017438, 0.15841681280332154, 0.159521615143575, 0.17688435524373325, 0.2043453714508795, 0.24110269002925522, 0.2360463165774913, 0.1788077776768927, 0.27061381811403173, 0.14217006392124043, 0.19682684794680005, 0.2135541957311783, 0.32219942574978666, 0.24060118912498463, 0.12637985118352935, 0.14327297178505938, 0.1679643139177528, 0.23506092156228175, 0.26189402204337153, 0.19839071730466018, 0.24134381931982518, 0.18406850354537374, 0.19544370630893937, 0.18086312512656977, 0.1877533593927535, 0.19762620271441134, 0.17053904553576738, 0.1713712558811178, 0.17309181343228885, 0.1964670889314194, 0.04988893371285852, 0.05995326031639292, 0.08054039693880166, 0.07207331658859262, 0.06917921660358661, 0.10173652049052839, 0.05468450101290978, 0.06378644521144483, 0.06328248922576263]}, "mutation_prompt": null}
{"id": "fa3b4744-7e6d-4db8-a750-9366a2f1071f", "solution": "import numpy as np\n\nclass DynamicLocalSearchEGWO_FasterConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    if np.random.rand() < 0.5:  # New random selection mechanism\n                        positions[i] = update_position(positions[i], positions[np.random.randint(5)], c1, c2)\n                    else:\n                        positions[i] = update_position(positions[i], positions[np.random.randint(5)], c3, c3)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicLocalSearchEGWO_FasterConvergence", "description": "Enhancing exploration by introducing a random selection mechanism for updating positions to diversify the search behavior.", "configspace": "", "generation": 57, "fitness": 0.14472960114626782, "feedback": "The algorithm DynamicLocalSearchEGWO_FasterConvergence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.17.", "error": "", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.21403124522613415, 0.24857674433909882, 0.26097946438161623, 0.21844403757111075, 0.21366387717752655, 0.22513903939742863, 0.2574315110813693, 0.23102857151467615, 0.2719953499612705, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012843275639632834, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052499060130816955, 0.06894403166907248, 0.048486966256200525, 0.05498689746983132, 0.10342833725268696, 0.07864112507630583, 0.056274412909281146, 0.061816864049734965, 0.05536206032987123, 0.06978698489818813, 0.03784484148571843, 0.04677751732379454, 0.05319163875919253, 0.055298004825730995, 0.048848266846863386, 0.07420742791340074, 0.06122591132746258, 0.05905701470372493, 0.9448237469995039, 0.878180007872579, 0.9373857150019655, 0.8563935194025541, 0.7356323955831723, 0.9429294670506706, 0.976324028029408, 0.90715686145119, 0.6437681530905738, 0.09521360822163516, 0.11388576758112867, 0.11638646064954394, 0.1355748735631057, 0.1254892682743084, 0.12995881399628728, 0.08953975157645144, 0.11568334449014273, 0.11476185778018078, 0.20252496521658714, 0.1744530694312183, 0.1935730499409648, 0.16041399279157065, 0.1708067023960359, 0.14188646618850198, 0.1610138988454919, 0.15575397691660542, 0.15336355123866163, 0.10291058610518011, 0.03439487184087808, 0.06287869464394313, 0.04487538602902974, 0.03239766203545247, 0.0197448196381087, 0.04930821732286372, 0.05043297157201909, 0.04860360971451194, 0.14937988986945638, 0.16607132422682047, 0.1330824889200245, 0.13963750338298764, 0.018089636615386206, 0.11954215009410618, 0.09750389704254392, 0.10015039042484664, 0.13208570383684803, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041072531026180914, 0.08792791849507686, 0.06750247289119438, 0.06591943955704915, 0.021408225214596288, 0.028858893665785423, 0.039948665328412014, 0.03506657392435519, 0.06881620039040315, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005543962561789351, 0.00015737873910315336, 0.00680338548096171, 0.004722411960428108, 0.011958011582111072, 0.006240118600835509, 0.014525835418343958, 0.004335673557213315, 0.002231884042269705, 0.2128404562621764, 0.24914766592799875, 0.24544656490965266, 0.25703608456544336, 0.25444082652855937, 0.2175526601833685, 0.2610522242144183, 0.23366475403583387, 0.24063317302932896, 0.05468179882286517, 0.0477247499717709, 0.059516502770165736, 0.061837654442769785, 0.08558320962430466, 0.06457409110273804, 0.06050821166000764, 0.07584065926241002, 0.06167145958166098, 0.1379934481229138, 0.1264478437835893, 0.1715975629295875, 0.1454996027844685, 0.16057678159896915, 0.1348745849246228, 0.1582131870761614, 0.1390631321258725, 0.1420926216176327, 0.19465015629436666, 0.17282554095535085, 0.18634939548388285, 0.19257940990169486, 0.21664927603509354, 0.1796095315642393, 0.17911967158648023, 0.1943039839698828, 0.17833433352392658, 0.13289731010290362, 0.13960243630237767, 0.09786358939843354, 0.15086189029517194, 0.11879727959268171, 0.16985825688376754, 0.130601333468512, 0.11999190027928253, 0.12282814815814747, 0.21016958475027425, 0.17584824969709967, 0.19499737301464615, 0.16600372210994174, 0.19046988282782185, 0.16187647145827322, 0.1727164686006758, 0.16263488713898444, 0.19732602687341483, 0.1538450242683097, 0.18249236131213353, 0.16592346762629862, 0.15691115833732305, 0.1609687165839594, 0.16084282935465521, 0.15377772116475608, 0.18733166879059004, 0.16253010388666356, 0.12758235815489605, 0.15024452453916526, 0.1678039379562979, 0.1634928313649462, 0.1681981788207093, 0.16317485406117282, 0.16635982340010613, 0.14504764356275524, 0.36523133291901577, 0.12300375233825978, 0.17536963067377398, 0.22347726209135033, 0.14980516014555145, 0.2131880979148697, 0.13774168389148855, 0.20260629009852615, 0.2565168745183559, 0.21271173113887887, 0.18315774584724742, 0.17494242786386172, 0.18246950178676768, 0.19594059066028346, 0.1860184877455907, 0.19261867097585628, 0.20154941436472862, 0.17391180880813462, 0.17821536300900298, 0.07215397224994902, 0.08650379045052725, 0.06351741613932993, 0.05586886009890368, 0.05752235037544795, 0.06843776621496322, 0.06342021336709858, 0.060224640781580296, 0.06864700696425519]}, "mutation_prompt": null}
{"id": "e0789b4b-601e-4aab-9f7b-41fd7810fa59", "solution": "import numpy as np\n\nclass DynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicLocalSearchEGWO", "description": "Introducing a dynamic local search mechanism to exploit promising regions and accelerate convergence in the optimization process.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.26079807998161475, 0.25370519694792715, 0.2832902782852714, 0.2427655012494946, 0.2257797464441047, 0.20461079355923628, 0.2512148944238244, 0.2689696202604094, 0.28928826294463506, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028991102965230442, 9.999999999998899e-05, 0.002479049995991911, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07596463265177122, 0.051511788406105374, 0.051646424693632786, 0.08335682788384635, 0.07820616845277417, 0.05899062106109065, 0.07801574514304088, 0.0724353813131201, 0.08704934024600264, 0.05047340893010477, 0.044226568217622275, 0.06898041226895457, 0.0596331498887499, 0.08192632505964048, 0.052936139501477686, 0.047421272505755785, 0.07503392125182962, 0.06178819145168235, 0.914817020617437, 0.8804452438058202, 0.903726788057482, 0.8251570058415243, 0.9364077222834006, 0.5215689040327629, 0.7070398817873448, 0.8631477521199341, 0.8845299224712146, 0.10759712441459668, 0.10360535502697021, 0.09878204326765205, 0.14818047799245337, 0.10899155165482022, 0.1144052460556022, 0.1325381117828045, 0.15880710097401662, 0.10916828971738812, 0.2066015336792203, 0.13556923102515117, 0.18861718254269677, 0.16065719666084555, 0.15575522415573573, 0.1328497936492007, 0.1411009460182986, 0.1729802419833204, 0.16658538301937442, 0.09466083999222086, 0.09744487081129083, 0.08550202237459248, 0.0081403156289247, 0.06768010525791213, 0.0532228043720977, 0.01898860641903921, 0.10869243441859999, 0.08964384709379136, 0.166860603446919, 0.1393007407896939, 0.14900281418225025, 0.14849393314045134, 0.16967637874137875, 0.17488313005035339, 0.19890955995415693, 0.15869166226075682, 0.15819396703656252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.056351180123178524, 0.030651363837808643, 0.07819635243590295, 0.07253621718235681, 0.02738485967643378, 0.06251911852918779, 0.07722288586591253, 0.03181298340161576, 0.11358396400702131, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013305489656010305, 0.019217914077023668, 0.004791577222646115, 0.006777131467916808, 0.008356161817307695, 9.999999999998899e-05, 0.024089370350374506, 0.0006769838298033015, 0.0035589196689328473, 0.23982241905858503, 0.2590590011961599, 0.26874340462036794, 0.22790906468542993, 0.2553922743313699, 0.24095576135506802, 0.2505759693597036, 0.2879071493948442, 0.2612069217974258, 0.0684656077669108, 0.06509146585937542, 0.05531754063208605, 0.060103917024896925, 0.05996567042789358, 0.07731788155873187, 0.05852295434849619, 0.06473828555196692, 0.06693846404701365, 0.13940086840544974, 0.13627209514022032, 0.12329817007509425, 0.1734396310366395, 0.1521135471670617, 0.15658609056241457, 0.1818868021749368, 0.13448965360750098, 0.1530693697837482, 0.1822886668830236, 0.18909105022865158, 0.17194847939519298, 0.24063007827068283, 0.1770539895434775, 0.19881132576671867, 0.2221324320078304, 0.20132201934228078, 0.17450798054498606, 0.13516552743778354, 0.13104280628442921, 0.11638153551081831, 0.1662862831498585, 0.1443517716546754, 0.1753272766073335, 0.12355168020139462, 0.13224336874357356, 0.09359156810850378, 0.21943220856180434, 0.1657705794593034, 0.2264544372609668, 0.21060465818478036, 0.18020029265826176, 0.15586176390448692, 0.16981992337140805, 0.16878710246717, 0.19160559323069715, 0.1642560279323949, 0.16006634897458827, 0.17253855791319728, 0.16416348790914181, 0.160605383321889, 0.15224299161651944, 0.16361330805017438, 0.15841681280332154, 0.159521615143575, 0.17688435524373325, 0.2043453714508795, 0.24110269002925522, 0.2360463165774913, 0.1788077776768927, 0.27061381811403173, 0.14217006392124043, 0.19682684794680005, 0.2135541957311783, 0.32219942574978666, 0.24060118912498463, 0.12637985118352935, 0.14327297178505938, 0.1679643139177528, 0.23506092156228175, 0.26189402204337153, 0.19839071730466018, 0.24134381931982518, 0.18406850354537374, 0.19544370630893937, 0.18086312512656977, 0.1877533593927535, 0.19762620271441134, 0.17053904553576738, 0.1713712558811178, 0.17309181343228885, 0.1964670889314194, 0.04988893371285852, 0.05995326031639292, 0.08054039693880166, 0.07207331658859262, 0.06917921660358661, 0.10173652049052839, 0.05468450101290978, 0.06378644521144483, 0.06328248922576263]}, "mutation_prompt": null}
{"id": "2b5d772d-98b0-4409-a78b-4a3ccd09c0db", "solution": "import numpy as np\n\nclass EnhancedDynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                \n                mutation_strength = 1.0 / np.sqrt(_ + 1)  # Adaptive mutation strength\n                positions[i] = update_position(positions[i], positions[best_idx], mutation_strength * c1, mutation_strength * c2)\n                \n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "EnhancedDynamicLocalSearchEGWO", "description": "Introducing a novel adaptive mechanism to adjust the exploration-exploitation trade-off by dynamically adjusting the mutation parameter based on the fitness landscape.", "configspace": "", "generation": 59, "fitness": 0.10868391368116231, "feedback": "The algorithm EnhancedDynamicLocalSearchEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.2049633773086924, 0.2527342899596622, 0.24023345120758022, 0.1714660314041283, 0.23371179627571825, 0.191347272276417, 0.20235381874496083, 0.17334975569764033, 0.27001913812414746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014916672974312872, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0532424707591419, 0.06505101686556225, 0.05915716983347541, 0.05246639690264543, 0.06317150438098962, 0.0596092545228083, 0.051060679478329596, 0.05138411862912329, 0.05774463117209239, 0.04217806425157, 0.04358178656120004, 0.042119694529503815, 0.05446655574728099, 0.05204324746385447, 0.035000916093367085, 0.05990323286688093, 0.057826793881548655, 0.05737305006899496, 0.22414941944762867, 0.19261672187704637, 0.27282241412220243, 0.09357516850220815, 0.17751410374650567, 0.1956402939184243, 0.1989515294089823, 0.20956515684642796, 0.1010612567693423, 0.07665187783054095, 0.0880552961693114, 0.08052665689476068, 0.05739704172644855, 0.08610080928039099, 0.10708284971384163, 0.09827215056661698, 0.08353864484274365, 0.08537499140348248, 0.15479779748784928, 0.19261619843534372, 0.20582115580111926, 0.11848950341223186, 0.1507026102494734, 0.1211453277551009, 0.11587550838713956, 0.12656787886690835, 0.18686718324882257, 0.020853473058768057, 0.06500234422396955, 0.08554393557267559, 0.009648955435359263, 0.010738594052710715, 0.02616749198417201, 9.999999999998899e-05, 0.03455413753940595, 0.05332882327191457, 0.14562891304219006, 0.11393627500420567, 0.1201488835538217, 0.14084814451169225, 0.12495756403334324, 0.10908691541011539, 0.1020379872361491, 0.13174317238967292, 0.1657267229116287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06406714583576378, 0.039440957301197344, 0.08661582019148772, 0.049316272057054134, 0.02641791343118005, 0.10536193886692469, 0.0479718061646256, 0.05385471723476454, 0.044073121616871824, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000225792813445147, 0.0024551924168007, 0.0003372397350940304, 9.999999999998899e-05, 9.999999999998899e-05, 0.00018343768255324466, 0.007673042735922397, 0.003227107864757106, 0.21993904455577518, 0.21054091797915642, 0.20838623251718935, 0.2135803184878553, 0.24780429114188884, 0.1922291542295128, 0.21301392637961047, 0.2439244201402183, 0.21989498463185364, 0.04713158738202272, 0.05782242563942419, 0.04421404738368473, 0.04662700019991228, 0.030236580944417835, 0.049853776991130694, 0.06807652474070369, 0.06656166304204181, 0.05232831665711091, 0.13970058800759322, 0.10772915572392827, 0.155149410062421, 0.1282022916223441, 0.15894150394257145, 0.12038372617458337, 0.14037477511697338, 0.1487121323569054, 0.12719049816559258, 0.1775355206689856, 0.1776073883911513, 0.16951087417380406, 0.21083253283423742, 0.19197728512967993, 0.20610318458172427, 0.18356664921574162, 0.19401721495642, 0.16587716118941276, 0.1077053747319614, 0.1256336843141902, 0.12272503310773353, 0.14735549858588037, 0.17176477631620457, 0.13331211374132113, 0.11458554381779651, 0.14171089905065015, 0.12221459611072283, 0.215803818076036, 0.18187944970216863, 0.21539686862258178, 0.23523095460655175, 0.18070658043202825, 0.1894254100384294, 0.2119648068816965, 0.2088193180648268, 0.21761216639780667, 0.15471611566239463, 0.16598292118911828, 0.1505360722675847, 0.15461663244037227, 0.1708732416412595, 0.16092463508625354, 0.1531127492676997, 0.16379736212229, 0.15646505950067946, 0.16711858092118126, 0.16834813133321347, 0.1579817793677818, 0.11055088583443651, 0.17653563934115934, 0.15539704873011684, 0.11654074856856655, 0.11310932020870534, 0.1978314100149272, 0.17210288789991213, 0.13008413589909884, 0.16678683885683154, 0.1748165728622243, 0.1259669367955063, 0.16460794136434231, 0.11968008740023217, 0.13801217911422425, 0.16796588601973195, 0.19044966733453084, 0.17426550002125896, 0.18099520860810114, 0.1855266208155294, 0.20683324214364862, 0.18132194833940907, 0.1795198358258886, 0.20284042953102221, 0.18398198777602315, 0.06671658766279798, 0.06647895428887951, 0.04918538682503404, 0.05673772311394987, 0.057923976955641, 0.06078923746742071, 0.06871307034819785, 0.06170133009942225, 0.059429276435539746]}, "mutation_prompt": null}
{"id": "f244cab7-d626-4945-9232-dc5d638393fa", "solution": "import numpy as np\n\nclass AdaptiveMutationDynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c, mutation_rate):\n            return np.clip(position + a * mutation_rate * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        mutation_rate = 1.0\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            mutation_rate = 1.0 / np.sqrt(_ + 1)  # Adaptive mutation rate\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2, mutation_rate)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3, mutation_rate)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "AdaptiveMutationDynamicLocalSearchEGWO", "description": "Introducing a novel adaptive mutation strategy that dynamically adjusts the mutation rate based on the fitness landscape to enhance exploration and exploitation.", "configspace": "", "generation": 60, "fitness": 0.060941790662799776, "feedback": "The algorithm AdaptiveMutationDynamicLocalSearchEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.13553561429510896, 0.10624863811197849, 0.10375670519099, 0.07960840329107977, 0.05685272426672239, 0.03216745615278582, 0.03926622035160998, 0.13091954785403248, 0.07131413570396727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020049805638944207, 9.999999999998899e-05, 0.04877890832312437, 0.026398718713235403, 0.028651754877490054, 0.04973856039480784, 0.026128877086506352, 0.005239453020749685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05614194922604343, 9.999999999998899e-05, 0.06600079597015374, 0.04175387366634509, 0.052376310810392734, 0.07049572819310557, 0.048470772468443446, 0.04073170798406445, 0.05733330642192069, 0.049033136502225516, 0.03922528792198321, 0.055186367176629614, 9.999999999998899e-05, 0.017218249916157724, 0.11762324808765168, 0.02513104417954104, 0.023358007303196482, 0.06359888189047214, 9.999999999998899e-05, 9.999999999998899e-05, 0.10272599639574642, 0.09571874150736037, 0.05337570749639431, 0.060854641399516685, 0.00035708486240582094, 0.006094412948881245, 0.051349827532153, 0.1114516891635694, 0.06448375419143959, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07852161631512267, 0.10461422707924428, 0.029425154616758098, 0.04531558726028817, 0.01601478587396865, 0.1117543323356116, 0.04989183325831781, 0.03508909995907583, 0.05243621800453879, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1193440383237101, 0.13437673249396864, 0.17271976321262084, 0.08789439221805828, 0.15587882318580049, 0.09436044777397146, 0.1008161377013681, 0.1382267725914318, 0.13474701281691936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05132969414761901, 0.025454241423951807, 0.021400219591614977, 0.010921001529142105, 0.043673693322124785, 0.11159688868039486, 0.12070415711352289, 0.15486407762197107, 0.11583102085352326, 0.11346621425033865, 0.1329123655718999, 0.10835110115451407, 0.12740147577734318, 0.1394257276445522, 0.13270010298690282, 0.15363480997448553, 0.1562731896702706, 0.13573328110106686, 0.12322211212752276, 0.1404614319103732, 0.13778727582056471, 0.1253768570473589, 0.11296911119608866, 0.08502648232639332, 0.11933835347649491, 0.11394799603227423, 0.07367465470114365, 0.07961786119465653, 0.11002393640070407, 0.07045571621412106, 0.06465122284646674, 0.06286474080477655, 0.18935898886940772, 0.2182012744880708, 0.1653902713371257, 0.19138208052481576, 0.14439580407332453, 0.17358289075301558, 0.1874197426655626, 0.15719000622187373, 0.19361861467602093, 9.999999999998899e-05, 9.999999999998899e-05, 0.1405512135365785, 9.999999999998899e-05, 0.040821615622244845, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07444191058988614, 0.06208210540899295, 0.10090172737380776, 0.16780556933344992, 0.14739015733572636, 0.16988180766226613, 0.13010293866957567, 0.11676150494826376, 0.1039689104502044, 0.06519727102210149, 0.07896998260015153, 0.09744413513888905, 0.10557552033806439, 0.13338723775569128, 0.21384009069807408, 0.0956124563998062, 0.12035287637168746, 0.037406278828362116, 0.19574746532734977, 0.17394058301587179, 0.17941918319649341, 0.2030265469541126, 0.17409921466675538, 0.1800252584353993, 0.18567171880898103, 0.17275057063810184, 0.18505655171971136, 0.06281971592259228, 0.04243920614339458, 0.0472553867744222, 0.03683410671595777, 0.04067699829807425, 0.04298007737014975, 0.04852260926447505, 0.05024137312499277, 0.04382119707099663]}, "mutation_prompt": null}
{"id": "35ed6a95-6c86-49ee-93b0-be85d22333b0", "solution": "import numpy as np\n\nclass EnhancedDynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c, adaptive_mut_prob):\n            mutation_prob = np.random.rand(self.dim) < adaptive_mut_prob\n            adaptive_mut = best * 0.8 + position * 0.2  # Weighted average\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * adaptive_mut - position), -5.0, 5.0) * mutation_prob + position * (1 - mutation_prob)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            adaptive_mut_prob = 0.5 + 0.5 * (self.budget - 5 - _) / (self.budget - 5)  # Adaptive mutation probability\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2, adaptive_mut_prob)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3, adaptive_mut_prob)\n                    \n                if np.random.rand() < 0.3:  # Introduce dynamic local search\n                    positions[i] = update_position(positions[i], best_position, c1, c2, adaptive_mut_prob)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "EnhancedDynamicLocalSearchEGWO", "description": "Introducing an adaptive mutation strategy based on a weighted average of the best and current positions to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 61, "fitness": 0.1420711670973748, "feedback": "The algorithm EnhancedDynamicLocalSearchEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.15.", "error": "", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.2565028576400197, 0.22216189444865297, 0.27139880955233353, 0.23485450515488926, 0.20796662985154324, 0.20411087037690223, 0.29074054211967715, 0.2532994256626674, 0.23408298287473495, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0593030201332696, 0.07174365473980437, 0.05951194569573104, 0.0636211833629492, 0.06146357162861693, 0.07709638493887527, 0.08675862128185785, 0.059897169724241195, 0.08257841330982263, 0.06714895042827262, 0.047714717221010505, 0.019761224511253617, 0.054742871995364095, 0.05019025414395961, 0.05741053038583632, 0.052710004228509244, 0.05719621481573833, 0.05405021370837637, 0.4887638010870651, 0.9072197178091306, 0.7452882658792044, 0.877927832809414, 0.9521972750026828, 0.9205566747822773, 0.8944589951450632, 0.5082331957942093, 0.21839213134797542, 0.10780525697487942, 0.10708270597482239, 0.09892164629808342, 0.13264603051733448, 0.1683524843290819, 0.1077425192060778, 0.1393515082177268, 0.09062472163309299, 0.1452248600720064, 0.19445098444139763, 0.17781989301404122, 0.14045887420600556, 0.16701880462574614, 0.1465236017502921, 0.16169139779053443, 0.15850471240970254, 0.14834324235155982, 0.14637853004076262, 0.07937700416539306, 0.0677109744494594, 0.06462921193563376, 0.045393576024728266, 0.055068555937348496, 0.03175428928816815, 0.07443374609443087, 0.0394646764782578, 0.07901218556166101, 0.1350831366835451, 0.16503557937768643, 0.13895455082278563, 0.09252599843596088, 0.10387271659193098, 0.16152351901589213, 0.14565208563383947, 0.15680774450814605, 0.11846234157464419, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00185107518318961, 9.999999999998899e-05, 9.999999999998899e-05, 0.06760019559411612, 0.0598309653035658, 0.13916746932751212, 0.06716353683803666, 0.027499071184559187, 0.032552139541405456, 0.07032428095739118, 0.025837637595180984, 0.08711575155968898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01773999070384502, 0.03409846064783961, 0.021142758124788608, 0.008267001408553742, 0.01182980146975332, 0.002881305316029814, 0.0015757387958900138, 0.0077081341615785615, 0.0018467306681743123, 0.2628354029623876, 0.23538814293673072, 0.23478999474958806, 0.2649055451219088, 0.2666876866593547, 0.24156341132643533, 0.24986939711106104, 0.23495027668564394, 0.24574010087228293, 0.05553085166877514, 0.06471687121586034, 0.049358377002059806, 0.06906452024422793, 0.05548793107515215, 0.07607414030664927, 0.07723072097220407, 0.057044128094382196, 0.08684676328439078, 0.14521507538730893, 0.16936697004365964, 0.17596952692535672, 0.13133670743778325, 0.12732351988038138, 0.13132038259703271, 0.14233151730637206, 0.13578228085441602, 0.16289923096236836, 0.2001652975383954, 0.21621673242145578, 0.20086887895738093, 0.19273968108298167, 0.21599175466680254, 0.1729472704498769, 0.21655887728619905, 0.18521799601814237, 0.18791638424577617, 0.11604993646847361, 0.13105800900037323, 0.11856070639894167, 0.12805998059113866, 0.17034597908046112, 0.13068130881342022, 0.13401711766758984, 0.14915236516431962, 0.142716996974235, 0.20116723257037783, 0.20615350855457126, 0.20504662607861035, 0.17961516036856306, 0.2210025082916247, 0.220983917162483, 0.18138958769573488, 0.1506117146748429, 0.17955267774345973, 0.16160058832751634, 0.1426331162489387, 0.16307822709234732, 0.1455804444145573, 0.158475979698948, 0.1705102878726219, 0.1577102231656552, 0.17493118963432663, 0.15484362271476204, 0.17110688559834653, 0.1964428716141543, 0.22045561714844575, 0.17368950732725497, 0.19405561705975782, 0.1320006016922496, 0.242136316920322, 0.1475806770826753, 0.1644794847401888, 0.20815789689301212, 0.3050728728644231, 0.12213568600178348, 0.1185150538607671, 0.1759395539569889, 0.22115899245403436, 0.17937889397804974, 0.19823293886587867, 0.17959971700324817, 0.18248803454421603, 0.18069894077185367, 0.20284320799932787, 0.18113706834886767, 0.1707006992764002, 0.17759232981961814, 0.19557766144589828, 0.19668579283748933, 0.1850676571620219, 0.059103739362031726, 0.07479312820016326, 0.05920405036765075, 0.06353347932649811, 0.060216791095796585, 0.05574324113464868, 0.06194611496376856, 0.07173163277583938, 0.07099691531391783]}, "mutation_prompt": null}
{"id": "28ee67b1-8e1d-4411-a60b-b4557d69a916", "solution": "import numpy as np\n\nclass EnhancedDynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce self-adaptive mechanism for exploration-exploitation balance\n                if np.random.rand() < 0.3:  # 10% code difference\n                    if np.random.rand() < 0.5:\n                        positions[i] = update_position(positions[i], best_position, c1, c2)\n                    else:\n                        positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "EnhancedDynamicLocalSearchEGWO", "description": "Introducing a self-adaptive mechanism to adjust the exploration and exploitation balance dynamically during the optimization process.", "configspace": "", "generation": 62, "fitness": 0.14942042696549093, "feedback": "The algorithm EnhancedDynamicLocalSearchEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.17.", "error": "", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.28887301159736756, 0.2600165490546026, 0.2737575027913902, 0.2017569806834535, 0.2186044181981005, 0.21893088693766838, 0.23759522083839568, 0.2832444042813116, 0.26892526676381445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004682323835609736, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05044041848605085, 0.06787155043914261, 0.05114922802918331, 0.05409196763434598, 0.06710976699985838, 0.06470620111239567, 0.05867993664765514, 0.09143724389216146, 0.058407439551797835, 0.05347392478768176, 0.05304417468678424, 0.0419096644838175, 0.04636766574855267, 0.094190987106196, 0.05011538737196719, 0.06485904346969074, 0.07578461918114843, 0.05383676262621517, 0.9105450618953523, 0.7337386361260867, 0.9120066113371434, 0.8263497739009972, 0.9658240445721493, 0.9825973417940393, 0.5825807918888743, 0.9601383184398726, 0.9862901335076913, 0.12531710862300183, 0.08255668242195591, 0.12467096261512578, 0.13726994063908482, 0.1322682991970212, 0.1799308171653674, 0.1485369810762328, 0.14577383020095347, 0.11283162176726091, 0.19238400187733784, 0.1634340458816328, 0.20254211480850248, 0.17475963945051154, 0.19988061180959604, 0.19278508085956436, 0.15579805836878913, 0.1453522227151698, 0.159441441071008, 0.07720994723255425, 0.09446548827418388, 0.06777678370933082, 0.0718677128178613, 0.07313516353672589, 0.003940896038568509, 0.031760257538797854, 0.028905353891710894, 0.05946676840000287, 0.14885540863417357, 0.17613964108987712, 0.1334120573568296, 0.1405592947937192, 0.11664187156364403, 0.12553702898364372, 0.1531865280109842, 0.1532154320134248, 0.009017526037787493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05903405679152096, 0.10397190284119129, 0.0690216973115837, 0.05657026497968909, 0.0652649009431534, 0.016626488414047014, 0.055552862036940875, 0.0364251110802285, 0.037179249860850305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01483201534926415, 0.01231286342949156, 0.019323885526624895, 0.010697076833190433, 0.0007932307436027131, 0.00400886302996728, 0.02319893035263776, 0.008142433918503222, 0.00785551657226169, 0.25495493973449346, 0.3039029094003235, 0.24462329939595417, 0.2495066645475883, 0.2811927990301156, 0.263187357767552, 0.2610620687812696, 0.27149008588914325, 0.2761966742259747, 0.06556045962115953, 0.05747782670258117, 0.05421970384093344, 0.06264281668870719, 0.07122400131009565, 0.05171307363600808, 0.06630677441781097, 0.0605851251263988, 0.06131822331218284, 0.14264935621136665, 0.14095815073704887, 0.18063204975560565, 0.12788195231727917, 0.1414917408347297, 0.14598763552643845, 0.1441369832274435, 0.1277653292875066, 0.14471652431411453, 0.18078385647221185, 0.20288578676351843, 0.1892803854278885, 0.16051582669464481, 0.18678659098391925, 0.21764892593552965, 0.19344885956308722, 0.19560235758980937, 0.17741091482736915, 0.12647738359374838, 0.15033771231969462, 0.11288441217165268, 0.16371828428105872, 0.11779569312711813, 0.127435907866977, 0.12760115290070662, 0.14487162275312693, 0.14739605249971732, 0.20928252065339448, 0.21796488726230467, 0.18243600119773795, 0.18338226908632926, 0.1690010877194209, 0.23663178029586118, 0.20749978000937663, 0.19625101154548197, 0.1817614428801534, 0.1646328908839192, 0.1633729854205367, 0.15974795473660075, 0.16256835875765996, 0.16384131686589443, 0.15159318662495513, 0.16468628106654526, 0.1730691287311995, 0.15355242361572252, 0.16232069905131008, 0.16035990560679692, 0.2339207835467031, 0.17051018261365658, 0.17209916982277373, 0.18218113059255925, 0.16724110384244828, 0.16579305300634495, 0.1910570534025573, 0.2949292910439145, 0.13072041876833196, 0.1630764804875826, 0.2471034881505113, 0.15059320785413022, 0.1660640731995341, 0.1685810279345047, 0.13566247328338754, 0.282025354213311, 0.1952285468750169, 0.18528627825243826, 0.18325014174516752, 0.1856919103282012, 0.18061044540412385, 0.1921924243362938, 0.21074988617309331, 0.18648415358599513, 0.18398777418729417, 0.06419545468656129, 0.0706589120418174, 0.05145379603335709, 0.060769832169578875, 0.06067095722839311, 0.06267436392958203, 0.05801190563045455, 0.056293154568221704, 0.06685060100014617]}, "mutation_prompt": null}
{"id": "c9eecf48-fa32-4e2c-a587-f17b9abed1a4", "solution": "import numpy as np\n\nclass DynamicLocalSearchEGWO_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n        \n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = update_position(positions[i], positions[best_idx], c3, c3)\n                \n                # Introduce dynamic mutation strategy\n                mutation_rate = 1.0 - _ / self.budget\n                if np.random.rand() < mutation_rate:  # 10% code difference\n                    positions[i] = np.clip(positions[i] + 0.5 * np.random.normal(0, 1, self.dim), -5.0, 5.0)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "DynamicLocalSearchEGWO_Enhanced", "description": "Enhancing exploration by introducing a dynamic mutation strategy to improve diversity and convergence speed.", "configspace": "", "generation": 63, "fitness": 0.1241428465867197, "feedback": "The algorithm DynamicLocalSearchEGWO_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.11.", "error": "", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.22885285261939825, 0.2245238197723053, 0.231024616713273, 0.262223935995476, 0.2269655345268855, 0.21227300566962437, 0.2831285951823743, 0.24563832614961556, 0.28919565770298117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05596571978317133, 0.052173745359761825, 0.061488529573210715, 0.07788757749641462, 0.05732908658765923, 0.07853817608833602, 0.05322313490156394, 0.059287004587325276, 0.05724300003340954, 0.0502776843675814, 0.04405260307717085, 0.04966550135303083, 0.047373542414508085, 0.044814894728685384, 0.052931788361952226, 0.06307753299555408, 0.05391062307909866, 0.061080325111354306, 0.23184945067630836, 0.7025115458030864, 0.2324320653201858, 0.2145868272385525, 0.794973716567143, 0.6171678772389514, 0.2467801506983065, 0.34799215504832914, 0.5377982963268758, 0.11126174349738105, 0.10260165833991619, 0.10688895465974713, 0.13558269574843385, 0.13247559546561716, 0.12915356487677532, 0.11062649769048494, 0.11828779299886139, 0.10825264849420457, 0.1707973624314827, 0.14784361761469555, 0.1755381225890722, 0.158504262304624, 0.13809255369999918, 0.1942849550229867, 0.16148128808334317, 0.18203484014728843, 0.13594972434642483, 0.06827490222634514, 0.07671179713740328, 0.03639289804856638, 0.0058872858989503785, 0.03392558341789187, 0.06737795607711927, 0.011418462070380664, 0.033850286059544654, 0.05547423785741301, 0.04133291758672952, 0.10885780881440277, 0.049974801840361405, 0.05766745256863326, 0.07385627676582096, 0.021923465786690577, 0.05120990818115878, 0.110725214626333, 0.03690016287784781, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03484487660075575, 0.04983156970412905, 0.04725238593340275, 0.049200361265612114, 0.044326480313753525, 0.03831829759692995, 0.05058863079061793, 0.02726197933455865, 0.05133402069100701, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002316510779909131, 9.999999999998899e-05, 0.01590815289257319, 9.999999999998899e-05, 0.00019192950165758393, 0.005704677306131778, 0.00835387095679252, 0.006218175378432944, 0.003601394164178373, 0.22837775290218132, 0.2528041730814877, 0.23186937773460714, 0.27714193705860257, 0.29707194157408945, 0.2498522381973849, 0.23262828280657422, 0.2343851777294913, 0.2930951376766757, 0.07740889919916771, 0.05588049494660341, 0.058595888295158494, 0.05323237817865811, 0.05846431943041208, 0.06457714572950735, 0.06172117110392594, 0.08038883233788874, 0.05183950916158575, 0.1397221790816755, 0.14014292882469837, 0.17904508554926202, 0.16328023206351283, 0.14275247595682172, 0.14174261121552068, 0.12918713992388853, 0.13529900221366753, 0.15455644423730264, 0.1924793733206568, 0.2007201946495475, 0.1899883944892028, 0.19281385240543425, 0.18345978903920368, 0.18651833877449242, 0.1874336908668366, 0.17343855817502662, 0.17529890395673797, 0.1416394312889302, 0.13619428181323223, 0.13809842341462497, 0.1233338467823103, 0.14791294982942382, 0.11700040428009129, 0.13001026884692402, 0.13062993044037063, 0.13875792124372077, 0.16224889017348576, 0.16892652494292582, 0.1648564262977087, 0.16486072796559093, 0.16532174575305925, 0.15400854231928318, 0.17746119721539744, 0.18285268925802378, 0.19750829709378137, 0.1814399842765101, 0.16359535227434552, 0.14804131150161137, 0.1619471830939141, 0.16502698901623392, 0.16594057521263972, 0.15218165741692957, 0.1561061365490939, 0.17038602742625886, 0.2058618002532907, 0.16816054875366093, 0.171008688736897, 0.219089402053252, 0.13530097329430701, 0.20079174173396885, 0.2663483927324206, 0.16285925773789367, 0.27092732373673867, 0.18468625912015357, 0.16387675102129728, 0.17129074061096217, 0.15714511612209392, 0.19023789056949358, 0.2543533186365907, 0.19271571795506348, 0.21641862695176384, 0.21964829178928713, 0.18345517074938922, 0.17154595782292692, 0.18412793911388015, 0.1816600847061972, 0.1776645692313803, 0.18109003000760682, 0.17917434625678907, 0.1749152851014374, 0.18258421611220943, 0.056725254060865926, 0.06138505673528505, 0.060674296650990445, 0.08072102756416843, 0.0558343278560538, 0.04855027895480779, 0.05245683272151924, 0.05256518278939548, 0.055691088660672405]}, "mutation_prompt": null}
{"id": "f9478c22-9dd1-4c35-8f9e-32e69e2edb9d", "solution": "import numpy as np\n\nclass HybridDynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, 0.5)\n\n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "HybridDynamicLocalSearchEGWO", "description": "Implementing a hybrid approach by combining Differential Evolution (DE) strategy to enhance exploration capability and exploit the search space efficiently, leading to faster convergence.", "configspace": "", "generation": 64, "fitness": 0.16679605837154088, "feedback": "The algorithm HybridDynamicLocalSearchEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "37bb3fcc-2897-4a3a-b422-f93870e9c957", "metadata": {"aucs": [0.29555357282852257, 0.2949117437970722, 0.2964696217664887, 0.2853339104403687, 0.2601253913163739, 0.2611340392362764, 0.33069697384790264, 0.26629870511119846, 0.30023868015804334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007958472166536001, 0.01019562960196252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07084532571730473, 0.06887335933048111, 0.06566032089140317, 0.09224928615849726, 0.07083921400806126, 0.0849311716962251, 0.07860712682984938, 0.08197130963359411, 0.08968527454868613, 0.05235958726526224, 0.06480543103911152, 0.08472411649777567, 0.06102066230177583, 0.06975955004201317, 0.09017465116515033, 0.06806280667581088, 0.0565673144130493, 0.06890864404269437, 0.967781320215531, 0.9359586403998651, 0.9713972916036615, 0.9504188716140848, 0.9274515388894565, 0.9401300592366754, 0.9668077568347879, 0.9414575052058319, 0.9700871687331983, 0.15249431427304738, 0.16197462270041274, 0.147397040451955, 0.18321870137743113, 0.17079152042161883, 0.16751969255063792, 0.15040819732319688, 0.15976672435035522, 0.14001311029033547, 0.13817193441707643, 0.2183084778026818, 0.22078100323190541, 0.20149123512861378, 0.18025503753547167, 0.19431863425401263, 0.20681515442439702, 0.21211911493696767, 0.17353864399938412, 0.13120982274961113, 0.10491661859772339, 0.13127594206524862, 0.06915141296029648, 0.09067704173270486, 0.085970302425595, 0.08986144724209733, 0.08329036025971959, 0.08087688575273022, 0.15869092335637747, 0.11802850423850664, 0.12830603655072514, 0.15215655225459612, 0.11016919364109456, 0.12592657008109542, 0.19266943461156494, 0.15680687181123, 0.12956684760129955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0975095537828734, 0.031541059159988616, 0.0673681033317085, 0.060712882660926004, 0.06245208414501413, 0.03788295999779634, 0.07486751830052052, 0.049077867509604745, 0.04388012686029363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0282605778799625, 0.026232031947623913, 0.03177870839536734, 0.008503492542537572, 0.016771311095467145, 0.014744053128261103, 0.042099652265740084, 0.01587449140486119, 0.020851731895018544, 0.29356192947399085, 0.2853196934538188, 0.31427798409135166, 0.30492395971694064, 0.2830912668399095, 0.26529675382830176, 0.2982718148802289, 0.29783921434713945, 0.3018367003882999, 0.05068157881379831, 0.06474757232433925, 0.06576828609141794, 0.10351841334917733, 0.08617934478786005, 0.08967628628078161, 0.0799612504217162, 0.0652180162206647, 0.08033194142870326, 0.16624549582573178, 0.1424764525762534, 0.15241976754669517, 0.13053560377534845, 0.14409698147288186, 0.13198523827561293, 0.1936852378964482, 0.15518861566582798, 0.15806756145696932, 0.2078144384730185, 0.21447814205151572, 0.17789709988278823, 0.21866548961910504, 0.24236996082790274, 0.23096181188448828, 0.20700504376241846, 0.21194791894506315, 0.20995498633444176, 0.16420649432133305, 0.16469180665945737, 0.1256711509786208, 0.16169351266440457, 0.14548734934698182, 0.20259969836658698, 0.14490285096648026, 0.13490399711246714, 0.15128697674905345, 0.21083390903969434, 0.18963801918316903, 0.23066233536235303, 0.22750794330756763, 0.2097656735411244, 0.22839765477942398, 0.17227858322373268, 0.19147072521266695, 0.19535584887502144, 0.16668899460037334, 0.16845474899895252, 0.17725646257134775, 0.16478668372848881, 0.1666167848465031, 0.17247591188183664, 0.1597197852749236, 0.1638907271027581, 0.1502538669041913, 0.19033169709338804, 0.13958130307928351, 0.17460173534769896, 0.17290489917462382, 0.18273375165282657, 0.1276060890726276, 0.3371919076896167, 0.31018013742173633, 0.17386026410076705, 0.2676015844797053, 0.32593672186036937, 0.3110657765781226, 0.12141884234682254, 0.18479568959191894, 0.17866176099556574, 0.31816871356351906, 0.10553979791691437, 0.2088237455432509, 0.19594872931456175, 0.19068301395082543, 0.2093403806450942, 0.17200148049265085, 0.1848257129750568, 0.20076839968755955, 0.18010559775531587, 0.18255410577271225, 0.1929847030462326, 0.06247839358874263, 0.0686081785344761, 0.059091095369340985, 0.06058799411483229, 0.06828063684186914, 0.06663983772430515, 0.06607241544187181, 0.06581586745477819, 0.057229745407397004]}, "mutation_prompt": null}
{"id": "850410b7-4c29-4eaa-90e0-c8f5b9f7dca4", "solution": "import numpy as np\n\nclass EnhancedHybridDynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c, mutation_rate):\n            return np.clip(position + a * mutation_rate * np.random.randn(self.dim) * np.abs(c * best - position), -5.0, 5.0)\n\n        def adaptive_mutation(x, population, f, mutation_rate):\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * mutation_rate * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        mutation_rates = np.full(self.budget - 5, 1.0)  # Initialize mutation rates\n\n        for idx in range(self.budget - 5):\n            a = 2 - 2 * idx / (self.budget - 1)  # linearly decreasing a value\n            mutation_rate = mutation_rates[idx]  # Use current mutation rate\n\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2, mutation_rate)\n                else:\n                    positions[i] = adaptive_mutation(positions[i], positions, 0.5, mutation_rate)\n                \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n            # Adapt mutation rate based on performance\n            if np.random.rand() < 0.1:  # 10% code difference\n                if new_fitness[new_best_idx] < fitness[best_idx]:\n                    mutation_rates[idx] *= 1.1  # Increase mutation rate\n                else:\n                    mutation_rates[idx] *= 0.9  # Decrease mutation rate\n\n        return best_position", "name": "EnhancedHybridDynamicLocalSearchEGWO", "description": "Introducing a novel adaptive mutation strategy based on Gaussian perturbation with dynamically adjusted mutation rates to enhance exploration and exploitability in optimization.", "configspace": "", "generation": 65, "fitness": 0.16113268207585194, "feedback": "The algorithm EnhancedHybridDynamicLocalSearchEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "f9478c22-9dd1-4c35-8f9e-32e69e2edb9d", "metadata": {"aucs": [0.2694334489320481, 0.28281444477824846, 0.28750023097020116, 0.27128767396424425, 0.24420618105546799, 0.2915860269657379, 0.2543042298103815, 0.26704386582637574, 0.271778032331227, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013908667858580914, 0.004320212429833936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0758415984734302, 0.06695007788916807, 0.06929515883813542, 0.06377491108663103, 0.07159252749328138, 0.08085677470719455, 0.07153892689598174, 0.0769055487550897, 0.06397402144532494, 0.0698022566768679, 0.044583324419095516, 0.056063003194044, 0.04967106547063682, 0.07181277875788383, 0.043444487683863886, 0.0815608005977394, 0.054993019945597355, 0.05553642681333548, 0.9547522170242768, 0.9891594542669159, 0.9642137691166002, 0.9807573373586452, 0.9621262049635863, 0.9727335792159748, 0.9475262335105465, 0.9527405047187145, 0.9394672291668851, 0.14456370664118334, 0.1382136800019349, 0.1408739114650025, 0.18402212458293166, 0.16013721458839014, 0.15481751791719012, 0.15623474622151767, 0.16154316218306963, 0.1557826588075597, 0.1938517339591982, 0.18711814571180707, 0.2169631157343742, 0.16701931497919342, 0.16071436150516294, 0.1473038304027161, 0.17554727478169485, 0.1861804192960954, 0.1567262443464802, 0.0648111348500684, 0.06756720963484442, 0.04053956969564898, 0.046841227980643274, 0.06632230426475305, 0.08545755094600316, 0.03493373993602977, 0.07666907011478619, 0.05921798311578208, 0.11900694888892882, 0.1595476372551231, 0.09724596055891943, 0.06027653515941622, 0.07684403572825738, 0.11051086575146163, 0.11211888322148755, 0.16881762930449806, 0.11276277634917964, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0730632204559557, 0.06338430242633097, 0.03362915098494346, 0.03908432545705309, 0.047193191897697995, 0.02466575942694449, 0.059598681740283044, 0.0434533831385876, 0.04652763632617096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02028853125679142, 0.007323650027952322, 0.007881563217905785, 0.03668430521686239, 0.028929491196725943, 0.020554746255464273, 0.012629499717929704, 0.02792377739920704, 0.03420189828455478, 0.2648182266962097, 0.26703413550948507, 0.290456895214937, 0.2799728343836405, 0.30012628123577334, 0.300194268930136, 0.31854279900940985, 0.27733477045127053, 0.2708785264883772, 0.05958760258258866, 0.09755651457966874, 0.056769018485456346, 0.06397487952564263, 0.061300737741706635, 0.07503580507257102, 0.08912858288573644, 0.051225900338054964, 0.07029380896104942, 0.14360996858707076, 0.1686882797671626, 0.1534937835970499, 0.16955197720242887, 0.14199154539556635, 0.16203073952753677, 0.18551256574132113, 0.15918065686299743, 0.15080943149547843, 0.20579861115703346, 0.20817734193276194, 0.1991954651700778, 0.25720041963200646, 0.17895516729681316, 0.2413480328913722, 0.19662394510461223, 0.23552501050054475, 0.2289784946361645, 0.15489330239317223, 0.16242322449586477, 0.14963766459571148, 0.15443463337088947, 0.14880300758196263, 0.13540298906272097, 0.13692531446109457, 0.132721271496006, 0.15639864297959882, 0.20132695397910916, 0.1923289619141063, 0.15858063018117796, 0.18360688185461704, 0.17426016334185646, 0.19725754696004894, 0.17417701010372677, 0.19609072067218458, 0.18748537015524702, 0.1902903883722411, 0.1626159620507437, 0.1646760435887521, 0.17300739567618584, 0.1638975760285888, 0.15727218435272938, 0.1625546919829831, 0.16518322944852204, 0.15935422804307597, 0.16625635056350907, 0.35425305097715576, 0.354047540160051, 0.1777310518007147, 0.17564507369944915, 0.1620075704535049, 0.289043029467571, 0.29319140672092203, 0.14249462057540618, 0.2463870157430037, 0.1806936899294278, 0.1435074036577909, 0.2783302154528513, 0.12629910893982854, 0.29464958063298197, 0.2728610513006161, 0.2027456519990838, 0.16333169019999771, 0.18879697278638363, 0.1824211374777952, 0.21033849289879158, 0.16650007619547047, 0.18445345695405535, 0.18268836705103175, 0.19168052073341801, 0.19330085822759424, 0.1736588996603916, 0.06187586464236283, 0.06268501539836002, 0.057893424283329886, 0.061368857494800255, 0.07136184593938355, 0.06709881636525039, 0.05921673324421284, 0.06716360880317918, 0.06821247157794441]}, "mutation_prompt": null}
{"id": "99fe9203-4fef-437b-a45e-d3fe22bd2172", "solution": "import numpy as np\n\nclass HybridDynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, 0.5)\n\n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "HybridDynamicLocalSearchEGWO", "description": "Implementing a hybrid approach by combining Differential Evolution (DE) strategy to enhance exploration capability and exploit the search space efficiently, leading to faster convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f9478c22-9dd1-4c35-8f9e-32e69e2edb9d", "metadata": {"aucs": [0.29555357282852257, 0.2949117437970722, 0.2964696217664887, 0.2853339104403687, 0.2601253913163739, 0.2611340392362764, 0.33069697384790264, 0.26629870511119846, 0.30023868015804334, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007958472166536001, 0.01019562960196252, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07084532571730473, 0.06887335933048111, 0.06566032089140317, 0.09224928615849726, 0.07083921400806126, 0.0849311716962251, 0.07860712682984938, 0.08197130963359411, 0.08968527454868613, 0.05235958726526224, 0.06480543103911152, 0.08472411649777567, 0.06102066230177583, 0.06975955004201317, 0.09017465116515033, 0.06806280667581088, 0.0565673144130493, 0.06890864404269437, 0.967781320215531, 0.9359586403998651, 0.9713972916036615, 0.9504188716140848, 0.9274515388894565, 0.9401300592366754, 0.9668077568347879, 0.9414575052058319, 0.9700871687331983, 0.15249431427304738, 0.16197462270041274, 0.147397040451955, 0.18321870137743113, 0.17079152042161883, 0.16751969255063792, 0.15040819732319688, 0.15976672435035522, 0.14001311029033547, 0.13817193441707643, 0.2183084778026818, 0.22078100323190541, 0.20149123512861378, 0.18025503753547167, 0.19431863425401263, 0.20681515442439702, 0.21211911493696767, 0.17353864399938412, 0.13120982274961113, 0.10491661859772339, 0.13127594206524862, 0.06915141296029648, 0.09067704173270486, 0.085970302425595, 0.08986144724209733, 0.08329036025971959, 0.08087688575273022, 0.15869092335637747, 0.11802850423850664, 0.12830603655072514, 0.15215655225459612, 0.11016919364109456, 0.12592657008109542, 0.19266943461156494, 0.15680687181123, 0.12956684760129955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0975095537828734, 0.031541059159988616, 0.0673681033317085, 0.060712882660926004, 0.06245208414501413, 0.03788295999779634, 0.07486751830052052, 0.049077867509604745, 0.04388012686029363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0282605778799625, 0.026232031947623913, 0.03177870839536734, 0.008503492542537572, 0.016771311095467145, 0.014744053128261103, 0.042099652265740084, 0.01587449140486119, 0.020851731895018544, 0.29356192947399085, 0.2853196934538188, 0.31427798409135166, 0.30492395971694064, 0.2830912668399095, 0.26529675382830176, 0.2982718148802289, 0.29783921434713945, 0.3018367003882999, 0.05068157881379831, 0.06474757232433925, 0.06576828609141794, 0.10351841334917733, 0.08617934478786005, 0.08967628628078161, 0.0799612504217162, 0.0652180162206647, 0.08033194142870326, 0.16624549582573178, 0.1424764525762534, 0.15241976754669517, 0.13053560377534845, 0.14409698147288186, 0.13198523827561293, 0.1936852378964482, 0.15518861566582798, 0.15806756145696932, 0.2078144384730185, 0.21447814205151572, 0.17789709988278823, 0.21866548961910504, 0.24236996082790274, 0.23096181188448828, 0.20700504376241846, 0.21194791894506315, 0.20995498633444176, 0.16420649432133305, 0.16469180665945737, 0.1256711509786208, 0.16169351266440457, 0.14548734934698182, 0.20259969836658698, 0.14490285096648026, 0.13490399711246714, 0.15128697674905345, 0.21083390903969434, 0.18963801918316903, 0.23066233536235303, 0.22750794330756763, 0.2097656735411244, 0.22839765477942398, 0.17227858322373268, 0.19147072521266695, 0.19535584887502144, 0.16668899460037334, 0.16845474899895252, 0.17725646257134775, 0.16478668372848881, 0.1666167848465031, 0.17247591188183664, 0.1597197852749236, 0.1638907271027581, 0.1502538669041913, 0.19033169709338804, 0.13958130307928351, 0.17460173534769896, 0.17290489917462382, 0.18273375165282657, 0.1276060890726276, 0.3371919076896167, 0.31018013742173633, 0.17386026410076705, 0.2676015844797053, 0.32593672186036937, 0.3110657765781226, 0.12141884234682254, 0.18479568959191894, 0.17866176099556574, 0.31816871356351906, 0.10553979791691437, 0.2088237455432509, 0.19594872931456175, 0.19068301395082543, 0.2093403806450942, 0.17200148049265085, 0.1848257129750568, 0.20076839968755955, 0.18010559775531587, 0.18255410577271225, 0.1929847030462326, 0.06247839358874263, 0.0686081785344761, 0.059091095369340985, 0.06058799411483229, 0.06828063684186914, 0.06663983772430515, 0.06607241544187181, 0.06581586745477819, 0.057229745407397004]}, "mutation_prompt": null}
{"id": "02ba5d0b-aad4-484a-bac2-7c3e7f14a2db", "solution": "import numpy as np\n\nclass EnhancedHybridDynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c, scaling_factor):\n            return np.clip(position + scaling_factor * a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f, scaling_factor):\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + scaling_factor * f * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            scaling_factor = 1.0 + 0.5 * np.exp(-5 * _ / self.budget)  # dynamic scaling factor\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2, scaling_factor)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, 0.5, scaling_factor)\n\n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2, scaling_factor)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n        return best_position", "name": "EnhancedHybridDynamicLocalSearchEGWO", "description": "Enhancing the exploration capability by introducing dynamic scaling factors for mutation and updating the best position based on a combination of differential evolution and local search.", "configspace": "", "generation": 67, "fitness": 0.14610423665027455, "feedback": "The algorithm EnhancedHybridDynamicLocalSearchEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "f9478c22-9dd1-4c35-8f9e-32e69e2edb9d", "metadata": {"aucs": [0.22218264452243375, 0.22056778857775383, 0.24782216207590935, 0.26491959586351443, 0.24266411228204465, 0.2497168035184636, 0.22171757329965092, 0.26652218849323495, 0.2417948414103256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0641406898205279, 0.06890915388338437, 0.060412594960169375, 0.05514372616635488, 0.08176822013411533, 0.056944938027020164, 0.07535462342980537, 0.06154058350276359, 0.08545512556759949, 0.04761866876202603, 0.04667101464147805, 0.0512017312766484, 0.05593275038603551, 0.0475568582101652, 0.06713559915286338, 0.0444022217669221, 0.0531195039018898, 0.05708699980234633, 0.9645263606491966, 0.9782448972628683, 0.98621825527542, 0.9762835465875654, 0.9825955853406011, 0.9763155931034279, 0.9656364472527426, 0.9380486732176018, 0.9533484866924419, 0.10839176568857833, 0.09898239497271566, 0.12375761648653116, 0.12334904891494047, 0.13559227925322048, 0.11723410079164953, 0.12785662892238636, 0.1088809463932281, 0.12884952678887363, 0.19137350299107014, 0.1927938369965696, 0.13050730709462255, 0.14225429200909423, 0.14019609851475978, 0.13622767268110092, 0.1377821697528434, 0.15226648411336796, 0.17797955039725455, 0.0783581440519896, 0.06045758862059769, 0.04325089659371972, 0.03474688394526715, 0.042849176181942505, 0.04266393621450226, 0.06110429733707312, 0.03154180766048431, 0.04918745282188719, 0.09267141636903597, 0.08125558742460104, 0.07550656240572373, 0.10704312660214677, 0.10628673340000883, 0.09321292881735266, 0.11180389789177658, 0.06608638381056331, 0.09596701578950073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03480164968079713, 0.0011832368413299266, 0.0371273908537354, 0.04577601183804236, 0.06544416559200872, 0.032083926764313375, 0.0364794666334356, 0.0629655833504601, 0.059276139483396384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0034206949315453983, 9.999999999998899e-05, 0.024392277193688305, 0.0011242061572831474, 0.00010342356603509906, 9.999999999998899e-05, 0.006756024470321975, 0.01339638834227841, 0.011806177240052285, 0.2531985959441083, 0.21517109725626427, 0.2158340706052928, 0.24330184382086173, 0.2242815888405385, 0.228546978789416, 0.27556619995410636, 0.2654192289545626, 0.2293861814039626, 0.05415948722336328, 0.0510568681030239, 0.06930761581540812, 0.051979967915957825, 0.06649676809412575, 0.05906563494048456, 0.07441094775994372, 0.05208358026189985, 0.07132385044262923, 0.1374925759957749, 0.1336749544581025, 0.15388918952827502, 0.1369761926404781, 0.14414136306531078, 0.13324312119285153, 0.1455673433047988, 0.17725228975410412, 0.1528533928383642, 0.1901850239622609, 0.2077373595700429, 0.18840324544223397, 0.20383473459082557, 0.1893654838854666, 0.2013566545677613, 0.18831985225446402, 0.173285622735739, 0.1926499165487362, 0.1191892619102517, 0.1158652833259366, 0.1273745735353048, 0.13031883176736758, 0.15093881755773841, 0.11870119975737126, 0.14868835115287526, 0.12166235849245, 0.13505355380234252, 0.1664650351262661, 0.1694384620749968, 0.16318909015445138, 0.15997653981395377, 0.1756783879585706, 0.1762649471137887, 0.1517847295713245, 0.16887050854440588, 0.19654871169421329, 0.16353794137751143, 0.15356102272045968, 0.16106493095771235, 0.16205953512855908, 0.15062194389323957, 0.15788468181618331, 0.15101609793768545, 0.16008188178117266, 0.15606018188722215, 0.13671290633998556, 0.16458108264525595, 0.16173490827368697, 0.16437868562577373, 0.16874641993309358, 0.2362136261796992, 0.17343474419865945, 0.15028308953487357, 0.1506849365479489, 0.27062987412898976, 0.25271497560791967, 0.22286027838612277, 0.1436745471481896, 0.15792120469514015, 0.17766457186934947, 0.2301802656373173, 0.15092718625446233, 0.24153170032263627, 0.17766913888448366, 0.19983642582335137, 0.18589639827409898, 0.18086018522870462, 0.18488225926482127, 0.1758909138809579, 0.17862614175646452, 0.17722101376332866, 0.17855044356185412, 0.061669223904182724, 0.06180805883011797, 0.05606877284091183, 0.052557828498261516, 0.05473569070159445, 0.05965878847384698, 0.06162405635539381, 0.06051494783544609, 0.06602776148047285]}, "mutation_prompt": null}
{"id": "b7bda4a6-f51c-43b2-ba1a-6c8d42f6274e", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            # Adaptive adjustment of mutation factor based on fitness improvement\n            if np.random.rand() < 0.1:  # 10% code difference\n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO", "description": "Introduce a novel adaptive parameter adjustment mechanism to dynamically update the mutation factor in Differential Evolution based on the fitness landscape, enhancing exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 68, "fitness": 0.185687175784078, "feedback": "The algorithm AdaptiveDynamicLocalSearchEGWO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "f9478c22-9dd1-4c35-8f9e-32e69e2edb9d", "metadata": {"aucs": [0.3794781699067069, 0.4667330558146031, 0.30417376558122744, 0.374444877078981, 0.4073005198561124, 0.4216877179578651, 0.3796345678310248, 0.37730220913894086, 0.30331621907028183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0051322553699652, 0.05224416195605486, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07578119932051663, 0.08694380854193728, 0.05892849638866171, 0.12876725011875456, 0.06841913401146249, 0.09347994885423216, 0.10202287600531146, 0.10871906868672665, 0.113707658647075, 0.07803960521411824, 0.05318464159360792, 0.0702264180978367, 0.07521935512155664, 0.06604852173567144, 0.07528161758547247, 0.10646728457897747, 0.05268410811079971, 0.08410265725064159, 0.9341575099515015, 0.9532046024639071, 0.9417266132663004, 0.9716278248934593, 0.9459070418691908, 0.8635840805406487, 0.9690639962710673, 0.9440797171092513, 0.9689860443585284, 0.2684601236973103, 0.1309758786606482, 0.12322127664434412, 0.26108739667140357, 0.2203747206185387, 0.21162566771154745, 0.21059892541974112, 0.21082358696050518, 0.12949126031974212, 0.19150333560947297, 0.1943362256901855, 0.21943983929856958, 0.18430525813100274, 0.1481188414122988, 0.1839435182205812, 0.3139879709909623, 0.17784037739207503, 0.20040879616445595, 0.12001496819526891, 0.21420386032371075, 0.15167785815270307, 0.1231345221974468, 0.1199224707143105, 0.13706518980057514, 0.14067003154424496, 0.1777174570592419, 0.12286864645008777, 0.16652245410835986, 0.20197272232667063, 0.1608081595229507, 0.12336045197884449, 0.15423945544392137, 0.13139324925024398, 0.22502505778098758, 0.16102716817208962, 0.1888173328658117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00413837702535802, 9.999999999998899e-05, 9.999999999998899e-05, 0.1683743213659742, 0.08910875682993968, 0.04408157436617366, 0.03767612147419508, 0.03561582238600369, 0.043271849555495234, 0.04521124657845954, 0.03258746482772856, 0.1918230922791817, 0.10131836823418128, 0.10102709658115094, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.047644684607353494, 9.999999999998899e-05, 0.016496426605992154, 0.06917500258494114, 0.09594935961782225, 0.06079617668955195, 0.05588814147390986, 9.999999999998899e-05, 0.05647384335282235, 0.08896315858757298, 0.07205045050821623, 0.016868993143805855, 0.393680862962835, 0.35573132407336405, 0.3793789017537643, 0.23728317954721057, 0.30303181389858413, 0.37926385490385883, 0.32703894036352843, 0.3822529899573519, 0.27680258331491303, 0.1018439206985784, 0.08567405359715885, 0.07648561884720806, 0.05377185866361922, 0.10111917073125587, 0.07910024410106287, 0.09927736846556368, 0.10535475208861667, 0.1060663679225663, 0.2392909123053124, 0.17766411612626598, 0.22671181520506756, 0.14138043462727312, 0.15262909119161483, 0.18010212002896409, 0.20947092284880842, 0.2178054789221039, 0.13683967339964387, 0.21848157201113938, 0.19136107390393042, 0.24993377470688716, 0.2226867244534796, 0.19476846583088803, 0.16923496787137304, 0.2217578979039042, 0.19785477058897327, 0.17215643468688957, 0.14211680611935373, 0.19995876176403005, 0.1310771298744423, 0.15001054668271485, 0.17136635115519927, 0.2068674494306374, 0.09889099531259837, 0.19308331470302398, 0.1697407732284848, 0.18287608477133932, 0.1926235532533156, 0.23370236114147414, 0.19859225785745216, 0.2229289456793082, 0.21106136718011914, 0.280387889629361, 0.17141031606678625, 0.21239215525545774, 0.19128191852583576, 0.20355514887604387, 0.1680252156178802, 0.18326760506569617, 0.18564172238670296, 0.17495436541362874, 0.18361654591177134, 0.18825833285851112, 0.17452473912860078, 0.17020283726344387, 0.18615396297662323, 0.1549052614360551, 0.15362754125427724, 0.19524467822915914, 0.1920417051006289, 0.15448443176467375, 0.16762558199496147, 0.16369729154829515, 0.3357732282346373, 0.2891671225417234, 0.15381440539723157, 0.28306790366812484, 0.1857547505630739, 0.2087103355156903, 0.4140537875589949, 0.10453551542981876, 0.44559822191055165, 0.20013876094481142, 0.19240778883699994, 0.17113323154583926, 0.175135456889421, 0.20807507560344507, 0.18617465433795743, 0.19324610039976553, 0.1827157032207728, 0.21912357204238697, 0.06154837962004056, 0.06442506422726002, 0.07973200226714539, 0.07107203009937513, 0.07131682201011647, 0.09250051559064798, 0.11622953097402255, 0.07865382640824958, 0.06140920223563995]}, "mutation_prompt": null}
{"id": "e3395687-11f8-4dd6-a68c-dceec961d9c6", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            # Adaptive adjustment of mutation factor based on fitness improvement\n            if np.random.rand() < 0.1:  # 10% code difference\n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO", "description": "Introduce a novel adaptive parameter adjustment mechanism to dynamically update the mutation factor in Differential Evolution based on the fitness landscape, enhancing exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7bda4a6-f51c-43b2-ba1a-6c8d42f6274e", "metadata": {"aucs": [0.3794781699067069, 0.4667330558146031, 0.30417376558122744, 0.374444877078981, 0.4073005198561124, 0.4216877179578651, 0.3796345678310248, 0.37730220913894086, 0.30331621907028183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0051322553699652, 0.05224416195605486, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07578119932051663, 0.08694380854193728, 0.05892849638866171, 0.12876725011875456, 0.06841913401146249, 0.09347994885423216, 0.10202287600531146, 0.10871906868672665, 0.113707658647075, 0.07803960521411824, 0.05318464159360792, 0.0702264180978367, 0.07521935512155664, 0.06604852173567144, 0.07528161758547247, 0.10646728457897747, 0.05268410811079971, 0.08410265725064159, 0.9341575099515015, 0.9532046024639071, 0.9417266132663004, 0.9716278248934593, 0.9459070418691908, 0.8635840805406487, 0.9690639962710673, 0.9440797171092513, 0.9689860443585284, 0.2684601236973103, 0.1309758786606482, 0.12322127664434412, 0.26108739667140357, 0.2203747206185387, 0.21162566771154745, 0.21059892541974112, 0.21082358696050518, 0.12949126031974212, 0.19150333560947297, 0.1943362256901855, 0.21943983929856958, 0.18430525813100274, 0.1481188414122988, 0.1839435182205812, 0.3139879709909623, 0.17784037739207503, 0.20040879616445595, 0.12001496819526891, 0.21420386032371075, 0.15167785815270307, 0.1231345221974468, 0.1199224707143105, 0.13706518980057514, 0.14067003154424496, 0.1777174570592419, 0.12286864645008777, 0.16652245410835986, 0.20197272232667063, 0.1608081595229507, 0.12336045197884449, 0.15423945544392137, 0.13139324925024398, 0.22502505778098758, 0.16102716817208962, 0.1888173328658117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00413837702535802, 9.999999999998899e-05, 9.999999999998899e-05, 0.1683743213659742, 0.08910875682993968, 0.04408157436617366, 0.03767612147419508, 0.03561582238600369, 0.043271849555495234, 0.04521124657845954, 0.03258746482772856, 0.1918230922791817, 0.10131836823418128, 0.10102709658115094, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.047644684607353494, 9.999999999998899e-05, 0.016496426605992154, 0.06917500258494114, 0.09594935961782225, 0.06079617668955195, 0.05588814147390986, 9.999999999998899e-05, 0.05647384335282235, 0.08896315858757298, 0.07205045050821623, 0.016868993143805855, 0.393680862962835, 0.35573132407336405, 0.3793789017537643, 0.23728317954721057, 0.30303181389858413, 0.37926385490385883, 0.32703894036352843, 0.3822529899573519, 0.27680258331491303, 0.1018439206985784, 0.08567405359715885, 0.07648561884720806, 0.05377185866361922, 0.10111917073125587, 0.07910024410106287, 0.09927736846556368, 0.10535475208861667, 0.1060663679225663, 0.2392909123053124, 0.17766411612626598, 0.22671181520506756, 0.14138043462727312, 0.15262909119161483, 0.18010212002896409, 0.20947092284880842, 0.2178054789221039, 0.13683967339964387, 0.21848157201113938, 0.19136107390393042, 0.24993377470688716, 0.2226867244534796, 0.19476846583088803, 0.16923496787137304, 0.2217578979039042, 0.19785477058897327, 0.17215643468688957, 0.14211680611935373, 0.19995876176403005, 0.1310771298744423, 0.15001054668271485, 0.17136635115519927, 0.2068674494306374, 0.09889099531259837, 0.19308331470302398, 0.1697407732284848, 0.18287608477133932, 0.1926235532533156, 0.23370236114147414, 0.19859225785745216, 0.2229289456793082, 0.21106136718011914, 0.280387889629361, 0.17141031606678625, 0.21239215525545774, 0.19128191852583576, 0.20355514887604387, 0.1680252156178802, 0.18326760506569617, 0.18564172238670296, 0.17495436541362874, 0.18361654591177134, 0.18825833285851112, 0.17452473912860078, 0.17020283726344387, 0.18615396297662323, 0.1549052614360551, 0.15362754125427724, 0.19524467822915914, 0.1920417051006289, 0.15448443176467375, 0.16762558199496147, 0.16369729154829515, 0.3357732282346373, 0.2891671225417234, 0.15381440539723157, 0.28306790366812484, 0.1857547505630739, 0.2087103355156903, 0.4140537875589949, 0.10453551542981876, 0.44559822191055165, 0.20013876094481142, 0.19240778883699994, 0.17113323154583926, 0.175135456889421, 0.20807507560344507, 0.18617465433795743, 0.19324610039976553, 0.1827157032207728, 0.21912357204238697, 0.06154837962004056, 0.06442506422726002, 0.07973200226714539, 0.07107203009937513, 0.07131682201011647, 0.09250051559064798, 0.11622953097402255, 0.07865382640824958, 0.06140920223563995]}, "mutation_prompt": null}
{"id": "fd394e5b-b563-4af3-a46e-2fa22639c186", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                # Introduce dynamic local search\n                if np.random.rand() < 0.3:  # 10% code difference\n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            # Adaptive adjustment of mutation factor based on fitness improvement\n            if np.random.rand() < 0.1:  # 10% code difference\n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO", "description": "Introduce a novel adaptive parameter adjustment mechanism to dynamically update the mutation factor in Differential Evolution based on the fitness landscape, enhancing exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7bda4a6-f51c-43b2-ba1a-6c8d42f6274e", "metadata": {"aucs": [0.3794781699067069, 0.4667330558146031, 0.30417376558122744, 0.374444877078981, 0.4073005198561124, 0.4216877179578651, 0.3796345678310248, 0.37730220913894086, 0.30331621907028183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0051322553699652, 0.05224416195605486, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07578119932051663, 0.08694380854193728, 0.05892849638866171, 0.12876725011875456, 0.06841913401146249, 0.09347994885423216, 0.10202287600531146, 0.10871906868672665, 0.113707658647075, 0.07803960521411824, 0.05318464159360792, 0.0702264180978367, 0.07521935512155664, 0.06604852173567144, 0.07528161758547247, 0.10646728457897747, 0.05268410811079971, 0.08410265725064159, 0.9341575099515015, 0.9532046024639071, 0.9417266132663004, 0.9716278248934593, 0.9459070418691908, 0.8635840805406487, 0.9690639962710673, 0.9440797171092513, 0.9689860443585284, 0.2684601236973103, 0.1309758786606482, 0.12322127664434412, 0.26108739667140357, 0.2203747206185387, 0.21162566771154745, 0.21059892541974112, 0.21082358696050518, 0.12949126031974212, 0.19150333560947297, 0.1943362256901855, 0.21943983929856958, 0.18430525813100274, 0.1481188414122988, 0.1839435182205812, 0.3139879709909623, 0.17784037739207503, 0.20040879616445595, 0.12001496819526891, 0.21420386032371075, 0.15167785815270307, 0.1231345221974468, 0.1199224707143105, 0.13706518980057514, 0.14067003154424496, 0.1777174570592419, 0.12286864645008777, 0.16652245410835986, 0.20197272232667063, 0.1608081595229507, 0.12336045197884449, 0.15423945544392137, 0.13139324925024398, 0.22502505778098758, 0.16102716817208962, 0.1888173328658117, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00413837702535802, 9.999999999998899e-05, 9.999999999998899e-05, 0.1683743213659742, 0.08910875682993968, 0.04408157436617366, 0.03767612147419508, 0.03561582238600369, 0.043271849555495234, 0.04521124657845954, 0.03258746482772856, 0.1918230922791817, 0.10131836823418128, 0.10102709658115094, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.047644684607353494, 9.999999999998899e-05, 0.016496426605992154, 0.06917500258494114, 0.09594935961782225, 0.06079617668955195, 0.05588814147390986, 9.999999999998899e-05, 0.05647384335282235, 0.08896315858757298, 0.07205045050821623, 0.016868993143805855, 0.393680862962835, 0.35573132407336405, 0.3793789017537643, 0.23728317954721057, 0.30303181389858413, 0.37926385490385883, 0.32703894036352843, 0.3822529899573519, 0.27680258331491303, 0.1018439206985784, 0.08567405359715885, 0.07648561884720806, 0.05377185866361922, 0.10111917073125587, 0.07910024410106287, 0.09927736846556368, 0.10535475208861667, 0.1060663679225663, 0.2392909123053124, 0.17766411612626598, 0.22671181520506756, 0.14138043462727312, 0.15262909119161483, 0.18010212002896409, 0.20947092284880842, 0.2178054789221039, 0.13683967339964387, 0.21848157201113938, 0.19136107390393042, 0.24993377470688716, 0.2226867244534796, 0.19476846583088803, 0.16923496787137304, 0.2217578979039042, 0.19785477058897327, 0.17215643468688957, 0.14211680611935373, 0.19995876176403005, 0.1310771298744423, 0.15001054668271485, 0.17136635115519927, 0.2068674494306374, 0.09889099531259837, 0.19308331470302398, 0.1697407732284848, 0.18287608477133932, 0.1926235532533156, 0.23370236114147414, 0.19859225785745216, 0.2229289456793082, 0.21106136718011914, 0.280387889629361, 0.17141031606678625, 0.21239215525545774, 0.19128191852583576, 0.20355514887604387, 0.1680252156178802, 0.18326760506569617, 0.18564172238670296, 0.17495436541362874, 0.18361654591177134, 0.18825833285851112, 0.17452473912860078, 0.17020283726344387, 0.18615396297662323, 0.1549052614360551, 0.15362754125427724, 0.19524467822915914, 0.1920417051006289, 0.15448443176467375, 0.16762558199496147, 0.16369729154829515, 0.3357732282346373, 0.2891671225417234, 0.15381440539723157, 0.28306790366812484, 0.1857547505630739, 0.2087103355156903, 0.4140537875589949, 0.10453551542981876, 0.44559822191055165, 0.20013876094481142, 0.19240778883699994, 0.17113323154583926, 0.175135456889421, 0.20807507560344507, 0.18617465433795743, 0.19324610039976553, 0.1827157032207728, 0.21912357204238697, 0.06154837962004056, 0.06442506422726002, 0.07973200226714539, 0.07107203009937513, 0.07131682201011647, 0.09250051559064798, 0.11622953097402255, 0.07865382640824958, 0.06140920223563995]}, "mutation_prompt": null}
{"id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence", "description": "Introduce an adaptive scaling factor for the mutation in Differential Evolution to enhance exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 71, "fitness": 0.18899271550629085, "feedback": "The algorithm AdaptiveDynamicLocalSearchEGWO_FastConvergence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.18.", "error": "", "parent_id": "b7bda4a6-f51c-43b2-ba1a-6c8d42f6274e", "metadata": {"aucs": [0.34287899890117246, 0.30579359815120033, 0.481339004413603, 0.4194228226867366, 0.48774801621875863, 0.4500614579667106, 0.39245748826506377, 0.3541076253933677, 0.3487300765627348, 0.02714896365247388, 0.029427763482174463, 9.999999999998899e-05, 0.09015019083594655, 0.055232176961498625, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506691327281078, 0.07946685524012886, 0.022187533106290402, 0.1074418094479479, 0.10225200106094212, 0.1142724271191572, 0.10285071172607163, 0.09399822833349192, 0.11321139857174645, 0.09111281019461914, 0.05029888948129935, 0.07537590470151756, 0.08384177648239943, 0.07976011863921673, 0.08602725011470391, 0.10021430342765902, 0.06959844666662374, 0.08488271648466905, 0.918301954102391, 0.968147940677528, 0.9175304563577127, 0.2600034920418457, 0.9401088562714096, 0.8736516270544419, 0.9675480774308344, 0.9550570922147665, 0.8820824688446488, 0.20969446932754798, 0.20849317620247632, 0.24221432869504256, 0.10952504896699922, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.19380103482313293, 0.2014334450433909, 0.200445123725409, 0.13199399937435297, 0.21316110695028212, 0.25806516677333446, 0.2504992002784172, 0.31886761430295285, 0.17474080565250583, 0.31094252942739053, 0.17050087444879192, 0.22472760417737203, 0.12081434653461942, 0.1616948954994536, 9.999999999998899e-05, 0.12046448867404269, 0.12123953970918044, 0.18773054540112522, 0.18014942113513932, 0.1637543850262857, 0.2069009708441788, 0.1700862692559817, 0.15840110957348863, 0.19673194499540658, 0.15237936049253853, 0.15692729424616447, 0.13099356619886826, 0.22525951479718231, 0.19306291188412972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 0.07255217080210208, 0.09305146000052811, 0.08943344478356519, 0.0854887822177508, 0.03956811160474061, 0.08132931941276456, 0.045597908217000604, 0.0834166073568644, 0.03752836676284843, 0.15315357114484718, 0.015353268755589622, 9.999999999998899e-05, 0.00038236396779245396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025909518349043315, 9.999999999998899e-05, 0.10519272783348499, 0.05189550896947326, 0.06667392503603531, 0.030458762670713457, 0.0031482906131777844, 0.07394922513660462, 0.04925985248291598, 0.0358076314486836, 0.028062892625639102, 0.1971048784689945, 0.29727155839802255, 0.3107041531468243, 0.36194548532738646, 0.3720980909388333, 0.2987192414227893, 0.2776967150565638, 0.3911832733208952, 0.3940677367376261, 0.047700896361612455, 0.11041619577742134, 0.07243940076680577, 0.036811290213709436, 0.05838311341720126, 0.056535707012663305, 0.0770259784967775, 0.10371623721088108, 0.08132763175113722, 0.25430716605819903, 0.166705128830136, 0.21557957340024392, 0.1562762460394228, 0.22178332310041948, 0.1498495718397771, 0.19466747574082188, 0.23734809876503982, 0.20224288331066198, 0.15348725135216756, 0.2289292482630093, 0.2022810828511883, 0.27403329448712144, 0.2837613449643769, 0.2873167961817179, 0.17245379074690825, 0.21036960115510284, 0.20353369810797906, 0.1522678538904545, 0.1611704660672918, 0.15762274890164385, 0.21036765927547085, 0.15462341970413962, 0.22922677859696627, 0.09725659660481178, 0.20277059781646245, 0.12569192877450386, 0.24472796283087872, 0.18591663054719854, 0.20653562747675946, 0.19732882470195168, 0.22157709192455122, 0.29853198003701986, 0.25553163747183494, 0.4426363873270863, 0.26655856488733853, 0.16462441159630403, 0.17536219211201443, 0.18534422923102234, 0.19107849112909825, 0.17286666867465306, 0.17478759456906812, 0.1739702094569182, 0.1832253620173505, 0.18475358870563507, 0.1195824164687358, 0.4666475852346783, 0.20746194956363573, 0.3721360084097505, 0.19798918976024693, 0.15969221147842105, 0.31568598176312, 0.49413843808858104, 0.3207945045633507, 0.24774238149977978, 0.157128721881441, 0.35083682375295944, 0.22828414381901707, 0.20548715154980746, 0.2009047811802438, 0.1280013856491421, 0.14732565660326913, 0.36992676062996166, 0.1823539730721765, 0.17098427668847416, 0.20145083260106844, 0.19240746323252667, 0.18250817888814286, 0.1992548519268662, 0.1983170641602403, 0.18904436845654748, 0.19691695178576452, 0.06876776670656348, 0.07615102555170228, 0.06978430519608769, 0.05883787503846161, 0.09483539225501914, 0.07190836915436993, 0.08279867708561361, 0.06720034139713849, 0.0648116158908193]}, "mutation_prompt": null}
{"id": "b802f0ae-a9af-4062-9fed-d5e96ab07634", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence", "description": "Introduce an adaptive scaling factor for the mutation in Differential Evolution to enhance exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.34287899890117246, 0.30579359815120033, 0.481339004413603, 0.4194228226867366, 0.48774801621875863, 0.4500614579667106, 0.39245748826506377, 0.3541076253933677, 0.3487300765627348, 0.02714896365247388, 0.029427763482174463, 9.999999999998899e-05, 0.09015019083594655, 0.055232176961498625, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506691327281078, 0.07946685524012886, 0.022187533106290402, 0.1074418094479479, 0.10225200106094212, 0.1142724271191572, 0.10285071172607163, 0.09399822833349192, 0.11321139857174645, 0.09111281019461914, 0.05029888948129935, 0.07537590470151756, 0.08384177648239943, 0.07976011863921673, 0.08602725011470391, 0.10021430342765902, 0.06959844666662374, 0.08488271648466905, 0.918301954102391, 0.968147940677528, 0.9175304563577127, 0.2600034920418457, 0.9401088562714096, 0.8736516270544419, 0.9675480774308344, 0.9550570922147665, 0.8820824688446488, 0.20969446932754798, 0.20849317620247632, 0.24221432869504256, 0.10952504896699922, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.19380103482313293, 0.2014334450433909, 0.200445123725409, 0.13199399937435297, 0.21316110695028212, 0.25806516677333446, 0.2504992002784172, 0.31886761430295285, 0.17474080565250583, 0.31094252942739053, 0.17050087444879192, 0.22472760417737203, 0.12081434653461942, 0.1616948954994536, 9.999999999998899e-05, 0.12046448867404269, 0.12123953970918044, 0.18773054540112522, 0.18014942113513932, 0.1637543850262857, 0.2069009708441788, 0.1700862692559817, 0.15840110957348863, 0.19673194499540658, 0.15237936049253853, 0.15692729424616447, 0.13099356619886826, 0.22525951479718231, 0.19306291188412972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 0.07255217080210208, 0.09305146000052811, 0.08943344478356519, 0.0854887822177508, 0.03956811160474061, 0.08132931941276456, 0.045597908217000604, 0.0834166073568644, 0.03752836676284843, 0.15315357114484718, 0.015353268755589622, 9.999999999998899e-05, 0.00038236396779245396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025909518349043315, 9.999999999998899e-05, 0.10519272783348499, 0.05189550896947326, 0.06667392503603531, 0.030458762670713457, 0.0031482906131777844, 0.07394922513660462, 0.04925985248291598, 0.0358076314486836, 0.028062892625639102, 0.1971048784689945, 0.29727155839802255, 0.3107041531468243, 0.36194548532738646, 0.3720980909388333, 0.2987192414227893, 0.2776967150565638, 0.3911832733208952, 0.3940677367376261, 0.047700896361612455, 0.11041619577742134, 0.07243940076680577, 0.036811290213709436, 0.05838311341720126, 0.056535707012663305, 0.0770259784967775, 0.10371623721088108, 0.08132763175113722, 0.25430716605819903, 0.166705128830136, 0.21557957340024392, 0.1562762460394228, 0.22178332310041948, 0.1498495718397771, 0.19466747574082188, 0.23734809876503982, 0.20224288331066198, 0.15348725135216756, 0.2289292482630093, 0.2022810828511883, 0.27403329448712144, 0.2837613449643769, 0.2873167961817179, 0.17245379074690825, 0.21036960115510284, 0.20353369810797906, 0.1522678538904545, 0.1611704660672918, 0.15762274890164385, 0.21036765927547085, 0.15462341970413962, 0.22922677859696627, 0.09725659660481178, 0.20277059781646245, 0.12569192877450386, 0.24472796283087872, 0.18591663054719854, 0.20653562747675946, 0.19732882470195168, 0.22157709192455122, 0.29853198003701986, 0.25553163747183494, 0.4426363873270863, 0.26655856488733853, 0.16462441159630403, 0.17536219211201443, 0.18534422923102234, 0.19107849112909825, 0.17286666867465306, 0.17478759456906812, 0.1739702094569182, 0.1832253620173505, 0.18475358870563507, 0.1195824164687358, 0.4666475852346783, 0.20746194956363573, 0.3721360084097505, 0.19798918976024693, 0.15969221147842105, 0.31568598176312, 0.49413843808858104, 0.3207945045633507, 0.24774238149977978, 0.157128721881441, 0.35083682375295944, 0.22828414381901707, 0.20548715154980746, 0.2009047811802438, 0.1280013856491421, 0.14732565660326913, 0.36992676062996166, 0.1823539730721765, 0.17098427668847416, 0.20145083260106844, 0.19240746323252667, 0.18250817888814286, 0.1992548519268662, 0.1983170641602403, 0.18904436845654748, 0.19691695178576452, 0.06876776670656348, 0.07615102555170228, 0.06978430519608769, 0.05883787503846161, 0.09483539225501914, 0.07190836915436993, 0.08279867708561361, 0.06720034139713849, 0.0648116158908193]}, "mutation_prompt": null}
{"id": "d68a5472-e849-49e4-9e13-f0859d9f82fb", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FasterConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n                    if func(positions[i]) < fitness[i]:  # Adaptive mutation control based on individual fitness\n                        f *= 1.2  # Increase mutation factor for promising regions\n                    else:\n                        f *= 0.8  # Decrease mutation factor for less promising regions\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FasterConvergence", "description": "Implement adaptive mutation control based on individual fitness evaluations to focus search in promising regions and accelerate convergence.", "configspace": "", "generation": 73, "fitness": 0.16811712319974959, "feedback": "The algorithm AdaptiveDynamicLocalSearchEGWO_FasterConvergence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.17.", "error": "", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.46947221193325017, 0.3025721527687856, 0.3023667786171069, 0.2242252605041377, 0.20720901466481823, 0.20702482605853112, 0.2182060071284918, 0.2621960945123186, 0.3179073071722236, 0.04942361902052439, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04791997832370598, 0.022986451060901913, 9.999999999998899e-05, 0.08163366387974202, 9.999999999998899e-05, 0.06908548963261418, 0.0907140978534009, 0.07499678797155251, 0.10131145458912105, 0.11350801949069134, 0.06520210845820562, 0.08382298774545904, 0.07151810729263453, 0.09865661286968874, 0.06805026608057729, 0.06165452319576015, 0.04004306742090935, 0.10317874098973256, 0.05411376033226478, 0.06618629346432703, 0.08484489331067058, 0.07911798199079334, 0.06656899694377971, 0.936658560377913, 0.9753215649790185, 0.9729850166581053, 0.37767876733284245, 0.9037922633530754, 0.583959949863584, 0.9263937542781129, 0.9725687385429116, 0.5576479920255808, 0.1952681130438627, 0.03900527791912867, 0.11197376221392275, 0.10478013589194801, 0.17077553434314507, 0.01819878652432494, 0.23963405405328575, 0.12338159652842573, 0.23975099160808988, 0.13237782696265055, 0.1939117992639282, 0.21192830900556503, 0.21651735867740518, 0.12920383949409098, 0.2069911560936889, 0.13841823269428732, 0.2226802881147112, 0.13316602995353255, 0.14583153368082058, 0.12285838714023356, 0.16621236771274694, 0.12632463089413482, 0.1494473970144029, 0.12671254878261984, 0.15783606714612874, 0.12054759435242046, 0.10971722837347841, 0.20360336532882173, 0.13008096148226067, 0.12232140542557646, 0.18086114480853743, 0.13413820739807647, 0.16361109632743942, 0.12782421720600157, 0.17866141414102676, 0.12109002692455761, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019666943820536686, 9.999999999998899e-05, 9.999999999998899e-05, 0.03203927858858113, 9.999999999998899e-05, 9.999999999998899e-05, 0.060022184771564624, 0.05421183203177915, 0.06864776917897764, 0.01875634759562672, 0.028923165127649586, 0.04553068534616611, 0.14327500605402022, 0.06965968992349225, 0.07055269490772298, 0.02255161985841736, 0.020441184153648484, 0.028937080319098252, 0.016507135259668737, 0.0040202015609763775, 9.999999999998899e-05, 0.005643617043958549, 9.999999999998899e-05, 0.03396756583723293, 0.040482960768921994, 0.056616332792717716, 0.014333022540582885, 0.039804968745787095, 0.04512345533560802, 0.05547471325607589, 0.026075018984549003, 0.034075269121136675, 0.07586951730446567, 0.3804773094696412, 0.2119499826990866, 0.3889485530749054, 0.22232891157192924, 0.27039183578100046, 0.27761329339183793, 0.2661822278241688, 0.26696548433447453, 0.44432126602773137, 0.0673211075570298, 0.09325881887682186, 0.06869385896449198, 0.04898804420258607, 0.06644748185628069, 0.09011818000045513, 0.09320603289091811, 0.09185331834574861, 0.10266583532835705, 0.28948792575722204, 0.2060435091585282, 0.1763314566340196, 0.18796460175468888, 0.1456158940596457, 0.24206713624202547, 0.2115871189081442, 0.2203124809312862, 0.21461161062452072, 0.15735021711331465, 0.19710516055806582, 0.18740228565613304, 0.19091938469238445, 0.2909759027056572, 0.1704686186150064, 0.16822673757370832, 0.22915648855285675, 0.17964219340991727, 0.1575899772255578, 0.1449366225978831, 0.13374734189394333, 0.13693487799275006, 0.14653612477714129, 0.13900668683460193, 0.16903590060837537, 0.15885253455186743, 0.17043096924430834, 0.21320117202567512, 0.23656104189679883, 0.32135721291928854, 0.18707169601936124, 0.26447516330647225, 0.24213209575526473, 0.33582942686769934, 0.18682749237712315, 0.20317329380591787, 0.17044036205760527, 0.17905647285238757, 0.1898392397779224, 0.1745993144406499, 0.18627279461154145, 0.16994951891461774, 0.16934806646296552, 0.17748462033797363, 0.16952225139077204, 0.17079693747322833, 0.1506950920603629, 0.15678868184531325, 0.5384557385261141, 0.19796750883798742, 0.12204585422131753, 0.21247876691547385, 0.1349495590019062, 0.1477650527288955, 0.22958038463092012, 0.14360272394691054, 0.26323723432016577, 0.3157014634813248, 0.16619634977924014, 0.20218570498756017, 0.3771592562805659, 0.2073993148105282, 0.07842309259077918, 0.23094392839439914, 0.1766823891707594, 0.19891566983143216, 0.18507115146669972, 0.2055173138601868, 0.1911679087493301, 0.18924912726059562, 0.20800885493973642, 0.19447197527721272, 0.07839525785892243, 0.06201236205275895, 0.059104819563690625, 0.06088475867192977, 0.08785026555455222, 0.072132318994783, 0.06351563965892348, 0.06959599572039366, 0.05216151154785531]}, "mutation_prompt": null}
{"id": "f06bf880-41be-4323-b913-2597f62f44a5", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergenceImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n        f_change_threshold = 0.1  # Threshold to trigger mutation factor change\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n            \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, f_change_threshold) if np.mean(new_fitness) > np.mean(fitness) else min(f / f_decay, 0.9)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergenceImproved", "description": "Improve convergence speed by adding a mechanism to dynamically adjust the mutation factor based on the fitness landscape to enhance exploration-exploitation balance.", "configspace": "", "generation": 74, "fitness": 0.18526738899005094, "feedback": "The algorithm AdaptiveDynamicLocalSearchEGWO_FastConvergenceImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.3997982643115483, 0.38740823268430813, 0.4148815089272463, 0.4122607144510727, 0.48774801621875863, 0.44509935485212304, 0.33668600917619096, 0.4270453087551448, 0.22519069709942663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06580500000518641, 0.04933072631243485, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06491907709211941, 0.10595284938214611, 0.07662383015515462, 0.10942985858030807, 0.05346058313918456, 0.10263175534368218, 0.07032646195317849, 0.1035093122113514, 0.10847665574535326, 0.08306505470627945, 0.04824011071433254, 0.07537590470151756, 0.09628176151872014, 0.08144726314596118, 0.08727521684395612, 0.06515368428768653, 0.049615308087817334, 0.08084404645348242, 0.954638016521393, 0.968147940677528, 0.9796964828229753, 0.8951521787468776, 0.9467634476802302, 0.8736516270544419, 0.968279204129524, 0.9550570922147665, 0.8820824688446488, 0.19994381958766083, 0.20849317620247632, 0.24221432869504256, 0.1847919955523536, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.16167953979835925, 0.13693384913704887, 0.21169872258608546, 0.12788477824818767, 0.30619932229086866, 0.19398598600184602, 0.3629569732040103, 0.19784385358757994, 0.16520479682830647, 0.22576749904358429, 0.21882031980789818, 0.2150294608867659, 0.07827688897355278, 0.1628459299696451, 0.11343068132543432, 0.10681164805763821, 9.999999999998899e-05, 0.15313035393331698, 0.1644762569100311, 0.13299781569505176, 0.1924757228109254, 0.13267173665784826, 0.16013902936412883, 0.15841973335712445, 0.17351730592726056, 0.12858112958532564, 0.14312588264277637, 0.13567912030085005, 0.1930629121710108, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020443588383917133, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 9.999999999998899e-05, 0.04170698022492392, 0.11418443263598543, 0.045719902968689, 0.02565926090616033, 0.06846883677088411, 0.030789039536140095, 0.09964975893602224, 0.03752836676284843, 0.09871761363854425, 0.0002175415404374048, 0.0014322919143640034, 0.0020055303409275416, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1082767036824025, 0.04719831252683193, 0.09905709457868983, 0.05215556609083227, 9.999999999998899e-05, 0.04617982683387434, 0.06709909716469753, 0.03206458679566748, 0.032963255406770475, 0.19706831063480934, 0.362398816704676, 0.3788858921216638, 0.37899204095860095, 0.27833210765992167, 0.24431655744095293, 0.38555308962133383, 0.3911832733208952, 0.3397947853568366, 0.05466365077562729, 0.06416974481462834, 0.07243940076680577, 0.09291940629304696, 0.06722503255061751, 0.056535707012663305, 0.08522071168650724, 0.08542343027656552, 0.07835431761625478, 0.21125058250166362, 0.166705128830136, 0.18559460727818633, 0.19092137820985067, 0.22178332310041948, 0.1498495718397771, 0.20108100415687113, 0.21768791128584786, 0.17356235054610003, 0.20854538108695575, 0.25034709532713306, 0.19300677770279995, 0.27403329448712144, 0.27941634804625215, 0.21692159784082377, 0.2745289250751973, 0.21036960272128036, 0.2085944945755942, 0.16296426216513937, 0.15528026535471295, 0.15352650357390052, 0.13045719965148217, 0.1612068841252038, 0.2027301514745925, 0.17561112224625353, 0.22082314213650311, 0.12569192877450386, 0.22726655999271606, 0.18053236507536952, 0.2145549281863649, 0.17707172473895483, 0.20845176576898006, 0.17836632977195155, 0.19004746172438924, 0.20954973437227487, 0.18755549373995783, 0.17525289807342537, 0.17590829000121178, 0.1723463551353216, 0.17272636190451363, 0.18197143292098528, 0.17514368644223155, 0.16907361754065697, 0.16392288045721692, 0.18234251511787347, 0.12185757675681486, 0.6006075651809598, 0.20665549438859998, 0.3721360084097505, 0.19652468009645108, 0.12232503071432987, 0.17414887231005183, 0.14225610930138355, 0.3207945045633507, 0.27780489349736337, 0.157128721881441, 0.35083682375295944, 0.43484452795710904, 0.20548715154980746, 0.17718210544600677, 0.1663675139030667, 0.09850738887791577, 0.24574191922366817, 0.18234489168782342, 0.17098427668847416, 0.20145083260106844, 0.20553179140072886, 0.18250817888814286, 0.1992548519268662, 0.21420444473235511, 0.18904436845654748, 0.17716922014023384, 0.10032889192767724, 0.07615102555170228, 0.06287396986018379, 0.05788586882081059, 0.10208559120411242, 0.09600060865302584, 0.0683587651059967, 0.05305005940088248, 0.06481238413600598]}, "mutation_prompt": null}
{"id": "7a9302c9-c9f9-41a1-aea0-82b87de4d434", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence", "description": "Introduce an adaptive scaling factor for the mutation in Differential Evolution to enhance exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.34287899890117246, 0.30579359815120033, 0.481339004413603, 0.4194228226867366, 0.48774801621875863, 0.4500614579667106, 0.39245748826506377, 0.3541076253933677, 0.3487300765627348, 0.02714896365247388, 0.029427763482174463, 9.999999999998899e-05, 0.09015019083594655, 0.055232176961498625, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506691327281078, 0.07946685524012886, 0.022187533106290402, 0.1074418094479479, 0.10225200106094212, 0.1142724271191572, 0.10285071172607163, 0.09399822833349192, 0.11321139857174645, 0.09111281019461914, 0.05029888948129935, 0.07537590470151756, 0.08384177648239943, 0.07976011863921673, 0.08602725011470391, 0.10021430342765902, 0.06959844666662374, 0.08488271648466905, 0.918301954102391, 0.968147940677528, 0.9175304563577127, 0.2600034920418457, 0.9401088562714096, 0.8736516270544419, 0.9675480774308344, 0.9550570922147665, 0.8820824688446488, 0.20969446932754798, 0.20849317620247632, 0.24221432869504256, 0.10952504896699922, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.19380103482313293, 0.2014334450433909, 0.200445123725409, 0.13199399937435297, 0.21316110695028212, 0.25806516677333446, 0.2504992002784172, 0.31886761430295285, 0.17474080565250583, 0.31094252942739053, 0.17050087444879192, 0.22472760417737203, 0.12081434653461942, 0.1616948954994536, 9.999999999998899e-05, 0.12046448867404269, 0.12123953970918044, 0.18773054540112522, 0.18014942113513932, 0.1637543850262857, 0.2069009708441788, 0.1700862692559817, 0.15840110957348863, 0.19673194499540658, 0.15237936049253853, 0.15692729424616447, 0.13099356619886826, 0.22525951479718231, 0.19306291188412972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 0.07255217080210208, 0.09305146000052811, 0.08943344478356519, 0.0854887822177508, 0.03956811160474061, 0.08132931941276456, 0.045597908217000604, 0.0834166073568644, 0.03752836676284843, 0.15315357114484718, 0.015353268755589622, 9.999999999998899e-05, 0.00038236396779245396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025909518349043315, 9.999999999998899e-05, 0.10519272783348499, 0.05189550896947326, 0.06667392503603531, 0.030458762670713457, 0.0031482906131777844, 0.07394922513660462, 0.04925985248291598, 0.0358076314486836, 0.028062892625639102, 0.1971048784689945, 0.29727155839802255, 0.3107041531468243, 0.36194548532738646, 0.3720980909388333, 0.2987192414227893, 0.2776967150565638, 0.3911832733208952, 0.3940677367376261, 0.047700896361612455, 0.11041619577742134, 0.07243940076680577, 0.036811290213709436, 0.05838311341720126, 0.056535707012663305, 0.0770259784967775, 0.10371623721088108, 0.08132763175113722, 0.25430716605819903, 0.166705128830136, 0.21557957340024392, 0.1562762460394228, 0.22178332310041948, 0.1498495718397771, 0.19466747574082188, 0.23734809876503982, 0.20224288331066198, 0.15348725135216756, 0.2289292482630093, 0.2022810828511883, 0.27403329448712144, 0.2837613449643769, 0.2873167961817179, 0.17245379074690825, 0.21036960115510284, 0.20353369810797906, 0.1522678538904545, 0.1611704660672918, 0.15762274890164385, 0.21036765927547085, 0.15462341970413962, 0.22922677859696627, 0.09725659660481178, 0.20277059781646245, 0.12569192877450386, 0.24472796283087872, 0.18591663054719854, 0.20653562747675946, 0.19732882470195168, 0.22157709192455122, 0.29853198003701986, 0.25553163747183494, 0.4426363873270863, 0.26655856488733853, 0.16462441159630403, 0.17536219211201443, 0.18534422923102234, 0.19107849112909825, 0.17286666867465306, 0.17478759456906812, 0.1739702094569182, 0.1832253620173505, 0.18475358870563507, 0.1195824164687358, 0.4666475852346783, 0.20746194956363573, 0.3721360084097505, 0.19798918976024693, 0.15969221147842105, 0.31568598176312, 0.49413843808858104, 0.3207945045633507, 0.24774238149977978, 0.157128721881441, 0.35083682375295944, 0.22828414381901707, 0.20548715154980746, 0.2009047811802438, 0.1280013856491421, 0.14732565660326913, 0.36992676062996166, 0.1823539730721765, 0.17098427668847416, 0.20145083260106844, 0.19240746323252667, 0.18250817888814286, 0.1992548519268662, 0.1983170641602403, 0.18904436845654748, 0.19691695178576452, 0.06876776670656348, 0.07615102555170228, 0.06978430519608769, 0.05883787503846161, 0.09483539225501914, 0.07190836915436993, 0.08279867708561361, 0.06720034139713849, 0.0648116158908193]}, "mutation_prompt": null}
{"id": "31e53ecd-5d46-4175-ab5f-7f99558cc683", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence", "description": "Introduce an adaptive scaling factor for the mutation in Differential Evolution to enhance exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.34287899890117246, 0.30579359815120033, 0.481339004413603, 0.4194228226867366, 0.48774801621875863, 0.4500614579667106, 0.39245748826506377, 0.3541076253933677, 0.3487300765627348, 0.02714896365247388, 0.029427763482174463, 9.999999999998899e-05, 0.09015019083594655, 0.055232176961498625, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506691327281078, 0.07946685524012886, 0.022187533106290402, 0.1074418094479479, 0.10225200106094212, 0.1142724271191572, 0.10285071172607163, 0.09399822833349192, 0.11321139857174645, 0.09111281019461914, 0.05029888948129935, 0.07537590470151756, 0.08384177648239943, 0.07976011863921673, 0.08602725011470391, 0.10021430342765902, 0.06959844666662374, 0.08488271648466905, 0.918301954102391, 0.968147940677528, 0.9175304563577127, 0.2600034920418457, 0.9401088562714096, 0.8736516270544419, 0.9675480774308344, 0.9550570922147665, 0.8820824688446488, 0.20969446932754798, 0.20849317620247632, 0.24221432869504256, 0.10952504896699922, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.19380103482313293, 0.2014334450433909, 0.200445123725409, 0.13199399937435297, 0.21316110695028212, 0.25806516677333446, 0.2504992002784172, 0.31886761430295285, 0.17474080565250583, 0.31094252942739053, 0.17050087444879192, 0.22472760417737203, 0.12081434653461942, 0.1616948954994536, 9.999999999998899e-05, 0.12046448867404269, 0.12123953970918044, 0.18773054540112522, 0.18014942113513932, 0.1637543850262857, 0.2069009708441788, 0.1700862692559817, 0.15840110957348863, 0.19673194499540658, 0.15237936049253853, 0.15692729424616447, 0.13099356619886826, 0.22525951479718231, 0.19306291188412972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 0.07255217080210208, 0.09305146000052811, 0.08943344478356519, 0.0854887822177508, 0.03956811160474061, 0.08132931941276456, 0.045597908217000604, 0.0834166073568644, 0.03752836676284843, 0.15315357114484718, 0.015353268755589622, 9.999999999998899e-05, 0.00038236396779245396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025909518349043315, 9.999999999998899e-05, 0.10519272783348499, 0.05189550896947326, 0.06667392503603531, 0.030458762670713457, 0.0031482906131777844, 0.07394922513660462, 0.04925985248291598, 0.0358076314486836, 0.028062892625639102, 0.1971048784689945, 0.29727155839802255, 0.3107041531468243, 0.36194548532738646, 0.3720980909388333, 0.2987192414227893, 0.2776967150565638, 0.3911832733208952, 0.3940677367376261, 0.047700896361612455, 0.11041619577742134, 0.07243940076680577, 0.036811290213709436, 0.05838311341720126, 0.056535707012663305, 0.0770259784967775, 0.10371623721088108, 0.08132763175113722, 0.25430716605819903, 0.166705128830136, 0.21557957340024392, 0.1562762460394228, 0.22178332310041948, 0.1498495718397771, 0.19466747574082188, 0.23734809876503982, 0.20224288331066198, 0.15348725135216756, 0.2289292482630093, 0.2022810828511883, 0.27403329448712144, 0.2837613449643769, 0.2873167961817179, 0.17245379074690825, 0.21036960115510284, 0.20353369810797906, 0.1522678538904545, 0.1611704660672918, 0.15762274890164385, 0.21036765927547085, 0.15462341970413962, 0.22922677859696627, 0.09725659660481178, 0.20277059781646245, 0.12569192877450386, 0.24472796283087872, 0.18591663054719854, 0.20653562747675946, 0.19732882470195168, 0.22157709192455122, 0.29853198003701986, 0.25553163747183494, 0.4426363873270863, 0.26655856488733853, 0.16462441159630403, 0.17536219211201443, 0.18534422923102234, 0.19107849112909825, 0.17286666867465306, 0.17478759456906812, 0.1739702094569182, 0.1832253620173505, 0.18475358870563507, 0.1195824164687358, 0.4666475852346783, 0.20746194956363573, 0.3721360084097505, 0.19798918976024693, 0.15969221147842105, 0.31568598176312, 0.49413843808858104, 0.3207945045633507, 0.24774238149977978, 0.157128721881441, 0.35083682375295944, 0.22828414381901707, 0.20548715154980746, 0.2009047811802438, 0.1280013856491421, 0.14732565660326913, 0.36992676062996166, 0.1823539730721765, 0.17098427668847416, 0.20145083260106844, 0.19240746323252667, 0.18250817888814286, 0.1992548519268662, 0.1983170641602403, 0.18904436845654748, 0.19691695178576452, 0.06876776670656348, 0.07615102555170228, 0.06978430519608769, 0.05883787503846161, 0.09483539225501914, 0.07190836915436993, 0.08279867708561361, 0.06720034139713849, 0.0648116158908193]}, "mutation_prompt": null}
{"id": "fb244174-60ac-4985-bde9-8bd69dc4e6f8", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence", "description": "Introduce an adaptive scaling factor for the mutation in Differential Evolution to enhance exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.34287899890117246, 0.30579359815120033, 0.481339004413603, 0.4194228226867366, 0.48774801621875863, 0.4500614579667106, 0.39245748826506377, 0.3541076253933677, 0.3487300765627348, 0.02714896365247388, 0.029427763482174463, 9.999999999998899e-05, 0.09015019083594655, 0.055232176961498625, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506691327281078, 0.07946685524012886, 0.022187533106290402, 0.1074418094479479, 0.10225200106094212, 0.1142724271191572, 0.10285071172607163, 0.09399822833349192, 0.11321139857174645, 0.09111281019461914, 0.05029888948129935, 0.07537590470151756, 0.08384177648239943, 0.07976011863921673, 0.08602725011470391, 0.10021430342765902, 0.06959844666662374, 0.08488271648466905, 0.918301954102391, 0.968147940677528, 0.9175304563577127, 0.2600034920418457, 0.9401088562714096, 0.8736516270544419, 0.9675480774308344, 0.9550570922147665, 0.8820824688446488, 0.20969446932754798, 0.20849317620247632, 0.24221432869504256, 0.10952504896699922, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.19380103482313293, 0.2014334450433909, 0.200445123725409, 0.13199399937435297, 0.21316110695028212, 0.25806516677333446, 0.2504992002784172, 0.31886761430295285, 0.17474080565250583, 0.31094252942739053, 0.17050087444879192, 0.22472760417737203, 0.12081434653461942, 0.1616948954994536, 9.999999999998899e-05, 0.12046448867404269, 0.12123953970918044, 0.18773054540112522, 0.18014942113513932, 0.1637543850262857, 0.2069009708441788, 0.1700862692559817, 0.15840110957348863, 0.19673194499540658, 0.15237936049253853, 0.15692729424616447, 0.13099356619886826, 0.22525951479718231, 0.19306291188412972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 0.07255217080210208, 0.09305146000052811, 0.08943344478356519, 0.0854887822177508, 0.03956811160474061, 0.08132931941276456, 0.045597908217000604, 0.0834166073568644, 0.03752836676284843, 0.15315357114484718, 0.015353268755589622, 9.999999999998899e-05, 0.00038236396779245396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025909518349043315, 9.999999999998899e-05, 0.10519272783348499, 0.05189550896947326, 0.06667392503603531, 0.030458762670713457, 0.0031482906131777844, 0.07394922513660462, 0.04925985248291598, 0.0358076314486836, 0.028062892625639102, 0.1971048784689945, 0.29727155839802255, 0.3107041531468243, 0.36194548532738646, 0.3720980909388333, 0.2987192414227893, 0.2776967150565638, 0.3911832733208952, 0.3940677367376261, 0.047700896361612455, 0.11041619577742134, 0.07243940076680577, 0.036811290213709436, 0.05838311341720126, 0.056535707012663305, 0.0770259784967775, 0.10371623721088108, 0.08132763175113722, 0.25430716605819903, 0.166705128830136, 0.21557957340024392, 0.1562762460394228, 0.22178332310041948, 0.1498495718397771, 0.19466747574082188, 0.23734809876503982, 0.20224288331066198, 0.15348725135216756, 0.2289292482630093, 0.2022810828511883, 0.27403329448712144, 0.2837613449643769, 0.2873167961817179, 0.17245379074690825, 0.21036960115510284, 0.20353369810797906, 0.1522678538904545, 0.1611704660672918, 0.15762274890164385, 0.21036765927547085, 0.15462341970413962, 0.22922677859696627, 0.09725659660481178, 0.20277059781646245, 0.12569192877450386, 0.24472796283087872, 0.18591663054719854, 0.20653562747675946, 0.19732882470195168, 0.22157709192455122, 0.29853198003701986, 0.25553163747183494, 0.4426363873270863, 0.26655856488733853, 0.16462441159630403, 0.17536219211201443, 0.18534422923102234, 0.19107849112909825, 0.17286666867465306, 0.17478759456906812, 0.1739702094569182, 0.1832253620173505, 0.18475358870563507, 0.1195824164687358, 0.4666475852346783, 0.20746194956363573, 0.3721360084097505, 0.19798918976024693, 0.15969221147842105, 0.31568598176312, 0.49413843808858104, 0.3207945045633507, 0.24774238149977978, 0.157128721881441, 0.35083682375295944, 0.22828414381901707, 0.20548715154980746, 0.2009047811802438, 0.1280013856491421, 0.14732565660326913, 0.36992676062996166, 0.1823539730721765, 0.17098427668847416, 0.20145083260106844, 0.19240746323252667, 0.18250817888814286, 0.1992548519268662, 0.1983170641602403, 0.18904436845654748, 0.19691695178576452, 0.06876776670656348, 0.07615102555170228, 0.06978430519608769, 0.05883787503846161, 0.09483539225501914, 0.07190836915436993, 0.08279867708561361, 0.06720034139713849, 0.0648116158908193]}, "mutation_prompt": null}
{"id": "727ca737-e7a0-4a25-9634-56a274c1547f", "solution": "import numpy as np\n\nclass DynamicAdaptiveLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n                if np.random.rand() < 0.5:  # Dynamic adaptation of mutation factor\n                    f = max(f + 0.05 * np.random.rand(), 0.1)\n\n        return best_position", "name": "DynamicAdaptiveLocalSearchEGWO_FastConvergence", "description": "Implement a dynamic adaptation mechanism for the mutation factor in the Differential Evolution process to adjust exploration and exploitation rates dynamically, enhancing convergence speed.", "configspace": "", "generation": 78, "fitness": 0.18412527622092392, "feedback": "The algorithm DynamicAdaptiveLocalSearchEGWO_FastConvergence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.34281884354177694, 0.30710878293028077, 0.30605398354018676, 0.26118855608314906, 0.3686520769240137, 0.336537069936766, 0.3440544446638215, 0.1010964246630619, 0.22462039059322725, 9.999999999998899e-05, 0.00722562010519201, 0.007113377247143005, 0.022547464122650518, 0.0335332716356026, 0.02144054049171351, 0.0074961087528380155, 9.999999999998899e-05, 9.999999999998899e-05, 0.07248190635091101, 0.1056968135036137, 0.06890356130715358, 0.08657369554858674, 0.07891641617876688, 0.08017321076203299, 0.09505350992687889, 0.08974141674206748, 0.09467083691003264, 0.07181363751948555, 0.06516521748568271, 0.05790913677358256, 0.07359578612840345, 0.08693792700252456, 0.0829829473993986, 0.07636278225320459, 0.08154592044563014, 0.08422587573830109, 0.9457892770118634, 0.9733801632767556, 0.915245866774036, 0.9148453232503065, 0.9536232578334296, 0.9551137622429364, 0.9262242639147704, 0.9431324278779182, 0.9322776891335401, 0.20666345460246338, 0.1388258890184083, 0.17799966381760257, 0.1163702979114638, 0.23230058651036822, 0.19302410426232564, 0.19196381831485132, 0.1787709247741852, 0.22918916791231392, 0.2922840542210373, 0.18546382122720606, 0.28270834386196086, 0.20150751387142463, 0.2716386612452556, 0.2329894002412053, 0.16461117643246181, 0.16005688239905846, 0.1653991647342654, 0.21410439216450772, 0.0934506175285813, 0.17811470635607018, 0.09833041523255037, 0.12028192854014974, 0.11985598228505112, 0.14883131019515317, 0.11496011711394771, 0.12567839427206617, 0.14424803814882803, 0.17137508440804228, 0.2228796461264494, 0.1590409933947099, 0.19482418717556493, 0.18148276473054714, 0.22188243751813708, 0.20408018811726303, 0.13136669963951286, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005929971240500542, 9.999999999998899e-05, 9.999999999998899e-05, 0.026105086898939422, 9.999999999998899e-05, 0.028650264200690945, 0.05773773773033952, 0.0737268740438567, 0.09834957735536498, 0.0993117663913945, 0.06453109196364548, 0.07306828020025113, 0.12636609262852416, 0.10394522811263973, 0.0699138958381409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06135309059856553, 0.05547329592376171, 0.02622430994695657, 0.047865764947368605, 0.000977053421659213, 0.061543378413255745, 0.039240943155112507, 0.047546991640271874, 0.049540671580458495, 0.31081099630127884, 0.32420471315513044, 0.23068030409060358, 0.3078442139083687, 0.34224736092253494, 0.29157395032483047, 0.35030904842152344, 0.3388405675506192, 0.22407917784595732, 0.0815463250096563, 0.11107327429527414, 0.032240857995376015, 0.09007132607132151, 0.07102237010881196, 0.06578428506837897, 0.0752769199431057, 0.09479327191015252, 0.06891772463624168, 0.1470305080602906, 0.22178417769105296, 0.20828837669285982, 0.16574721757445043, 0.2044396195581828, 0.12751990744215802, 0.17632983529254054, 0.1590303728117558, 0.155893543736913, 0.21091519495900346, 0.24462647429052764, 0.16573190563808526, 0.2779909830058197, 0.27763571545060584, 0.24415498053014506, 0.20141483116742698, 0.17805102206768952, 0.22270033028468283, 0.19078775255281566, 0.12930340923258843, 0.12620482002814204, 0.1980083228656646, 0.14303731739187298, 0.12202672343025556, 0.15485938392609588, 0.13306421224472664, 0.1064516151205065, 0.2333059966322918, 0.22928522088772785, 0.21016638876434635, 0.2112390007187368, 0.25030663108928064, 0.301698811331081, 0.2280628089606186, 0.24991264341473163, 0.24410526363025453, 0.17240054198376653, 0.16414907574350923, 0.16871244968032373, 0.19069650703073793, 0.1723072643351996, 0.17681831145914162, 0.1717364212633271, 0.17469968772092104, 0.19468825415222601, 0.18989706656844674, 0.5475671552019736, 0.18408884512588652, 0.4616283022639437, 0.4523112551729086, 0.30459421281176124, 0.18557116514159144, 0.4591225561160347, 0.18196190456641226, 0.2122893826214436, 0.29360877799513896, 0.34769278346374033, 0.2990057049497663, 0.22672473786543523, 0.19882816826799932, 0.33524364321942246, 0.14102217468155465, 0.11148778912884061, 0.1816943310005581, 0.18021827224548415, 0.19158921079013203, 0.19448810648642445, 0.17901527274247486, 0.18631963810088747, 0.19008112927185683, 0.18924286459315431, 0.1797291108342557, 0.07953503375261228, 0.07328024649334908, 0.059766796162586955, 0.06220495549998395, 0.08098764597236718, 0.07335816657150629, 0.059819231116546856, 0.07513871920155324, 0.06368300925736237]}, "mutation_prompt": null}
{"id": "dae4756f-41ca-4a3d-88c6-05376b031591", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence", "description": "Introduce an adaptive scaling factor for the mutation in Differential Evolution to enhance exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.34287899890117246, 0.30579359815120033, 0.481339004413603, 0.4194228226867366, 0.48774801621875863, 0.4500614579667106, 0.39245748826506377, 0.3541076253933677, 0.3487300765627348, 0.02714896365247388, 0.029427763482174463, 9.999999999998899e-05, 0.09015019083594655, 0.055232176961498625, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506691327281078, 0.07946685524012886, 0.022187533106290402, 0.1074418094479479, 0.10225200106094212, 0.1142724271191572, 0.10285071172607163, 0.09399822833349192, 0.11321139857174645, 0.09111281019461914, 0.05029888948129935, 0.07537590470151756, 0.08384177648239943, 0.07976011863921673, 0.08602725011470391, 0.10021430342765902, 0.06959844666662374, 0.08488271648466905, 0.918301954102391, 0.968147940677528, 0.9175304563577127, 0.2600034920418457, 0.9401088562714096, 0.8736516270544419, 0.9675480774308344, 0.9550570922147665, 0.8820824688446488, 0.20969446932754798, 0.20849317620247632, 0.24221432869504256, 0.10952504896699922, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.19380103482313293, 0.2014334450433909, 0.200445123725409, 0.13199399937435297, 0.21316110695028212, 0.25806516677333446, 0.2504992002784172, 0.31886761430295285, 0.17474080565250583, 0.31094252942739053, 0.17050087444879192, 0.22472760417737203, 0.12081434653461942, 0.1616948954994536, 9.999999999998899e-05, 0.12046448867404269, 0.12123953970918044, 0.18773054540112522, 0.18014942113513932, 0.1637543850262857, 0.2069009708441788, 0.1700862692559817, 0.15840110957348863, 0.19673194499540658, 0.15237936049253853, 0.15692729424616447, 0.13099356619886826, 0.22525951479718231, 0.19306291188412972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 0.07255217080210208, 0.09305146000052811, 0.08943344478356519, 0.0854887822177508, 0.03956811160474061, 0.08132931941276456, 0.045597908217000604, 0.0834166073568644, 0.03752836676284843, 0.15315357114484718, 0.015353268755589622, 9.999999999998899e-05, 0.00038236396779245396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025909518349043315, 9.999999999998899e-05, 0.10519272783348499, 0.05189550896947326, 0.06667392503603531, 0.030458762670713457, 0.0031482906131777844, 0.07394922513660462, 0.04925985248291598, 0.0358076314486836, 0.028062892625639102, 0.1971048784689945, 0.29727155839802255, 0.3107041531468243, 0.36194548532738646, 0.3720980909388333, 0.2987192414227893, 0.2776967150565638, 0.3911832733208952, 0.3940677367376261, 0.047700896361612455, 0.11041619577742134, 0.07243940076680577, 0.036811290213709436, 0.05838311341720126, 0.056535707012663305, 0.0770259784967775, 0.10371623721088108, 0.08132763175113722, 0.25430716605819903, 0.166705128830136, 0.21557957340024392, 0.1562762460394228, 0.22178332310041948, 0.1498495718397771, 0.19466747574082188, 0.23734809876503982, 0.20224288331066198, 0.15348725135216756, 0.2289292482630093, 0.2022810828511883, 0.27403329448712144, 0.2837613449643769, 0.2873167961817179, 0.17245379074690825, 0.21036960115510284, 0.20353369810797906, 0.1522678538904545, 0.1611704660672918, 0.15762274890164385, 0.21036765927547085, 0.15462341970413962, 0.22922677859696627, 0.09725659660481178, 0.20277059781646245, 0.12569192877450386, 0.24472796283087872, 0.18591663054719854, 0.20653562747675946, 0.19732882470195168, 0.22157709192455122, 0.29853198003701986, 0.25553163747183494, 0.4426363873270863, 0.26655856488733853, 0.16462441159630403, 0.17536219211201443, 0.18534422923102234, 0.19107849112909825, 0.17286666867465306, 0.17478759456906812, 0.1739702094569182, 0.1832253620173505, 0.18475358870563507, 0.1195824164687358, 0.4666475852346783, 0.20746194956363573, 0.3721360084097505, 0.19798918976024693, 0.15969221147842105, 0.31568598176312, 0.49413843808858104, 0.3207945045633507, 0.24774238149977978, 0.157128721881441, 0.35083682375295944, 0.22828414381901707, 0.20548715154980746, 0.2009047811802438, 0.1280013856491421, 0.14732565660326913, 0.36992676062996166, 0.1823539730721765, 0.17098427668847416, 0.20145083260106844, 0.19240746323252667, 0.18250817888814286, 0.1992548519268662, 0.1983170641602403, 0.18904436845654748, 0.19691695178576452, 0.06876776670656348, 0.07615102555170228, 0.06978430519608769, 0.05883787503846161, 0.09483539225501914, 0.07190836915436993, 0.08279867708561361, 0.06720034139713849, 0.0648116158908193]}, "mutation_prompt": null}
{"id": "54f33b5f-3f6b-432f-babd-34a45c59b587", "solution": "import numpy as np\n\nclass EnhancedDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n                f = max(f * f_decay, 0.1) if np.random.rand() < 0.1 else f  # Dynamically adjust mutation factor\n\n        return best_position", "name": "EnhancedDynamicLocalSearchEGWO_FastConvergence", "description": "Enhance exploration by dynamically adjusting mutation factor during optimization to improve convergence speed.", "configspace": "", "generation": 80, "fitness": 0.16945453722902595, "feedback": "The algorithm EnhancedDynamicLocalSearchEGWO_FastConvergence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.18.", "error": "", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.28999435446720345, 0.29664874169055, 0.3276681589424515, 0.3047786616684668, 0.3077744128124412, 0.2881391324509942, 0.2699970473316423, 0.32379593629046455, 0.30798766262499166, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06685377412771487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06609077657269447, 0.0716035612451662, 0.0684305208722975, 0.08956545960987916, 0.07279756128785098, 0.07696922995213829, 0.08537106320191779, 0.09049851481246729, 0.07791982606471026, 0.06246125134701741, 0.07237162105264638, 0.05175293924843283, 0.07298146355289992, 0.0459053847542209, 0.06745568900895227, 0.08851998642151138, 0.08768767994185023, 0.07050591864849576, 0.9114213317193466, 0.9382482111856971, 0.9481432237975129, 0.9367914609393704, 0.9690785677929359, 0.9276402137042925, 0.9486319749887677, 0.9482931386166744, 0.7857748885842221, 0.17031216391059822, 0.16376443213686231, 0.11574501364749634, 0.1772519738565741, 0.2006112283290361, 0.1794044830680197, 0.122181149131665, 0.14258446309726291, 0.17448080870822358, 0.2209575541682175, 0.2603617234296093, 0.19033468294350486, 0.18164389290421912, 0.186750386232998, 0.19612331723372334, 0.1764068763382024, 0.20506071779881552, 0.16660696080094062, 0.1376011426221334, 0.08380291744173085, 0.11140639704898314, 0.11122489951795067, 0.05480440309243528, 0.10011212744782283, 0.08256914501731738, 0.11106016951273812, 0.10908835948837492, 0.1627140763247349, 0.11792694171854456, 0.22578774214789765, 0.18345503129708918, 0.14371018062721108, 0.19822514483534925, 0.17530569697449905, 0.11993007076893425, 0.15992495328204637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06247988573787355, 0.10215660401856042, 0.09988145379611346, 0.04433889711555161, 0.03677603868839996, 0.06383053191158994, 0.06269242536743436, 0.11838003715515355, 0.06501461078554771, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01819424125019964, 0.035823695277684364, 0.02628662254294889, 0.031028472210650748, 0.007025366795476828, 0.03460437121519777, 0.03393923224423634, 0.03341836084372063, 0.02232490104578777, 0.3065251144425555, 0.2212238261579088, 0.2869581512455184, 0.282560283876781, 0.2961639214473072, 0.3403244136401833, 0.3137035919675103, 0.26868220736191883, 0.31245117501548325, 0.07356338082755354, 0.05274417599632508, 0.06789971278265894, 0.07865766363737148, 0.0670548649247028, 0.07259137495888057, 0.08401609415079325, 0.07549038367416394, 0.07835292086509793, 0.16037547179153755, 0.1729823295795868, 0.22993344132807914, 0.17182062452239155, 0.14003120233665411, 0.14344843683076047, 0.14208170702544087, 0.18136078187281057, 0.1504096407380674, 0.2175184123638435, 0.21631969565509634, 0.19788303939269358, 0.22978179310301983, 0.2505148699162465, 0.2134131159692737, 0.18942761688677312, 0.1884763012891666, 0.19920081078068985, 0.14320629076580604, 0.16749152113604593, 0.1338909543268586, 0.1727181768209517, 0.1937570778675567, 0.19151797939134574, 0.13466045599982246, 0.17820273675808607, 0.16924643533036943, 0.2182823530102791, 0.21280186547158686, 0.230691910797292, 0.19714574267815155, 0.22154752634556263, 0.19073396491859773, 0.17652653358719295, 0.2397131781959534, 0.20519479606852353, 0.16180603546612804, 0.1796766716309055, 0.17273297260071263, 0.16729786718394424, 0.17143623664125085, 0.16658058592671565, 0.1648937667356526, 0.16249300431797542, 0.16947813891004992, 0.16527346035152823, 0.1699476406989162, 0.18086050174003954, 0.3178469134215739, 0.19231980239252022, 0.12093806969887788, 0.21864654747683876, 0.34033851580545693, 0.1935016906248027, 0.17959350882272207, 0.22731873651004553, 0.30675647641638626, 0.20334010567023175, 0.17710925208350814, 0.12081146320342873, 0.2075694850021993, 0.2771486649620728, 0.15831267031702734, 0.19789262784755302, 0.20372752179777665, 0.16861849416408914, 0.19269942420903075, 0.1998707423494931, 0.17833350292264294, 0.18731002650929152, 0.18940012210869406, 0.19257011294467064, 0.06811067932730164, 0.07901918821302112, 0.06307154206170418, 0.0690545405750157, 0.06651500193390747, 0.09059001042955295, 0.05810541803616165, 0.0676900159144117, 0.06772392145417783]}, "mutation_prompt": null}
{"id": "ce6ace9d-215f-4398-afc4-3b190e9ec269", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence", "description": "Introduce an adaptive scaling factor for the mutation in Differential Evolution to enhance exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.34287899890117246, 0.30579359815120033, 0.481339004413603, 0.4194228226867366, 0.48774801621875863, 0.4500614579667106, 0.39245748826506377, 0.3541076253933677, 0.3487300765627348, 0.02714896365247388, 0.029427763482174463, 9.999999999998899e-05, 0.09015019083594655, 0.055232176961498625, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506691327281078, 0.07946685524012886, 0.022187533106290402, 0.1074418094479479, 0.10225200106094212, 0.1142724271191572, 0.10285071172607163, 0.09399822833349192, 0.11321139857174645, 0.09111281019461914, 0.05029888948129935, 0.07537590470151756, 0.08384177648239943, 0.07976011863921673, 0.08602725011470391, 0.10021430342765902, 0.06959844666662374, 0.08488271648466905, 0.918301954102391, 0.968147940677528, 0.9175304563577127, 0.2600034920418457, 0.9401088562714096, 0.8736516270544419, 0.9675480774308344, 0.9550570922147665, 0.8820824688446488, 0.20969446932754798, 0.20849317620247632, 0.24221432869504256, 0.10952504896699922, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.19380103482313293, 0.2014334450433909, 0.200445123725409, 0.13199399937435297, 0.21316110695028212, 0.25806516677333446, 0.2504992002784172, 0.31886761430295285, 0.17474080565250583, 0.31094252942739053, 0.17050087444879192, 0.22472760417737203, 0.12081434653461942, 0.1616948954994536, 9.999999999998899e-05, 0.12046448867404269, 0.12123953970918044, 0.18773054540112522, 0.18014942113513932, 0.1637543850262857, 0.2069009708441788, 0.1700862692559817, 0.15840110957348863, 0.19673194499540658, 0.15237936049253853, 0.15692729424616447, 0.13099356619886826, 0.22525951479718231, 0.19306291188412972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 0.07255217080210208, 0.09305146000052811, 0.08943344478356519, 0.0854887822177508, 0.03956811160474061, 0.08132931941276456, 0.045597908217000604, 0.0834166073568644, 0.03752836676284843, 0.15315357114484718, 0.015353268755589622, 9.999999999998899e-05, 0.00038236396779245396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025909518349043315, 9.999999999998899e-05, 0.10519272783348499, 0.05189550896947326, 0.06667392503603531, 0.030458762670713457, 0.0031482906131777844, 0.07394922513660462, 0.04925985248291598, 0.0358076314486836, 0.028062892625639102, 0.1971048784689945, 0.29727155839802255, 0.3107041531468243, 0.36194548532738646, 0.3720980909388333, 0.2987192414227893, 0.2776967150565638, 0.3911832733208952, 0.3940677367376261, 0.047700896361612455, 0.11041619577742134, 0.07243940076680577, 0.036811290213709436, 0.05838311341720126, 0.056535707012663305, 0.0770259784967775, 0.10371623721088108, 0.08132763175113722, 0.25430716605819903, 0.166705128830136, 0.21557957340024392, 0.1562762460394228, 0.22178332310041948, 0.1498495718397771, 0.19466747574082188, 0.23734809876503982, 0.20224288331066198, 0.15348725135216756, 0.2289292482630093, 0.2022810828511883, 0.27403329448712144, 0.2837613449643769, 0.2873167961817179, 0.17245379074690825, 0.21036960115510284, 0.20353369810797906, 0.1522678538904545, 0.1611704660672918, 0.15762274890164385, 0.21036765927547085, 0.15462341970413962, 0.22922677859696627, 0.09725659660481178, 0.20277059781646245, 0.12569192877450386, 0.24472796283087872, 0.18591663054719854, 0.20653562747675946, 0.19732882470195168, 0.22157709192455122, 0.29853198003701986, 0.25553163747183494, 0.4426363873270863, 0.26655856488733853, 0.16462441159630403, 0.17536219211201443, 0.18534422923102234, 0.19107849112909825, 0.17286666867465306, 0.17478759456906812, 0.1739702094569182, 0.1832253620173505, 0.18475358870563507, 0.1195824164687358, 0.4666475852346783, 0.20746194956363573, 0.3721360084097505, 0.19798918976024693, 0.15969221147842105, 0.31568598176312, 0.49413843808858104, 0.3207945045633507, 0.24774238149977978, 0.157128721881441, 0.35083682375295944, 0.22828414381901707, 0.20548715154980746, 0.2009047811802438, 0.1280013856491421, 0.14732565660326913, 0.36992676062996166, 0.1823539730721765, 0.17098427668847416, 0.20145083260106844, 0.19240746323252667, 0.18250817888814286, 0.1992548519268662, 0.1983170641602403, 0.18904436845654748, 0.19691695178576452, 0.06876776670656348, 0.07615102555170228, 0.06978430519608769, 0.05883787503846161, 0.09483539225501914, 0.07190836915436993, 0.08279867708561361, 0.06720034139713849, 0.0648116158908193]}, "mutation_prompt": null}
{"id": "7b0bf0b7-1d17-4420-b31d-ba6b2a072a23", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence", "description": "Introduce an adaptive scaling factor for the mutation in Differential Evolution to enhance exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.34287899890117246, 0.30579359815120033, 0.481339004413603, 0.4194228226867366, 0.48774801621875863, 0.4500614579667106, 0.39245748826506377, 0.3541076253933677, 0.3487300765627348, 0.02714896365247388, 0.029427763482174463, 9.999999999998899e-05, 0.09015019083594655, 0.055232176961498625, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506691327281078, 0.07946685524012886, 0.022187533106290402, 0.1074418094479479, 0.10225200106094212, 0.1142724271191572, 0.10285071172607163, 0.09399822833349192, 0.11321139857174645, 0.09111281019461914, 0.05029888948129935, 0.07537590470151756, 0.08384177648239943, 0.07976011863921673, 0.08602725011470391, 0.10021430342765902, 0.06959844666662374, 0.08488271648466905, 0.918301954102391, 0.968147940677528, 0.9175304563577127, 0.2600034920418457, 0.9401088562714096, 0.8736516270544419, 0.9675480774308344, 0.9550570922147665, 0.8820824688446488, 0.20969446932754798, 0.20849317620247632, 0.24221432869504256, 0.10952504896699922, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.19380103482313293, 0.2014334450433909, 0.200445123725409, 0.13199399937435297, 0.21316110695028212, 0.25806516677333446, 0.2504992002784172, 0.31886761430295285, 0.17474080565250583, 0.31094252942739053, 0.17050087444879192, 0.22472760417737203, 0.12081434653461942, 0.1616948954994536, 9.999999999998899e-05, 0.12046448867404269, 0.12123953970918044, 0.18773054540112522, 0.18014942113513932, 0.1637543850262857, 0.2069009708441788, 0.1700862692559817, 0.15840110957348863, 0.19673194499540658, 0.15237936049253853, 0.15692729424616447, 0.13099356619886826, 0.22525951479718231, 0.19306291188412972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 0.07255217080210208, 0.09305146000052811, 0.08943344478356519, 0.0854887822177508, 0.03956811160474061, 0.08132931941276456, 0.045597908217000604, 0.0834166073568644, 0.03752836676284843, 0.15315357114484718, 0.015353268755589622, 9.999999999998899e-05, 0.00038236396779245396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025909518349043315, 9.999999999998899e-05, 0.10519272783348499, 0.05189550896947326, 0.06667392503603531, 0.030458762670713457, 0.0031482906131777844, 0.07394922513660462, 0.04925985248291598, 0.0358076314486836, 0.028062892625639102, 0.1971048784689945, 0.29727155839802255, 0.3107041531468243, 0.36194548532738646, 0.3720980909388333, 0.2987192414227893, 0.2776967150565638, 0.3911832733208952, 0.3940677367376261, 0.047700896361612455, 0.11041619577742134, 0.07243940076680577, 0.036811290213709436, 0.05838311341720126, 0.056535707012663305, 0.0770259784967775, 0.10371623721088108, 0.08132763175113722, 0.25430716605819903, 0.166705128830136, 0.21557957340024392, 0.1562762460394228, 0.22178332310041948, 0.1498495718397771, 0.19466747574082188, 0.23734809876503982, 0.20224288331066198, 0.15348725135216756, 0.2289292482630093, 0.2022810828511883, 0.27403329448712144, 0.2837613449643769, 0.2873167961817179, 0.17245379074690825, 0.21036960115510284, 0.20353369810797906, 0.1522678538904545, 0.1611704660672918, 0.15762274890164385, 0.21036765927547085, 0.15462341970413962, 0.22922677859696627, 0.09725659660481178, 0.20277059781646245, 0.12569192877450386, 0.24472796283087872, 0.18591663054719854, 0.20653562747675946, 0.19732882470195168, 0.22157709192455122, 0.29853198003701986, 0.25553163747183494, 0.4426363873270863, 0.26655856488733853, 0.16462441159630403, 0.17536219211201443, 0.18534422923102234, 0.19107849112909825, 0.17286666867465306, 0.17478759456906812, 0.1739702094569182, 0.1832253620173505, 0.18475358870563507, 0.1195824164687358, 0.4666475852346783, 0.20746194956363573, 0.3721360084097505, 0.19798918976024693, 0.15969221147842105, 0.31568598176312, 0.49413843808858104, 0.3207945045633507, 0.24774238149977978, 0.157128721881441, 0.35083682375295944, 0.22828414381901707, 0.20548715154980746, 0.2009047811802438, 0.1280013856491421, 0.14732565660326913, 0.36992676062996166, 0.1823539730721765, 0.17098427668847416, 0.20145083260106844, 0.19240746323252667, 0.18250817888814286, 0.1992548519268662, 0.1983170641602403, 0.18904436845654748, 0.19691695178576452, 0.06876776670656348, 0.07615102555170228, 0.06978430519608769, 0.05883787503846161, 0.09483539225501914, 0.07190836915436993, 0.08279867708561361, 0.06720034139713849, 0.0648116158908193]}, "mutation_prompt": null}
{"id": "eb5ff84c-9dd2-4a2e-9295-7ba38c403537", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence", "description": "Introduce an adaptive scaling factor for the mutation in Differential Evolution to enhance exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.34287899890117246, 0.30579359815120033, 0.481339004413603, 0.4194228226867366, 0.48774801621875863, 0.4500614579667106, 0.39245748826506377, 0.3541076253933677, 0.3487300765627348, 0.02714896365247388, 0.029427763482174463, 9.999999999998899e-05, 0.09015019083594655, 0.055232176961498625, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506691327281078, 0.07946685524012886, 0.022187533106290402, 0.1074418094479479, 0.10225200106094212, 0.1142724271191572, 0.10285071172607163, 0.09399822833349192, 0.11321139857174645, 0.09111281019461914, 0.05029888948129935, 0.07537590470151756, 0.08384177648239943, 0.07976011863921673, 0.08602725011470391, 0.10021430342765902, 0.06959844666662374, 0.08488271648466905, 0.918301954102391, 0.968147940677528, 0.9175304563577127, 0.2600034920418457, 0.9401088562714096, 0.8736516270544419, 0.9675480774308344, 0.9550570922147665, 0.8820824688446488, 0.20969446932754798, 0.20849317620247632, 0.24221432869504256, 0.10952504896699922, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.19380103482313293, 0.2014334450433909, 0.200445123725409, 0.13199399937435297, 0.21316110695028212, 0.25806516677333446, 0.2504992002784172, 0.31886761430295285, 0.17474080565250583, 0.31094252942739053, 0.17050087444879192, 0.22472760417737203, 0.12081434653461942, 0.1616948954994536, 9.999999999998899e-05, 0.12046448867404269, 0.12123953970918044, 0.18773054540112522, 0.18014942113513932, 0.1637543850262857, 0.2069009708441788, 0.1700862692559817, 0.15840110957348863, 0.19673194499540658, 0.15237936049253853, 0.15692729424616447, 0.13099356619886826, 0.22525951479718231, 0.19306291188412972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 0.07255217080210208, 0.09305146000052811, 0.08943344478356519, 0.0854887822177508, 0.03956811160474061, 0.08132931941276456, 0.045597908217000604, 0.0834166073568644, 0.03752836676284843, 0.15315357114484718, 0.015353268755589622, 9.999999999998899e-05, 0.00038236396779245396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025909518349043315, 9.999999999998899e-05, 0.10519272783348499, 0.05189550896947326, 0.06667392503603531, 0.030458762670713457, 0.0031482906131777844, 0.07394922513660462, 0.04925985248291598, 0.0358076314486836, 0.028062892625639102, 0.1971048784689945, 0.29727155839802255, 0.3107041531468243, 0.36194548532738646, 0.3720980909388333, 0.2987192414227893, 0.2776967150565638, 0.3911832733208952, 0.3940677367376261, 0.047700896361612455, 0.11041619577742134, 0.07243940076680577, 0.036811290213709436, 0.05838311341720126, 0.056535707012663305, 0.0770259784967775, 0.10371623721088108, 0.08132763175113722, 0.25430716605819903, 0.166705128830136, 0.21557957340024392, 0.1562762460394228, 0.22178332310041948, 0.1498495718397771, 0.19466747574082188, 0.23734809876503982, 0.20224288331066198, 0.15348725135216756, 0.2289292482630093, 0.2022810828511883, 0.27403329448712144, 0.2837613449643769, 0.2873167961817179, 0.17245379074690825, 0.21036960115510284, 0.20353369810797906, 0.1522678538904545, 0.1611704660672918, 0.15762274890164385, 0.21036765927547085, 0.15462341970413962, 0.22922677859696627, 0.09725659660481178, 0.20277059781646245, 0.12569192877450386, 0.24472796283087872, 0.18591663054719854, 0.20653562747675946, 0.19732882470195168, 0.22157709192455122, 0.29853198003701986, 0.25553163747183494, 0.4426363873270863, 0.26655856488733853, 0.16462441159630403, 0.17536219211201443, 0.18534422923102234, 0.19107849112909825, 0.17286666867465306, 0.17478759456906812, 0.1739702094569182, 0.1832253620173505, 0.18475358870563507, 0.1195824164687358, 0.4666475852346783, 0.20746194956363573, 0.3721360084097505, 0.19798918976024693, 0.15969221147842105, 0.31568598176312, 0.49413843808858104, 0.3207945045633507, 0.24774238149977978, 0.157128721881441, 0.35083682375295944, 0.22828414381901707, 0.20548715154980746, 0.2009047811802438, 0.1280013856491421, 0.14732565660326913, 0.36992676062996166, 0.1823539730721765, 0.17098427668847416, 0.20145083260106844, 0.19240746323252667, 0.18250817888814286, 0.1992548519268662, 0.1983170641602403, 0.18904436845654748, 0.19691695178576452, 0.06876776670656348, 0.07615102555170228, 0.06978430519608769, 0.05883787503846161, 0.09483539225501914, 0.07190836915436993, 0.08279867708561361, 0.06720034139713849, 0.0648116158908193]}, "mutation_prompt": null}
{"id": "2cc513a5-dd31-4788-9b4a-f8bd95d0889d", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence", "description": "Introduce an adaptive scaling factor for the mutation in Differential Evolution to enhance exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.34287899890117246, 0.30579359815120033, 0.481339004413603, 0.4194228226867366, 0.48774801621875863, 0.4500614579667106, 0.39245748826506377, 0.3541076253933677, 0.3487300765627348, 0.02714896365247388, 0.029427763482174463, 9.999999999998899e-05, 0.09015019083594655, 0.055232176961498625, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506691327281078, 0.07946685524012886, 0.022187533106290402, 0.1074418094479479, 0.10225200106094212, 0.1142724271191572, 0.10285071172607163, 0.09399822833349192, 0.11321139857174645, 0.09111281019461914, 0.05029888948129935, 0.07537590470151756, 0.08384177648239943, 0.07976011863921673, 0.08602725011470391, 0.10021430342765902, 0.06959844666662374, 0.08488271648466905, 0.918301954102391, 0.968147940677528, 0.9175304563577127, 0.2600034920418457, 0.9401088562714096, 0.8736516270544419, 0.9675480774308344, 0.9550570922147665, 0.8820824688446488, 0.20969446932754798, 0.20849317620247632, 0.24221432869504256, 0.10952504896699922, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.19380103482313293, 0.2014334450433909, 0.200445123725409, 0.13199399937435297, 0.21316110695028212, 0.25806516677333446, 0.2504992002784172, 0.31886761430295285, 0.17474080565250583, 0.31094252942739053, 0.17050087444879192, 0.22472760417737203, 0.12081434653461942, 0.1616948954994536, 9.999999999998899e-05, 0.12046448867404269, 0.12123953970918044, 0.18773054540112522, 0.18014942113513932, 0.1637543850262857, 0.2069009708441788, 0.1700862692559817, 0.15840110957348863, 0.19673194499540658, 0.15237936049253853, 0.15692729424616447, 0.13099356619886826, 0.22525951479718231, 0.19306291188412972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 0.07255217080210208, 0.09305146000052811, 0.08943344478356519, 0.0854887822177508, 0.03956811160474061, 0.08132931941276456, 0.045597908217000604, 0.0834166073568644, 0.03752836676284843, 0.15315357114484718, 0.015353268755589622, 9.999999999998899e-05, 0.00038236396779245396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025909518349043315, 9.999999999998899e-05, 0.10519272783348499, 0.05189550896947326, 0.06667392503603531, 0.030458762670713457, 0.0031482906131777844, 0.07394922513660462, 0.04925985248291598, 0.0358076314486836, 0.028062892625639102, 0.1971048784689945, 0.29727155839802255, 0.3107041531468243, 0.36194548532738646, 0.3720980909388333, 0.2987192414227893, 0.2776967150565638, 0.3911832733208952, 0.3940677367376261, 0.047700896361612455, 0.11041619577742134, 0.07243940076680577, 0.036811290213709436, 0.05838311341720126, 0.056535707012663305, 0.0770259784967775, 0.10371623721088108, 0.08132763175113722, 0.25430716605819903, 0.166705128830136, 0.21557957340024392, 0.1562762460394228, 0.22178332310041948, 0.1498495718397771, 0.19466747574082188, 0.23734809876503982, 0.20224288331066198, 0.15348725135216756, 0.2289292482630093, 0.2022810828511883, 0.27403329448712144, 0.2837613449643769, 0.2873167961817179, 0.17245379074690825, 0.21036960115510284, 0.20353369810797906, 0.1522678538904545, 0.1611704660672918, 0.15762274890164385, 0.21036765927547085, 0.15462341970413962, 0.22922677859696627, 0.09725659660481178, 0.20277059781646245, 0.12569192877450386, 0.24472796283087872, 0.18591663054719854, 0.20653562747675946, 0.19732882470195168, 0.22157709192455122, 0.29853198003701986, 0.25553163747183494, 0.4426363873270863, 0.26655856488733853, 0.16462441159630403, 0.17536219211201443, 0.18534422923102234, 0.19107849112909825, 0.17286666867465306, 0.17478759456906812, 0.1739702094569182, 0.1832253620173505, 0.18475358870563507, 0.1195824164687358, 0.4666475852346783, 0.20746194956363573, 0.3721360084097505, 0.19798918976024693, 0.15969221147842105, 0.31568598176312, 0.49413843808858104, 0.3207945045633507, 0.24774238149977978, 0.157128721881441, 0.35083682375295944, 0.22828414381901707, 0.20548715154980746, 0.2009047811802438, 0.1280013856491421, 0.14732565660326913, 0.36992676062996166, 0.1823539730721765, 0.17098427668847416, 0.20145083260106844, 0.19240746323252667, 0.18250817888814286, 0.1992548519268662, 0.1983170641602403, 0.18904436845654748, 0.19691695178576452, 0.06876776670656348, 0.07615102555170228, 0.06978430519608769, 0.05883787503846161, 0.09483539225501914, 0.07190836915436993, 0.08279867708561361, 0.06720034139713849, 0.0648116158908193]}, "mutation_prompt": null}
{"id": "b39f16e4-2c86-498c-9143-7035cf5ef8c9", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence_ConvergeSpeed:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        fitness_improvement_rate = 0  # Initialize fitness improvement rate\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness_improvement_rate = (fitness[best_idx] - new_fitness[new_best_idx]) / fitness[best_idx]\n                fitness[best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n\n            if np.random.rand() < 0.1:  \n                f = max(f * (1 + fitness_improvement_rate), 0.1)  # Adjust mutation factor based on fitness improvement rate\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence_ConvergeSpeed", "description": "Implement a dynamic mutation factor that adapts based on the fitness improvement rate to speed up convergence.", "configspace": "", "generation": 85, "fitness": 0.14144136103899063, "feedback": "The algorithm AdaptiveDynamicLocalSearchEGWO_FastConvergence_ConvergeSpeed got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.2412654878813849, 0.23243429040134156, 0.2713149964247745, 0.22054844988012678, 0.2012860519276123, 0.24621576344579688, 0.32909581232799745, 0.32551988006117627, 0.35902882831154626, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020108990258773662, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0661195472855548, 0.09900009927351328, 0.050378204558658934, 0.039805081230761985, 0.046462233134146436, 0.045827667707989184, 0.04980187250425461, 0.039414649300754556, 0.04713903050224921, 0.02999541950364093, 0.07358346173818975, 0.0174758062647008, 0.024177959688381323, 0.03620249661414421, 0.04679762677510391, 0.02661467052209887, 0.027081693077069424, 0.023656459285038345, 0.9900687189890737, 0.9733240400423502, 0.987154762943105, 0.9118783235513096, 0.9529292310994699, 0.9671087184411649, 0.9825932712086995, 0.9272805414914427, 0.9667932912338255, 0.07478191796339873, 0.08606386228567808, 0.0525439531171511, 0.05294310034289973, 0.08647421044874315, 0.0839386666474975, 0.07704799697384734, 0.08353356644847176, 0.15166015924539966, 0.15163623212206745, 0.14238102763537208, 0.14649318714624604, 0.14320663422367053, 0.13703702237176751, 0.18201834874855982, 0.1070145572213087, 0.14136577541396256, 0.12572873802667817, 0.0010922126769683516, 0.08731013747892413, 9.999999999998899e-05, 0.01975077980288975, 0.022225137461736044, 9.999999999998899e-05, 9.999999999998899e-05, 0.03977993867183427, 0.03311468533748907, 0.04611179985811964, 0.0716847156708853, 9.999999999998899e-05, 0.04832173746062596, 0.08752489584180623, 0.03328512352426316, 0.053488435873469964, 0.0818690376555361, 0.08457971735408687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004426175952921718, 0.054195512970353965, 0.05667232671840572, 0.0629404017492643, 0.0510207388757945, 0.044488438106910166, 0.00413833256670082, 0.000975002808005776, 0.016335210008873946, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009828198264455024, 9.999999999998899e-05, 9.999999999998899e-05, 0.00129780074578556, 0.00035640693886385133, 0.0778425931077058, 0.018855139324708725, 0.3434572999650565, 0.20367653697672927, 0.22205052946002146, 0.26519786734961825, 0.27750819917736946, 0.28848169891409514, 0.1788154072601743, 0.27618034418274573, 0.2352666190895084, 0.06535348581776779, 0.04402036288157418, 0.05491303551548665, 0.057986572125402924, 0.05623444477377926, 0.0390112912195415, 0.03279785057471796, 0.05303390482820014, 0.04825248586994335, 0.1367293544952758, 0.14810817084022587, 0.15409394032302537, 0.20836382042743995, 0.2358005671381762, 0.20605221649837302, 0.11594885474124672, 0.11867062953412211, 0.12385239729185671, 0.15811824971601296, 0.19099431399569589, 0.1500107624115513, 0.16379017492039072, 0.18611983276184652, 0.1591653259646495, 0.22674579443148202, 0.19165118739513987, 0.19398252413320693, 0.11376515863292547, 0.11599259955320262, 0.0814231070252367, 0.11882158407906518, 0.12070415955890534, 0.12436628480944545, 0.13740600871931363, 0.1177639782050317, 0.09654701527360854, 0.2144202300708763, 0.17947466709018478, 0.2752324401286338, 0.1635380991942924, 0.1717889890453249, 0.15145387449358094, 0.157935591696588, 0.16405716304667362, 0.23429570071872585, 0.15397381422106704, 0.15383874380711726, 0.11722644703566909, 0.14755159627885495, 0.16096640732518208, 0.1665895482576294, 0.13294491771200723, 0.16236641314407296, 0.1409764613919915, 0.14556839610056227, 0.17783346713763482, 0.14567418161784185, 0.15330568415853008, 0.17512960776386477, 0.11227811805381427, 0.1635971452907823, 0.13410417734770708, 0.16269926653020006, 0.2542104388398969, 0.3364141522005616, 0.4427395347747535, 0.23459815274747675, 0.19266338257651683, 0.18555724635731674, 0.1199950751416593, 0.20687686505254899, 0.11163550267303801, 0.18184758841325288, 0.1788319986876601, 0.18796671571833246, 0.19446002689565045, 0.1821229261082934, 0.1883789969198395, 0.21687497120071053, 0.21060789933690405, 0.18436520877362605, 0.05045172812700016, 0.057988112779253975, 0.04865616195380318, 0.03910829479425881, 0.07649555302449784, 0.06466817109261191, 0.04713473434931292, 0.041481338216232455, 0.038991183304942]}, "mutation_prompt": null}
{"id": "921f4db1-2d18-4df4-9f33-9d70d11dfa79", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence", "description": "Introduce an adaptive scaling factor for the mutation in Differential Evolution to enhance exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.34287899890117246, 0.30579359815120033, 0.481339004413603, 0.4194228226867366, 0.48774801621875863, 0.4500614579667106, 0.39245748826506377, 0.3541076253933677, 0.3487300765627348, 0.02714896365247388, 0.029427763482174463, 9.999999999998899e-05, 0.09015019083594655, 0.055232176961498625, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506691327281078, 0.07946685524012886, 0.022187533106290402, 0.1074418094479479, 0.10225200106094212, 0.1142724271191572, 0.10285071172607163, 0.09399822833349192, 0.11321139857174645, 0.09111281019461914, 0.05029888948129935, 0.07537590470151756, 0.08384177648239943, 0.07976011863921673, 0.08602725011470391, 0.10021430342765902, 0.06959844666662374, 0.08488271648466905, 0.918301954102391, 0.968147940677528, 0.9175304563577127, 0.2600034920418457, 0.9401088562714096, 0.8736516270544419, 0.9675480774308344, 0.9550570922147665, 0.8820824688446488, 0.20969446932754798, 0.20849317620247632, 0.24221432869504256, 0.10952504896699922, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.19380103482313293, 0.2014334450433909, 0.200445123725409, 0.13199399937435297, 0.21316110695028212, 0.25806516677333446, 0.2504992002784172, 0.31886761430295285, 0.17474080565250583, 0.31094252942739053, 0.17050087444879192, 0.22472760417737203, 0.12081434653461942, 0.1616948954994536, 9.999999999998899e-05, 0.12046448867404269, 0.12123953970918044, 0.18773054540112522, 0.18014942113513932, 0.1637543850262857, 0.2069009708441788, 0.1700862692559817, 0.15840110957348863, 0.19673194499540658, 0.15237936049253853, 0.15692729424616447, 0.13099356619886826, 0.22525951479718231, 0.19306291188412972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 0.07255217080210208, 0.09305146000052811, 0.08943344478356519, 0.0854887822177508, 0.03956811160474061, 0.08132931941276456, 0.045597908217000604, 0.0834166073568644, 0.03752836676284843, 0.15315357114484718, 0.015353268755589622, 9.999999999998899e-05, 0.00038236396779245396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025909518349043315, 9.999999999998899e-05, 0.10519272783348499, 0.05189550896947326, 0.06667392503603531, 0.030458762670713457, 0.0031482906131777844, 0.07394922513660462, 0.04925985248291598, 0.0358076314486836, 0.028062892625639102, 0.1971048784689945, 0.29727155839802255, 0.3107041531468243, 0.36194548532738646, 0.3720980909388333, 0.2987192414227893, 0.2776967150565638, 0.3911832733208952, 0.3940677367376261, 0.047700896361612455, 0.11041619577742134, 0.07243940076680577, 0.036811290213709436, 0.05838311341720126, 0.056535707012663305, 0.0770259784967775, 0.10371623721088108, 0.08132763175113722, 0.25430716605819903, 0.166705128830136, 0.21557957340024392, 0.1562762460394228, 0.22178332310041948, 0.1498495718397771, 0.19466747574082188, 0.23734809876503982, 0.20224288331066198, 0.15348725135216756, 0.2289292482630093, 0.2022810828511883, 0.27403329448712144, 0.2837613449643769, 0.2873167961817179, 0.17245379074690825, 0.21036960115510284, 0.20353369810797906, 0.1522678538904545, 0.1611704660672918, 0.15762274890164385, 0.21036765927547085, 0.15462341970413962, 0.22922677859696627, 0.09725659660481178, 0.20277059781646245, 0.12569192877450386, 0.24472796283087872, 0.18591663054719854, 0.20653562747675946, 0.19732882470195168, 0.22157709192455122, 0.29853198003701986, 0.25553163747183494, 0.4426363873270863, 0.26655856488733853, 0.16462441159630403, 0.17536219211201443, 0.18534422923102234, 0.19107849112909825, 0.17286666867465306, 0.17478759456906812, 0.1739702094569182, 0.1832253620173505, 0.18475358870563507, 0.1195824164687358, 0.4666475852346783, 0.20746194956363573, 0.3721360084097505, 0.19798918976024693, 0.15969221147842105, 0.31568598176312, 0.49413843808858104, 0.3207945045633507, 0.24774238149977978, 0.157128721881441, 0.35083682375295944, 0.22828414381901707, 0.20548715154980746, 0.2009047811802438, 0.1280013856491421, 0.14732565660326913, 0.36992676062996166, 0.1823539730721765, 0.17098427668847416, 0.20145083260106844, 0.19240746323252667, 0.18250817888814286, 0.1992548519268662, 0.1983170641602403, 0.18904436845654748, 0.19691695178576452, 0.06876776670656348, 0.07615102555170228, 0.06978430519608769, 0.05883787503846161, 0.09483539225501914, 0.07190836915436993, 0.08279867708561361, 0.06720034139713849, 0.0648116158908193]}, "mutation_prompt": null}
{"id": "ebf8559c-fc14-4813-a244-31bb5192f19a", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence", "description": "Introduce an adaptive scaling factor for the mutation in Differential Evolution to enhance exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.34287899890117246, 0.30579359815120033, 0.481339004413603, 0.4194228226867366, 0.48774801621875863, 0.4500614579667106, 0.39245748826506377, 0.3541076253933677, 0.3487300765627348, 0.02714896365247388, 0.029427763482174463, 9.999999999998899e-05, 0.09015019083594655, 0.055232176961498625, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506691327281078, 0.07946685524012886, 0.022187533106290402, 0.1074418094479479, 0.10225200106094212, 0.1142724271191572, 0.10285071172607163, 0.09399822833349192, 0.11321139857174645, 0.09111281019461914, 0.05029888948129935, 0.07537590470151756, 0.08384177648239943, 0.07976011863921673, 0.08602725011470391, 0.10021430342765902, 0.06959844666662374, 0.08488271648466905, 0.918301954102391, 0.968147940677528, 0.9175304563577127, 0.2600034920418457, 0.9401088562714096, 0.8736516270544419, 0.9675480774308344, 0.9550570922147665, 0.8820824688446488, 0.20969446932754798, 0.20849317620247632, 0.24221432869504256, 0.10952504896699922, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.19380103482313293, 0.2014334450433909, 0.200445123725409, 0.13199399937435297, 0.21316110695028212, 0.25806516677333446, 0.2504992002784172, 0.31886761430295285, 0.17474080565250583, 0.31094252942739053, 0.17050087444879192, 0.22472760417737203, 0.12081434653461942, 0.1616948954994536, 9.999999999998899e-05, 0.12046448867404269, 0.12123953970918044, 0.18773054540112522, 0.18014942113513932, 0.1637543850262857, 0.2069009708441788, 0.1700862692559817, 0.15840110957348863, 0.19673194499540658, 0.15237936049253853, 0.15692729424616447, 0.13099356619886826, 0.22525951479718231, 0.19306291188412972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 0.07255217080210208, 0.09305146000052811, 0.08943344478356519, 0.0854887822177508, 0.03956811160474061, 0.08132931941276456, 0.045597908217000604, 0.0834166073568644, 0.03752836676284843, 0.15315357114484718, 0.015353268755589622, 9.999999999998899e-05, 0.00038236396779245396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025909518349043315, 9.999999999998899e-05, 0.10519272783348499, 0.05189550896947326, 0.06667392503603531, 0.030458762670713457, 0.0031482906131777844, 0.07394922513660462, 0.04925985248291598, 0.0358076314486836, 0.028062892625639102, 0.1971048784689945, 0.29727155839802255, 0.3107041531468243, 0.36194548532738646, 0.3720980909388333, 0.2987192414227893, 0.2776967150565638, 0.3911832733208952, 0.3940677367376261, 0.047700896361612455, 0.11041619577742134, 0.07243940076680577, 0.036811290213709436, 0.05838311341720126, 0.056535707012663305, 0.0770259784967775, 0.10371623721088108, 0.08132763175113722, 0.25430716605819903, 0.166705128830136, 0.21557957340024392, 0.1562762460394228, 0.22178332310041948, 0.1498495718397771, 0.19466747574082188, 0.23734809876503982, 0.20224288331066198, 0.15348725135216756, 0.2289292482630093, 0.2022810828511883, 0.27403329448712144, 0.2837613449643769, 0.2873167961817179, 0.17245379074690825, 0.21036960115510284, 0.20353369810797906, 0.1522678538904545, 0.1611704660672918, 0.15762274890164385, 0.21036765927547085, 0.15462341970413962, 0.22922677859696627, 0.09725659660481178, 0.20277059781646245, 0.12569192877450386, 0.24472796283087872, 0.18591663054719854, 0.20653562747675946, 0.19732882470195168, 0.22157709192455122, 0.29853198003701986, 0.25553163747183494, 0.4426363873270863, 0.26655856488733853, 0.16462441159630403, 0.17536219211201443, 0.18534422923102234, 0.19107849112909825, 0.17286666867465306, 0.17478759456906812, 0.1739702094569182, 0.1832253620173505, 0.18475358870563507, 0.1195824164687358, 0.4666475852346783, 0.20746194956363573, 0.3721360084097505, 0.19798918976024693, 0.15969221147842105, 0.31568598176312, 0.49413843808858104, 0.3207945045633507, 0.24774238149977978, 0.157128721881441, 0.35083682375295944, 0.22828414381901707, 0.20548715154980746, 0.2009047811802438, 0.1280013856491421, 0.14732565660326913, 0.36992676062996166, 0.1823539730721765, 0.17098427668847416, 0.20145083260106844, 0.19240746323252667, 0.18250817888814286, 0.1992548519268662, 0.1983170641602403, 0.18904436845654748, 0.19691695178576452, 0.06876776670656348, 0.07615102555170228, 0.06978430519608769, 0.05883787503846161, 0.09483539225501914, 0.07190836915436993, 0.08279867708561361, 0.06720034139713849, 0.0648116158908193]}, "mutation_prompt": null}
{"id": "ed94808f-f88e-409a-8159-4619b011a920", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence", "description": "Introduce an adaptive scaling factor for the mutation in Differential Evolution to enhance exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.34287899890117246, 0.30579359815120033, 0.481339004413603, 0.4194228226867366, 0.48774801621875863, 0.4500614579667106, 0.39245748826506377, 0.3541076253933677, 0.3487300765627348, 0.02714896365247388, 0.029427763482174463, 9.999999999998899e-05, 0.09015019083594655, 0.055232176961498625, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506691327281078, 0.07946685524012886, 0.022187533106290402, 0.1074418094479479, 0.10225200106094212, 0.1142724271191572, 0.10285071172607163, 0.09399822833349192, 0.11321139857174645, 0.09111281019461914, 0.05029888948129935, 0.07537590470151756, 0.08384177648239943, 0.07976011863921673, 0.08602725011470391, 0.10021430342765902, 0.06959844666662374, 0.08488271648466905, 0.918301954102391, 0.968147940677528, 0.9175304563577127, 0.2600034920418457, 0.9401088562714096, 0.8736516270544419, 0.9675480774308344, 0.9550570922147665, 0.8820824688446488, 0.20969446932754798, 0.20849317620247632, 0.24221432869504256, 0.10952504896699922, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.19380103482313293, 0.2014334450433909, 0.200445123725409, 0.13199399937435297, 0.21316110695028212, 0.25806516677333446, 0.2504992002784172, 0.31886761430295285, 0.17474080565250583, 0.31094252942739053, 0.17050087444879192, 0.22472760417737203, 0.12081434653461942, 0.1616948954994536, 9.999999999998899e-05, 0.12046448867404269, 0.12123953970918044, 0.18773054540112522, 0.18014942113513932, 0.1637543850262857, 0.2069009708441788, 0.1700862692559817, 0.15840110957348863, 0.19673194499540658, 0.15237936049253853, 0.15692729424616447, 0.13099356619886826, 0.22525951479718231, 0.19306291188412972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 0.07255217080210208, 0.09305146000052811, 0.08943344478356519, 0.0854887822177508, 0.03956811160474061, 0.08132931941276456, 0.045597908217000604, 0.0834166073568644, 0.03752836676284843, 0.15315357114484718, 0.015353268755589622, 9.999999999998899e-05, 0.00038236396779245396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025909518349043315, 9.999999999998899e-05, 0.10519272783348499, 0.05189550896947326, 0.06667392503603531, 0.030458762670713457, 0.0031482906131777844, 0.07394922513660462, 0.04925985248291598, 0.0358076314486836, 0.028062892625639102, 0.1971048784689945, 0.29727155839802255, 0.3107041531468243, 0.36194548532738646, 0.3720980909388333, 0.2987192414227893, 0.2776967150565638, 0.3911832733208952, 0.3940677367376261, 0.047700896361612455, 0.11041619577742134, 0.07243940076680577, 0.036811290213709436, 0.05838311341720126, 0.056535707012663305, 0.0770259784967775, 0.10371623721088108, 0.08132763175113722, 0.25430716605819903, 0.166705128830136, 0.21557957340024392, 0.1562762460394228, 0.22178332310041948, 0.1498495718397771, 0.19466747574082188, 0.23734809876503982, 0.20224288331066198, 0.15348725135216756, 0.2289292482630093, 0.2022810828511883, 0.27403329448712144, 0.2837613449643769, 0.2873167961817179, 0.17245379074690825, 0.21036960115510284, 0.20353369810797906, 0.1522678538904545, 0.1611704660672918, 0.15762274890164385, 0.21036765927547085, 0.15462341970413962, 0.22922677859696627, 0.09725659660481178, 0.20277059781646245, 0.12569192877450386, 0.24472796283087872, 0.18591663054719854, 0.20653562747675946, 0.19732882470195168, 0.22157709192455122, 0.29853198003701986, 0.25553163747183494, 0.4426363873270863, 0.26655856488733853, 0.16462441159630403, 0.17536219211201443, 0.18534422923102234, 0.19107849112909825, 0.17286666867465306, 0.17478759456906812, 0.1739702094569182, 0.1832253620173505, 0.18475358870563507, 0.1195824164687358, 0.4666475852346783, 0.20746194956363573, 0.3721360084097505, 0.19798918976024693, 0.15969221147842105, 0.31568598176312, 0.49413843808858104, 0.3207945045633507, 0.24774238149977978, 0.157128721881441, 0.35083682375295944, 0.22828414381901707, 0.20548715154980746, 0.2009047811802438, 0.1280013856491421, 0.14732565660326913, 0.36992676062996166, 0.1823539730721765, 0.17098427668847416, 0.20145083260106844, 0.19240746323252667, 0.18250817888814286, 0.1992548519268662, 0.1983170641602403, 0.18904436845654748, 0.19691695178576452, 0.06876776670656348, 0.07615102555170228, 0.06978430519608769, 0.05883787503846161, 0.09483539225501914, 0.07190836915436993, 0.08279867708561361, 0.06720034139713849, 0.0648116158908193]}, "mutation_prompt": null}
{"id": "ee723479-f322-4420-965a-6721da598d61", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence", "description": "Introduce an adaptive scaling factor for the mutation in Differential Evolution to enhance exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.34287899890117246, 0.30579359815120033, 0.481339004413603, 0.4194228226867366, 0.48774801621875863, 0.4500614579667106, 0.39245748826506377, 0.3541076253933677, 0.3487300765627348, 0.02714896365247388, 0.029427763482174463, 9.999999999998899e-05, 0.09015019083594655, 0.055232176961498625, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506691327281078, 0.07946685524012886, 0.022187533106290402, 0.1074418094479479, 0.10225200106094212, 0.1142724271191572, 0.10285071172607163, 0.09399822833349192, 0.11321139857174645, 0.09111281019461914, 0.05029888948129935, 0.07537590470151756, 0.08384177648239943, 0.07976011863921673, 0.08602725011470391, 0.10021430342765902, 0.06959844666662374, 0.08488271648466905, 0.918301954102391, 0.968147940677528, 0.9175304563577127, 0.2600034920418457, 0.9401088562714096, 0.8736516270544419, 0.9675480774308344, 0.9550570922147665, 0.8820824688446488, 0.20969446932754798, 0.20849317620247632, 0.24221432869504256, 0.10952504896699922, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.19380103482313293, 0.2014334450433909, 0.200445123725409, 0.13199399937435297, 0.21316110695028212, 0.25806516677333446, 0.2504992002784172, 0.31886761430295285, 0.17474080565250583, 0.31094252942739053, 0.17050087444879192, 0.22472760417737203, 0.12081434653461942, 0.1616948954994536, 9.999999999998899e-05, 0.12046448867404269, 0.12123953970918044, 0.18773054540112522, 0.18014942113513932, 0.1637543850262857, 0.2069009708441788, 0.1700862692559817, 0.15840110957348863, 0.19673194499540658, 0.15237936049253853, 0.15692729424616447, 0.13099356619886826, 0.22525951479718231, 0.19306291188412972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 0.07255217080210208, 0.09305146000052811, 0.08943344478356519, 0.0854887822177508, 0.03956811160474061, 0.08132931941276456, 0.045597908217000604, 0.0834166073568644, 0.03752836676284843, 0.15315357114484718, 0.015353268755589622, 9.999999999998899e-05, 0.00038236396779245396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025909518349043315, 9.999999999998899e-05, 0.10519272783348499, 0.05189550896947326, 0.06667392503603531, 0.030458762670713457, 0.0031482906131777844, 0.07394922513660462, 0.04925985248291598, 0.0358076314486836, 0.028062892625639102, 0.1971048784689945, 0.29727155839802255, 0.3107041531468243, 0.36194548532738646, 0.3720980909388333, 0.2987192414227893, 0.2776967150565638, 0.3911832733208952, 0.3940677367376261, 0.047700896361612455, 0.11041619577742134, 0.07243940076680577, 0.036811290213709436, 0.05838311341720126, 0.056535707012663305, 0.0770259784967775, 0.10371623721088108, 0.08132763175113722, 0.25430716605819903, 0.166705128830136, 0.21557957340024392, 0.1562762460394228, 0.22178332310041948, 0.1498495718397771, 0.19466747574082188, 0.23734809876503982, 0.20224288331066198, 0.15348725135216756, 0.2289292482630093, 0.2022810828511883, 0.27403329448712144, 0.2837613449643769, 0.2873167961817179, 0.17245379074690825, 0.21036960115510284, 0.20353369810797906, 0.1522678538904545, 0.1611704660672918, 0.15762274890164385, 0.21036765927547085, 0.15462341970413962, 0.22922677859696627, 0.09725659660481178, 0.20277059781646245, 0.12569192877450386, 0.24472796283087872, 0.18591663054719854, 0.20653562747675946, 0.19732882470195168, 0.22157709192455122, 0.29853198003701986, 0.25553163747183494, 0.4426363873270863, 0.26655856488733853, 0.16462441159630403, 0.17536219211201443, 0.18534422923102234, 0.19107849112909825, 0.17286666867465306, 0.17478759456906812, 0.1739702094569182, 0.1832253620173505, 0.18475358870563507, 0.1195824164687358, 0.4666475852346783, 0.20746194956363573, 0.3721360084097505, 0.19798918976024693, 0.15969221147842105, 0.31568598176312, 0.49413843808858104, 0.3207945045633507, 0.24774238149977978, 0.157128721881441, 0.35083682375295944, 0.22828414381901707, 0.20548715154980746, 0.2009047811802438, 0.1280013856491421, 0.14732565660326913, 0.36992676062996166, 0.1823539730721765, 0.17098427668847416, 0.20145083260106844, 0.19240746323252667, 0.18250817888814286, 0.1992548519268662, 0.1983170641602403, 0.18904436845654748, 0.19691695178576452, 0.06876776670656348, 0.07615102555170228, 0.06978430519608769, 0.05883787503846161, 0.09483539225501914, 0.07190836915436993, 0.08279867708561361, 0.06720034139713849, 0.0648116158908193]}, "mutation_prompt": null}
{"id": "605d70e5-b976-4b42-873b-9bfd26c926e9", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence", "description": "Introduce an adaptive scaling factor for the mutation in Differential Evolution to enhance exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.34287899890117246, 0.30579359815120033, 0.481339004413603, 0.4194228226867366, 0.48774801621875863, 0.4500614579667106, 0.39245748826506377, 0.3541076253933677, 0.3487300765627348, 0.02714896365247388, 0.029427763482174463, 9.999999999998899e-05, 0.09015019083594655, 0.055232176961498625, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506691327281078, 0.07946685524012886, 0.022187533106290402, 0.1074418094479479, 0.10225200106094212, 0.1142724271191572, 0.10285071172607163, 0.09399822833349192, 0.11321139857174645, 0.09111281019461914, 0.05029888948129935, 0.07537590470151756, 0.08384177648239943, 0.07976011863921673, 0.08602725011470391, 0.10021430342765902, 0.06959844666662374, 0.08488271648466905, 0.918301954102391, 0.968147940677528, 0.9175304563577127, 0.2600034920418457, 0.9401088562714096, 0.8736516270544419, 0.9675480774308344, 0.9550570922147665, 0.8820824688446488, 0.20969446932754798, 0.20849317620247632, 0.24221432869504256, 0.10952504896699922, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.19380103482313293, 0.2014334450433909, 0.200445123725409, 0.13199399937435297, 0.21316110695028212, 0.25806516677333446, 0.2504992002784172, 0.31886761430295285, 0.17474080565250583, 0.31094252942739053, 0.17050087444879192, 0.22472760417737203, 0.12081434653461942, 0.1616948954994536, 9.999999999998899e-05, 0.12046448867404269, 0.12123953970918044, 0.18773054540112522, 0.18014942113513932, 0.1637543850262857, 0.2069009708441788, 0.1700862692559817, 0.15840110957348863, 0.19673194499540658, 0.15237936049253853, 0.15692729424616447, 0.13099356619886826, 0.22525951479718231, 0.19306291188412972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 0.07255217080210208, 0.09305146000052811, 0.08943344478356519, 0.0854887822177508, 0.03956811160474061, 0.08132931941276456, 0.045597908217000604, 0.0834166073568644, 0.03752836676284843, 0.15315357114484718, 0.015353268755589622, 9.999999999998899e-05, 0.00038236396779245396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025909518349043315, 9.999999999998899e-05, 0.10519272783348499, 0.05189550896947326, 0.06667392503603531, 0.030458762670713457, 0.0031482906131777844, 0.07394922513660462, 0.04925985248291598, 0.0358076314486836, 0.028062892625639102, 0.1971048784689945, 0.29727155839802255, 0.3107041531468243, 0.36194548532738646, 0.3720980909388333, 0.2987192414227893, 0.2776967150565638, 0.3911832733208952, 0.3940677367376261, 0.047700896361612455, 0.11041619577742134, 0.07243940076680577, 0.036811290213709436, 0.05838311341720126, 0.056535707012663305, 0.0770259784967775, 0.10371623721088108, 0.08132763175113722, 0.25430716605819903, 0.166705128830136, 0.21557957340024392, 0.1562762460394228, 0.22178332310041948, 0.1498495718397771, 0.19466747574082188, 0.23734809876503982, 0.20224288331066198, 0.15348725135216756, 0.2289292482630093, 0.2022810828511883, 0.27403329448712144, 0.2837613449643769, 0.2873167961817179, 0.17245379074690825, 0.21036960115510284, 0.20353369810797906, 0.1522678538904545, 0.1611704660672918, 0.15762274890164385, 0.21036765927547085, 0.15462341970413962, 0.22922677859696627, 0.09725659660481178, 0.20277059781646245, 0.12569192877450386, 0.24472796283087872, 0.18591663054719854, 0.20653562747675946, 0.19732882470195168, 0.22157709192455122, 0.29853198003701986, 0.25553163747183494, 0.4426363873270863, 0.26655856488733853, 0.16462441159630403, 0.17536219211201443, 0.18534422923102234, 0.19107849112909825, 0.17286666867465306, 0.17478759456906812, 0.1739702094569182, 0.1832253620173505, 0.18475358870563507, 0.1195824164687358, 0.4666475852346783, 0.20746194956363573, 0.3721360084097505, 0.19798918976024693, 0.15969221147842105, 0.31568598176312, 0.49413843808858104, 0.3207945045633507, 0.24774238149977978, 0.157128721881441, 0.35083682375295944, 0.22828414381901707, 0.20548715154980746, 0.2009047811802438, 0.1280013856491421, 0.14732565660326913, 0.36992676062996166, 0.1823539730721765, 0.17098427668847416, 0.20145083260106844, 0.19240746323252667, 0.18250817888814286, 0.1992548519268662, 0.1983170641602403, 0.18904436845654748, 0.19691695178576452, 0.06876776670656348, 0.07615102555170228, 0.06978430519608769, 0.05883787503846161, 0.09483539225501914, 0.07190836915436993, 0.08279867708561361, 0.06720034139713849, 0.0648116158908193]}, "mutation_prompt": null}
{"id": "cf592f6f-ccdc-4305-a715-11f923e41925", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence", "description": "Introduce an adaptive scaling factor for the mutation in Differential Evolution to enhance exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.34287899890117246, 0.30579359815120033, 0.481339004413603, 0.4194228226867366, 0.48774801621875863, 0.4500614579667106, 0.39245748826506377, 0.3541076253933677, 0.3487300765627348, 0.02714896365247388, 0.029427763482174463, 9.999999999998899e-05, 0.09015019083594655, 0.055232176961498625, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506691327281078, 0.07946685524012886, 0.022187533106290402, 0.1074418094479479, 0.10225200106094212, 0.1142724271191572, 0.10285071172607163, 0.09399822833349192, 0.11321139857174645, 0.09111281019461914, 0.05029888948129935, 0.07537590470151756, 0.08384177648239943, 0.07976011863921673, 0.08602725011470391, 0.10021430342765902, 0.06959844666662374, 0.08488271648466905, 0.918301954102391, 0.968147940677528, 0.9175304563577127, 0.2600034920418457, 0.9401088562714096, 0.8736516270544419, 0.9675480774308344, 0.9550570922147665, 0.8820824688446488, 0.20969446932754798, 0.20849317620247632, 0.24221432869504256, 0.10952504896699922, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.19380103482313293, 0.2014334450433909, 0.200445123725409, 0.13199399937435297, 0.21316110695028212, 0.25806516677333446, 0.2504992002784172, 0.31886761430295285, 0.17474080565250583, 0.31094252942739053, 0.17050087444879192, 0.22472760417737203, 0.12081434653461942, 0.1616948954994536, 9.999999999998899e-05, 0.12046448867404269, 0.12123953970918044, 0.18773054540112522, 0.18014942113513932, 0.1637543850262857, 0.2069009708441788, 0.1700862692559817, 0.15840110957348863, 0.19673194499540658, 0.15237936049253853, 0.15692729424616447, 0.13099356619886826, 0.22525951479718231, 0.19306291188412972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 0.07255217080210208, 0.09305146000052811, 0.08943344478356519, 0.0854887822177508, 0.03956811160474061, 0.08132931941276456, 0.045597908217000604, 0.0834166073568644, 0.03752836676284843, 0.15315357114484718, 0.015353268755589622, 9.999999999998899e-05, 0.00038236396779245396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025909518349043315, 9.999999999998899e-05, 0.10519272783348499, 0.05189550896947326, 0.06667392503603531, 0.030458762670713457, 0.0031482906131777844, 0.07394922513660462, 0.04925985248291598, 0.0358076314486836, 0.028062892625639102, 0.1971048784689945, 0.29727155839802255, 0.3107041531468243, 0.36194548532738646, 0.3720980909388333, 0.2987192414227893, 0.2776967150565638, 0.3911832733208952, 0.3940677367376261, 0.047700896361612455, 0.11041619577742134, 0.07243940076680577, 0.036811290213709436, 0.05838311341720126, 0.056535707012663305, 0.0770259784967775, 0.10371623721088108, 0.08132763175113722, 0.25430716605819903, 0.166705128830136, 0.21557957340024392, 0.1562762460394228, 0.22178332310041948, 0.1498495718397771, 0.19466747574082188, 0.23734809876503982, 0.20224288331066198, 0.15348725135216756, 0.2289292482630093, 0.2022810828511883, 0.27403329448712144, 0.2837613449643769, 0.2873167961817179, 0.17245379074690825, 0.21036960115510284, 0.20353369810797906, 0.1522678538904545, 0.1611704660672918, 0.15762274890164385, 0.21036765927547085, 0.15462341970413962, 0.22922677859696627, 0.09725659660481178, 0.20277059781646245, 0.12569192877450386, 0.24472796283087872, 0.18591663054719854, 0.20653562747675946, 0.19732882470195168, 0.22157709192455122, 0.29853198003701986, 0.25553163747183494, 0.4426363873270863, 0.26655856488733853, 0.16462441159630403, 0.17536219211201443, 0.18534422923102234, 0.19107849112909825, 0.17286666867465306, 0.17478759456906812, 0.1739702094569182, 0.1832253620173505, 0.18475358870563507, 0.1195824164687358, 0.4666475852346783, 0.20746194956363573, 0.3721360084097505, 0.19798918976024693, 0.15969221147842105, 0.31568598176312, 0.49413843808858104, 0.3207945045633507, 0.24774238149977978, 0.157128721881441, 0.35083682375295944, 0.22828414381901707, 0.20548715154980746, 0.2009047811802438, 0.1280013856491421, 0.14732565660326913, 0.36992676062996166, 0.1823539730721765, 0.17098427668847416, 0.20145083260106844, 0.19240746323252667, 0.18250817888814286, 0.1992548519268662, 0.1983170641602403, 0.18904436845654748, 0.19691695178576452, 0.06876776670656348, 0.07615102555170228, 0.06978430519608769, 0.05883787503846161, 0.09483539225501914, 0.07190836915436993, 0.08279867708561361, 0.06720034139713849, 0.0648116158908193]}, "mutation_prompt": null}
{"id": "f72f778d-2f77-4057-afb4-6a1ca13c2194", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence", "description": "Introduce an adaptive scaling factor for the mutation in Differential Evolution to enhance exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.34287899890117246, 0.30579359815120033, 0.481339004413603, 0.4194228226867366, 0.48774801621875863, 0.4500614579667106, 0.39245748826506377, 0.3541076253933677, 0.3487300765627348, 0.02714896365247388, 0.029427763482174463, 9.999999999998899e-05, 0.09015019083594655, 0.055232176961498625, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506691327281078, 0.07946685524012886, 0.022187533106290402, 0.1074418094479479, 0.10225200106094212, 0.1142724271191572, 0.10285071172607163, 0.09399822833349192, 0.11321139857174645, 0.09111281019461914, 0.05029888948129935, 0.07537590470151756, 0.08384177648239943, 0.07976011863921673, 0.08602725011470391, 0.10021430342765902, 0.06959844666662374, 0.08488271648466905, 0.918301954102391, 0.968147940677528, 0.9175304563577127, 0.2600034920418457, 0.9401088562714096, 0.8736516270544419, 0.9675480774308344, 0.9550570922147665, 0.8820824688446488, 0.20969446932754798, 0.20849317620247632, 0.24221432869504256, 0.10952504896699922, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.19380103482313293, 0.2014334450433909, 0.200445123725409, 0.13199399937435297, 0.21316110695028212, 0.25806516677333446, 0.2504992002784172, 0.31886761430295285, 0.17474080565250583, 0.31094252942739053, 0.17050087444879192, 0.22472760417737203, 0.12081434653461942, 0.1616948954994536, 9.999999999998899e-05, 0.12046448867404269, 0.12123953970918044, 0.18773054540112522, 0.18014942113513932, 0.1637543850262857, 0.2069009708441788, 0.1700862692559817, 0.15840110957348863, 0.19673194499540658, 0.15237936049253853, 0.15692729424616447, 0.13099356619886826, 0.22525951479718231, 0.19306291188412972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 0.07255217080210208, 0.09305146000052811, 0.08943344478356519, 0.0854887822177508, 0.03956811160474061, 0.08132931941276456, 0.045597908217000604, 0.0834166073568644, 0.03752836676284843, 0.15315357114484718, 0.015353268755589622, 9.999999999998899e-05, 0.00038236396779245396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025909518349043315, 9.999999999998899e-05, 0.10519272783348499, 0.05189550896947326, 0.06667392503603531, 0.030458762670713457, 0.0031482906131777844, 0.07394922513660462, 0.04925985248291598, 0.0358076314486836, 0.028062892625639102, 0.1971048784689945, 0.29727155839802255, 0.3107041531468243, 0.36194548532738646, 0.3720980909388333, 0.2987192414227893, 0.2776967150565638, 0.3911832733208952, 0.3940677367376261, 0.047700896361612455, 0.11041619577742134, 0.07243940076680577, 0.036811290213709436, 0.05838311341720126, 0.056535707012663305, 0.0770259784967775, 0.10371623721088108, 0.08132763175113722, 0.25430716605819903, 0.166705128830136, 0.21557957340024392, 0.1562762460394228, 0.22178332310041948, 0.1498495718397771, 0.19466747574082188, 0.23734809876503982, 0.20224288331066198, 0.15348725135216756, 0.2289292482630093, 0.2022810828511883, 0.27403329448712144, 0.2837613449643769, 0.2873167961817179, 0.17245379074690825, 0.21036960115510284, 0.20353369810797906, 0.1522678538904545, 0.1611704660672918, 0.15762274890164385, 0.21036765927547085, 0.15462341970413962, 0.22922677859696627, 0.09725659660481178, 0.20277059781646245, 0.12569192877450386, 0.24472796283087872, 0.18591663054719854, 0.20653562747675946, 0.19732882470195168, 0.22157709192455122, 0.29853198003701986, 0.25553163747183494, 0.4426363873270863, 0.26655856488733853, 0.16462441159630403, 0.17536219211201443, 0.18534422923102234, 0.19107849112909825, 0.17286666867465306, 0.17478759456906812, 0.1739702094569182, 0.1832253620173505, 0.18475358870563507, 0.1195824164687358, 0.4666475852346783, 0.20746194956363573, 0.3721360084097505, 0.19798918976024693, 0.15969221147842105, 0.31568598176312, 0.49413843808858104, 0.3207945045633507, 0.24774238149977978, 0.157128721881441, 0.35083682375295944, 0.22828414381901707, 0.20548715154980746, 0.2009047811802438, 0.1280013856491421, 0.14732565660326913, 0.36992676062996166, 0.1823539730721765, 0.17098427668847416, 0.20145083260106844, 0.19240746323252667, 0.18250817888814286, 0.1992548519268662, 0.1983170641602403, 0.18904436845654748, 0.19691695178576452, 0.06876776670656348, 0.07615102555170228, 0.06978430519608769, 0.05883787503846161, 0.09483539225501914, 0.07190836915436993, 0.08279867708561361, 0.06720034139713849, 0.0648116158908193]}, "mutation_prompt": null}
{"id": "b10fa1c4-8718-40bf-b25b-ceb2d5019aeb", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence", "description": "Introduce an adaptive scaling factor for the mutation in Differential Evolution to enhance exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.34287899890117246, 0.30579359815120033, 0.481339004413603, 0.4194228226867366, 0.48774801621875863, 0.4500614579667106, 0.39245748826506377, 0.3541076253933677, 0.3487300765627348, 0.02714896365247388, 0.029427763482174463, 9.999999999998899e-05, 0.09015019083594655, 0.055232176961498625, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506691327281078, 0.07946685524012886, 0.022187533106290402, 0.1074418094479479, 0.10225200106094212, 0.1142724271191572, 0.10285071172607163, 0.09399822833349192, 0.11321139857174645, 0.09111281019461914, 0.05029888948129935, 0.07537590470151756, 0.08384177648239943, 0.07976011863921673, 0.08602725011470391, 0.10021430342765902, 0.06959844666662374, 0.08488271648466905, 0.918301954102391, 0.968147940677528, 0.9175304563577127, 0.2600034920418457, 0.9401088562714096, 0.8736516270544419, 0.9675480774308344, 0.9550570922147665, 0.8820824688446488, 0.20969446932754798, 0.20849317620247632, 0.24221432869504256, 0.10952504896699922, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.19380103482313293, 0.2014334450433909, 0.200445123725409, 0.13199399937435297, 0.21316110695028212, 0.25806516677333446, 0.2504992002784172, 0.31886761430295285, 0.17474080565250583, 0.31094252942739053, 0.17050087444879192, 0.22472760417737203, 0.12081434653461942, 0.1616948954994536, 9.999999999998899e-05, 0.12046448867404269, 0.12123953970918044, 0.18773054540112522, 0.18014942113513932, 0.1637543850262857, 0.2069009708441788, 0.1700862692559817, 0.15840110957348863, 0.19673194499540658, 0.15237936049253853, 0.15692729424616447, 0.13099356619886826, 0.22525951479718231, 0.19306291188412972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 0.07255217080210208, 0.09305146000052811, 0.08943344478356519, 0.0854887822177508, 0.03956811160474061, 0.08132931941276456, 0.045597908217000604, 0.0834166073568644, 0.03752836676284843, 0.15315357114484718, 0.015353268755589622, 9.999999999998899e-05, 0.00038236396779245396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025909518349043315, 9.999999999998899e-05, 0.10519272783348499, 0.05189550896947326, 0.06667392503603531, 0.030458762670713457, 0.0031482906131777844, 0.07394922513660462, 0.04925985248291598, 0.0358076314486836, 0.028062892625639102, 0.1971048784689945, 0.29727155839802255, 0.3107041531468243, 0.36194548532738646, 0.3720980909388333, 0.2987192414227893, 0.2776967150565638, 0.3911832733208952, 0.3940677367376261, 0.047700896361612455, 0.11041619577742134, 0.07243940076680577, 0.036811290213709436, 0.05838311341720126, 0.056535707012663305, 0.0770259784967775, 0.10371623721088108, 0.08132763175113722, 0.25430716605819903, 0.166705128830136, 0.21557957340024392, 0.1562762460394228, 0.22178332310041948, 0.1498495718397771, 0.19466747574082188, 0.23734809876503982, 0.20224288331066198, 0.15348725135216756, 0.2289292482630093, 0.2022810828511883, 0.27403329448712144, 0.2837613449643769, 0.2873167961817179, 0.17245379074690825, 0.21036960115510284, 0.20353369810797906, 0.1522678538904545, 0.1611704660672918, 0.15762274890164385, 0.21036765927547085, 0.15462341970413962, 0.22922677859696627, 0.09725659660481178, 0.20277059781646245, 0.12569192877450386, 0.24472796283087872, 0.18591663054719854, 0.20653562747675946, 0.19732882470195168, 0.22157709192455122, 0.29853198003701986, 0.25553163747183494, 0.4426363873270863, 0.26655856488733853, 0.16462441159630403, 0.17536219211201443, 0.18534422923102234, 0.19107849112909825, 0.17286666867465306, 0.17478759456906812, 0.1739702094569182, 0.1832253620173505, 0.18475358870563507, 0.1195824164687358, 0.4666475852346783, 0.20746194956363573, 0.3721360084097505, 0.19798918976024693, 0.15969221147842105, 0.31568598176312, 0.49413843808858104, 0.3207945045633507, 0.24774238149977978, 0.157128721881441, 0.35083682375295944, 0.22828414381901707, 0.20548715154980746, 0.2009047811802438, 0.1280013856491421, 0.14732565660326913, 0.36992676062996166, 0.1823539730721765, 0.17098427668847416, 0.20145083260106844, 0.19240746323252667, 0.18250817888814286, 0.1992548519268662, 0.1983170641602403, 0.18904436845654748, 0.19691695178576452, 0.06876776670656348, 0.07615102555170228, 0.06978430519608769, 0.05883787503846161, 0.09483539225501914, 0.07190836915436993, 0.08279867708561361, 0.06720034139713849, 0.0648116158908193]}, "mutation_prompt": null}
{"id": "f78716f1-fcec-44d2-b9db-c10390ad1892", "solution": "import numpy as np\n\nclass MultiStrategyOptimizationFastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n                    positions[i] = update_position(positions[i], best_position, c1, c2)  # Introduce local search\n\n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "MultiStrategyOptimizationFastConvergence", "description": "Introduce multi-strategy optimization by combining Differential Evolution mutation with Local Search for faster convergence.", "configspace": "", "generation": 94, "fitness": 0.17014726506326353, "feedback": "The algorithm MultiStrategyOptimizationFastConvergence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.18.", "error": "", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.3847582933931176, 0.2618670191047934, 0.32143917137915834, 0.2533769446876055, 0.2700245125404358, 0.2554017814039594, 0.29886062037489536, 0.301942045726321, 0.29227995111943395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05807327124432815, 0.015500228950169559, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07250242704914323, 0.08007437655535654, 0.09161494943057347, 0.06706139970049008, 0.08337835053274434, 0.07147148694990735, 0.08868925977806486, 0.07433906877951524, 0.0870798001182147, 0.0548252329254697, 0.07265101812776997, 0.08267654703512439, 0.08127314842293021, 0.08823324219781659, 0.06224179710180666, 0.06367248266946446, 0.06699432639252278, 0.07848555838334581, 0.9825833025980035, 0.6965699731708398, 0.884757116797617, 0.88960054765959, 0.9411445863667828, 0.9857705643492802, 0.9124667485247545, 0.8530642958674608, 0.9675443980189538, 0.2078113564473021, 0.1633270731666202, 0.16302905915437427, 0.19597308355652632, 0.14419447805778163, 0.1710902396209878, 0.12668448826406187, 0.1674539219365503, 0.05603133886714895, 0.21717461663455817, 0.21295307603162883, 0.20316805563187068, 0.19310851448269073, 0.19151920726166316, 0.1794857118602744, 0.20952821916330666, 0.14574478478737418, 0.1698972378489294, 0.11908229559300454, 0.13916117586861387, 0.12012522699531636, 0.05835854782333749, 0.029529640161850113, 0.10223645817424332, 0.096641704652493, 0.11070861950859812, 0.09434126793183606, 0.1588512079644202, 0.22848639618423727, 0.18524434766759046, 0.15762154916982762, 0.12072774690147958, 0.15839338968459182, 0.21008684097660812, 0.15711619202407512, 0.12436965231218378, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006368068602375043, 9.999999999998899e-05, 0.09765031726264317, 0.04297255890276175, 0.1234052338858499, 0.048297760672900925, 0.062028346987441196, 0.04468055050904862, 0.11485247472478, 0.06591045818235886, 0.08027471079549575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013296849964843926, 0.03596542464249053, 0.034768526469606376, 9.999999999998899e-05, 0.02307641492854795, 0.024712698159536584, 0.023179437383733292, 0.023859616837658915, 0.03329314519118709, 0.2522100091208205, 0.29352550960650303, 0.3150318646742797, 0.25631912432596105, 0.26306439399675496, 0.2854460373598732, 0.31738496642310343, 0.30922617009955633, 0.38348910070158393, 0.0665440511038603, 0.05731135202848092, 0.06157239604337339, 0.08681783280484456, 0.08661635010434054, 0.06550856313955589, 0.07666060861209878, 0.0821960578146953, 0.0860316949210479, 0.20010531882878102, 0.16007638746870656, 0.144501018882648, 0.18118471444238626, 0.1650300357084583, 0.13107271884000116, 0.13119809631321477, 0.19022958285804248, 0.1583944298071297, 0.15998842415821946, 0.2350367220960673, 0.17305455482043508, 0.26093744440535804, 0.23138169521077268, 0.2205603094413282, 0.19801860116006886, 0.22082940817838803, 0.19994038528564229, 0.16584773497058192, 0.15061428503253171, 0.1335897871004723, 0.1560467181979095, 0.20679751577966976, 0.14346302918030973, 0.15161272424550976, 0.15522482143881666, 0.14200204956261464, 0.21407754817009694, 0.20184177249723678, 0.238534171239155, 0.1862024824185533, 0.20742069009877961, 0.2607340513436104, 0.2238633051847393, 0.2333410584286214, 0.22229336793586407, 0.17085374551112398, 0.17320367413088045, 0.1674669158042138, 0.17967738967319968, 0.1711765636692577, 0.16738913965638225, 0.1675615041545443, 0.17456977859619494, 0.17254975696789843, 0.165515713516862, 0.1853053670561139, 0.16675162296744472, 0.4503358272504405, 0.18837248683275298, 0.362427570261608, 0.1687574391699702, 0.21005465135911916, 0.1637477987712247, 0.1711446546262887, 0.17933834902550994, 0.3358458623385272, 0.21245709468151064, 0.08240727413419113, 0.20116175684844229, 0.4121495145282683, 0.25834867764624947, 0.35565280152918266, 0.17386262119274065, 0.1900061505649655, 0.1800836189528422, 0.16977991417624727, 0.17024567311866923, 0.1949517102244307, 0.19151476541517443, 0.183423017122188, 0.17291199979212957, 0.07047836160030219, 0.07878152340470768, 0.07996021062354253, 0.06555792658801196, 0.05161485634933505, 0.06935822250433687, 0.06460950468774485, 0.06430077220177588, 0.08150326892794546]}, "mutation_prompt": null}
{"id": "652c3067-62d3-4d7f-ac6e-18d7c97360d2", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence", "description": "Introduce an adaptive scaling factor for the mutation in Differential Evolution to enhance exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.34287899890117246, 0.30579359815120033, 0.481339004413603, 0.4194228226867366, 0.48774801621875863, 0.4500614579667106, 0.39245748826506377, 0.3541076253933677, 0.3487300765627348, 0.02714896365247388, 0.029427763482174463, 9.999999999998899e-05, 0.09015019083594655, 0.055232176961498625, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506691327281078, 0.07946685524012886, 0.022187533106290402, 0.1074418094479479, 0.10225200106094212, 0.1142724271191572, 0.10285071172607163, 0.09399822833349192, 0.11321139857174645, 0.09111281019461914, 0.05029888948129935, 0.07537590470151756, 0.08384177648239943, 0.07976011863921673, 0.08602725011470391, 0.10021430342765902, 0.06959844666662374, 0.08488271648466905, 0.918301954102391, 0.968147940677528, 0.9175304563577127, 0.2600034920418457, 0.9401088562714096, 0.8736516270544419, 0.9675480774308344, 0.9550570922147665, 0.8820824688446488, 0.20969446932754798, 0.20849317620247632, 0.24221432869504256, 0.10952504896699922, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.19380103482313293, 0.2014334450433909, 0.200445123725409, 0.13199399937435297, 0.21316110695028212, 0.25806516677333446, 0.2504992002784172, 0.31886761430295285, 0.17474080565250583, 0.31094252942739053, 0.17050087444879192, 0.22472760417737203, 0.12081434653461942, 0.1616948954994536, 9.999999999998899e-05, 0.12046448867404269, 0.12123953970918044, 0.18773054540112522, 0.18014942113513932, 0.1637543850262857, 0.2069009708441788, 0.1700862692559817, 0.15840110957348863, 0.19673194499540658, 0.15237936049253853, 0.15692729424616447, 0.13099356619886826, 0.22525951479718231, 0.19306291188412972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 0.07255217080210208, 0.09305146000052811, 0.08943344478356519, 0.0854887822177508, 0.03956811160474061, 0.08132931941276456, 0.045597908217000604, 0.0834166073568644, 0.03752836676284843, 0.15315357114484718, 0.015353268755589622, 9.999999999998899e-05, 0.00038236396779245396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025909518349043315, 9.999999999998899e-05, 0.10519272783348499, 0.05189550896947326, 0.06667392503603531, 0.030458762670713457, 0.0031482906131777844, 0.07394922513660462, 0.04925985248291598, 0.0358076314486836, 0.028062892625639102, 0.1971048784689945, 0.29727155839802255, 0.3107041531468243, 0.36194548532738646, 0.3720980909388333, 0.2987192414227893, 0.2776967150565638, 0.3911832733208952, 0.3940677367376261, 0.047700896361612455, 0.11041619577742134, 0.07243940076680577, 0.036811290213709436, 0.05838311341720126, 0.056535707012663305, 0.0770259784967775, 0.10371623721088108, 0.08132763175113722, 0.25430716605819903, 0.166705128830136, 0.21557957340024392, 0.1562762460394228, 0.22178332310041948, 0.1498495718397771, 0.19466747574082188, 0.23734809876503982, 0.20224288331066198, 0.15348725135216756, 0.2289292482630093, 0.2022810828511883, 0.27403329448712144, 0.2837613449643769, 0.2873167961817179, 0.17245379074690825, 0.21036960115510284, 0.20353369810797906, 0.1522678538904545, 0.1611704660672918, 0.15762274890164385, 0.21036765927547085, 0.15462341970413962, 0.22922677859696627, 0.09725659660481178, 0.20277059781646245, 0.12569192877450386, 0.24472796283087872, 0.18591663054719854, 0.20653562747675946, 0.19732882470195168, 0.22157709192455122, 0.29853198003701986, 0.25553163747183494, 0.4426363873270863, 0.26655856488733853, 0.16462441159630403, 0.17536219211201443, 0.18534422923102234, 0.19107849112909825, 0.17286666867465306, 0.17478759456906812, 0.1739702094569182, 0.1832253620173505, 0.18475358870563507, 0.1195824164687358, 0.4666475852346783, 0.20746194956363573, 0.3721360084097505, 0.19798918976024693, 0.15969221147842105, 0.31568598176312, 0.49413843808858104, 0.3207945045633507, 0.24774238149977978, 0.157128721881441, 0.35083682375295944, 0.22828414381901707, 0.20548715154980746, 0.2009047811802438, 0.1280013856491421, 0.14732565660326913, 0.36992676062996166, 0.1823539730721765, 0.17098427668847416, 0.20145083260106844, 0.19240746323252667, 0.18250817888814286, 0.1992548519268662, 0.1983170641602403, 0.18904436845654748, 0.19691695178576452, 0.06876776670656348, 0.07615102555170228, 0.06978430519608769, 0.05883787503846161, 0.09483539225501914, 0.07190836915436993, 0.08279867708561361, 0.06720034139713849, 0.0648116158908193]}, "mutation_prompt": null}
{"id": "8ab5a1a8-d5f6-45e6-8b24-40754370ac29", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence", "description": "Introduce an adaptive scaling factor for the mutation in Differential Evolution to enhance exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.34287899890117246, 0.30579359815120033, 0.481339004413603, 0.4194228226867366, 0.48774801621875863, 0.4500614579667106, 0.39245748826506377, 0.3541076253933677, 0.3487300765627348, 0.02714896365247388, 0.029427763482174463, 9.999999999998899e-05, 0.09015019083594655, 0.055232176961498625, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506691327281078, 0.07946685524012886, 0.022187533106290402, 0.1074418094479479, 0.10225200106094212, 0.1142724271191572, 0.10285071172607163, 0.09399822833349192, 0.11321139857174645, 0.09111281019461914, 0.05029888948129935, 0.07537590470151756, 0.08384177648239943, 0.07976011863921673, 0.08602725011470391, 0.10021430342765902, 0.06959844666662374, 0.08488271648466905, 0.918301954102391, 0.968147940677528, 0.9175304563577127, 0.2600034920418457, 0.9401088562714096, 0.8736516270544419, 0.9675480774308344, 0.9550570922147665, 0.8820824688446488, 0.20969446932754798, 0.20849317620247632, 0.24221432869504256, 0.10952504896699922, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.19380103482313293, 0.2014334450433909, 0.200445123725409, 0.13199399937435297, 0.21316110695028212, 0.25806516677333446, 0.2504992002784172, 0.31886761430295285, 0.17474080565250583, 0.31094252942739053, 0.17050087444879192, 0.22472760417737203, 0.12081434653461942, 0.1616948954994536, 9.999999999998899e-05, 0.12046448867404269, 0.12123953970918044, 0.18773054540112522, 0.18014942113513932, 0.1637543850262857, 0.2069009708441788, 0.1700862692559817, 0.15840110957348863, 0.19673194499540658, 0.15237936049253853, 0.15692729424616447, 0.13099356619886826, 0.22525951479718231, 0.19306291188412972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 0.07255217080210208, 0.09305146000052811, 0.08943344478356519, 0.0854887822177508, 0.03956811160474061, 0.08132931941276456, 0.045597908217000604, 0.0834166073568644, 0.03752836676284843, 0.15315357114484718, 0.015353268755589622, 9.999999999998899e-05, 0.00038236396779245396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025909518349043315, 9.999999999998899e-05, 0.10519272783348499, 0.05189550896947326, 0.06667392503603531, 0.030458762670713457, 0.0031482906131777844, 0.07394922513660462, 0.04925985248291598, 0.0358076314486836, 0.028062892625639102, 0.1971048784689945, 0.29727155839802255, 0.3107041531468243, 0.36194548532738646, 0.3720980909388333, 0.2987192414227893, 0.2776967150565638, 0.3911832733208952, 0.3940677367376261, 0.047700896361612455, 0.11041619577742134, 0.07243940076680577, 0.036811290213709436, 0.05838311341720126, 0.056535707012663305, 0.0770259784967775, 0.10371623721088108, 0.08132763175113722, 0.25430716605819903, 0.166705128830136, 0.21557957340024392, 0.1562762460394228, 0.22178332310041948, 0.1498495718397771, 0.19466747574082188, 0.23734809876503982, 0.20224288331066198, 0.15348725135216756, 0.2289292482630093, 0.2022810828511883, 0.27403329448712144, 0.2837613449643769, 0.2873167961817179, 0.17245379074690825, 0.21036960115510284, 0.20353369810797906, 0.1522678538904545, 0.1611704660672918, 0.15762274890164385, 0.21036765927547085, 0.15462341970413962, 0.22922677859696627, 0.09725659660481178, 0.20277059781646245, 0.12569192877450386, 0.24472796283087872, 0.18591663054719854, 0.20653562747675946, 0.19732882470195168, 0.22157709192455122, 0.29853198003701986, 0.25553163747183494, 0.4426363873270863, 0.26655856488733853, 0.16462441159630403, 0.17536219211201443, 0.18534422923102234, 0.19107849112909825, 0.17286666867465306, 0.17478759456906812, 0.1739702094569182, 0.1832253620173505, 0.18475358870563507, 0.1195824164687358, 0.4666475852346783, 0.20746194956363573, 0.3721360084097505, 0.19798918976024693, 0.15969221147842105, 0.31568598176312, 0.49413843808858104, 0.3207945045633507, 0.24774238149977978, 0.157128721881441, 0.35083682375295944, 0.22828414381901707, 0.20548715154980746, 0.2009047811802438, 0.1280013856491421, 0.14732565660326913, 0.36992676062996166, 0.1823539730721765, 0.17098427668847416, 0.20145083260106844, 0.19240746323252667, 0.18250817888814286, 0.1992548519268662, 0.1983170641602403, 0.18904436845654748, 0.19691695178576452, 0.06876776670656348, 0.07615102555170228, 0.06978430519608769, 0.05883787503846161, 0.09483539225501914, 0.07190836915436993, 0.08279867708561361, 0.06720034139713849, 0.0648116158908193]}, "mutation_prompt": null}
{"id": "bcc9039a-95eb-4c32-b1cc-91b3c39772ce", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence", "description": "Introduce an adaptive scaling factor for the mutation in Differential Evolution to enhance exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.34287899890117246, 0.30579359815120033, 0.481339004413603, 0.4194228226867366, 0.48774801621875863, 0.4500614579667106, 0.39245748826506377, 0.3541076253933677, 0.3487300765627348, 0.02714896365247388, 0.029427763482174463, 9.999999999998899e-05, 0.09015019083594655, 0.055232176961498625, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506691327281078, 0.07946685524012886, 0.022187533106290402, 0.1074418094479479, 0.10225200106094212, 0.1142724271191572, 0.10285071172607163, 0.09399822833349192, 0.11321139857174645, 0.09111281019461914, 0.05029888948129935, 0.07537590470151756, 0.08384177648239943, 0.07976011863921673, 0.08602725011470391, 0.10021430342765902, 0.06959844666662374, 0.08488271648466905, 0.918301954102391, 0.968147940677528, 0.9175304563577127, 0.2600034920418457, 0.9401088562714096, 0.8736516270544419, 0.9675480774308344, 0.9550570922147665, 0.8820824688446488, 0.20969446932754798, 0.20849317620247632, 0.24221432869504256, 0.10952504896699922, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.19380103482313293, 0.2014334450433909, 0.200445123725409, 0.13199399937435297, 0.21316110695028212, 0.25806516677333446, 0.2504992002784172, 0.31886761430295285, 0.17474080565250583, 0.31094252942739053, 0.17050087444879192, 0.22472760417737203, 0.12081434653461942, 0.1616948954994536, 9.999999999998899e-05, 0.12046448867404269, 0.12123953970918044, 0.18773054540112522, 0.18014942113513932, 0.1637543850262857, 0.2069009708441788, 0.1700862692559817, 0.15840110957348863, 0.19673194499540658, 0.15237936049253853, 0.15692729424616447, 0.13099356619886826, 0.22525951479718231, 0.19306291188412972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 0.07255217080210208, 0.09305146000052811, 0.08943344478356519, 0.0854887822177508, 0.03956811160474061, 0.08132931941276456, 0.045597908217000604, 0.0834166073568644, 0.03752836676284843, 0.15315357114484718, 0.015353268755589622, 9.999999999998899e-05, 0.00038236396779245396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025909518349043315, 9.999999999998899e-05, 0.10519272783348499, 0.05189550896947326, 0.06667392503603531, 0.030458762670713457, 0.0031482906131777844, 0.07394922513660462, 0.04925985248291598, 0.0358076314486836, 0.028062892625639102, 0.1971048784689945, 0.29727155839802255, 0.3107041531468243, 0.36194548532738646, 0.3720980909388333, 0.2987192414227893, 0.2776967150565638, 0.3911832733208952, 0.3940677367376261, 0.047700896361612455, 0.11041619577742134, 0.07243940076680577, 0.036811290213709436, 0.05838311341720126, 0.056535707012663305, 0.0770259784967775, 0.10371623721088108, 0.08132763175113722, 0.25430716605819903, 0.166705128830136, 0.21557957340024392, 0.1562762460394228, 0.22178332310041948, 0.1498495718397771, 0.19466747574082188, 0.23734809876503982, 0.20224288331066198, 0.15348725135216756, 0.2289292482630093, 0.2022810828511883, 0.27403329448712144, 0.2837613449643769, 0.2873167961817179, 0.17245379074690825, 0.21036960115510284, 0.20353369810797906, 0.1522678538904545, 0.1611704660672918, 0.15762274890164385, 0.21036765927547085, 0.15462341970413962, 0.22922677859696627, 0.09725659660481178, 0.20277059781646245, 0.12569192877450386, 0.24472796283087872, 0.18591663054719854, 0.20653562747675946, 0.19732882470195168, 0.22157709192455122, 0.29853198003701986, 0.25553163747183494, 0.4426363873270863, 0.26655856488733853, 0.16462441159630403, 0.17536219211201443, 0.18534422923102234, 0.19107849112909825, 0.17286666867465306, 0.17478759456906812, 0.1739702094569182, 0.1832253620173505, 0.18475358870563507, 0.1195824164687358, 0.4666475852346783, 0.20746194956363573, 0.3721360084097505, 0.19798918976024693, 0.15969221147842105, 0.31568598176312, 0.49413843808858104, 0.3207945045633507, 0.24774238149977978, 0.157128721881441, 0.35083682375295944, 0.22828414381901707, 0.20548715154980746, 0.2009047811802438, 0.1280013856491421, 0.14732565660326913, 0.36992676062996166, 0.1823539730721765, 0.17098427668847416, 0.20145083260106844, 0.19240746323252667, 0.18250817888814286, 0.1992548519268662, 0.1983170641602403, 0.18904436845654748, 0.19691695178576452, 0.06876776670656348, 0.07615102555170228, 0.06978430519608769, 0.05883787503846161, 0.09483539225501914, 0.07190836915436993, 0.08279867708561361, 0.06720034139713849, 0.0648116158908193]}, "mutation_prompt": null}
{"id": "a7cddf33-31e5-457e-b45b-7874ff8e519f", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence", "description": "Introduce an adaptive scaling factor for the mutation in Differential Evolution to enhance exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.34287899890117246, 0.30579359815120033, 0.481339004413603, 0.4194228226867366, 0.48774801621875863, 0.4500614579667106, 0.39245748826506377, 0.3541076253933677, 0.3487300765627348, 0.02714896365247388, 0.029427763482174463, 9.999999999998899e-05, 0.09015019083594655, 0.055232176961498625, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506691327281078, 0.07946685524012886, 0.022187533106290402, 0.1074418094479479, 0.10225200106094212, 0.1142724271191572, 0.10285071172607163, 0.09399822833349192, 0.11321139857174645, 0.09111281019461914, 0.05029888948129935, 0.07537590470151756, 0.08384177648239943, 0.07976011863921673, 0.08602725011470391, 0.10021430342765902, 0.06959844666662374, 0.08488271648466905, 0.918301954102391, 0.968147940677528, 0.9175304563577127, 0.2600034920418457, 0.9401088562714096, 0.8736516270544419, 0.9675480774308344, 0.9550570922147665, 0.8820824688446488, 0.20969446932754798, 0.20849317620247632, 0.24221432869504256, 0.10952504896699922, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.19380103482313293, 0.2014334450433909, 0.200445123725409, 0.13199399937435297, 0.21316110695028212, 0.25806516677333446, 0.2504992002784172, 0.31886761430295285, 0.17474080565250583, 0.31094252942739053, 0.17050087444879192, 0.22472760417737203, 0.12081434653461942, 0.1616948954994536, 9.999999999998899e-05, 0.12046448867404269, 0.12123953970918044, 0.18773054540112522, 0.18014942113513932, 0.1637543850262857, 0.2069009708441788, 0.1700862692559817, 0.15840110957348863, 0.19673194499540658, 0.15237936049253853, 0.15692729424616447, 0.13099356619886826, 0.22525951479718231, 0.19306291188412972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 0.07255217080210208, 0.09305146000052811, 0.08943344478356519, 0.0854887822177508, 0.03956811160474061, 0.08132931941276456, 0.045597908217000604, 0.0834166073568644, 0.03752836676284843, 0.15315357114484718, 0.015353268755589622, 9.999999999998899e-05, 0.00038236396779245396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025909518349043315, 9.999999999998899e-05, 0.10519272783348499, 0.05189550896947326, 0.06667392503603531, 0.030458762670713457, 0.0031482906131777844, 0.07394922513660462, 0.04925985248291598, 0.0358076314486836, 0.028062892625639102, 0.1971048784689945, 0.29727155839802255, 0.3107041531468243, 0.36194548532738646, 0.3720980909388333, 0.2987192414227893, 0.2776967150565638, 0.3911832733208952, 0.3940677367376261, 0.047700896361612455, 0.11041619577742134, 0.07243940076680577, 0.036811290213709436, 0.05838311341720126, 0.056535707012663305, 0.0770259784967775, 0.10371623721088108, 0.08132763175113722, 0.25430716605819903, 0.166705128830136, 0.21557957340024392, 0.1562762460394228, 0.22178332310041948, 0.1498495718397771, 0.19466747574082188, 0.23734809876503982, 0.20224288331066198, 0.15348725135216756, 0.2289292482630093, 0.2022810828511883, 0.27403329448712144, 0.2837613449643769, 0.2873167961817179, 0.17245379074690825, 0.21036960115510284, 0.20353369810797906, 0.1522678538904545, 0.1611704660672918, 0.15762274890164385, 0.21036765927547085, 0.15462341970413962, 0.22922677859696627, 0.09725659660481178, 0.20277059781646245, 0.12569192877450386, 0.24472796283087872, 0.18591663054719854, 0.20653562747675946, 0.19732882470195168, 0.22157709192455122, 0.29853198003701986, 0.25553163747183494, 0.4426363873270863, 0.26655856488733853, 0.16462441159630403, 0.17536219211201443, 0.18534422923102234, 0.19107849112909825, 0.17286666867465306, 0.17478759456906812, 0.1739702094569182, 0.1832253620173505, 0.18475358870563507, 0.1195824164687358, 0.4666475852346783, 0.20746194956363573, 0.3721360084097505, 0.19798918976024693, 0.15969221147842105, 0.31568598176312, 0.49413843808858104, 0.3207945045633507, 0.24774238149977978, 0.157128721881441, 0.35083682375295944, 0.22828414381901707, 0.20548715154980746, 0.2009047811802438, 0.1280013856491421, 0.14732565660326913, 0.36992676062996166, 0.1823539730721765, 0.17098427668847416, 0.20145083260106844, 0.19240746323252667, 0.18250817888814286, 0.1992548519268662, 0.1983170641602403, 0.18904436845654748, 0.19691695178576452, 0.06876776670656348, 0.07615102555170228, 0.06978430519608769, 0.05883787503846161, 0.09483539225501914, 0.07190836915436993, 0.08279867708561361, 0.06720034139713849, 0.0648116158908193]}, "mutation_prompt": null}
{"id": "937d7c0d-cffb-45f0-80b2-98765338f1ca", "solution": "import numpy as np\n\nclass AdaptiveDynamicLocalSearchEGWO_FastConvergence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def update_position(position, best, a, c):\n            return np.clip(position + a * (2 * np.random.rand(self.dim) - 1) * np.abs(c * best - position), -5.0, 5.0)\n\n        def de_mutation(x, population, f):\n            scaling_factor = 0.8 + 0.2 * np.random.rand()  # Introduce adaptive scaling factor\n            a, b, c = population[np.random.choice(population.shape[0], 3, replace=False)]\n            return np.clip(a + f * scaling_factor * (b - c), -5.0, 5.0)\n\n        positions = np.random.uniform(-5.0, 5.0, (5, self.dim))\n        fitness = np.array([func(p) for p in positions])\n        best_idx = np.argmin(fitness)\n        best_position = positions[best_idx]\n        \n        f = 0.5  # Initial mutation factor\n        f_decay = 0.95  # Decay factor for the mutation factor\n\n        for _ in range(self.budget - 5):\n            a = 2 - 2 * _ / (self.budget - 1)  # linearly decreasing a value\n            for i in range(5):\n                if i == best_idx:\n                    continue\n                c1 = 2 * np.random.rand(self.dim)\n                c2 = 2 * np.random.rand(self.dim)\n                c3 = 2 * np.random.rand(self.dim)\n                if np.random.rand() > 0.5:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                else:\n                    positions[i] = de_mutation(positions[i], positions, f)\n\n                if np.random.rand() < 0.3:  \n                    positions[i] = update_position(positions[i], best_position, c1, c2)\n                    \n            new_fitness = np.array([func(p) for p in positions])\n            new_best_idx = np.argmin(new_fitness)\n            if new_fitness[new_best_idx] < fitness[best_idx]:\n                fitness[new_best_idx] = new_fitness[new_best_idx]\n                best_idx = new_best_idx\n                best_position = positions[best_idx]\n            \n            if np.random.rand() < 0.1:  \n                f = max(f * f_decay, 0.1)\n\n        return best_position", "name": "AdaptiveDynamicLocalSearchEGWO_FastConvergence", "description": "Introduce an adaptive scaling factor for the mutation in Differential Evolution to enhance exploration and exploitation balance, improving convergence speed.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3520c8c3-43ba-46ca-8859-4bacb838ab76", "metadata": {"aucs": [0.34287899890117246, 0.30579359815120033, 0.481339004413603, 0.4194228226867366, 0.48774801621875863, 0.4500614579667106, 0.39245748826506377, 0.3541076253933677, 0.3487300765627348, 0.02714896365247388, 0.029427763482174463, 9.999999999998899e-05, 0.09015019083594655, 0.055232176961498625, 0.047437063926660805, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06506691327281078, 0.07946685524012886, 0.022187533106290402, 0.1074418094479479, 0.10225200106094212, 0.1142724271191572, 0.10285071172607163, 0.09399822833349192, 0.11321139857174645, 0.09111281019461914, 0.05029888948129935, 0.07537590470151756, 0.08384177648239943, 0.07976011863921673, 0.08602725011470391, 0.10021430342765902, 0.06959844666662374, 0.08488271648466905, 0.918301954102391, 0.968147940677528, 0.9175304563577127, 0.2600034920418457, 0.9401088562714096, 0.8736516270544419, 0.9675480774308344, 0.9550570922147665, 0.8820824688446488, 0.20969446932754798, 0.20849317620247632, 0.24221432869504256, 0.10952504896699922, 0.20751238614155143, 0.17907094752061892, 0.23023529050196945, 0.19380103482313293, 0.2014334450433909, 0.200445123725409, 0.13199399937435297, 0.21316110695028212, 0.25806516677333446, 0.2504992002784172, 0.31886761430295285, 0.17474080565250583, 0.31094252942739053, 0.17050087444879192, 0.22472760417737203, 0.12081434653461942, 0.1616948954994536, 9.999999999998899e-05, 0.12046448867404269, 0.12123953970918044, 0.18773054540112522, 0.18014942113513932, 0.1637543850262857, 0.2069009708441788, 0.1700862692559817, 0.15840110957348863, 0.19673194499540658, 0.15237936049253853, 0.15692729424616447, 0.13099356619886826, 0.22525951479718231, 0.19306291188412972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001427317477673551, 0.07255217080210208, 0.09305146000052811, 0.08943344478356519, 0.0854887822177508, 0.03956811160474061, 0.08132931941276456, 0.045597908217000604, 0.0834166073568644, 0.03752836676284843, 0.15315357114484718, 0.015353268755589622, 9.999999999998899e-05, 0.00038236396779245396, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025909518349043315, 9.999999999998899e-05, 0.10519272783348499, 0.05189550896947326, 0.06667392503603531, 0.030458762670713457, 0.0031482906131777844, 0.07394922513660462, 0.04925985248291598, 0.0358076314486836, 0.028062892625639102, 0.1971048784689945, 0.29727155839802255, 0.3107041531468243, 0.36194548532738646, 0.3720980909388333, 0.2987192414227893, 0.2776967150565638, 0.3911832733208952, 0.3940677367376261, 0.047700896361612455, 0.11041619577742134, 0.07243940076680577, 0.036811290213709436, 0.05838311341720126, 0.056535707012663305, 0.0770259784967775, 0.10371623721088108, 0.08132763175113722, 0.25430716605819903, 0.166705128830136, 0.21557957340024392, 0.1562762460394228, 0.22178332310041948, 0.1498495718397771, 0.19466747574082188, 0.23734809876503982, 0.20224288331066198, 0.15348725135216756, 0.2289292482630093, 0.2022810828511883, 0.27403329448712144, 0.2837613449643769, 0.2873167961817179, 0.17245379074690825, 0.21036960115510284, 0.20353369810797906, 0.1522678538904545, 0.1611704660672918, 0.15762274890164385, 0.21036765927547085, 0.15462341970413962, 0.22922677859696627, 0.09725659660481178, 0.20277059781646245, 0.12569192877450386, 0.24472796283087872, 0.18591663054719854, 0.20653562747675946, 0.19732882470195168, 0.22157709192455122, 0.29853198003701986, 0.25553163747183494, 0.4426363873270863, 0.26655856488733853, 0.16462441159630403, 0.17536219211201443, 0.18534422923102234, 0.19107849112909825, 0.17286666867465306, 0.17478759456906812, 0.1739702094569182, 0.1832253620173505, 0.18475358870563507, 0.1195824164687358, 0.4666475852346783, 0.20746194956363573, 0.3721360084097505, 0.19798918976024693, 0.15969221147842105, 0.31568598176312, 0.49413843808858104, 0.3207945045633507, 0.24774238149977978, 0.157128721881441, 0.35083682375295944, 0.22828414381901707, 0.20548715154980746, 0.2009047811802438, 0.1280013856491421, 0.14732565660326913, 0.36992676062996166, 0.1823539730721765, 0.17098427668847416, 0.20145083260106844, 0.19240746323252667, 0.18250817888814286, 0.1992548519268662, 0.1983170641602403, 0.18904436845654748, 0.19691695178576452, 0.06876776670656348, 0.07615102555170228, 0.06978430519608769, 0.05883787503846161, 0.09483539225501914, 0.07190836915436993, 0.08279867708561361, 0.06720034139713849, 0.0648116158908193]}, "mutation_prompt": null}
