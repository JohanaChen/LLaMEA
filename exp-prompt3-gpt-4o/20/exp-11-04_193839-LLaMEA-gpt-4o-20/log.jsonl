{"id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 0, "fitness": 0.20558822253627249, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": null, "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "5ebf6159-5cc3-43f0-8081-6f7599954347", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "1bd663d2-e944-4e9f-ab85-c345bd3efa28", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "d35c0e34-8fed-46e5-bc3c-dfa9924e66f0", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "d9759562-b7c8-414a-9fe7-6485d4b86061", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "7db02bbd-5ccb-4206-a794-2b6b7f72aac8", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "6e925071-761c-4e35-819f-be63721cede4", "solution": "import numpy as np\n\nclass Reinforced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.9  # Adapted inertia weight\n        self.cognitive_coeff = 2.0  # Adapted cognitive coefficient\n        self.social_coeff = 2.0  # Adapted social coefficient\n        self.mutation_factor = 0.9  # Slightly increased mutation factor\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    # Implementing elitism\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "Reinforced_PSO_DE_Optimizer", "description": "A reinforced PSO-DE optimizer integrates adaptive parameters and elitism to enhance convergence and exploration.", "configspace": "", "generation": 6, "fitness": 0.1514771232758349, "feedback": "The algorithm Reinforced_PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.27256850856590176, 0.26101585913300074, 0.24760851599495926, 0.311018214511666, 0.31338041772740954, 0.2930436986640772, 0.3120181766504505, 0.2732524806868206, 0.28143521866079013, 0.0322616272099322, 0.040626223331463596, 0.0439640745569162, 0.04143113221891814, 0.03318112163779152, 0.051654339435197705, 0.04168808930505108, 0.030002072772905786, 0.050005414902699385, 0.06754393017059579, 0.07306693604341707, 0.06546939919566064, 0.07787522645257794, 0.06665762623057603, 0.06751255334333295, 0.0748353213013162, 0.07044577201423341, 0.074665855992754, 0.05061836994175539, 0.05279214678885258, 0.06533442514797605, 0.05068493731430024, 0.05652328341738244, 0.06505876923629716, 0.05614632338355674, 0.06676490347698405, 0.04466050597126381, 0.9694616059362269, 0.9597095952845316, 0.9606570575579657, 0.9467670308160888, 0.9463860970582326, 0.954001392999898, 0.959884506985215, 0.971711454041072, 0.9559435062536031, 0.13103697799924574, 0.10791967961465743, 0.11796401012550872, 0.12106190643538228, 0.13770462250333693, 0.11556195511352929, 0.1382621629030658, 0.12243522680790686, 0.1442207696139396, 0.1801860932045536, 0.16766575513908066, 0.19790875051357415, 0.18645351109245023, 0.2080491413814214, 0.17087080107415364, 0.15336450216648168, 0.16225826051215886, 0.18385497793863437, 0.039589927681926707, 0.04386120948068095, 0.049466385270217295, 0.04825902397564896, 0.08219110220538672, 0.059634427112802535, 0.05967898202338384, 0.04464393093056784, 0.04771595540428175, 0.06965737959411966, 0.019459075031825868, 0.08880512443748612, 0.046725996924405044, 0.026865634913446734, 0.049985042116153955, 0.04903003658374672, 0.02237350602597654, 0.0715793340516051, 9.999999999998899e-05, 9.999999999998899e-05, 0.00021485046146485498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07412203569958709, 0.057655297814674156, 0.05400447050334334, 0.05550239727834427, 0.05509777941522476, 0.05490258892757116, 0.07618963073433138, 0.08033024397390143, 0.08594804302574344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030151205353830313, 0.031387745518648646, 0.031693679020007415, 0.041526014203300265, 0.029341746085617904, 0.03710510015799695, 0.048524066543931266, 0.03832477971806525, 0.03673444699428707, 0.25941705602353404, 0.2540220779025676, 0.27020946925558476, 0.2649312271208264, 0.2725104212414883, 0.2586914685785152, 0.2583680178736639, 0.2571972555848726, 0.2570588791304905, 0.0689341093716388, 0.07255817128421149, 0.06642536314245373, 0.06243880924753342, 0.06446484829222643, 0.07914329836975553, 0.05902621818398146, 0.053720478069038125, 0.05877369871309002, 0.14658143032704518, 0.14046675147603638, 0.13501923476702227, 0.12895098359919122, 0.14135165956550133, 0.13846532348897878, 0.13741476210296966, 0.1462513821662369, 0.12029728021819208, 0.19536924708356895, 0.17889777318779965, 0.18514160905977928, 0.19823137176089345, 0.1796983353570638, 0.16003256332710336, 0.19852078034911524, 0.22078936266041993, 0.2106451748514352, 0.12007289784321673, 0.12844137512889398, 0.134767700878066, 0.13511051347798275, 0.12882911418506815, 0.13483793797519028, 0.15576041260759121, 0.1439268677926615, 0.12820723746398743, 0.1519965350842324, 0.17705894613150253, 0.1658904844472483, 0.15510382925058674, 0.16765928893910276, 0.14523429205214688, 0.1816172938231415, 0.17277342775358084, 0.1987212344925281, 0.15908247010338616, 0.16024480216897286, 0.15593591216382519, 0.15828797090343016, 0.16621568172721835, 0.16124998660378587, 0.15974797207981706, 0.15260398403227537, 0.15189009292139488, 0.13197015597016692, 0.17087550724220468, 0.15683958179888557, 0.18675022709423916, 0.21063640008897, 0.1759925458312449, 0.13928294973326338, 0.1416276992622728, 0.260354053114332, 0.23050702267765077, 0.22169144050709289, 0.14800329688125935, 0.1335776193233008, 0.1619619817649367, 0.16329549341341498, 0.19025875032509865, 0.17875168588051604, 0.19364515912506064, 0.19192551949679038, 0.18448407462634853, 0.17695728877315342, 0.1832596175695539, 0.17342156124666852, 0.19737477816655324, 0.18651017622774424, 0.18624860512126729, 0.1740202276582411, 0.05409524260326504, 0.05839130696795769, 0.05533586840253846, 0.06749391527492932, 0.06648601507320129, 0.05484743137933823, 0.054457455374187, 0.06260184240013111, 0.05575095876566938]}, "mutation_prompt": null}
{"id": "4a99e6d3-4bda-49d3-a2c0-1398ad16619c", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "47573393-8238-42ec-946e-6acae2f6f6fb", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.9  # Increased inertia for exploration\n        self.cognitive_coeff = 1.7  # Increased cognitive coefficient\n        self.social_coeff = 1.3  # Reduced social coefficient for balance\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.population_size, self.dim))  # Updated velocity range\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                adaptive_crossover_prob = self.crossover_prob * (1 - num_evaluations / self.budget)  # Adaptive crossover probability\n                crossover = np.random.rand(self.dim) < adaptive_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "An adaptive hybrid Particle Swarm and Differential Evolution algorithm integrates swarm intelligence with adaptive mutation and crossover strategies for enhanced global optimization.", "configspace": "", "generation": 8, "fitness": 0.16630682138267228, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.18.", "error": "", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.31165485349572297, 0.32063789480583793, 0.3257453888766264, 0.3754362775070079, 0.34890453634592444, 0.38292506413844996, 0.3665755910032481, 0.3494938393208882, 0.34164869690644706, 0.06829461317299956, 0.07404379416440066, 0.051808601372533625, 0.05224716591742673, 0.07077138037359143, 0.03416276844303179, 0.05242216962466317, 0.05792780733549807, 0.08867011417444814, 0.08224007359413732, 0.10865773953269742, 0.08392336022123525, 0.09561505180882302, 0.08745403787578376, 0.08118496375928486, 0.08917176366680346, 0.08574940415198584, 0.0875734367754456, 0.07700151123516319, 0.07055949598169864, 0.07467097572653769, 0.08544834172198057, 0.07982383718926034, 0.0711961988319072, 0.08631664148135443, 0.07826077658622943, 0.07323173224770707, 0.9589417275368479, 0.9439354485200542, 0.9582651176260379, 0.9176994241969284, 0.9343224489105457, 0.9438828738384568, 0.946084936028469, 0.9550146900798162, 0.9448874219782507, 0.16769892993424196, 0.15444426134340317, 0.09094365710743535, 0.16907387755695236, 0.17415384768184217, 0.13208149387670876, 0.11858140746107437, 0.14812679021441677, 0.13444365072865316, 0.2083697037465745, 0.17335514738019808, 0.18120738777960466, 0.1949402727052021, 0.19441284667576508, 0.20624469592323857, 0.1909107904157572, 0.17919715782314638, 0.18980614276686636, 0.10258646875613486, 0.04834520207551518, 0.05940702559808253, 0.06438512282041942, 0.08771233458179084, 0.06624499699017417, 0.1009837821335774, 0.10426391507760291, 0.08943726091941173, 0.09715491346911675, 0.07902021600022668, 0.08861477559272568, 0.09236097567781687, 0.08073294177835577, 0.1171086938418503, 0.09938066214492303, 0.047672414357123105, 0.06306577324261875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08828471420580353, 0.0711035116638925, 0.05385077488023904, 0.06320339425056332, 0.010753885702623811, 0.03803971324814104, 0.07586500940448515, 0.04793919761161636, 0.03783038511216741, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041582604597059425, 0.03463418686110176, 0.02243978552789938, 0.03349826152790725, 0.027465778088784143, 0.04343807609877437, 0.02635134266185546, 0.0448043574434156, 0.04367704027290531, 0.3036525814753839, 0.299135076125553, 0.3205629101104075, 0.28983639198452593, 0.29759541495466135, 0.30782480133233214, 0.3133218610459506, 0.32893836333725857, 0.2962732719635476, 0.0782249596870146, 0.07145555713380547, 0.08021948271921464, 0.06661976128088043, 0.0689273725496472, 0.07577446600786697, 0.07808569906491791, 0.06546510931695682, 0.08290797210523215, 0.13285739903151794, 0.174706898049534, 0.13491812203195985, 0.17264035905412078, 0.17575035470208045, 0.1462935450835775, 0.1711404271039766, 0.13061379276857477, 0.20253613294020067, 0.2067069848834172, 0.21900147291016014, 0.20888148170496645, 0.19729744231412494, 0.22731284320418121, 0.18867160755160428, 0.2314220606782339, 0.23081434238684462, 0.20119637232204524, 0.15726102333235215, 0.14833373012850204, 0.16132042552212422, 0.13093318726825254, 0.12313339959435488, 0.16359056074574985, 0.13973041167268552, 0.1805977629192288, 0.1368864795333038, 0.16605302851464077, 0.16325964420411887, 0.1853704116567032, 0.18371245654244117, 0.1738368600118705, 0.17256247432069827, 0.15463779515690057, 0.1775196263620945, 0.16835082249102984, 0.17063306537056955, 0.17059843207930703, 0.17296332185171126, 0.16649505000238696, 0.17281857098336972, 0.16694227272402296, 0.16847514664052254, 0.1672123749270923, 0.16981828842818536, 0.15474455694822242, 0.1491478602958869, 0.1501789353877715, 0.32306950216646124, 0.1659541045318641, 0.18012052255255262, 0.17876621293863426, 0.1388321098094486, 0.31434211348348295, 0.2370489661618208, 0.18909141143696706, 0.15349589974968114, 0.2680659545548062, 0.20585231362407064, 0.1770158348435834, 0.1893396646810691, 0.15746304231585306, 0.19622955913548323, 0.18987252211465688, 0.17964637041595521, 0.1782177040388051, 0.17860841067317068, 0.1652974634170965, 0.1710159622263263, 0.1718323896004651, 0.17642867755409586, 0.20707012363707678, 0.07514752029051308, 0.06260460966839365, 0.08580106822930444, 0.05911931550173244, 0.06478431495876413, 0.059622686276747494, 0.06980130485117098, 0.0639529890437518, 0.06654656422105598]}, "mutation_prompt": null}
{"id": "aaac69fa-a59b-4fb1-9736-437621e8f315", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "1b84379e-498e-4787-8262-4d4cab36a459", "solution": "import numpy as np\n\nclass Adaptive_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.9  # Adjusted initial inertia weight\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.weight_decay = 0.99  # New: adaptive decay factor\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            self.inertia_weight *= self.weight_decay  # New: dynamically adjust inertia\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "Adaptive_PSO_DE_Optimizer", "description": "An adaptive hybrid algorithm combining PSO and DE, using dynamic parameter adjustment to enhance exploration and exploitation balance.", "configspace": "", "generation": 10, "fitness": 0.19415870779265842, "feedback": "The algorithm Adaptive_PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.4768467524868031, 0.47629870501930505, 0.4402297434706888, 0.4684415350158495, 0.4742642207762334, 0.4998971025672875, 0.4696229625381211, 0.40986412195048116, 0.473702582100889, 0.08479064123768099, 0.10617442090908402, 0.0815469913675122, 0.08206064209653852, 0.147703612101048, 0.06616551530483339, 0.059200150441577004, 0.14221341827321743, 0.08127210378536875, 0.0923416383484571, 0.08209049750278175, 0.08289544751269373, 0.07831918376757929, 0.07266194459751751, 0.12791973415160118, 0.09232514139199832, 0.09522934518428405, 0.10942237027506796, 0.07176190673883143, 0.08312140426164294, 0.0877069986966511, 0.09398190889129887, 0.07194058312516505, 0.10271591744785635, 0.08638464774799026, 0.08120217497547022, 0.0968889120047699, 0.9690967511991407, 0.9511370631217878, 0.9588459358125848, 0.9051553522977731, 0.9335373313378731, 0.9439628916461431, 0.9553549868794056, 0.9585826674162509, 0.9459197970359448, 0.2772284764168025, 0.23407211500916614, 0.1186662591908626, 0.15140481170940878, 0.1381005491934839, 0.2415905987363538, 0.14766765430776707, 0.14264352758798937, 0.15069133191917972, 0.1968745524261346, 0.20432822791440208, 0.18714824970468502, 0.20433351696276414, 0.22579697806093102, 0.18300324131629375, 0.20027639527620555, 0.19873166476537618, 0.22656734442745596, 0.13101608841169365, 0.06784472435053357, 0.08184696812929182, 0.09071692820157218, 0.14386601198176652, 0.07723541581070237, 0.11397356281947413, 0.17116428120991856, 0.1336898468600668, 0.12710040397676925, 0.1293727347840231, 0.11326025868256306, 0.12412229089603244, 0.08285574981470434, 0.11678943475665104, 0.1429573604592108, 0.0745422738902154, 0.14667289402038153, 0.0004750119121352814, 0.002561298217395369, 9.999999999998899e-05, 0.0026556014164589303, 0.0013028452768003573, 0.010867980552439427, 0.016644076353284243, 0.0055106949166759955, 9.999999999998899e-05, 0.08340658980984195, 0.08816923004609378, 0.09051072719117581, 0.07996260158878976, 0.09219169492225066, 0.07060325417268765, 0.07462143162839185, 0.0895147346270807, 0.09240834630631889, 9.999999999998899e-05, 9.999999999998899e-05, 0.016383896606070758, 0.030084039014220965, 0.025446440164609285, 0.019419217562761104, 0.04178684595055837, 0.026193680468869385, 0.02619221268379801, 0.045867655823100706, 0.030358524309431978, 0.05081210108889611, 0.04319278028468432, 0.04006563131984675, 0.03478012418983856, 0.055840375170835954, 0.059977917899251, 0.06245469183154384, 0.365172108869788, 0.3903396967790157, 0.38925061910341274, 0.41271675278830233, 0.38109273321286474, 0.30152003573567276, 0.3972820752509735, 0.36796447842263547, 0.39105979005372316, 0.05978580949070056, 0.08146565878494638, 0.07261514943356562, 0.08743078275393967, 0.11883846399324483, 0.10087964688926276, 0.0845483174954661, 0.07083569538943046, 0.07368729167853794, 0.15529495529369874, 0.15760151220465246, 0.17113807766981848, 0.21038833613324182, 0.194950218990949, 0.18944084037568676, 0.1558305894029247, 0.158436274554569, 0.1455458514233584, 0.21032928692704067, 0.21600324222523526, 0.26890288766249437, 0.1850685341529642, 0.22180211080478662, 0.24606781836089442, 0.2987708278760164, 0.2767346964402193, 0.2799534320388337, 0.19900774733666082, 0.15669080770069055, 0.2320104155449172, 0.14241334385539173, 0.2309734446729309, 0.18048724883064515, 0.18346376438459044, 0.22334444707124457, 0.15654480042942198, 0.23676445875502017, 0.16996252346251695, 0.17209248628932838, 0.18275032217072074, 0.1806502486008088, 0.17198772296369047, 0.18623359598809053, 0.20480050825362484, 0.19883151538699217, 0.18148592057865665, 0.18631669464795364, 0.20193740614046385, 0.2009274959777121, 0.27316442227022386, 0.17912558793839084, 0.1806164380398685, 0.1885574794342052, 0.20119796974492843, 0.3604048324409238, 0.19903366806949518, 0.15688499173727355, 0.6102314609685361, 0.19138793892701633, 0.17896175702792438, 0.13826443587009474, 0.15989763213427888, 0.19721826029852163, 0.2809600193470885, 0.20222996676251592, 0.46112628935492317, 0.28390585908401256, 0.2340730187613661, 0.20136472519219561, 0.20105927235181997, 0.1914686535109006, 0.1980620863590996, 0.18592753663052075, 0.21005695055939233, 0.19351933158012402, 0.18260805485544807, 0.1713552139470892, 0.17551958001186052, 0.17903298333081752, 0.1752887764153851, 0.1817256882936158, 0.07130860857271015, 0.06536772408539182, 0.08151321000746448, 0.06570331687410802, 0.07400470539555604, 0.06242120036751353, 0.09517171032030569, 0.0827406845766524, 0.06778459196166986]}, "mutation_prompt": null}
{"id": "6d664ee3-027b-43b1-83ca-002392a1e31f", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "ec9dbc9f-32de-4f1b-a4c4-9aca5e22e411", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "50e83728-f6ad-4766-a37f-ad9f197f7dc3", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "0e8282f8-27ac-43ba-bd1e-1b06ea50f0b6", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "07a79706-4cf6-44ef-8fb3-8a467a85aaed", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.9  # Adaptive start\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.decay_rate = 0.99  # New adaptive parameter\n        \n    def __call__(self, func):\n        num_evaluations = 0\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            self.inertia_weight *= self.decay_rate  # Adaptive inertia\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "An enhanced PSO-DE Hybrid introduces adaptive parameters for improved exploration-exploitation balance in global optimization.", "configspace": "", "generation": 15, "fitness": 0.19730875199543474, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.48142899843668197, 0.4804870730837594, 0.461833739929265, 0.46081572733418075, 0.4687001622011566, 0.47310939731531887, 0.472064288352985, 0.4320324064868625, 0.46889583261271495, 0.06853341079340514, 0.05847818419269901, 0.0905705072183649, 0.09744910976064025, 0.14282538617598128, 0.06616551530483339, 0.07763559678995657, 0.07027725046175815, 0.05941765086746964, 0.09319813160957513, 0.08579122437660569, 0.08794890495489638, 0.0868605783771571, 0.11554345650356845, 0.11405244341421605, 0.08696681989541188, 0.09383379872808506, 0.11353695913072948, 0.08551598011173411, 0.0895343980078529, 0.08016023628832192, 0.0896965151301965, 0.07713421427533484, 0.09772827091986058, 0.0927475877291396, 0.0696176298100647, 0.09516322471803451, 0.9690956142352142, 0.951122002850596, 0.9588325962843796, 0.9050951569067345, 0.93341596513795, 0.9439427264755431, 0.9553409765973438, 0.9585745737326175, 0.9457658395831713, 0.2608546197101319, 0.2419226772445977, 0.11700165295097453, 0.23764947055134789, 0.1807146709577211, 0.27689655192268503, 0.14776396597484254, 0.14268593817294095, 0.1506683988655525, 0.1954051204791588, 0.18899341652420576, 0.235184180716547, 0.20378090883568634, 0.22690515436937175, 0.191539233768253, 0.20559593198825166, 0.19876892238416888, 0.3577834775652219, 0.1336289367529362, 0.08900983837553034, 0.07537805587078361, 0.09207980759468448, 0.1327025680449524, 0.07030827587074506, 0.12286087870139906, 0.1176986916158852, 0.11191712864530512, 0.14006521186013599, 0.14487100597780644, 0.12178465091033364, 0.12889348961603575, 0.1406492700210068, 0.11623916183393956, 0.1469926064203121, 0.0745422738902154, 0.13695951038653187, 0.0004750119121352814, 0.002561298217395369, 9.999999999998899e-05, 0.0026556014164589303, 0.0013028452768003573, 0.004177253186376961, 0.003161421527094199, 0.0055106949166759955, 9.999999999998899e-05, 0.07656885488622034, 0.08817268668021139, 0.07627292717153455, 0.07373012648020472, 0.09385174315883271, 0.07060325417268765, 0.07219666565397997, 0.0895147346270807, 0.0953246665948152, 9.999999999998899e-05, 0.011745243303782682, 0.015747165356257753, 0.03031851357251092, 0.017560657350189968, 0.028830780412989587, 0.03801951910023271, 0.025864887904397116, 0.03388504333606035, 0.045867655823100706, 0.04065058586152648, 0.08842123292010107, 0.04319278028468432, 0.03916448026837638, 0.03478012418983856, 0.10389573246455297, 0.05891822017153425, 0.06171549955834088, 0.3850299387225433, 0.3684766140895087, 0.36848036606617673, 0.3965297055790977, 0.3872914423783099, 0.30133930158500466, 0.3727999077319619, 0.3754112276042997, 0.40151574257309597, 0.05959860630047331, 0.07547150199468511, 0.0852171426387629, 0.10293146284514443, 0.09301933054583877, 0.12985120436975872, 0.0825060671006016, 0.07426611414253126, 0.08748925717365241, 0.12899395473848996, 0.16219175276418096, 0.1689953555998902, 0.21058725412848, 0.19983930643672643, 0.16420646355361335, 0.16001856973173123, 0.17683079890423725, 0.1724763441948367, 0.21507913719544536, 0.2897513648162413, 0.2876496582251582, 0.2405141388554145, 0.2600373503926793, 0.2840990388550747, 0.28452328503848867, 0.28345957787683096, 0.27210231232722404, 0.21098356642283167, 0.18085192713692377, 0.1678550707703227, 0.134876168896642, 0.1623596603167522, 0.14639176973740664, 0.24546463413696828, 0.22162029359233326, 0.23578764076855285, 0.21998215686804767, 0.1563943116608716, 0.19471940971504442, 0.18325982890232795, 0.19461766681826853, 0.18315146404098226, 0.1906590494960494, 0.20194945281588184, 0.17800292359340897, 0.18984500071562393, 0.17017740705697215, 0.1868760575454893, 0.1815021312334335, 0.16391830230263094, 0.18456247415023708, 0.17682890005490004, 0.20226678523170727, 0.18522997051168555, 0.4692192267390819, 0.2013800595114279, 0.1568329354054404, 0.6406680388256927, 0.19148642910657077, 0.17954181945534853, 0.1383534350086607, 0.1550103785822835, 0.1942556416040616, 0.3185021962283081, 0.20437475128240945, 0.5146166358674402, 0.2338570545370342, 0.3064224218458921, 0.20237896395521648, 0.20105661988351442, 0.19146427186558357, 0.2310831263366483, 0.17473547240170517, 0.20228430050501411, 0.1939370324195524, 0.1834768731764641, 0.16964970566513404, 0.1789419972933689, 0.18048227290184748, 0.19573980372568445, 0.1862178209977916, 0.07581223216340727, 0.05981257013346786, 0.07239519716627307, 0.06103653539267728, 0.0758592773188097, 0.07275913221830488, 0.07532901655987667, 0.0687901615145623, 0.06362277562131025]}, "mutation_prompt": null}
{"id": "20e8bb39-4d58-422f-882a-155027ef870f", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "6deb409f-b9b3-45b2-8c27-a0f1ada38b88", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.initial_inertia_weight = 0.9\n        self.final_inertia_weight = 0.4\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 2.0\n        self.mutation_factor_min = 0.5\n        self.mutation_factor_max = 0.9\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            inertia_weight = (self.final_inertia_weight + \n                              (self.initial_inertia_weight - self.final_inertia_weight) *\n                              (self.budget - num_evaluations) / self.budget)\n            mutation_factor = (self.mutation_factor_max - self.mutation_factor_min) * np.random.rand() + self.mutation_factor_min\n            \n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Adaptive PSO-DE algorithm with dynamic parameter tuning for enhanced exploration and exploitation balance.", "configspace": "", "generation": 17, "fitness": 0.18353151777179175, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.37042828929437066, 0.3673135340296054, 0.3480762925786116, 0.3758164013076547, 0.41571723480142087, 0.4165013824773671, 0.3927600998730342, 0.35539551659966606, 0.36482643654880775, 0.10857021005434686, 0.09977236220499286, 0.11073805060005382, 0.10194066531934276, 0.06994120002162107, 0.10810822808754383, 0.09543737718698198, 0.0858462272104129, 0.11441735968064459, 0.1000775877753396, 0.08686355603100981, 0.07319104739710947, 0.08415603019981188, 0.07224588230511908, 0.08691972521990232, 0.0774545806525957, 0.08939537310277901, 0.0826355591595953, 0.06448231359683343, 0.06575450334317234, 0.07818946601826393, 0.06813475016334247, 0.061955612080410005, 0.08297024329818636, 0.08627171527320354, 0.06755874757662061, 0.06548925810629846, 0.969294325478036, 0.9605042503768746, 0.9720932678769318, 0.9520168633321617, 0.9610230182393926, 0.9323556901360482, 0.9595845546799904, 0.9602662074575486, 0.9578438970450868, 0.16170274899476622, 0.17823355670572927, 0.14811315309426754, 0.16301399722488386, 0.15210072882721581, 0.17455594087484438, 0.16266272360210043, 0.1414527710140484, 0.15752703979221006, 0.23474504731340884, 0.20950532945209754, 0.2564921966006345, 0.24591329973545573, 0.22167509992174184, 0.23860086315936746, 0.22105413665744778, 0.25671050110420424, 0.2373466339938476, 0.08938715965760424, 0.08970915503814925, 0.10594879592500817, 0.10279219626772096, 0.08063278997250778, 0.09147929999064963, 0.10261128371379491, 0.087876882857988, 0.1518597033770156, 0.09532415723225562, 0.10755972864677843, 0.08255000457912443, 0.12165934295390912, 0.0702585408903913, 0.09729780250148612, 0.07808249408154677, 0.05580098276372192, 0.0854111569275372, 0.00929844779036737, 0.022693005421989043, 0.013440250885849991, 0.033141899424309895, 0.021393799740797692, 0.0011941208852689345, 0.015613602460739506, 0.021851228927429633, 0.019850059824024546, 0.10124699685835459, 0.08945598277665412, 0.13585817028691927, 0.11513969301251914, 0.08201357159002398, 0.12380907261584251, 0.12829742015715206, 0.11913246532390709, 0.1259979788980936, 9.999999999998899e-05, 0.0014136472864126892, 0.00205706271620798, 0.0001954308137895877, 0.009351450620353363, 9.999999999998899e-05, 0.0024516607073276075, 0.003274183511345785, 9.999999999998899e-05, 0.054026736216811866, 0.06475217988026472, 0.05491071821215776, 0.07589234744942897, 0.06834028702588146, 0.08319858663039881, 0.07260193238475054, 0.0872201460440103, 0.07381409990815269, 0.3297494193924807, 0.3376555315250056, 0.32998217278763364, 0.3303428009233319, 0.3358087930200504, 0.33009778900912035, 0.35750647285230375, 0.3193089489246501, 0.3172610084350891, 0.07122946720223022, 0.08799131106957025, 0.07138318530015875, 0.06688297958839373, 0.07586354164432652, 0.0890387909753535, 0.07894972983408366, 0.077307433358492, 0.08355054889439784, 0.1359228107299688, 0.18248905745616517, 0.15352980093145574, 0.16616097886386305, 0.1664401398350961, 0.1297129245583848, 0.13916726722622075, 0.1594446749558841, 0.15465089631947737, 0.22228793441920325, 0.23725272225243565, 0.2488834418751461, 0.2283929806690156, 0.2169613683413456, 0.22271540724418315, 0.2453747057767819, 0.2323443639909023, 0.23937847043091764, 0.154193892904813, 0.16301777481567026, 0.17931367929464925, 0.14183390481685, 0.1593219500201758, 0.17348304004964432, 0.1668214346420862, 0.21110737480516106, 0.16131533340120108, 0.17011703939177347, 0.16460569952942894, 0.17133531212352426, 0.17438737016812667, 0.1508812491453656, 0.1894385369646957, 0.18645801404069373, 0.17827780517423908, 0.18160875027828383, 0.1709263858678498, 0.23039445306773665, 0.1828403769244975, 0.1715691663700516, 0.170184444522557, 0.17539160548019406, 0.18266936972674785, 0.15772109129437561, 0.17060652204291438, 0.2280643414086282, 0.22583537483232874, 0.25126699840770095, 0.5190846759268863, 0.18256536523401212, 0.15401236820314446, 0.18217762682117578, 0.20119939979258683, 0.3716525200133156, 0.2760330628106623, 0.22736312059659936, 0.1597012034538533, 0.17085990871412482, 0.1904677843660777, 0.1500817207060925, 0.1974341198774595, 0.19417038640194295, 0.19168444535612417, 0.1679967875937045, 0.194743127317894, 0.1817156139118381, 0.19013765080861522, 0.19158139302149846, 0.19862145994381775, 0.18593055061557529, 0.20058863322296527, 0.19452030612899385, 0.06798641727524568, 0.06844495472136225, 0.0656373736981184, 0.06154246215168291, 0.0679750872838234, 0.058572251164925926, 0.06015897965209516, 0.0679551256133154, 0.07299341865126552]}, "mutation_prompt": null}
{"id": "18cb5a29-ee96-4a72-9859-81a2ed0542a8", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "243d4f13-7d7f-48c8-8749-24b533295352", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "b94db333-9713-4a6b-85f8-8b3dbd13ce8e", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "af9dfa06-2902-416c-a504-32eeb4fe4cfa", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "f1755fd3-6a1f-4f3e-a15e-28bf9034c54d", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "c0c9cb6c-7fb1-4cf0-aba5-5b97413ddc12", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "dfbe7a3f-cd1e-4612-9e4e-2c8143ee2796", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "d62e27fa-855f-4568-b97e-8afba7899c4d", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "9b90cf08-85f7-48d6-a34d-76f348e389b6", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.9  # Increased to encourage exploration\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        num_evaluations = 0\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        de_population = np.copy(positions)\n\n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n\n                if num_evaluations >= self.budget:\n                    break\n\n            if num_evaluations <= self.budget * 0.7:  # Adaptive parameter tuning based on evaluation progression\n                self.inertia_weight = max(0.4, self.inertia_weight - 0.005)\n                self.mutation_factor = min(1.2, self.mutation_factor + 0.005)\n\n            # Local search phase after 80% of budget is used\n            if num_evaluations >= self.budget * 0.8:\n                for i in range(self.population_size):\n                    local_search_point = positions[i] + np.random.uniform(-0.1, 0.1, self.dim)\n                    local_search_point = np.clip(local_search_point, self.lower_bound, self.upper_bound)\n                    local_search_score = func(local_search_point)\n                    num_evaluations += 1\n                    if local_search_score < personal_best_scores[i]:\n                        personal_best_scores[i] = local_search_score\n                        personal_best_positions[i] = local_search_point\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "An enhanced hybrid PSO-DE optimizer improves convergence by adaptive parameter tuning and a local search phase.", "configspace": "", "generation": 26, "fitness": 0.18230059503501228, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.39549687091145935, 0.3698882600872695, 0.36352658970446905, 0.40379986781530974, 0.399658218369928, 0.3837757705157484, 0.41371019732554837, 0.3716619892965296, 0.41278970827696104, 0.054376488571312054, 0.05880420649772655, 0.04537302253964903, 0.03827550212372477, 0.06636063320872254, 0.04729548891937918, 0.05542312702664132, 0.06992850603993916, 0.037387062403240856, 0.10902210042099125, 0.1049846781594137, 0.08189036230178681, 0.08653970470791905, 0.11033892392858746, 0.1100300441178309, 0.06630409906905477, 0.09585144522267419, 0.08423067381320981, 0.08087022836382751, 0.07224733305460462, 0.0566466184224671, 0.07820738493672019, 0.07826056350993915, 0.10879019877357299, 0.09058020049376359, 0.07371478417403943, 0.08759054123330445, 0.9690968504825532, 0.9511443660668166, 0.9588544862033632, 0.9051833127525467, 0.9336208252592217, 0.9439796430161639, 0.9553613307634993, 0.9585798997580754, 0.9460398238096712, 0.2362273153969492, 0.1591830230762451, 0.11888933526740697, 0.14070608306646604, 0.13115992519113773, 0.1907073570296478, 0.1120823016864484, 0.14188903473528358, 0.11602481589531799, 0.16486537246163768, 0.1707203507217655, 0.2034315664839883, 0.1916973383838736, 0.19368678147538554, 0.18310146041503617, 0.3854262354882947, 0.19472749479694196, 0.20772478762077762, 0.12068695065245516, 0.08142353414843251, 0.08077737846597588, 0.08292449479165043, 0.10913907692424929, 0.07870908644509367, 0.10475277196963395, 0.10205857024934284, 0.10842330399365252, 0.11039780477800543, 0.13525030020840334, 0.08736442339954409, 0.13570260918952115, 0.09150914542365862, 0.09795978270656835, 0.11483930519492902, 0.06489353374460427, 0.16240837357584226, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00610261605512219, 0.006599838761871202, 9.999999999998899e-05, 0.06246972522964156, 0.10722609332719257, 0.0665901296496515, 0.04074472184284983, 0.050014428507502484, 0.049396759591816775, 0.08148615318361807, 0.05781488623489672, 0.05989852412650487, 9.999999999998899e-05, 0.008604206983358509, 0.02128422549779807, 0.015211930487347147, 0.009415482191108326, 0.013940419694556505, 0.014193781447688125, 0.016137580355391923, 0.010216015383257226, 0.019309887642243617, 0.024029502449207207, 0.02805992996733153, 0.06948751549293064, 0.04110438577214226, 0.03213038221314235, 0.041266827190808875, 0.08580368387090365, 0.060292734280638416, 0.3404193864110191, 0.34271933808657473, 0.335182880501974, 0.3717091965038518, 0.3303797468113815, 0.25065038400391737, 0.35005031456965874, 0.3393744786730327, 0.3734767301383368, 0.0656663901559621, 0.07621342594438607, 0.06743406932004692, 0.08096268699275444, 0.07414730232769995, 0.07061882702951894, 0.07328988459477626, 0.09814309624813267, 0.11077564757907199, 0.159234783840994, 0.1987672824377844, 0.16730458098041312, 0.18881182301733312, 0.1955580470090098, 0.12601956087252708, 0.2851286875436875, 0.16144209739223003, 0.18572353107159612, 0.24519232238458255, 0.22014201516640886, 0.23201359001676858, 0.21480649677433272, 0.19518880496175373, 0.2562677713536837, 0.2617921928151874, 0.2742314113552997, 0.263838986847615, 0.18891140146269014, 0.1770178300838947, 0.1817114445838235, 0.1309102060568308, 0.16172117637257855, 0.15879277287816662, 0.1842543266956448, 0.19783593794680254, 0.17684281160905813, 0.23676445875502017, 0.17008258909014273, 0.1677059044476753, 0.1760857457699101, 0.20727135719953882, 0.1734711672073489, 0.19970552250575846, 0.19089127316798982, 0.19173065032523395, 0.16571344449976733, 0.18385345882890414, 0.1735056244150972, 0.19839128353225055, 0.18594535699347525, 0.20620201795513837, 0.2049147628668363, 0.1854363372505351, 0.17032179837147543, 0.27933209719838736, 0.15694902593394489, 0.15599813011998886, 0.5712363187719215, 0.20484993454046152, 0.18068859928047099, 0.13504826783841362, 0.1542206577106202, 0.1942936651619751, 0.27170725755654346, 0.1954342062349924, 0.44668247579022047, 0.19866458144419308, 0.2142715175683929, 0.1381131402190986, 0.20058695158036244, 0.2998945890326439, 0.19230976288222656, 0.19230987362864405, 0.18604258944098417, 0.1978329191777327, 0.17556452185667926, 0.18846294858556523, 0.1848575952874275, 0.18064100668792782, 0.19077588187503203, 0.1803802579790157, 0.06632424914163493, 0.06760818252448553, 0.07807385965538849, 0.0758079564335914, 0.07019498394091894, 0.07448067894945376, 0.10426604794873606, 0.07153843134208326, 0.07622160670374101]}, "mutation_prompt": null}
{"id": "b9e746c9-bf08-43cf-adb0-97edc7a8f2e2", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "1abc56b0-6a60-465c-b644-2a07bfcad996", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "0737067a-180c-49f6-ae76-c52a27f8084a", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "87ab8c22-6ff2-4847-910e-ac2fadd6e6b1", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "51d42032-53a4-4100-ab3c-2a4f368b67f8", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.9  # Changed from 0.7 to 0.9\n        self.cognitive_coeff = 1.0  # Changed from 1.5 to 1.0\n        self.social_coeff = 2.0  # Changed from 1.5 to 2.0\n        self.mutation_factor = 0.9  # Changed from 0.8 to 0.9\n        self.crossover_prob = 0.8  # Changed from 0.9 to 0.8\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution algorithm enhanced with adaptive parameters for improved convergence and diversity control.", "configspace": "", "generation": 31, "fitness": 0.1535154331131972, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.27824272519045146, 0.29988952103290556, 0.28266153836070385, 0.3132361465112665, 0.32426344159368736, 0.30246026559672756, 0.2797312872768525, 0.31621813376623475, 0.2878454927936226, 0.04689562655556856, 0.0597598826543001, 0.05441951627175856, 0.023580318172448655, 0.03542853776372523, 0.034858257774962875, 0.05916944321924622, 0.040470365195544256, 0.052902063611690364, 0.06774690807246897, 0.07932190702290842, 0.06532081365103315, 0.07544225917578529, 0.06582369575785596, 0.07854352562405853, 0.07431137552401412, 0.07019691796348237, 0.06633327037130055, 0.075586086922796, 0.050440852750250675, 0.05420253990860879, 0.06312575260682296, 0.0705313203417205, 0.06380495429451205, 0.07721386643174755, 0.06545550768846464, 0.060777405858560285, 0.9693615271028407, 0.9593521391217606, 0.9606671095614838, 0.9206746765042714, 0.9464405957558161, 0.945172367472337, 0.9599289583962233, 0.9717752645415912, 0.9558833952891821, 0.1436935213764946, 0.1081321905868401, 0.09386179179242171, 0.12103497258311113, 0.1359135838216362, 0.12418278879508382, 0.1187596079578177, 0.1237615011150327, 0.11614889979846543, 0.16813526135763845, 0.17035934249027396, 0.15555518386119382, 0.20568514727558473, 0.16591157373154586, 0.1743338282913668, 0.1525639994852498, 0.15082756181021173, 0.16790206706339472, 0.05878083430557979, 0.048951534727333046, 0.05593747702815832, 0.05795580920981247, 0.05629286365023911, 0.0772954272307439, 0.0862918683450693, 0.08131378321659144, 0.04505864923136338, 0.05313455533807809, 0.06864767561629737, 0.06410305980109965, 0.05425717809687536, 0.02666956636442952, 0.05661461098800902, 0.04885285269295114, 0.03223889828987814, 0.06218772917936999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053746279698905, 0.07279962133752738, 0.0662007980862156, 0.04031402316293864, 0.028747485771239867, 0.05521760560793321, 0.06372326229049341, 0.035339042956548106, 0.04459106688400738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02634874602086401, 0.028453583756460787, 0.020764649213086517, 0.02871679695191265, 0.029809257797423605, 0.027231658814014348, 0.03359530850768677, 0.05238093772640717, 0.03464054337362632, 0.271190753961997, 0.24230726748036235, 0.2941696292558741, 0.2655022970490607, 0.2720281618803482, 0.2943218444175898, 0.3030094861997432, 0.2756225454812188, 0.2619329296986397, 0.06278018023997178, 0.06005206539672325, 0.07379427723377141, 0.07024685798506469, 0.049789727018467955, 0.07526482201349938, 0.06657236948036194, 0.06566529354214545, 0.06758498093786969, 0.14661714145394544, 0.15190567964492763, 0.1391316194699943, 0.16920055707093706, 0.17487258919684723, 0.12227789703879421, 0.17858207709816998, 0.13123853258196017, 0.12454342919381034, 0.17982737761833634, 0.20183656484796175, 0.20844861056162434, 0.2169470898144803, 0.17869124086506893, 0.18425766664842358, 0.19123978420944865, 0.21135722864792084, 0.18961315570855153, 0.13902895108613667, 0.14644930797930833, 0.1498442969797965, 0.11749094809893157, 0.14971839761592598, 0.1363340462641539, 0.1529048455889217, 0.14267587372542, 0.12761685460358696, 0.16470461165292438, 0.17049544943571293, 0.1785282648757267, 0.16750937678523714, 0.15713133497403198, 0.1573393061490247, 0.16626696136913965, 0.16533241004586818, 0.15175668070511672, 0.1603759804227306, 0.16368344204984164, 0.1637777966156284, 0.16123461821501495, 0.15729052893967932, 0.16381625804306854, 0.1646632738504359, 0.15589673348805266, 0.15556439936972688, 0.17084649943787522, 0.17036858626765006, 0.16029461326791605, 0.22547150270949956, 0.20722560394040468, 0.17100843277863131, 0.15828167951384398, 0.19145247038214286, 0.34996006618569697, 0.22272352409762275, 0.18522320642900802, 0.14304958632206577, 0.13514714198261046, 0.179486891563732, 0.12931602689888655, 0.17595041809189282, 0.20498347766681135, 0.15775227819011906, 0.1826858059273574, 0.18191777065283377, 0.19360307460203507, 0.18215148091250666, 0.18066839008119928, 0.18356377995316286, 0.17746163064654252, 0.18192823823257176, 0.17457244882718492, 0.06193461378795273, 0.053532656337928364, 0.05774081217118632, 0.06912167105384837, 0.059112291198393674, 0.05243323961019741, 0.07118527775968908, 0.06060393739696612, 0.05548432618345156]}, "mutation_prompt": null}
{"id": "5f9b7c6c-2103-4a0b-adc8-eaeb6c4f25aa", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "095f59bd-1fe4-4118-b6df-8f59ba1c30ed", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "6d075683-60f7-4c08-aabf-47fbf4bc1d36", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "e961b581-e7b8-4260-bcec-7e5153c4e60d", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "571c3fef-811e-47f4-88ad-c3a8e67a183d", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "d5054d01-1f4b-49f2-a55e-04940cd14ed6", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "3cb072d8-8d1c-4de4-82e5-1653eddb5e86", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 2.0\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.elitism_count = 2\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            adapt_inertia = self.inertia_weight - num_evaluations / self.budget * 0.5\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (adapt_inertia * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            scores = np.array([func(ind) for ind in de_population])\n            num_evaluations += self.population_size\n            elite_indices = scores.argsort()[:self.elitism_count]\n            for i in range(self.population_size):\n                if i not in elite_indices:\n                    idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < self.crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < scores[i]:\n                        de_population[i] = trial_vector\n                        scores[i] = trial_score\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "An enhanced hybrid Particle Swarm and Differential Evolution algorithm incorporates adaptive parameters and elitism for improved convergence and exploration balance.", "configspace": "", "generation": 38, "fitness": 0.1818464522807517, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.19.", "error": "", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.40029131658089734, 0.37278276417208756, 0.40616594569878794, 0.39958536098415576, 0.40319069917682593, 0.3130178705933103, 0.4025165719732867, 0.4101697055735649, 0.3392430614780144, 0.06140268946119032, 0.07037604939649134, 0.08379887330079527, 0.0830604768976071, 0.06721641095539088, 0.06727629713403838, 0.0792312790922195, 0.09045879905413112, 0.08026401464457633, 0.07218312892689771, 0.12716774157294497, 0.1011535555943256, 0.08910897960484876, 0.08803107907540253, 0.06199712903736254, 0.07551462265886644, 0.08698172056380427, 0.06181136041810098, 0.07096215475068235, 0.05987827033718918, 0.0779889154561797, 0.0696619370308863, 0.05979108168208025, 0.08192475891554474, 0.08481946815703667, 0.0764024494044333, 0.08987644711058362, 0.9698681315487876, 0.960207639194952, 0.9716069139201174, 0.9093253225363422, 0.9332337306545725, 0.9570387473816981, 0.9605973264456399, 0.9720409300995617, 0.9457433356929195, 0.23326410601383962, 0.1174149061858123, 0.16804723872051452, 0.14578285064897534, 0.13454898371669133, 0.1948300879841367, 0.12470155854434983, 0.13950816800379306, 0.17859298699368442, 0.19899140777871593, 0.18593338744795673, 0.18017790760519015, 0.22592819788065954, 0.22079045074849835, 0.20853234336851578, 0.1865847795122838, 0.17141500849200697, 0.19352705699784523, 0.11533587308507376, 0.07384070458243752, 0.10024673505660198, 0.07958822847721825, 0.10208035525137493, 0.06889652733519902, 0.0899984707763608, 0.12046660118621932, 0.10040820841034526, 0.11029730351737943, 0.10124408014430719, 0.10939791433612367, 0.10470094383755935, 0.09536450170208643, 0.09749275314025485, 0.08790332404659817, 0.030654938067277593, 0.07970337189890564, 0.0004980587989114049, 0.0019883384858063735, 0.0007534811023921506, 0.0013287065296091471, 0.008810485622583242, 0.014341819874811312, 9.999999999998899e-05, 0.003013036493291321, 0.0008893630574330347, 0.062358518689128895, 0.10840247823384375, 0.05832904196177657, 0.08201766577395397, 0.09138146650980694, 0.07384687672663659, 0.09728987345430651, 0.08446400874341997, 0.09129282661027915, 9.999999999998899e-05, 0.008319656819749777, 0.008214295656151283, 0.01334264913023886, 0.013505566477114539, 0.023757600960157443, 0.021043928567197834, 0.020626140337441257, 0.01721871286484189, 0.08308386351771402, 0.03865267646531434, 0.08056686969736693, 0.0388267309372603, 0.056036797882422995, 0.0749316459255297, 0.05954502596003841, 0.06512567649524825, 0.051361036923411874, 0.32240911122706806, 0.37471849290051173, 0.3559358470961985, 0.3494405521713745, 0.3212555342608753, 0.3173306494846265, 0.3571071782560804, 0.33242419301576787, 0.35060278896648955, 0.0691990946358273, 0.07321093171590565, 0.06417366592152807, 0.08097791764077356, 0.06903721673017993, 0.09669592019530104, 0.09998657426631785, 0.06461605227901313, 0.07633649331590309, 0.13794519731197796, 0.18270695910769852, 0.1628675146203481, 0.2171318986714711, 0.21153155587048222, 0.17571807888771307, 0.15585863554293877, 0.15191147560882057, 0.1991558459312326, 0.2206892666695588, 0.1975769768412834, 0.22733549945270193, 0.24276398323418558, 0.19688220452456906, 0.1821675339250145, 0.23135984261286457, 0.25683105560378494, 0.20404907989323418, 0.15180470637088506, 0.13975956102941522, 0.14525190548722844, 0.13640148234522353, 0.16013924446271832, 0.15795797897561625, 0.1793923343176762, 0.18373465277115797, 0.1901505451910419, 0.19481551691854815, 0.17059737752148407, 0.1715048697807342, 0.17611302266663553, 0.16101240693087526, 0.16314088147005368, 0.17586382320273442, 0.19137720075773912, 0.16956068718841288, 0.18140844844969461, 0.16944426575993532, 0.17860882863571592, 0.167957065651126, 0.1720814134781229, 0.18580607970226815, 0.17673637462952752, 0.17689941612074422, 0.15343734161302613, 0.5094992264084537, 0.1623016830194698, 0.1566112751090386, 0.4977219454709514, 0.4951317416626402, 0.1780159246119074, 0.14906537362320194, 0.1435631807654716, 0.4336927360457874, 0.3472998702995401, 0.1909455481039557, 0.17085476915446363, 0.22351579532018118, 0.20404450008590824, 0.13119489225203274, 0.19104998787126437, 0.19814571874961717, 0.1853261405080573, 0.20425724864368366, 0.1936214211408963, 0.192475852697801, 0.18817839358445831, 0.19375389879726512, 0.18617221679794715, 0.18640001300181186, 0.17620957588219277, 0.1920854087325864, 0.06950073476590679, 0.05882848955462794, 0.08577520746930312, 0.06042026660423894, 0.0654901801761647, 0.06491804081242702, 0.06305714725587563, 0.07469988672843741, 0.06758890439772736]}, "mutation_prompt": null}
{"id": "2fdb8fe7-4d51-4718-a64a-4c29551193ed", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "d23ef696-d2d9-4a27-8dc4-0c704f91214c", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "567160ce-515d-418a-bdcf-c4e45e4b4f5c", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "693392ab-8010-4f24-a62c-d7cebc513394", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "8ecad6f6-21ee-4f82-bc08-e0a3377879fe", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        \n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant_vector = de_population[idx[0]] + self.mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                \n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "A hybrid Particle Swarm and Differential Evolution metaheuristic algorithm combines swarm intelligence with mutation strategies for robust global optimization.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.489903977280298, 0.5075130037592834, 0.4561032347555648, 0.5103325550754185, 0.5321558338162906, 0.5038091623380182, 0.5432962929790897, 0.5159092736910251, 0.46965381039733733, 0.1235501329187011, 0.06487957168336456, 0.10452558052264338, 0.12295920650564007, 0.10876210301794198, 0.10540616037969319, 0.1267051296593521, 0.13063796753326862, 0.08134124374488405, 0.18012113835245125, 0.11753770119080786, 0.07825102308308818, 0.09077511975693398, 0.06348194863255463, 0.12323760716326015, 0.08255206822289785, 0.15018350484224063, 0.09994581715011752, 0.07452242120815844, 0.1009600453739029, 0.09294691714882442, 0.11793201426467381, 0.10230463025199754, 0.09372167244709328, 0.08353522035111183, 0.09239777647301328, 0.09376493931908025, 0.9594835749082254, 0.9510171091135584, 0.9582004195104717, 0.8919933348611834, 0.9313739151269923, 0.9362181492580517, 0.9461250695657305, 0.9482851690991136, 0.9442173920507043, 0.30500703891766623, 0.24493042203273596, 0.22131922361769418, 0.2761291515296773, 0.20033810209118696, 0.2571622411004397, 0.15734613277244258, 0.15920498297416374, 0.15095384924993815, 0.24840068767640244, 0.19064724402474054, 0.19135364564771917, 0.20545213424396813, 0.23135995979474178, 0.1966451784657851, 0.2608899769959657, 0.20080533970489656, 0.23819357231543714, 0.09046497845929968, 0.13157299166109115, 0.10494520704428689, 0.09727922068220596, 0.14827229988827462, 0.0706990546943489, 0.11881058558750024, 0.13580182633405724, 0.13594996754682676, 0.1324861115108541, 0.15312870786317923, 0.13485580264762975, 0.13021785687870957, 0.12228082296012, 0.15207746993114046, 0.16569024808967658, 0.0745422738902154, 0.15345984749195396, 0.000493799668454642, 0.002798698703139979, 9.999999999998899e-05, 0.0026556014164589303, 0.010993351553808872, 9.999999999998899e-05, 0.003161421527094199, 0.0055106949166759955, 0.003380221831421837, 0.08671135307379063, 0.08816923004609378, 0.08141317250748958, 0.07822541677404626, 0.09219169492225066, 0.07060325417268765, 0.09762394094784799, 0.0946014995867901, 0.09254441472517794, 0.014277998685009119, 9.999999999998899e-05, 0.020885642033640073, 0.05053866066106916, 0.03368350822470545, 0.028826861612137544, 0.04040824585225167, 0.06923282552209498, 0.03182683704411471, 0.11436064039506655, 0.07396485009861187, 0.05813389159483684, 0.04324823681366907, 0.04261270921853333, 0.03479706029073082, 0.06174589144522524, 0.10832919370393757, 0.06862118552007401, 0.41142788924971696, 0.4017088316520955, 0.41427054657491325, 0.4471386044510628, 0.4319257940519955, 0.3925359298810903, 0.43462921173357116, 0.3685597914486891, 0.40090025574157073, 0.07430503715752657, 0.0761426205641288, 0.07795263286120513, 0.091691233062964, 0.09924948788274979, 0.08290170146973541, 0.10299247915325871, 0.0804958076432426, 0.07243330704283457, 0.2349853371656495, 0.207381797163113, 0.1739437117101812, 0.20632057096405898, 0.22512215407817926, 0.20450343445544794, 0.18373270252352292, 0.25407499441055836, 0.18567526764773645, 0.26080431209558796, 0.19882829699296167, 0.29739115403785765, 0.18749585332104401, 0.271450655164891, 0.2559422063435711, 0.29588625673427615, 0.3112836803514455, 0.2672352783731603, 0.20259856934934228, 0.18304893100705344, 0.16737568060040053, 0.14110740074079864, 0.15374478397201297, 0.20202946130838118, 0.1484489804996847, 0.22416139094851273, 0.1974409506942818, 0.19291719016199538, 0.15600154164594582, 0.1800422395963287, 0.20013928902134548, 0.20730363684045872, 0.17905854113375785, 0.20033835575098669, 0.20301436170415021, 0.19333422112738652, 0.19771231611357654, 0.1807646220822553, 0.29223476270206994, 0.19231604864627683, 0.20332414845295033, 0.181330972327575, 0.19865037300260513, 0.17194867719252815, 0.18877366124842354, 0.5803713367210588, 0.18551005602444703, 0.15606733600124278, 0.6741417821869395, 0.19504040561915437, 0.19255031020071967, 0.13995671064854964, 0.1535819569417488, 0.18275584643675746, 0.48546146994953365, 0.2069037057049835, 0.19678757208019249, 0.17284996177869105, 0.2621817123695095, 0.20514636074184978, 0.20120455283462557, 0.19187308579145268, 0.17385053969288988, 0.17974628640153645, 0.20244044279013396, 0.1910099291605759, 0.18134637663126674, 0.18551466273647277, 0.18541895286815602, 0.18074935466347852, 0.17351285897031443, 0.2124435787596216, 0.07517297602173456, 0.06686504230129486, 0.07013494930972264, 0.05611113846479454, 0.07702981100187556, 0.060153147146920105, 0.08881673112978294, 0.08646437851818811, 0.05733471601800333]}, "mutation_prompt": null}
{"id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 44, "fitness": 0.22877516785428278, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "fb3c5457-8aeb-4bee-9a8a-26fb0960bee5", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "d1176b43-5d01-460d-ae5a-574052376247", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "4156cd36-1498-4942-a910-702b956f8af6", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "79bea4aa-4e0b-425d-9c95-7a41d972fbca", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "a811ce37-39d1-4d6a-9d97-012f05804487", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "d89d0533-ad80-46d1-bc34-aca12b89038f", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "fe42528f-cfed-4a42-8e5d-5940a0658137", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "d97fa4f7-9e63-4e32-a580-c1f32440a0d0", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "2d0e14ba-9b88-4dc4-a94e-836e50594aaf", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "b47e2918-8335-4784-8631-4cb1fe604bcb", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "3fb0805e-3a68-478d-894f-38de2cc83fad", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "f8fad5ea-7164-4fba-880b-66ff3c804d7c", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "d8e75e46-a8ce-42f5-813c-43abf13e4dab", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "c81cb00f-fb72-421e-a8f0-c5841e740c90", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "a999c756-d8ce-4fe0-96c8-a1a84c2c5117", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "6dde31f5-df55-44aa-a4ae-697c63e6aa0d", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.9\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part with adaptive velocity control\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions with adaptive control\n            inertia_weight = 0.4 + 0.5 * (global_best_score / (1 + global_best_score))\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part with fitness-weighted mutation\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                fitness_weight = personal_best_scores[i] / (1 + personal_best_scores[i])\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1 * fitness_weight), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhance the PSO-DE hybrid by introducing adaptive velocity control for PSO and utilizing fitness-weighted mutation in JADE-inspired DE to balance exploration and exploitation more effectively.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('scale < 0').", "error": "ValueError('scale < 0')", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {}, "mutation_prompt": null}
{"id": "8117c843-dbaf-499e-9e38-48c8c3644d75", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "68c2a063-01d2-4922-953a-9fd006726b37", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "1235acac-6efa-4219-af6d-b2dda564bcac", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "d42303fd-8f41-4910-ac44-54190b2bd61a", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "f2a9fc2d-ee9f-449c-9789-5e829add4fab", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "3f0a22bc-6e6b-45a3-badd-63824f02e162", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight_max = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n        self.num_swarms = 2  # Introduced multi-swarm strategy\n\n    def __call__(self, func):\n        num_evaluations = 0\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            inertia_weight = self.inertia_weight_max - (num_evaluations / self.budget) * (self.inertia_weight_max - self.inertia_weight_min)  # Adaptive inertia\n            \n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            for swarm in range(self.num_swarms):\n                for i in range(self.population_size // self.num_swarms):\n                    idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Introducing a multi-swarm strategy and adaptive inertia in PSO to enhance convergence and maintain diversity in JADE-inspired DE for robust optimization.", "configspace": "", "generation": 65, "fitness": 0.18506446567721943, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.43689812426693786, 0.40404400438458443, 0.3768957520732542, 0.26070456495785954, 0.3591511647899177, 0.3863665461960175, 0.425149106042086, 0.3797176482671517, 0.35094675318728363, 0.07186146653061021, 0.09137988068613379, 0.07213817512513598, 0.08504442698133374, 0.04089356146657863, 0.07331061033400943, 0.07026560683585215, 0.04621950057717894, 0.05307033149459772, 0.1355472418560617, 0.1065889976579587, 0.1272505992497508, 0.14132100377230872, 0.08168107060755359, 0.11951671180037415, 0.10831632053433204, 0.1237606952589354, 0.09806883688734847, 0.09437182523877563, 0.0924265390203316, 0.09439488869373858, 0.11565623649998835, 0.11194044826434368, 0.08199084257223965, 0.11723907923555943, 0.1141831111172893, 0.11084805513948981, 0.9588226348411839, 0.9469221627453599, 0.9595640017374557, 0.8924666078740793, 0.9337251327268701, 0.9448218123821611, 0.9588263007584408, 0.958594337365027, 0.9471399665915655, 0.24256307130363342, 0.20691516907579666, 0.12159400082047545, 0.1427690390084816, 0.1900677537169254, 0.1404854927676661, 0.13134508375033116, 0.10292517146262437, 0.15865871591937064, 0.17108715674729302, 0.2524104882788458, 0.19643029380880817, 0.20215084901082503, 0.1835472207451596, 0.18325227121274335, 0.2294573914145993, 0.15175557917285298, 0.28820496595657075, 0.13089655555606328, 0.12009169483301152, 0.0900535717026385, 0.08803614066745236, 0.09972148936884717, 0.0886386800771557, 0.10261164477392881, 0.13574786661952498, 0.13502314215708267, 0.11215226235701736, 0.11468027298601724, 0.16459327967909154, 0.11428435005857229, 0.08474996593094908, 0.0890766557147239, 0.10042600673665436, 0.08899899789567667, 0.13475184615116764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00972845049834814, 0.002955328968051618, 0.018117720708579865, 0.10179159000390814, 0.03594519978276445, 0.09422106748843395, 0.04748654824663012, 0.03828201050127422, 0.0202592982921882, 0.052673675035640244, 0.047019444967045465, 0.046202156352763035, 9.999999999998899e-05, 9.999999999998899e-05, 0.010306152450438977, 0.01226117780344571, 0.008578846945879737, 0.014878887658762996, 0.014449044136945255, 0.012617790122121164, 0.018600454024018664, 0.044990481566292706, 0.024895609571333632, 0.052762977523843624, 0.04163948626845648, 0.0571251908479129, 0.028523137818280864, 0.014707937020445705, 0.05761396450168499, 0.05459149809720798, 0.37637215616663966, 0.3405790251476476, 0.3464928150913986, 0.3380609991834379, 0.335964881444035, 0.3338187072833204, 0.3367049706277957, 0.3544359416720767, 0.34785074787809656, 0.0839465324554578, 0.06442150789305523, 0.07186787100767378, 0.08775052746978473, 0.08297220185951171, 0.0982071429793745, 0.0818996993411254, 0.07581288600647407, 0.09868289114032991, 0.1525870646141495, 0.18876841883595286, 0.15766679745281165, 0.2043828793296787, 0.2016696627975023, 0.1559953065207499, 0.17376088153314717, 0.1839156204767155, 0.21985926846856751, 0.23586534142083915, 0.24551366279033504, 0.22714077312136327, 0.2288033745442526, 0.20327982648760046, 0.22137787483770177, 0.2656910499738405, 0.286929922019179, 0.25535782031443854, 0.15532349932580491, 0.15336978528164202, 0.20248348478317924, 0.1747201559303505, 0.14779925297018381, 0.15904474491593268, 0.18425666546376052, 0.19644865271714873, 0.19806702068916038, 0.23676445875502017, 0.1872299576559563, 0.18161567166996329, 0.19122419773661936, 0.1767400392581323, 0.17987778679623967, 0.17159598379662255, 0.18257567366593808, 0.2067032730384878, 0.17643283427727707, 0.18004794363193577, 0.1971126945584113, 0.19931710617962672, 0.18671123193736483, 0.17956257371089068, 0.21871953291779933, 0.1703052459978569, 0.18259544052210963, 0.46426017493730065, 0.15970829494580907, 0.18978318833426633, 0.3923577186043, 0.19646238921935932, 0.18757068756080275, 0.15779127228337997, 0.1465161439902236, 0.19570557525863386, 0.3980759248809539, 0.18465833889409078, 0.4103020344610493, 0.25530339486033504, 0.22111806751027974, 0.24031926353669897, 0.17939699792956088, 0.20072969900317572, 0.17176740721693928, 0.17114306321766926, 0.18348083959887618, 0.16836915860836665, 0.1789540745763285, 0.17173457806461634, 0.17720250739094212, 0.16940685881522455, 0.17972082808110024, 0.1911115777617698, 0.09749151532092859, 0.07951808378060965, 0.06705698383560632, 0.07256317544399804, 0.07731842829052005, 0.06426512391586425, 0.05608714790452829, 0.07176779285224877, 0.06963236775724013]}, "mutation_prompt": null}
{"id": "c877bf00-cfb3-45de-a15a-cd21c9f688c5", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "b809f7c9-c8b9-4124-956f-3e3b84b11359", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.9  # Initial inertia weight\n        self.inertia_weight_min = 0.4  # Min inertia weight\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population using a chaotic map\n        def chaotic_map(size):\n            x = np.random.rand(size)\n            for _ in range(100):  # Iterate to reach chaotic behavior\n                x = 4 * x * (1 - x)\n            return self.lower_bound + (self.upper_bound - self.lower_bound) * x\n\n        positions = chaotic_map((self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # Update inertia weight linearly\n            self.inertia_weight = self.inertia_weight_min + (0.9 - self.inertia_weight_min) * ((self.budget - num_evaluations) / self.budget)\n            \n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Enhance PSO-DE hybrid by introducing adaptive inertia weight and chaotic map initialization for improved exploration and exploitation balance.", "configspace": "", "generation": 67, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"'tuple' object cannot be interpreted as an integer\").", "error": "TypeError(\"'tuple' object cannot be interpreted as an integer\")", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {}, "mutation_prompt": null}
{"id": "2fbbc8c1-276b-4ad4-8f7c-9c5d40eff32e", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "f44058ab-a900-4215-87e5-7e8a4a4af1e9", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "3c85522c-3e54-4cf3-8d44-9480ab3038ae", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "4b3cd216-143b-4e15-ac6f-df43865f3cf7", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.5 + np.random.rand() * 0.5  # Introduced randomness\n        self.cognitive_coeff = 1.2 + np.random.rand() * 0.8  # Introduced randomness\n        self.social_coeff = 1.2 + np.random.rand() * 0.8  # Introduced randomness\n        self.mutation_factor = 0.7  # Modified\n        self.crossover_prob_mean = 0.6  # Modified\n        self.crossover_prob = 0.8  # Modified\n        self.mu_mutation_factor = 0.6  # Modified\n        self.mu_crossover_prob = 0.6  # Modified\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:  # Added condition for early break\n                    break\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                if num_evaluations >= self.budget:  # Added condition for early break\n                    break\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Hybridizing PSO and DE with adaptive learning rates and dynamic parameter tuning to improve exploration and exploitation balance for optimization.", "configspace": "", "generation": 71, "fitness": 0.22174832081592677, "feedback": "The algorithm PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.19.", "error": "", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.56099576178129, 0.5197702223448422, 0.500295177827337, 0.4780715624919627, 0.5507151068528675, 0.5009058706795524, 0.5181212943820457, 0.5182824116567155, 0.4797044362609906, 0.20528339386280348, 0.14274377798143267, 0.20677511759467615, 0.24003277404449752, 0.16190799659587696, 0.12794489170541634, 0.2658303549673763, 0.20889058929236992, 0.14980399347989803, 0.1308103763465822, 0.11669823474174923, 0.16199290592421312, 0.23033946744818068, 0.11425726252986912, 0.1157385122904725, 0.10351287181111679, 0.12963293000970866, 0.17166706027676137, 0.1205852139426985, 0.099417750684056, 0.11181709508542659, 0.12636139393720003, 0.10115596657139381, 0.10748946264916082, 0.11092648412825779, 0.12496817902713886, 0.11376024278399655, 0.9581314426703739, 0.9450989665797394, 0.9718028629958504, 0.9688512206500581, 0.9444990533533999, 0.9179406893297825, 0.9591084386289661, 0.9557563713014983, 0.9311073010400263, 0.17039753580573158, 0.2577153720712332, 0.29584987138506824, 0.17721982888994647, 0.25850518483887586, 0.22267759523648056, 0.1952004035645104, 0.269112317982802, 0.2679516271675685, 0.24982557995932841, 0.26497162957842624, 0.24005195402088242, 0.5284593225706331, 0.2704009141991025, 0.3099434119475766, 0.2947527607959147, 0.2229731385947198, 0.28425674966742764, 0.10442376391104657, 0.16198127468515489, 0.1322503722118028, 0.1185713622274639, 0.1192923525149776, 0.1289130597535486, 0.12268423598491573, 0.13254504099646924, 0.1462914038004528, 0.1074852092362506, 0.13809528263036341, 0.2147955535140451, 0.11843404572312832, 0.13579994725429712, 0.13806563835767416, 0.11349259696973546, 0.15165564079648552, 0.11903636513408489, 0.027769672299456594, 0.017475567982197626, 0.01854423704033925, 0.07547881136022583, 0.0797063182991884, 0.030179122884396392, 0.029516001875722342, 9.999999999998899e-05, 0.048980312840121276, 0.14429659664558026, 0.1647001895314968, 0.1441801221480722, 0.231928740455159, 0.11332871320037174, 0.1446137888684489, 0.13838805554025824, 0.08353383602771247, 0.1478731957205195, 0.017666217831468045, 0.04780519838388031, 0.04904837115331373, 0.03287528217880975, 0.049291972461073974, 0.03439989855167935, 0.021378459043210785, 0.036137056427438474, 0.06518583447538417, 0.07574883193721249, 0.09129202905036493, 0.11367214423498007, 0.15609672070093095, 0.09846288604474762, 0.11046441127376527, 0.1209943541650309, 0.08127878160956337, 0.11664463356801136, 0.33852285682675165, 0.39857438534342315, 0.40511545474253285, 0.4050003241504626, 0.40236727483724855, 0.38851275080266146, 0.45268822357127103, 0.4030804978527539, 0.3846784878688836, 0.08627588986016, 0.08804551375460579, 0.12221357164519775, 0.07628773687167045, 0.09135486759360101, 0.07908601352635836, 0.0833824882884181, 0.08502370556564343, 0.07429084409968545, 0.15766648478068113, 0.1678633645088381, 0.1724766533147809, 0.15556370443600098, 0.1610060102016312, 0.1571055623032258, 0.16150007162718572, 0.13231634008712867, 0.18584361011573247, 0.2598941435165484, 0.2132837203499527, 0.24819441720832924, 0.26523160881798014, 0.2019780394632551, 0.2585923049090819, 0.29610368101168216, 0.20872708124360428, 0.2741498639105958, 0.16996529110174052, 0.18182169935705306, 0.1922383679482137, 0.15939794673575403, 0.1991019112593475, 0.17953717208932463, 0.24969683208611937, 0.1548709626536916, 0.18837132443931992, 0.17741031051802436, 0.2100981272912421, 0.19280509733645157, 0.23498089647867537, 0.19366152370540823, 0.17645247719886425, 0.20689186879024024, 0.20296292378770453, 0.22189165027294255, 0.17502771715893417, 0.17532793245216471, 0.19365099780472994, 0.19163316998468982, 0.23173838941012248, 0.17641753229205037, 0.21054144738819802, 0.21720639690099275, 0.1990759008059222, 0.16721100644220166, 0.17413959327810768, 0.34276503834934846, 0.15320684517279481, 0.6381788172279828, 0.3274973688838737, 0.4581246453414165, 0.1865783911502168, 0.16346102711602084, 0.16050191912230805, 0.3998149892069973, 0.5295305137537071, 0.279485258273403, 0.19960751932452891, 0.16965396242358544, 0.19517634596141675, 0.19368588591254776, 0.1637462379844805, 0.1858924454805594, 0.18418466909283604, 0.1920461529472378, 0.20317411735863633, 0.17619524087656868, 0.17919094951323533, 0.17986196650432962, 0.18443950518982488, 0.18302445885804286, 0.07763544214665452, 0.08046757491562917, 0.0780743073253265, 0.07365591197298926, 0.0724091400093555, 0.09855414496545878, 0.06831889723938511, 0.0796627264049603, 0.07109366393084349]}, "mutation_prompt": null}
{"id": "dd3a72de-48de-4539-bce5-642620975043", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n        \n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            for i in range(self.population_size):\n                idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                \n                current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                trial_vector = np.copy(de_population[i])\n                crossover = np.random.rand(self.dim) < current_crossover_prob\n                trial_vector[crossover] = mutant_vector[crossover]\n                \n                trial_score = func(trial_vector)\n                num_evaluations += 1\n                if trial_score < func(de_population[i]):\n                    de_population[i] = trial_vector\n                    self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                    self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                if num_evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer", "description": "Integrating Adaptive Differential Evolution (JADE) with PSO to enhance diversity while leveraging self-adaptive parameters for robust optimization.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.5324526397887566, 0.4905505653204595, 0.5085638314783896, 0.5619189693066355, 0.5052404578081937, 0.5268594363305263, 0.5149468613488464, 0.5106670092522126, 0.5196503337840996, 0.19368614351924274, 0.15390323010257, 0.13946290695488206, 0.24852634610712632, 0.173889596040268, 0.19002732030743208, 0.2029828178014763, 0.10124552866930081, 0.19650659964536654, 0.15883128437719785, 0.1475245583417173, 0.12520458182100724, 0.17546204772523322, 0.2279006305917688, 0.22051248886077723, 0.12058948967674021, 0.14766742936244004, 0.1823161376229272, 0.1392190933179711, 0.1461160150706997, 0.1276384032021184, 0.1769783561777971, 0.16141633979323378, 0.12560925181446658, 0.18125012864433665, 0.15107693929709765, 0.12877758874307943, 0.9581579350966933, 0.9459947914816226, 0.9584911091804156, 0.8838174339198986, 0.9304560000784647, 0.9439122566767707, 0.9469239484508789, 0.9584555518556408, 0.9441813933675541, 0.2540282524386348, 0.2500771144993049, 0.2301774983050483, 0.2828126975333082, 0.24061425548542426, 0.16410840864709408, 0.1331314300322387, 0.1572249658005801, 0.24656542976019824, 0.5015594413573535, 0.5637157918420376, 0.17527273388504294, 0.472543645991365, 0.27975310128030473, 0.20468022461819668, 0.5062988929237675, 0.24659752561689718, 0.2567165385274566, 0.28664072978279387, 0.1265374271241828, 0.1446847058437446, 0.12145303287478104, 0.17562722459105484, 0.11385942721577125, 0.1396637359471653, 0.12833226089258187, 0.14102218920454834, 0.18988931098305717, 0.11857497118960347, 0.14724690850647626, 0.13302513563941953, 0.11892939394382429, 0.1290114961353147, 0.11767089431857769, 0.05543630875897376, 0.13753717839462898, 0.008023243907158584, 0.043799095565889234, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07225213654537277, 0.039652225091383664, 0.08266284404855995, 0.22084885864762172, 0.05925447509039272, 0.11104235491130021, 0.15085184539485874, 0.08064917497022128, 0.08301985859940109, 0.03658766051012463, 0.15540365811313406, 0.08893571703511738, 0.07954584469196779, 0.025071070060778244, 0.024997406374143605, 0.06345126596658013, 0.035116071159881024, 0.09505241183245694, 0.057579024073176166, 0.03502437015333215, 0.03783795526838474, 0.10428269023555004, 0.03480551925528108, 0.12082813702653916, 0.0883176613836536, 0.10879407114732387, 0.10334660160556774, 0.09312331961091913, 0.07866578114710787, 0.1035375308992128, 0.4121532293544422, 0.3764505996756611, 0.41504773552648344, 0.4073623376512995, 0.3998646114299661, 0.4084700226635819, 0.4301847060351668, 0.3742875432924194, 0.41774094927328564, 0.08069373204165864, 0.09728323582383713, 0.09424953860831264, 0.09997453516310617, 0.07577867800968507, 0.09225626541915122, 0.09325789765431913, 0.10612783696442185, 0.09996406583720907, 0.17445440192314676, 0.2163271821284396, 0.17304582435654614, 0.1940713498418164, 0.1870236016168263, 0.19777800953783375, 0.3240388909569405, 0.19951374616906248, 0.17662653557987473, 0.25781366502879144, 0.23454725328778558, 0.3061831028331925, 0.22819048263582598, 0.25213114692304384, 0.26788506272554213, 0.3124891101282765, 0.3146120996959617, 0.28109344357283317, 0.23821708375623052, 0.22448383014885798, 0.20003741025537225, 0.15750302392308713, 0.17759410128306263, 0.18175490928896987, 0.18083072964158542, 0.20403200150951029, 0.22364312172356293, 0.18274257553227713, 0.19026759689269124, 0.21732878126178423, 0.19286249078358686, 0.19820503331753714, 0.17626899304226795, 0.18224645763118796, 0.1716491561820307, 0.21256361593078021, 0.21003614797129322, 0.18253760368499106, 0.19503456127965524, 0.19111508731193538, 0.20362093032069462, 0.19577324828937304, 0.17852093941424207, 0.2802620444660765, 0.18393413793970415, 0.5716647037527469, 0.1679429460802232, 0.19812601247776396, 0.6725647847616821, 0.28388155000532356, 0.24900461555102005, 0.14717670879220657, 0.23092348182588462, 0.26415851489674014, 0.4587745785061639, 0.19456835729181343, 0.42993464153227046, 0.1911972433398631, 0.25744404317401803, 0.22013179156669638, 0.1527824857549258, 0.14847699396210334, 0.12923681779306795, 0.18522936106820675, 0.18948721267205815, 0.17438211109926738, 0.2112900763920197, 0.18615480645221583, 0.19668618977530916, 0.1983424262656034, 0.1766084536343171, 0.20228108530563282, 0.06630706416587762, 0.07096547064819114, 0.082169786610504, 0.07552649237116982, 0.08546816470645024, 0.08361752464963845, 0.09276742480715805, 0.07026568863388039, 0.07272610580667005]}, "mutation_prompt": null}
{"id": "7a6106bc-706c-43ba-9a78-1231b9b6fb11", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.6  # Changed from 0.7\n        self.cognitive_coeff = 1.7  # Changed from 1.5\n        self.social_coeff = 1.4  # Changed from 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.7  # Changed from 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.1\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            unique_scores = np.unique(personal_best_scores)\n            if len(unique_scores) > fitness_diversity_threshold * self.population_size:\n                for i in range(self.population_size):\n                    idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Refined", "description": "Hybrid PSO and JADE-DE with Fitness Diversity Control to maintain exploration-exploitation balance and prevent premature convergence.", "configspace": "", "generation": 73, "fitness": 0.2463891230468206, "feedback": "The algorithm PSO_DE_Optimizer_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.20.", "error": "", "parent_id": "4fe3fc95-8b53-4c3b-9a30-54a0fdea52d0", "metadata": {"aucs": [0.6439192932473616, 0.60814587158792, 0.5999607727258474, 0.617593726209773, 0.6313574889418878, 0.634530747995145, 0.6358762150057338, 0.6208051911380279, 0.593963633958525, 0.20558580606499388, 0.15711072722938424, 0.21988827507123543, 0.25518027169624713, 0.173889596040268, 0.19317002256868998, 0.2446578693779955, 0.16429704027657333, 0.1960274881862294, 0.1628101057339758, 0.16561702195278283, 0.2220793482460186, 0.18892966676021727, 0.2299326252818843, 0.22026168499117893, 0.13045536350374642, 0.1573860491358975, 0.1824171996960332, 0.13907135684128957, 0.15116385887740091, 0.1311851432808746, 0.17561726064020333, 0.16566762369056598, 0.13612616665054644, 0.18008265466611761, 0.15384072943027638, 0.1346706482858142, 0.9472337038450545, 0.9454184017270238, 0.958274503381317, 0.8591112132312351, 0.9197784560790542, 0.9295435411146193, 0.9459507882895641, 0.9581171582259093, 0.9326612740100637, 0.27553739350688755, 0.33322659286993017, 0.22749572596203904, 0.3061404680177747, 0.2827070748475726, 0.3090445124272383, 0.2940004833829455, 0.1585628732547404, 0.24685682211286053, 0.515194907655005, 0.565343033829594, 0.21312270282627166, 0.47510647831655783, 0.28401635076129916, 0.20360822098274034, 0.6096013507101038, 0.2513784492466964, 0.23814006800994447, 0.30219591269985935, 0.12774537076242176, 0.17375519152130403, 0.1294506832308322, 0.17973211722203764, 0.12201831604362545, 0.14081367120091015, 0.15056288126530748, 0.18105334471078194, 0.2018218209796956, 0.14367082224599348, 0.12954100022857706, 0.16947919162697123, 0.10466910289717746, 0.15703470950288556, 0.1830652353670702, 0.07602374508787235, 0.13839860257565761, 0.008023243907158584, 0.03965028137807092, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07249882840612631, 0.039652225091383664, 0.04164647619632511, 0.22804043994278123, 0.0507269587167013, 0.12392443142271803, 0.14893912057060843, 0.08140865815730158, 0.08718043490609795, 0.04855278003719288, 0.15590692330342193, 0.05274835531358546, 0.1418483094774028, 0.10779492896233644, 0.06136943001939765, 0.08029681820661139, 0.04332458846347542, 0.07178057673480254, 0.07882719837882723, 0.0866687785748742, 0.08628399126761432, 0.11738972462569996, 0.09434918015025218, 0.12218268208708583, 0.08698598490375864, 0.11390988370766497, 0.10363620553448949, 0.10036875323937544, 0.11857809775843964, 0.10754486921163786, 0.44400771802550953, 0.4334656996023497, 0.443697517369361, 0.45853747711961657, 0.36983045661777536, 0.4193200747280522, 0.4464517143883985, 0.4434591503837785, 0.43695293685738, 0.08597602026550066, 0.08150005693531659, 0.09470470957548316, 0.12541428705114943, 0.08523167049218683, 0.1069923488813267, 0.09021211859258238, 0.08782687531784539, 0.08761626305733805, 0.16810830486459805, 0.18613719645310367, 0.16291928729322402, 0.21415615659965226, 0.26253915231456815, 0.16569788796427487, 0.2577213530636955, 0.1823555417727274, 0.16681441150934884, 0.25206163463546527, 0.32990794052574557, 0.24427249785335436, 0.23238022420991666, 0.286326409802392, 0.31023923294835654, 0.32353194925849915, 0.2706945284079286, 0.3314577382862307, 0.27429935890960855, 0.1820275040685504, 0.23027966712700043, 0.18482430743525036, 0.16605567832393353, 0.26724778216804945, 0.2292818249652394, 0.25220832402057836, 0.23369567172293126, 0.22362016466846968, 0.1833530226461234, 0.2044611026130848, 0.21064877554226313, 0.19648945914976135, 0.18741442068403336, 0.1770595958373924, 0.1764658750113144, 0.19851517549124909, 0.21202814915153467, 0.21127789432103605, 0.20289133803473425, 0.20129711830402552, 0.2029436888790188, 0.18799394513212542, 0.18973303064949765, 0.22908145497762966, 0.18420483634215667, 0.6327587012925819, 0.1581971715475442, 0.19796389181227714, 0.7036207686282614, 0.19537911043018563, 0.23790755508120742, 0.1507530773328073, 0.23010776126631016, 0.73482937168701, 0.40103843070207734, 0.20841515789229392, 0.4323895291358487, 0.16697630258539697, 0.3245250220170205, 0.22194480787174986, 0.1527824857549258, 0.1486399177742238, 0.39334018034786955, 0.18093020060586273, 0.1875824017553327, 0.17571989816545797, 0.20961638501310376, 0.1972726279011694, 0.18181138115472784, 0.19834353162475782, 0.17512072252279343, 0.1852950660627879, 0.07930403990899382, 0.07988255155746848, 0.07613899351643227, 0.0762162023270948, 0.08287019340999124, 0.08104348017152407, 0.0909988365003368, 0.0650253798215632, 0.07968320237990756]}, "mutation_prompt": null}
{"id": "0182e4ac-e080-41e2-b62e-238736a73a11", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.6  # Changed from 0.7\n        self.cognitive_coeff = 1.7  # Changed from 1.5\n        self.social_coeff = 1.4  # Changed from 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.7  # Changed from 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.1\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            unique_scores = np.unique(personal_best_scores)\n            if len(unique_scores) > fitness_diversity_threshold * self.population_size:\n                for i in range(self.population_size):\n                    idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Refined", "description": "Hybrid PSO and JADE-DE with Fitness Diversity Control to maintain exploration-exploitation balance and prevent premature convergence.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7a6106bc-706c-43ba-9a78-1231b9b6fb11", "metadata": {"aucs": [0.6439192932473616, 0.60814587158792, 0.5999607727258474, 0.617593726209773, 0.6313574889418878, 0.634530747995145, 0.6358762150057338, 0.6208051911380279, 0.593963633958525, 0.20558580606499388, 0.15711072722938424, 0.21988827507123543, 0.25518027169624713, 0.173889596040268, 0.19317002256868998, 0.2446578693779955, 0.16429704027657333, 0.1960274881862294, 0.1628101057339758, 0.16561702195278283, 0.2220793482460186, 0.18892966676021727, 0.2299326252818843, 0.22026168499117893, 0.13045536350374642, 0.1573860491358975, 0.1824171996960332, 0.13907135684128957, 0.15116385887740091, 0.1311851432808746, 0.17561726064020333, 0.16566762369056598, 0.13612616665054644, 0.18008265466611761, 0.15384072943027638, 0.1346706482858142, 0.9472337038450545, 0.9454184017270238, 0.958274503381317, 0.8591112132312351, 0.9197784560790542, 0.9295435411146193, 0.9459507882895641, 0.9581171582259093, 0.9326612740100637, 0.27553739350688755, 0.33322659286993017, 0.22749572596203904, 0.3061404680177747, 0.2827070748475726, 0.3090445124272383, 0.2940004833829455, 0.1585628732547404, 0.24685682211286053, 0.515194907655005, 0.565343033829594, 0.21312270282627166, 0.47510647831655783, 0.28401635076129916, 0.20360822098274034, 0.6096013507101038, 0.2513784492466964, 0.23814006800994447, 0.30219591269985935, 0.12774537076242176, 0.17375519152130403, 0.1294506832308322, 0.17973211722203764, 0.12201831604362545, 0.14081367120091015, 0.15056288126530748, 0.18105334471078194, 0.2018218209796956, 0.14367082224599348, 0.12954100022857706, 0.16947919162697123, 0.10466910289717746, 0.15703470950288556, 0.1830652353670702, 0.07602374508787235, 0.13839860257565761, 0.008023243907158584, 0.03965028137807092, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07249882840612631, 0.039652225091383664, 0.04164647619632511, 0.22804043994278123, 0.0507269587167013, 0.12392443142271803, 0.14893912057060843, 0.08140865815730158, 0.08718043490609795, 0.04855278003719288, 0.15590692330342193, 0.05274835531358546, 0.1418483094774028, 0.10779492896233644, 0.06136943001939765, 0.08029681820661139, 0.04332458846347542, 0.07178057673480254, 0.07882719837882723, 0.0866687785748742, 0.08628399126761432, 0.11738972462569996, 0.09434918015025218, 0.12218268208708583, 0.08698598490375864, 0.11390988370766497, 0.10363620553448949, 0.10036875323937544, 0.11857809775843964, 0.10754486921163786, 0.44400771802550953, 0.4334656996023497, 0.443697517369361, 0.45853747711961657, 0.36983045661777536, 0.4193200747280522, 0.4464517143883985, 0.4434591503837785, 0.43695293685738, 0.08597602026550066, 0.08150005693531659, 0.09470470957548316, 0.12541428705114943, 0.08523167049218683, 0.1069923488813267, 0.09021211859258238, 0.08782687531784539, 0.08761626305733805, 0.16810830486459805, 0.18613719645310367, 0.16291928729322402, 0.21415615659965226, 0.26253915231456815, 0.16569788796427487, 0.2577213530636955, 0.1823555417727274, 0.16681441150934884, 0.25206163463546527, 0.32990794052574557, 0.24427249785335436, 0.23238022420991666, 0.286326409802392, 0.31023923294835654, 0.32353194925849915, 0.2706945284079286, 0.3314577382862307, 0.27429935890960855, 0.1820275040685504, 0.23027966712700043, 0.18482430743525036, 0.16605567832393353, 0.26724778216804945, 0.2292818249652394, 0.25220832402057836, 0.23369567172293126, 0.22362016466846968, 0.1833530226461234, 0.2044611026130848, 0.21064877554226313, 0.19648945914976135, 0.18741442068403336, 0.1770595958373924, 0.1764658750113144, 0.19851517549124909, 0.21202814915153467, 0.21127789432103605, 0.20289133803473425, 0.20129711830402552, 0.2029436888790188, 0.18799394513212542, 0.18973303064949765, 0.22908145497762966, 0.18420483634215667, 0.6327587012925819, 0.1581971715475442, 0.19796389181227714, 0.7036207686282614, 0.19537911043018563, 0.23790755508120742, 0.1507530773328073, 0.23010776126631016, 0.73482937168701, 0.40103843070207734, 0.20841515789229392, 0.4323895291358487, 0.16697630258539697, 0.3245250220170205, 0.22194480787174986, 0.1527824857549258, 0.1486399177742238, 0.39334018034786955, 0.18093020060586273, 0.1875824017553327, 0.17571989816545797, 0.20961638501310376, 0.1972726279011694, 0.18181138115472784, 0.19834353162475782, 0.17512072252279343, 0.1852950660627879, 0.07930403990899382, 0.07988255155746848, 0.07613899351643227, 0.0762162023270948, 0.08287019340999124, 0.08104348017152407, 0.0909988365003368, 0.0650253798215632, 0.07968320237990756]}, "mutation_prompt": null}
{"id": "d54e793c-6e43-4c45-806c-a34bcbcc4f5a", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7  # Adaptive inertia weight\n        self.cognitive_coeff = 1.6  # Adapted coefficient\n        self.social_coeff = 1.6  # Adapted coefficient\n        self.mutation_factor = 0.6  # Increased mutation factor\n        self.crossover_prob_mean = 0.7\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.1\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            fitness_improvement = False\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                    fitness_improvement = True\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update inertia adaptively\n            if fitness_improvement:\n                self.inertia_weight = max(0.4, self.inertia_weight * 0.99)\n                \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            unique_scores = np.unique(personal_best_scores)\n            if len(unique_scores) > fitness_diversity_threshold * self.population_size:\n                for i in range(self.population_size):\n                    idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Enhanced", "description": "Enhanced PSO-DE Hybrid with Adaptive Parameters and Diversity Maintenance to balance exploration and exploitation across diverse fitness landscapes.", "configspace": "", "generation": 75, "fitness": 0.23882806151256458, "feedback": "The algorithm PSO_DE_Optimizer_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "7a6106bc-706c-43ba-9a78-1231b9b6fb11", "metadata": {"aucs": [0.6442308102343948, 0.6075685479721618, 0.597951654242435, 0.5619080698474462, 0.6004692517217114, 0.6421802798824461, 0.5967175839800551, 0.6175938176134412, 0.5916409609925803, 0.19646978033650242, 0.20801273255520014, 0.1433302293722687, 0.24852634610712632, 0.173889596040268, 0.2584543553449594, 0.2362434927415743, 0.171319587914461, 0.23479018158420972, 0.16598604187182542, 0.156445094644321, 0.11846149443449394, 0.1699530657799676, 0.22857520320659963, 0.2158392210708957, 0.12161111036609273, 0.15995922832270426, 0.18322789239512727, 0.14114216269190893, 0.14620526805583234, 0.12885021967088672, 0.1743785649887193, 0.16040996134735686, 0.12472630764474835, 0.18566183793401103, 0.14473697523566986, 0.12950483316510675, 0.9583885560534164, 0.9460150024636682, 0.9565041059055537, 0.89366244731864, 0.9200779342716086, 0.9439988746967978, 0.9475094427165882, 0.9587955333602942, 0.9430076849321216, 0.3520696585605565, 0.304718220331784, 0.09606908373994738, 0.3682377912007343, 0.16739318462450026, 0.23791255074552287, 0.12924231522484786, 0.15643132985836705, 0.12848659143507157, 0.503387785719799, 0.603987430347108, 0.25410135685466617, 0.2582805117525062, 0.22261469765514807, 0.18826471664018196, 0.2294095635372413, 0.253299944610069, 0.3280348967593343, 0.304239997616632, 0.12278398491652898, 0.15359479634004547, 0.11636183772059117, 0.14626609502336285, 0.11339773398319941, 0.12705428975277677, 0.14279056042635552, 0.1398582573968128, 0.22275600147790864, 0.12750850526866941, 0.131219790881679, 0.13232436146255988, 0.14816804498408076, 0.13870991347664607, 0.16148743742048133, 0.06025528529035851, 0.12942072225785983, 0.008023243907158584, 0.03965028137807092, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07273608466162529, 0.039652225091383664, 0.03148133205430004, 0.2228597052212271, 0.0507269587167013, 0.11100384451082168, 0.14880295923450593, 0.0790357895850421, 0.0855020501634679, 0.057278251761475385, 0.1532745186356067, 0.05673417609877929, 0.06891679490463753, 0.14185421771244533, 0.031151863196875684, 0.08418604914549521, 0.04640210881548135, 0.06277927223996504, 0.0666511901469159, 0.041119671301950045, 0.06782297409072979, 0.1094109262627102, 0.036132138403481284, 0.14337324727931045, 0.08698273484642027, 0.07441750652412626, 0.13847969536638993, 0.1202042707794142, 0.07988677111781306, 0.10545313259965838, 0.4273160214082613, 0.4376904742750187, 0.4237140106333971, 0.4405165133327229, 0.41411272636720187, 0.4202585231098094, 0.4512392450999241, 0.4482347204193212, 0.4338979844299944, 0.11867699372720475, 0.100819208598381, 0.09595229789496229, 0.10555185305856452, 0.07435023003904184, 0.099331001385906, 0.10494311299386261, 0.10237217827057798, 0.1412153058618778, 0.15174405038193017, 0.30717165624584697, 0.1918038531107441, 0.2237092238543107, 0.18784800950462588, 0.26161265010628576, 0.3147750208599367, 0.14521322354217536, 0.17376227309219772, 0.2535157346816911, 0.23325433099532134, 0.2903452524911868, 0.2239290355782887, 0.2672767926296922, 0.3079729872377994, 0.32932540139793565, 0.29702428955677096, 0.26624319132857577, 0.2227699194645717, 0.1871320074672248, 0.2404696642617673, 0.15759658270108579, 0.15800717874611037, 0.1938189506620147, 0.19313196516276854, 0.23046198225636194, 0.22384102624312407, 0.20885896868847742, 0.2045740188510624, 0.1890579073643439, 0.18346234501632197, 0.18398487029052735, 0.18563502671666343, 0.19422734403471642, 0.20569353234342247, 0.19728194617717865, 0.21187361136107463, 0.1871991234130077, 0.1970570253290146, 0.20069006912094633, 0.1855003161390848, 0.17977133244594024, 0.18677034824588723, 0.17972021153932005, 0.21937361439264846, 0.6991104758803628, 0.15862244737196418, 0.19857320703898562, 0.6925221813057321, 0.19267965462377457, 0.24718899737648303, 0.15004665051500665, 0.23495581036184043, 0.7017994438226542, 0.4761671975350811, 0.20456148922059736, 0.1802304361454855, 0.5390171672274676, 0.4010379854409992, 0.22102157765569186, 0.1527824857549258, 0.14816769251230488, 0.12988038305164573, 0.1954944251364127, 0.19031892059591382, 0.1857461191772074, 0.2079453788941069, 0.18842110801431533, 0.17832932498907395, 0.19895900251753196, 0.18281290262511907, 0.1779915458966267, 0.08032966465570512, 0.0858558648567912, 0.08097106356573291, 0.07618344070301042, 0.07611179003301116, 0.07986465780870478, 0.10913750732058725, 0.07239885899440501, 0.0836970281557351]}, "mutation_prompt": null}
{"id": "9ed2e8f9-d7b6-48eb-a7a2-17098e4aaa2e", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.6  # Changed from 0.7\n        self.cognitive_coeff = 1.7  # Changed from 1.5\n        self.social_coeff = 1.4  # Changed from 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.7  # Changed from 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.1\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            unique_scores = np.unique(personal_best_scores)\n            if len(unique_scores) > fitness_diversity_threshold * self.population_size:\n                for i in range(self.population_size):\n                    idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Refined", "description": "Hybrid PSO and JADE-DE with Fitness Diversity Control to maintain exploration-exploitation balance and prevent premature convergence.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7a6106bc-706c-43ba-9a78-1231b9b6fb11", "metadata": {"aucs": [0.6439192932473616, 0.60814587158792, 0.5999607727258474, 0.617593726209773, 0.6313574889418878, 0.634530747995145, 0.6358762150057338, 0.6208051911380279, 0.593963633958525, 0.20558580606499388, 0.15711072722938424, 0.21988827507123543, 0.25518027169624713, 0.173889596040268, 0.19317002256868998, 0.2446578693779955, 0.16429704027657333, 0.1960274881862294, 0.1628101057339758, 0.16561702195278283, 0.2220793482460186, 0.18892966676021727, 0.2299326252818843, 0.22026168499117893, 0.13045536350374642, 0.1573860491358975, 0.1824171996960332, 0.13907135684128957, 0.15116385887740091, 0.1311851432808746, 0.17561726064020333, 0.16566762369056598, 0.13612616665054644, 0.18008265466611761, 0.15384072943027638, 0.1346706482858142, 0.9472337038450545, 0.9454184017270238, 0.958274503381317, 0.8591112132312351, 0.9197784560790542, 0.9295435411146193, 0.9459507882895641, 0.9581171582259093, 0.9326612740100637, 0.27553739350688755, 0.33322659286993017, 0.22749572596203904, 0.3061404680177747, 0.2827070748475726, 0.3090445124272383, 0.2940004833829455, 0.1585628732547404, 0.24685682211286053, 0.515194907655005, 0.565343033829594, 0.21312270282627166, 0.47510647831655783, 0.28401635076129916, 0.20360822098274034, 0.6096013507101038, 0.2513784492466964, 0.23814006800994447, 0.30219591269985935, 0.12774537076242176, 0.17375519152130403, 0.1294506832308322, 0.17973211722203764, 0.12201831604362545, 0.14081367120091015, 0.15056288126530748, 0.18105334471078194, 0.2018218209796956, 0.14367082224599348, 0.12954100022857706, 0.16947919162697123, 0.10466910289717746, 0.15703470950288556, 0.1830652353670702, 0.07602374508787235, 0.13839860257565761, 0.008023243907158584, 0.03965028137807092, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07249882840612631, 0.039652225091383664, 0.04164647619632511, 0.22804043994278123, 0.0507269587167013, 0.12392443142271803, 0.14893912057060843, 0.08140865815730158, 0.08718043490609795, 0.04855278003719288, 0.15590692330342193, 0.05274835531358546, 0.1418483094774028, 0.10779492896233644, 0.06136943001939765, 0.08029681820661139, 0.04332458846347542, 0.07178057673480254, 0.07882719837882723, 0.0866687785748742, 0.08628399126761432, 0.11738972462569996, 0.09434918015025218, 0.12218268208708583, 0.08698598490375864, 0.11390988370766497, 0.10363620553448949, 0.10036875323937544, 0.11857809775843964, 0.10754486921163786, 0.44400771802550953, 0.4334656996023497, 0.443697517369361, 0.45853747711961657, 0.36983045661777536, 0.4193200747280522, 0.4464517143883985, 0.4434591503837785, 0.43695293685738, 0.08597602026550066, 0.08150005693531659, 0.09470470957548316, 0.12541428705114943, 0.08523167049218683, 0.1069923488813267, 0.09021211859258238, 0.08782687531784539, 0.08761626305733805, 0.16810830486459805, 0.18613719645310367, 0.16291928729322402, 0.21415615659965226, 0.26253915231456815, 0.16569788796427487, 0.2577213530636955, 0.1823555417727274, 0.16681441150934884, 0.25206163463546527, 0.32990794052574557, 0.24427249785335436, 0.23238022420991666, 0.286326409802392, 0.31023923294835654, 0.32353194925849915, 0.2706945284079286, 0.3314577382862307, 0.27429935890960855, 0.1820275040685504, 0.23027966712700043, 0.18482430743525036, 0.16605567832393353, 0.26724778216804945, 0.2292818249652394, 0.25220832402057836, 0.23369567172293126, 0.22362016466846968, 0.1833530226461234, 0.2044611026130848, 0.21064877554226313, 0.19648945914976135, 0.18741442068403336, 0.1770595958373924, 0.1764658750113144, 0.19851517549124909, 0.21202814915153467, 0.21127789432103605, 0.20289133803473425, 0.20129711830402552, 0.2029436888790188, 0.18799394513212542, 0.18973303064949765, 0.22908145497762966, 0.18420483634215667, 0.6327587012925819, 0.1581971715475442, 0.19796389181227714, 0.7036207686282614, 0.19537911043018563, 0.23790755508120742, 0.1507530773328073, 0.23010776126631016, 0.73482937168701, 0.40103843070207734, 0.20841515789229392, 0.4323895291358487, 0.16697630258539697, 0.3245250220170205, 0.22194480787174986, 0.1527824857549258, 0.1486399177742238, 0.39334018034786955, 0.18093020060586273, 0.1875824017553327, 0.17571989816545797, 0.20961638501310376, 0.1972726279011694, 0.18181138115472784, 0.19834353162475782, 0.17512072252279343, 0.1852950660627879, 0.07930403990899382, 0.07988255155746848, 0.07613899351643227, 0.0762162023270948, 0.08287019340999124, 0.08104348017152407, 0.0909988365003368, 0.0650253798215632, 0.07968320237990756]}, "mutation_prompt": null}
{"id": "0cde2bdd-19a6-4e5e-bba5-77f278b7b278", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.6  # Changed from 0.7\n        self.cognitive_coeff = 1.7  # Changed from 1.5\n        self.social_coeff = 1.4  # Changed from 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.7  # Changed from 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.1\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            unique_scores = np.unique(personal_best_scores)\n            if len(unique_scores) > fitness_diversity_threshold * self.population_size:\n                for i in range(self.population_size):\n                    idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Refined", "description": "Hybrid PSO and JADE-DE with Fitness Diversity Control to maintain exploration-exploitation balance and prevent premature convergence.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7a6106bc-706c-43ba-9a78-1231b9b6fb11", "metadata": {"aucs": [0.6439192932473616, 0.60814587158792, 0.5999607727258474, 0.617593726209773, 0.6313574889418878, 0.634530747995145, 0.6358762150057338, 0.6208051911380279, 0.593963633958525, 0.20558580606499388, 0.15711072722938424, 0.21988827507123543, 0.25518027169624713, 0.173889596040268, 0.19317002256868998, 0.2446578693779955, 0.16429704027657333, 0.1960274881862294, 0.1628101057339758, 0.16561702195278283, 0.2220793482460186, 0.18892966676021727, 0.2299326252818843, 0.22026168499117893, 0.13045536350374642, 0.1573860491358975, 0.1824171996960332, 0.13907135684128957, 0.15116385887740091, 0.1311851432808746, 0.17561726064020333, 0.16566762369056598, 0.13612616665054644, 0.18008265466611761, 0.15384072943027638, 0.1346706482858142, 0.9472337038450545, 0.9454184017270238, 0.958274503381317, 0.8591112132312351, 0.9197784560790542, 0.9295435411146193, 0.9459507882895641, 0.9581171582259093, 0.9326612740100637, 0.27553739350688755, 0.33322659286993017, 0.22749572596203904, 0.3061404680177747, 0.2827070748475726, 0.3090445124272383, 0.2940004833829455, 0.1585628732547404, 0.24685682211286053, 0.515194907655005, 0.565343033829594, 0.21312270282627166, 0.47510647831655783, 0.28401635076129916, 0.20360822098274034, 0.6096013507101038, 0.2513784492466964, 0.23814006800994447, 0.30219591269985935, 0.12774537076242176, 0.17375519152130403, 0.1294506832308322, 0.17973211722203764, 0.12201831604362545, 0.14081367120091015, 0.15056288126530748, 0.18105334471078194, 0.2018218209796956, 0.14367082224599348, 0.12954100022857706, 0.16947919162697123, 0.10466910289717746, 0.15703470950288556, 0.1830652353670702, 0.07602374508787235, 0.13839860257565761, 0.008023243907158584, 0.03965028137807092, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07249882840612631, 0.039652225091383664, 0.04164647619632511, 0.22804043994278123, 0.0507269587167013, 0.12392443142271803, 0.14893912057060843, 0.08140865815730158, 0.08718043490609795, 0.04855278003719288, 0.15590692330342193, 0.05274835531358546, 0.1418483094774028, 0.10779492896233644, 0.06136943001939765, 0.08029681820661139, 0.04332458846347542, 0.07178057673480254, 0.07882719837882723, 0.0866687785748742, 0.08628399126761432, 0.11738972462569996, 0.09434918015025218, 0.12218268208708583, 0.08698598490375864, 0.11390988370766497, 0.10363620553448949, 0.10036875323937544, 0.11857809775843964, 0.10754486921163786, 0.44400771802550953, 0.4334656996023497, 0.443697517369361, 0.45853747711961657, 0.36983045661777536, 0.4193200747280522, 0.4464517143883985, 0.4434591503837785, 0.43695293685738, 0.08597602026550066, 0.08150005693531659, 0.09470470957548316, 0.12541428705114943, 0.08523167049218683, 0.1069923488813267, 0.09021211859258238, 0.08782687531784539, 0.08761626305733805, 0.16810830486459805, 0.18613719645310367, 0.16291928729322402, 0.21415615659965226, 0.26253915231456815, 0.16569788796427487, 0.2577213530636955, 0.1823555417727274, 0.16681441150934884, 0.25206163463546527, 0.32990794052574557, 0.24427249785335436, 0.23238022420991666, 0.286326409802392, 0.31023923294835654, 0.32353194925849915, 0.2706945284079286, 0.3314577382862307, 0.27429935890960855, 0.1820275040685504, 0.23027966712700043, 0.18482430743525036, 0.16605567832393353, 0.26724778216804945, 0.2292818249652394, 0.25220832402057836, 0.23369567172293126, 0.22362016466846968, 0.1833530226461234, 0.2044611026130848, 0.21064877554226313, 0.19648945914976135, 0.18741442068403336, 0.1770595958373924, 0.1764658750113144, 0.19851517549124909, 0.21202814915153467, 0.21127789432103605, 0.20289133803473425, 0.20129711830402552, 0.2029436888790188, 0.18799394513212542, 0.18973303064949765, 0.22908145497762966, 0.18420483634215667, 0.6327587012925819, 0.1581971715475442, 0.19796389181227714, 0.7036207686282614, 0.19537911043018563, 0.23790755508120742, 0.1507530773328073, 0.23010776126631016, 0.73482937168701, 0.40103843070207734, 0.20841515789229392, 0.4323895291358487, 0.16697630258539697, 0.3245250220170205, 0.22194480787174986, 0.1527824857549258, 0.1486399177742238, 0.39334018034786955, 0.18093020060586273, 0.1875824017553327, 0.17571989816545797, 0.20961638501310376, 0.1972726279011694, 0.18181138115472784, 0.19834353162475782, 0.17512072252279343, 0.1852950660627879, 0.07930403990899382, 0.07988255155746848, 0.07613899351643227, 0.0762162023270948, 0.08287019340999124, 0.08104348017152407, 0.0909988365003368, 0.0650253798215632, 0.07968320237990756]}, "mutation_prompt": null}
{"id": "31529023-0b0b-4262-848b-eb3803c47697", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.5  # Adjusted from 0.6\n        self.cognitive_coeff = 1.5  # Adjusted from 1.7\n        self.social_coeff = 1.6  # Adjusted from 1.4\n        self.mutation_factor = 0.6  # Adjusted for better exploration\n        self.crossover_prob_mean = 0.8  # Adjusted from 0.7\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.2  # Adjusted from 0.1\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Update velocities and positions with adaptive inertia\n            inertia_weight = 0.9 - 0.5 * (num_evaluations / self.budget)  # Adaptive inertia weight\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part with diversity boost\n            unique_scores = np.unique(personal_best_scores)\n            if len(unique_scores) > fitness_diversity_threshold * self.population_size:\n                for i in range(self.population_size):\n                    idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.05), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.05), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Enhanced", "description": "Enhanced PSO-DE hybrid with Adaptive Velocity Control and Diversity Boost Mechanism for robust convergence.", "configspace": "", "generation": 78, "fitness": 0.1925969812446455, "feedback": "The algorithm PSO_DE_Optimizer_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "7a6106bc-706c-43ba-9a78-1231b9b6fb11", "metadata": {"aucs": [0.44188699357966543, 0.4224706321156676, 0.4445898062198814, 0.4821061338414673, 0.42020580672138563, 0.48530281624014504, 0.425289233210305, 0.42317305870032684, 0.3901197225865133, 0.08638302891776961, 0.10257983652672287, 0.2075743537220206, 0.12666239549064662, 0.09862516984418979, 0.12060149402343956, 0.11540775176749252, 0.12787454159610412, 0.15315876513577076, 0.1073868873410051, 0.10754851581802072, 0.11874034965366498, 0.09086797617086595, 0.09361270848531245, 0.1202662468728608, 0.10874889142906541, 0.10826310136708839, 0.15163625194168528, 0.09044254613882263, 0.10751082652241761, 0.08480539313113078, 0.09540641685084406, 0.08148498246906732, 0.09023623587699825, 0.08900757569336637, 0.08808230881308643, 0.10025694069109814, 0.9599137159305646, 0.9473021848716084, 0.9593051163706947, 0.9053601422072736, 0.9329192342343561, 0.9445166129964532, 0.9594114541590739, 0.9587883280792261, 0.944239491811367, 0.18599701172511784, 0.18172150449079283, 0.14635987291291896, 0.15628264816467907, 0.23298525373909817, 0.15670169914852883, 0.13834780369890576, 0.1542163356106937, 0.1375673994487786, 0.27760683626179805, 0.1671535156349886, 0.26119094978829305, 0.25826857238522893, 0.19624901696758368, 0.27766097456123895, 0.2724424652848364, 0.14488345267833613, 0.2397845721730265, 0.09603081931951807, 0.06929139303223475, 0.11844231782043257, 0.08060430530182383, 0.11647308019482538, 0.08749707563924092, 0.13203929259426328, 0.11129963074121929, 0.10371304059588782, 0.09791060410194419, 0.10833233254792374, 0.09037747818272823, 0.10847688164058833, 0.10393393844824572, 0.11168899954295552, 0.10870506457913909, 0.06570291808463768, 0.1492685657633328, 9.999999999998899e-05, 9.999999999998899e-05, 0.009332064916369398, 9.999999999998899e-05, 0.0004066769528264791, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016578668202847924, 0.06858574710571796, 0.04095572291580574, 0.04746039975260086, 0.05908189634246397, 0.045427013492657875, 0.04522072389508247, 0.0701519276442466, 0.10164060698649968, 0.057901625847529226, 0.006305859061313979, 0.0029361926290928375, 0.014753340908263302, 0.004656786899682297, 0.009121497081747698, 0.012521427304351018, 0.003976578826383359, 0.00809087994312796, 0.014800098233209047, 0.0995785906497606, 0.023560610673698412, 0.05750711751937909, 0.11392932268045675, 0.06581963694204096, 0.0996284021293159, 0.046961268892696584, 0.05721195689618985, 0.06386459843346526, 0.372029982816937, 0.3620909207914994, 0.3613769275250771, 0.338641744617842, 0.3437681681284753, 0.3459060824932537, 0.3864141424438208, 0.3354104381624501, 0.3625257642455435, 0.07415483466094319, 0.10034869360295595, 0.07841364128038908, 0.08827063505424682, 0.07181263899819479, 0.10039417438474707, 0.07556667975887654, 0.10096331851564355, 0.07662470919997, 0.20898296220940737, 0.189686469092744, 0.16644619772918645, 0.20033696365625397, 0.16782514505917656, 0.1942285078841426, 0.2705162427531099, 0.1482739592400074, 0.1666293083504683, 0.22538054667580476, 0.23728194208357134, 0.24808560342734365, 0.21539083368670076, 0.226760189002832, 0.20934478717596838, 0.2283126673885013, 0.2663782975841411, 0.2702057351038095, 0.20221319987216535, 0.1590799003487947, 0.18089891620600607, 0.15001037748996293, 0.15667969890325784, 0.15702666325069825, 0.15502462953656615, 0.20092293807666584, 0.1866601693723433, 0.18960850378474392, 0.1675508141937666, 0.18278203262309434, 0.17874479772782892, 0.17899898827352922, 0.18959909609678038, 0.18522493029084908, 0.1680810934255884, 0.19374767600359477, 0.18088100003961827, 0.17766222228316042, 0.18339159944903083, 0.20858682995722266, 0.18399996283325049, 0.18219093786293183, 0.18059250919478875, 0.18575859171393516, 0.18811844484232587, 0.5175902574146141, 0.1602461366705693, 0.19556815748284473, 0.5042016985229587, 0.17265299691424263, 0.20422555010867127, 0.2093227180616456, 0.16146108797173186, 0.39459309003723, 0.2832398247245492, 0.20359242849014558, 0.2891898726255857, 0.21649156021532012, 0.21334580592428698, 0.13789390583178285, 0.18773707592147082, 0.3025136028308184, 0.1883482185359613, 0.1750719423110404, 0.1841870576777811, 0.17149689424945058, 0.17144109951605857, 0.18199164807209223, 0.19345892446784585, 0.17730497245076005, 0.17584760757993845, 0.1888198930597359, 0.06565632346692296, 0.06757998783855201, 0.0824527814679814, 0.06685737027523997, 0.0778475077588815, 0.06630297793134576, 0.07375979062089433, 0.07133802614008433, 0.07957673988928304]}, "mutation_prompt": null}
{"id": "a7146e41-a7b5-424e-b70e-9604bb5c6db2", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 60  # Increased population size\n        self.inertia_weight = 0.5  # Modified inertia weight for better convergence\n        self.cognitive_coeff = 1.5  # Adjusted cognitive coefficient\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.6  # Modified mutation factor\n        self.crossover_prob_mean = 0.6  # Adjustments for better exploration\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.15  # Adjusted threshold\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            unique_scores = np.unique(personal_best_scores)\n            if len(unique_scores) > fitness_diversity_threshold * self.population_size:\n                for i in range(self.population_size):\n                    idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Enhanced", "description": "Enhanced PSO-DE hybrid with adaptive search parameters and dynamic population adjustment for efficient convergence.", "configspace": "", "generation": 79, "fitness": 0.2442460752628359, "feedback": "The algorithm PSO_DE_Optimizer_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "7a6106bc-706c-43ba-9a78-1231b9b6fb11", "metadata": {"aucs": [0.6599937083375065, 0.6490387557885505, 0.6658845513067748, 0.6683301661824466, 0.6573199173332043, 0.6600712412073219, 0.6512212891175941, 0.6302723000656372, 0.6456874077592385, 0.26918732628754516, 0.14758229777553933, 0.18989082585663564, 0.2872774948232443, 0.26344499804806676, 0.21174683095506608, 0.2530964895263953, 0.26761452096650473, 0.1969220865250073, 0.1066088565208907, 0.12325500310144522, 0.1520092027571336, 0.14640243279152076, 0.1399960557890758, 0.12095199662451106, 0.13410577946634805, 0.16310550069134444, 0.190921091845196, 0.12873584952702932, 0.13255238227329524, 0.12301121038462626, 0.12059571093803001, 0.10907262032635534, 0.09787047285953543, 0.12734442436729532, 0.09640508806182801, 0.13952979127022713, 0.9331013450688246, 0.9188178158011484, 0.948485590220943, 0.9344835745275886, 0.9334284313529176, 0.9005101553795327, 0.9348612457853056, 0.9517413476698092, 0.9487114096242686, 0.3239897541857143, 0.3197460924261083, 0.12762425002693967, 0.15126013499302715, 0.14406535766982653, 0.3846242290488481, 0.1550711915286691, 0.29233638009031226, 0.34512047511696065, 0.34152335142806034, 0.28156430691010303, 0.16023511614330377, 0.26579454742152864, 0.21195333071040878, 0.24423431529016615, 0.28501487479928767, 0.28876630588596675, 0.20287574681905884, 0.15106350186345463, 0.1169096815909525, 0.13426420212777834, 0.11944293768019221, 0.1097497913337343, 0.16816955198529393, 0.1578011080123608, 0.19445320582069392, 0.13704902232643945, 0.1843492377897632, 0.10560520274573593, 0.2159326815781849, 0.14733841939291636, 0.16998676451838857, 0.2013758627360499, 0.21258558845133024, 0.10909310779732151, 0.12093715174389563, 0.007420931424423349, 0.06982783087822986, 0.02165780957536534, 0.07285634452961842, 0.008025655566380574, 0.012713828823009532, 0.011909966931918481, 9.999999999998899e-05, 0.07467091618650779, 0.075221375791649, 0.08061204394826038, 0.09670674142270785, 0.10038542479594559, 0.10486064417067698, 0.07851086692470721, 0.14844404742843853, 0.13283438237811585, 0.13190592533811996, 0.030529051362519044, 0.07042429831802965, 0.1801770276654464, 0.11233088202535291, 0.11482161227223009, 0.07377888811815281, 0.08899559011085878, 0.07653398066620154, 0.05333150522880625, 0.11258961107721621, 0.05367750096301882, 0.18500659386988905, 0.06008610396467606, 0.09087730507270642, 0.2256797474003368, 0.1118020455885731, 0.07109575431618631, 0.07369665875823539, 0.456880665081995, 0.4641092093399508, 0.43243575609126905, 0.4459053447092466, 0.4766696893982678, 0.4695027172242121, 0.4725695586673384, 0.4589737283362507, 0.47258591964031027, 0.0869684710641292, 0.08434160885052733, 0.07145967529483299, 0.0870975773999817, 0.07894767504236466, 0.08481455272091865, 0.11099608666520422, 0.11885682563822808, 0.10906237885190861, 0.19647932906152277, 0.2326401972532346, 0.2036655647929414, 0.2345246986764873, 0.2057316609570753, 0.34108497918647895, 0.21694382664523615, 0.1338969511340109, 0.24322679773474842, 0.33534450858520215, 0.33854075125222693, 0.27430598026030584, 0.22130052726651406, 0.3082018233632885, 0.24191266930839495, 0.26351465490257464, 0.37988475386712206, 0.3707427344021328, 0.23003726745743147, 0.19651195683449996, 0.2825535912223831, 0.1777908128276109, 0.16585790113866938, 0.2452767836430625, 0.18249545440587844, 0.21063307691337252, 0.19979121812305978, 0.19046072590014185, 0.17553323952722544, 0.20294331258868847, 0.22109800487431808, 0.18797472379212754, 0.1965082603288142, 0.2118232660733077, 0.20442764862026852, 0.2193817408492842, 0.21466694047647206, 0.19964505528058296, 0.2292832980986116, 0.19053300470429035, 0.19811982646403514, 0.25945331479058686, 0.23831576090598405, 0.19535368112361917, 0.23369656180377762, 0.7186732044722809, 0.18528192442182156, 0.1845395174239196, 0.821589808837232, 0.19864602171023849, 0.2600732006588591, 0.15687633205827334, 0.1646784827070633, 0.7678107664104207, 0.3930494554676175, 0.20725381909371832, 0.18310717691441936, 0.4590553713669002, 0.18417070131606528, 0.1542784416313494, 0.18002457166261865, 0.21580898607948695, 0.5484540579861235, 0.18816554750899128, 0.18716161177111879, 0.17560471637639152, 0.19629232242590866, 0.1714283026206782, 0.19931476371863133, 0.19347241167499762, 0.17676981676386772, 0.18228185091699656, 0.07678832147222403, 0.07283683463951551, 0.07558556743453504, 0.06329380841442855, 0.0809639044540067, 0.0828865010845884, 0.0835868447084811, 0.07793707804392247, 0.07792166932073918]}, "mutation_prompt": null}
{"id": "0e3678be-6146-489a-995a-681b0464a365", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.6\n        self.cognitive_coeff = 1.7\n        self.social_coeff = 1.4\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.7\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n        self.restart_threshold = 0.05  # new parameter for diversity-based restart\n\n    def __call__(self, func):\n        num_evaluations = 0\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.1\n\n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            if np.std(personal_best_scores) < self.restart_threshold * np.mean(personal_best_scores):\n                positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n                de_population = np.copy(positions)\n                continue\n\n            unique_scores = np.unique(personal_best_scores)\n            if len(unique_scores) > fitness_diversity_threshold * self.population_size:\n                for i in range(self.population_size):\n                    idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n\n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Enhanced", "description": "Enhanced hybrid PSO-JADE-DE optimizer using dynamic parameter adaptation and diversity-based restart mechanism to efficiently balance exploration and exploitation.", "configspace": "", "generation": 80, "fitness": 0.20539284741061672, "feedback": "The algorithm PSO_DE_Optimizer_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.17.", "error": "", "parent_id": "7a6106bc-706c-43ba-9a78-1231b9b6fb11", "metadata": {"aucs": [0.1801171540294676, 0.2375175810060115, 0.19713931743765534, 0.1709091716849147, 0.16011186711442227, 0.17741365322301117, 0.6358762150057338, 0.6208051911380279, 0.593963633958525, 0.20558580606499388, 0.15711072722938424, 0.21988827507123543, 0.25518027169624713, 0.173889596040268, 0.19317002256868998, 0.2446578693779955, 0.16429704027657333, 0.1960274881862294, 0.1628101057339758, 0.16561702195278283, 0.2220793482460186, 0.18892966676021727, 0.2299326252818843, 0.22026168499117893, 0.11510462447543701, 0.1573860491358975, 0.15695932860463913, 0.13907135684128957, 0.15116385887740091, 0.1311851432808746, 0.14611806697792695, 0.1317873104082351, 0.13612616665054644, 0.15003863682094032, 0.15384072943027638, 0.11066897205251591, 0.9472337038450545, 0.9454184017270238, 0.958274503381317, 0.09267499438384852, 0.08146514658535631, 0.07514361834471017, 0.9459507882895641, 0.9581171582259093, 0.9326612740100637, 0.26333687368424596, 0.31672687292656654, 0.1888719010103449, 0.24719435373265497, 0.2548624127506114, 0.26640013167743093, 0.2940004833829455, 0.1585628732547404, 0.24685682211286053, 0.20511579873295227, 0.16830939171172832, 0.20815486560327923, 0.19679606836916497, 0.20489857851741877, 0.1865692530583708, 0.6096013507101038, 0.2513784492466964, 0.23814006800994447, 0.15361022576333383, 0.12774537076242176, 0.17372684033065233, 0.1294506832308322, 0.17973211722203764, 0.12201831604362545, 0.1308350771009984, 0.13915171870726717, 0.1735942239072138, 0.17320983048145755, 0.1276248886219008, 0.12954100022857706, 0.16826171499279152, 0.10184743371909422, 0.14870954345649712, 0.17901807630563038, 0.07602374508787235, 0.13839860257565761, 0.008023243907158584, 0.03965028137807092, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07249882840612631, 0.039652225091383664, 0.04164647619632511, 0.22804043994278123, 0.0507269587167013, 0.12392443142271803, 0.14893912057060843, 0.08140865815730158, 0.08718043490609795, 0.04855278003719288, 0.15590692330342193, 0.05274835531358546, 0.1418483094774028, 0.10779492896233644, 0.06136943001939765, 0.08029681820661139, 0.04332458846347542, 0.07178057673480254, 0.07882719837882723, 0.0866687785748742, 0.08628399126761432, 0.11629322982450518, 0.09434918015025218, 0.12192337562617772, 0.0837271774931303, 0.11390988370766497, 0.07971753281141158, 0.10036875323937544, 0.11857809775843964, 0.10754486921163786, 0.44400771802550953, 0.4334656996023497, 0.443697517369361, 0.45853747711961657, 0.36983045661777536, 0.4193200747280522, 0.24070692973767638, 0.20457488816993508, 0.1954225481362829, 0.06308543987327397, 0.04877588366357544, 0.051521152803750914, 0.12541428705114943, 0.08523167049218683, 0.1069923488813267, 0.09021211859258238, 0.08782687531784539, 0.08761626305733805, 0.16810830486459805, 0.18613719645310367, 0.16291928729322402, 0.21415615659965226, 0.26253915231456815, 0.16569788796427487, 0.2577213530636955, 0.1823555417727274, 0.16681441150934884, 0.25206163463546527, 0.32990794052574557, 0.24427249785335436, 0.196175114114846, 0.2630536911080512, 0.23467577856254274, 0.16937085227930582, 0.18266292712674137, 0.1710817915306474, 0.27429935890960855, 0.1820275040685504, 0.23027966712700043, 0.18482430743525036, 0.1636558384990896, 0.25374442684019527, 0.12199813609260912, 0.13513551404805912, 0.12807860043038688, 0.22362016466846968, 0.1833530226461234, 0.2044611026130848, 0.1628032513354667, 0.1657378707617696, 0.18608773543216106, 0.1528692966144305, 0.1715623660872716, 0.16331743658805464, 0.21202814915153467, 0.21127789432103605, 0.20289133803473425, 0.1808166966579523, 0.16969547684812336, 0.17588896098943319, 0.1703918453031109, 0.22412009548670409, 0.16528580844474272, 0.6327587012925819, 0.1581971715475442, 0.19796389181227714, 0.7036207686282614, 0.19537911043018563, 0.23790755508120742, 0.1507530773328073, 0.23010776126631016, 0.73482937168701, 0.40103843070207734, 0.20841515789229392, 0.4323895291358487, 0.15954599242459777, 0.2590609976294763, 0.14460698523018722, 0.1527824857549258, 0.1486399177742238, 0.39334018034786955, 0.18093020060586273, 0.1875824017553327, 0.17571989816545797, 0.20961638501310376, 0.1972726279011694, 0.18181138115472784, 0.19834353162475782, 0.17512072252279343, 0.1852950660627879, 0.07748357793861305, 0.07988255155746848, 0.07476602093217843, 0.0762162023270948, 0.08287019340999124, 0.08104348017152407, 0.0909988365003368, 0.0650253798215632, 0.07968320237990756]}, "mutation_prompt": null}
{"id": "e4242f85-02bc-4775-8959-ba5e9d735721", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Refined_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 50\n        self.inertia_weight = 0.6\n        self.cognitive_coeff = 1.7\n        self.social_coeff = 1.4\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.7\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n        self.population_growth_rate = 0.1  # New\n\n    def __call__(self, func):\n        num_evaluations = 0\n        population_size = self.initial_population_size\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.1\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            r1, r2 = np.random.rand(population_size, self.dim), np.random.rand(population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            unique_scores = np.unique(personal_best_scores)\n            if len(unique_scores) > fitness_diversity_threshold * population_size:\n                for i in range(population_size):\n                    idx = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n            if num_evaluations % (self.budget // 5) == 0:  # Every 20% of the budget\n                population_size = min(100, int(population_size * (1 + self.population_growth_rate)))\n                new_positions = np.random.uniform(self.lower_bound, self.upper_bound, (population_size - len(positions), self.dim))\n                positions = np.vstack((positions, new_positions))\n                velocities = np.vstack((velocities, np.random.uniform(-1, 1, (population_size - len(velocities), self.dim))))\n                personal_best_positions = np.vstack((personal_best_positions, new_positions))\n                personal_best_scores = np.append(personal_best_scores, np.full(new_positions.shape[0], float('inf')))\n                de_population = np.vstack((de_population, new_positions))\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Refined_V2", "description": "Incorporate adaptive parameter control and a dynamic population size mechanism to enhance exploration-exploitation balance in hybrid PSO-DE.", "configspace": "", "generation": 81, "fitness": 0.23999993795942304, "feedback": "The algorithm PSO_DE_Optimizer_Refined_V2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "7a6106bc-706c-43ba-9a78-1231b9b6fb11", "metadata": {"aucs": [0.6234228588766648, 0.5908021924055793, 0.6037754225256, 0.5961245580065011, 0.6235013862136938, 0.6274933942943626, 0.6111109297229397, 0.5935003137439181, 0.5847398448663697, 0.17578911494331673, 0.17209541957287, 0.16516475236333084, 0.23434139352169103, 0.16200745653354987, 0.1690304121573869, 0.22552575561821997, 0.20243663515974475, 0.14391260236445236, 0.15437684452452827, 0.1418260288425125, 0.1617296480108784, 0.12282181576016504, 0.25086219384400643, 0.21244339323184702, 0.11983032417697503, 0.16062816211860986, 0.20419352828255133, 0.18257019568153643, 0.12344068932870289, 0.1320405803487329, 0.16328587081764145, 0.13813154761284407, 0.12680502752956813, 0.18170448447918586, 0.13041523675678401, 0.1073210072333699, 0.9472337038450545, 0.9454184017270238, 0.958274503381317, 0.8591112132312351, 0.9197784560790542, 0.9295435411146193, 0.9459507882895641, 0.9581171582259093, 0.9326612740100637, 0.27446560322914726, 0.35944609920261295, 0.16759191688632058, 0.289117922638521, 0.2974424741328826, 0.2777093717973709, 0.2882626040047813, 0.23871103738744848, 0.2576039295056677, 0.4956842395685982, 0.25799082808211604, 0.43051250317340195, 0.33674555057811373, 0.3273808969866485, 0.18996142826988283, 0.325699650131534, 0.265781690025352, 0.22661635385591494, 0.1894516692556002, 0.11943905692860901, 0.1776065126776657, 0.1163260729521437, 0.1806212587109558, 0.11754687438165057, 0.1462880675168997, 0.1479557294866769, 0.18233105025966478, 0.19147170039407535, 0.15208416351644516, 0.11557110539579785, 0.1560893731505033, 0.12154295040532648, 0.15319797558941828, 0.17028056318755114, 0.05377444717302793, 0.13775480443310772, 0.05262241318079308, 0.02068700283842917, 0.02785073652967407, 0.022689525029349733, 0.038931666266048714, 9.999999999998899e-05, 0.05576002831510429, 0.031161737582062088, 0.062212524326816454, 0.2333678493910707, 0.054038814407069924, 0.08289622888882953, 0.1415557981133203, 0.05323960159000485, 0.12168366504780093, 0.06088859720691975, 0.23272157043807917, 0.08155228852549568, 0.11782380404192372, 0.11126487923597106, 0.05629347811409702, 0.05846123739335274, 0.044603879977184624, 0.0744381273518544, 0.07058535408511712, 0.09825690569648182, 0.08379512634253383, 0.1149606387910761, 0.09769495123981597, 0.11138018177826126, 0.10461026832867482, 0.11799986702275878, 0.06083707572702424, 0.10776308871080731, 0.12106089355800431, 0.07416727818659696, 0.43622520266757214, 0.4374352096651425, 0.4418260556827831, 0.4357561235437696, 0.3598171098988604, 0.4449209540359135, 0.46652722226212484, 0.41718531984944485, 0.45265434142995287, 0.09781013470124145, 0.08440063251964147, 0.08189823229300441, 0.12503270011470957, 0.09119625499160722, 0.10239946054599225, 0.07845110337252059, 0.09616312196199084, 0.09752051738514711, 0.16614736541911113, 0.1827027137369308, 0.19204815863970648, 0.20576952296966888, 0.2869500006047103, 0.17169978797077146, 0.25603629647859294, 0.20629052719160623, 0.17553533562957868, 0.24353668414783514, 0.3465393739772519, 0.24532069453496463, 0.2253559305604491, 0.29251756791417927, 0.3407887929729858, 0.2971566119980409, 0.2754556097035543, 0.33864457924166036, 0.24799502429042464, 0.1613789182094213, 0.21612433917031582, 0.18053434699414106, 0.16718235574715912, 0.25912705564448524, 0.23229876403028837, 0.24691092079352617, 0.22999956226937834, 0.22173312801762812, 0.18668083518905587, 0.19898845739170024, 0.21625031164151554, 0.19895057281553863, 0.18626104272375632, 0.18953276313057343, 0.18093040669505656, 0.20563991372291235, 0.2071189872053485, 0.20806149929728213, 0.19770895209708228, 0.19018318051244865, 0.20298871521201567, 0.19547746307620406, 0.1947409633020436, 0.22953458160326168, 0.18616836487583677, 0.5700277734503028, 0.15684415017222875, 0.16348621207754588, 0.6996278868428957, 0.21681361384587394, 0.2505458849289671, 0.1477491040868979, 0.1699094694930181, 0.7182147509386299, 0.41149579129803215, 0.20841737210457978, 0.4127878872242937, 0.16261968368059276, 0.2983513909580193, 0.23699847136330432, 0.1677642732192478, 0.14212909131989748, 0.31932589832793246, 0.18291422399592228, 0.1875824017553327, 0.17456600965663238, 0.20961638501310376, 0.1980267025901581, 0.17641523228937162, 0.18368163662654446, 0.1837165183969789, 0.1873120327993747, 0.08235000600665776, 0.07979190156594107, 0.0733753806571249, 0.07782959079476293, 0.08593178572279225, 0.08301331057932315, 0.09011696939713698, 0.06407115614375603, 0.0810453541364683]}, "mutation_prompt": null}
{"id": "ec22d78b-fbda-4b87-876b-31c69ee4cb9a", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.6  # Changed from 0.7\n        self.cognitive_coeff = 1.7  # Changed from 1.5\n        self.social_coeff = 1.4  # Changed from 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.7  # Changed from 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.1\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            unique_scores = np.unique(personal_best_scores)\n            if len(unique_scores) > fitness_diversity_threshold * self.population_size:\n                for i in range(self.population_size):\n                    idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Refined", "description": "Hybrid PSO and JADE-DE with Fitness Diversity Control to maintain exploration-exploitation balance and prevent premature convergence.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7a6106bc-706c-43ba-9a78-1231b9b6fb11", "metadata": {"aucs": [0.6439192932473616, 0.60814587158792, 0.5999607727258474, 0.617593726209773, 0.6313574889418878, 0.634530747995145, 0.6358762150057338, 0.6208051911380279, 0.593963633958525, 0.20558580606499388, 0.15711072722938424, 0.21988827507123543, 0.25518027169624713, 0.173889596040268, 0.19317002256868998, 0.2446578693779955, 0.16429704027657333, 0.1960274881862294, 0.1628101057339758, 0.16561702195278283, 0.2220793482460186, 0.18892966676021727, 0.2299326252818843, 0.22026168499117893, 0.13045536350374642, 0.1573860491358975, 0.1824171996960332, 0.13907135684128957, 0.15116385887740091, 0.1311851432808746, 0.17561726064020333, 0.16566762369056598, 0.13612616665054644, 0.18008265466611761, 0.15384072943027638, 0.1346706482858142, 0.9472337038450545, 0.9454184017270238, 0.958274503381317, 0.8591112132312351, 0.9197784560790542, 0.9295435411146193, 0.9459507882895641, 0.9581171582259093, 0.9326612740100637, 0.27553739350688755, 0.33322659286993017, 0.22749572596203904, 0.3061404680177747, 0.2827070748475726, 0.3090445124272383, 0.2940004833829455, 0.1585628732547404, 0.24685682211286053, 0.515194907655005, 0.565343033829594, 0.21312270282627166, 0.47510647831655783, 0.28401635076129916, 0.20360822098274034, 0.6096013507101038, 0.2513784492466964, 0.23814006800994447, 0.30219591269985935, 0.12774537076242176, 0.17375519152130403, 0.1294506832308322, 0.17973211722203764, 0.12201831604362545, 0.14081367120091015, 0.15056288126530748, 0.18105334471078194, 0.2018218209796956, 0.14367082224599348, 0.12954100022857706, 0.16947919162697123, 0.10466910289717746, 0.15703470950288556, 0.1830652353670702, 0.07602374508787235, 0.13839860257565761, 0.008023243907158584, 0.03965028137807092, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07249882840612631, 0.039652225091383664, 0.04164647619632511, 0.22804043994278123, 0.0507269587167013, 0.12392443142271803, 0.14893912057060843, 0.08140865815730158, 0.08718043490609795, 0.04855278003719288, 0.15590692330342193, 0.05274835531358546, 0.1418483094774028, 0.10779492896233644, 0.06136943001939765, 0.08029681820661139, 0.04332458846347542, 0.07178057673480254, 0.07882719837882723, 0.0866687785748742, 0.08628399126761432, 0.11738972462569996, 0.09434918015025218, 0.12218268208708583, 0.08698598490375864, 0.11390988370766497, 0.10363620553448949, 0.10036875323937544, 0.11857809775843964, 0.10754486921163786, 0.44400771802550953, 0.4334656996023497, 0.443697517369361, 0.45853747711961657, 0.36983045661777536, 0.4193200747280522, 0.4464517143883985, 0.4434591503837785, 0.43695293685738, 0.08597602026550066, 0.08150005693531659, 0.09470470957548316, 0.12541428705114943, 0.08523167049218683, 0.1069923488813267, 0.09021211859258238, 0.08782687531784539, 0.08761626305733805, 0.16810830486459805, 0.18613719645310367, 0.16291928729322402, 0.21415615659965226, 0.26253915231456815, 0.16569788796427487, 0.2577213530636955, 0.1823555417727274, 0.16681441150934884, 0.25206163463546527, 0.32990794052574557, 0.24427249785335436, 0.23238022420991666, 0.286326409802392, 0.31023923294835654, 0.32353194925849915, 0.2706945284079286, 0.3314577382862307, 0.27429935890960855, 0.1820275040685504, 0.23027966712700043, 0.18482430743525036, 0.16605567832393353, 0.26724778216804945, 0.2292818249652394, 0.25220832402057836, 0.23369567172293126, 0.22362016466846968, 0.1833530226461234, 0.2044611026130848, 0.21064877554226313, 0.19648945914976135, 0.18741442068403336, 0.1770595958373924, 0.1764658750113144, 0.19851517549124909, 0.21202814915153467, 0.21127789432103605, 0.20289133803473425, 0.20129711830402552, 0.2029436888790188, 0.18799394513212542, 0.18973303064949765, 0.22908145497762966, 0.18420483634215667, 0.6327587012925819, 0.1581971715475442, 0.19796389181227714, 0.7036207686282614, 0.19537911043018563, 0.23790755508120742, 0.1507530773328073, 0.23010776126631016, 0.73482937168701, 0.40103843070207734, 0.20841515789229392, 0.4323895291358487, 0.16697630258539697, 0.3245250220170205, 0.22194480787174986, 0.1527824857549258, 0.1486399177742238, 0.39334018034786955, 0.18093020060586273, 0.1875824017553327, 0.17571989816545797, 0.20961638501310376, 0.1972726279011694, 0.18181138115472784, 0.19834353162475782, 0.17512072252279343, 0.1852950660627879, 0.07930403990899382, 0.07988255155746848, 0.07613899351643227, 0.0762162023270948, 0.08287019340999124, 0.08104348017152407, 0.0909988365003368, 0.0650253798215632, 0.07968320237990756]}, "mutation_prompt": null}
{"id": "2d0cb2e1-6b13-4dbf-b135-ce8b42caeb53", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.6\n        self.cognitive_coeff = 1.7\n        self.social_coeff = 1.4\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.7  # Mean crossover probability\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.05 + 0.1 * np.random.rand()  # Dynamic diversity threshold\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            unique_scores = np.unique(personal_best_scores)\n            if len(unique_scores) > fitness_diversity_threshold * self.population_size:\n                for i in range(self.population_size):\n                    idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.05) * self.mu_mutation_factor + 0.05 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.05) * self.mu_crossover_prob + 0.05 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Enhanced", "description": "Enhanced adaptive control of mutation and crossover in hybrid PSO-DE with dynamic diversity threshold for robust global search.", "configspace": "", "generation": 83, "fitness": 0.23942695874149442, "feedback": "The algorithm PSO_DE_Optimizer_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "7a6106bc-706c-43ba-9a78-1231b9b6fb11", "metadata": {"aucs": [0.6163193898656205, 0.6209098679849372, 0.618920274482589, 0.6146857028191028, 0.5903626325611333, 0.5918609673659119, 0.6344378139946805, 0.607078759394853, 0.5970005808324843, 0.2338786665272955, 0.16024890334560515, 0.17615545481068295, 0.2026601412361866, 0.22990173255259494, 0.20003244886664184, 0.20049186169854838, 0.2475728807316786, 0.22362925674804468, 0.11334764391076402, 0.1532500601425485, 0.1504929969156108, 0.12882063900900065, 0.10941319958973705, 0.11455234363898104, 0.09617247788289496, 0.12650337750170748, 0.10513008277706415, 0.09907061299248021, 0.09876292364771344, 0.1376215854089634, 0.10447261181183154, 0.1716964758476659, 0.1708514058936973, 0.13231919464648523, 0.11821526319354214, 0.13010981204127692, 0.9344001760040618, 0.9423176138965238, 0.958519776752243, 0.9045068572967145, 0.9480971359635895, 0.9435327151222499, 0.9325518254149886, 0.9459631105937001, 0.9453561558417436, 0.3331997067224818, 0.3578246001944382, 0.2999954042606964, 0.29586139935056444, 0.2633286606641483, 0.1724995887328159, 0.3224754668645111, 0.29574643127277933, 0.31519246687048985, 0.2145789018461518, 0.2368890600781005, 0.2256869336428986, 0.3987606572543888, 0.7349204097301566, 0.24302777220053062, 0.2320834938748424, 0.24613981395415208, 0.23963515851053518, 0.20166768015269332, 0.13497588298236984, 0.12321920157297939, 0.11971977311293813, 0.1424622725661111, 0.1333506116769524, 0.15456322198985495, 0.26771952280453515, 0.1567818783412751, 0.1388434145765175, 0.3007364089873412, 0.1587922793689146, 0.1449346117779744, 0.14264928338761096, 0.1590477914177254, 0.16905114131728083, 0.12064308574725802, 0.14874703380294396, 0.0010005760815121612, 9.999999999998899e-05, 0.013340315977752315, 0.02749133511810542, 9.999999999998899e-05, 0.028212725777570946, 0.03867761828881178, 0.020196812387258456, 0.04576390326048019, 0.1586409613180031, 0.05451428565401073, 0.04053180069243867, 0.060093857900532344, 0.04828128027384915, 0.08712532909483839, 0.06801187385934115, 0.09626827926747306, 0.14933122542260935, 0.13662537797370644, 0.029047780476514684, 0.0858768099170879, 0.05272679092432153, 0.08737267022484063, 0.06571847730034475, 0.06965314051461557, 0.056608588271947924, 0.056276695857309655, 0.11140349548695216, 0.051478605688563994, 0.18798840285316398, 0.12270028972599445, 0.16347304011385733, 0.1459015904999611, 0.12197553360965308, 0.17108029368841093, 0.10224603259550336, 0.4475396280046865, 0.43111205252785645, 0.44197935906843444, 0.42928179342023765, 0.42012977945427743, 0.43476906866416487, 0.4409891085527353, 0.4291311544001146, 0.45900377380381296, 0.11689375562630899, 0.09516385747431122, 0.07738173409092142, 0.13191223883634307, 0.08688179150058872, 0.09939185306400888, 0.08325508943379878, 0.1137621522478588, 0.09886810400471424, 0.16614023855522886, 0.17177278623091807, 0.16782308822863745, 0.311546958763096, 0.18215702765880026, 0.2226163224690043, 0.34152233421859624, 0.15575961177725495, 0.15219332333051394, 0.23006010886379358, 0.264253449884051, 0.31965039572377063, 0.2701398783997848, 0.3152456253895509, 0.2478839346085594, 0.33523692747537404, 0.2817317806908467, 0.2911608188658643, 0.23442644892994013, 0.22624782839855329, 0.27018701110570287, 0.21220660991130358, 0.15153203628898226, 0.20927734359620476, 0.2168140346997648, 0.21102038740419315, 0.21614322117033258, 0.19569901532805445, 0.20129675333375696, 0.16994927279166783, 0.2015389108990816, 0.20070435192824565, 0.21327818199886617, 0.21482062544133862, 0.18016010326066256, 0.18741785723256, 0.19719382590495993, 0.18580119622353286, 0.18787678685155784, 0.2159338002478537, 0.18443877537007014, 0.18633629096688453, 0.21164614899399814, 0.1937452656948191, 0.1871749041548938, 0.7757181194480617, 0.18041326884753928, 0.23346285858086246, 0.7803306471226552, 0.21643796468958554, 0.1981319250241529, 0.164436228547445, 0.15340339819401927, 0.7424956301072889, 0.34339094708009843, 0.21031681993018025, 0.2515733000921555, 0.19895153357925688, 0.19510013206165888, 0.16082989324075858, 0.19961983936186756, 0.164200406330274, 0.29434900074923875, 0.17571679751611557, 0.17975458334859717, 0.19057861750775784, 0.1751115824865992, 0.18253230482754823, 0.2024051942134042, 0.17386654173547633, 0.17585613187182603, 0.20203141892944, 0.07434041708211192, 0.08383584089661966, 0.07552740513840384, 0.08797185280404263, 0.07309241031197655, 0.07420196059323003, 0.0691905618819223, 0.06516965544040143, 0.08088777789195134]}, "mutation_prompt": null}
{"id": "c07ff135-4fb8-407b-9ea3-b2e6a8940d5c", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Adaptive:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7  # Adaptive inertia\n        self.cognitive_coeff = 1.5  # Adaptive cognitive coefficient\n        self.social_coeff = 1.5  # Adaptive social coefficient\n        self.mutation_factor = 0.8  # Enhanced mutation factor\n        self.crossover_prob_mean = 0.7\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.6  # Adjusted mu for mutation factor\n        self.mu_crossover_prob = 0.6  # Adjusted mu for crossover prob\n\n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.15  # Increased diversity threshold\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.inertia_weight = 0.5 + 0.4 * (1 - num_evaluations / self.budget)  # Adaptive inertia\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            unique_scores = np.unique(personal_best_scores)\n            if len(unique_scores) > fitness_diversity_threshold * self.population_size:\n                for i in range(self.population_size):\n                    idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Adaptive", "description": "Improved hybrid PSO and JADE-DE with adaptive parameters and enhanced diversity control to boost exploration and exploitation.", "configspace": "", "generation": 84, "fitness": 0.20481461942967738, "feedback": "The algorithm PSO_DE_Optimizer_Adaptive got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "7a6106bc-706c-43ba-9a78-1231b9b6fb11", "metadata": {"aucs": [0.46416149908922344, 0.47534949520665837, 0.5287140353627301, 0.45999842820828174, 0.414278270544308, 0.4589663199941354, 0.46801746392317767, 0.5050661104089691, 0.4806489972516925, 0.18859604147299514, 0.08530508765941636, 0.20894726373953454, 0.18020270543060157, 0.14313042103456097, 0.1749434574810762, 0.22696516731080796, 0.14219255369280148, 0.23874656793773608, 0.10473670346002395, 0.14876708880708667, 0.10334151574816952, 0.1061752727927675, 0.10482933453387999, 0.13533875084485514, 0.12263761137965778, 0.10288631134885196, 0.15433250177392532, 0.12213903392029657, 0.08286976046613503, 0.09000382420354924, 0.10649619421308476, 0.11512711464901171, 0.10768514783397587, 0.12238231586654402, 0.12522668913312973, 0.10158250753358467, 0.958814675235111, 0.9472090407612073, 0.9595759637048268, 0.8924041755339457, 0.934353280168725, 0.9442278855854, 0.9588243201626077, 0.9586855407024132, 0.9446201045921273, 0.1823018017210194, 0.1921185076473887, 0.0850312359343286, 0.17982094511177005, 0.15966616324443272, 0.16259398854756457, 0.10179858216793092, 0.11698012776475475, 0.1351670495982129, 0.5012191307694582, 0.2601988969547361, 0.27644794631165803, 0.28130039456886513, 0.1809235401740551, 0.3547960235707899, 0.23311249347667162, 0.18705605775541323, 0.2378253107282121, 0.14444356290088778, 0.06628727795962897, 0.1533229359617697, 0.11862392276252609, 0.1123999046135401, 0.11716614456807439, 0.19062058138867521, 0.11955205463072194, 0.13383869439009743, 0.162492822895272, 0.08969815403784887, 0.11031164106297309, 0.1278845417212333, 0.11691293968596872, 0.10129970600354721, 0.12766990355412067, 0.07624605808518825, 0.13003492933203464, 0.04980161412116979, 9.999999999998899e-05, 0.05062100862236074, 0.03236981381104509, 0.0465865351427186, 9.999999999998899e-05, 0.04035066970917345, 0.10356503411915308, 0.04270048776643509, 0.19094168298957626, 0.08156483219338007, 0.14338854118469935, 0.1216649251559433, 0.05555857913034257, 0.16231377765373745, 0.14768937534145476, 0.03866885415381638, 0.09320463929103862, 0.037085707406306234, 0.0031081704895572493, 0.018561772096244544, 0.05214623173113031, 0.0016018165219796598, 0.02303529332476406, 0.04137775764710061, 0.01939945652598485, 0.005831420203234461, 0.09214552797481868, 0.07415261101552784, 0.10159412092939235, 0.06356987370987377, 0.08232479982789387, 0.0602193427194585, 0.12096825087970409, 0.11175620594469116, 0.07574737911173124, 0.42076017505127306, 0.37723673519681433, 0.3818168843551759, 0.3831880815676548, 0.35421885897224414, 0.40995764789624023, 0.39851856301083943, 0.38325196207230305, 0.38081094984874997, 0.07621135369539245, 0.07558247414812813, 0.08038311192617598, 0.07955671043242707, 0.07061580552340041, 0.09162132427570246, 0.08584375421733292, 0.0971309118749979, 0.0805019627412068, 0.15484608467854866, 0.15872707625894222, 0.1716257200177994, 0.20143785622234223, 0.1929624893743671, 0.13626200674278366, 0.2022131559103204, 0.16415897371609667, 0.2082248307818958, 0.26673109588771826, 0.21060668307821484, 0.25436994372474253, 0.2825542702200493, 0.2638588710593659, 0.24002372105865355, 0.2781328570015079, 0.2851785940729349, 0.26678770402187035, 0.2003429144505201, 0.15932545029268008, 0.22814905472534652, 0.16723625559745448, 0.18630016272688743, 0.1900104082417592, 0.19545117997850403, 0.17023377543118545, 0.19720797086831798, 0.19384138965852415, 0.16245548735402937, 0.17657481283772047, 0.18062338388118548, 0.18616112469298696, 0.168449420923795, 0.19245271528618224, 0.18623969386896377, 0.1853135799823874, 0.17851790057097294, 0.18397703587003233, 0.18059315953237642, 0.18065674843163737, 0.18790145181164586, 0.19146277657112631, 0.17761687896999123, 0.1912028984256754, 0.18533862485741714, 0.46922494482988497, 0.15324760782088365, 0.16393809348459476, 0.3533170675705616, 0.25600218276225717, 0.1871432234963324, 0.18152282656772556, 0.16372880868808937, 0.19648022468873272, 0.3134051716467944, 0.18034015209658083, 0.27949777616956395, 0.1952563682581432, 0.20524876924187085, 0.1992084637822541, 0.17838765289438652, 0.1760314662660758, 0.17726620211965272, 0.181035354409121, 0.17200339695684574, 0.1738804206929644, 0.1817392242940763, 0.17770517072700387, 0.1796086196611203, 0.17828914736657642, 0.17723691918562723, 0.18299933565449777, 0.0741711822037121, 0.07257099903683106, 0.06561116856043958, 0.06377735372165683, 0.07288342947240056, 0.07408040204428945, 0.07886747211495881, 0.07821262602947832, 0.06401048507040397]}, "mutation_prompt": null}
{"id": "1be9aaa4-c4bb-4678-9bc2-083cb4798999", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.6  # Adjusted inertia weight\n        self.cognitive_coeff = 1.7  # Enhanced cognitive coefficient\n        self.social_coeff = 1.4  # Enhanced social coefficient\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.7  # Adjusted crossover probability\n        self.adapt_factor = 0.1  # Adaptive factor added\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.1\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n\n            # Adaptive inertia weight update\n            self.inertia_weight = 0.4 + 0.5 * (1 - (num_evaluations / self.budget))\n            \n            # Update velocities and positions with adaptive inertia weight\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part with adaptive crossover probability\n            unique_scores = np.unique(personal_best_scores)\n            if len(unique_scores) > fitness_diversity_threshold * self.population_size:\n                for i in range(self.population_size):\n                    idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n\n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    if np.random.rand() < self.adapt_factor:  # Adaptive mechanism\n                        current_crossover_prob = np.clip(current_crossover_prob * (1 - num_evaluations / self.budget), 0, 1)\n                    \n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Enhanced", "description": "Enhanced Hybrid PSO and JADE-DE with Adaptive Mechanisms for Dynamic Parameter Adjustment and Enhanced Convergence.", "configspace": "", "generation": 85, "fitness": 0.20422486019533873, "feedback": "The algorithm PSO_DE_Optimizer_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "7a6106bc-706c-43ba-9a78-1231b9b6fb11", "metadata": {"aucs": [0.4896699027674519, 0.42150326320762355, 0.4746169329625817, 0.4819294381788687, 0.4432946715557857, 0.4282331524319237, 0.4943823220747099, 0.43028925021908715, 0.44868977820342537, 0.11669442697257693, 0.11346132220607963, 0.12485849073134692, 0.13588402766200958, 0.10374930483416667, 0.10514448294402468, 0.07394126752016672, 0.15622961242523692, 0.11381261447081525, 0.2344801185755364, 0.16268709561778638, 0.13234147663459916, 0.15061686476708414, 0.09904793650768984, 0.2350564849205501, 0.11039024158386368, 0.14913179111403896, 0.09520359820610647, 0.1473786183954382, 0.16013486123406695, 0.1735643985248937, 0.10737756271733889, 0.14807329212270637, 0.14736854137749833, 0.09092101330673974, 0.11676878457574402, 0.10498170750027236, 0.9578513218585727, 0.9453648034509474, 0.9587519188983092, 0.866369517415112, 0.9442257719426658, 0.9445566093407818, 0.9582129525513785, 0.9580875267466535, 0.9569888654555948, 0.1988524675414316, 0.21994900258201233, 0.1631205638981864, 0.210606475303596, 0.1425556340122357, 0.18916974049961088, 0.1419817284341207, 0.15225796651980616, 0.20305081866224073, 0.19784515424268312, 0.2541961544774153, 0.2251403564764416, 0.22691315049444127, 0.5147540414031324, 0.2716607917652254, 0.17517540420397804, 0.36683006998995804, 0.1993378413574204, 0.13678798842644646, 0.08409618614054193, 0.11033697264256093, 0.1181497774224981, 0.10242064449904609, 0.11409046114743082, 0.10995396660248191, 0.1140896530013299, 0.11022153044939464, 0.1109042292683956, 0.16608511825674344, 0.13921983928309678, 0.12388339357184863, 0.09056673984843855, 0.1410459577256966, 0.10697064600218542, 0.054591409786456824, 0.11912108892549544, 9.999999999998899e-05, 9.999999999998899e-05, 0.010525592945528128, 9.999999999998899e-05, 0.061284586640599104, 0.004420782803641998, 0.0694645361644638, 0.015092535178139355, 0.06111835425230305, 0.12250803447091552, 0.09680197156168246, 0.08955425691495733, 0.04862456009216254, 0.1248022475121694, 0.07644609457123175, 0.12928490633996004, 0.20966596175886243, 0.16011121658601368, 0.0032254899618570088, 9.999999999998899e-05, 0.01547104461585691, 0.008014057364431948, 0.011660958450110614, 0.020985966607164896, 0.022084304791511578, 0.012378656814799105, 0.01066292177894379, 0.07917404233773107, 0.0414509014344554, 0.04847124038985473, 0.05375041138623038, 0.08766925551634408, 0.04037390915533923, 0.050934683434974426, 0.04370792894732456, 0.08477465962896802, 0.3502514203364513, 0.3870351148866007, 0.3734476076483879, 0.36057645907064584, 0.3693349589331255, 0.3525987470653652, 0.3716688596606458, 0.3364971776354688, 0.35880858491221423, 0.0750696042496124, 0.0751959655392046, 0.09085699312220641, 0.09675117301774172, 0.08924577209996809, 0.07657442360893418, 0.07749788239658029, 0.08513942421827725, 0.07967143710972902, 0.1517854520405435, 0.16382889608407714, 0.18118202142385376, 0.21463996852599798, 0.18397923349559908, 0.17559811353122334, 0.2371948947866125, 0.1681221170837176, 0.1659609785558076, 0.21963614745628002, 0.23722248000400248, 0.265507220509685, 0.25500867851389863, 0.24528607682439263, 0.24208748273824432, 0.28852376423620385, 0.268231957881495, 0.251878535487818, 0.18814424505407246, 0.19229894849639884, 0.19980993640091205, 0.1600290768940702, 0.17617698872417242, 0.16749470558302526, 0.16970875790111728, 0.1920476583074776, 0.16146398343495527, 0.18203145554247968, 0.17357662042372834, 0.19455657222133216, 0.20849810913495515, 0.18831526117658848, 0.1838491894216877, 0.20828931608708567, 0.21341804720104451, 0.2031506720346815, 0.18095855704195452, 0.20266561006564232, 0.18861886136377937, 0.18881050187417647, 0.2043102517103058, 0.1999469979456937, 0.1912262229754147, 0.18491852866901237, 0.18178274570486852, 0.4420591526365416, 0.1874946841565689, 0.18046143046051022, 0.5294976343812603, 0.21216760523168754, 0.22505560323252438, 0.13525405891101605, 0.21489918302832878, 0.48497890815506484, 0.39627760681196966, 0.1942203754373033, 0.23570075246466526, 0.21256296466871805, 0.22676029913166917, 0.16021796870549077, 0.1616616047923095, 0.144417750789823, 0.19023910373848907, 0.1812244209449455, 0.19079617880008626, 0.16761240097463692, 0.21066144608160153, 0.1841789668963001, 0.1945185422138751, 0.1862924386025414, 0.1796788969891535, 0.19532579988768806, 0.07390128106448479, 0.0750270548487153, 0.06504428315821187, 0.07558595563166715, 0.06844200682837998, 0.07419405108951027, 0.07164093674793492, 0.06795144322011415, 0.075426593415728]}, "mutation_prompt": null}
{"id": "c2312761-7fee-4d40-a32f-f633ed630646", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.9  # Adaptive inertia weight start value\n        self.cognitive_coeff = 1.7\n        self.social_coeff = 1.4\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.7\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        \n        while num_evaluations < self.budget:\n            # Adaptive inertia weight adjustment\n            self.inertia_weight = 0.4 + 0.5 * (1 - num_evaluations / self.budget)\n\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # Enhanced DE Part with swarm diversity measure\n            diversity = np.std(positions, axis=0).mean()\n            threshold = 0.5  # determined through experimentation\n            if diversity > threshold:\n                for i in range(self.population_size):\n                    idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Enhanced", "description": "Integrates adaptive inertia weight and swarm diversity-driven mutation to enhance convergence and exploration balance.", "configspace": "", "generation": 86, "fitness": 0.2167017103572909, "feedback": "The algorithm PSO_DE_Optimizer_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "7a6106bc-706c-43ba-9a78-1231b9b6fb11", "metadata": {"aucs": [0.5256405105852083, 0.4659972194726174, 0.5146656673887454, 0.5559265478201069, 0.5487651287165287, 0.5436724985912281, 0.563348768559613, 0.5367073684758865, 0.5305391679953848, 0.18733133682824143, 0.15119710821225085, 0.13320322078323676, 0.23596779850988758, 0.173889596040268, 0.18992369947895638, 0.1793208014265567, 0.09593150534807626, 0.14500333481438543, 0.12320201597071478, 0.13818135721572622, 0.11149115490331096, 0.14379474079326848, 0.22883816507211063, 0.21454678588006304, 0.11228411831981722, 0.12852827635468034, 0.18210425093635552, 0.13775941763114374, 0.14225137159454804, 0.1267358432598099, 0.17089344037033027, 0.15733425333540563, 0.12121963261476199, 0.16958067364317775, 0.13860275817114276, 0.11400918674176608, 0.9582278010277353, 0.9463451613953733, 0.9594701062934914, 0.9270490227346805, 0.9344966905051612, 0.9440373012172256, 0.958618239490991, 0.9582824619017476, 0.944683841568008, 0.225668863799398, 0.22206481626071395, 0.17652528634438625, 0.13185498612928515, 0.21732222163837256, 0.19176736105149672, 0.19662725551214688, 0.1964625123522593, 0.1794577332033679, 0.5243097944694597, 0.560568441236315, 0.18833169839146635, 0.46723726385422615, 0.23351786459511137, 0.19256139734154543, 0.1911364779273974, 0.2402461822131695, 0.21351168289780853, 0.27196251464551247, 0.10833620033426739, 0.118634169130719, 0.10751667857216085, 0.10270296089196618, 0.10568916843254317, 0.14008371278758713, 0.1132984409977642, 0.10887096812328423, 0.16884472386305382, 0.1102170477485066, 0.1233493042709537, 0.1077703096187208, 0.11389023634803941, 0.11168730942848903, 0.12814933447719756, 0.049646600050337275, 0.15532816806838579, 0.007415756914930127, 0.036935167906720245, 0.03944131267110029, 0.008418353728076866, 9.999999999998899e-05, 0.03322245817462266, 0.07194362383691078, 0.039652225091383664, 0.03148133205430004, 0.22141958106439186, 0.0507269587167013, 0.1248928378981724, 0.15370948623510883, 0.09133067617255075, 0.08301985859940109, 0.040953302296018235, 0.15343592216201318, 0.07340895298378369, 0.0652737088764267, 9.999999999998899e-05, 0.019577818471097297, 0.025680284883838778, 0.02413439575945664, 0.028661632683992355, 0.047102530752828886, 0.03103297552764217, 0.04092100799203413, 0.10042097705216313, 0.11126870607408434, 0.1047481030258437, 0.08646134656956606, 0.06744382334811816, 0.06513052113690576, 0.058360235004661476, 0.16116652343570548, 0.07482256633739814, 0.4005548789196832, 0.3724927297793772, 0.36981700604116485, 0.39911669534780236, 0.3842306584986017, 0.3181504022576225, 0.4507880225760027, 0.39767546482402083, 0.3935934272519208, 0.08932005128391551, 0.0918300926828044, 0.0876368811681919, 0.10982398802633064, 0.07669121284091684, 0.10260664576243084, 0.07013363184514565, 0.07521340663030474, 0.07490931651641808, 0.1486669625358552, 0.16048217187099456, 0.1397985705559911, 0.19442993934273167, 0.18982742977821954, 0.20309463208538525, 0.17636318156970332, 0.19106689742915517, 0.1361184049746904, 0.27957252951429523, 0.20470450285246888, 0.25267438519552543, 0.21786575430429134, 0.25933724533011504, 0.2492125579628477, 0.26798338732092986, 0.29817829084554803, 0.295806958706764, 0.18681502931291138, 0.18603267399014145, 0.19697136014718908, 0.1480409971762987, 0.17752151428941287, 0.18074054975494713, 0.1864835127495552, 0.2160771415921966, 0.20627068846956786, 0.18870680930820016, 0.17184428764729687, 0.18850104056981465, 0.18147575957634, 0.18764161499406373, 0.18786634017469295, 0.17997180517086908, 0.17286090009845756, 0.1804132825847119, 0.20833459228406315, 0.19125133997686894, 0.1867031418964069, 0.19040612422032477, 0.1846531676626214, 0.1800680165019054, 0.18718553371854219, 0.1709762714969516, 0.18923949987904887, 0.42141378058842716, 0.16324898867218673, 0.19821808775722538, 0.505121352483278, 0.19205869024900646, 0.2418647963717364, 0.14448944933318253, 0.23303491775542406, 0.5587183919670247, 0.3986687623943922, 0.19854248137823438, 0.2721819515940155, 0.32286368197988136, 0.2270572133465395, 0.2192113846983672, 0.14692252834924202, 0.14032567596650392, 0.10048601266251267, 0.19279724021827516, 0.1904186506376595, 0.1941446097947318, 0.21308568015235518, 0.1823842104327592, 0.17683539827246308, 0.19937449505568816, 0.18969178413807408, 0.17823378591241368, 0.0678893121392401, 0.07147805561845122, 0.07163694683327071, 0.06487534192781153, 0.07063627182320142, 0.06766410896417852, 0.08291753880592656, 0.0655029309371239, 0.06218961985737137]}, "mutation_prompt": null}
{"id": "35c18882-f266-4c87-82a4-8bc14854f9df", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.6  # Changed from 0.7\n        self.cognitive_coeff = 1.7  # Changed from 1.5\n        self.social_coeff = 1.4  # Changed from 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.7  # Changed from 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.1\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            unique_scores = np.unique(personal_best_scores)\n            if len(unique_scores) > fitness_diversity_threshold * self.population_size:\n                for i in range(self.population_size):\n                    idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Refined", "description": "Hybrid PSO and JADE-DE with Fitness Diversity Control to maintain exploration-exploitation balance and prevent premature convergence.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7a6106bc-706c-43ba-9a78-1231b9b6fb11", "metadata": {"aucs": [0.6439192932473616, 0.60814587158792, 0.5999607727258474, 0.617593726209773, 0.6313574889418878, 0.634530747995145, 0.6358762150057338, 0.6208051911380279, 0.593963633958525, 0.20558580606499388, 0.15711072722938424, 0.21988827507123543, 0.25518027169624713, 0.173889596040268, 0.19317002256868998, 0.2446578693779955, 0.16429704027657333, 0.1960274881862294, 0.1628101057339758, 0.16561702195278283, 0.2220793482460186, 0.18892966676021727, 0.2299326252818843, 0.22026168499117893, 0.13045536350374642, 0.1573860491358975, 0.1824171996960332, 0.13907135684128957, 0.15116385887740091, 0.1311851432808746, 0.17561726064020333, 0.16566762369056598, 0.13612616665054644, 0.18008265466611761, 0.15384072943027638, 0.1346706482858142, 0.9472337038450545, 0.9454184017270238, 0.958274503381317, 0.8591112132312351, 0.9197784560790542, 0.9295435411146193, 0.9459507882895641, 0.9581171582259093, 0.9326612740100637, 0.27553739350688755, 0.33322659286993017, 0.22749572596203904, 0.3061404680177747, 0.2827070748475726, 0.3090445124272383, 0.2940004833829455, 0.1585628732547404, 0.24685682211286053, 0.515194907655005, 0.565343033829594, 0.21312270282627166, 0.47510647831655783, 0.28401635076129916, 0.20360822098274034, 0.6096013507101038, 0.2513784492466964, 0.23814006800994447, 0.30219591269985935, 0.12774537076242176, 0.17375519152130403, 0.1294506832308322, 0.17973211722203764, 0.12201831604362545, 0.14081367120091015, 0.15056288126530748, 0.18105334471078194, 0.2018218209796956, 0.14367082224599348, 0.12954100022857706, 0.16947919162697123, 0.10466910289717746, 0.15703470950288556, 0.1830652353670702, 0.07602374508787235, 0.13839860257565761, 0.008023243907158584, 0.03965028137807092, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07249882840612631, 0.039652225091383664, 0.04164647619632511, 0.22804043994278123, 0.0507269587167013, 0.12392443142271803, 0.14893912057060843, 0.08140865815730158, 0.08718043490609795, 0.04855278003719288, 0.15590692330342193, 0.05274835531358546, 0.1418483094774028, 0.10779492896233644, 0.06136943001939765, 0.08029681820661139, 0.04332458846347542, 0.07178057673480254, 0.07882719837882723, 0.0866687785748742, 0.08628399126761432, 0.11738972462569996, 0.09434918015025218, 0.12218268208708583, 0.08698598490375864, 0.11390988370766497, 0.10363620553448949, 0.10036875323937544, 0.11857809775843964, 0.10754486921163786, 0.44400771802550953, 0.4334656996023497, 0.443697517369361, 0.45853747711961657, 0.36983045661777536, 0.4193200747280522, 0.4464517143883985, 0.4434591503837785, 0.43695293685738, 0.08597602026550066, 0.08150005693531659, 0.09470470957548316, 0.12541428705114943, 0.08523167049218683, 0.1069923488813267, 0.09021211859258238, 0.08782687531784539, 0.08761626305733805, 0.16810830486459805, 0.18613719645310367, 0.16291928729322402, 0.21415615659965226, 0.26253915231456815, 0.16569788796427487, 0.2577213530636955, 0.1823555417727274, 0.16681441150934884, 0.25206163463546527, 0.32990794052574557, 0.24427249785335436, 0.23238022420991666, 0.286326409802392, 0.31023923294835654, 0.32353194925849915, 0.2706945284079286, 0.3314577382862307, 0.27429935890960855, 0.1820275040685504, 0.23027966712700043, 0.18482430743525036, 0.16605567832393353, 0.26724778216804945, 0.2292818249652394, 0.25220832402057836, 0.23369567172293126, 0.22362016466846968, 0.1833530226461234, 0.2044611026130848, 0.21064877554226313, 0.19648945914976135, 0.18741442068403336, 0.1770595958373924, 0.1764658750113144, 0.19851517549124909, 0.21202814915153467, 0.21127789432103605, 0.20289133803473425, 0.20129711830402552, 0.2029436888790188, 0.18799394513212542, 0.18973303064949765, 0.22908145497762966, 0.18420483634215667, 0.6327587012925819, 0.1581971715475442, 0.19796389181227714, 0.7036207686282614, 0.19537911043018563, 0.23790755508120742, 0.1507530773328073, 0.23010776126631016, 0.73482937168701, 0.40103843070207734, 0.20841515789229392, 0.4323895291358487, 0.16697630258539697, 0.3245250220170205, 0.22194480787174986, 0.1527824857549258, 0.1486399177742238, 0.39334018034786955, 0.18093020060586273, 0.1875824017553327, 0.17571989816545797, 0.20961638501310376, 0.1972726279011694, 0.18181138115472784, 0.19834353162475782, 0.17512072252279343, 0.1852950660627879, 0.07930403990899382, 0.07988255155746848, 0.07613899351643227, 0.0762162023270948, 0.08287019340999124, 0.08104348017152407, 0.0909988365003368, 0.0650253798215632, 0.07968320237990756]}, "mutation_prompt": null}
{"id": "af3cf210-1ea2-4dbd-8c1f-c8f7bba482a9", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.6  # Changed from 0.7\n        self.cognitive_coeff = 1.7  # Changed from 1.5\n        self.social_coeff = 1.4  # Changed from 1.5\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.7  # Changed from 0.5\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n\n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.1\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part\n            unique_scores = np.unique(personal_best_scores)\n            if len(unique_scores) > fitness_diversity_threshold * self.population_size:\n                for i in range(self.population_size):\n                    idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Refined", "description": "Hybrid PSO and JADE-DE with Fitness Diversity Control to maintain exploration-exploitation balance and prevent premature convergence.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7a6106bc-706c-43ba-9a78-1231b9b6fb11", "metadata": {"aucs": [0.6439192932473616, 0.60814587158792, 0.5999607727258474, 0.617593726209773, 0.6313574889418878, 0.634530747995145, 0.6358762150057338, 0.6208051911380279, 0.593963633958525, 0.20558580606499388, 0.15711072722938424, 0.21988827507123543, 0.25518027169624713, 0.173889596040268, 0.19317002256868998, 0.2446578693779955, 0.16429704027657333, 0.1960274881862294, 0.1628101057339758, 0.16561702195278283, 0.2220793482460186, 0.18892966676021727, 0.2299326252818843, 0.22026168499117893, 0.13045536350374642, 0.1573860491358975, 0.1824171996960332, 0.13907135684128957, 0.15116385887740091, 0.1311851432808746, 0.17561726064020333, 0.16566762369056598, 0.13612616665054644, 0.18008265466611761, 0.15384072943027638, 0.1346706482858142, 0.9472337038450545, 0.9454184017270238, 0.958274503381317, 0.8591112132312351, 0.9197784560790542, 0.9295435411146193, 0.9459507882895641, 0.9581171582259093, 0.9326612740100637, 0.27553739350688755, 0.33322659286993017, 0.22749572596203904, 0.3061404680177747, 0.2827070748475726, 0.3090445124272383, 0.2940004833829455, 0.1585628732547404, 0.24685682211286053, 0.515194907655005, 0.565343033829594, 0.21312270282627166, 0.47510647831655783, 0.28401635076129916, 0.20360822098274034, 0.6096013507101038, 0.2513784492466964, 0.23814006800994447, 0.30219591269985935, 0.12774537076242176, 0.17375519152130403, 0.1294506832308322, 0.17973211722203764, 0.12201831604362545, 0.14081367120091015, 0.15056288126530748, 0.18105334471078194, 0.2018218209796956, 0.14367082224599348, 0.12954100022857706, 0.16947919162697123, 0.10466910289717746, 0.15703470950288556, 0.1830652353670702, 0.07602374508787235, 0.13839860257565761, 0.008023243907158584, 0.03965028137807092, 0.03944131267110029, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07249882840612631, 0.039652225091383664, 0.04164647619632511, 0.22804043994278123, 0.0507269587167013, 0.12392443142271803, 0.14893912057060843, 0.08140865815730158, 0.08718043490609795, 0.04855278003719288, 0.15590692330342193, 0.05274835531358546, 0.1418483094774028, 0.10779492896233644, 0.06136943001939765, 0.08029681820661139, 0.04332458846347542, 0.07178057673480254, 0.07882719837882723, 0.0866687785748742, 0.08628399126761432, 0.11738972462569996, 0.09434918015025218, 0.12218268208708583, 0.08698598490375864, 0.11390988370766497, 0.10363620553448949, 0.10036875323937544, 0.11857809775843964, 0.10754486921163786, 0.44400771802550953, 0.4334656996023497, 0.443697517369361, 0.45853747711961657, 0.36983045661777536, 0.4193200747280522, 0.4464517143883985, 0.4434591503837785, 0.43695293685738, 0.08597602026550066, 0.08150005693531659, 0.09470470957548316, 0.12541428705114943, 0.08523167049218683, 0.1069923488813267, 0.09021211859258238, 0.08782687531784539, 0.08761626305733805, 0.16810830486459805, 0.18613719645310367, 0.16291928729322402, 0.21415615659965226, 0.26253915231456815, 0.16569788796427487, 0.2577213530636955, 0.1823555417727274, 0.16681441150934884, 0.25206163463546527, 0.32990794052574557, 0.24427249785335436, 0.23238022420991666, 0.286326409802392, 0.31023923294835654, 0.32353194925849915, 0.2706945284079286, 0.3314577382862307, 0.27429935890960855, 0.1820275040685504, 0.23027966712700043, 0.18482430743525036, 0.16605567832393353, 0.26724778216804945, 0.2292818249652394, 0.25220832402057836, 0.23369567172293126, 0.22362016466846968, 0.1833530226461234, 0.2044611026130848, 0.21064877554226313, 0.19648945914976135, 0.18741442068403336, 0.1770595958373924, 0.1764658750113144, 0.19851517549124909, 0.21202814915153467, 0.21127789432103605, 0.20289133803473425, 0.20129711830402552, 0.2029436888790188, 0.18799394513212542, 0.18973303064949765, 0.22908145497762966, 0.18420483634215667, 0.6327587012925819, 0.1581971715475442, 0.19796389181227714, 0.7036207686282614, 0.19537911043018563, 0.23790755508120742, 0.1507530773328073, 0.23010776126631016, 0.73482937168701, 0.40103843070207734, 0.20841515789229392, 0.4323895291358487, 0.16697630258539697, 0.3245250220170205, 0.22194480787174986, 0.1527824857549258, 0.1486399177742238, 0.39334018034786955, 0.18093020060586273, 0.1875824017553327, 0.17571989816545797, 0.20961638501310376, 0.1972726279011694, 0.18181138115472784, 0.19834353162475782, 0.17512072252279343, 0.1852950660627879, 0.07930403990899382, 0.07988255155746848, 0.07613899351643227, 0.0762162023270948, 0.08287019340999124, 0.08104348017152407, 0.0909988365003368, 0.0650253798215632, 0.07968320237990756]}, "mutation_prompt": null}
{"id": "abfb1505-a69c-4b6f-9b69-cd166e782152", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.6  # Unchanged\n        self.cognitive_coeff = 1.7  # Unchanged\n        self.social_coeff = 1.4  # Unchanged\n        self.mutation_factor = 0.5  # Unchanged\n        self.crossover_prob_mean = 0.7  # Unchanged\n        self.crossover_prob = 0.9  # Unchanged\n        self.mu_mutation_factor = 0.5  # Unchanged\n        self.mu_crossover_prob = 0.5  # Unchanged\n\n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.1\n        adaptive_lr = 0.1  # New: Adaptive learning rate for dynamic updates\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions with adaptive inertia\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            inertia_weight = max(0.4, self.inertia_weight - adaptive_lr * (self.budget - num_evaluations) / self.budget)\n            velocities = (inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part with dynamic fitness diversity\n            unique_scores = np.unique(personal_best_scores)\n            diversity_ratio = len(unique_scores) / self.population_size\n            if diversity_ratio > fitness_diversity_threshold:\n                for i in range(self.population_size):\n                    idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Enhanced", "description": "Enhanced Hybrid PSO-DE with Adaptive Learning Rates and Dynamic Fitness Diversity Control for improved exploration-exploitation balance.", "configspace": "", "generation": 89, "fitness": 0.2614136978575069, "feedback": "The algorithm PSO_DE_Optimizer_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "7a6106bc-706c-43ba-9a78-1231b9b6fb11", "metadata": {"aucs": [0.7198506565674074, 0.6930083882446438, 0.6551163773854605, 0.6899024107043705, 0.6905471434160759, 0.6705141983646548, 0.71929921384347, 0.7079141442270398, 0.6519612125857683, 0.2975633693036839, 0.16081108443537373, 0.21210540450308613, 0.2619673481720197, 0.21783566692659606, 0.2362901948779832, 0.3103457085421816, 0.19038546719125338, 0.3223220960450499, 0.17582175099030084, 0.14876151832153917, 0.14158220316500825, 0.1741170057209407, 0.2330929242942581, 0.21507599906216823, 0.12262227832561368, 0.17136636316429577, 0.18545099672758558, 0.14309237242282324, 0.1564225900604479, 0.1274590405020981, 0.18121009096746243, 0.17227645896501143, 0.12455102913276128, 0.1837339535824658, 0.1576064221008031, 0.13032433854455516, 0.946781527341449, 0.9449254859847085, 0.9461225722878777, 0.8801872452547428, 0.907151606218638, 0.9293015874538924, 0.9338276233549825, 0.9567874663962169, 0.9315943878240805, 0.39611190571343946, 0.4067922697893763, 0.32884301995474197, 0.3218582152788535, 0.25849722566075817, 0.30803633858627544, 0.2665972480812171, 0.3063021467205109, 0.3653035363808004, 0.5247195523958614, 0.5715343812496992, 0.6586897120766282, 0.4765545130714497, 0.2680405222714921, 0.2632077007835282, 0.21012183218206126, 0.24811778602522794, 0.2465547635809482, 0.3034926095521151, 0.12549786666035345, 0.27603535878567353, 0.12723458515008856, 0.17907354068211112, 0.1444989845380047, 0.26840491699662994, 0.14407538564018563, 0.1455009508996642, 0.19696313696346246, 0.1778403558801418, 0.16864508125745792, 0.20434250452463365, 0.08583011876748148, 0.16160008450066687, 0.1824458938624952, 0.05543630875897376, 0.14194286033186965, 0.015653112456076035, 0.03965028137807092, 0.039496051134299215, 0.042912348845019044, 9.999999999998899e-05, 0.033736898404707394, 0.07304984155849292, 0.039652225091383664, 0.0315292639711533, 0.22200611834132922, 0.0507269587167013, 0.10690288578250218, 0.15933716396916575, 0.0790357895850421, 0.08301985859940109, 0.03564954990920888, 0.1592980639549283, 0.08416919607117201, 0.08507821081967182, 0.041383945403333344, 0.03914492053119378, 0.09295288030106419, 0.054484429452947736, 0.108560470977897, 0.09597520754529454, 0.070785517361315, 0.12797518807221986, 0.21048382059099702, 0.06133270984200245, 0.12443801880427907, 0.08704055682075851, 0.1228954147377963, 0.10803378697101784, 0.14688434700784514, 0.07225945219469287, 0.10992960901360616, 0.48527788318368825, 0.5239393313599243, 0.47998891263247057, 0.4885527288767908, 0.42078513010420415, 0.4317865597779591, 0.4710093479923926, 0.4596422354852375, 0.4633069450767686, 0.08130060733999467, 0.11285523614942106, 0.09692719815826112, 0.1320425666435041, 0.0782633880451189, 0.09461018992822978, 0.1235813914390772, 0.0947987799279072, 0.11351905187799871, 0.1883152308820818, 0.32827219886219705, 0.17371723397921668, 0.23741022916563892, 0.2823186305902463, 0.23079723036890754, 0.24903147305392725, 0.22040402633403444, 0.17757026413206145, 0.2787496116035293, 0.3634417476874413, 0.3782693389173485, 0.37066732868499086, 0.2513539623956611, 0.3308153931514499, 0.3411409081812259, 0.26458806937333657, 0.39382661996636636, 0.19729165287842798, 0.20783789139132636, 0.21693449497576367, 0.16917597813693352, 0.22422468764614611, 0.2145314934046345, 0.23031241990788243, 0.21860172668976174, 0.30536188789041263, 0.2197224025439658, 0.18653863858303998, 0.2340776733458777, 0.19508209971713808, 0.17565391687952614, 0.17180326957250458, 0.20971276483624113, 0.2013174270053133, 0.20539127934383306, 0.21253329474423377, 0.21001654916856516, 0.19644253518612964, 0.21221078482161282, 0.2234165507340493, 0.19770263299021873, 0.18591014166668396, 0.19597338621015892, 0.20580325488736517, 0.28815322482650585, 0.15906532895945602, 0.1983325119313255, 0.8217722716536175, 0.19715228761977555, 0.7307046017103082, 0.15328907518789747, 0.23364660970372297, 0.8150367601259452, 0.4330001864833035, 0.207656341858367, 0.1802304361454855, 0.27261403246759575, 0.2161197321370083, 0.21908150989128983, 0.15621720840880404, 0.14883319891009428, 0.4941135282945712, 0.19344999754044434, 0.1994769526083514, 0.17367613708353924, 0.20799462761099496, 0.18285999094396044, 0.18939692784629303, 0.19839595404148425, 0.1940250087878801, 0.18018741709575603, 0.0766314179776435, 0.07142438815324514, 0.07171277121294295, 0.06811049792140345, 0.0740777334242988, 0.08279891787772464, 0.09800667510698746, 0.06572989338109525, 0.07663253453171326]}, "mutation_prompt": null}
{"id": "1e538179-fc82-4ddb-83cd-759bcb149035", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.6  # Unchanged\n        self.cognitive_coeff = 1.7  # Unchanged\n        self.social_coeff = 1.4  # Unchanged\n        self.mutation_factor = 0.5  # Unchanged\n        self.crossover_prob_mean = 0.7  # Unchanged\n        self.crossover_prob = 0.9  # Unchanged\n        self.mu_mutation_factor = 0.5  # Unchanged\n        self.mu_crossover_prob = 0.5  # Unchanged\n\n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.1\n        adaptive_lr = 0.1  # New: Adaptive learning rate for dynamic updates\n        diversity_boost = 0  # New: Diversity boost counter\n\n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions with adaptive inertia\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            inertia_weight = max(0.4, self.inertia_weight - adaptive_lr * (self.budget - num_evaluations) / self.budget)\n            velocities = (inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # JADE-inspired DE Part with dynamic fitness diversity\n            unique_scores = np.unique(personal_best_scores)\n            diversity_ratio = len(unique_scores) / self.population_size\n            if diversity_ratio > fitness_diversity_threshold or diversity_boost > 5:\n                diversity_boost = 0  # Reset boost counter\n                for i in range(self.population_size):\n                    idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.05) * self.mu_mutation_factor + 0.05 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.05) * self.mu_crossover_prob + 0.05 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n            else:\n                diversity_boost += 1\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Enhanced", "description": "Hybrid PSO-DE with Adaptive Cooling Schedule and Diversity Boost for Enhanced Exploration and Exploitation.", "configspace": "", "generation": 90, "fitness": 0.2519137084579089, "feedback": "The algorithm PSO_DE_Optimizer_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "abfb1505-a69c-4b6f-9b69-cd166e782152", "metadata": {"aucs": [0.7198506565674074, 0.6930086177281216, 0.6551084780970793, 0.6893531129619286, 0.6905982770883279, 0.6705141983646548, 0.7192982188087675, 0.7078801434365435, 0.6521064929727532, 0.2975633693036839, 0.1783738340172597, 0.2176796977162858, 0.2488884956067574, 0.21534011691338806, 0.22568597623519693, 0.3087664118974628, 0.19435240311559343, 0.3223220960450499, 0.16036500545664312, 0.11503081756520428, 0.15829236068615649, 0.11260321317480049, 0.1262195893631508, 0.11253015030828484, 0.10637399816874604, 0.14122735835317068, 0.13818662453237063, 0.1181585693198609, 0.10917351143610798, 0.11838801286170253, 0.15589874937797232, 0.13189441757967468, 0.172487900732735, 0.10597636727202553, 0.13341650358704304, 0.1293165807425557, 0.946781527341449, 0.944926272434445, 0.9461225722878777, 0.8965560043491636, 0.9071466837991559, 0.9293417579122272, 0.9338276233549825, 0.9567912292270357, 0.9315848476191726, 0.39611190571343946, 0.4067924478679139, 0.32901624113802164, 0.32205720673986515, 0.25850206332769643, 0.3080318682993478, 0.26912539468125374, 0.31083519850069075, 0.3653035363808004, 0.47125556280638825, 0.23634650395072065, 0.6586897120766282, 0.3609875411619987, 0.2680405222714921, 0.2632771705680442, 0.21545687084069864, 0.240065961602693, 0.222259843283515, 0.16593681441832775, 0.11105263116180808, 0.2811694435357669, 0.11900270225365805, 0.17907354068211112, 0.1444989845380047, 0.2687659426975795, 0.1438003392429773, 0.14599010942665058, 0.15679595332810026, 0.1778403558801418, 0.16864508125745792, 0.20434250452463365, 0.07887250255680756, 0.16185953561319544, 0.1824458938624952, 0.04364958942557717, 0.12339967504176275, 0.03645430232408431, 9.999999999998899e-05, 0.014774856337559816, 0.02254817316475488, 9.999999999998899e-05, 0.022578248404333312, 0.04319812182218663, 0.019940871133685145, 0.055711644867817656, 0.11185263480463603, 0.06362751123158161, 0.04670410034278061, 0.17890609135387203, 0.03082034111997034, 0.09817242980788832, 0.049891198020029504, 0.057238820787689604, 0.17669497780846466, 0.05703774139600859, 0.03090773657802981, 0.05577027085235364, 0.07646423647008183, 0.054484429452947736, 0.108560470977897, 0.09065568686477998, 0.070785517361315, 0.12797518807221986, 0.21048382059099702, 0.0600741537088092, 0.09577044371364829, 0.11355518915120233, 0.11759502704082792, 0.07726010581493592, 0.14688434700784514, 0.05542031190321817, 0.09662734673975704, 0.48556210419966306, 0.5239393313599243, 0.4801108797695287, 0.48986738719259093, 0.422189982052144, 0.431581229093123, 0.4710093479923926, 0.459657002014208, 0.46336630742019336, 0.07975554412671804, 0.1123688515445348, 0.08346285727056879, 0.13261921608629224, 0.0792734787296333, 0.09059176128059732, 0.12256121793133279, 0.09479646695852129, 0.11350398171233922, 0.18871998774112286, 0.3285128943839557, 0.1737742196047397, 0.2376426498334222, 0.28322830418391864, 0.22970140280019946, 0.24903147305392725, 0.22052214842993922, 0.17749004156834947, 0.27873623369751643, 0.3634411233104675, 0.3782693389173485, 0.3707639072677017, 0.24666966104380095, 0.33078713271946836, 0.3411409081812259, 0.2553338315092879, 0.39388604084710677, 0.18769846448903926, 0.19936425883932407, 0.21693449497576367, 0.1799065220788445, 0.22422468764614611, 0.21327015829926788, 0.23031241990788243, 0.21294766111246666, 0.3053908127941303, 0.2186498928295968, 0.18595196385123802, 0.2340776733458777, 0.19753892589450983, 0.1756814448490992, 0.16843895427157618, 0.21122165602144327, 0.20746801761117628, 0.20562966579914377, 0.18398099564838533, 0.21001654916856516, 0.1898257413835338, 0.21223914505139174, 0.22341389130238498, 0.19770263299021873, 0.1859803233187487, 0.19568205095676827, 0.20578210728743074, 0.14864457123592345, 0.14032186124780133, 0.18815113584333476, 0.8217722716536175, 0.19730166591708564, 0.7332206194107005, 0.16850057993714496, 0.1588579738685566, 0.8150529819236413, 0.4329414374976527, 0.207656341858367, 0.2275191370917895, 0.2725756063313778, 0.21611319880781532, 0.15338921194816957, 0.1504024513848049, 0.16512636704697747, 0.49395718794954835, 0.19351498180217186, 0.20074252670213533, 0.173373018776959, 0.18246026563771922, 0.18471990130141103, 0.19025071991441533, 0.18978703329668956, 0.1925272675016969, 0.18053514406913507, 0.0767361848734538, 0.06665791118320763, 0.07035350529029616, 0.0724650397071307, 0.08209251196347123, 0.08296901720159222, 0.09587367892562437, 0.06670005058330208, 0.07666596626539557]}, "mutation_prompt": null}
{"id": "704bae05-feda-4ebd-a810-df5e8f4ea097", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.6\n        self.cognitive_coeff = 1.7\n        self.social_coeff = 1.4\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.7\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n        \n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.1\n        adaptive_lr = 0.1\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions with adaptive inertia\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            inertia_weight = max(0.4, self.inertia_weight - adaptive_lr * (self.budget - num_evaluations) / self.budget)\n            velocities = (inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part with adaptive neighborhood selection\n            unique_scores = np.unique(personal_best_scores)\n            diversity_ratio = len(unique_scores) / self.population_size\n            if diversity_ratio > fitness_diversity_threshold:\n                for i in range(self.population_size):\n                    if np.random.rand() < 0.5:  # Adaptive neighbor selection\n                        idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    else:\n                        idx = np.random.choice(np.arange(self.population_size), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Enhanced", "description": "Hybrid PSO-DE with Adaptive Neighborhood Selection and Dynamic Mutation for enhanced convergence and diversity management.", "configspace": "", "generation": 91, "fitness": 0.26376104101758363, "feedback": "The algorithm PSO_DE_Optimizer_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "abfb1505-a69c-4b6f-9b69-cd166e782152", "metadata": {"aucs": [0.6945149200076868, 0.6709898673170305, 0.6821704213329278, 0.7051038670517238, 0.686354023651344, 0.6657708759996199, 0.7058587243597553, 0.6840620106023698, 0.6940216876108275, 0.23225123460728958, 0.08202146123131226, 0.3198892283018573, 0.29957116060306566, 0.3189480525749585, 0.3016854057002001, 0.1598616823757295, 0.18627158080797468, 0.2736345798804939, 0.19094539002474853, 0.13304932710441864, 0.22147289059800424, 0.0972813363020748, 0.11862445300534619, 0.1484161028180555, 0.197815860900601, 0.2654936485883189, 0.1954183511996871, 0.12623644092230246, 0.11877799820429824, 0.14317267835775982, 0.1472942279343875, 0.13291607689245788, 0.12683884567789905, 0.11295746974141074, 0.14149049771040356, 0.13993385549118653, 0.9567732705906203, 0.94511678397513, 0.9461558519693487, 0.8550794698104801, 0.903460644679457, 0.9288213455080778, 0.9332125970398905, 0.9459559545484005, 0.9097076730043673, 0.37583661546410585, 0.3684438051413309, 0.14546974863068585, 0.32289970911878496, 0.2472383497538725, 0.17337974844201742, 0.34698947860017604, 0.13150302621204102, 0.2983719553838078, 0.5475480946977245, 0.2797057320380403, 0.2741399098445674, 0.2276596101721058, 0.5697452349165436, 0.2960351505669643, 0.44956965078975397, 0.6668984027941254, 0.2306647032332536, 0.18856229656963974, 0.10564835443848297, 0.14630070739113854, 0.17542531055522526, 0.1200721689528047, 0.13823437790582616, 0.16776666503876536, 0.16740163867362212, 0.15438803576558835, 0.17435775326830094, 0.1627915355077676, 0.18950362938177834, 0.14352550953791232, 0.09752005527623187, 0.1521730854313993, 0.14530242030257323, 0.10849971479340403, 0.13031602873558934, 0.00439850462227076, 0.1283758168751914, 9.999999999998899e-05, 0.10353131941548022, 0.025228704079978126, 0.006264565647825626, 0.10657817642588363, 0.1431948154867616, 0.06715491725698053, 0.122948546141316, 0.04760868646347027, 0.09395261026044444, 0.07462011373944966, 0.1336214679244957, 0.15902714198359302, 0.10004989757344906, 0.116201990368489, 0.13696512982770181, 0.13612492388814312, 0.09350206565500452, 0.1076791842740864, 0.0665301491935697, 0.1266031285690017, 0.0628523366836714, 0.06846980700348704, 0.08625650078403646, 0.1119021456310717, 0.15035182527379853, 0.08998299889820027, 0.09890701108236366, 0.12261813399319887, 0.12433009739161538, 0.11421425977074173, 0.12152587158510253, 0.08458687588002356, 0.0928979792660719, 0.49423019354882125, 0.4592139081014671, 0.4817086153329855, 0.48825634758304026, 0.4784578590390113, 0.44808904316001685, 0.47963621213692886, 0.46612779901778667, 0.4493408745238866, 0.1085417048521935, 0.0866165022875297, 0.09139166936578147, 0.1119106457287884, 0.11465433562175753, 0.11842860632451524, 0.11449368772769664, 0.1194005913999403, 0.09042037429448413, 0.17872899826650845, 0.27343508668306926, 0.22837862915201979, 0.2396139927584211, 0.2921890485069565, 0.2869646145357233, 0.3431763807012024, 0.1899997494761354, 0.2330959051911765, 0.21917055286626197, 0.2790164489334327, 0.32146345323123016, 0.3739791672251659, 0.3429670208259801, 0.267545201835487, 0.3892233939369536, 0.3088452548898776, 0.3945136873509212, 0.26239675029852083, 0.2763263311992691, 0.2304078800155802, 0.20530510388565104, 0.2539532313677101, 0.23238972188900475, 0.22810086217750103, 0.23772246927900487, 0.2576718641102481, 0.21763060248513244, 0.19915265939983295, 0.19337529652339713, 0.19779169457384105, 0.2177122060483172, 0.18665130137358155, 0.23518394783789542, 0.20764780236108737, 0.19161553387883712, 0.29559116287921416, 0.27655076385202526, 0.23426607976633818, 0.21770940159094476, 0.1949000758193392, 0.2640868745097744, 0.3779044618204255, 0.31455944036621164, 0.19715224313852264, 0.5479194891857653, 0.16809446650532778, 0.3601757331948069, 0.7812275654841657, 0.19682545385683292, 0.39089786472398336, 0.43340757384194206, 0.16495710020918308, 0.7838194802788276, 0.5454801289727325, 0.20610409274999308, 0.1768615330249924, 0.1741426311210138, 0.3663969496876569, 0.15114575116131912, 0.2091655667898824, 0.2085804969822167, 0.37852065790092637, 0.22522804324023915, 0.21085211068648557, 0.1992374409405484, 0.182160066780803, 0.19894278395440346, 0.17445464334815608, 0.1790283126954253, 0.17657089784162694, 0.1877511594093627, 0.08797948912989018, 0.06693015202702868, 0.08811123230401041, 0.0785219572171616, 0.07986469963600118, 0.07587767133662915, 0.09061679766417163, 0.08149939723643329, 0.08360841096053573]}, "mutation_prompt": null}
{"id": "431ded4f-bfb4-4aa8-9600-6517c25393b4", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Enhanced_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.6\n        self.cognitive_coeff = 1.7\n        self.social_coeff = 1.4\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.7\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n        self.elite_fraction = 0.2\n        \n    def chaotic_init(self):\n        # Logistic map for chaos-based initialization\n        x = 0.5\n        positions = np.empty((self.population_size, self.dim))\n        for i in range(self.population_size):\n            x = 4.0 * x * (1 - x)\n            positions[i] = self.lower_bound + (self.upper_bound - self.lower_bound) * x\n        return positions\n    \n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = self.chaotic_init()  # Use chaos-based initialization\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.1\n        adaptive_lr = 0.1\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions with adaptive inertia\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            inertia_weight = max(0.4, self.inertia_weight - adaptive_lr * (self.budget - num_evaluations) / self.budget)\n            velocities = (inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part with elite-guided mutation\n            elite_num = int(self.elite_fraction * self.population_size)\n            elite_indices = np.argsort(personal_best_scores)[:elite_num]\n            if len(np.unique(personal_best_scores)) / self.population_size > fitness_diversity_threshold:\n                for i in range(self.population_size):\n                    if np.random.rand() < 0.5:  # Adaptive neighbor selection\n                        idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    else:\n                        idx = np.random.choice(np.arange(self.population_size), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    elite_idx = np.random.choice(elite_indices)\n                    mutant_vector = de_population[elite_idx] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Enhanced_Refined", "description": "Enhanced hybrid PSO-DE with adaptive learning rate, chaos-based initialization, and elite-guided mutation for improved exploration and exploitation.", "configspace": "", "generation": 92, "fitness": 0.1707829787177759, "feedback": "The algorithm PSO_DE_Optimizer_Enhanced_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "704bae05-feda-4ebd-a810-df5e8f4ea097", "metadata": {"aucs": [0.5689308505820927, 0.6719979257569757, 0.5359275584906558, 0.15089757156760475, 0.5894700732209462, 0.162223265056886, 0.6337575629249435, 0.57129334630804, 0.647862157547286, 0.2220442417941585, 0.17907272679667052, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048050812646481034, 9.999999999998899e-05, 0.13233995251143427, 0.11002443404602413, 0.1206529411470263, 9.999999999998899e-05, 0.09807607541856744, 0.08372451631842448, 9.999999999998899e-05, 0.1204326294915945, 0.10316875873327758, 9.999999999998899e-05, 0.09984929227603356, 9.999999999998899e-05, 0.05121305685207567, 0.09475672968640114, 9.999999999998899e-05, 0.12397056751881463, 0.07809126779108211, 9.999999999998899e-05, 0.9654538675099568, 0.9672935564738702, 0.9420831377212108, 0.7737751834412064, 0.9823213745161073, 0.8130898838075855, 0.9179329732616854, 0.9471540905703311, 0.8084053387702, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09903037280290805, 0.02623939660206487, 0.007137504065910849, 0.0836959845455385, 0.08440729507114664, 0.08027516717696015, 0.057432807963321064, 0.12119130897217423, 0.11146876409982143, 0.20047248362552705, 0.36863443880491964, 0.3272377274572571, 0.13004842963611773, 0.12243257323162238, 0.17779063133530726, 9.999999999998899e-05, 0.13261932453486447, 0.11058324532097363, 0.09468601690434442, 9.999999999998899e-05, 9.999999999998899e-05, 0.10720665348019376, 9.999999999998899e-05, 9.999999999998899e-05, 0.04905769886875477, 0.1334334024451519, 0.1437025495733658, 0.14782266353329598, 0.15693752510075865, 0.12993758500697916, 0.052374198686822804, 0.13571026460943758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0033226480155679194, 9.999999999998899e-05, 9.999999999998899e-05, 0.04293457388975275, 0.034387961834290715, 0.028010209559571564, 0.08409901192992297, 0.026690657778734694, 0.044880517511396656, 0.02908323954769587, 0.10227883084982181, 0.09589459773497078, 0.03660236866818489, 0.0066308079938167674, 9.999999999998899e-05, 9.999999999998899e-05, 0.05109989199278664, 0.06106154165098121, 0.012614315206373239, 0.07260143669459174, 0.060489267307283656, 0.042114378150762466, 0.049047027639900986, 9.999999999998899e-05, 0.11106215349125359, 0.02668167781571462, 0.03288149456656575, 9.999999999998899e-05, 9.999999999998899e-05, 0.00012036817692295809, 0.3381056196374078, 0.10065611382332229, 0.42448785988306015, 0.46968722042420796, 0.4427319959443611, 0.44094895789540245, 0.45576504739713286, 0.20760921312740732, 0.2858526627280519, 0.057980902802901024, 0.05902809053719049, 0.06341859724844212, 0.04638340861402179, 0.0057544783076358685, 0.02063713958700575, 0.04310853468176867, 0.09078113755495765, 0.06950446798095777, 0.13597675745121163, 0.10119605962573319, 0.14141640813265732, 0.16884276954490995, 0.19371656164624873, 0.18987367626402696, 0.19956265568443388, 0.2129751241637119, 0.301651042213118, 0.34731039556518917, 0.17885943272713178, 0.2342666884798057, 0.15397545659383904, 0.2985948623381245, 0.23257981218598656, 0.35054850563910145, 0.3593916575220608, 0.2299579577809736, 0.24544865125738136, 0.18156987092363663, 0.21521116662688566, 0.26675862214551294, 0.1563998330669707, 0.20735589357274475, 0.17553598142707305, 0.23139984448948825, 0.14695253715727408, 0.2217163993684318, 0.1866587003370892, 0.22853963056128723, 0.18410157488704681, 0.17108013511675613, 0.18518371519919152, 0.12508051209024362, 0.1446692379842045, 0.08114024735084169, 0.1936385336752634, 0.19650362993659587, 0.17401727668393518, 0.18101112366632144, 0.20646872130338922, 0.17386154217207928, 0.17551997850244838, 0.20059864933686855, 0.172403499483071, 0.23856912563825794, 0.21043802048118676, 0.2260381185160446, 0.1071418668745755, 0.16865604130675038, 0.18700790927097366, 0.16064811345161512, 0.12309465231906702, 0.07864453804689786, 0.10139086023052546, 0.12576001941305492, 0.16676292592276865, 0.14973504433369744, 0.23885568854583383, 0.23935781859094107, 0.3075366580358806, 0.1141601819171747, 0.11177912051361583, 0.2030017998117183, 0.1797414675600958, 0.1853523107795939, 0.18572736076467444, 0.18445452781891247, 0.17932123492699592, 0.1759425994232735, 0.24732082344128115, 0.26038881031144323, 0.08835894743471506, 0.08182570380591059, 0.06751071748677184, 0.07476003797085273, 0.07787200099084113, 0.06870303788267862, 0.018935009488732057, 0.07460446212407656, 0.03287035553457518]}, "mutation_prompt": null}
{"id": "7b5e92ec-eff4-48b6-b0fa-ccc4f82b5e46", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.6\n        self.cognitive_coeff = 1.7\n        self.social_coeff = 1.4\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.7\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n        \n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.1\n        adaptive_lr = 0.1\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions with adaptive inertia\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            inertia_weight = max(0.4, self.inertia_weight - adaptive_lr * (self.budget - num_evaluations) / self.budget)\n            velocities = (inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part with adaptive neighborhood selection\n            unique_scores = np.unique(personal_best_scores)\n            diversity_ratio = len(unique_scores) / self.population_size\n            if diversity_ratio > fitness_diversity_threshold:\n                for i in range(self.population_size):\n                    if np.random.rand() < 0.5:  # Adaptive neighbor selection\n                        idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    else:\n                        idx = np.random.choice(np.arange(self.population_size), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Enhanced", "description": "Hybrid PSO-DE with Adaptive Neighborhood Selection and Dynamic Mutation for enhanced convergence and diversity management.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "704bae05-feda-4ebd-a810-df5e8f4ea097", "metadata": {"aucs": [0.6945149200076868, 0.6709898673170305, 0.6821704213329278, 0.7051038670517238, 0.686354023651344, 0.6657708759996199, 0.7058587243597553, 0.6840620106023698, 0.6940216876108275, 0.23225123460728958, 0.08202146123131226, 0.3198892283018573, 0.29957116060306566, 0.3189480525749585, 0.3016854057002001, 0.1598616823757295, 0.18627158080797468, 0.2736345798804939, 0.19094539002474853, 0.13304932710441864, 0.22147289059800424, 0.0972813363020748, 0.11862445300534619, 0.1484161028180555, 0.197815860900601, 0.2654936485883189, 0.1954183511996871, 0.12623644092230246, 0.11877799820429824, 0.14317267835775982, 0.1472942279343875, 0.13291607689245788, 0.12683884567789905, 0.11295746974141074, 0.14149049771040356, 0.13993385549118653, 0.9567732705906203, 0.94511678397513, 0.9461558519693487, 0.8550794698104801, 0.903460644679457, 0.9288213455080778, 0.9332125970398905, 0.9459559545484005, 0.9097076730043673, 0.37583661546410585, 0.3684438051413309, 0.14546974863068585, 0.32289970911878496, 0.2472383497538725, 0.17337974844201742, 0.34698947860017604, 0.13150302621204102, 0.2983719553838078, 0.5475480946977245, 0.2797057320380403, 0.2741399098445674, 0.2276596101721058, 0.5697452349165436, 0.2960351505669643, 0.44956965078975397, 0.6668984027941254, 0.2306647032332536, 0.18856229656963974, 0.10564835443848297, 0.14630070739113854, 0.17542531055522526, 0.1200721689528047, 0.13823437790582616, 0.16776666503876536, 0.16740163867362212, 0.15438803576558835, 0.17435775326830094, 0.1627915355077676, 0.18950362938177834, 0.14352550953791232, 0.09752005527623187, 0.1521730854313993, 0.14530242030257323, 0.10849971479340403, 0.13031602873558934, 0.00439850462227076, 0.1283758168751914, 9.999999999998899e-05, 0.10353131941548022, 0.025228704079978126, 0.006264565647825626, 0.10657817642588363, 0.1431948154867616, 0.06715491725698053, 0.122948546141316, 0.04760868646347027, 0.09395261026044444, 0.07462011373944966, 0.1336214679244957, 0.15902714198359302, 0.10004989757344906, 0.116201990368489, 0.13696512982770181, 0.13612492388814312, 0.09350206565500452, 0.1076791842740864, 0.0665301491935697, 0.1266031285690017, 0.0628523366836714, 0.06846980700348704, 0.08625650078403646, 0.1119021456310717, 0.15035182527379853, 0.08998299889820027, 0.09890701108236366, 0.12261813399319887, 0.12433009739161538, 0.11421425977074173, 0.12152587158510253, 0.08458687588002356, 0.0928979792660719, 0.49423019354882125, 0.4592139081014671, 0.4817086153329855, 0.48825634758304026, 0.4784578590390113, 0.44808904316001685, 0.47963621213692886, 0.46612779901778667, 0.4493408745238866, 0.1085417048521935, 0.0866165022875297, 0.09139166936578147, 0.1119106457287884, 0.11465433562175753, 0.11842860632451524, 0.11449368772769664, 0.1194005913999403, 0.09042037429448413, 0.17872899826650845, 0.27343508668306926, 0.22837862915201979, 0.2396139927584211, 0.2921890485069565, 0.2869646145357233, 0.3431763807012024, 0.1899997494761354, 0.2330959051911765, 0.21917055286626197, 0.2790164489334327, 0.32146345323123016, 0.3739791672251659, 0.3429670208259801, 0.267545201835487, 0.3892233939369536, 0.3088452548898776, 0.3945136873509212, 0.26239675029852083, 0.2763263311992691, 0.2304078800155802, 0.20530510388565104, 0.2539532313677101, 0.23238972188900475, 0.22810086217750103, 0.23772246927900487, 0.2576718641102481, 0.21763060248513244, 0.19915265939983295, 0.19337529652339713, 0.19779169457384105, 0.2177122060483172, 0.18665130137358155, 0.23518394783789542, 0.20764780236108737, 0.19161553387883712, 0.29559116287921416, 0.27655076385202526, 0.23426607976633818, 0.21770940159094476, 0.1949000758193392, 0.2640868745097744, 0.3779044618204255, 0.31455944036621164, 0.19715224313852264, 0.5479194891857653, 0.16809446650532778, 0.3601757331948069, 0.7812275654841657, 0.19682545385683292, 0.39089786472398336, 0.43340757384194206, 0.16495710020918308, 0.7838194802788276, 0.5454801289727325, 0.20610409274999308, 0.1768615330249924, 0.1741426311210138, 0.3663969496876569, 0.15114575116131912, 0.2091655667898824, 0.2085804969822167, 0.37852065790092637, 0.22522804324023915, 0.21085211068648557, 0.1992374409405484, 0.182160066780803, 0.19894278395440346, 0.17445464334815608, 0.1790283126954253, 0.17657089784162694, 0.1877511594093627, 0.08797948912989018, 0.06693015202702868, 0.08811123230401041, 0.0785219572171616, 0.07986469963600118, 0.07587767133662915, 0.09061679766417163, 0.08149939723643329, 0.08360841096053573]}, "mutation_prompt": null}
{"id": "3c59b381-9e43-4d8f-8b13-3dab2d643e28", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.6\n        self.cognitive_coeff = 1.7\n        self.social_coeff = 1.4\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.7\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n        \n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.1\n        adaptive_lr = 0.1\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions with adaptive inertia\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            inertia_weight = max(0.4, self.inertia_weight - adaptive_lr * (self.budget - num_evaluations) / self.budget)\n            velocities = (inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part with adaptive neighborhood selection\n            unique_scores = np.unique(personal_best_scores)\n            diversity_ratio = len(unique_scores) / self.population_size\n            if diversity_ratio > fitness_diversity_threshold:\n                for i in range(self.population_size):\n                    if np.random.rand() < 0.5:  # Adaptive neighbor selection\n                        idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    else:\n                        idx = np.random.choice(np.arange(self.population_size), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Enhanced", "description": "Hybrid PSO-DE with Adaptive Neighborhood Selection and Dynamic Mutation for enhanced convergence and diversity management.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "704bae05-feda-4ebd-a810-df5e8f4ea097", "metadata": {"aucs": [0.6945149200076868, 0.6709898673170305, 0.6821704213329278, 0.7051038670517238, 0.686354023651344, 0.6657708759996199, 0.7058587243597553, 0.6840620106023698, 0.6940216876108275, 0.23225123460728958, 0.08202146123131226, 0.3198892283018573, 0.29957116060306566, 0.3189480525749585, 0.3016854057002001, 0.1598616823757295, 0.18627158080797468, 0.2736345798804939, 0.19094539002474853, 0.13304932710441864, 0.22147289059800424, 0.0972813363020748, 0.11862445300534619, 0.1484161028180555, 0.197815860900601, 0.2654936485883189, 0.1954183511996871, 0.12623644092230246, 0.11877799820429824, 0.14317267835775982, 0.1472942279343875, 0.13291607689245788, 0.12683884567789905, 0.11295746974141074, 0.14149049771040356, 0.13993385549118653, 0.9567732705906203, 0.94511678397513, 0.9461558519693487, 0.8550794698104801, 0.903460644679457, 0.9288213455080778, 0.9332125970398905, 0.9459559545484005, 0.9097076730043673, 0.37583661546410585, 0.3684438051413309, 0.14546974863068585, 0.32289970911878496, 0.2472383497538725, 0.17337974844201742, 0.34698947860017604, 0.13150302621204102, 0.2983719553838078, 0.5475480946977245, 0.2797057320380403, 0.2741399098445674, 0.2276596101721058, 0.5697452349165436, 0.2960351505669643, 0.44956965078975397, 0.6668984027941254, 0.2306647032332536, 0.18856229656963974, 0.10564835443848297, 0.14630070739113854, 0.17542531055522526, 0.1200721689528047, 0.13823437790582616, 0.16776666503876536, 0.16740163867362212, 0.15438803576558835, 0.17435775326830094, 0.1627915355077676, 0.18950362938177834, 0.14352550953791232, 0.09752005527623187, 0.1521730854313993, 0.14530242030257323, 0.10849971479340403, 0.13031602873558934, 0.00439850462227076, 0.1283758168751914, 9.999999999998899e-05, 0.10353131941548022, 0.025228704079978126, 0.006264565647825626, 0.10657817642588363, 0.1431948154867616, 0.06715491725698053, 0.122948546141316, 0.04760868646347027, 0.09395261026044444, 0.07462011373944966, 0.1336214679244957, 0.15902714198359302, 0.10004989757344906, 0.116201990368489, 0.13696512982770181, 0.13612492388814312, 0.09350206565500452, 0.1076791842740864, 0.0665301491935697, 0.1266031285690017, 0.0628523366836714, 0.06846980700348704, 0.08625650078403646, 0.1119021456310717, 0.15035182527379853, 0.08998299889820027, 0.09890701108236366, 0.12261813399319887, 0.12433009739161538, 0.11421425977074173, 0.12152587158510253, 0.08458687588002356, 0.0928979792660719, 0.49423019354882125, 0.4592139081014671, 0.4817086153329855, 0.48825634758304026, 0.4784578590390113, 0.44808904316001685, 0.47963621213692886, 0.46612779901778667, 0.4493408745238866, 0.1085417048521935, 0.0866165022875297, 0.09139166936578147, 0.1119106457287884, 0.11465433562175753, 0.11842860632451524, 0.11449368772769664, 0.1194005913999403, 0.09042037429448413, 0.17872899826650845, 0.27343508668306926, 0.22837862915201979, 0.2396139927584211, 0.2921890485069565, 0.2869646145357233, 0.3431763807012024, 0.1899997494761354, 0.2330959051911765, 0.21917055286626197, 0.2790164489334327, 0.32146345323123016, 0.3739791672251659, 0.3429670208259801, 0.267545201835487, 0.3892233939369536, 0.3088452548898776, 0.3945136873509212, 0.26239675029852083, 0.2763263311992691, 0.2304078800155802, 0.20530510388565104, 0.2539532313677101, 0.23238972188900475, 0.22810086217750103, 0.23772246927900487, 0.2576718641102481, 0.21763060248513244, 0.19915265939983295, 0.19337529652339713, 0.19779169457384105, 0.2177122060483172, 0.18665130137358155, 0.23518394783789542, 0.20764780236108737, 0.19161553387883712, 0.29559116287921416, 0.27655076385202526, 0.23426607976633818, 0.21770940159094476, 0.1949000758193392, 0.2640868745097744, 0.3779044618204255, 0.31455944036621164, 0.19715224313852264, 0.5479194891857653, 0.16809446650532778, 0.3601757331948069, 0.7812275654841657, 0.19682545385683292, 0.39089786472398336, 0.43340757384194206, 0.16495710020918308, 0.7838194802788276, 0.5454801289727325, 0.20610409274999308, 0.1768615330249924, 0.1741426311210138, 0.3663969496876569, 0.15114575116131912, 0.2091655667898824, 0.2085804969822167, 0.37852065790092637, 0.22522804324023915, 0.21085211068648557, 0.1992374409405484, 0.182160066780803, 0.19894278395440346, 0.17445464334815608, 0.1790283126954253, 0.17657089784162694, 0.1877511594093627, 0.08797948912989018, 0.06693015202702868, 0.08811123230401041, 0.0785219572171616, 0.07986469963600118, 0.07587767133662915, 0.09061679766417163, 0.08149939723643329, 0.08360841096053573]}, "mutation_prompt": null}
{"id": "15e02c12-fb1d-46fd-909b-305dc0a7aab2", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.6\n        self.cognitive_coeff = 1.7\n        self.social_coeff = 1.4\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.7\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n        \n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.1\n        adaptive_lr = 0.1\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions with adaptive inertia\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            inertia_weight = max(0.4, self.inertia_weight - adaptive_lr * (self.budget - num_evaluations) / self.budget)\n            velocities = (inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part with adaptive neighborhood selection\n            unique_scores = np.unique(personal_best_scores)\n            diversity_ratio = len(unique_scores) / self.population_size\n            if diversity_ratio > fitness_diversity_threshold:\n                for i in range(self.population_size):\n                    if np.random.rand() < 0.5:  # Adaptive neighbor selection\n                        idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    else:\n                        idx = np.random.choice(np.arange(self.population_size), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Enhanced", "description": "Hybrid PSO-DE with Adaptive Neighborhood Selection and Dynamic Mutation for enhanced convergence and diversity management.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "704bae05-feda-4ebd-a810-df5e8f4ea097", "metadata": {"aucs": [0.6945149200076868, 0.6709898673170305, 0.6821704213329278, 0.7051038670517238, 0.686354023651344, 0.6657708759996199, 0.7058587243597553, 0.6840620106023698, 0.6940216876108275, 0.23225123460728958, 0.08202146123131226, 0.3198892283018573, 0.29957116060306566, 0.3189480525749585, 0.3016854057002001, 0.1598616823757295, 0.18627158080797468, 0.2736345798804939, 0.19094539002474853, 0.13304932710441864, 0.22147289059800424, 0.0972813363020748, 0.11862445300534619, 0.1484161028180555, 0.197815860900601, 0.2654936485883189, 0.1954183511996871, 0.12623644092230246, 0.11877799820429824, 0.14317267835775982, 0.1472942279343875, 0.13291607689245788, 0.12683884567789905, 0.11295746974141074, 0.14149049771040356, 0.13993385549118653, 0.9567732705906203, 0.94511678397513, 0.9461558519693487, 0.8550794698104801, 0.903460644679457, 0.9288213455080778, 0.9332125970398905, 0.9459559545484005, 0.9097076730043673, 0.37583661546410585, 0.3684438051413309, 0.14546974863068585, 0.32289970911878496, 0.2472383497538725, 0.17337974844201742, 0.34698947860017604, 0.13150302621204102, 0.2983719553838078, 0.5475480946977245, 0.2797057320380403, 0.2741399098445674, 0.2276596101721058, 0.5697452349165436, 0.2960351505669643, 0.44956965078975397, 0.6668984027941254, 0.2306647032332536, 0.18856229656963974, 0.10564835443848297, 0.14630070739113854, 0.17542531055522526, 0.1200721689528047, 0.13823437790582616, 0.16776666503876536, 0.16740163867362212, 0.15438803576558835, 0.17435775326830094, 0.1627915355077676, 0.18950362938177834, 0.14352550953791232, 0.09752005527623187, 0.1521730854313993, 0.14530242030257323, 0.10849971479340403, 0.13031602873558934, 0.00439850462227076, 0.1283758168751914, 9.999999999998899e-05, 0.10353131941548022, 0.025228704079978126, 0.006264565647825626, 0.10657817642588363, 0.1431948154867616, 0.06715491725698053, 0.122948546141316, 0.04760868646347027, 0.09395261026044444, 0.07462011373944966, 0.1336214679244957, 0.15902714198359302, 0.10004989757344906, 0.116201990368489, 0.13696512982770181, 0.13612492388814312, 0.09350206565500452, 0.1076791842740864, 0.0665301491935697, 0.1266031285690017, 0.0628523366836714, 0.06846980700348704, 0.08625650078403646, 0.1119021456310717, 0.15035182527379853, 0.08998299889820027, 0.09890701108236366, 0.12261813399319887, 0.12433009739161538, 0.11421425977074173, 0.12152587158510253, 0.08458687588002356, 0.0928979792660719, 0.49423019354882125, 0.4592139081014671, 0.4817086153329855, 0.48825634758304026, 0.4784578590390113, 0.44808904316001685, 0.47963621213692886, 0.46612779901778667, 0.4493408745238866, 0.1085417048521935, 0.0866165022875297, 0.09139166936578147, 0.1119106457287884, 0.11465433562175753, 0.11842860632451524, 0.11449368772769664, 0.1194005913999403, 0.09042037429448413, 0.17872899826650845, 0.27343508668306926, 0.22837862915201979, 0.2396139927584211, 0.2921890485069565, 0.2869646145357233, 0.3431763807012024, 0.1899997494761354, 0.2330959051911765, 0.21917055286626197, 0.2790164489334327, 0.32146345323123016, 0.3739791672251659, 0.3429670208259801, 0.267545201835487, 0.3892233939369536, 0.3088452548898776, 0.3945136873509212, 0.26239675029852083, 0.2763263311992691, 0.2304078800155802, 0.20530510388565104, 0.2539532313677101, 0.23238972188900475, 0.22810086217750103, 0.23772246927900487, 0.2576718641102481, 0.21763060248513244, 0.19915265939983295, 0.19337529652339713, 0.19779169457384105, 0.2177122060483172, 0.18665130137358155, 0.23518394783789542, 0.20764780236108737, 0.19161553387883712, 0.29559116287921416, 0.27655076385202526, 0.23426607976633818, 0.21770940159094476, 0.1949000758193392, 0.2640868745097744, 0.3779044618204255, 0.31455944036621164, 0.19715224313852264, 0.5479194891857653, 0.16809446650532778, 0.3601757331948069, 0.7812275654841657, 0.19682545385683292, 0.39089786472398336, 0.43340757384194206, 0.16495710020918308, 0.7838194802788276, 0.5454801289727325, 0.20610409274999308, 0.1768615330249924, 0.1741426311210138, 0.3663969496876569, 0.15114575116131912, 0.2091655667898824, 0.2085804969822167, 0.37852065790092637, 0.22522804324023915, 0.21085211068648557, 0.1992374409405484, 0.182160066780803, 0.19894278395440346, 0.17445464334815608, 0.1790283126954253, 0.17657089784162694, 0.1877511594093627, 0.08797948912989018, 0.06693015202702868, 0.08811123230401041, 0.0785219572171616, 0.07986469963600118, 0.07587767133662915, 0.09061679766417163, 0.08149939723643329, 0.08360841096053573]}, "mutation_prompt": null}
{"id": "31f94bd3-d786-4c79-8731-fdae45fd76cc", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.6\n        self.cognitive_coeff = 1.7\n        self.social_coeff = 1.4\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.7\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n        \n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.1\n        adaptive_lr = 0.1\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions with adaptive inertia\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            inertia_weight = max(0.4, self.inertia_weight - adaptive_lr * (self.budget - num_evaluations) / self.budget)\n            velocities = (inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part with adaptive neighborhood selection\n            unique_scores = np.unique(personal_best_scores)\n            diversity_ratio = len(unique_scores) / self.population_size\n            if diversity_ratio > fitness_diversity_threshold:\n                for i in range(self.population_size):\n                    if np.random.rand() < 0.5:  # Adaptive neighbor selection\n                        idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    else:\n                        idx = np.random.choice(np.arange(self.population_size), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Enhanced", "description": "Hybrid PSO-DE with Adaptive Neighborhood Selection and Dynamic Mutation for enhanced convergence and diversity management.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "704bae05-feda-4ebd-a810-df5e8f4ea097", "metadata": {"aucs": [0.6945149200076868, 0.6709898673170305, 0.6821704213329278, 0.7051038670517238, 0.686354023651344, 0.6657708759996199, 0.7058587243597553, 0.6840620106023698, 0.6940216876108275, 0.23225123460728958, 0.08202146123131226, 0.3198892283018573, 0.29957116060306566, 0.3189480525749585, 0.3016854057002001, 0.1598616823757295, 0.18627158080797468, 0.2736345798804939, 0.19094539002474853, 0.13304932710441864, 0.22147289059800424, 0.0972813363020748, 0.11862445300534619, 0.1484161028180555, 0.197815860900601, 0.2654936485883189, 0.1954183511996871, 0.12623644092230246, 0.11877799820429824, 0.14317267835775982, 0.1472942279343875, 0.13291607689245788, 0.12683884567789905, 0.11295746974141074, 0.14149049771040356, 0.13993385549118653, 0.9567732705906203, 0.94511678397513, 0.9461558519693487, 0.8550794698104801, 0.903460644679457, 0.9288213455080778, 0.9332125970398905, 0.9459559545484005, 0.9097076730043673, 0.37583661546410585, 0.3684438051413309, 0.14546974863068585, 0.32289970911878496, 0.2472383497538725, 0.17337974844201742, 0.34698947860017604, 0.13150302621204102, 0.2983719553838078, 0.5475480946977245, 0.2797057320380403, 0.2741399098445674, 0.2276596101721058, 0.5697452349165436, 0.2960351505669643, 0.44956965078975397, 0.6668984027941254, 0.2306647032332536, 0.18856229656963974, 0.10564835443848297, 0.14630070739113854, 0.17542531055522526, 0.1200721689528047, 0.13823437790582616, 0.16776666503876536, 0.16740163867362212, 0.15438803576558835, 0.17435775326830094, 0.1627915355077676, 0.18950362938177834, 0.14352550953791232, 0.09752005527623187, 0.1521730854313993, 0.14530242030257323, 0.10849971479340403, 0.13031602873558934, 0.00439850462227076, 0.1283758168751914, 9.999999999998899e-05, 0.10353131941548022, 0.025228704079978126, 0.006264565647825626, 0.10657817642588363, 0.1431948154867616, 0.06715491725698053, 0.122948546141316, 0.04760868646347027, 0.09395261026044444, 0.07462011373944966, 0.1336214679244957, 0.15902714198359302, 0.10004989757344906, 0.116201990368489, 0.13696512982770181, 0.13612492388814312, 0.09350206565500452, 0.1076791842740864, 0.0665301491935697, 0.1266031285690017, 0.0628523366836714, 0.06846980700348704, 0.08625650078403646, 0.1119021456310717, 0.15035182527379853, 0.08998299889820027, 0.09890701108236366, 0.12261813399319887, 0.12433009739161538, 0.11421425977074173, 0.12152587158510253, 0.08458687588002356, 0.0928979792660719, 0.49423019354882125, 0.4592139081014671, 0.4817086153329855, 0.48825634758304026, 0.4784578590390113, 0.44808904316001685, 0.47963621213692886, 0.46612779901778667, 0.4493408745238866, 0.1085417048521935, 0.0866165022875297, 0.09139166936578147, 0.1119106457287884, 0.11465433562175753, 0.11842860632451524, 0.11449368772769664, 0.1194005913999403, 0.09042037429448413, 0.17872899826650845, 0.27343508668306926, 0.22837862915201979, 0.2396139927584211, 0.2921890485069565, 0.2869646145357233, 0.3431763807012024, 0.1899997494761354, 0.2330959051911765, 0.21917055286626197, 0.2790164489334327, 0.32146345323123016, 0.3739791672251659, 0.3429670208259801, 0.267545201835487, 0.3892233939369536, 0.3088452548898776, 0.3945136873509212, 0.26239675029852083, 0.2763263311992691, 0.2304078800155802, 0.20530510388565104, 0.2539532313677101, 0.23238972188900475, 0.22810086217750103, 0.23772246927900487, 0.2576718641102481, 0.21763060248513244, 0.19915265939983295, 0.19337529652339713, 0.19779169457384105, 0.2177122060483172, 0.18665130137358155, 0.23518394783789542, 0.20764780236108737, 0.19161553387883712, 0.29559116287921416, 0.27655076385202526, 0.23426607976633818, 0.21770940159094476, 0.1949000758193392, 0.2640868745097744, 0.3779044618204255, 0.31455944036621164, 0.19715224313852264, 0.5479194891857653, 0.16809446650532778, 0.3601757331948069, 0.7812275654841657, 0.19682545385683292, 0.39089786472398336, 0.43340757384194206, 0.16495710020918308, 0.7838194802788276, 0.5454801289727325, 0.20610409274999308, 0.1768615330249924, 0.1741426311210138, 0.3663969496876569, 0.15114575116131912, 0.2091655667898824, 0.2085804969822167, 0.37852065790092637, 0.22522804324023915, 0.21085211068648557, 0.1992374409405484, 0.182160066780803, 0.19894278395440346, 0.17445464334815608, 0.1790283126954253, 0.17657089784162694, 0.1877511594093627, 0.08797948912989018, 0.06693015202702868, 0.08811123230401041, 0.0785219572171616, 0.07986469963600118, 0.07587767133662915, 0.09061679766417163, 0.08149939723643329, 0.08360841096053573]}, "mutation_prompt": null}
{"id": "27592c0c-5ef0-49a4-ba16-9ab7bb0cf958", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.6\n        self.cognitive_coeff = 1.7\n        self.social_coeff = 1.4\n        self.mutation_factor = 0.5\n        self.crossover_prob_mean = 0.7\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.5\n        self.mu_crossover_prob = 0.5\n        \n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.1\n        adaptive_lr = 0.1\n        \n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions with adaptive inertia\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            inertia_weight = max(0.4, self.inertia_weight - adaptive_lr * (self.budget - num_evaluations) / self.budget)\n            velocities = (inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            # DE Part with adaptive neighborhood selection\n            unique_scores = np.unique(personal_best_scores)\n            diversity_ratio = len(unique_scores) / self.population_size\n            if diversity_ratio > fitness_diversity_threshold:\n                for i in range(self.population_size):\n                    if np.random.rand() < 0.5:  # Adaptive neighbor selection\n                        idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    else:\n                        idx = np.random.choice(np.arange(self.population_size), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Enhanced", "description": "Hybrid PSO-DE with Adaptive Neighborhood Selection and Dynamic Mutation for enhanced convergence and diversity management.", "configspace": "", "generation": 92, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "704bae05-feda-4ebd-a810-df5e8f4ea097", "metadata": {"aucs": [0.6945149200076868, 0.6709898673170305, 0.6821704213329278, 0.7051038670517238, 0.686354023651344, 0.6657708759996199, 0.7058587243597553, 0.6840620106023698, 0.6940216876108275, 0.23225123460728958, 0.08202146123131226, 0.3198892283018573, 0.29957116060306566, 0.3189480525749585, 0.3016854057002001, 0.1598616823757295, 0.18627158080797468, 0.2736345798804939, 0.19094539002474853, 0.13304932710441864, 0.22147289059800424, 0.0972813363020748, 0.11862445300534619, 0.1484161028180555, 0.197815860900601, 0.2654936485883189, 0.1954183511996871, 0.12623644092230246, 0.11877799820429824, 0.14317267835775982, 0.1472942279343875, 0.13291607689245788, 0.12683884567789905, 0.11295746974141074, 0.14149049771040356, 0.13993385549118653, 0.9567732705906203, 0.94511678397513, 0.9461558519693487, 0.8550794698104801, 0.903460644679457, 0.9288213455080778, 0.9332125970398905, 0.9459559545484005, 0.9097076730043673, 0.37583661546410585, 0.3684438051413309, 0.14546974863068585, 0.32289970911878496, 0.2472383497538725, 0.17337974844201742, 0.34698947860017604, 0.13150302621204102, 0.2983719553838078, 0.5475480946977245, 0.2797057320380403, 0.2741399098445674, 0.2276596101721058, 0.5697452349165436, 0.2960351505669643, 0.44956965078975397, 0.6668984027941254, 0.2306647032332536, 0.18856229656963974, 0.10564835443848297, 0.14630070739113854, 0.17542531055522526, 0.1200721689528047, 0.13823437790582616, 0.16776666503876536, 0.16740163867362212, 0.15438803576558835, 0.17435775326830094, 0.1627915355077676, 0.18950362938177834, 0.14352550953791232, 0.09752005527623187, 0.1521730854313993, 0.14530242030257323, 0.10849971479340403, 0.13031602873558934, 0.00439850462227076, 0.1283758168751914, 9.999999999998899e-05, 0.10353131941548022, 0.025228704079978126, 0.006264565647825626, 0.10657817642588363, 0.1431948154867616, 0.06715491725698053, 0.122948546141316, 0.04760868646347027, 0.09395261026044444, 0.07462011373944966, 0.1336214679244957, 0.15902714198359302, 0.10004989757344906, 0.116201990368489, 0.13696512982770181, 0.13612492388814312, 0.09350206565500452, 0.1076791842740864, 0.0665301491935697, 0.1266031285690017, 0.0628523366836714, 0.06846980700348704, 0.08625650078403646, 0.1119021456310717, 0.15035182527379853, 0.08998299889820027, 0.09890701108236366, 0.12261813399319887, 0.12433009739161538, 0.11421425977074173, 0.12152587158510253, 0.08458687588002356, 0.0928979792660719, 0.49423019354882125, 0.4592139081014671, 0.4817086153329855, 0.48825634758304026, 0.4784578590390113, 0.44808904316001685, 0.47963621213692886, 0.46612779901778667, 0.4493408745238866, 0.1085417048521935, 0.0866165022875297, 0.09139166936578147, 0.1119106457287884, 0.11465433562175753, 0.11842860632451524, 0.11449368772769664, 0.1194005913999403, 0.09042037429448413, 0.17872899826650845, 0.27343508668306926, 0.22837862915201979, 0.2396139927584211, 0.2921890485069565, 0.2869646145357233, 0.3431763807012024, 0.1899997494761354, 0.2330959051911765, 0.21917055286626197, 0.2790164489334327, 0.32146345323123016, 0.3739791672251659, 0.3429670208259801, 0.267545201835487, 0.3892233939369536, 0.3088452548898776, 0.3945136873509212, 0.26239675029852083, 0.2763263311992691, 0.2304078800155802, 0.20530510388565104, 0.2539532313677101, 0.23238972188900475, 0.22810086217750103, 0.23772246927900487, 0.2576718641102481, 0.21763060248513244, 0.19915265939983295, 0.19337529652339713, 0.19779169457384105, 0.2177122060483172, 0.18665130137358155, 0.23518394783789542, 0.20764780236108737, 0.19161553387883712, 0.29559116287921416, 0.27655076385202526, 0.23426607976633818, 0.21770940159094476, 0.1949000758193392, 0.2640868745097744, 0.3779044618204255, 0.31455944036621164, 0.19715224313852264, 0.5479194891857653, 0.16809446650532778, 0.3601757331948069, 0.7812275654841657, 0.19682545385683292, 0.39089786472398336, 0.43340757384194206, 0.16495710020918308, 0.7838194802788276, 0.5454801289727325, 0.20610409274999308, 0.1768615330249924, 0.1741426311210138, 0.3663969496876569, 0.15114575116131912, 0.2091655667898824, 0.2085804969822167, 0.37852065790092637, 0.22522804324023915, 0.21085211068648557, 0.1992374409405484, 0.182160066780803, 0.19894278395440346, 0.17445464334815608, 0.1790283126954253, 0.17657089784162694, 0.1877511594093627, 0.08797948912989018, 0.06693015202702868, 0.08811123230401041, 0.0785219572171616, 0.07986469963600118, 0.07587767133662915, 0.09061679766417163, 0.08149939723643329, 0.08360841096053573]}, "mutation_prompt": null}
{"id": "633cd509-66f1-4ed1-972e-4d787211d143", "solution": "import numpy as np\n\nclass Enhanced_PSO_DE_Optimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.7  # Increased for improved exploration\n        self.cognitive_coeff = 1.8  # Slightly increased\n        self.social_coeff = 1.2  # Reduced for better trade-off\n        self.mutation_factor = 0.6  # Increased for greater diversity\n        self.crossover_prob_mean = 0.7\n        self.crossover_prob = 0.9\n        self.mu_mutation_factor = 0.55  # Adjusted for diversity\n        self.mu_crossover_prob = 0.6  # Adjusted for diversity\n\n    def __call__(self, func):\n        num_evaluations = 0\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.15  # Increased threshold\n        temporal_lr_adjustment = 0.05\n\n        while num_evaluations < self.budget:\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            inertia_weight = max(0.4, self.inertia_weight - temporal_lr_adjustment * (self.budget - num_evaluations) / self.budget)\n            velocities = (inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n            \n            unique_scores = np.unique(personal_best_scores)\n            diversity_ratio = len(unique_scores) / self.population_size\n            if diversity_ratio > fitness_diversity_threshold:\n                for i in range(self.population_size):\n                    if np.random.rand() < 0.5:\n                        idx = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                    else:\n                        idx = np.random.choice(np.arange(self.population_size), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(self.mu_mutation_factor, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(self.mu_crossover_prob, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n                        self.mu_mutation_factor = (1 - 0.1) * self.mu_mutation_factor + 0.1 * current_mutation_factor\n                        self.mu_crossover_prob = (1 - 0.1) * self.mu_crossover_prob + 0.1 * current_crossover_prob\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "Enhanced_PSO_DE_Optimizer", "description": "Enhanced Hybrid PSO-DE with Adaptive Diversity Control and Temporal Learning Rate Adjustment for improved exploration-exploitation balance.", "configspace": "", "generation": 98, "fitness": 0.24255972054999633, "feedback": "The algorithm Enhanced_PSO_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "704bae05-feda-4ebd-a810-df5e8f4ea097", "metadata": {"aucs": [0.5875781433403999, 0.549402143960998, 0.5501391626329806, 0.6104830952355429, 0.5884990859305191, 0.5714311806755108, 0.5734133294201686, 0.5527868539268328, 0.5658633977759893, 0.19258827377732401, 0.22406555538773187, 0.20896655295318545, 0.23637188287954736, 0.17832425837636767, 0.20505625083968348, 0.11252339390634569, 0.1880805053482698, 0.2547157762393987, 0.13337664474324795, 0.13965413832786866, 0.24001024247257752, 0.1320926110462025, 0.12420560081723175, 0.17786524417582583, 0.1280929194142254, 0.25447015712238863, 0.15757292367569298, 0.12396882782901253, 0.11473263901413122, 0.13652887889931553, 0.14901674880016713, 0.11587676980038197, 0.10669852685160275, 0.13841022962489602, 0.1370368972367345, 0.11636854919398609, 0.9461909945385731, 0.945995804506672, 0.9456846560674208, 0.8920140605784266, 0.91904573531461, 0.9198509950412384, 0.9353137519942871, 0.9322325596480383, 0.920152811738733, 0.28627363845775333, 0.2782874673628718, 0.28638703371038343, 0.279088917720714, 0.29684614421472577, 0.3499803708071456, 0.21583061979826934, 0.21561432121024504, 0.30623898665325955, 0.3260034841417112, 0.2818233284498166, 0.28875182452992976, 0.2665522283903552, 0.3003208817620814, 0.2268078968430265, 0.3690915281199806, 0.2885675371851244, 0.2360339826389558, 0.2193764785081277, 0.14792884457119382, 0.1611285950820811, 0.1255565241978529, 0.14178605952068668, 0.11812198308393584, 0.13468382605177998, 0.13309780246308822, 0.1379436541317558, 0.1596424450533377, 0.13328852119102108, 0.13688810389025075, 0.14241085735316572, 0.11635497894527613, 0.12554371355407223, 0.13193099971387778, 0.1011980188825099, 0.21135727797478687, 0.09147867637583973, 0.08709797596358726, 0.0020905110329125787, 0.12995199658831402, 0.050685771227378384, 0.0421110261011729, 0.01309614425607164, 0.02421293917714773, 0.06605560853245407, 0.0815879529533009, 0.08639540713636029, 0.10391415030984441, 0.06879228298893525, 0.1577979391972587, 0.0905771598834002, 0.14691316265979038, 0.08161776612811522, 0.16065266808219114, 0.02640975071060525, 0.07571238806391933, 0.0714934447690091, 0.03551064131092718, 0.0479151868600185, 0.034906843940247234, 0.09352491309556521, 0.048145030528089605, 0.045232586108031714, 0.10757274862812816, 0.08805123538761706, 0.09881192854426135, 0.0972238706681936, 0.13819810721900305, 0.13363045999161804, 0.10390380522665366, 0.12949742689030752, 0.08951682180563747, 0.44021551997034736, 0.4294527860043642, 0.4361225377663899, 0.412156300084632, 0.4437616327588354, 0.44131591656072977, 0.4640224400354799, 0.42699205674436536, 0.4342375830458568, 0.0774522171749491, 0.08804191925076754, 0.08438446258921761, 0.11748307962269677, 0.10011794695861931, 0.1050040219755567, 0.10028957348801537, 0.08095366813639082, 0.08341578597080479, 0.1720322858005946, 0.21445766866462868, 0.17260196690999507, 0.20500077198965594, 0.27000545374966867, 0.32618886516695655, 0.1586568488643194, 0.15432372484294843, 0.17784444951569678, 0.3002553069843569, 0.31082070041741394, 0.31739747270892227, 0.32536241774013674, 0.27214407934162343, 0.30327269024920744, 0.32384451479946097, 0.3342058384362354, 0.3202998150571672, 0.24028817493534915, 0.24454062305559, 0.22830484892862968, 0.2169676400526931, 0.25553381658414265, 0.21664285006881678, 0.1921383676015055, 0.2609010539294687, 0.21486137242268966, 0.18293757975153357, 0.18002448027122064, 0.19862132464820548, 0.20961523585395758, 0.19831990504697383, 0.20427859138611915, 0.21623245817488046, 0.18156070408352099, 0.2135158516283604, 0.20216999839823502, 0.21267425194451306, 0.2133703440817577, 0.21082547170382993, 0.20320870012583758, 0.2290943521416996, 0.19716064751316675, 0.22306789817735195, 0.20357832837491385, 0.5548040263190016, 0.5306250354851784, 0.1614994270592126, 0.7559189913510802, 0.20163059751494372, 0.21906299167670085, 0.17820008364849704, 0.28694260242781167, 0.7075675062154319, 0.4281449888491926, 0.2659584465332713, 0.4919682934455959, 0.19535218758243988, 0.3949672655172919, 0.18057927884909863, 0.15947558003255313, 0.18190489332170323, 0.3963228427554345, 0.1902326179599375, 0.19023177597498697, 0.18188836177230394, 0.1787205116760111, 0.18453457285705077, 0.17183960196099524, 0.1758754502660861, 0.17123193455606922, 0.1711972273346004, 0.07927462684626041, 0.0887931441348041, 0.08621639646312595, 0.08082748422796704, 0.09425551496266049, 0.08132793270960081, 0.08749799682439585, 0.07161769626898007, 0.08206859756962837]}, "mutation_prompt": null}
{"id": "750fc34a-4c83-4c4e-b859-50387bc41659", "solution": "import numpy as np\n\nclass PSO_DE_Optimizer_Enhanced:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.inertia_weight = 0.6\n        self.cognitive_coeff = 1.5  # Adjusted for better balance\n        self.social_coeff = 1.5  # Adjusted for better balance\n        self.random_walk_coeff = 0.1  # New random walk component\n        \n    def __call__(self, func):\n        num_evaluations = 0\n\n        # Initialize population for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        global_best_position = None\n        global_best_score = float('inf')\n        \n        # Initialize population for DE\n        de_population = np.copy(positions)\n        fitness_diversity_threshold = 0.15  # Adjusted threshold\n        adaptive_lr = 0.05  # Reduced to fine-tune adjustments\n\n        while num_evaluations < self.budget:\n            # PSO Part\n            for i in range(self.population_size):\n                score = func(positions[i])\n                num_evaluations += 1\n                if score < personal_best_scores[i]:\n                    personal_best_scores[i] = score\n                    personal_best_positions[i] = positions[i]\n                if score < global_best_score:\n                    global_best_score = score\n                    global_best_position = positions[i]\n            \n            # Update velocities and positions with adaptive inertia\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            inertia_weight = max(0.4, self.inertia_weight - adaptive_lr * (self.budget - num_evaluations) / self.budget)\n            velocities = (inertia_weight * velocities +\n                          self.cognitive_coeff * r1 * (personal_best_positions - positions) +\n                          self.social_coeff * r2 * (global_best_position - positions) +\n                          self.random_walk_coeff * (np.random.uniform(-1, 1, (self.population_size, self.dim))))  # Added random walk\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # DE Part with adaptive neighborhood selection\n            unique_scores = np.unique(personal_best_scores)\n            diversity_ratio = len(unique_scores) / self.population_size\n            if diversity_ratio > fitness_diversity_threshold:\n                for i in range(self.population_size):\n                    idx = np.random.choice(np.arange(self.population_size), 3, replace=False)\n                    current_mutation_factor = np.clip(np.random.normal(0.5, 0.1), 0, 1)\n                    mutant_vector = de_population[idx[0]] + current_mutation_factor * (de_population[idx[1]] - de_population[idx[2]])\n                    mutant_vector = np.clip(mutant_vector, self.lower_bound, self.upper_bound)\n                    \n                    current_crossover_prob = np.clip(np.random.normal(0.5, 0.1), 0, 1)\n                    trial_vector = np.copy(de_population[i])\n                    crossover = np.random.rand(self.dim) < current_crossover_prob\n                    trial_vector[crossover] = mutant_vector[crossover]\n                    \n                    trial_score = func(trial_vector)\n                    num_evaluations += 1\n                    if trial_score < func(de_population[i]):\n                        de_population[i] = trial_vector\n\n                    if num_evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "PSO_DE_Optimizer_Enhanced", "description": "Enhanced Hybrid PSO-DE with Random Walk Exploration and Adaptive Parameter Adjustment for improved exploration-exploitation balance.", "configspace": "", "generation": 99, "fitness": 0.20684519505683957, "feedback": "The algorithm PSO_DE_Optimizer_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "704bae05-feda-4ebd-a810-df5e8f4ea097", "metadata": {"aucs": [0.46389751223486764, 0.440061033950105, 0.4631785140910921, 0.4672009298111034, 0.4544262158130127, 0.46124640504926895, 0.4572842908465409, 0.45815830946360137, 0.4763666937802261, 0.1145276670579205, 0.13571905531560824, 0.12943979299659625, 0.10775836344155942, 0.09526721169113006, 0.09823600289704593, 0.13274905123616187, 0.11270513057108533, 0.13319692566455776, 0.11368843383704641, 0.12971291986850741, 0.10607660986949374, 0.1087376346013128, 0.10895620280384388, 0.11653515874656095, 0.10113150755751632, 0.12331956063549465, 0.11630593105511511, 0.10371133335111993, 0.09283486433329091, 0.08167567079837812, 0.10863167210568281, 0.09948341134747696, 0.08484891098463399, 0.10478069807836787, 0.11541335621318705, 0.10042244798994449, 0.9466701329591232, 0.9445465625712095, 0.9573672091072557, 0.9091774418458131, 0.919458318222918, 0.9409104185501126, 0.9458388318692863, 0.9465180298519298, 0.906178422811343, 0.269863753877048, 0.2801093689569233, 0.2441971187088423, 0.24324158796726159, 0.252011103315709, 0.2439947925124738, 0.23896712559551592, 0.22881080595247227, 0.25541127494212756, 0.21512980047287344, 0.16821715930057013, 0.20092165892454938, 0.21344826876585787, 0.196559824431484, 0.2548984677726698, 0.3234255566544816, 0.22527770458867213, 0.18301637412949523, 0.14214682813894963, 0.09000807181399628, 0.13487777394133005, 0.09702950824794221, 0.13501756539804932, 0.15693294985941542, 0.14400834360071002, 0.15976811947299807, 0.15019472604538275, 0.1391995476954042, 0.11763942984436604, 0.13224224979723354, 0.16363667488749756, 0.11222025120845935, 0.13062947528404656, 0.13271406752490333, 0.08029909796231571, 0.09853084209250429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.035746342102172424, 0.061880838553302064, 0.04492025724616322, 0.05570299935827294, 0.041726324153795735, 0.06188006227971177, 0.06114198463783227, 0.11220892951957617, 0.10216638870592398, 0.09106277002650132, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09677560864734347, 0.037843062779489234, 0.07012792020410419, 0.07942342208665709, 0.047586036250952035, 0.05447930398847345, 0.06898273932253762, 0.061418050178430494, 0.06837679118250706, 0.390443155145065, 0.3850008943112003, 0.41144248084878987, 0.4091144636158146, 0.39041735644642706, 0.3827568239232998, 0.3995992147127241, 0.3764618177273409, 0.3961064641669073, 0.08030970518223257, 0.0928144874824548, 0.09574973541806608, 0.09254732858548564, 0.07592045947469539, 0.08684448789336052, 0.07088330994349801, 0.0957376742518391, 0.10393361073611573, 0.17880878842569403, 0.19852767493146106, 0.17637401080187465, 0.23669904265853114, 0.2123545070528925, 0.2836216490550715, 0.2766370674327917, 0.1812434711651555, 0.2351469191742136, 0.21340210967184625, 0.28820108400315514, 0.28036415888723476, 0.286405190501673, 0.22754341362594643, 0.277478025504343, 0.2722610952071054, 0.2766525279205452, 0.29012384717341944, 0.22033784907016496, 0.2098106530014775, 0.19090581000686613, 0.1549239652715163, 0.19794477257821153, 0.19901931026955777, 0.20084324982926272, 0.2201146414757006, 0.21404564035732643, 0.2057731882073519, 0.19132332797517293, 0.21371313616316168, 0.21658168146111334, 0.19613839885594353, 0.18748613931429514, 0.22156945747753365, 0.18653088441172683, 0.201256792443966, 0.2056982626624636, 0.17734886821191742, 0.1850270307206029, 0.21979415513338518, 0.1824429191640513, 0.18576655594267233, 0.18900833893977953, 0.20877263208849728, 0.21014086690010103, 0.5250273041164777, 0.16397428578953366, 0.16916299347754393, 0.6205570442516157, 0.19743605614923454, 0.19790559951998898, 0.14838227688147576, 0.16274197829594128, 0.208038262830334, 0.6078864502931136, 0.20458978936347005, 0.15832043742011992, 0.3930704343858985, 0.4056548601773534, 0.18537121377896026, 0.15733690535357314, 0.17317143165734872, 0.14287028467256746, 0.17256397629810472, 0.17551916149097013, 0.19600239056139146, 0.21461824541188912, 0.175936142149548, 0.16974741963745088, 0.17570632347321025, 0.19421603754179384, 0.19712778506039197, 0.06958787701239233, 0.083990472436974, 0.09229588652673215, 0.07591738818453919, 0.08388067936045351, 0.08426059790765761, 0.07491897071207987, 0.08360629867933023, 0.07282439164007515]}, "mutation_prompt": null}
