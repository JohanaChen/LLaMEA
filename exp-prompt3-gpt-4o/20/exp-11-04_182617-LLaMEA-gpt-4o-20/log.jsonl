{"id": "bc4951c7-5b71-45ec-91e9-7ee380d7f2b8", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.velocity_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within the bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adjust inertia weight adaptively\n            self.inertia = 0.5 + (0.9 - 0.5) * ((self.budget - evaluations) / self.budget)\n\n        return global_best_value", "name": "AdaptivePSO", "description": "The algorithm combines concepts from Particle Swarm Optimization (PSO) with adaptive learning rates to balance exploration and exploitation effectively within a fixed budget.", "configspace": "", "generation": 0, "fitness": 0.21726863482587164, "feedback": "The algorithm AdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": null, "metadata": {"aucs": [0.6491442390708164, 0.6491442390708164, 0.6491442390708164, 0.18141099783422954, 0.18141099783422954, 0.18141099783422954, 0.5309601565471935, 0.5309601565471935, 0.5309601565471935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15321007262764075, 0.15321007262764075, 0.15321007262764075, 0.10444288098615795, 0.10444288098615795, 0.10444288098615795, 0.1074007471347691, 0.1074007471347691, 0.1074007471347691, 0.1154499151084235, 0.1154499151084235, 0.1154499151084235, 0.1479507483046616, 0.1479507483046616, 0.1479507483046616, 0.08642800177424925, 0.08642800177424925, 0.08642800177424925, 0.0678081989227094, 0.0678081989227094, 0.0678081989227094, 0.07305234604650435, 0.07305234604650435, 0.07305234604650435, 0.9894407548590543, 0.9894407548590543, 0.9894407548590543, 0.9940702513735991, 0.9940702513735991, 0.9940702513735991, 0.9876414580402074, 0.9876414580402074, 0.9876414580402074, 0.346645187222939, 0.346645187222939, 0.346645187222939, 0.3190562003549967, 0.3190562003549967, 0.3190562003549967, 0.31025071932267634, 0.31025071932267634, 0.31025071932267634, 0.1549062251720117, 0.1549062251720117, 0.1549062251720117, 0.17430725786934087, 0.17430725786934087, 0.17430725786934087, 0.11659523379297243, 0.11659523379297243, 0.11659523379297243, 0.1206086602429185, 0.1206086602429185, 0.1206086602429185, 0.10772307185369279, 0.10772307185369279, 0.10772307185369279, 0.11447992988493005, 0.11447992988493005, 0.11447992988493005, 0.2993187131249052, 0.2993187131249052, 0.2993187131249052, 0.11548516812951148, 0.11548516812951148, 0.11548516812951148, 0.11594237922481865, 0.11594237922481865, 0.11594237922481865, 0.056741679198487716, 0.056741679198487716, 0.056741679198487716, 0.06825482427766405, 0.06825482427766405, 0.06825482427766405, 0.1525710052022623, 0.1525710052022623, 0.1525710052022623, 0.1274648519563436, 0.1274648519563436, 0.1274648519563436, 0.1790383566288115, 0.1790383566288115, 0.1790383566288115, 0.03842500569676066, 0.03842500569676066, 0.03842500569676066, 0.030709834196791075, 0.030709834196791075, 0.030709834196791075, 0.043817493299528554, 0.043817493299528554, 0.043817493299528554, 0.03210961756369868, 0.03210961756369868, 0.03210961756369868, 0.17894917590818238, 0.17894917590818238, 0.17894917590818238, 0.07974411643992685, 0.07974411643992685, 0.07974411643992685, 0.04563532943742443, 0.04563532943742443, 0.04563532943742443, 0.4541934248373882, 0.4541934248373882, 0.4541934248373882, 0.42484735561464526, 0.42484735561464526, 0.42484735561464526, 0.4224610774074079, 0.4224610774074079, 0.4224610774074079, 0.10218674863061117, 0.10218674863061117, 0.10218674863061117, 0.12858978982398772, 0.12858978982398772, 0.12858978982398772, 0.0885630104584545, 0.0885630104584545, 0.0885630104584545, 0.26269618857895394, 0.26269618857895394, 0.26269618857895394, 0.14131211691956214, 0.14131211691956214, 0.14131211691956214, 0.18740884416404335, 0.18740884416404335, 0.18740884416404335, 0.25429799525106267, 0.25429799525106267, 0.25429799525106267, 0.1988903344371925, 0.1988903344371925, 0.1988903344371925, 0.2637101166761956, 0.2637101166761956, 0.2637101166761956, 0.18286385964824814, 0.18286385964824814, 0.18286385964824814, 0.18068434320669968, 0.18068434320669968, 0.18068434320669968, 0.13299930887261102, 0.13299930887261102, 0.13299930887261102, 0.20525895575186426, 0.20525895575186426, 0.20525895575186426, 0.1905444307678097, 0.1905444307678097, 0.1905444307678097, 0.19285359856567308, 0.19285359856567308, 0.19285359856567308, 0.19640552574790904, 0.19640552574790904, 0.19640552574790904, 0.2159206974906952, 0.2159206974906952, 0.2159206974906952, 0.20301010880622172, 0.20301010880622172, 0.20301010880622172, 0.7408272546719585, 0.7408272546719585, 0.7408272546719585, 0.193004179869378, 0.193004179869378, 0.193004179869378, 0.19182433859979886, 0.19182433859979886, 0.19182433859979886, 0.1678794485038989, 0.1678794485038989, 0.1678794485038989, 0.20688632880000102, 0.20688632880000102, 0.20688632880000102, 0.15175855829149865, 0.15175855829149865, 0.15175855829149865, 0.19386180840698464, 0.19386180840698464, 0.19386180840698464, 0.20138457229437823, 0.20138457229437823, 0.20138457229437823, 0.21556193707394844, 0.21556193707394844, 0.21556193707394844, 0.09432691099551882, 0.09432691099551882, 0.09432691099551882, 0.07355525988337264, 0.07355525988337264, 0.07355525988337264, 0.06548247378297312, 0.06548247378297312, 0.06548247378297312]}, "mutation_prompt": null}
{"id": "5711f6bd-d52f-4e50-b318-831142894c2c", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.velocity_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within the bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adjust inertia weight adaptively\n            self.inertia = 0.5 + (0.9 - 0.5) * ((self.budget - evaluations) / self.budget)\n\n        return global_best_value", "name": "AdaptivePSO", "description": "The algorithm combines concepts from Particle Swarm Optimization (PSO) with adaptive learning rates to balance exploration and exploitation effectively within a fixed budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc4951c7-5b71-45ec-91e9-7ee380d7f2b8", "metadata": {"aucs": [0.6491442390708164, 0.6491442390708164, 0.6491442390708164, 0.18141099783422954, 0.18141099783422954, 0.18141099783422954, 0.5309601565471935, 0.5309601565471935, 0.5309601565471935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15321007262764075, 0.15321007262764075, 0.15321007262764075, 0.10444288098615795, 0.10444288098615795, 0.10444288098615795, 0.1074007471347691, 0.1074007471347691, 0.1074007471347691, 0.1154499151084235, 0.1154499151084235, 0.1154499151084235, 0.1479507483046616, 0.1479507483046616, 0.1479507483046616, 0.08642800177424925, 0.08642800177424925, 0.08642800177424925, 0.0678081989227094, 0.0678081989227094, 0.0678081989227094, 0.07305234604650435, 0.07305234604650435, 0.07305234604650435, 0.9894407548590543, 0.9894407548590543, 0.9894407548590543, 0.9940702513735991, 0.9940702513735991, 0.9940702513735991, 0.9876414580402074, 0.9876414580402074, 0.9876414580402074, 0.346645187222939, 0.346645187222939, 0.346645187222939, 0.3190562003549967, 0.3190562003549967, 0.3190562003549967, 0.31025071932267634, 0.31025071932267634, 0.31025071932267634, 0.1549062251720117, 0.1549062251720117, 0.1549062251720117, 0.17430725786934087, 0.17430725786934087, 0.17430725786934087, 0.11659523379297243, 0.11659523379297243, 0.11659523379297243, 0.1206086602429185, 0.1206086602429185, 0.1206086602429185, 0.10772307185369279, 0.10772307185369279, 0.10772307185369279, 0.11447992988493005, 0.11447992988493005, 0.11447992988493005, 0.2993187131249052, 0.2993187131249052, 0.2993187131249052, 0.11548516812951148, 0.11548516812951148, 0.11548516812951148, 0.11594237922481865, 0.11594237922481865, 0.11594237922481865, 0.056741679198487716, 0.056741679198487716, 0.056741679198487716, 0.06825482427766405, 0.06825482427766405, 0.06825482427766405, 0.1525710052022623, 0.1525710052022623, 0.1525710052022623, 0.1274648519563436, 0.1274648519563436, 0.1274648519563436, 0.1790383566288115, 0.1790383566288115, 0.1790383566288115, 0.03842500569676066, 0.03842500569676066, 0.03842500569676066, 0.030709834196791075, 0.030709834196791075, 0.030709834196791075, 0.043817493299528554, 0.043817493299528554, 0.043817493299528554, 0.03210961756369868, 0.03210961756369868, 0.03210961756369868, 0.17894917590818238, 0.17894917590818238, 0.17894917590818238, 0.07974411643992685, 0.07974411643992685, 0.07974411643992685, 0.04563532943742443, 0.04563532943742443, 0.04563532943742443, 0.4541934248373882, 0.4541934248373882, 0.4541934248373882, 0.42484735561464526, 0.42484735561464526, 0.42484735561464526, 0.4224610774074079, 0.4224610774074079, 0.4224610774074079, 0.10218674863061117, 0.10218674863061117, 0.10218674863061117, 0.12858978982398772, 0.12858978982398772, 0.12858978982398772, 0.0885630104584545, 0.0885630104584545, 0.0885630104584545, 0.26269618857895394, 0.26269618857895394, 0.26269618857895394, 0.14131211691956214, 0.14131211691956214, 0.14131211691956214, 0.18740884416404335, 0.18740884416404335, 0.18740884416404335, 0.25429799525106267, 0.25429799525106267, 0.25429799525106267, 0.1988903344371925, 0.1988903344371925, 0.1988903344371925, 0.2637101166761956, 0.2637101166761956, 0.2637101166761956, 0.18286385964824814, 0.18286385964824814, 0.18286385964824814, 0.18068434320669968, 0.18068434320669968, 0.18068434320669968, 0.13299930887261102, 0.13299930887261102, 0.13299930887261102, 0.20525895575186426, 0.20525895575186426, 0.20525895575186426, 0.1905444307678097, 0.1905444307678097, 0.1905444307678097, 0.19285359856567308, 0.19285359856567308, 0.19285359856567308, 0.19640552574790904, 0.19640552574790904, 0.19640552574790904, 0.2159206974906952, 0.2159206974906952, 0.2159206974906952, 0.20301010880622172, 0.20301010880622172, 0.20301010880622172, 0.7408272546719585, 0.7408272546719585, 0.7408272546719585, 0.193004179869378, 0.193004179869378, 0.193004179869378, 0.19182433859979886, 0.19182433859979886, 0.19182433859979886, 0.1678794485038989, 0.1678794485038989, 0.1678794485038989, 0.20688632880000102, 0.20688632880000102, 0.20688632880000102, 0.15175855829149865, 0.15175855829149865, 0.15175855829149865, 0.19386180840698464, 0.19386180840698464, 0.19386180840698464, 0.20138457229437823, 0.20138457229437823, 0.20138457229437823, 0.21556193707394844, 0.21556193707394844, 0.21556193707394844, 0.09432691099551882, 0.09432691099551882, 0.09432691099551882, 0.07355525988337264, 0.07355525988337264, 0.07355525988337264, 0.06548247378297312, 0.06548247378297312, 0.06548247378297312]}, "mutation_prompt": null}
{"id": "d2479aec-eccd-4462-a059-af3ee2e15373", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.velocity_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within the bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adjust inertia weight adaptively\n            self.inertia = 0.5 + (0.9 - 0.5) * ((self.budget - evaluations) / self.budget)\n\n        return global_best_value", "name": "AdaptivePSO", "description": "The algorithm combines concepts from Particle Swarm Optimization (PSO) with adaptive learning rates to balance exploration and exploitation effectively within a fixed budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc4951c7-5b71-45ec-91e9-7ee380d7f2b8", "metadata": {"aucs": [0.6491442390708164, 0.6491442390708164, 0.6491442390708164, 0.18141099783422954, 0.18141099783422954, 0.18141099783422954, 0.5309601565471935, 0.5309601565471935, 0.5309601565471935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15321007262764075, 0.15321007262764075, 0.15321007262764075, 0.10444288098615795, 0.10444288098615795, 0.10444288098615795, 0.1074007471347691, 0.1074007471347691, 0.1074007471347691, 0.1154499151084235, 0.1154499151084235, 0.1154499151084235, 0.1479507483046616, 0.1479507483046616, 0.1479507483046616, 0.08642800177424925, 0.08642800177424925, 0.08642800177424925, 0.0678081989227094, 0.0678081989227094, 0.0678081989227094, 0.07305234604650435, 0.07305234604650435, 0.07305234604650435, 0.9894407548590543, 0.9894407548590543, 0.9894407548590543, 0.9940702513735991, 0.9940702513735991, 0.9940702513735991, 0.9876414580402074, 0.9876414580402074, 0.9876414580402074, 0.346645187222939, 0.346645187222939, 0.346645187222939, 0.3190562003549967, 0.3190562003549967, 0.3190562003549967, 0.31025071932267634, 0.31025071932267634, 0.31025071932267634, 0.1549062251720117, 0.1549062251720117, 0.1549062251720117, 0.17430725786934087, 0.17430725786934087, 0.17430725786934087, 0.11659523379297243, 0.11659523379297243, 0.11659523379297243, 0.1206086602429185, 0.1206086602429185, 0.1206086602429185, 0.10772307185369279, 0.10772307185369279, 0.10772307185369279, 0.11447992988493005, 0.11447992988493005, 0.11447992988493005, 0.2993187131249052, 0.2993187131249052, 0.2993187131249052, 0.11548516812951148, 0.11548516812951148, 0.11548516812951148, 0.11594237922481865, 0.11594237922481865, 0.11594237922481865, 0.056741679198487716, 0.056741679198487716, 0.056741679198487716, 0.06825482427766405, 0.06825482427766405, 0.06825482427766405, 0.1525710052022623, 0.1525710052022623, 0.1525710052022623, 0.1274648519563436, 0.1274648519563436, 0.1274648519563436, 0.1790383566288115, 0.1790383566288115, 0.1790383566288115, 0.03842500569676066, 0.03842500569676066, 0.03842500569676066, 0.030709834196791075, 0.030709834196791075, 0.030709834196791075, 0.043817493299528554, 0.043817493299528554, 0.043817493299528554, 0.03210961756369868, 0.03210961756369868, 0.03210961756369868, 0.17894917590818238, 0.17894917590818238, 0.17894917590818238, 0.07974411643992685, 0.07974411643992685, 0.07974411643992685, 0.04563532943742443, 0.04563532943742443, 0.04563532943742443, 0.4541934248373882, 0.4541934248373882, 0.4541934248373882, 0.42484735561464526, 0.42484735561464526, 0.42484735561464526, 0.4224610774074079, 0.4224610774074079, 0.4224610774074079, 0.10218674863061117, 0.10218674863061117, 0.10218674863061117, 0.12858978982398772, 0.12858978982398772, 0.12858978982398772, 0.0885630104584545, 0.0885630104584545, 0.0885630104584545, 0.26269618857895394, 0.26269618857895394, 0.26269618857895394, 0.14131211691956214, 0.14131211691956214, 0.14131211691956214, 0.18740884416404335, 0.18740884416404335, 0.18740884416404335, 0.25429799525106267, 0.25429799525106267, 0.25429799525106267, 0.1988903344371925, 0.1988903344371925, 0.1988903344371925, 0.2637101166761956, 0.2637101166761956, 0.2637101166761956, 0.18286385964824814, 0.18286385964824814, 0.18286385964824814, 0.18068434320669968, 0.18068434320669968, 0.18068434320669968, 0.13299930887261102, 0.13299930887261102, 0.13299930887261102, 0.20525895575186426, 0.20525895575186426, 0.20525895575186426, 0.1905444307678097, 0.1905444307678097, 0.1905444307678097, 0.19285359856567308, 0.19285359856567308, 0.19285359856567308, 0.19640552574790904, 0.19640552574790904, 0.19640552574790904, 0.2159206974906952, 0.2159206974906952, 0.2159206974906952, 0.20301010880622172, 0.20301010880622172, 0.20301010880622172, 0.7408272546719585, 0.7408272546719585, 0.7408272546719585, 0.193004179869378, 0.193004179869378, 0.193004179869378, 0.19182433859979886, 0.19182433859979886, 0.19182433859979886, 0.1678794485038989, 0.1678794485038989, 0.1678794485038989, 0.20688632880000102, 0.20688632880000102, 0.20688632880000102, 0.15175855829149865, 0.15175855829149865, 0.15175855829149865, 0.19386180840698464, 0.19386180840698464, 0.19386180840698464, 0.20138457229437823, 0.20138457229437823, 0.20138457229437823, 0.21556193707394844, 0.21556193707394844, 0.21556193707394844, 0.09432691099551882, 0.09432691099551882, 0.09432691099551882, 0.07355525988337264, 0.07355525988337264, 0.07355525988337264, 0.06548247378297312, 0.06548247378297312, 0.06548247378297312]}, "mutation_prompt": null}
{"id": "22301c18-8ece-4f6b-be90-31934458acca", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.velocity_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within the bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adjust inertia weight adaptively\n            self.inertia = 0.5 + (0.9 - 0.5) * ((self.budget - evaluations) / self.budget)\n\n        return global_best_value", "name": "AdaptivePSO", "description": "The algorithm combines concepts from Particle Swarm Optimization (PSO) with adaptive learning rates to balance exploration and exploitation effectively within a fixed budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc4951c7-5b71-45ec-91e9-7ee380d7f2b8", "metadata": {"aucs": [0.6491442390708164, 0.6491442390708164, 0.6491442390708164, 0.18141099783422954, 0.18141099783422954, 0.18141099783422954, 0.5309601565471935, 0.5309601565471935, 0.5309601565471935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15321007262764075, 0.15321007262764075, 0.15321007262764075, 0.10444288098615795, 0.10444288098615795, 0.10444288098615795, 0.1074007471347691, 0.1074007471347691, 0.1074007471347691, 0.1154499151084235, 0.1154499151084235, 0.1154499151084235, 0.1479507483046616, 0.1479507483046616, 0.1479507483046616, 0.08642800177424925, 0.08642800177424925, 0.08642800177424925, 0.0678081989227094, 0.0678081989227094, 0.0678081989227094, 0.07305234604650435, 0.07305234604650435, 0.07305234604650435, 0.9894407548590543, 0.9894407548590543, 0.9894407548590543, 0.9940702513735991, 0.9940702513735991, 0.9940702513735991, 0.9876414580402074, 0.9876414580402074, 0.9876414580402074, 0.346645187222939, 0.346645187222939, 0.346645187222939, 0.3190562003549967, 0.3190562003549967, 0.3190562003549967, 0.31025071932267634, 0.31025071932267634, 0.31025071932267634, 0.1549062251720117, 0.1549062251720117, 0.1549062251720117, 0.17430725786934087, 0.17430725786934087, 0.17430725786934087, 0.11659523379297243, 0.11659523379297243, 0.11659523379297243, 0.1206086602429185, 0.1206086602429185, 0.1206086602429185, 0.10772307185369279, 0.10772307185369279, 0.10772307185369279, 0.11447992988493005, 0.11447992988493005, 0.11447992988493005, 0.2993187131249052, 0.2993187131249052, 0.2993187131249052, 0.11548516812951148, 0.11548516812951148, 0.11548516812951148, 0.11594237922481865, 0.11594237922481865, 0.11594237922481865, 0.056741679198487716, 0.056741679198487716, 0.056741679198487716, 0.06825482427766405, 0.06825482427766405, 0.06825482427766405, 0.1525710052022623, 0.1525710052022623, 0.1525710052022623, 0.1274648519563436, 0.1274648519563436, 0.1274648519563436, 0.1790383566288115, 0.1790383566288115, 0.1790383566288115, 0.03842500569676066, 0.03842500569676066, 0.03842500569676066, 0.030709834196791075, 0.030709834196791075, 0.030709834196791075, 0.043817493299528554, 0.043817493299528554, 0.043817493299528554, 0.03210961756369868, 0.03210961756369868, 0.03210961756369868, 0.17894917590818238, 0.17894917590818238, 0.17894917590818238, 0.07974411643992685, 0.07974411643992685, 0.07974411643992685, 0.04563532943742443, 0.04563532943742443, 0.04563532943742443, 0.4541934248373882, 0.4541934248373882, 0.4541934248373882, 0.42484735561464526, 0.42484735561464526, 0.42484735561464526, 0.4224610774074079, 0.4224610774074079, 0.4224610774074079, 0.10218674863061117, 0.10218674863061117, 0.10218674863061117, 0.12858978982398772, 0.12858978982398772, 0.12858978982398772, 0.0885630104584545, 0.0885630104584545, 0.0885630104584545, 0.26269618857895394, 0.26269618857895394, 0.26269618857895394, 0.14131211691956214, 0.14131211691956214, 0.14131211691956214, 0.18740884416404335, 0.18740884416404335, 0.18740884416404335, 0.25429799525106267, 0.25429799525106267, 0.25429799525106267, 0.1988903344371925, 0.1988903344371925, 0.1988903344371925, 0.2637101166761956, 0.2637101166761956, 0.2637101166761956, 0.18286385964824814, 0.18286385964824814, 0.18286385964824814, 0.18068434320669968, 0.18068434320669968, 0.18068434320669968, 0.13299930887261102, 0.13299930887261102, 0.13299930887261102, 0.20525895575186426, 0.20525895575186426, 0.20525895575186426, 0.1905444307678097, 0.1905444307678097, 0.1905444307678097, 0.19285359856567308, 0.19285359856567308, 0.19285359856567308, 0.19640552574790904, 0.19640552574790904, 0.19640552574790904, 0.2159206974906952, 0.2159206974906952, 0.2159206974906952, 0.20301010880622172, 0.20301010880622172, 0.20301010880622172, 0.7408272546719585, 0.7408272546719585, 0.7408272546719585, 0.193004179869378, 0.193004179869378, 0.193004179869378, 0.19182433859979886, 0.19182433859979886, 0.19182433859979886, 0.1678794485038989, 0.1678794485038989, 0.1678794485038989, 0.20688632880000102, 0.20688632880000102, 0.20688632880000102, 0.15175855829149865, 0.15175855829149865, 0.15175855829149865, 0.19386180840698464, 0.19386180840698464, 0.19386180840698464, 0.20138457229437823, 0.20138457229437823, 0.20138457229437823, 0.21556193707394844, 0.21556193707394844, 0.21556193707394844, 0.09432691099551882, 0.09432691099551882, 0.09432691099551882, 0.07355525988337264, 0.07355525988337264, 0.07355525988337264, 0.06548247378297312, 0.06548247378297312, 0.06548247378297312]}, "mutation_prompt": null}
{"id": "f6835af4-eaf7-4946-ace8-65379ff00121", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.velocity_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within the bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adjust inertia weight adaptively\n            self.inertia = 0.5 + (0.9 - 0.5) * ((self.budget - evaluations) / self.budget)\n\n        return global_best_value", "name": "AdaptivePSO", "description": "The algorithm combines concepts from Particle Swarm Optimization (PSO) with adaptive learning rates to balance exploration and exploitation effectively within a fixed budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc4951c7-5b71-45ec-91e9-7ee380d7f2b8", "metadata": {"aucs": [0.6491442390708164, 0.6491442390708164, 0.6491442390708164, 0.18141099783422954, 0.18141099783422954, 0.18141099783422954, 0.5309601565471935, 0.5309601565471935, 0.5309601565471935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15321007262764075, 0.15321007262764075, 0.15321007262764075, 0.10444288098615795, 0.10444288098615795, 0.10444288098615795, 0.1074007471347691, 0.1074007471347691, 0.1074007471347691, 0.1154499151084235, 0.1154499151084235, 0.1154499151084235, 0.1479507483046616, 0.1479507483046616, 0.1479507483046616, 0.08642800177424925, 0.08642800177424925, 0.08642800177424925, 0.0678081989227094, 0.0678081989227094, 0.0678081989227094, 0.07305234604650435, 0.07305234604650435, 0.07305234604650435, 0.9894407548590543, 0.9894407548590543, 0.9894407548590543, 0.9940702513735991, 0.9940702513735991, 0.9940702513735991, 0.9876414580402074, 0.9876414580402074, 0.9876414580402074, 0.346645187222939, 0.346645187222939, 0.346645187222939, 0.3190562003549967, 0.3190562003549967, 0.3190562003549967, 0.31025071932267634, 0.31025071932267634, 0.31025071932267634, 0.1549062251720117, 0.1549062251720117, 0.1549062251720117, 0.17430725786934087, 0.17430725786934087, 0.17430725786934087, 0.11659523379297243, 0.11659523379297243, 0.11659523379297243, 0.1206086602429185, 0.1206086602429185, 0.1206086602429185, 0.10772307185369279, 0.10772307185369279, 0.10772307185369279, 0.11447992988493005, 0.11447992988493005, 0.11447992988493005, 0.2993187131249052, 0.2993187131249052, 0.2993187131249052, 0.11548516812951148, 0.11548516812951148, 0.11548516812951148, 0.11594237922481865, 0.11594237922481865, 0.11594237922481865, 0.056741679198487716, 0.056741679198487716, 0.056741679198487716, 0.06825482427766405, 0.06825482427766405, 0.06825482427766405, 0.1525710052022623, 0.1525710052022623, 0.1525710052022623, 0.1274648519563436, 0.1274648519563436, 0.1274648519563436, 0.1790383566288115, 0.1790383566288115, 0.1790383566288115, 0.03842500569676066, 0.03842500569676066, 0.03842500569676066, 0.030709834196791075, 0.030709834196791075, 0.030709834196791075, 0.043817493299528554, 0.043817493299528554, 0.043817493299528554, 0.03210961756369868, 0.03210961756369868, 0.03210961756369868, 0.17894917590818238, 0.17894917590818238, 0.17894917590818238, 0.07974411643992685, 0.07974411643992685, 0.07974411643992685, 0.04563532943742443, 0.04563532943742443, 0.04563532943742443, 0.4541934248373882, 0.4541934248373882, 0.4541934248373882, 0.42484735561464526, 0.42484735561464526, 0.42484735561464526, 0.4224610774074079, 0.4224610774074079, 0.4224610774074079, 0.10218674863061117, 0.10218674863061117, 0.10218674863061117, 0.12858978982398772, 0.12858978982398772, 0.12858978982398772, 0.0885630104584545, 0.0885630104584545, 0.0885630104584545, 0.26269618857895394, 0.26269618857895394, 0.26269618857895394, 0.14131211691956214, 0.14131211691956214, 0.14131211691956214, 0.18740884416404335, 0.18740884416404335, 0.18740884416404335, 0.25429799525106267, 0.25429799525106267, 0.25429799525106267, 0.1988903344371925, 0.1988903344371925, 0.1988903344371925, 0.2637101166761956, 0.2637101166761956, 0.2637101166761956, 0.18286385964824814, 0.18286385964824814, 0.18286385964824814, 0.18068434320669968, 0.18068434320669968, 0.18068434320669968, 0.13299930887261102, 0.13299930887261102, 0.13299930887261102, 0.20525895575186426, 0.20525895575186426, 0.20525895575186426, 0.1905444307678097, 0.1905444307678097, 0.1905444307678097, 0.19285359856567308, 0.19285359856567308, 0.19285359856567308, 0.19640552574790904, 0.19640552574790904, 0.19640552574790904, 0.2159206974906952, 0.2159206974906952, 0.2159206974906952, 0.20301010880622172, 0.20301010880622172, 0.20301010880622172, 0.7408272546719585, 0.7408272546719585, 0.7408272546719585, 0.193004179869378, 0.193004179869378, 0.193004179869378, 0.19182433859979886, 0.19182433859979886, 0.19182433859979886, 0.1678794485038989, 0.1678794485038989, 0.1678794485038989, 0.20688632880000102, 0.20688632880000102, 0.20688632880000102, 0.15175855829149865, 0.15175855829149865, 0.15175855829149865, 0.19386180840698464, 0.19386180840698464, 0.19386180840698464, 0.20138457229437823, 0.20138457229437823, 0.20138457229437823, 0.21556193707394844, 0.21556193707394844, 0.21556193707394844, 0.09432691099551882, 0.09432691099551882, 0.09432691099551882, 0.07355525988337264, 0.07355525988337264, 0.07355525988337264, 0.06548247378297312, 0.06548247378297312, 0.06548247378297312]}, "mutation_prompt": null}
{"id": "3a922ac5-bf1c-47c9-bfb0-6d72646a9581", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.velocity_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within the bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adjust inertia weight adaptively\n            self.inertia = 0.5 + (0.9 - 0.5) * ((self.budget - evaluations) / self.budget)\n\n        return global_best_value", "name": "AdaptivePSO", "description": "The algorithm combines concepts from Particle Swarm Optimization (PSO) with adaptive learning rates to balance exploration and exploitation effectively within a fixed budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc4951c7-5b71-45ec-91e9-7ee380d7f2b8", "metadata": {"aucs": [0.6491442390708164, 0.6491442390708164, 0.6491442390708164, 0.18141099783422954, 0.18141099783422954, 0.18141099783422954, 0.5309601565471935, 0.5309601565471935, 0.5309601565471935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15321007262764075, 0.15321007262764075, 0.15321007262764075, 0.10444288098615795, 0.10444288098615795, 0.10444288098615795, 0.1074007471347691, 0.1074007471347691, 0.1074007471347691, 0.1154499151084235, 0.1154499151084235, 0.1154499151084235, 0.1479507483046616, 0.1479507483046616, 0.1479507483046616, 0.08642800177424925, 0.08642800177424925, 0.08642800177424925, 0.0678081989227094, 0.0678081989227094, 0.0678081989227094, 0.07305234604650435, 0.07305234604650435, 0.07305234604650435, 0.9894407548590543, 0.9894407548590543, 0.9894407548590543, 0.9940702513735991, 0.9940702513735991, 0.9940702513735991, 0.9876414580402074, 0.9876414580402074, 0.9876414580402074, 0.346645187222939, 0.346645187222939, 0.346645187222939, 0.3190562003549967, 0.3190562003549967, 0.3190562003549967, 0.31025071932267634, 0.31025071932267634, 0.31025071932267634, 0.1549062251720117, 0.1549062251720117, 0.1549062251720117, 0.17430725786934087, 0.17430725786934087, 0.17430725786934087, 0.11659523379297243, 0.11659523379297243, 0.11659523379297243, 0.1206086602429185, 0.1206086602429185, 0.1206086602429185, 0.10772307185369279, 0.10772307185369279, 0.10772307185369279, 0.11447992988493005, 0.11447992988493005, 0.11447992988493005, 0.2993187131249052, 0.2993187131249052, 0.2993187131249052, 0.11548516812951148, 0.11548516812951148, 0.11548516812951148, 0.11594237922481865, 0.11594237922481865, 0.11594237922481865, 0.056741679198487716, 0.056741679198487716, 0.056741679198487716, 0.06825482427766405, 0.06825482427766405, 0.06825482427766405, 0.1525710052022623, 0.1525710052022623, 0.1525710052022623, 0.1274648519563436, 0.1274648519563436, 0.1274648519563436, 0.1790383566288115, 0.1790383566288115, 0.1790383566288115, 0.03842500569676066, 0.03842500569676066, 0.03842500569676066, 0.030709834196791075, 0.030709834196791075, 0.030709834196791075, 0.043817493299528554, 0.043817493299528554, 0.043817493299528554, 0.03210961756369868, 0.03210961756369868, 0.03210961756369868, 0.17894917590818238, 0.17894917590818238, 0.17894917590818238, 0.07974411643992685, 0.07974411643992685, 0.07974411643992685, 0.04563532943742443, 0.04563532943742443, 0.04563532943742443, 0.4541934248373882, 0.4541934248373882, 0.4541934248373882, 0.42484735561464526, 0.42484735561464526, 0.42484735561464526, 0.4224610774074079, 0.4224610774074079, 0.4224610774074079, 0.10218674863061117, 0.10218674863061117, 0.10218674863061117, 0.12858978982398772, 0.12858978982398772, 0.12858978982398772, 0.0885630104584545, 0.0885630104584545, 0.0885630104584545, 0.26269618857895394, 0.26269618857895394, 0.26269618857895394, 0.14131211691956214, 0.14131211691956214, 0.14131211691956214, 0.18740884416404335, 0.18740884416404335, 0.18740884416404335, 0.25429799525106267, 0.25429799525106267, 0.25429799525106267, 0.1988903344371925, 0.1988903344371925, 0.1988903344371925, 0.2637101166761956, 0.2637101166761956, 0.2637101166761956, 0.18286385964824814, 0.18286385964824814, 0.18286385964824814, 0.18068434320669968, 0.18068434320669968, 0.18068434320669968, 0.13299930887261102, 0.13299930887261102, 0.13299930887261102, 0.20525895575186426, 0.20525895575186426, 0.20525895575186426, 0.1905444307678097, 0.1905444307678097, 0.1905444307678097, 0.19285359856567308, 0.19285359856567308, 0.19285359856567308, 0.19640552574790904, 0.19640552574790904, 0.19640552574790904, 0.2159206974906952, 0.2159206974906952, 0.2159206974906952, 0.20301010880622172, 0.20301010880622172, 0.20301010880622172, 0.7408272546719585, 0.7408272546719585, 0.7408272546719585, 0.193004179869378, 0.193004179869378, 0.193004179869378, 0.19182433859979886, 0.19182433859979886, 0.19182433859979886, 0.1678794485038989, 0.1678794485038989, 0.1678794485038989, 0.20688632880000102, 0.20688632880000102, 0.20688632880000102, 0.15175855829149865, 0.15175855829149865, 0.15175855829149865, 0.19386180840698464, 0.19386180840698464, 0.19386180840698464, 0.20138457229437823, 0.20138457229437823, 0.20138457229437823, 0.21556193707394844, 0.21556193707394844, 0.21556193707394844, 0.09432691099551882, 0.09432691099551882, 0.09432691099551882, 0.07355525988337264, 0.07355525988337264, 0.07355525988337264, 0.06548247378297312, 0.06548247378297312, 0.06548247378297312]}, "mutation_prompt": null}
{"id": "1d6e2366-a91a-4787-a7dd-a62f37f3558d", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.velocity_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within the bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adjust inertia weight adaptively\n            self.inertia = 0.5 + (0.9 - 0.5) * ((self.budget - evaluations) / self.budget)\n\n        return global_best_value", "name": "AdaptivePSO", "description": "The algorithm combines concepts from Particle Swarm Optimization (PSO) with adaptive learning rates to balance exploration and exploitation effectively within a fixed budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc4951c7-5b71-45ec-91e9-7ee380d7f2b8", "metadata": {"aucs": [0.6491442390708164, 0.6491442390708164, 0.6491442390708164, 0.18141099783422954, 0.18141099783422954, 0.18141099783422954, 0.5309601565471935, 0.5309601565471935, 0.5309601565471935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15321007262764075, 0.15321007262764075, 0.15321007262764075, 0.10444288098615795, 0.10444288098615795, 0.10444288098615795, 0.1074007471347691, 0.1074007471347691, 0.1074007471347691, 0.1154499151084235, 0.1154499151084235, 0.1154499151084235, 0.1479507483046616, 0.1479507483046616, 0.1479507483046616, 0.08642800177424925, 0.08642800177424925, 0.08642800177424925, 0.0678081989227094, 0.0678081989227094, 0.0678081989227094, 0.07305234604650435, 0.07305234604650435, 0.07305234604650435, 0.9894407548590543, 0.9894407548590543, 0.9894407548590543, 0.9940702513735991, 0.9940702513735991, 0.9940702513735991, 0.9876414580402074, 0.9876414580402074, 0.9876414580402074, 0.346645187222939, 0.346645187222939, 0.346645187222939, 0.3190562003549967, 0.3190562003549967, 0.3190562003549967, 0.31025071932267634, 0.31025071932267634, 0.31025071932267634, 0.1549062251720117, 0.1549062251720117, 0.1549062251720117, 0.17430725786934087, 0.17430725786934087, 0.17430725786934087, 0.11659523379297243, 0.11659523379297243, 0.11659523379297243, 0.1206086602429185, 0.1206086602429185, 0.1206086602429185, 0.10772307185369279, 0.10772307185369279, 0.10772307185369279, 0.11447992988493005, 0.11447992988493005, 0.11447992988493005, 0.2993187131249052, 0.2993187131249052, 0.2993187131249052, 0.11548516812951148, 0.11548516812951148, 0.11548516812951148, 0.11594237922481865, 0.11594237922481865, 0.11594237922481865, 0.056741679198487716, 0.056741679198487716, 0.056741679198487716, 0.06825482427766405, 0.06825482427766405, 0.06825482427766405, 0.1525710052022623, 0.1525710052022623, 0.1525710052022623, 0.1274648519563436, 0.1274648519563436, 0.1274648519563436, 0.1790383566288115, 0.1790383566288115, 0.1790383566288115, 0.03842500569676066, 0.03842500569676066, 0.03842500569676066, 0.030709834196791075, 0.030709834196791075, 0.030709834196791075, 0.043817493299528554, 0.043817493299528554, 0.043817493299528554, 0.03210961756369868, 0.03210961756369868, 0.03210961756369868, 0.17894917590818238, 0.17894917590818238, 0.17894917590818238, 0.07974411643992685, 0.07974411643992685, 0.07974411643992685, 0.04563532943742443, 0.04563532943742443, 0.04563532943742443, 0.4541934248373882, 0.4541934248373882, 0.4541934248373882, 0.42484735561464526, 0.42484735561464526, 0.42484735561464526, 0.4224610774074079, 0.4224610774074079, 0.4224610774074079, 0.10218674863061117, 0.10218674863061117, 0.10218674863061117, 0.12858978982398772, 0.12858978982398772, 0.12858978982398772, 0.0885630104584545, 0.0885630104584545, 0.0885630104584545, 0.26269618857895394, 0.26269618857895394, 0.26269618857895394, 0.14131211691956214, 0.14131211691956214, 0.14131211691956214, 0.18740884416404335, 0.18740884416404335, 0.18740884416404335, 0.25429799525106267, 0.25429799525106267, 0.25429799525106267, 0.1988903344371925, 0.1988903344371925, 0.1988903344371925, 0.2637101166761956, 0.2637101166761956, 0.2637101166761956, 0.18286385964824814, 0.18286385964824814, 0.18286385964824814, 0.18068434320669968, 0.18068434320669968, 0.18068434320669968, 0.13299930887261102, 0.13299930887261102, 0.13299930887261102, 0.20525895575186426, 0.20525895575186426, 0.20525895575186426, 0.1905444307678097, 0.1905444307678097, 0.1905444307678097, 0.19285359856567308, 0.19285359856567308, 0.19285359856567308, 0.19640552574790904, 0.19640552574790904, 0.19640552574790904, 0.2159206974906952, 0.2159206974906952, 0.2159206974906952, 0.20301010880622172, 0.20301010880622172, 0.20301010880622172, 0.7408272546719585, 0.7408272546719585, 0.7408272546719585, 0.193004179869378, 0.193004179869378, 0.193004179869378, 0.19182433859979886, 0.19182433859979886, 0.19182433859979886, 0.1678794485038989, 0.1678794485038989, 0.1678794485038989, 0.20688632880000102, 0.20688632880000102, 0.20688632880000102, 0.15175855829149865, 0.15175855829149865, 0.15175855829149865, 0.19386180840698464, 0.19386180840698464, 0.19386180840698464, 0.20138457229437823, 0.20138457229437823, 0.20138457229437823, 0.21556193707394844, 0.21556193707394844, 0.21556193707394844, 0.09432691099551882, 0.09432691099551882, 0.09432691099551882, 0.07355525988337264, 0.07355525988337264, 0.07355525988337264, 0.06548247378297312, 0.06548247378297312, 0.06548247378297312]}, "mutation_prompt": null}
{"id": "7cb1f7d7-3b4f-4f0d-b094-409986a11c6c", "solution": "import numpy as np\n\nclass AdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.velocity_scale = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within the bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adjust inertia weight adaptively\n            self.inertia = 0.5 + (0.9 - 0.5) * ((self.budget - evaluations) / self.budget)\n\n        return global_best_value", "name": "AdaptivePSO", "description": "The algorithm combines concepts from Particle Swarm Optimization (PSO) with adaptive learning rates to balance exploration and exploitation effectively within a fixed budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc4951c7-5b71-45ec-91e9-7ee380d7f2b8", "metadata": {"aucs": [0.6491442390708164, 0.6491442390708164, 0.6491442390708164, 0.18141099783422954, 0.18141099783422954, 0.18141099783422954, 0.5309601565471935, 0.5309601565471935, 0.5309601565471935, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15321007262764075, 0.15321007262764075, 0.15321007262764075, 0.10444288098615795, 0.10444288098615795, 0.10444288098615795, 0.1074007471347691, 0.1074007471347691, 0.1074007471347691, 0.1154499151084235, 0.1154499151084235, 0.1154499151084235, 0.1479507483046616, 0.1479507483046616, 0.1479507483046616, 0.08642800177424925, 0.08642800177424925, 0.08642800177424925, 0.0678081989227094, 0.0678081989227094, 0.0678081989227094, 0.07305234604650435, 0.07305234604650435, 0.07305234604650435, 0.9894407548590543, 0.9894407548590543, 0.9894407548590543, 0.9940702513735991, 0.9940702513735991, 0.9940702513735991, 0.9876414580402074, 0.9876414580402074, 0.9876414580402074, 0.346645187222939, 0.346645187222939, 0.346645187222939, 0.3190562003549967, 0.3190562003549967, 0.3190562003549967, 0.31025071932267634, 0.31025071932267634, 0.31025071932267634, 0.1549062251720117, 0.1549062251720117, 0.1549062251720117, 0.17430725786934087, 0.17430725786934087, 0.17430725786934087, 0.11659523379297243, 0.11659523379297243, 0.11659523379297243, 0.1206086602429185, 0.1206086602429185, 0.1206086602429185, 0.10772307185369279, 0.10772307185369279, 0.10772307185369279, 0.11447992988493005, 0.11447992988493005, 0.11447992988493005, 0.2993187131249052, 0.2993187131249052, 0.2993187131249052, 0.11548516812951148, 0.11548516812951148, 0.11548516812951148, 0.11594237922481865, 0.11594237922481865, 0.11594237922481865, 0.056741679198487716, 0.056741679198487716, 0.056741679198487716, 0.06825482427766405, 0.06825482427766405, 0.06825482427766405, 0.1525710052022623, 0.1525710052022623, 0.1525710052022623, 0.1274648519563436, 0.1274648519563436, 0.1274648519563436, 0.1790383566288115, 0.1790383566288115, 0.1790383566288115, 0.03842500569676066, 0.03842500569676066, 0.03842500569676066, 0.030709834196791075, 0.030709834196791075, 0.030709834196791075, 0.043817493299528554, 0.043817493299528554, 0.043817493299528554, 0.03210961756369868, 0.03210961756369868, 0.03210961756369868, 0.17894917590818238, 0.17894917590818238, 0.17894917590818238, 0.07974411643992685, 0.07974411643992685, 0.07974411643992685, 0.04563532943742443, 0.04563532943742443, 0.04563532943742443, 0.4541934248373882, 0.4541934248373882, 0.4541934248373882, 0.42484735561464526, 0.42484735561464526, 0.42484735561464526, 0.4224610774074079, 0.4224610774074079, 0.4224610774074079, 0.10218674863061117, 0.10218674863061117, 0.10218674863061117, 0.12858978982398772, 0.12858978982398772, 0.12858978982398772, 0.0885630104584545, 0.0885630104584545, 0.0885630104584545, 0.26269618857895394, 0.26269618857895394, 0.26269618857895394, 0.14131211691956214, 0.14131211691956214, 0.14131211691956214, 0.18740884416404335, 0.18740884416404335, 0.18740884416404335, 0.25429799525106267, 0.25429799525106267, 0.25429799525106267, 0.1988903344371925, 0.1988903344371925, 0.1988903344371925, 0.2637101166761956, 0.2637101166761956, 0.2637101166761956, 0.18286385964824814, 0.18286385964824814, 0.18286385964824814, 0.18068434320669968, 0.18068434320669968, 0.18068434320669968, 0.13299930887261102, 0.13299930887261102, 0.13299930887261102, 0.20525895575186426, 0.20525895575186426, 0.20525895575186426, 0.1905444307678097, 0.1905444307678097, 0.1905444307678097, 0.19285359856567308, 0.19285359856567308, 0.19285359856567308, 0.19640552574790904, 0.19640552574790904, 0.19640552574790904, 0.2159206974906952, 0.2159206974906952, 0.2159206974906952, 0.20301010880622172, 0.20301010880622172, 0.20301010880622172, 0.7408272546719585, 0.7408272546719585, 0.7408272546719585, 0.193004179869378, 0.193004179869378, 0.193004179869378, 0.19182433859979886, 0.19182433859979886, 0.19182433859979886, 0.1678794485038989, 0.1678794485038989, 0.1678794485038989, 0.20688632880000102, 0.20688632880000102, 0.20688632880000102, 0.15175855829149865, 0.15175855829149865, 0.15175855829149865, 0.19386180840698464, 0.19386180840698464, 0.19386180840698464, 0.20138457229437823, 0.20138457229437823, 0.20138457229437823, 0.21556193707394844, 0.21556193707394844, 0.21556193707394844, 0.09432691099551882, 0.09432691099551882, 0.09432691099551882, 0.07355525988337264, 0.07355525988337264, 0.07355525988337264, 0.06548247378297312, 0.06548247378297312, 0.06548247378297312]}, "mutation_prompt": null}
{"id": "6da54cf3-5f4f-412b-acef-de129d94d4c3", "solution": "import numpy as np\n\nclass ImprovedAdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  # Added mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n                               \n                # Apply mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] += np.random.uniform(-self.velocity_scale, self.velocity_scale, self.dim)\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within the bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adjust inertia weight adaptively and dynamically adjust swarm size\n            self.inertia = 0.5 + (0.9 - 0.5) * ((self.budget - evaluations) / self.budget)\n            if evaluations % 10 == 0 and self.swarm_size > 10:  # Dynamic adjustment condition\n                self.swarm_size -= 1  # Reducing swarm size dynamically\n\n        return global_best_value", "name": "ImprovedAdaptivePSO", "description": "Improved AdaptivePSO integrates mutation and dynamic particle adjustment for enhanced exploration and diversification.", "configspace": "", "generation": 8, "fitness": 0.2280233657026127, "feedback": "The algorithm ImprovedAdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.23.", "error": "", "parent_id": "bc4951c7-5b71-45ec-91e9-7ee380d7f2b8", "metadata": {"aucs": [0.5408175237982435, 0.5408175237982435, 0.5408175237982435, 0.5050057962967744, 0.5050057962967744, 0.5050057962967744, 0.533587556838168, 0.533587556838168, 0.533587556838168, 0.1354982803166107, 0.1354982803166107, 0.1354982803166107, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0333831621486439, 0.0333831621486439, 0.0333831621486439, 0.11100548696122836, 0.11100548696122836, 0.11100548696122836, 0.11525573123264299, 0.11525573123264299, 0.11525573123264299, 0.0929802730969812, 0.0929802730969812, 0.0929802730969812, 0.10176123431076345, 0.10176123431076345, 0.10176123431076345, 0.09761816161014225, 0.09761816161014225, 0.09761816161014225, 0.08785743800642754, 0.08785743800642754, 0.08785743800642754, 0.9864442184708949, 0.9864442184708949, 0.9864442184708949, 0.9918822034084123, 0.9918822034084123, 0.9918822034084123, 0.9881484397556086, 0.9881484397556086, 0.9881484397556086, 0.3239981983227699, 0.3239981983227699, 0.3239981983227699, 0.35598600481310694, 0.35598600481310694, 0.35598600481310694, 0.36775050854120583, 0.36775050854120583, 0.36775050854120583, 0.09504956190628322, 0.09504956190628322, 0.09504956190628322, 0.18845378437778537, 0.18845378437778537, 0.18845378437778537, 0.22651249053954114, 0.22651249053954114, 0.22651249053954114, 0.11752798139747866, 0.11752798139747866, 0.11752798139747866, 0.16545011178287183, 0.16545011178287183, 0.16545011178287183, 0.17200195308841137, 0.17200195308841137, 0.17200195308841137, 0.15050936410628546, 0.15050936410628546, 0.15050936410628546, 0.15736469970676115, 0.15736469970676115, 0.15736469970676115, 0.16702514475862917, 0.16702514475862917, 0.16702514475862917, 0.005923429814611358, 0.005923429814611358, 0.005923429814611358, 0.009884668796749985, 0.009884668796749985, 0.009884668796749985, 0.0010413042438096598, 0.0010413042438096598, 0.0010413042438096598, 0.047569575374038275, 0.047569575374038275, 0.047569575374038275, 0.03837500095272495, 0.03837500095272495, 0.03837500095272495, 0.0634722535947474, 0.0634722535947474, 0.0634722535947474, 0.029453510036062336, 0.029453510036062336, 0.029453510036062336, 0.0835109213851869, 0.0835109213851869, 0.0835109213851869, 0.11698133282307754, 0.11698133282307754, 0.11698133282307754, 0.09749662885322263, 0.09749662885322263, 0.09749662885322263, 0.04966270242711013, 0.04966270242711013, 0.04966270242711013, 0.1037320977931484, 0.1037320977931484, 0.1037320977931484, 0.4313167573101979, 0.4313167573101979, 0.4313167573101979, 0.42029970772225234, 0.42029970772225234, 0.42029970772225234, 0.46070280039077693, 0.46070280039077693, 0.46070280039077693, 0.08433555127191161, 0.08433555127191161, 0.08433555127191161, 0.08889171098096993, 0.08889171098096993, 0.08889171098096993, 0.11162803678685673, 0.11162803678685673, 0.11162803678685673, 0.15872347403444786, 0.15872347403444786, 0.15872347403444786, 0.14091832452163777, 0.14091832452163777, 0.14091832452163777, 0.22506581523046498, 0.22506581523046498, 0.22506581523046498, 0.2464359596807285, 0.2464359596807285, 0.2464359596807285, 0.22474034791067965, 0.22474034791067965, 0.22474034791067965, 0.2603303727049824, 0.2603303727049824, 0.2603303727049824, 0.21687531083788358, 0.21687531083788358, 0.21687531083788358, 0.17283885610602323, 0.17283885610602323, 0.17283885610602323, 0.1377480801484231, 0.1377480801484231, 0.1377480801484231, 0.20777255725953125, 0.20777255725953125, 0.20777255725953125, 0.25453709762196675, 0.25453709762196675, 0.25453709762196675, 0.17135863767473514, 0.17135863767473514, 0.17135863767473514, 0.4305433121031794, 0.4305433121031794, 0.4305433121031794, 0.22691852116453004, 0.22691852116453004, 0.22691852116453004, 0.17397957051454793, 0.17397957051454793, 0.17397957051454793, 0.826241144553097, 0.826241144553097, 0.826241144553097, 0.15709674278669428, 0.15709674278669428, 0.15709674278669428, 0.18549300828485626, 0.18549300828485626, 0.18549300828485626, 0.16700087870650027, 0.16700087870650027, 0.16700087870650027, 0.7638786660447799, 0.7638786660447799, 0.7638786660447799, 0.15275089253324314, 0.15275089253324314, 0.15275089253324314, 0.21441865328591947, 0.21441865328591947, 0.21441865328591947, 0.2095676837217939, 0.2095676837217939, 0.2095676837217939, 0.20315810591408878, 0.20315810591408878, 0.20315810591408878, 0.08074365098648828, 0.08074365098648828, 0.08074365098648828, 0.07011740733840144, 0.07011740733840144, 0.07011740733840144, 0.08517595876836226, 0.08517595876836226, 0.08517595876836226]}, "mutation_prompt": null}
{"id": "e0758ead-a270-4175-9a1a-4fb3c8cd1c7b", "solution": "import numpy as np\n\nclass ImprovedAdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  # Added mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n                               \n                # Apply mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] += np.random.uniform(-self.velocity_scale, self.velocity_scale, self.dim)\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within the bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adjust inertia weight adaptively and dynamically adjust swarm size\n            self.inertia = 0.5 + (0.9 - 0.5) * ((self.budget - evaluations) / self.budget)\n            if evaluations % 10 == 0 and self.swarm_size > 10:  # Dynamic adjustment condition\n                self.swarm_size -= 1  # Reducing swarm size dynamically\n\n        return global_best_value", "name": "ImprovedAdaptivePSO", "description": "Improved AdaptivePSO integrates mutation and dynamic particle adjustment for enhanced exploration and diversification.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6da54cf3-5f4f-412b-acef-de129d94d4c3", "metadata": {"aucs": [0.5408175237982435, 0.5408175237982435, 0.5408175237982435, 0.5050057962967744, 0.5050057962967744, 0.5050057962967744, 0.533587556838168, 0.533587556838168, 0.533587556838168, 0.1354982803166107, 0.1354982803166107, 0.1354982803166107, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0333831621486439, 0.0333831621486439, 0.0333831621486439, 0.11100548696122836, 0.11100548696122836, 0.11100548696122836, 0.11525573123264299, 0.11525573123264299, 0.11525573123264299, 0.0929802730969812, 0.0929802730969812, 0.0929802730969812, 0.10176123431076345, 0.10176123431076345, 0.10176123431076345, 0.09761816161014225, 0.09761816161014225, 0.09761816161014225, 0.08785743800642754, 0.08785743800642754, 0.08785743800642754, 0.9864442184708949, 0.9864442184708949, 0.9864442184708949, 0.9918822034084123, 0.9918822034084123, 0.9918822034084123, 0.9881484397556086, 0.9881484397556086, 0.9881484397556086, 0.3239981983227699, 0.3239981983227699, 0.3239981983227699, 0.35598600481310694, 0.35598600481310694, 0.35598600481310694, 0.36775050854120583, 0.36775050854120583, 0.36775050854120583, 0.09504956190628322, 0.09504956190628322, 0.09504956190628322, 0.18845378437778537, 0.18845378437778537, 0.18845378437778537, 0.22651249053954114, 0.22651249053954114, 0.22651249053954114, 0.11752798139747866, 0.11752798139747866, 0.11752798139747866, 0.16545011178287183, 0.16545011178287183, 0.16545011178287183, 0.17200195308841137, 0.17200195308841137, 0.17200195308841137, 0.15050936410628546, 0.15050936410628546, 0.15050936410628546, 0.15736469970676115, 0.15736469970676115, 0.15736469970676115, 0.16702514475862917, 0.16702514475862917, 0.16702514475862917, 0.005923429814611358, 0.005923429814611358, 0.005923429814611358, 0.009884668796749985, 0.009884668796749985, 0.009884668796749985, 0.0010413042438096598, 0.0010413042438096598, 0.0010413042438096598, 0.047569575374038275, 0.047569575374038275, 0.047569575374038275, 0.03837500095272495, 0.03837500095272495, 0.03837500095272495, 0.0634722535947474, 0.0634722535947474, 0.0634722535947474, 0.029453510036062336, 0.029453510036062336, 0.029453510036062336, 0.0835109213851869, 0.0835109213851869, 0.0835109213851869, 0.11698133282307754, 0.11698133282307754, 0.11698133282307754, 0.09749662885322263, 0.09749662885322263, 0.09749662885322263, 0.04966270242711013, 0.04966270242711013, 0.04966270242711013, 0.1037320977931484, 0.1037320977931484, 0.1037320977931484, 0.4313167573101979, 0.4313167573101979, 0.4313167573101979, 0.42029970772225234, 0.42029970772225234, 0.42029970772225234, 0.46070280039077693, 0.46070280039077693, 0.46070280039077693, 0.08433555127191161, 0.08433555127191161, 0.08433555127191161, 0.08889171098096993, 0.08889171098096993, 0.08889171098096993, 0.11162803678685673, 0.11162803678685673, 0.11162803678685673, 0.15872347403444786, 0.15872347403444786, 0.15872347403444786, 0.14091832452163777, 0.14091832452163777, 0.14091832452163777, 0.22506581523046498, 0.22506581523046498, 0.22506581523046498, 0.2464359596807285, 0.2464359596807285, 0.2464359596807285, 0.22474034791067965, 0.22474034791067965, 0.22474034791067965, 0.2603303727049824, 0.2603303727049824, 0.2603303727049824, 0.21687531083788358, 0.21687531083788358, 0.21687531083788358, 0.17283885610602323, 0.17283885610602323, 0.17283885610602323, 0.1377480801484231, 0.1377480801484231, 0.1377480801484231, 0.20777255725953125, 0.20777255725953125, 0.20777255725953125, 0.25453709762196675, 0.25453709762196675, 0.25453709762196675, 0.17135863767473514, 0.17135863767473514, 0.17135863767473514, 0.4305433121031794, 0.4305433121031794, 0.4305433121031794, 0.22691852116453004, 0.22691852116453004, 0.22691852116453004, 0.17397957051454793, 0.17397957051454793, 0.17397957051454793, 0.826241144553097, 0.826241144553097, 0.826241144553097, 0.15709674278669428, 0.15709674278669428, 0.15709674278669428, 0.18549300828485626, 0.18549300828485626, 0.18549300828485626, 0.16700087870650027, 0.16700087870650027, 0.16700087870650027, 0.7638786660447799, 0.7638786660447799, 0.7638786660447799, 0.15275089253324314, 0.15275089253324314, 0.15275089253324314, 0.21441865328591947, 0.21441865328591947, 0.21441865328591947, 0.2095676837217939, 0.2095676837217939, 0.2095676837217939, 0.20315810591408878, 0.20315810591408878, 0.20315810591408878, 0.08074365098648828, 0.08074365098648828, 0.08074365098648828, 0.07011740733840144, 0.07011740733840144, 0.07011740733840144, 0.08517595876836226, 0.08517595876836226, 0.08517595876836226]}, "mutation_prompt": null}
{"id": "3c7a2e44-cc4e-4bfe-95b3-ad57f7239279", "solution": "import numpy as np\n\nclass ImprovedAdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.5\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  # Added mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n                               \n                # Apply mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] += np.random.uniform(-self.velocity_scale, self.velocity_scale, self.dim)\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within the bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adjust inertia weight adaptively and dynamically adjust swarm size\n            self.inertia = 0.5 + (0.9 - 0.5) * ((self.budget - evaluations) / self.budget)\n            if evaluations % 10 == 0 and self.swarm_size > 10:  # Dynamic adjustment condition\n                self.swarm_size -= 1  # Reducing swarm size dynamically\n\n        return global_best_value", "name": "ImprovedAdaptivePSO", "description": "Improved AdaptivePSO integrates mutation and dynamic particle adjustment for enhanced exploration and diversification.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6da54cf3-5f4f-412b-acef-de129d94d4c3", "metadata": {"aucs": [0.5408175237982435, 0.5408175237982435, 0.5408175237982435, 0.5050057962967744, 0.5050057962967744, 0.5050057962967744, 0.533587556838168, 0.533587556838168, 0.533587556838168, 0.1354982803166107, 0.1354982803166107, 0.1354982803166107, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0333831621486439, 0.0333831621486439, 0.0333831621486439, 0.11100548696122836, 0.11100548696122836, 0.11100548696122836, 0.11525573123264299, 0.11525573123264299, 0.11525573123264299, 0.0929802730969812, 0.0929802730969812, 0.0929802730969812, 0.10176123431076345, 0.10176123431076345, 0.10176123431076345, 0.09761816161014225, 0.09761816161014225, 0.09761816161014225, 0.08785743800642754, 0.08785743800642754, 0.08785743800642754, 0.9864442184708949, 0.9864442184708949, 0.9864442184708949, 0.9918822034084123, 0.9918822034084123, 0.9918822034084123, 0.9881484397556086, 0.9881484397556086, 0.9881484397556086, 0.3239981983227699, 0.3239981983227699, 0.3239981983227699, 0.35598600481310694, 0.35598600481310694, 0.35598600481310694, 0.36775050854120583, 0.36775050854120583, 0.36775050854120583, 0.09504956190628322, 0.09504956190628322, 0.09504956190628322, 0.18845378437778537, 0.18845378437778537, 0.18845378437778537, 0.22651249053954114, 0.22651249053954114, 0.22651249053954114, 0.11752798139747866, 0.11752798139747866, 0.11752798139747866, 0.16545011178287183, 0.16545011178287183, 0.16545011178287183, 0.17200195308841137, 0.17200195308841137, 0.17200195308841137, 0.15050936410628546, 0.15050936410628546, 0.15050936410628546, 0.15736469970676115, 0.15736469970676115, 0.15736469970676115, 0.16702514475862917, 0.16702514475862917, 0.16702514475862917, 0.005923429814611358, 0.005923429814611358, 0.005923429814611358, 0.009884668796749985, 0.009884668796749985, 0.009884668796749985, 0.0010413042438096598, 0.0010413042438096598, 0.0010413042438096598, 0.047569575374038275, 0.047569575374038275, 0.047569575374038275, 0.03837500095272495, 0.03837500095272495, 0.03837500095272495, 0.0634722535947474, 0.0634722535947474, 0.0634722535947474, 0.029453510036062336, 0.029453510036062336, 0.029453510036062336, 0.0835109213851869, 0.0835109213851869, 0.0835109213851869, 0.11698133282307754, 0.11698133282307754, 0.11698133282307754, 0.09749662885322263, 0.09749662885322263, 0.09749662885322263, 0.04966270242711013, 0.04966270242711013, 0.04966270242711013, 0.1037320977931484, 0.1037320977931484, 0.1037320977931484, 0.4313167573101979, 0.4313167573101979, 0.4313167573101979, 0.42029970772225234, 0.42029970772225234, 0.42029970772225234, 0.46070280039077693, 0.46070280039077693, 0.46070280039077693, 0.08433555127191161, 0.08433555127191161, 0.08433555127191161, 0.08889171098096993, 0.08889171098096993, 0.08889171098096993, 0.11162803678685673, 0.11162803678685673, 0.11162803678685673, 0.15872347403444786, 0.15872347403444786, 0.15872347403444786, 0.14091832452163777, 0.14091832452163777, 0.14091832452163777, 0.22506581523046498, 0.22506581523046498, 0.22506581523046498, 0.2464359596807285, 0.2464359596807285, 0.2464359596807285, 0.22474034791067965, 0.22474034791067965, 0.22474034791067965, 0.2603303727049824, 0.2603303727049824, 0.2603303727049824, 0.21687531083788358, 0.21687531083788358, 0.21687531083788358, 0.17283885610602323, 0.17283885610602323, 0.17283885610602323, 0.1377480801484231, 0.1377480801484231, 0.1377480801484231, 0.20777255725953125, 0.20777255725953125, 0.20777255725953125, 0.25453709762196675, 0.25453709762196675, 0.25453709762196675, 0.17135863767473514, 0.17135863767473514, 0.17135863767473514, 0.4305433121031794, 0.4305433121031794, 0.4305433121031794, 0.22691852116453004, 0.22691852116453004, 0.22691852116453004, 0.17397957051454793, 0.17397957051454793, 0.17397957051454793, 0.826241144553097, 0.826241144553097, 0.826241144553097, 0.15709674278669428, 0.15709674278669428, 0.15709674278669428, 0.18549300828485626, 0.18549300828485626, 0.18549300828485626, 0.16700087870650027, 0.16700087870650027, 0.16700087870650027, 0.7638786660447799, 0.7638786660447799, 0.7638786660447799, 0.15275089253324314, 0.15275089253324314, 0.15275089253324314, 0.21441865328591947, 0.21441865328591947, 0.21441865328591947, 0.2095676837217939, 0.2095676837217939, 0.2095676837217939, 0.20315810591408878, 0.20315810591408878, 0.20315810591408878, 0.08074365098648828, 0.08074365098648828, 0.08074365098648828, 0.07011740733840144, 0.07011740733840144, 0.07011740733840144, 0.08517595876836226, 0.08517595876836226, 0.08517595876836226]}, "mutation_prompt": null}
{"id": "cc4da2de-697a-4d40-955c-d57997959ef6", "solution": "import numpy as np\n\nclass EnhancedMultiStrategyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.9  # Increased initial inertia\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 2.0  # Enhanced social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.2  # Increased mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n                \n                # Enhanced mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)  # Scale velocity for diversity\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Non-linear inertia weight adjustment\n            self.inertia = 0.4 + 0.5 * ((np.sin(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "EnhancedMultiStrategyPSO", "description": "Enhanced Multi-Strategy PSO introduces a combination of non-linear inertia, adaptive mutation, and diversity preservation for robust exploration.", "configspace": "", "generation": 11, "fitness": 0.25975151655847056, "feedback": "The algorithm EnhancedMultiStrategyPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": "6da54cf3-5f4f-412b-acef-de129d94d4c3", "metadata": {"aucs": [0.8919390444381342, 0.8919390444381342, 0.8919390444381342, 0.8351462527498408, 0.8351462527498408, 0.8351462527498408, 0.8897889490353998, 0.8897889490353998, 0.8897889490353998, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.33211736534591196, 0.33211736534591196, 0.33211736534591196, 0.2595153094411634, 0.2595153094411634, 0.2595153094411634, 0.11727791799302778, 0.11727791799302778, 0.11727791799302778, 0.11240979270401441, 0.11240979270401441, 0.11240979270401441, 0.07116404589045, 0.07116404589045, 0.07116404589045, 0.0736203027958301, 0.0736203027958301, 0.0736203027958301, 0.05977297712115048, 0.05977297712115048, 0.05977297712115048, 0.07943624367974611, 0.07943624367974611, 0.07943624367974611, 0.9918089174913909, 0.9918089174913909, 0.9918089174913909, 0.9942354878543097, 0.9942354878543097, 0.9942354878543097, 0.9918470696081667, 0.9918470696081667, 0.9918470696081667, 0.344137183046367, 0.344137183046367, 0.344137183046367, 0.22662855304861407, 0.22662855304861407, 0.22662855304861407, 0.34366736813620424, 0.34366736813620424, 0.34366736813620424, 0.08099740010143419, 0.08099740010143419, 0.08099740010143419, 0.16248712637397933, 0.16248712637397933, 0.16248712637397933, 0.17379989963888043, 0.17379989963888043, 0.17379989963888043, 0.16239009062140575, 0.16239009062140575, 0.16239009062140575, 0.15924133382970707, 0.15924133382970707, 0.15924133382970707, 0.4933026612325815, 0.4933026612325815, 0.4933026612325815, 0.21396064990571073, 0.21396064990571073, 0.21396064990571073, 0.1909938450739439, 0.1909938450739439, 0.1909938450739439, 0.2346003942037599, 0.2346003942037599, 0.2346003942037599, 0.0863874219219044, 0.0863874219219044, 0.0863874219219044, 0.20132982625400409, 0.20132982625400409, 0.20132982625400409, 0.055825654150713167, 0.055825654150713167, 0.055825654150713167, 0.1702251704943677, 0.1702251704943677, 0.1702251704943677, 0.11277567186116488, 0.11277567186116488, 0.11277567186116488, 0.10536358407416935, 0.10536358407416935, 0.10536358407416935, 0.051849181090788954, 0.051849181090788954, 0.051849181090788954, 0.16464714520788404, 0.16464714520788404, 0.16464714520788404, 0.10332354558578405, 0.10332354558578405, 0.10332354558578405, 0.09587867668842487, 0.09587867668842487, 0.09587867668842487, 0.09983897915418816, 0.09983897915418816, 0.09983897915418816, 0.39410206502870915, 0.39410206502870915, 0.39410206502870915, 0.5399202796517832, 0.5399202796517832, 0.5399202796517832, 0.556870817609632, 0.556870817609632, 0.556870817609632, 0.5606124317370725, 0.5606124317370725, 0.5606124317370725, 0.07012784838206843, 0.07012784838206843, 0.07012784838206843, 0.05460455810578568, 0.05460455810578568, 0.05460455810578568, 0.10559477869663314, 0.10559477869663314, 0.10559477869663314, 0.1297536153211606, 0.1297536153211606, 0.1297536153211606, 0.17886838313220066, 0.17886838313220066, 0.17886838313220066, 0.20760217213107202, 0.20760217213107202, 0.20760217213107202, 0.28624501375374056, 0.28624501375374056, 0.28624501375374056, 0.21180342169109112, 0.21180342169109112, 0.21180342169109112, 0.14890390552721788, 0.14890390552721788, 0.14890390552721788, 0.21655097200726292, 0.21655097200726292, 0.21655097200726292, 0.18047674632671096, 0.18047674632671096, 0.18047674632671096, 0.14030098227738796, 0.14030098227738796, 0.14030098227738796, 0.22405511798550315, 0.22405511798550315, 0.22405511798550315, 0.26961813350274766, 0.26961813350274766, 0.26961813350274766, 0.1944839791800127, 0.1944839791800127, 0.1944839791800127, 0.201713462862396, 0.201713462862396, 0.201713462862396, 0.18830421128231578, 0.18830421128231578, 0.18830421128231578, 0.1895278283313776, 0.1895278283313776, 0.1895278283313776, 0.9382759345145212, 0.9382759345145212, 0.9382759345145212, 0.15738684684485538, 0.15738684684485538, 0.15738684684485538, 0.1771255115019309, 0.1771255115019309, 0.1771255115019309, 0.1698810733297389, 0.1698810733297389, 0.1698810733297389, 0.20978824449643196, 0.20978824449643196, 0.20978824449643196, 0.17369661434748118, 0.17369661434748118, 0.17369661434748118, 0.20186170350018062, 0.20186170350018062, 0.20186170350018062, 0.21627564274918365, 0.21627564274918365, 0.21627564274918365, 0.2339065521122191, 0.2339065521122191, 0.2339065521122191, 0.08881063313015125, 0.08881063313015125, 0.08881063313015125, 0.07107908235694027, 0.07107908235694027, 0.07107908235694027, 0.08014959095784502, 0.08014959095784502, 0.08014959095784502]}, "mutation_prompt": null}
{"id": "19845cfd-d5b1-4803-8ae9-124f92d9f9de", "solution": "import numpy as np\n\nclass EnhancedMultiStrategyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.9  # Increased initial inertia\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 2.0  # Enhanced social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.2  # Increased mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n                \n                # Enhanced mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)  # Scale velocity for diversity\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Non-linear inertia weight adjustment\n            self.inertia = 0.4 + 0.5 * ((np.sin(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "EnhancedMultiStrategyPSO", "description": "Enhanced Multi-Strategy PSO introduces a combination of non-linear inertia, adaptive mutation, and diversity preservation for robust exploration.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc4da2de-697a-4d40-955c-d57997959ef6", "metadata": {"aucs": [0.8919390444381342, 0.8919390444381342, 0.8919390444381342, 0.8351462527498408, 0.8351462527498408, 0.8351462527498408, 0.8897889490353998, 0.8897889490353998, 0.8897889490353998, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.33211736534591196, 0.33211736534591196, 0.33211736534591196, 0.2595153094411634, 0.2595153094411634, 0.2595153094411634, 0.11727791799302778, 0.11727791799302778, 0.11727791799302778, 0.11240979270401441, 0.11240979270401441, 0.11240979270401441, 0.07116404589045, 0.07116404589045, 0.07116404589045, 0.0736203027958301, 0.0736203027958301, 0.0736203027958301, 0.05977297712115048, 0.05977297712115048, 0.05977297712115048, 0.07943624367974611, 0.07943624367974611, 0.07943624367974611, 0.9918089174913909, 0.9918089174913909, 0.9918089174913909, 0.9942354878543097, 0.9942354878543097, 0.9942354878543097, 0.9918470696081667, 0.9918470696081667, 0.9918470696081667, 0.344137183046367, 0.344137183046367, 0.344137183046367, 0.22662855304861407, 0.22662855304861407, 0.22662855304861407, 0.34366736813620424, 0.34366736813620424, 0.34366736813620424, 0.08099740010143419, 0.08099740010143419, 0.08099740010143419, 0.16248712637397933, 0.16248712637397933, 0.16248712637397933, 0.17379989963888043, 0.17379989963888043, 0.17379989963888043, 0.16239009062140575, 0.16239009062140575, 0.16239009062140575, 0.15924133382970707, 0.15924133382970707, 0.15924133382970707, 0.4933026612325815, 0.4933026612325815, 0.4933026612325815, 0.21396064990571073, 0.21396064990571073, 0.21396064990571073, 0.1909938450739439, 0.1909938450739439, 0.1909938450739439, 0.2346003942037599, 0.2346003942037599, 0.2346003942037599, 0.0863874219219044, 0.0863874219219044, 0.0863874219219044, 0.20132982625400409, 0.20132982625400409, 0.20132982625400409, 0.055825654150713167, 0.055825654150713167, 0.055825654150713167, 0.1702251704943677, 0.1702251704943677, 0.1702251704943677, 0.11277567186116488, 0.11277567186116488, 0.11277567186116488, 0.10536358407416935, 0.10536358407416935, 0.10536358407416935, 0.051849181090788954, 0.051849181090788954, 0.051849181090788954, 0.16464714520788404, 0.16464714520788404, 0.16464714520788404, 0.10332354558578405, 0.10332354558578405, 0.10332354558578405, 0.09587867668842487, 0.09587867668842487, 0.09587867668842487, 0.09983897915418816, 0.09983897915418816, 0.09983897915418816, 0.39410206502870915, 0.39410206502870915, 0.39410206502870915, 0.5399202796517832, 0.5399202796517832, 0.5399202796517832, 0.556870817609632, 0.556870817609632, 0.556870817609632, 0.5606124317370725, 0.5606124317370725, 0.5606124317370725, 0.07012784838206843, 0.07012784838206843, 0.07012784838206843, 0.05460455810578568, 0.05460455810578568, 0.05460455810578568, 0.10559477869663314, 0.10559477869663314, 0.10559477869663314, 0.1297536153211606, 0.1297536153211606, 0.1297536153211606, 0.17886838313220066, 0.17886838313220066, 0.17886838313220066, 0.20760217213107202, 0.20760217213107202, 0.20760217213107202, 0.28624501375374056, 0.28624501375374056, 0.28624501375374056, 0.21180342169109112, 0.21180342169109112, 0.21180342169109112, 0.14890390552721788, 0.14890390552721788, 0.14890390552721788, 0.21655097200726292, 0.21655097200726292, 0.21655097200726292, 0.18047674632671096, 0.18047674632671096, 0.18047674632671096, 0.14030098227738796, 0.14030098227738796, 0.14030098227738796, 0.22405511798550315, 0.22405511798550315, 0.22405511798550315, 0.26961813350274766, 0.26961813350274766, 0.26961813350274766, 0.1944839791800127, 0.1944839791800127, 0.1944839791800127, 0.201713462862396, 0.201713462862396, 0.201713462862396, 0.18830421128231578, 0.18830421128231578, 0.18830421128231578, 0.1895278283313776, 0.1895278283313776, 0.1895278283313776, 0.9382759345145212, 0.9382759345145212, 0.9382759345145212, 0.15738684684485538, 0.15738684684485538, 0.15738684684485538, 0.1771255115019309, 0.1771255115019309, 0.1771255115019309, 0.1698810733297389, 0.1698810733297389, 0.1698810733297389, 0.20978824449643196, 0.20978824449643196, 0.20978824449643196, 0.17369661434748118, 0.17369661434748118, 0.17369661434748118, 0.20186170350018062, 0.20186170350018062, 0.20186170350018062, 0.21627564274918365, 0.21627564274918365, 0.21627564274918365, 0.2339065521122191, 0.2339065521122191, 0.2339065521122191, 0.08881063313015125, 0.08881063313015125, 0.08881063313015125, 0.07107908235694027, 0.07107908235694027, 0.07107908235694027, 0.08014959095784502, 0.08014959095784502, 0.08014959095784502]}, "mutation_prompt": null}
{"id": "0973a668-e86e-4efe-b76b-8c3a80696080", "solution": "import numpy as np\n\nclass HybridAdaptivePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.9\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 2.0\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.2\n        self.reinit_threshold = budget // 10  # Reinitialize every 10% of the budget\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            if evaluations > 0 and evaluations % self.reinit_threshold == 0:\n                position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n                velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            adaptive_inertia = 0.4 + 0.5 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (adaptive_inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n                \n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "HybridAdaptivePSO", "description": "Hybrid Adaptive PSO combines periodic reinitialization and adaptive learning rates to enhance exploration and convergence balance.", "configspace": "", "generation": 13, "fitness": 0.23024919045052183, "feedback": "The algorithm HybridAdaptivePSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "cc4da2de-697a-4d40-955c-d57997959ef6", "metadata": {"aucs": [0.6752106073235897, 0.6752106073235897, 0.6752106073235897, 0.6011853049593352, 0.6011853049593352, 0.6011853049593352, 0.6482244257094669, 0.6482244257094669, 0.6482244257094669, 0.025271557921038745, 0.025271557921038745, 0.025271557921038745, 0.08012886273462372, 0.08012886273462372, 0.08012886273462372, 0.13555784625721012, 0.13555784625721012, 0.13555784625721012, 0.11766314559285529, 0.11766314559285529, 0.11766314559285529, 0.08570714813560243, 0.08570714813560243, 0.08570714813560243, 0.11085277108770586, 0.11085277108770586, 0.11085277108770586, 0.06069761164268983, 0.06069761164268983, 0.06069761164268983, 0.07526932352950766, 0.07526932352950766, 0.07526932352950766, 0.07348051585080007, 0.07348051585080007, 0.07348051585080007, 0.992627761380371, 0.992627761380371, 0.992627761380371, 0.9942354879789647, 0.9942354879789647, 0.9942354879789647, 0.9943460795846483, 0.9943460795846483, 0.9943460795846483, 0.22366707305824052, 0.22366707305824052, 0.22366707305824052, 0.3688901393001496, 0.3688901393001496, 0.3688901393001496, 0.2699731390455644, 0.2699731390455644, 0.2699731390455644, 0.18975151877221608, 0.18975151877221608, 0.18975151877221608, 0.19578763454194148, 0.19578763454194148, 0.19578763454194148, 0.1652101557825928, 0.1652101557825928, 0.1652101557825928, 0.525845598092896, 0.525845598092896, 0.525845598092896, 0.19992819415082064, 0.19992819415082064, 0.19992819415082064, 0.1190359572167845, 0.1190359572167845, 0.1190359572167845, 0.11648590720487484, 0.11648590720487484, 0.11648590720487484, 0.1434698794076672, 0.1434698794076672, 0.1434698794076672, 0.2061086437937275, 0.2061086437937275, 0.2061086437937275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038605637291320494, 0.038605637291320494, 0.038605637291320494, 0.020613757485190898, 0.020613757485190898, 0.020613757485190898, 0.07448192137629173, 0.07448192137629173, 0.07448192137629173, 0.132974326098374, 0.132974326098374, 0.132974326098374, 0.05415214456982975, 0.05415214456982975, 0.05415214456982975, 0.06556513618104143, 0.06556513618104143, 0.06556513618104143, 0.11850047322926971, 0.11850047322926971, 0.11850047322926971, 0.08945115210342569, 0.08945115210342569, 0.08945115210342569, 0.04954464768826039, 0.04954464768826039, 0.04954464768826039, 0.17528897970424173, 0.17528897970424173, 0.17528897970424173, 0.06772031156150005, 0.06772031156150005, 0.06772031156150005, 0.4546207184769323, 0.4546207184769323, 0.4546207184769323, 0.4526245558011259, 0.4526245558011259, 0.4526245558011259, 0.41488507961287846, 0.41488507961287846, 0.41488507961287846, 0.12144424002627707, 0.12144424002627707, 0.12144424002627707, 0.10312951961420713, 0.10312951961420713, 0.10312951961420713, 0.12282650164705411, 0.12282650164705411, 0.12282650164705411, 0.15393249404745313, 0.15393249404745313, 0.15393249404745313, 0.11303385928426446, 0.11303385928426446, 0.11303385928426446, 0.215563792262771, 0.215563792262771, 0.215563792262771, 0.34490310198760044, 0.34490310198760044, 0.34490310198760044, 0.22903626737715876, 0.22903626737715876, 0.22903626737715876, 0.264317759857865, 0.264317759857865, 0.264317759857865, 0.2650320441123629, 0.2650320441123629, 0.2650320441123629, 0.18940028748044713, 0.18940028748044713, 0.18940028748044713, 0.11938608025442532, 0.11938608025442532, 0.11938608025442532, 0.1754955401248306, 0.1754955401248306, 0.1754955401248306, 0.1839387647475922, 0.1839387647475922, 0.1839387647475922, 0.17139213239768392, 0.17139213239768392, 0.17139213239768392, 0.17605187605368866, 0.17605187605368866, 0.17605187605368866, 0.19454870869682483, 0.19454870869682483, 0.19454870869682483, 0.18940077426445245, 0.18940077426445245, 0.18940077426445245, 0.7921962098115619, 0.7921962098115619, 0.7921962098115619, 0.15487067373847263, 0.15487067373847263, 0.15487067373847263, 0.1957559634537155, 0.1957559634537155, 0.1957559634537155, 0.16741323982294343, 0.16741323982294343, 0.16741323982294343, 0.2034122936133108, 0.2034122936133108, 0.2034122936133108, 0.20387859047786905, 0.20387859047786905, 0.20387859047786905, 0.22470077201288186, 0.22470077201288186, 0.22470077201288186, 0.22063561981073176, 0.22063561981073176, 0.22063561981073176, 0.21422133366107188, 0.21422133366107188, 0.21422133366107188, 0.08796321438541599, 0.08796321438541599, 0.08796321438541599, 0.08331610403114975, 0.08331610403114975, 0.08331610403114975, 0.09300282214592048, 0.09300282214592048, 0.09300282214592048]}, "mutation_prompt": null}
{"id": "0328a17d-8f6b-4875-bb57-3fec0132113d", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.9\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 2.0\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.2\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            variance = np.var(position, axis=0).mean()  # Calculate variance for adaptive inertia\n            self.inertia = 0.5 + 0.4 * np.exp(-variance)  # Adjust inertia based on variance\n            \n            energy_coefficient = 1 + 0.5 * np.sin(2 * np.pi * evaluations / self.budget)  # New energy coefficient\n\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               (self.cognitive_coefficient + energy_coefficient) * r1 * (personal_best_position[i] - position[i]) +\n                               (self.social_coefficient - energy_coefficient) * r2 * (global_best_position - position[i]))\n                \n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "AdaptiveMultiStrategyPSO", "description": "Adaptive Multi-Strategy PSO leverages dynamic cognitive and social coefficients, variance-based inertia, and energy coefficient to enhance both exploration and exploitation.", "configspace": "", "generation": 14, "fitness": 0.24197062959061205, "feedback": "The algorithm AdaptiveMultiStrategyPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.23.", "error": "", "parent_id": "cc4da2de-697a-4d40-955c-d57997959ef6", "metadata": {"aucs": [0.6210770986585807, 0.6210770986585807, 0.6210770986585807, 0.7401252294080698, 0.7401252294080698, 0.7401252294080698, 0.8079751818618902, 0.8079751818618902, 0.8079751818618902, 0.03955826257833073, 0.03955826257833073, 0.03955826257833073, 0.03589433725307967, 0.03589433725307967, 0.03589433725307967, 0.04256475666789816, 0.04256475666789816, 0.04256475666789816, 0.14121918466858152, 0.14121918466858152, 0.14121918466858152, 0.08716666878266621, 0.08716666878266621, 0.08716666878266621, 0.08182173897096379, 0.08182173897096379, 0.08182173897096379, 0.08588276638203007, 0.08588276638203007, 0.08588276638203007, 0.10224003176756813, 0.10224003176756813, 0.10224003176756813, 0.09413377815355795, 0.09413377815355795, 0.09413377815355795, 0.9848559007658858, 0.9848559007658858, 0.9848559007658858, 0.9843526158374546, 0.9843526158374546, 0.9843526158374546, 0.9878879252684666, 0.9878879252684666, 0.9878879252684666, 0.274833723474738, 0.274833723474738, 0.274833723474738, 0.10670319141338025, 0.10670319141338025, 0.10670319141338025, 0.39915171715167075, 0.39915171715167075, 0.39915171715167075, 0.3562551195335504, 0.3562551195335504, 0.3562551195335504, 0.2110199528716843, 0.2110199528716843, 0.2110199528716843, 0.11589308177145508, 0.11589308177145508, 0.11589308177145508, 0.13441273141049315, 0.13441273141049315, 0.13441273141049315, 0.16934656588865105, 0.16934656588865105, 0.16934656588865105, 0.18312035007863436, 0.18312035007863436, 0.18312035007863436, 0.17065286718472994, 0.17065286718472994, 0.17065286718472994, 0.1303969021614192, 0.1303969021614192, 0.1303969021614192, 0.1861381999282935, 0.1861381999282935, 0.1861381999282935, 0.08134440755657557, 0.08134440755657557, 0.08134440755657557, 0.026265473335223, 0.026265473335223, 0.026265473335223, 0.15997494449257355, 0.15997494449257355, 0.15997494449257355, 0.19007405211090067, 0.19007405211090067, 0.19007405211090067, 0.1556155591320959, 0.1556155591320959, 0.1556155591320959, 0.1637351139384795, 0.1637351139384795, 0.1637351139384795, 0.04609480567055757, 0.04609480567055757, 0.04609480567055757, 0.16063703971960908, 0.16063703971960908, 0.16063703971960908, 0.1295801240686757, 0.1295801240686757, 0.1295801240686757, 0.14729821099947182, 0.14729821099947182, 0.14729821099947182, 0.18298613644856254, 0.18298613644856254, 0.18298613644856254, 0.09806668679314245, 0.09806668679314245, 0.09806668679314245, 0.5252593281191593, 0.5252593281191593, 0.5252593281191593, 0.4986801029340737, 0.4986801029340737, 0.4986801029340737, 0.5541790173159019, 0.5541790173159019, 0.5541790173159019, 0.11839884169144865, 0.11839884169144865, 0.11839884169144865, 0.14539748148531528, 0.14539748148531528, 0.14539748148531528, 0.08397620059006983, 0.08397620059006983, 0.08397620059006983, 0.17361231541420052, 0.17361231541420052, 0.17361231541420052, 0.23828490066601338, 0.23828490066601338, 0.23828490066601338, 0.18963449116288744, 0.18963449116288744, 0.18963449116288744, 0.2349380273746683, 0.2349380273746683, 0.2349380273746683, 0.1594577721702053, 0.1594577721702053, 0.1594577721702053, 0.16343246335783002, 0.16343246335783002, 0.16343246335783002, 0.26685288425618825, 0.26685288425618825, 0.26685288425618825, 0.20217234173157517, 0.20217234173157517, 0.20217234173157517, 0.12457698553413488, 0.12457698553413488, 0.12457698553413488, 0.19710949456856985, 0.19710949456856985, 0.19710949456856985, 0.21243425241373215, 0.21243425241373215, 0.21243425241373215, 0.25037878769088817, 0.25037878769088817, 0.25037878769088817, 0.18938999830563985, 0.18938999830563985, 0.18938999830563985, 0.20934364005682649, 0.20934364005682649, 0.20934364005682649, 0.20251690556324975, 0.20251690556324975, 0.20251690556324975, 0.9348444783314477, 0.9348444783314477, 0.9348444783314477, 0.1573040735861121, 0.1573040735861121, 0.1573040735861121, 0.17466611488846884, 0.17466611488846884, 0.17466611488846884, 0.1689801439827031, 0.1689801439827031, 0.1689801439827031, 0.21287533556615834, 0.21287533556615834, 0.21287533556615834, 0.15678921856168293, 0.15678921856168293, 0.15678921856168293, 0.2056374088716727, 0.2056374088716727, 0.2056374088716727, 0.19561434569908365, 0.19561434569908365, 0.19561434569908365, 0.19961148077663915, 0.19961148077663915, 0.19961148077663915, 0.07871493146778608, 0.07871493146778608, 0.07871493146778608, 0.0969630340367914, 0.0969630340367914, 0.0969630340367914, 0.08350609819335275, 0.08350609819335275, 0.08350609819335275]}, "mutation_prompt": null}
{"id": "e2710bbb-2cc2-4381-ae00-8b5c290903fa", "solution": "import numpy as np\n\nclass EnhancedMultiStrategyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.9  # Increased initial inertia\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 2.0  # Enhanced social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.2  # Increased mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n                \n                # Enhanced mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)  # Scale velocity for diversity\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Non-linear inertia weight adjustment\n            self.inertia = 0.4 + 0.5 * ((np.sin(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "EnhancedMultiStrategyPSO", "description": "Enhanced Multi-Strategy PSO introduces a combination of non-linear inertia, adaptive mutation, and diversity preservation for robust exploration.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc4da2de-697a-4d40-955c-d57997959ef6", "metadata": {"aucs": [0.8919390444381342, 0.8919390444381342, 0.8919390444381342, 0.8351462527498408, 0.8351462527498408, 0.8351462527498408, 0.8897889490353998, 0.8897889490353998, 0.8897889490353998, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.33211736534591196, 0.33211736534591196, 0.33211736534591196, 0.2595153094411634, 0.2595153094411634, 0.2595153094411634, 0.11727791799302778, 0.11727791799302778, 0.11727791799302778, 0.11240979270401441, 0.11240979270401441, 0.11240979270401441, 0.07116404589045, 0.07116404589045, 0.07116404589045, 0.0736203027958301, 0.0736203027958301, 0.0736203027958301, 0.05977297712115048, 0.05977297712115048, 0.05977297712115048, 0.07943624367974611, 0.07943624367974611, 0.07943624367974611, 0.9918089174913909, 0.9918089174913909, 0.9918089174913909, 0.9942354878543097, 0.9942354878543097, 0.9942354878543097, 0.9918470696081667, 0.9918470696081667, 0.9918470696081667, 0.344137183046367, 0.344137183046367, 0.344137183046367, 0.22662855304861407, 0.22662855304861407, 0.22662855304861407, 0.34366736813620424, 0.34366736813620424, 0.34366736813620424, 0.08099740010143419, 0.08099740010143419, 0.08099740010143419, 0.16248712637397933, 0.16248712637397933, 0.16248712637397933, 0.17379989963888043, 0.17379989963888043, 0.17379989963888043, 0.16239009062140575, 0.16239009062140575, 0.16239009062140575, 0.15924133382970707, 0.15924133382970707, 0.15924133382970707, 0.4933026612325815, 0.4933026612325815, 0.4933026612325815, 0.21396064990571073, 0.21396064990571073, 0.21396064990571073, 0.1909938450739439, 0.1909938450739439, 0.1909938450739439, 0.2346003942037599, 0.2346003942037599, 0.2346003942037599, 0.0863874219219044, 0.0863874219219044, 0.0863874219219044, 0.20132982625400409, 0.20132982625400409, 0.20132982625400409, 0.055825654150713167, 0.055825654150713167, 0.055825654150713167, 0.1702251704943677, 0.1702251704943677, 0.1702251704943677, 0.11277567186116488, 0.11277567186116488, 0.11277567186116488, 0.10536358407416935, 0.10536358407416935, 0.10536358407416935, 0.051849181090788954, 0.051849181090788954, 0.051849181090788954, 0.16464714520788404, 0.16464714520788404, 0.16464714520788404, 0.10332354558578405, 0.10332354558578405, 0.10332354558578405, 0.09587867668842487, 0.09587867668842487, 0.09587867668842487, 0.09983897915418816, 0.09983897915418816, 0.09983897915418816, 0.39410206502870915, 0.39410206502870915, 0.39410206502870915, 0.5399202796517832, 0.5399202796517832, 0.5399202796517832, 0.556870817609632, 0.556870817609632, 0.556870817609632, 0.5606124317370725, 0.5606124317370725, 0.5606124317370725, 0.07012784838206843, 0.07012784838206843, 0.07012784838206843, 0.05460455810578568, 0.05460455810578568, 0.05460455810578568, 0.10559477869663314, 0.10559477869663314, 0.10559477869663314, 0.1297536153211606, 0.1297536153211606, 0.1297536153211606, 0.17886838313220066, 0.17886838313220066, 0.17886838313220066, 0.20760217213107202, 0.20760217213107202, 0.20760217213107202, 0.28624501375374056, 0.28624501375374056, 0.28624501375374056, 0.21180342169109112, 0.21180342169109112, 0.21180342169109112, 0.14890390552721788, 0.14890390552721788, 0.14890390552721788, 0.21655097200726292, 0.21655097200726292, 0.21655097200726292, 0.18047674632671096, 0.18047674632671096, 0.18047674632671096, 0.14030098227738796, 0.14030098227738796, 0.14030098227738796, 0.22405511798550315, 0.22405511798550315, 0.22405511798550315, 0.26961813350274766, 0.26961813350274766, 0.26961813350274766, 0.1944839791800127, 0.1944839791800127, 0.1944839791800127, 0.201713462862396, 0.201713462862396, 0.201713462862396, 0.18830421128231578, 0.18830421128231578, 0.18830421128231578, 0.1895278283313776, 0.1895278283313776, 0.1895278283313776, 0.9382759345145212, 0.9382759345145212, 0.9382759345145212, 0.15738684684485538, 0.15738684684485538, 0.15738684684485538, 0.1771255115019309, 0.1771255115019309, 0.1771255115019309, 0.1698810733297389, 0.1698810733297389, 0.1698810733297389, 0.20978824449643196, 0.20978824449643196, 0.20978824449643196, 0.17369661434748118, 0.17369661434748118, 0.17369661434748118, 0.20186170350018062, 0.20186170350018062, 0.20186170350018062, 0.21627564274918365, 0.21627564274918365, 0.21627564274918365, 0.2339065521122191, 0.2339065521122191, 0.2339065521122191, 0.08881063313015125, 0.08881063313015125, 0.08881063313015125, 0.07107908235694027, 0.07107908235694027, 0.07107908235694027, 0.08014959095784502, 0.08014959095784502, 0.08014959095784502]}, "mutation_prompt": null}
{"id": "640a976e-8e6f-4eb6-93d3-f86b9974a43f", "solution": "import numpy as np\n\nclass QuantumInspiredEnhancedMultiStrategyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.9\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 2.0\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.2\n        self.pheromone_decay = 0.95  # New parameter for pheromone trail\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n        pheromone = np.ones(self.swarm_size)  # New pheromone trail\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                    pheromone[i] += 1  # Increase pheromone if personal best improves\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]) +\n                               self.mutation_rate * np.random.uniform(-1.0, 1.0, self.dim) * pheromone[i])  # Quantum-inspired term\n\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.5 * ((np.sin(np.pi * evaluations / self.budget)) ** 2)\n            pheromone *= self.pheromone_decay  # Decay pheromone over time\n\n        return global_best_value", "name": "QuantumInspiredEnhancedMultiStrategyPSO", "description": "Quantum-Inspired Enhanced Multi-Strategy PSO incorporates quantum superposition principles and adaptive pheromone trails for dynamic exploration and exploitation.", "configspace": "", "generation": 16, "fitness": 0.1962799126095258, "feedback": "The algorithm QuantumInspiredEnhancedMultiStrategyPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "cc4da2de-697a-4d40-955c-d57997959ef6", "metadata": {"aucs": [0.3741980858864751, 0.3741980858864751, 0.3741980858864751, 0.36172072724262416, 0.36172072724262416, 0.36172072724262416, 0.377682595788032, 0.377682595788032, 0.377682595788032, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007725106871552256, 0.0007725106871552256, 0.0007725106871552256, 0.1109782897318966, 0.1109782897318966, 0.1109782897318966, 0.08866321807773492, 0.08866321807773492, 0.08866321807773492, 0.11106424021960648, 0.11106424021960648, 0.11106424021960648, 0.0945702207462189, 0.0945702207462189, 0.0945702207462189, 0.09152774624710258, 0.09152774624710258, 0.09152774624710258, 0.08315450995152518, 0.08315450995152518, 0.08315450995152518, 0.9941834406313547, 0.9941834406313547, 0.9941834406313547, 0.98935617802874, 0.98935617802874, 0.98935617802874, 0.9934940808820523, 0.9934940808820523, 0.9934940808820523, 0.24589371012637518, 0.24589371012637518, 0.24589371012637518, 0.20673679731733308, 0.20673679731733308, 0.20673679731733308, 0.23794369245056646, 0.23794369245056646, 0.23794369245056646, 0.2909644331119152, 0.2909644331119152, 0.2909644331119152, 0.20975416124612756, 0.20975416124612756, 0.20975416124612756, 0.2427132774926466, 0.2427132774926466, 0.2427132774926466, 0.1269009051803177, 0.1269009051803177, 0.1269009051803177, 0.12130865810254166, 0.12130865810254166, 0.12130865810254166, 0.13401438710887126, 0.13401438710887126, 0.13401438710887126, 0.13090762159612546, 0.13090762159612546, 0.13090762159612546, 0.158342297873302, 0.158342297873302, 0.158342297873302, 0.13218320935542782, 0.13218320935542782, 0.13218320935542782, 0.0061704925964657376, 0.0061704925964657376, 0.0061704925964657376, 0.0017370928965166899, 0.0017370928965166899, 0.0017370928965166899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11060322222128538, 0.11060322222128538, 0.11060322222128538, 0.03280262403419287, 0.03280262403419287, 0.03280262403419287, 0.07678723782982766, 0.07678723782982766, 0.07678723782982766, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08204152996599456, 0.08204152996599456, 0.08204152996599456, 0.09476021056285477, 0.09476021056285477, 0.09476021056285477, 0.06287150731438318, 0.06287150731438318, 0.06287150731438318, 0.363478161082343, 0.363478161082343, 0.363478161082343, 0.36081219341545745, 0.36081219341545745, 0.36081219341545745, 0.3368986421834963, 0.3368986421834963, 0.3368986421834963, 0.08526749336256723, 0.08526749336256723, 0.08526749336256723, 0.09552865081738404, 0.09552865081738404, 0.09552865081738404, 0.0990426842288522, 0.0990426842288522, 0.0990426842288522, 0.22030252911529802, 0.22030252911529802, 0.22030252911529802, 0.16490646820684707, 0.16490646820684707, 0.16490646820684707, 0.1916842056687651, 0.1916842056687651, 0.1916842056687651, 0.2857297658676359, 0.2857297658676359, 0.2857297658676359, 0.24398514730918242, 0.24398514730918242, 0.24398514730918242, 0.2387225861111767, 0.2387225861111767, 0.2387225861111767, 0.21975268116633284, 0.21975268116633284, 0.21975268116633284, 0.16070275093344955, 0.16070275093344955, 0.16070275093344955, 0.16561589000822918, 0.16561589000822918, 0.16561589000822918, 0.19074197546826777, 0.19074197546826777, 0.19074197546826777, 0.2332281241196278, 0.2332281241196278, 0.2332281241196278, 0.20640268538758888, 0.20640268538758888, 0.20640268538758888, 0.18786195550163165, 0.18786195550163165, 0.18786195550163165, 0.21192721027433914, 0.21192721027433914, 0.21192721027433914, 0.20447012333557668, 0.20447012333557668, 0.20447012333557668, 0.6015719638621582, 0.6015719638621582, 0.6015719638621582, 0.1562915350106463, 0.1562915350106463, 0.1562915350106463, 0.19591660327424176, 0.19591660327424176, 0.19591660327424176, 0.16945031978783154, 0.16945031978783154, 0.16945031978783154, 0.1678876710666546, 0.1678876710666546, 0.1678876710666546, 0.15491973329121578, 0.15491973329121578, 0.15491973329121578, 0.20193781027800162, 0.20193781027800162, 0.20193781027800162, 0.18084720974905344, 0.18084720974905344, 0.18084720974905344, 0.18671487419653265, 0.18671487419653265, 0.18671487419653265, 0.09927753166807252, 0.09927753166807252, 0.09927753166807252, 0.08417297598920959, 0.08417297598920959, 0.08417297598920959, 0.08870064364459973, 0.08870064364459973, 0.08870064364459973]}, "mutation_prompt": null}
{"id": "18a74892-43ec-4bbb-85e3-d0b9c8448ac5", "solution": "import numpy as np\n\nclass EnhancedMultiStrategyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.9  # Increased initial inertia\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 2.0  # Enhanced social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.2  # Increased mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n                \n                # Enhanced mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)  # Scale velocity for diversity\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Non-linear inertia weight adjustment\n            self.inertia = 0.4 + 0.5 * ((np.sin(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "EnhancedMultiStrategyPSO", "description": "Enhanced Multi-Strategy PSO introduces a combination of non-linear inertia, adaptive mutation, and diversity preservation for robust exploration.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc4da2de-697a-4d40-955c-d57997959ef6", "metadata": {"aucs": [0.8919390444381342, 0.8919390444381342, 0.8919390444381342, 0.8351462527498408, 0.8351462527498408, 0.8351462527498408, 0.8897889490353998, 0.8897889490353998, 0.8897889490353998, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.33211736534591196, 0.33211736534591196, 0.33211736534591196, 0.2595153094411634, 0.2595153094411634, 0.2595153094411634, 0.11727791799302778, 0.11727791799302778, 0.11727791799302778, 0.11240979270401441, 0.11240979270401441, 0.11240979270401441, 0.07116404589045, 0.07116404589045, 0.07116404589045, 0.0736203027958301, 0.0736203027958301, 0.0736203027958301, 0.05977297712115048, 0.05977297712115048, 0.05977297712115048, 0.07943624367974611, 0.07943624367974611, 0.07943624367974611, 0.9918089174913909, 0.9918089174913909, 0.9918089174913909, 0.9942354878543097, 0.9942354878543097, 0.9942354878543097, 0.9918470696081667, 0.9918470696081667, 0.9918470696081667, 0.344137183046367, 0.344137183046367, 0.344137183046367, 0.22662855304861407, 0.22662855304861407, 0.22662855304861407, 0.34366736813620424, 0.34366736813620424, 0.34366736813620424, 0.08099740010143419, 0.08099740010143419, 0.08099740010143419, 0.16248712637397933, 0.16248712637397933, 0.16248712637397933, 0.17379989963888043, 0.17379989963888043, 0.17379989963888043, 0.16239009062140575, 0.16239009062140575, 0.16239009062140575, 0.15924133382970707, 0.15924133382970707, 0.15924133382970707, 0.4933026612325815, 0.4933026612325815, 0.4933026612325815, 0.21396064990571073, 0.21396064990571073, 0.21396064990571073, 0.1909938450739439, 0.1909938450739439, 0.1909938450739439, 0.2346003942037599, 0.2346003942037599, 0.2346003942037599, 0.0863874219219044, 0.0863874219219044, 0.0863874219219044, 0.20132982625400409, 0.20132982625400409, 0.20132982625400409, 0.055825654150713167, 0.055825654150713167, 0.055825654150713167, 0.1702251704943677, 0.1702251704943677, 0.1702251704943677, 0.11277567186116488, 0.11277567186116488, 0.11277567186116488, 0.10536358407416935, 0.10536358407416935, 0.10536358407416935, 0.051849181090788954, 0.051849181090788954, 0.051849181090788954, 0.16464714520788404, 0.16464714520788404, 0.16464714520788404, 0.10332354558578405, 0.10332354558578405, 0.10332354558578405, 0.09587867668842487, 0.09587867668842487, 0.09587867668842487, 0.09983897915418816, 0.09983897915418816, 0.09983897915418816, 0.39410206502870915, 0.39410206502870915, 0.39410206502870915, 0.5399202796517832, 0.5399202796517832, 0.5399202796517832, 0.556870817609632, 0.556870817609632, 0.556870817609632, 0.5606124317370725, 0.5606124317370725, 0.5606124317370725, 0.07012784838206843, 0.07012784838206843, 0.07012784838206843, 0.05460455810578568, 0.05460455810578568, 0.05460455810578568, 0.10559477869663314, 0.10559477869663314, 0.10559477869663314, 0.1297536153211606, 0.1297536153211606, 0.1297536153211606, 0.17886838313220066, 0.17886838313220066, 0.17886838313220066, 0.20760217213107202, 0.20760217213107202, 0.20760217213107202, 0.28624501375374056, 0.28624501375374056, 0.28624501375374056, 0.21180342169109112, 0.21180342169109112, 0.21180342169109112, 0.14890390552721788, 0.14890390552721788, 0.14890390552721788, 0.21655097200726292, 0.21655097200726292, 0.21655097200726292, 0.18047674632671096, 0.18047674632671096, 0.18047674632671096, 0.14030098227738796, 0.14030098227738796, 0.14030098227738796, 0.22405511798550315, 0.22405511798550315, 0.22405511798550315, 0.26961813350274766, 0.26961813350274766, 0.26961813350274766, 0.1944839791800127, 0.1944839791800127, 0.1944839791800127, 0.201713462862396, 0.201713462862396, 0.201713462862396, 0.18830421128231578, 0.18830421128231578, 0.18830421128231578, 0.1895278283313776, 0.1895278283313776, 0.1895278283313776, 0.9382759345145212, 0.9382759345145212, 0.9382759345145212, 0.15738684684485538, 0.15738684684485538, 0.15738684684485538, 0.1771255115019309, 0.1771255115019309, 0.1771255115019309, 0.1698810733297389, 0.1698810733297389, 0.1698810733297389, 0.20978824449643196, 0.20978824449643196, 0.20978824449643196, 0.17369661434748118, 0.17369661434748118, 0.17369661434748118, 0.20186170350018062, 0.20186170350018062, 0.20186170350018062, 0.21627564274918365, 0.21627564274918365, 0.21627564274918365, 0.2339065521122191, 0.2339065521122191, 0.2339065521122191, 0.08881063313015125, 0.08881063313015125, 0.08881063313015125, 0.07107908235694027, 0.07107908235694027, 0.07107908235694027, 0.08014959095784502, 0.08014959095784502, 0.08014959095784502]}, "mutation_prompt": null}
{"id": "0fc2305d-f29f-4c4b-a5b3-9de08c557bad", "solution": "import numpy as np\n\nclass EnhancedMultiStrategyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.9  # Increased initial inertia\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 2.0  # Enhanced social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.2  # Increased mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n                \n                # Enhanced mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)  # Scale velocity for diversity\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Non-linear inertia weight adjustment\n            self.inertia = 0.4 + 0.5 * ((np.sin(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "EnhancedMultiStrategyPSO", "description": "Enhanced Multi-Strategy PSO introduces a combination of non-linear inertia, adaptive mutation, and diversity preservation for robust exploration.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc4da2de-697a-4d40-955c-d57997959ef6", "metadata": {"aucs": [0.8919390444381342, 0.8919390444381342, 0.8919390444381342, 0.8351462527498408, 0.8351462527498408, 0.8351462527498408, 0.8897889490353998, 0.8897889490353998, 0.8897889490353998, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.33211736534591196, 0.33211736534591196, 0.33211736534591196, 0.2595153094411634, 0.2595153094411634, 0.2595153094411634, 0.11727791799302778, 0.11727791799302778, 0.11727791799302778, 0.11240979270401441, 0.11240979270401441, 0.11240979270401441, 0.07116404589045, 0.07116404589045, 0.07116404589045, 0.0736203027958301, 0.0736203027958301, 0.0736203027958301, 0.05977297712115048, 0.05977297712115048, 0.05977297712115048, 0.07943624367974611, 0.07943624367974611, 0.07943624367974611, 0.9918089174913909, 0.9918089174913909, 0.9918089174913909, 0.9942354878543097, 0.9942354878543097, 0.9942354878543097, 0.9918470696081667, 0.9918470696081667, 0.9918470696081667, 0.344137183046367, 0.344137183046367, 0.344137183046367, 0.22662855304861407, 0.22662855304861407, 0.22662855304861407, 0.34366736813620424, 0.34366736813620424, 0.34366736813620424, 0.08099740010143419, 0.08099740010143419, 0.08099740010143419, 0.16248712637397933, 0.16248712637397933, 0.16248712637397933, 0.17379989963888043, 0.17379989963888043, 0.17379989963888043, 0.16239009062140575, 0.16239009062140575, 0.16239009062140575, 0.15924133382970707, 0.15924133382970707, 0.15924133382970707, 0.4933026612325815, 0.4933026612325815, 0.4933026612325815, 0.21396064990571073, 0.21396064990571073, 0.21396064990571073, 0.1909938450739439, 0.1909938450739439, 0.1909938450739439, 0.2346003942037599, 0.2346003942037599, 0.2346003942037599, 0.0863874219219044, 0.0863874219219044, 0.0863874219219044, 0.20132982625400409, 0.20132982625400409, 0.20132982625400409, 0.055825654150713167, 0.055825654150713167, 0.055825654150713167, 0.1702251704943677, 0.1702251704943677, 0.1702251704943677, 0.11277567186116488, 0.11277567186116488, 0.11277567186116488, 0.10536358407416935, 0.10536358407416935, 0.10536358407416935, 0.051849181090788954, 0.051849181090788954, 0.051849181090788954, 0.16464714520788404, 0.16464714520788404, 0.16464714520788404, 0.10332354558578405, 0.10332354558578405, 0.10332354558578405, 0.09587867668842487, 0.09587867668842487, 0.09587867668842487, 0.09983897915418816, 0.09983897915418816, 0.09983897915418816, 0.39410206502870915, 0.39410206502870915, 0.39410206502870915, 0.5399202796517832, 0.5399202796517832, 0.5399202796517832, 0.556870817609632, 0.556870817609632, 0.556870817609632, 0.5606124317370725, 0.5606124317370725, 0.5606124317370725, 0.07012784838206843, 0.07012784838206843, 0.07012784838206843, 0.05460455810578568, 0.05460455810578568, 0.05460455810578568, 0.10559477869663314, 0.10559477869663314, 0.10559477869663314, 0.1297536153211606, 0.1297536153211606, 0.1297536153211606, 0.17886838313220066, 0.17886838313220066, 0.17886838313220066, 0.20760217213107202, 0.20760217213107202, 0.20760217213107202, 0.28624501375374056, 0.28624501375374056, 0.28624501375374056, 0.21180342169109112, 0.21180342169109112, 0.21180342169109112, 0.14890390552721788, 0.14890390552721788, 0.14890390552721788, 0.21655097200726292, 0.21655097200726292, 0.21655097200726292, 0.18047674632671096, 0.18047674632671096, 0.18047674632671096, 0.14030098227738796, 0.14030098227738796, 0.14030098227738796, 0.22405511798550315, 0.22405511798550315, 0.22405511798550315, 0.26961813350274766, 0.26961813350274766, 0.26961813350274766, 0.1944839791800127, 0.1944839791800127, 0.1944839791800127, 0.201713462862396, 0.201713462862396, 0.201713462862396, 0.18830421128231578, 0.18830421128231578, 0.18830421128231578, 0.1895278283313776, 0.1895278283313776, 0.1895278283313776, 0.9382759345145212, 0.9382759345145212, 0.9382759345145212, 0.15738684684485538, 0.15738684684485538, 0.15738684684485538, 0.1771255115019309, 0.1771255115019309, 0.1771255115019309, 0.1698810733297389, 0.1698810733297389, 0.1698810733297389, 0.20978824449643196, 0.20978824449643196, 0.20978824449643196, 0.17369661434748118, 0.17369661434748118, 0.17369661434748118, 0.20186170350018062, 0.20186170350018062, 0.20186170350018062, 0.21627564274918365, 0.21627564274918365, 0.21627564274918365, 0.2339065521122191, 0.2339065521122191, 0.2339065521122191, 0.08881063313015125, 0.08881063313015125, 0.08881063313015125, 0.07107908235694027, 0.07107908235694027, 0.07107908235694027, 0.08014959095784502, 0.08014959095784502, 0.08014959095784502]}, "mutation_prompt": null}
{"id": "d79d88bb-fdb9-4aa3-8ee7-753bce08a846", "solution": "import numpy as np\n\nclass AdaptiveQuantumInspiredPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.9\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 2.0\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  # Reduced mutation rate\n        self.qbit_prob = 0.3  # New quantum behavior probability\n        self.qfield_intensity = 0.5  # New parameter for quantum field intensity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Quantum-inspired influence\n                if np.random.rand() < self.qbit_prob:\n                    velocity[i] += self.qfield_intensity * (np.random.uniform(self.lower_bound, self.upper_bound, self.dim) - position[i])\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.5 * ((np.sin(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "AdaptiveQuantumInspiredPSO", "description": "Adaptive Quantum-Inspired PSO leverages quantum behavior's probabilistic nature for enhanced exploration and convergence efficiency.", "configspace": "", "generation": 19, "fitness": 0.1725763378529004, "feedback": "The algorithm AdaptiveQuantumInspiredPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "cc4da2de-697a-4d40-955c-d57997959ef6", "metadata": {"aucs": [0.38304449973783217, 0.38304449973783217, 0.38304449973783217, 0.31771784593574215, 0.31771784593574215, 0.31771784593574215, 0.3317480687290768, 0.3317480687290768, 0.3317480687290768, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07943050283793729, 0.07943050283793729, 0.07943050283793729, 0.06813039287485112, 0.06813039287485112, 0.06813039287485112, 0.06980954218490765, 0.06980954218490765, 0.06980954218490765, 0.0662764917210219, 0.0662764917210219, 0.0662764917210219, 0.053296452360873436, 0.053296452360873436, 0.053296452360873436, 0.053153207474038955, 0.053153207474038955, 0.053153207474038955, 0.9827902875042163, 0.9827902875042163, 0.9827902875042163, 0.9875717496253429, 0.9875717496253429, 0.9875717496253429, 0.989096566771029, 0.989096566771029, 0.989096566771029, 0.11653125052075253, 0.11653125052075253, 0.11653125052075253, 0.17606226064637465, 0.17606226064637465, 0.17606226064637465, 0.1780501719816009, 0.1780501719816009, 0.1780501719816009, 0.1689188974443443, 0.1689188974443443, 0.1689188974443443, 0.1583644565699116, 0.1583644565699116, 0.1583644565699116, 0.15415348262847983, 0.15415348262847983, 0.15415348262847983, 0.0445776221912767, 0.0445776221912767, 0.0445776221912767, 0.08876920449040915, 0.08876920449040915, 0.08876920449040915, 0.13067638378948254, 0.13067638378948254, 0.13067638378948254, 0.07923660081286621, 0.07923660081286621, 0.07923660081286621, 0.1045309692309323, 0.1045309692309323, 0.1045309692309323, 0.0868230962252925, 0.0868230962252925, 0.0868230962252925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06374046279902212, 0.06374046279902212, 0.06374046279902212, 0.05871593183453738, 0.05871593183453738, 0.05871593183453738, 0.08592365661261447, 0.08592365661261447, 0.08592365661261447, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01772518583166638, 0.01772518583166638, 0.01772518583166638, 0.012997391163690919, 0.012997391163690919, 0.012997391163690919, 0.03337780579527827, 0.03337780579527827, 0.03337780579527827, 0.28636766883443276, 0.28636766883443276, 0.28636766883443276, 0.28564021684994945, 0.28564021684994945, 0.28564021684994945, 0.2799008119738755, 0.2799008119738755, 0.2799008119738755, 0.06198286601466374, 0.06198286601466374, 0.06198286601466374, 0.08195101632066015, 0.08195101632066015, 0.08195101632066015, 0.08235857529976165, 0.08235857529976165, 0.08235857529976165, 0.140953994733499, 0.140953994733499, 0.140953994733499, 0.1511062516966496, 0.1511062516966496, 0.1511062516966496, 0.15584658456418232, 0.15584658456418232, 0.15584658456418232, 0.21706542984365218, 0.21706542984365218, 0.21706542984365218, 0.22206077632782006, 0.22206077632782006, 0.22206077632782006, 0.2163143828435834, 0.2163143828435834, 0.2163143828435834, 0.16708907779985038, 0.16708907779985038, 0.16708907779985038, 0.17591925160137944, 0.17591925160137944, 0.17591925160137944, 0.1487667431511891, 0.1487667431511891, 0.1487667431511891, 0.19102001511006528, 0.19102001511006528, 0.19102001511006528, 0.1920726528174982, 0.1920726528174982, 0.1920726528174982, 0.19198739403368348, 0.19198739403368348, 0.19198739403368348, 0.171399156491563, 0.171399156491563, 0.171399156491563, 0.16988700196529694, 0.16988700196529694, 0.16988700196529694, 0.17480976140800453, 0.17480976140800453, 0.17480976140800453, 0.390725768486997, 0.390725768486997, 0.390725768486997, 0.4458711016920788, 0.4458711016920788, 0.4458711016920788, 0.17352755787813545, 0.17352755787813545, 0.17352755787813545, 0.20505373020474704, 0.20505373020474704, 0.20505373020474704, 0.37487846956750515, 0.37487846956750515, 0.37487846956750515, 0.16672638226868652, 0.16672638226868652, 0.16672638226868652, 0.17839774127848795, 0.17839774127848795, 0.17839774127848795, 0.19259668476267222, 0.19259668476267222, 0.19259668476267222, 0.17939174541970337, 0.17939174541970337, 0.17939174541970337, 0.07530081104547393, 0.07530081104547393, 0.07530081104547393, 0.06675419563006069, 0.06675419563006069, 0.06675419563006069, 0.06963206916761921, 0.06963206916761921, 0.06963206916761921]}, "mutation_prompt": null}
{"id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 20, "fitness": 0.264519290093408, "feedback": "The algorithm DynamicSwarmIntelligence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "cc4da2de-697a-4d40-955c-d57997959ef6", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "de7ab28d-a0a4-44fc-8213-9b6543730f35", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "3aab12db-27ec-45a0-b439-dd0ceace8ef7", "solution": "import numpy as np\n\nclass EnhancedDynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7\n        self.cognitive_coefficient = 1.7\n        self.social_coefficient = 1.9\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.rand(self.swarm_size, self.dim) * (self.upper_bound - self.lower_bound) + self.lower_bound\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                phi = self.cognitive_coefficient + self.social_coefficient\n                constriction_factor = 2 / abs(2 - phi - np.sqrt(phi**2 - 4 * phi))\n                velocity[i] = (constriction_factor * (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i])))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)\n\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "EnhancedDynamicSwarmIntelligence", "description": "Enhanced Dynamic Swarm Intelligence Optimization using stochastic quasi-random initialization and nonlinear constriction factor for improved convergence and exploration.", "configspace": "", "generation": 22, "fitness": 0.04057599460771937, "feedback": "The algorithm EnhancedDynamicSwarmIntelligence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.12499490912035649, 0.12499490912035649, 0.12499490912035649, 0.07083159300718511, 0.07083159300718511, 0.07083159300718511, 0.14638581790272087, 0.14638581790272087, 0.14638581790272087, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0210116164090961, 0.0210116164090961, 0.0210116164090961, 0.0002266255905977177, 0.0002266255905977177, 0.0002266255905977177, 0.0119374707085933, 0.0119374707085933, 0.0119374707085933, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.026940271918974967, 0.026940271918974967, 0.026940271918974967, 0.030505277410686538, 0.030505277410686538, 0.030505277410686538, 0.0375633117043539, 0.0375633117043539, 0.0375633117043539, 0.02134648432885211, 0.02134648432885211, 0.02134648432885211, 0.0, 0.0, 0.0, 0.051390623906525046, 0.051390623906525046, 0.051390623906525046, 0.03078573445466304, 0.03078573445466304, 0.03078573445466304, 0.075893114210277, 0.075893114210277, 0.075893114210277, 0.036712104742101626, 0.036712104742101626, 0.036712104742101626, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1738166215276955, 0.1738166215276955, 0.1738166215276955, 0.09613353880561137, 0.09613353880561137, 0.09613353880561137, 0.1150871746835106, 0.1150871746835106, 0.1150871746835106, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07031087462543695, 0.07031087462543695, 0.07031087462543695, 0.05628969661991756, 0.05628969661991756, 0.05628969661991756, 0.07299404864855752, 0.07299404864855752, 0.07299404864855752, 0.12365632990668274, 0.12365632990668274, 0.12365632990668274, 0.10626092982611302, 0.10626092982611302, 0.10626092982611302, 0.09951282779750958, 0.09951282779750958, 0.09951282779750958, 0.048556923792206885, 0.048556923792206885, 0.048556923792206885, 0.05176422117674262, 0.05176422117674262, 0.05176422117674262, 0.07614870944240715, 0.07614870944240715, 0.07614870944240715, 0.0946418172158614, 0.0946418172158614, 0.0946418172158614, 0.09489738248601498, 0.09489738248601498, 0.09489738248601498, 0.10188268304310566, 0.10188268304310566, 0.10188268304310566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13028227031231965, 0.13028227031231965, 0.13028227031231965, 0.07731418984817395, 0.07731418984817395, 0.07731418984817395, 0.06757289500260599, 0.06757289500260599, 0.06757289500260599, 0.0265219807714826, 0.0265219807714826, 0.0265219807714826, 0.07645973960558927, 0.07645973960558927, 0.07645973960558927, 0.06354146470906508, 0.06354146470906508, 0.06354146470906508, 0.1189153027206381, 0.1189153027206381, 0.1189153027206381, 0.11473326596619116, 0.11473326596619116, 0.11473326596619116, 0.13559269389878081, 0.13559269389878081, 0.13559269389878081, 0.015592861710525319, 0.015592861710525319, 0.015592861710525319, 0.01822305171741101, 0.01822305171741101, 0.01822305171741101, 0.008243160480654987, 0.008243160480654987, 0.008243160480654987]}, "mutation_prompt": null}
{"id": "495c65f5-25bb-468f-9eb5-532faad09716", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "d7838be9-a9c8-485f-b460-43915e36789c", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "e04c7b81-9839-40ac-903f-0fccac365daf", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "608c02d4-a8ed-4cac-b1f7-31074ab9fbde", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "e670b1ea-cb3e-45c4-9af2-c2d1b6373c7e", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "d469c507-2374-4e4b-93ca-53ed9ce7d77a", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "36d90598-4300-4e40-84f9-679eb464ebf2", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "4e79f3b9-489b-43ff-b0ac-7b4f9435d06f", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "9ed904e2-8b85-43d7-92d2-381f1c780f0e", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "0f2a8372-a57b-440d-b00c-7b24a853f125", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "04079f27-0cc9-459a-873b-3b1ed2652567", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "497ea91a-abfc-4ce8-be6c-e82899711697", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "7841ef13-fb0b-4314-9390-075cc7f261e9", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "9dad81f5-83de-4e5d-932f-e46e57179500", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "8684bb86-32ce-49b0-b145-ac64e8b4faeb", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "b091dd00-7acb-42f2-8b15-1dfd47e54bea", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "4e1a5268-3da4-47fa-8d84-bc965cd58bc5", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "a8f3df29-89d4-44ae-a91d-224dc44e42fc", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "be2e72d8-481d-496d-b5f0-9f003fc81aea", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "282ce16a-fb09-4bad-afd4-072900b6a473", "solution": "import numpy as np\n\nclass EnhancedSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7\n        self.cognitive_coefficient = 1.7\n        self.social_coefficient = 1.9\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Fitness-based dynamic parameter adaptation\n            mean_personal_best_value = np.mean(personal_best_value)\n            self.inertia = 0.5 + 0.5 * (global_best_value / (mean_personal_best_value + 1e-8))\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n        return global_best_value", "name": "EnhancedSwarmIntelligence", "description": "Enhanced Swarm Intelligence Optimization integrates fitness-based dynamic parameter adaptation and differential velocity scaling for improved convergence.", "configspace": "", "generation": 42, "fitness": 0.16729736283635346, "feedback": "The algorithm EnhancedSwarmIntelligence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.25499046194777386, 0.25499046194777386, 0.25499046194777386, 0.2631395613978488, 0.2631395613978488, 0.2631395613978488, 0.25259142042515836, 0.25259142042515836, 0.25259142042515836, 0.045631140637722445, 0.045631140637722445, 0.045631140637722445, 0.09512776728115224, 0.09512776728115224, 0.09512776728115224, 0.05918803002976003, 0.05918803002976003, 0.05918803002976003, 0.0474797903132268, 0.0474797903132268, 0.0474797903132268, 0.06447979873851073, 0.06447979873851073, 0.06447979873851073, 0.08966694851267387, 0.08966694851267387, 0.08966694851267387, 0.021246899345049863, 0.021246899345049863, 0.021246899345049863, 0.04984737734650879, 0.04984737734650879, 0.04984737734650879, 0.08001115188384178, 0.08001115188384178, 0.08001115188384178, 0.9837926792426498, 0.9837926792426498, 0.9837926792426498, 0.9942473827143735, 0.9942473827143735, 0.9942473827143735, 0.9899142743050598, 0.9899142743050598, 0.9899142743050598, 0.10585547019530672, 0.10585547019530672, 0.10585547019530672, 0.12953770962656286, 0.12953770962656286, 0.12953770962656286, 0.13188907434045527, 0.13188907434045527, 0.13188907434045527, 0.09530911964830757, 0.09530911964830757, 0.09530911964830757, 0.16351960647813735, 0.16351960647813735, 0.16351960647813735, 0.14522687964112102, 0.14522687964112102, 0.14522687964112102, 0.13601445810362178, 0.13601445810362178, 0.13601445810362178, 0.005512411780923099, 0.005512411780923099, 0.005512411780923099, 0.14732531944953353, 0.14732531944953353, 0.14732531944953353, 0.13081413662010366, 0.13081413662010366, 0.13081413662010366, 0.1300050416258367, 0.1300050416258367, 0.1300050416258367, 0.12731778139155125, 0.12731778139155125, 0.12731778139155125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1556633871641383, 0.1556633871641383, 0.1556633871641383, 0.049147980967686244, 0.049147980967686244, 0.049147980967686244, 0.08740099978757043, 0.08740099978757043, 0.08740099978757043, 0.05083098551476417, 0.05083098551476417, 0.05083098551476417, 0.05825020054777874, 0.05825020054777874, 0.05825020054777874, 0.04910664861757652, 0.04910664861757652, 0.04910664861757652, 0.13850509389008225, 0.13850509389008225, 0.13850509389008225, 0.2088137905975227, 0.2088137905975227, 0.2088137905975227, 0.11924090228828987, 0.11924090228828987, 0.11924090228828987, 0.07984336210509069, 0.07984336210509069, 0.07984336210509069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.22189797562520397, 0.22189797562520397, 0.22189797562520397, 0.2929512687450643, 0.2929512687450643, 0.2929512687450643, 0.24137978147572892, 0.24137978147572892, 0.24137978147572892, 0.0782581338495627, 0.0782581338495627, 0.0782581338495627, 0.07873502394772458, 0.07873502394772458, 0.07873502394772458, 0.08139067144155543, 0.08139067144155543, 0.08139067144155543, 0.16456373271054303, 0.16456373271054303, 0.16456373271054303, 0.17354638455542537, 0.17354638455542537, 0.17354638455542537, 0.15143924673859077, 0.15143924673859077, 0.15143924673859077, 0.12399395166720384, 0.12399395166720384, 0.12399395166720384, 0.20395984996857996, 0.20395984996857996, 0.20395984996857996, 0.17515653629139782, 0.17515653629139782, 0.17515653629139782, 0.10994840435635511, 0.10994840435635511, 0.10994840435635511, 0.15823979653625464, 0.15823979653625464, 0.15823979653625464, 0.12069780977326794, 0.12069780977326794, 0.12069780977326794, 0.14772071297176514, 0.14772071297176514, 0.14772071297176514, 0.15111949103200473, 0.15111949103200473, 0.15111949103200473, 0.18927991119583243, 0.18927991119583243, 0.18927991119583243, 0.15127321509274028, 0.15127321509274028, 0.15127321509274028, 0.17995647103567514, 0.17995647103567514, 0.17995647103567514, 0.17371041457326686, 0.17371041457326686, 0.17371041457326686, 0.37071090195763523, 0.37071090195763523, 0.37071090195763523, 0.2074491082834775, 0.2074491082834775, 0.2074491082834775, 0.13466011707404035, 0.13466011707404035, 0.13466011707404035, 0.1599411025872587, 0.1599411025872587, 0.1599411025872587, 0.1682725322746471, 0.1682725322746471, 0.1682725322746471, 0.08114449592162487, 0.08114449592162487, 0.08114449592162487, 0.20651661420600198, 0.20651661420600198, 0.20651661420600198, 0.20754288679221122, 0.20754288679221122, 0.20754288679221122, 0.1878157754360804, 0.1878157754360804, 0.1878157754360804, 0.05283797681325397, 0.05283797681325397, 0.05283797681325397, 0.0878813845977604, 0.0878813845977604, 0.0878813845977604, 0.0747334001864447, 0.0747334001864447, 0.0747334001864447]}, "mutation_prompt": null}
{"id": "08f4ca9a-cc89-480e-8a74-b130c84220c9", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "b89c07ae-7c90-4a68-8e5a-f7872f7a651e", "solution": "import numpy as np\n\nclass EnhancedDynamicSwarm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7\n        self.cognitive_coefficient = 2.0  # Increased for better personal learning\n        self.social_coefficient = 1.5  # Reduced for refined global influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.2  # Increased mutation rate for exploration\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Adaptive chaotic mapping mutation\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)  # Adjusted scale\n\n                position[i] += velocity[i]\n\n                # Local search step for fine-tuning\n                if np.random.rand() < 0.1:\n                    local_search = np.random.uniform(-0.1, 0.1, self.dim)\n                    position[i] = np.clip(position[i] + local_search, self.lower_bound, self.upper_bound)\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Improved inertia schedule\n            self.inertia = 0.9 - 0.5 * (evaluations / self.budget)\n\n        return global_best_value", "name": "EnhancedDynamicSwarm", "description": "Enhanced Dynamic Swarm with Local Search integrates local search and adaptive mutation for improved exploration-exploitation balance.", "configspace": "", "generation": 44, "fitness": 0.21971334053120398, "feedback": "The algorithm EnhancedDynamicSwarm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.5598880810499778, 0.5598880810499778, 0.5598880810499778, 0.5127213998657838, 0.5127213998657838, 0.5127213998657838, 0.4650028697650942, 0.4650028697650942, 0.4650028697650942, 0.013034862490203025, 0.013034862490203025, 0.013034862490203025, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0026449953773665102, 0.0026449953773665102, 0.0026449953773665102, 0.11305183068752644, 0.11305183068752644, 0.11305183068752644, 0.07793678250923863, 0.07793678250923863, 0.07793678250923863, 0.11950362263165171, 0.11950362263165171, 0.11950362263165171, 0.05486690263254945, 0.05486690263254945, 0.05486690263254945, 0.08964542786035323, 0.08964542786035323, 0.08964542786035323, 0.08576655150240209, 0.08576655150240209, 0.08576655150240209, 0.9807991032478406, 0.9807991032478406, 0.9807991032478406, 0.9887531436931181, 0.9887531436931181, 0.9887531436931181, 0.9909469687275686, 0.9909469687275686, 0.9909469687275686, 0.3048442460107922, 0.3048442460107922, 0.3048442460107922, 0.24855708177069502, 0.24855708177069502, 0.24855708177069502, 0.2963277813536318, 0.2963277813536318, 0.2963277813536318, 0.5386007421556069, 0.5386007421556069, 0.5386007421556069, 0.18355314985626614, 0.18355314985626614, 0.18355314985626614, 0.5173399684740303, 0.5173399684740303, 0.5173399684740303, 0.15392932024363493, 0.15392932024363493, 0.15392932024363493, 0.15337978277553976, 0.15337978277553976, 0.15337978277553976, 0.14483954450257663, 0.14483954450257663, 0.14483954450257663, 0.14365781271484734, 0.14365781271484734, 0.14365781271484734, 0.16967912140751107, 0.16967912140751107, 0.16967912140751107, 0.11956889891970446, 0.11956889891970446, 0.11956889891970446, 0.05088691890096653, 0.05088691890096653, 0.05088691890096653, 0.06450490899870698, 0.06450490899870698, 0.06450490899870698, 0.00014575987307341443, 0.00014575987307341443, 0.00014575987307341443, 0.06539072830464498, 0.06539072830464498, 0.06539072830464498, 0.10259983377051463, 0.10259983377051463, 0.10259983377051463, 0.15105530216590723, 0.15105530216590723, 0.15105530216590723, 0.019170694482949724, 0.019170694482949724, 0.019170694482949724, 0.020989779503624573, 0.020989779503624573, 0.020989779503624573, 0.030880013540022455, 0.030880013540022455, 0.030880013540022455, 0.07934532297248331, 0.07934532297248331, 0.07934532297248331, 0.08151419439741747, 0.08151419439741747, 0.08151419439741747, 0.07488626924205732, 0.07488626924205732, 0.07488626924205732, 0.4374931704123989, 0.4374931704123989, 0.4374931704123989, 0.4157912290105479, 0.4157912290105479, 0.4157912290105479, 0.43490665334342127, 0.43490665334342127, 0.43490665334342127, 0.10686037613791799, 0.10686037613791799, 0.10686037613791799, 0.11094490449260463, 0.11094490449260463, 0.11094490449260463, 0.10521865233360095, 0.10521865233360095, 0.10521865233360095, 0.15531138022749624, 0.15531138022749624, 0.15531138022749624, 0.19678519990203114, 0.19678519990203114, 0.19678519990203114, 0.2625280822595709, 0.2625280822595709, 0.2625280822595709, 0.26845467521654387, 0.26845467521654387, 0.26845467521654387, 0.2117252545459034, 0.2117252545459034, 0.2117252545459034, 0.25755931115692987, 0.25755931115692987, 0.25755931115692987, 0.21284291682362855, 0.21284291682362855, 0.21284291682362855, 0.2057697625475795, 0.2057697625475795, 0.2057697625475795, 0.13969484634470497, 0.13969484634470497, 0.13969484634470497, 0.21892402385063625, 0.21892402385063625, 0.21892402385063625, 0.20563269669034767, 0.20563269669034767, 0.20563269669034767, 0.19426148092682116, 0.19426148092682116, 0.19426148092682116, 0.192527243449086, 0.192527243449086, 0.192527243449086, 0.19450692275567616, 0.19450692275567616, 0.19450692275567616, 0.1956885510227424, 0.1956885510227424, 0.1956885510227424, 0.6200608090290013, 0.6200608090290013, 0.6200608090290013, 0.1527535226951099, 0.1527535226951099, 0.1527535226951099, 0.19526141034073907, 0.19526141034073907, 0.19526141034073907, 0.1671164720112509, 0.1671164720112509, 0.1671164720112509, 0.20366365736601788, 0.20366365736601788, 0.20366365736601788, 0.15241388647882326, 0.15241388647882326, 0.15241388647882326, 0.1793100196805072, 0.1793100196805072, 0.1793100196805072, 0.19673416406208488, 0.19673416406208488, 0.19673416406208488, 0.2051775135347429, 0.2051775135347429, 0.2051775135347429, 0.08471052624007347, 0.08471052624007347, 0.08471052624007347, 0.09225056537310883, 0.09225056537310883, 0.09225056537310883, 0.07617091960716027, 0.07617091960716027, 0.07617091960716027]}, "mutation_prompt": null}
{"id": "e12d525b-556d-49a2-b393-4f0da7386427", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "9658891b-f988-44a2-a4d3-353407dc3615", "solution": "import numpy as np\n\nclass EnhancedDynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7\n        self.cognitive_coefficient = 1.5  # Reduced slightly for balance\n        self.social_coefficient = 2.1  # Increased for stronger social learning\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15\n        self.constriction_factor = 0.729  # Introduced constriction factor\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.constriction_factor * \n                               (self.inertia * velocity[i] +\n                                self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                                self.social_coefficient * r2 * (global_best_position - position[i])))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "EnhancedDynamicSwarmIntelligence", "description": "Enhanced Dynamic Swarm Intelligence Optimization integrates diversity preservation via constriction factors and adaptive global learning for improved robustness and convergence.", "configspace": "", "generation": 46, "fitness": 0.2414394221597592, "feedback": "The algorithm EnhancedDynamicSwarmIntelligence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.24.", "error": "", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.906293191619041, 0.906293191619041, 0.906293191619041, 0.8901879108027247, 0.8901879108027247, 0.8901879108027247, 0.5211758856193294, 0.5211758856193294, 0.5211758856193294, 0.03826180105248134, 0.03826180105248134, 0.03826180105248134, 0.1685666825486345, 0.1685666825486345, 0.1685666825486345, 0.060028148872798726, 0.060028148872798726, 0.060028148872798726, 0.11330024455537058, 0.11330024455537058, 0.11330024455537058, 0.06290841741857, 0.06290841741857, 0.06290841741857, 0.10473130069674352, 0.10473130069674352, 0.10473130069674352, 0.08700161795559436, 0.08700161795559436, 0.08700161795559436, 0.03971046566956571, 0.03971046566956571, 0.03971046566956571, 0.04049747855225527, 0.04049747855225527, 0.04049747855225527, 0.9859653693988113, 0.9859653693988113, 0.9859653693988113, 0.9913970646815907, 0.9913970646815907, 0.9913970646815907, 0.9916745368243969, 0.9916745368243969, 0.9916745368243969, 0.23897667487481067, 0.23897667487481067, 0.23897667487481067, 0.2001967567098064, 0.2001967567098064, 0.2001967567098064, 0.23904228274449957, 0.23904228274449957, 0.23904228274449957, 0.13330711998083844, 0.13330711998083844, 0.13330711998083844, 0.16116010888702825, 0.16116010888702825, 0.16116010888702825, 0.24716840729622047, 0.24716840729622047, 0.24716840729622047, 0.16934270404521645, 0.16934270404521645, 0.16934270404521645, 0.3097410665782653, 0.3097410665782653, 0.3097410665782653, 0.19235258603594618, 0.19235258603594618, 0.19235258603594618, 0.22321141474117379, 0.22321141474117379, 0.22321141474117379, 0.13220958494675394, 0.13220958494675394, 0.13220958494675394, 0.12868360974687343, 0.12868360974687343, 0.12868360974687343, 0.08429263168093115, 0.08429263168093115, 0.08429263168093115, 0.06587708076945886, 0.06587708076945886, 0.06587708076945886, 0.022614557493769505, 0.022614557493769505, 0.022614557493769505, 0.15655586414504175, 0.15655586414504175, 0.15655586414504175, 0.08004491660383517, 0.08004491660383517, 0.08004491660383517, 0.2359494618706669, 0.2359494618706669, 0.2359494618706669, 0.051536303436558795, 0.051536303436558795, 0.051536303436558795, 0.10900296579131097, 0.10900296579131097, 0.10900296579131097, 0.18757973043635034, 0.18757973043635034, 0.18757973043635034, 0.12017213729817378, 0.12017213729817378, 0.12017213729817378, 0.03807088043506335, 0.03807088043506335, 0.03807088043506335, 0.08348085351114676, 0.08348085351114676, 0.08348085351114676, 0.4617845924517049, 0.4617845924517049, 0.4617845924517049, 0.5004182642809143, 0.5004182642809143, 0.5004182642809143, 0.5613022467086668, 0.5613022467086668, 0.5613022467086668, 0.09503652072245661, 0.09503652072245661, 0.09503652072245661, 0.08600431204984138, 0.08600431204984138, 0.08600431204984138, 0.08404981313167759, 0.08404981313167759, 0.08404981313167759, 0.24982838934628004, 0.24982838934628004, 0.24982838934628004, 0.26555104799472995, 0.26555104799472995, 0.26555104799472995, 0.39675851266600526, 0.39675851266600526, 0.39675851266600526, 0.2659107732152285, 0.2659107732152285, 0.2659107732152285, 0.1702051592309437, 0.1702051592309437, 0.1702051592309437, 0.14336203248158486, 0.14336203248158486, 0.14336203248158486, 0.1685098045218707, 0.1685098045218707, 0.1685098045218707, 0.21107835030941346, 0.21107835030941346, 0.21107835030941346, 0.13769324579620057, 0.13769324579620057, 0.13769324579620057, 0.19060253771860858, 0.19060253771860858, 0.19060253771860858, 0.22759211070248908, 0.22759211070248908, 0.22759211070248908, 0.2601736699124355, 0.2601736699124355, 0.2601736699124355, 0.176021915526972, 0.176021915526972, 0.176021915526972, 0.19065198878441592, 0.19065198878441592, 0.19065198878441592, 0.16373447458012402, 0.16373447458012402, 0.16373447458012402, 0.9263552563498261, 0.9263552563498261, 0.9263552563498261, 0.15903711266712794, 0.15903711266712794, 0.15903711266712794, 0.17759187996888015, 0.17759187996888015, 0.17759187996888015, 0.16875151754505024, 0.16875151754505024, 0.16875151754505024, 0.21169547941138633, 0.21169547941138633, 0.21169547941138633, 0.15695670356270497, 0.15695670356270497, 0.15695670356270497, 0.24294113914877735, 0.24294113914877735, 0.24294113914877735, 0.2336227565297576, 0.2336227565297576, 0.2336227565297576, 0.1930621767502374, 0.1930621767502374, 0.1930621767502374, 0.08936450451591338, 0.08936450451591338, 0.08936450451591338, 0.07888775246580937, 0.07888775246580937, 0.07888775246580937, 0.1268325381269788, 0.1268325381269788, 0.1268325381269788]}, "mutation_prompt": null}
{"id": "04f9fd90-a96f-4123-8811-1bae55fe2ab1", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "0dd34818-6520-49c3-a7a2-cf951225783d", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "5b3c5890-c4fd-400f-866b-bb543847babb", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "05856c8b-494b-4b7a-ac14-2a22d734571f", "solution": "import numpy as np\n\nclass DynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia for balance\n        self.cognitive_coefficient = 1.7  # Slightly increased for faster personal learning\n        self.social_coefficient = 1.9  # Adjusted social influence\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15  # Slightly adjusted mutation rate\n\n    def __call__(self, func):\n        np.random.seed(42)  # for reproducibility\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n        \n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (global_best_position - position[i]))\n\n                # Chaotic mapping-based mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)  # Increased scale for exploration\n\n                position[i] += velocity[i]\n\n                # Ensure the particles remain within bounds\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive inertia weight adjustment\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "DynamicSwarmIntelligence", "description": "Dynamic Swarm Intelligence Optimization employs adaptive parameter tuning, swarm diversity control, and chaotic mappings for enhanced convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.7377798426494364, 0.7377798426494364, 0.7377798426494364, 0.7826485537826804, 0.7826485537826804, 0.7826485537826804, 0.7936335382271527, 0.7936335382271527, 0.7936335382271527, 0.1197028207529991, 0.1197028207529991, 0.1197028207529991, 0.03145291838704978, 0.03145291838704978, 0.03145291838704978, 0.303214498153228, 0.303214498153228, 0.303214498153228, 0.10016845629292714, 0.10016845629292714, 0.10016845629292714, 0.11199554929443423, 0.11199554929443423, 0.11199554929443423, 0.12700290483728727, 0.12700290483728727, 0.12700290483728727, 0.06205682995883233, 0.06205682995883233, 0.06205682995883233, 0.046860956157883216, 0.046860956157883216, 0.046860956157883216, 0.0984246157526164, 0.0984246157526164, 0.0984246157526164, 0.9784607690742089, 0.9784607690742089, 0.9784607690742089, 0.9940960653739248, 0.9940960653739248, 0.9940960653739248, 0.9914866119971989, 0.9914866119971989, 0.9914866119971989, 0.2595585565518962, 0.2595585565518962, 0.2595585565518962, 0.2117291129003538, 0.2117291129003538, 0.2117291129003538, 0.3607975257866699, 0.3607975257866699, 0.3607975257866699, 0.21698835373544711, 0.21698835373544711, 0.21698835373544711, 0.15902318661532955, 0.15902318661532955, 0.15902318661532955, 0.11674299025658563, 0.11674299025658563, 0.11674299025658563, 0.12440679062136295, 0.12440679062136295, 0.12440679062136295, 0.20932673909008803, 0.20932673909008803, 0.20932673909008803, 0.46525509618136973, 0.46525509618136973, 0.46525509618136973, 0.49988709021578315, 0.49988709021578315, 0.49988709021578315, 0.17601169076044187, 0.17601169076044187, 0.17601169076044187, 0.20026124667481426, 0.20026124667481426, 0.20026124667481426, 0.09718603737871456, 0.09718603737871456, 0.09718603737871456, 0.048829587105872596, 0.048829587105872596, 0.048829587105872596, 0.23049875645850237, 0.23049875645850237, 0.23049875645850237, 0.2990486502432387, 0.2990486502432387, 0.2990486502432387, 0.11783945121312245, 0.11783945121312245, 0.11783945121312245, 0.2927057994208777, 0.2927057994208777, 0.2927057994208777, 0.03928579625057993, 0.03928579625057993, 0.03928579625057993, 0.18059205134853185, 0.18059205134853185, 0.18059205134853185, 0.08573427835005754, 0.08573427835005754, 0.08573427835005754, 0.2632275357031414, 0.2632275357031414, 0.2632275357031414, 0.05885355015287186, 0.05885355015287186, 0.05885355015287186, 0.05131642010918336, 0.05131642010918336, 0.05131642010918336, 0.5183843596158859, 0.5183843596158859, 0.5183843596158859, 0.5631276571747632, 0.5631276571747632, 0.5631276571747632, 0.5832401754782741, 0.5832401754782741, 0.5832401754782741, 0.1425555874227621, 0.1425555874227621, 0.1425555874227621, 0.08187008425129738, 0.08187008425129738, 0.08187008425129738, 0.1408783083428552, 0.1408783083428552, 0.1408783083428552, 0.4143404711574581, 0.4143404711574581, 0.4143404711574581, 0.16339225367213162, 0.16339225367213162, 0.16339225367213162, 0.2631017066268664, 0.2631017066268664, 0.2631017066268664, 0.20737240044846061, 0.20737240044846061, 0.20737240044846061, 0.21244333483136346, 0.21244333483136346, 0.21244333483136346, 0.2899758798926111, 0.2899758798926111, 0.2899758798926111, 0.21011936474977289, 0.21011936474977289, 0.21011936474977289, 0.2222558873356767, 0.2222558873356767, 0.2222558873356767, 0.13582780940104988, 0.13582780940104988, 0.13582780940104988, 0.2044695401650195, 0.2044695401650195, 0.2044695401650195, 0.18164615458964473, 0.18164615458964473, 0.18164615458964473, 0.20335208856923093, 0.20335208856923093, 0.20335208856923093, 0.2203758604977759, 0.2203758604977759, 0.2203758604977759, 0.20890893381662712, 0.20890893381662712, 0.20890893381662712, 0.18530008679805554, 0.18530008679805554, 0.18530008679805554, 0.8564220394513725, 0.8564220394513725, 0.8564220394513725, 0.15913735917167704, 0.15913735917167704, 0.15913735917167704, 0.18808068901587793, 0.18808068901587793, 0.18808068901587793, 0.2042786534566049, 0.2042786534566049, 0.2042786534566049, 0.21111379963133126, 0.21111379963133126, 0.21111379963133126, 0.15362129439128147, 0.15362129439128147, 0.15362129439128147, 0.18942767333196386, 0.18942767333196386, 0.18942767333196386, 0.1804156267004846, 0.1804156267004846, 0.1804156267004846, 0.2394887944006896, 0.2394887944006896, 0.2394887944006896, 0.09063300315420841, 0.09063300315420841, 0.09063300315420841, 0.0890307955446924, 0.0890307955446924, 0.0890307955446924, 0.08670998982091582, 0.08670998982091582, 0.08670998982091582]}, "mutation_prompt": null}
{"id": "3bc58c1b-adef-44e4-94d5-af60df250354", "solution": "import numpy as np\n\nclass EnhancedDynamicSwarmIntelligence:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7\n        self.cognitive_coefficient = 1.5  # Adjusted for dynamic learning\n        self.social_coefficient = 1.5  # Adjusted for dynamic learning\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.15\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adaptive neighborhood size for local search\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               0.5 * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-2, 2)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "EnhancedDynamicSwarmIntelligence", "description": "Enhanced Dynamic Swarm Intelligence with adaptive neighborhood topologies and dynamic learning rates for improved convergence.", "configspace": "", "generation": 51, "fitness": 0.4056864435710698, "feedback": "The algorithm EnhancedDynamicSwarmIntelligence got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.27.", "error": "", "parent_id": "ebf4a247-349d-42b5-a3f6-02b100baeb1f", "metadata": {"aucs": [0.8054165194951364, 0.8054165194951364, 0.8054165194951364, 0.8072992826126685, 0.8072992826126685, 0.8072992826126685, 0.8270479333617967, 0.8270479333617967, 0.8270479333617967, 0.6686734512619417, 0.6686734512619417, 0.6686734512619417, 0.6582720245481554, 0.6582720245481554, 0.6582720245481554, 0.6434646461201662, 0.6434646461201662, 0.6434646461201662, 0.10753352505232028, 0.10753352505232028, 0.10753352505232028, 0.1011106764007682, 0.1011106764007682, 0.1011106764007682, 0.12672410935021794, 0.12672410935021794, 0.12672410935021794, 0.1205440368428291, 0.1205440368428291, 0.1205440368428291, 0.09703283332790891, 0.09703283332790891, 0.09703283332790891, 0.0994933034432115, 0.0994933034432115, 0.0994933034432115, 0.9918640356290533, 0.9918640356290533, 0.9918640356290533, 0.9859709564781742, 0.9859709564781742, 0.9859709564781742, 0.9878033925512093, 0.9878033925512093, 0.9878033925512093, 0.18823582375885828, 0.18823582375885828, 0.18823582375885828, 0.6541709430962432, 0.6541709430962432, 0.6541709430962432, 0.6780032908941194, 0.6780032908941194, 0.6780032908941194, 0.7933766920177926, 0.7933766920177926, 0.7933766920177926, 0.7754296543470971, 0.7754296543470971, 0.7754296543470971, 0.8169493452675984, 0.8169493452675984, 0.8169493452675984, 0.6064905374238301, 0.6064905374238301, 0.6064905374238301, 0.5153465363849539, 0.5153465363849539, 0.5153465363849539, 0.37261555096384713, 0.37261555096384713, 0.37261555096384713, 0.555760260606971, 0.555760260606971, 0.555760260606971, 0.49944933466269037, 0.49944933466269037, 0.49944933466269037, 0.515902879516391, 0.515902879516391, 0.515902879516391, 0.4664743590688346, 0.4664743590688346, 0.4664743590688346, 0.535811436274604, 0.535811436274604, 0.535811436274604, 0.5499797428605586, 0.5499797428605586, 0.5499797428605586, 0.37087838095290604, 0.37087838095290604, 0.37087838095290604, 0.22982341407828066, 0.22982341407828066, 0.22982341407828066, 0.25611151503688356, 0.25611151503688356, 0.25611151503688356, 0.05155881040123422, 0.05155881040123422, 0.05155881040123422, 0.33204311337066206, 0.33204311337066206, 0.33204311337066206, 0.06716715115681926, 0.06716715115681926, 0.06716715115681926, 0.594979867479769, 0.594979867479769, 0.594979867479769, 0.4201438324357275, 0.4201438324357275, 0.4201438324357275, 0.5136178700388037, 0.5136178700388037, 0.5136178700388037, 0.7821233975859526, 0.7821233975859526, 0.7821233975859526, 0.7951290673126301, 0.7951290673126301, 0.7951290673126301, 0.7661463916420977, 0.7661463916420977, 0.7661463916420977, 0.07757773429829995, 0.07757773429829995, 0.07757773429829995, 0.10176493202819914, 0.10176493202819914, 0.10176493202819914, 0.10219618239245087, 0.10219618239245087, 0.10219618239245087, 0.1348243291692719, 0.1348243291692719, 0.1348243291692719, 0.22246417177528488, 0.22246417177528488, 0.22246417177528488, 0.25235560827279635, 0.25235560827279635, 0.25235560827279635, 0.6286302399971189, 0.6286302399971189, 0.6286302399971189, 0.42514070512301927, 0.42514070512301927, 0.42514070512301927, 0.6182624993314819, 0.6182624993314819, 0.6182624993314819, 0.3562463390779449, 0.3562463390779449, 0.3562463390779449, 0.44676106824197537, 0.44676106824197537, 0.44676106824197537, 0.19669370576500533, 0.19669370576500533, 0.19669370576500533, 0.2124875137041513, 0.2124875137041513, 0.2124875137041513, 0.19354816109749895, 0.19354816109749895, 0.19354816109749895, 0.19675607706409137, 0.19675607706409137, 0.19675607706409137, 0.18603966144814954, 0.18603966144814954, 0.18603966144814954, 0.22601987953481661, 0.22601987953481661, 0.22601987953481661, 0.2314598340151599, 0.2314598340151599, 0.2314598340151599, 0.7702871696603875, 0.7702871696603875, 0.7702871696603875, 0.16199057026057673, 0.16199057026057673, 0.16199057026057673, 0.1831415689043402, 0.1831415689043402, 0.1831415689043402, 0.16783850991278704, 0.16783850991278704, 0.16783850991278704, 0.18860241123794363, 0.18860241123794363, 0.18860241123794363, 0.38252968935637, 0.38252968935637, 0.38252968935637, 0.1754550363527897, 0.1754550363527897, 0.1754550363527897, 0.18807560531464151, 0.18807560531464151, 0.18807560531464151, 0.20362499014619306, 0.20362499014619306, 0.20362499014619306, 0.08236584852390583, 0.08236584852390583, 0.08236584852390583, 0.07785059965096464, 0.07785059965096464, 0.07785059965096464, 0.0864633703476938, 0.0864633703476938, 0.0864633703476938]}, "mutation_prompt": null}
{"id": "6e4a6a46-eee5-4db9-bb2f-cd625aca141a", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.6\n        self.cognitive_coefficient = 1.4\n        self.social_coefficient = 1.6\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  # Reduced mutation rate to focus improvement\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 4  # Smaller neighborhood size for refined search\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)  # Adaptive diversity\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.5 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Hybrid Swarm Optimization with adaptive diversity preservation and local intensification to enhance exploitation.", "configspace": "", "generation": 52, "fitness": 0.4104314520424437, "feedback": "The algorithm HybridSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.28.", "error": "", "parent_id": "3bc58c1b-adef-44e4-94d5-af60df250354", "metadata": {"aucs": [0.8099581598370749, 0.8099581598370749, 0.8099581598370749, 0.806851009710617, 0.806851009710617, 0.806851009710617, 0.8161671495506917, 0.8161671495506917, 0.8161671495506917, 0.611729995667675, 0.611729995667675, 0.611729995667675, 0.6281165056318319, 0.6281165056318319, 0.6281165056318319, 0.6410821789041854, 0.6410821789041854, 0.6410821789041854, 0.13886176817241846, 0.13886176817241846, 0.13886176817241846, 0.11707973208913514, 0.11707973208913514, 0.11707973208913514, 0.1189622816727457, 0.1189622816727457, 0.1189622816727457, 0.09397054267692961, 0.09397054267692961, 0.09397054267692961, 0.10910629296193852, 0.10910629296193852, 0.10910629296193852, 0.11068321275553428, 0.11068321275553428, 0.11068321275553428, 0.9918228520497498, 0.9918228520497498, 0.9918228520497498, 0.987924096732118, 0.987924096732118, 0.987924096732118, 0.9888759236698017, 0.9888759236698017, 0.9888759236698017, 0.5797929682757023, 0.5797929682757023, 0.5797929682757023, 0.6218355629664631, 0.6218355629664631, 0.6218355629664631, 0.6180565272380188, 0.6180565272380188, 0.6180565272380188, 0.7746056323624737, 0.7746056323624737, 0.7746056323624737, 0.8426559568506834, 0.8426559568506834, 0.8426559568506834, 0.7517467956990806, 0.7517467956990806, 0.7517467956990806, 0.498105081543057, 0.498105081543057, 0.498105081543057, 0.12474152815871442, 0.12474152815871442, 0.12474152815871442, 0.1258667131970873, 0.1258667131970873, 0.1258667131970873, 0.5357995452395234, 0.5357995452395234, 0.5357995452395234, 0.5844432425800379, 0.5844432425800379, 0.5844432425800379, 0.4342066188819834, 0.4342066188819834, 0.4342066188819834, 0.526542710485185, 0.526542710485185, 0.526542710485185, 0.4152710114923881, 0.4152710114923881, 0.4152710114923881, 0.492381084248518, 0.492381084248518, 0.492381084248518, 0.24918791431291543, 0.24918791431291543, 0.24918791431291543, 0.07685036433926706, 0.07685036433926706, 0.07685036433926706, 0.41537839919089203, 0.41537839919089203, 0.41537839919089203, 0.09340276344393572, 0.09340276344393572, 0.09340276344393572, 0.13061094096329073, 0.13061094096329073, 0.13061094096329073, 0.1048227645006593, 0.1048227645006593, 0.1048227645006593, 0.5644914818950202, 0.5644914818950202, 0.5644914818950202, 0.4804926983319092, 0.4804926983319092, 0.4804926983319092, 0.5617286892995312, 0.5617286892995312, 0.5617286892995312, 0.7744727444952078, 0.7744727444952078, 0.7744727444952078, 0.7855888583743065, 0.7855888583743065, 0.7855888583743065, 0.7767223554223381, 0.7767223554223381, 0.7767223554223381, 0.1333506852128883, 0.1333506852128883, 0.1333506852128883, 0.12403055128978158, 0.12403055128978158, 0.12403055128978158, 0.12450585764982003, 0.12450585764982003, 0.12450585764982003, 0.13961230907723132, 0.13961230907723132, 0.13961230907723132, 0.16672256611847747, 0.16672256611847747, 0.16672256611847747, 0.1434957094571786, 0.1434957094571786, 0.1434957094571786, 0.42523624893337497, 0.42523624893337497, 0.42523624893337497, 0.5177372175023065, 0.5177372175023065, 0.5177372175023065, 0.4145490214336547, 0.4145490214336547, 0.4145490214336547, 0.4809631874520204, 0.4809631874520204, 0.4809631874520204, 0.3395632192260605, 0.3395632192260605, 0.3395632192260605, 0.4057605165966306, 0.4057605165966306, 0.4057605165966306, 0.20659142163530142, 0.20659142163530142, 0.20659142163530142, 0.2095223337584421, 0.2095223337584421, 0.2095223337584421, 0.21263136056134668, 0.21263136056134668, 0.21263136056134668, 0.18133367599422967, 0.18133367599422967, 0.18133367599422967, 0.22162223074056586, 0.22162223074056586, 0.22162223074056586, 0.21559000744228551, 0.21559000744228551, 0.21559000744228551, 0.856235533626677, 0.856235533626677, 0.856235533626677, 0.6804475097927747, 0.6804475097927747, 0.6804475097927747, 0.6597599653925837, 0.6597599653925837, 0.6597599653925837, 0.16858057374577273, 0.16858057374577273, 0.16858057374577273, 0.6264613571773114, 0.6264613571773114, 0.6264613571773114, 0.1533922759579176, 0.1533922759579176, 0.1533922759579176, 0.17990893308663947, 0.17990893308663947, 0.17990893308663947, 0.1738809041570768, 0.1738809041570768, 0.1738809041570768, 0.20540251519428288, 0.20540251519428288, 0.20540251519428288, 0.09444305527796004, 0.09444305527796004, 0.09444305527796004, 0.09264402880604561, 0.09264402880604561, 0.09264402880604561, 0.08609711888866656, 0.08609711888866656, 0.08609711888866656]}, "mutation_prompt": null}
{"id": "c231f696-2541-46cf-8d9f-d381ba65bf19", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.6\n        self.cognitive_coefficient = 1.4\n        self.social_coefficient = 1.6\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  # Reduced mutation rate to focus improvement\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 4  # Smaller neighborhood size for refined search\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)  # Adaptive diversity\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.5 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Hybrid Swarm Optimization with adaptive diversity preservation and local intensification to enhance exploitation.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6e4a6a46-eee5-4db9-bb2f-cd625aca141a", "metadata": {"aucs": [0.8099581598370749, 0.8099581598370749, 0.8099581598370749, 0.806851009710617, 0.806851009710617, 0.806851009710617, 0.8161671495506917, 0.8161671495506917, 0.8161671495506917, 0.611729995667675, 0.611729995667675, 0.611729995667675, 0.6281165056318319, 0.6281165056318319, 0.6281165056318319, 0.6410821789041854, 0.6410821789041854, 0.6410821789041854, 0.13886176817241846, 0.13886176817241846, 0.13886176817241846, 0.11707973208913514, 0.11707973208913514, 0.11707973208913514, 0.1189622816727457, 0.1189622816727457, 0.1189622816727457, 0.09397054267692961, 0.09397054267692961, 0.09397054267692961, 0.10910629296193852, 0.10910629296193852, 0.10910629296193852, 0.11068321275553428, 0.11068321275553428, 0.11068321275553428, 0.9918228520497498, 0.9918228520497498, 0.9918228520497498, 0.987924096732118, 0.987924096732118, 0.987924096732118, 0.9888759236698017, 0.9888759236698017, 0.9888759236698017, 0.5797929682757023, 0.5797929682757023, 0.5797929682757023, 0.6218355629664631, 0.6218355629664631, 0.6218355629664631, 0.6180565272380188, 0.6180565272380188, 0.6180565272380188, 0.7746056323624737, 0.7746056323624737, 0.7746056323624737, 0.8426559568506834, 0.8426559568506834, 0.8426559568506834, 0.7517467956990806, 0.7517467956990806, 0.7517467956990806, 0.498105081543057, 0.498105081543057, 0.498105081543057, 0.12474152815871442, 0.12474152815871442, 0.12474152815871442, 0.1258667131970873, 0.1258667131970873, 0.1258667131970873, 0.5357995452395234, 0.5357995452395234, 0.5357995452395234, 0.5844432425800379, 0.5844432425800379, 0.5844432425800379, 0.4342066188819834, 0.4342066188819834, 0.4342066188819834, 0.526542710485185, 0.526542710485185, 0.526542710485185, 0.4152710114923881, 0.4152710114923881, 0.4152710114923881, 0.492381084248518, 0.492381084248518, 0.492381084248518, 0.24918791431291543, 0.24918791431291543, 0.24918791431291543, 0.07685036433926706, 0.07685036433926706, 0.07685036433926706, 0.41537839919089203, 0.41537839919089203, 0.41537839919089203, 0.09340276344393572, 0.09340276344393572, 0.09340276344393572, 0.13061094096329073, 0.13061094096329073, 0.13061094096329073, 0.1048227645006593, 0.1048227645006593, 0.1048227645006593, 0.5644914818950202, 0.5644914818950202, 0.5644914818950202, 0.4804926983319092, 0.4804926983319092, 0.4804926983319092, 0.5617286892995312, 0.5617286892995312, 0.5617286892995312, 0.7744727444952078, 0.7744727444952078, 0.7744727444952078, 0.7855888583743065, 0.7855888583743065, 0.7855888583743065, 0.7767223554223381, 0.7767223554223381, 0.7767223554223381, 0.1333506852128883, 0.1333506852128883, 0.1333506852128883, 0.12403055128978158, 0.12403055128978158, 0.12403055128978158, 0.12450585764982003, 0.12450585764982003, 0.12450585764982003, 0.13961230907723132, 0.13961230907723132, 0.13961230907723132, 0.16672256611847747, 0.16672256611847747, 0.16672256611847747, 0.1434957094571786, 0.1434957094571786, 0.1434957094571786, 0.42523624893337497, 0.42523624893337497, 0.42523624893337497, 0.5177372175023065, 0.5177372175023065, 0.5177372175023065, 0.4145490214336547, 0.4145490214336547, 0.4145490214336547, 0.4809631874520204, 0.4809631874520204, 0.4809631874520204, 0.3395632192260605, 0.3395632192260605, 0.3395632192260605, 0.4057605165966306, 0.4057605165966306, 0.4057605165966306, 0.20659142163530142, 0.20659142163530142, 0.20659142163530142, 0.2095223337584421, 0.2095223337584421, 0.2095223337584421, 0.21263136056134668, 0.21263136056134668, 0.21263136056134668, 0.18133367599422967, 0.18133367599422967, 0.18133367599422967, 0.22162223074056586, 0.22162223074056586, 0.22162223074056586, 0.21559000744228551, 0.21559000744228551, 0.21559000744228551, 0.856235533626677, 0.856235533626677, 0.856235533626677, 0.6804475097927747, 0.6804475097927747, 0.6804475097927747, 0.6597599653925837, 0.6597599653925837, 0.6597599653925837, 0.16858057374577273, 0.16858057374577273, 0.16858057374577273, 0.6264613571773114, 0.6264613571773114, 0.6264613571773114, 0.1533922759579176, 0.1533922759579176, 0.1533922759579176, 0.17990893308663947, 0.17990893308663947, 0.17990893308663947, 0.1738809041570768, 0.1738809041570768, 0.1738809041570768, 0.20540251519428288, 0.20540251519428288, 0.20540251519428288, 0.09444305527796004, 0.09444305527796004, 0.09444305527796004, 0.09264402880604561, 0.09264402880604561, 0.09264402880604561, 0.08609711888866656, 0.08609711888866656, 0.08609711888866656]}, "mutation_prompt": null}
{"id": "829da07b-912c-44f6-9592-eb3b91b68aaa", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.6\n        self.cognitive_coefficient = 1.4\n        self.social_coefficient = 1.6\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  # Reduced mutation rate to focus improvement\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 4  # Smaller neighborhood size for refined search\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)  # Adaptive diversity\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.5 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Hybrid Swarm Optimization with adaptive diversity preservation and local intensification to enhance exploitation.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6e4a6a46-eee5-4db9-bb2f-cd625aca141a", "metadata": {"aucs": [0.8099581598370749, 0.8099581598370749, 0.8099581598370749, 0.806851009710617, 0.806851009710617, 0.806851009710617, 0.8161671495506917, 0.8161671495506917, 0.8161671495506917, 0.611729995667675, 0.611729995667675, 0.611729995667675, 0.6281165056318319, 0.6281165056318319, 0.6281165056318319, 0.6410821789041854, 0.6410821789041854, 0.6410821789041854, 0.13886176817241846, 0.13886176817241846, 0.13886176817241846, 0.11707973208913514, 0.11707973208913514, 0.11707973208913514, 0.1189622816727457, 0.1189622816727457, 0.1189622816727457, 0.09397054267692961, 0.09397054267692961, 0.09397054267692961, 0.10910629296193852, 0.10910629296193852, 0.10910629296193852, 0.11068321275553428, 0.11068321275553428, 0.11068321275553428, 0.9918228520497498, 0.9918228520497498, 0.9918228520497498, 0.987924096732118, 0.987924096732118, 0.987924096732118, 0.9888759236698017, 0.9888759236698017, 0.9888759236698017, 0.5797929682757023, 0.5797929682757023, 0.5797929682757023, 0.6218355629664631, 0.6218355629664631, 0.6218355629664631, 0.6180565272380188, 0.6180565272380188, 0.6180565272380188, 0.7746056323624737, 0.7746056323624737, 0.7746056323624737, 0.8426559568506834, 0.8426559568506834, 0.8426559568506834, 0.7517467956990806, 0.7517467956990806, 0.7517467956990806, 0.498105081543057, 0.498105081543057, 0.498105081543057, 0.12474152815871442, 0.12474152815871442, 0.12474152815871442, 0.1258667131970873, 0.1258667131970873, 0.1258667131970873, 0.5357995452395234, 0.5357995452395234, 0.5357995452395234, 0.5844432425800379, 0.5844432425800379, 0.5844432425800379, 0.4342066188819834, 0.4342066188819834, 0.4342066188819834, 0.526542710485185, 0.526542710485185, 0.526542710485185, 0.4152710114923881, 0.4152710114923881, 0.4152710114923881, 0.492381084248518, 0.492381084248518, 0.492381084248518, 0.24918791431291543, 0.24918791431291543, 0.24918791431291543, 0.07685036433926706, 0.07685036433926706, 0.07685036433926706, 0.41537839919089203, 0.41537839919089203, 0.41537839919089203, 0.09340276344393572, 0.09340276344393572, 0.09340276344393572, 0.13061094096329073, 0.13061094096329073, 0.13061094096329073, 0.1048227645006593, 0.1048227645006593, 0.1048227645006593, 0.5644914818950202, 0.5644914818950202, 0.5644914818950202, 0.4804926983319092, 0.4804926983319092, 0.4804926983319092, 0.5617286892995312, 0.5617286892995312, 0.5617286892995312, 0.7744727444952078, 0.7744727444952078, 0.7744727444952078, 0.7855888583743065, 0.7855888583743065, 0.7855888583743065, 0.7767223554223381, 0.7767223554223381, 0.7767223554223381, 0.1333506852128883, 0.1333506852128883, 0.1333506852128883, 0.12403055128978158, 0.12403055128978158, 0.12403055128978158, 0.12450585764982003, 0.12450585764982003, 0.12450585764982003, 0.13961230907723132, 0.13961230907723132, 0.13961230907723132, 0.16672256611847747, 0.16672256611847747, 0.16672256611847747, 0.1434957094571786, 0.1434957094571786, 0.1434957094571786, 0.42523624893337497, 0.42523624893337497, 0.42523624893337497, 0.5177372175023065, 0.5177372175023065, 0.5177372175023065, 0.4145490214336547, 0.4145490214336547, 0.4145490214336547, 0.4809631874520204, 0.4809631874520204, 0.4809631874520204, 0.3395632192260605, 0.3395632192260605, 0.3395632192260605, 0.4057605165966306, 0.4057605165966306, 0.4057605165966306, 0.20659142163530142, 0.20659142163530142, 0.20659142163530142, 0.2095223337584421, 0.2095223337584421, 0.2095223337584421, 0.21263136056134668, 0.21263136056134668, 0.21263136056134668, 0.18133367599422967, 0.18133367599422967, 0.18133367599422967, 0.22162223074056586, 0.22162223074056586, 0.22162223074056586, 0.21559000744228551, 0.21559000744228551, 0.21559000744228551, 0.856235533626677, 0.856235533626677, 0.856235533626677, 0.6804475097927747, 0.6804475097927747, 0.6804475097927747, 0.6597599653925837, 0.6597599653925837, 0.6597599653925837, 0.16858057374577273, 0.16858057374577273, 0.16858057374577273, 0.6264613571773114, 0.6264613571773114, 0.6264613571773114, 0.1533922759579176, 0.1533922759579176, 0.1533922759579176, 0.17990893308663947, 0.17990893308663947, 0.17990893308663947, 0.1738809041570768, 0.1738809041570768, 0.1738809041570768, 0.20540251519428288, 0.20540251519428288, 0.20540251519428288, 0.09444305527796004, 0.09444305527796004, 0.09444305527796004, 0.09264402880604561, 0.09264402880604561, 0.09264402880604561, 0.08609711888866656, 0.08609711888866656, 0.08609711888866656]}, "mutation_prompt": null}
{"id": "8b852e86-859e-4d97-afab-529e89b4777a", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.6\n        self.cognitive_coefficient = 1.4\n        self.social_coefficient = 1.6\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  # Reduced mutation rate to focus improvement\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 4  # Smaller neighborhood size for refined search\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)  # Adaptive diversity\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.5 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Hybrid Swarm Optimization with adaptive diversity preservation and local intensification to enhance exploitation.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6e4a6a46-eee5-4db9-bb2f-cd625aca141a", "metadata": {"aucs": [0.8099581598370749, 0.8099581598370749, 0.8099581598370749, 0.806851009710617, 0.806851009710617, 0.806851009710617, 0.8161671495506917, 0.8161671495506917, 0.8161671495506917, 0.611729995667675, 0.611729995667675, 0.611729995667675, 0.6281165056318319, 0.6281165056318319, 0.6281165056318319, 0.6410821789041854, 0.6410821789041854, 0.6410821789041854, 0.13886176817241846, 0.13886176817241846, 0.13886176817241846, 0.11707973208913514, 0.11707973208913514, 0.11707973208913514, 0.1189622816727457, 0.1189622816727457, 0.1189622816727457, 0.09397054267692961, 0.09397054267692961, 0.09397054267692961, 0.10910629296193852, 0.10910629296193852, 0.10910629296193852, 0.11068321275553428, 0.11068321275553428, 0.11068321275553428, 0.9918228520497498, 0.9918228520497498, 0.9918228520497498, 0.987924096732118, 0.987924096732118, 0.987924096732118, 0.9888759236698017, 0.9888759236698017, 0.9888759236698017, 0.5797929682757023, 0.5797929682757023, 0.5797929682757023, 0.6218355629664631, 0.6218355629664631, 0.6218355629664631, 0.6180565272380188, 0.6180565272380188, 0.6180565272380188, 0.7746056323624737, 0.7746056323624737, 0.7746056323624737, 0.8426559568506834, 0.8426559568506834, 0.8426559568506834, 0.7517467956990806, 0.7517467956990806, 0.7517467956990806, 0.498105081543057, 0.498105081543057, 0.498105081543057, 0.12474152815871442, 0.12474152815871442, 0.12474152815871442, 0.1258667131970873, 0.1258667131970873, 0.1258667131970873, 0.5357995452395234, 0.5357995452395234, 0.5357995452395234, 0.5844432425800379, 0.5844432425800379, 0.5844432425800379, 0.4342066188819834, 0.4342066188819834, 0.4342066188819834, 0.526542710485185, 0.526542710485185, 0.526542710485185, 0.4152710114923881, 0.4152710114923881, 0.4152710114923881, 0.492381084248518, 0.492381084248518, 0.492381084248518, 0.24918791431291543, 0.24918791431291543, 0.24918791431291543, 0.07685036433926706, 0.07685036433926706, 0.07685036433926706, 0.41537839919089203, 0.41537839919089203, 0.41537839919089203, 0.09340276344393572, 0.09340276344393572, 0.09340276344393572, 0.13061094096329073, 0.13061094096329073, 0.13061094096329073, 0.1048227645006593, 0.1048227645006593, 0.1048227645006593, 0.5644914818950202, 0.5644914818950202, 0.5644914818950202, 0.4804926983319092, 0.4804926983319092, 0.4804926983319092, 0.5617286892995312, 0.5617286892995312, 0.5617286892995312, 0.7744727444952078, 0.7744727444952078, 0.7744727444952078, 0.7855888583743065, 0.7855888583743065, 0.7855888583743065, 0.7767223554223381, 0.7767223554223381, 0.7767223554223381, 0.1333506852128883, 0.1333506852128883, 0.1333506852128883, 0.12403055128978158, 0.12403055128978158, 0.12403055128978158, 0.12450585764982003, 0.12450585764982003, 0.12450585764982003, 0.13961230907723132, 0.13961230907723132, 0.13961230907723132, 0.16672256611847747, 0.16672256611847747, 0.16672256611847747, 0.1434957094571786, 0.1434957094571786, 0.1434957094571786, 0.42523624893337497, 0.42523624893337497, 0.42523624893337497, 0.5177372175023065, 0.5177372175023065, 0.5177372175023065, 0.4145490214336547, 0.4145490214336547, 0.4145490214336547, 0.4809631874520204, 0.4809631874520204, 0.4809631874520204, 0.3395632192260605, 0.3395632192260605, 0.3395632192260605, 0.4057605165966306, 0.4057605165966306, 0.4057605165966306, 0.20659142163530142, 0.20659142163530142, 0.20659142163530142, 0.2095223337584421, 0.2095223337584421, 0.2095223337584421, 0.21263136056134668, 0.21263136056134668, 0.21263136056134668, 0.18133367599422967, 0.18133367599422967, 0.18133367599422967, 0.22162223074056586, 0.22162223074056586, 0.22162223074056586, 0.21559000744228551, 0.21559000744228551, 0.21559000744228551, 0.856235533626677, 0.856235533626677, 0.856235533626677, 0.6804475097927747, 0.6804475097927747, 0.6804475097927747, 0.6597599653925837, 0.6597599653925837, 0.6597599653925837, 0.16858057374577273, 0.16858057374577273, 0.16858057374577273, 0.6264613571773114, 0.6264613571773114, 0.6264613571773114, 0.1533922759579176, 0.1533922759579176, 0.1533922759579176, 0.17990893308663947, 0.17990893308663947, 0.17990893308663947, 0.1738809041570768, 0.1738809041570768, 0.1738809041570768, 0.20540251519428288, 0.20540251519428288, 0.20540251519428288, 0.09444305527796004, 0.09444305527796004, 0.09444305527796004, 0.09264402880604561, 0.09264402880604561, 0.09264402880604561, 0.08609711888866656, 0.08609711888866656, 0.08609711888866656]}, "mutation_prompt": null}
{"id": "f454b629-9bb8-401a-9a19-b8d87a89b2c2", "solution": "import numpy as np\n\nclass RefinedSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_swarm_size = 30\n        self.inertia = 0.6\n        self.cognitive_coefficient = 1.4\n        self.social_coefficient = 1.6\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        evaluations = 0\n\n        swarm_size = self.initial_swarm_size\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        while evaluations < self.budget:\n            neighborhood_size = 4\n            for i in range(swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(swarm_size):\n                neighbors = np.random.choice(swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               np.random.rand() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                # Boundary reflection\n                outside_bounds = (position[i] < self.lower_bound) | (position[i] > self.upper_bound)\n                velocity[i][outside_bounds] *= -1\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic swarm size adjustment\n            if evaluations < self.budget / 2:\n                swarm_size = int(self.initial_swarm_size + 10 * (1 - evaluations / self.budget))\n            else:\n                swarm_size = self.initial_swarm_size\n\n            self.inertia = 0.5 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "RefinedSwarmOptimization", "description": "A refined Particle Swarm Optimization with adaptive inertia, boundary reflection, and dynamic swarm size to enhance exploration and exploitation.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 30 is out of bounds for axis 0 with size 30').", "error": "IndexError('index 30 is out of bounds for axis 0 with size 30')", "parent_id": "6e4a6a46-eee5-4db9-bb2f-cd625aca141a", "metadata": {}, "mutation_prompt": null}
{"id": "4ace00b3-fff1-44ef-8c1c-a627e01d6169", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.6\n        self.cognitive_coefficient = 1.4\n        self.social_coefficient = 1.6\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = max(2, int(6 - 4 * (evaluations / self.budget)))  # Dynamic neighborhood size\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] += np.random.uniform(-0.5, 0.5, size=self.dim)  # Balanced mutation\n\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.5 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic neighborhood size and velocity adjustment for improved exploration and exploitation balance.", "configspace": "", "generation": 57, "fitness": 0.2765749237947989, "feedback": "The algorithm HybridSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.24.", "error": "", "parent_id": "6e4a6a46-eee5-4db9-bb2f-cd625aca141a", "metadata": {"aucs": [0.6247665247305103, 0.6247665247305103, 0.6247665247305103, 0.6289038230114253, 0.6289038230114253, 0.6289038230114253, 0.6392186624162461, 0.6392186624162461, 0.6392186624162461, 0.14483661810599202, 0.14483661810599202, 0.14483661810599202, 0.16957851520851108, 0.16957851520851108, 0.16957851520851108, 0.015599281627073247, 0.015599281627073247, 0.015599281627073247, 0.09989204333633461, 0.09989204333633461, 0.09989204333633461, 0.12296941302933861, 0.12296941302933861, 0.12296941302933861, 0.10816345566954955, 0.10816345566954955, 0.10816345566954955, 0.10801630506747384, 0.10801630506747384, 0.10801630506747384, 0.09169007211596614, 0.09169007211596614, 0.09169007211596614, 0.10099843562837485, 0.10099843562837485, 0.10099843562837485, 0.989824612840342, 0.989824612840342, 0.989824612840342, 0.9890382887081121, 0.9890382887081121, 0.9890382887081121, 0.9916800711320188, 0.9916800711320188, 0.9916800711320188, 0.3891096777880355, 0.3891096777880355, 0.3891096777880355, 0.3719796294313229, 0.3719796294313229, 0.3719796294313229, 0.40173951609449177, 0.40173951609449177, 0.40173951609449177, 0.7608929000947959, 0.7608929000947959, 0.7608929000947959, 0.7679087718254515, 0.7679087718254515, 0.7679087718254515, 0.8333439467628142, 0.8333439467628142, 0.8333439467628142, 0.22286619400971897, 0.22286619400971897, 0.22286619400971897, 0.2247257451617094, 0.2247257451617094, 0.2247257451617094, 0.22631090315090685, 0.22631090315090685, 0.22631090315090685, 0.22344002894022497, 0.22344002894022497, 0.22344002894022497, 0.21687489660058445, 0.21687489660058445, 0.21687489660058445, 0.21032242237444554, 0.21032242237444554, 0.21032242237444554, 0.013867758808327912, 0.013867758808327912, 0.013867758808327912, 0.11668728460229427, 0.11668728460229427, 0.11668728460229427, 0.013092354789959737, 0.013092354789959737, 0.013092354789959737, 0.06344710352847127, 0.06344710352847127, 0.06344710352847127, 0.06130793433577997, 0.06130793433577997, 0.06130793433577997, 0.053264608935196356, 0.053264608935196356, 0.053264608935196356, 0.03698114602362601, 0.03698114602362601, 0.03698114602362601, 0.11108586406738541, 0.11108586406738541, 0.11108586406738541, 0.13744595409875693, 0.13744595409875693, 0.13744595409875693, 0.17634834002581612, 0.17634834002581612, 0.17634834002581612, 0.18522968460449218, 0.18522968460449218, 0.18522968460449218, 0.22485193976994977, 0.22485193976994977, 0.22485193976994977, 0.5048714433934783, 0.5048714433934783, 0.5048714433934783, 0.5250308355539961, 0.5250308355539961, 0.5250308355539961, 0.4917893556546096, 0.4917893556546096, 0.4917893556546096, 0.10441673924839556, 0.10441673924839556, 0.10441673924839556, 0.09963407935025459, 0.09963407935025459, 0.09963407935025459, 0.1038576248193831, 0.1038576248193831, 0.1038576248193831, 0.17822815125929226, 0.17822815125929226, 0.17822815125929226, 0.13765184056163648, 0.13765184056163648, 0.13765184056163648, 0.25930832970000117, 0.25930832970000117, 0.25930832970000117, 0.36842607095436963, 0.36842607095436963, 0.36842607095436963, 0.3418003889978297, 0.3418003889978297, 0.3418003889978297, 0.3576175798383361, 0.3576175798383361, 0.3576175798383361, 0.287166391497516, 0.287166391497516, 0.287166391497516, 0.2622847219521166, 0.2622847219521166, 0.2622847219521166, 0.25468176034349743, 0.25468176034349743, 0.25468176034349743, 0.1836004562282122, 0.1836004562282122, 0.1836004562282122, 0.21691505737344918, 0.21691505737344918, 0.21691505737344918, 0.20075016547857727, 0.20075016547857727, 0.20075016547857727, 0.17677085148608496, 0.17677085148608496, 0.17677085148608496, 0.18446141589046006, 0.18446141589046006, 0.18446141589046006, 0.1918177544602926, 0.1918177544602926, 0.1918177544602926, 0.8515362723266677, 0.8515362723266677, 0.8515362723266677, 0.16470747943693764, 0.16470747943693764, 0.16470747943693764, 0.18909643184270641, 0.18909643184270641, 0.18909643184270641, 0.16866058242506643, 0.16866058242506643, 0.16866058242506643, 0.21003710203503945, 0.21003710203503945, 0.21003710203503945, 0.21098760509880776, 0.21098760509880776, 0.21098760509880776, 0.18532835337254883, 0.18532835337254883, 0.18532835337254883, 0.1854228539091699, 0.1854228539091699, 0.1854228539091699, 0.20179743389981641, 0.20179743389981641, 0.20179743389981641, 0.08471071950033915, 0.08471071950033915, 0.08471071950033915, 0.07980906030931223, 0.07980906030931223, 0.07980906030931223, 0.08191887657549446, 0.08191887657549446, 0.08191887657549446]}, "mutation_prompt": null}
{"id": "78a2fc1f-9d62-45b8-8d21-66fab6b0b2d0", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.6\n        self.cognitive_coefficient = 1.4\n        self.social_coefficient = 1.6\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n        alpha = 0.9  # Exponential smoothing factor for diversity\n\n        while evaluations < self.budget:\n            neighborhood_size = max(2, int(5 - 3 * evaluations / self.budget))  # Dynamic neighborhood size\n            exp_diversity_factor = 0.0\n\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            exp_diversity_factor = alpha * exp_diversity_factor + (1 - alpha) * diversity_factor.mean()  # Exponential smoothing\n\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               exp_diversity_factor * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.5 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Hybrid Swarm Optimization with dynamic neighborhood size and exponential smoothing on diversity factor to enhance exploration and exploitation balance.", "configspace": "", "generation": 58, "fitness": 0.3941415574778897, "feedback": "The algorithm HybridSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.27.", "error": "", "parent_id": "6e4a6a46-eee5-4db9-bb2f-cd625aca141a", "metadata": {"aucs": [0.8164909176841241, 0.8164909176841241, 0.8164909176841241, 0.8169545964181241, 0.8169545964181241, 0.8169545964181241, 0.8110203692478166, 0.8110203692478166, 0.8110203692478166, 0.6481707435642045, 0.6481707435642045, 0.6481707435642045, 0.6225486490889709, 0.6225486490889709, 0.6225486490889709, 0.6397303582203462, 0.6397303582203462, 0.6397303582203462, 0.10266813880968562, 0.10266813880968562, 0.10266813880968562, 0.10649082037313296, 0.10649082037313296, 0.10649082037313296, 0.11883718762735462, 0.11883718762735462, 0.11883718762735462, 0.09120495255856709, 0.09120495255856709, 0.09120495255856709, 0.09271845242587584, 0.09271845242587584, 0.09271845242587584, 0.09959919621255353, 0.09959919621255353, 0.09959919621255353, 0.9856731167155407, 0.9856731167155407, 0.9856731167155407, 0.9863498932452452, 0.9863498932452452, 0.9863498932452452, 0.9888173258822494, 0.9888173258822494, 0.9888173258822494, 0.5807099995895353, 0.5807099995895353, 0.5807099995895353, 0.5902554300277459, 0.5902554300277459, 0.5902554300277459, 0.6303506231670003, 0.6303506231670003, 0.6303506231670003, 0.8044140653459763, 0.8044140653459763, 0.8044140653459763, 0.268968867889936, 0.268968867889936, 0.268968867889936, 0.7916119801567358, 0.7916119801567358, 0.7916119801567358, 0.41553049583696877, 0.41553049583696877, 0.41553049583696877, 0.506268307839636, 0.506268307839636, 0.506268307839636, 0.5666890502372736, 0.5666890502372736, 0.5666890502372736, 0.4910601100912493, 0.4910601100912493, 0.4910601100912493, 0.4453648140936981, 0.4453648140936981, 0.4453648140936981, 0.32743559670457056, 0.32743559670457056, 0.32743559670457056, 0.4332174845515877, 0.4332174845515877, 0.4332174845515877, 0.43741741982516735, 0.43741741982516735, 0.43741741982516735, 0.5918974797953943, 0.5918974797953943, 0.5918974797953943, 0.28897036181334357, 0.28897036181334357, 0.28897036181334357, 0.060402358236970044, 0.060402358236970044, 0.060402358236970044, 0.503452185956559, 0.503452185956559, 0.503452185956559, 0.050361402312397496, 0.050361402312397496, 0.050361402312397496, 0.43139443083353834, 0.43139443083353834, 0.43139443083353834, 0.1274538671037817, 0.1274538671037817, 0.1274538671037817, 0.5405454184203589, 0.5405454184203589, 0.5405454184203589, 0.5253446338539085, 0.5253446338539085, 0.5253446338539085, 0.4674563661145511, 0.4674563661145511, 0.4674563661145511, 0.7688470740141959, 0.7688470740141959, 0.7688470740141959, 0.7838108965013387, 0.7838108965013387, 0.7838108965013387, 0.76204938709333, 0.76204938709333, 0.76204938709333, 0.09396422452354947, 0.09396422452354947, 0.09396422452354947, 0.10024774511998025, 0.10024774511998025, 0.10024774511998025, 0.13657601036904088, 0.13657601036904088, 0.13657601036904088, 0.17191575262960035, 0.17191575262960035, 0.17191575262960035, 0.14058440506076297, 0.14058440506076297, 0.14058440506076297, 0.1432906781382457, 0.1432906781382457, 0.1432906781382457, 0.48624628905737965, 0.48624628905737965, 0.48624628905737965, 0.5497333892779535, 0.5497333892779535, 0.5497333892779535, 0.5040032369936909, 0.5040032369936909, 0.5040032369936909, 0.45005245637642854, 0.45005245637642854, 0.45005245637642854, 0.41294285803822117, 0.41294285803822117, 0.41294285803822117, 0.4678794189244019, 0.4678794189244019, 0.4678794189244019, 0.19440906964325322, 0.19440906964325322, 0.19440906964325322, 0.18394289563802368, 0.18394289563802368, 0.18394289563802368, 0.1905510488240597, 0.1905510488240597, 0.1905510488240597, 0.2069329989872123, 0.2069329989872123, 0.2069329989872123, 0.18872804841492474, 0.18872804841492474, 0.18872804841492474, 0.19476632961864748, 0.19476632961864748, 0.19476632961864748, 0.8007395761341178, 0.8007395761341178, 0.8007395761341178, 0.1625563256202064, 0.1625563256202064, 0.1625563256202064, 0.15888798833435414, 0.15888798833435414, 0.15888798833435414, 0.1675650267543879, 0.1675650267543879, 0.1675650267543879, 0.20999491131247483, 0.20999491131247483, 0.20999491131247483, 0.1535116473650665, 0.1535116473650665, 0.1535116473650665, 0.1764374360242731, 0.1764374360242731, 0.1764374360242731, 0.1829348346379135, 0.1829348346379135, 0.1829348346379135, 0.180074389932958, 0.180074389932958, 0.180074389932958, 0.07861390051578532, 0.07861390051578532, 0.07861390051578532, 0.09538204396792915, 0.09538204396792915, 0.09538204396792915, 0.07617237669267818, 0.07617237669267818, 0.07617237669267818]}, "mutation_prompt": null}
{"id": "111bc9b0-8265-4322-9c3f-c8983b35dd1c", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.6\n        self.cognitive_coefficient = 1.4\n        self.social_coefficient = 1.6\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  # Reduced mutation rate to focus improvement\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 4  # Smaller neighborhood size for refined search\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)  # Adaptive diversity\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.5 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Hybrid Swarm Optimization with adaptive diversity preservation and local intensification to enhance exploitation.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6e4a6a46-eee5-4db9-bb2f-cd625aca141a", "metadata": {"aucs": [0.8099581598370749, 0.8099581598370749, 0.8099581598370749, 0.806851009710617, 0.806851009710617, 0.806851009710617, 0.8161671495506917, 0.8161671495506917, 0.8161671495506917, 0.611729995667675, 0.611729995667675, 0.611729995667675, 0.6281165056318319, 0.6281165056318319, 0.6281165056318319, 0.6410821789041854, 0.6410821789041854, 0.6410821789041854, 0.13886176817241846, 0.13886176817241846, 0.13886176817241846, 0.11707973208913514, 0.11707973208913514, 0.11707973208913514, 0.1189622816727457, 0.1189622816727457, 0.1189622816727457, 0.09397054267692961, 0.09397054267692961, 0.09397054267692961, 0.10910629296193852, 0.10910629296193852, 0.10910629296193852, 0.11068321275553428, 0.11068321275553428, 0.11068321275553428, 0.9918228520497498, 0.9918228520497498, 0.9918228520497498, 0.987924096732118, 0.987924096732118, 0.987924096732118, 0.9888759236698017, 0.9888759236698017, 0.9888759236698017, 0.5797929682757023, 0.5797929682757023, 0.5797929682757023, 0.6218355629664631, 0.6218355629664631, 0.6218355629664631, 0.6180565272380188, 0.6180565272380188, 0.6180565272380188, 0.7746056323624737, 0.7746056323624737, 0.7746056323624737, 0.8426559568506834, 0.8426559568506834, 0.8426559568506834, 0.7517467956990806, 0.7517467956990806, 0.7517467956990806, 0.498105081543057, 0.498105081543057, 0.498105081543057, 0.12474152815871442, 0.12474152815871442, 0.12474152815871442, 0.1258667131970873, 0.1258667131970873, 0.1258667131970873, 0.5357995452395234, 0.5357995452395234, 0.5357995452395234, 0.5844432425800379, 0.5844432425800379, 0.5844432425800379, 0.4342066188819834, 0.4342066188819834, 0.4342066188819834, 0.526542710485185, 0.526542710485185, 0.526542710485185, 0.4152710114923881, 0.4152710114923881, 0.4152710114923881, 0.492381084248518, 0.492381084248518, 0.492381084248518, 0.24918791431291543, 0.24918791431291543, 0.24918791431291543, 0.07685036433926706, 0.07685036433926706, 0.07685036433926706, 0.41537839919089203, 0.41537839919089203, 0.41537839919089203, 0.09340276344393572, 0.09340276344393572, 0.09340276344393572, 0.13061094096329073, 0.13061094096329073, 0.13061094096329073, 0.1048227645006593, 0.1048227645006593, 0.1048227645006593, 0.5644914818950202, 0.5644914818950202, 0.5644914818950202, 0.4804926983319092, 0.4804926983319092, 0.4804926983319092, 0.5617286892995312, 0.5617286892995312, 0.5617286892995312, 0.7744727444952078, 0.7744727444952078, 0.7744727444952078, 0.7855888583743065, 0.7855888583743065, 0.7855888583743065, 0.7767223554223381, 0.7767223554223381, 0.7767223554223381, 0.1333506852128883, 0.1333506852128883, 0.1333506852128883, 0.12403055128978158, 0.12403055128978158, 0.12403055128978158, 0.12450585764982003, 0.12450585764982003, 0.12450585764982003, 0.13961230907723132, 0.13961230907723132, 0.13961230907723132, 0.16672256611847747, 0.16672256611847747, 0.16672256611847747, 0.1434957094571786, 0.1434957094571786, 0.1434957094571786, 0.42523624893337497, 0.42523624893337497, 0.42523624893337497, 0.5177372175023065, 0.5177372175023065, 0.5177372175023065, 0.4145490214336547, 0.4145490214336547, 0.4145490214336547, 0.4809631874520204, 0.4809631874520204, 0.4809631874520204, 0.3395632192260605, 0.3395632192260605, 0.3395632192260605, 0.4057605165966306, 0.4057605165966306, 0.4057605165966306, 0.20659142163530142, 0.20659142163530142, 0.20659142163530142, 0.2095223337584421, 0.2095223337584421, 0.2095223337584421, 0.21263136056134668, 0.21263136056134668, 0.21263136056134668, 0.18133367599422967, 0.18133367599422967, 0.18133367599422967, 0.22162223074056586, 0.22162223074056586, 0.22162223074056586, 0.21559000744228551, 0.21559000744228551, 0.21559000744228551, 0.856235533626677, 0.856235533626677, 0.856235533626677, 0.6804475097927747, 0.6804475097927747, 0.6804475097927747, 0.6597599653925837, 0.6597599653925837, 0.6597599653925837, 0.16858057374577273, 0.16858057374577273, 0.16858057374577273, 0.6264613571773114, 0.6264613571773114, 0.6264613571773114, 0.1533922759579176, 0.1533922759579176, 0.1533922759579176, 0.17990893308663947, 0.17990893308663947, 0.17990893308663947, 0.1738809041570768, 0.1738809041570768, 0.1738809041570768, 0.20540251519428288, 0.20540251519428288, 0.20540251519428288, 0.09444305527796004, 0.09444305527796004, 0.09444305527796004, 0.09264402880604561, 0.09264402880604561, 0.09264402880604561, 0.08609711888866656, 0.08609711888866656, 0.08609711888866656]}, "mutation_prompt": null}
{"id": "467c5f92-496b-4a76-a2e7-c2653f1f6a28", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Increased initial inertia\n        self.cognitive_coefficient = 1.5  # Adjusted cognitive coefficient\n        self.social_coefficient = 1.5  # Adjusted social coefficient\n        self.velocity_scale = 0.1\n        self.base_mutation_rate = 0.1  # Dynamic mutation rate\n        self.mutation_amplitude = 1.5\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 4\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                mutation_rate = self.base_mutation_rate * (1 - evaluations / self.budget)\n                if np.random.rand() < mutation_rate:\n                    velocity[i] *= np.random.uniform(-self.mutation_amplitude, self.mutation_amplitude)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.9 - 0.4 * (evaluations / self.budget)  # Linear decay of inertia\n\n        return global_best_value", "name": "EnhancedHybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with adaptive inertia decay and dynamic mutation for improved exploration and exploitation balance.", "configspace": "", "generation": 60, "fitness": 0.32268615082897867, "feedback": "The algorithm EnhancedHybridSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.25.", "error": "", "parent_id": "6e4a6a46-eee5-4db9-bb2f-cd625aca141a", "metadata": {"aucs": [0.7151736240625499, 0.7151736240625499, 0.7151736240625499, 0.7165320160858242, 0.7165320160858242, 0.7165320160858242, 0.7131605823587908, 0.7131605823587908, 0.7131605823587908, 0.4249016261951324, 0.4249016261951324, 0.4249016261951324, 0.39928635752481356, 0.39928635752481356, 0.39928635752481356, 0.43342662759613726, 0.43342662759613726, 0.43342662759613726, 0.08892081861853918, 0.08892081861853918, 0.08892081861853918, 0.10123344840629722, 0.10123344840629722, 0.10123344840629722, 0.08777360468273676, 0.08777360468273676, 0.08777360468273676, 0.0784759370810616, 0.0784759370810616, 0.0784759370810616, 0.08684425552098107, 0.08684425552098107, 0.08684425552098107, 0.0824578948163478, 0.0824578948163478, 0.0824578948163478, 0.9918142678306611, 0.9918142678306611, 0.9918142678306611, 0.9913500676980169, 0.9913500676980169, 0.9913500676980169, 0.988901030457682, 0.988901030457682, 0.988901030457682, 0.4745756851996543, 0.4745756851996543, 0.4745756851996543, 0.4764755147099745, 0.4764755147099745, 0.4764755147099745, 0.47631143793900943, 0.47631143793900943, 0.47631143793900943, 0.6301992421581195, 0.6301992421581195, 0.6301992421581195, 0.635325928294503, 0.635325928294503, 0.635325928294503, 0.6680285575417901, 0.6680285575417901, 0.6680285575417901, 0.42573336642968984, 0.42573336642968984, 0.42573336642968984, 0.11808292638023232, 0.11808292638023232, 0.11808292638023232, 0.4318281598906878, 0.4318281598906878, 0.4318281598906878, 0.24322542456026475, 0.24322542456026475, 0.24322542456026475, 0.4358613314655627, 0.4358613314655627, 0.4358613314655627, 0.3912389748452084, 0.3912389748452084, 0.3912389748452084, 0.11417092914536131, 0.11417092914536131, 0.11417092914536131, 0.02366881737378057, 0.02366881737378057, 0.02366881737378057, 0.2057240411147664, 0.2057240411147664, 0.2057240411147664, 0.08998075177017995, 0.08998075177017995, 0.08998075177017995, 0.027213343449053906, 0.027213343449053906, 0.027213343449053906, 0.13759087894371547, 0.13759087894371547, 0.13759087894371547, 0.04810278315196215, 0.04810278315196215, 0.04810278315196215, 0.08624586253944766, 0.08624586253944766, 0.08624586253944766, 0.15009767951753705, 0.15009767951753705, 0.15009767951753705, 0.35581812107382604, 0.35581812107382604, 0.35581812107382604, 0.3629713612145008, 0.3629713612145008, 0.3629713612145008, 0.05237424482627828, 0.05237424482627828, 0.05237424482627828, 0.6769374823972001, 0.6769374823972001, 0.6769374823972001, 0.6845481326401918, 0.6845481326401918, 0.6845481326401918, 0.6531358320626361, 0.6531358320626361, 0.6531358320626361, 0.149348291013764, 0.149348291013764, 0.149348291013764, 0.09963323943549807, 0.09963323943549807, 0.09963323943549807, 0.10700924930336497, 0.10700924930336497, 0.10700924930336497, 0.1322272040112692, 0.1322272040112692, 0.1322272040112692, 0.13807743228244984, 0.13807743228244984, 0.13807743228244984, 0.1397418711601367, 0.1397418711601367, 0.1397418711601367, 0.4098949033909306, 0.4098949033909306, 0.4098949033909306, 0.4439759401286085, 0.4439759401286085, 0.4439759401286085, 0.3907973056852464, 0.3907973056852464, 0.3907973056852464, 0.25164983260085694, 0.25164983260085694, 0.25164983260085694, 0.31638441228769876, 0.31638441228769876, 0.31638441228769876, 0.3564460085844653, 0.3564460085844653, 0.3564460085844653, 0.18740080227413625, 0.18740080227413625, 0.18740080227413625, 0.19595436077009987, 0.19595436077009987, 0.19595436077009987, 0.20312823821879533, 0.20312823821879533, 0.20312823821879533, 0.205871668527411, 0.205871668527411, 0.205871668527411, 0.1752391472005198, 0.1752391472005198, 0.1752391472005198, 0.17037639160414697, 0.17037639160414697, 0.17037639160414697, 0.6708755746617531, 0.6708755746617531, 0.6708755746617531, 0.7153424625404261, 0.7153424625404261, 0.7153424625404261, 0.18524521593427312, 0.18524521593427312, 0.18524521593427312, 0.48030510842041996, 0.48030510842041996, 0.48030510842041996, 0.20525992262147752, 0.20525992262147752, 0.20525992262147752, 0.1518609086742876, 0.1518609086742876, 0.1518609086742876, 0.1959578971101409, 0.1959578971101409, 0.1959578971101409, 0.17580606155175482, 0.17580606155175482, 0.17580606155175482, 0.181586715052516, 0.181586715052516, 0.181586715052516, 0.07621629572791322, 0.07621629572791322, 0.07621629572791322, 0.078098339362496, 0.078098339362496, 0.078098339362496, 0.06797308997889906, 0.06797308997889906, 0.06797308997889906]}, "mutation_prompt": null}
{"id": "b8b20eb4-2843-4191-8ec5-8669cd50e68b", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_swarm_size = 30\n        self.min_swarm_size = 10\n        self.inertia = 0.6\n        self.cognitive_coefficient = 1.4\n        self.social_coefficient = 1.6\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        swarm_size = self.initial_swarm_size\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            if evaluations > self.budget / 2:\n                swarm_size = max(self.min_swarm_size, swarm_size - 1)  # Adaptive swarm size reduction\n                position = position[:swarm_size]\n                velocity = velocity[:swarm_size]\n                personal_best_position = personal_best_position[:swarm_size]\n                personal_best_value = personal_best_value[:swarm_size]\n\n            neighborhood_size = 3  \n            for i in range(swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(swarm_size):\n                neighbors = np.random.choice(swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity_decay = 0.9 + 0.1 * (evaluations / self.budget)  # Velocity decay over time\n                velocity[i] = (velocity_decay * self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.5 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "EnhancedHybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with adaptive swarm size and velocity adjustment for improved convergence.", "configspace": "", "generation": 61, "fitness": 0.4014732737785553, "feedback": "The algorithm EnhancedHybridSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.28.", "error": "", "parent_id": "6e4a6a46-eee5-4db9-bb2f-cd625aca141a", "metadata": {"aucs": [0.8127160632217224, 0.8127160632217224, 0.8127160632217224, 0.8273783157905702, 0.8273783157905702, 0.8273783157905702, 0.8157135838571461, 0.8157135838571461, 0.8157135838571461, 0.6770333994821784, 0.6770333994821784, 0.6770333994821784, 0.611775932072001, 0.611775932072001, 0.611775932072001, 0.6524718828981708, 0.6524718828981708, 0.6524718828981708, 0.12040103311361161, 0.12040103311361161, 0.12040103311361161, 0.14325947663967653, 0.14325947663967653, 0.14325947663967653, 0.13042599974238678, 0.13042599974238678, 0.13042599974238678, 0.09588336139449971, 0.09588336139449971, 0.09588336139449971, 0.09740899305165562, 0.09740899305165562, 0.09740899305165562, 0.10216171373539618, 0.10216171373539618, 0.10216171373539618, 0.9880667881899734, 0.9880667881899734, 0.9880667881899734, 0.984003330266456, 0.984003330266456, 0.984003330266456, 0.9878754106327822, 0.9878754106327822, 0.9878754106327822, 0.600635180149844, 0.600635180149844, 0.600635180149844, 0.5543687311305732, 0.5543687311305732, 0.5543687311305732, 0.5698278251892174, 0.5698278251892174, 0.5698278251892174, 0.7903318036904714, 0.7903318036904714, 0.7903318036904714, 0.8039854685476525, 0.8039854685476525, 0.8039854685476525, 0.8114252271596959, 0.8114252271596959, 0.8114252271596959, 0.6654127468878086, 0.6654127468878086, 0.6654127468878086, 0.23717511523223134, 0.23717511523223134, 0.23717511523223134, 0.5380728835290748, 0.5380728835290748, 0.5380728835290748, 0.30370008497034207, 0.30370008497034207, 0.30370008497034207, 0.28247996272725495, 0.28247996272725495, 0.28247996272725495, 0.2362998684521922, 0.2362998684521922, 0.2362998684521922, 0.34592459181073754, 0.34592459181073754, 0.34592459181073754, 0.2457706750924007, 0.2457706750924007, 0.2457706750924007, 0.13492575093899173, 0.13492575093899173, 0.13492575093899173, 0.2610853982936635, 0.2610853982936635, 0.2610853982936635, 0.06653882915135323, 0.06653882915135323, 0.06653882915135323, 0.1687469384610113, 0.1687469384610113, 0.1687469384610113, 0.16245940489413002, 0.16245940489413002, 0.16245940489413002, 0.2587288188792699, 0.2587288188792699, 0.2587288188792699, 0.10833580210711602, 0.10833580210711602, 0.10833580210711602, 0.39666980972507326, 0.39666980972507326, 0.39666980972507326, 0.44031652118841835, 0.44031652118841835, 0.44031652118841835, 0.5891937985804949, 0.5891937985804949, 0.5891937985804949, 0.7696005001577821, 0.7696005001577821, 0.7696005001577821, 0.7898912324791971, 0.7898912324791971, 0.7898912324791971, 0.7822097085598295, 0.7822097085598295, 0.7822097085598295, 0.10669408470455588, 0.10669408470455588, 0.10669408470455588, 0.12341615084799828, 0.12341615084799828, 0.12341615084799828, 0.11698897122876373, 0.11698897122876373, 0.11698897122876373, 0.13158789316386088, 0.13158789316386088, 0.13158789316386088, 0.1438643961813586, 0.1438643961813586, 0.1438643961813586, 0.628044434188376, 0.628044434188376, 0.628044434188376, 0.5366107608374975, 0.5366107608374975, 0.5366107608374975, 0.5247583232653308, 0.5247583232653308, 0.5247583232653308, 0.551493079818077, 0.551493079818077, 0.551493079818077, 0.4533997122276815, 0.4533997122276815, 0.4533997122276815, 0.396040110137003, 0.396040110137003, 0.396040110137003, 0.3774187309034973, 0.3774187309034973, 0.3774187309034973, 0.22526669897357177, 0.22526669897357177, 0.22526669897357177, 0.22223364037016913, 0.22223364037016913, 0.22223364037016913, 0.20383590837828702, 0.20383590837828702, 0.20383590837828702, 0.18754191227994454, 0.18754191227994454, 0.18754191227994454, 0.18378968555091446, 0.18378968555091446, 0.18378968555091446, 0.1929449641783576, 0.1929449641783576, 0.1929449641783576, 0.7833581577010162, 0.7833581577010162, 0.7833581577010162, 0.8185916702114096, 0.8185916702114096, 0.8185916702114096, 0.182863846207864, 0.182863846207864, 0.182863846207864, 0.6990266201031372, 0.6990266201031372, 0.6990266201031372, 0.16751413178596208, 0.16751413178596208, 0.16751413178596208, 0.207668306019695, 0.207668306019695, 0.207668306019695, 0.17479087575525976, 0.17479087575525976, 0.17479087575525976, 0.18065696563991218, 0.18065696563991218, 0.18065696563991218, 0.17943008410934513, 0.17943008410934513, 0.17943008410934513, 0.0797646697816301, 0.0797646697816301, 0.0797646697816301, 0.0821210810526889, 0.0821210810526889, 0.0821210810526889, 0.08367188437876105, 0.08367188437876105, 0.08367188437876105]}, "mutation_prompt": null}
{"id": "e0d0f2c3-e082-4928-a325-c217e810fbd5", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Slightly increased inertia for better exploration\n        self.cognitive_coefficient = 1.5  # Fine-tuned cognitive coefficient\n        self.social_coefficient = 1.6\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.12  # Increased mutation rate for diversity\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = int(4 + 6 * (1 - evaluations / self.budget))  # Dynamic neighborhood size\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.5 + 0.4 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)  # Enhanced adaptive inertia\n\n        return global_best_value", "name": "EnhancedHybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization using adaptive inertia and dynamic neighborhood size for improved exploration-exploitation balance.", "configspace": "", "generation": 62, "fitness": 0.38085028396821236, "feedback": "The algorithm EnhancedHybridSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.26.", "error": "", "parent_id": "6e4a6a46-eee5-4db9-bb2f-cd625aca141a", "metadata": {"aucs": [0.7720747563844071, 0.7720747563844071, 0.7720747563844071, 0.7969899050911508, 0.7969899050911508, 0.7969899050911508, 0.8047024943078858, 0.8047024943078858, 0.8047024943078858, 0.13545713472146237, 0.13545713472146237, 0.13545713472146237, 0.5498054183055063, 0.5498054183055063, 0.5498054183055063, 0.5890277358615179, 0.5890277358615179, 0.5890277358615179, 0.1265891479710377, 0.1265891479710377, 0.1265891479710377, 0.1207467098688445, 0.1207467098688445, 0.1207467098688445, 0.13289429625598748, 0.13289429625598748, 0.13289429625598748, 0.10061617561017466, 0.10061617561017466, 0.10061617561017466, 0.0936682499885102, 0.0936682499885102, 0.0936682499885102, 0.11909652334625354, 0.11909652334625354, 0.11909652334625354, 0.9890582566318139, 0.9890582566318139, 0.9890582566318139, 0.9891964227775301, 0.9891964227775301, 0.9891964227775301, 0.9911958795849367, 0.9911958795849367, 0.9911958795849367, 0.6403942026493106, 0.6403942026493106, 0.6403942026493106, 0.6539458376102245, 0.6539458376102245, 0.6539458376102245, 0.5908486420131889, 0.5908486420131889, 0.5908486420131889, 0.7312543355562606, 0.7312543355562606, 0.7312543355562606, 0.1612694340974118, 0.1612694340974118, 0.1612694340974118, 0.7641411354793303, 0.7641411354793303, 0.7641411354793303, 0.45435558700121303, 0.45435558700121303, 0.45435558700121303, 0.4369562537645052, 0.4369562537645052, 0.4369562537645052, 0.5649025832321128, 0.5649025832321128, 0.5649025832321128, 0.5014380507728796, 0.5014380507728796, 0.5014380507728796, 0.34276924392589714, 0.34276924392589714, 0.34276924392589714, 0.5065328358362227, 0.5065328358362227, 0.5065328358362227, 0.4914477135652996, 0.4914477135652996, 0.4914477135652996, 0.47317594663080287, 0.47317594663080287, 0.47317594663080287, 0.09773351024865695, 0.09773351024865695, 0.09773351024865695, 0.2846303486140921, 0.2846303486140921, 0.2846303486140921, 0.2853020748536387, 0.2853020748536387, 0.2853020748536387, 0.24754569469469823, 0.24754569469469823, 0.24754569469469823, 0.056575220288242245, 0.056575220288242245, 0.056575220288242245, 0.0857103830775362, 0.0857103830775362, 0.0857103830775362, 0.1755742525745725, 0.1755742525745725, 0.1755742525745725, 0.5370087529882477, 0.5370087529882477, 0.5370087529882477, 0.46249211091453235, 0.46249211091453235, 0.46249211091453235, 0.5827863990876134, 0.5827863990876134, 0.5827863990876134, 0.7396329576555225, 0.7396329576555225, 0.7396329576555225, 0.7241564255478061, 0.7241564255478061, 0.7241564255478061, 0.6955016560155214, 0.6955016560155214, 0.6955016560155214, 0.13248088791314638, 0.13248088791314638, 0.13248088791314638, 0.11072155701675368, 0.11072155701675368, 0.11072155701675368, 0.12255059567600601, 0.12255059567600601, 0.12255059567600601, 0.12932500399344482, 0.12932500399344482, 0.12932500399344482, 0.24013712222575867, 0.24013712222575867, 0.24013712222575867, 0.12971181498478634, 0.12971181498478634, 0.12971181498478634, 0.49158605847581216, 0.49158605847581216, 0.49158605847581216, 0.4503739770069486, 0.4503739770069486, 0.4503739770069486, 0.37924355914419683, 0.37924355914419683, 0.37924355914419683, 0.38318786624472745, 0.38318786624472745, 0.38318786624472745, 0.3971441939128685, 0.3971441939128685, 0.3971441939128685, 0.46312833743478554, 0.46312833743478554, 0.46312833743478554, 0.18507445675901846, 0.18507445675901846, 0.18507445675901846, 0.19507637018876067, 0.19507637018876067, 0.19507637018876067, 0.19468767921806762, 0.19468767921806762, 0.19468767921806762, 0.20967314899237977, 0.20967314899237977, 0.20967314899237977, 0.21105261183756485, 0.21105261183756485, 0.21105261183756485, 0.197499521220577, 0.197499521220577, 0.197499521220577, 0.8610633606542486, 0.8610633606542486, 0.8610633606542486, 0.1692887333128218, 0.1692887333128218, 0.1692887333128218, 0.19687787292922077, 0.19687787292922077, 0.19687787292922077, 0.204247703677937, 0.204247703677937, 0.204247703677937, 0.7681621370738491, 0.7681621370738491, 0.7681621370738491, 0.19327994898821954, 0.19327994898821954, 0.19327994898821954, 0.18560464684133882, 0.18560464684133882, 0.18560464684133882, 0.18373341563040435, 0.18373341563040435, 0.18373341563040435, 0.18582694888150741, 0.18582694888150741, 0.18582694888150741, 0.08412110067886913, 0.08412110067886913, 0.08412110067886913, 0.08269042795697534, 0.08269042795697534, 0.08269042795697534, 0.08446869143793834, 0.08446869143793834, 0.08446869143793834]}, "mutation_prompt": null}
{"id": "72671b06-2ddf-4cef-bd7b-cf5d0ea04f01", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.6\n        self.cognitive_coefficient = 1.4\n        self.social_coefficient = 1.6\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  # Reduced mutation rate to focus improvement\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 4  # Smaller neighborhood size for refined search\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)  # Adaptive diversity\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.5 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Hybrid Swarm Optimization with adaptive diversity preservation and local intensification to enhance exploitation.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6e4a6a46-eee5-4db9-bb2f-cd625aca141a", "metadata": {"aucs": [0.8099581598370749, 0.8099581598370749, 0.8099581598370749, 0.806851009710617, 0.806851009710617, 0.806851009710617, 0.8161671495506917, 0.8161671495506917, 0.8161671495506917, 0.611729995667675, 0.611729995667675, 0.611729995667675, 0.6281165056318319, 0.6281165056318319, 0.6281165056318319, 0.6410821789041854, 0.6410821789041854, 0.6410821789041854, 0.13886176817241846, 0.13886176817241846, 0.13886176817241846, 0.11707973208913514, 0.11707973208913514, 0.11707973208913514, 0.1189622816727457, 0.1189622816727457, 0.1189622816727457, 0.09397054267692961, 0.09397054267692961, 0.09397054267692961, 0.10910629296193852, 0.10910629296193852, 0.10910629296193852, 0.11068321275553428, 0.11068321275553428, 0.11068321275553428, 0.9918228520497498, 0.9918228520497498, 0.9918228520497498, 0.987924096732118, 0.987924096732118, 0.987924096732118, 0.9888759236698017, 0.9888759236698017, 0.9888759236698017, 0.5797929682757023, 0.5797929682757023, 0.5797929682757023, 0.6218355629664631, 0.6218355629664631, 0.6218355629664631, 0.6180565272380188, 0.6180565272380188, 0.6180565272380188, 0.7746056323624737, 0.7746056323624737, 0.7746056323624737, 0.8426559568506834, 0.8426559568506834, 0.8426559568506834, 0.7517467956990806, 0.7517467956990806, 0.7517467956990806, 0.498105081543057, 0.498105081543057, 0.498105081543057, 0.12474152815871442, 0.12474152815871442, 0.12474152815871442, 0.1258667131970873, 0.1258667131970873, 0.1258667131970873, 0.5357995452395234, 0.5357995452395234, 0.5357995452395234, 0.5844432425800379, 0.5844432425800379, 0.5844432425800379, 0.4342066188819834, 0.4342066188819834, 0.4342066188819834, 0.526542710485185, 0.526542710485185, 0.526542710485185, 0.4152710114923881, 0.4152710114923881, 0.4152710114923881, 0.492381084248518, 0.492381084248518, 0.492381084248518, 0.24918791431291543, 0.24918791431291543, 0.24918791431291543, 0.07685036433926706, 0.07685036433926706, 0.07685036433926706, 0.41537839919089203, 0.41537839919089203, 0.41537839919089203, 0.09340276344393572, 0.09340276344393572, 0.09340276344393572, 0.13061094096329073, 0.13061094096329073, 0.13061094096329073, 0.1048227645006593, 0.1048227645006593, 0.1048227645006593, 0.5644914818950202, 0.5644914818950202, 0.5644914818950202, 0.4804926983319092, 0.4804926983319092, 0.4804926983319092, 0.5617286892995312, 0.5617286892995312, 0.5617286892995312, 0.7744727444952078, 0.7744727444952078, 0.7744727444952078, 0.7855888583743065, 0.7855888583743065, 0.7855888583743065, 0.7767223554223381, 0.7767223554223381, 0.7767223554223381, 0.1333506852128883, 0.1333506852128883, 0.1333506852128883, 0.12403055128978158, 0.12403055128978158, 0.12403055128978158, 0.12450585764982003, 0.12450585764982003, 0.12450585764982003, 0.13961230907723132, 0.13961230907723132, 0.13961230907723132, 0.16672256611847747, 0.16672256611847747, 0.16672256611847747, 0.1434957094571786, 0.1434957094571786, 0.1434957094571786, 0.42523624893337497, 0.42523624893337497, 0.42523624893337497, 0.5177372175023065, 0.5177372175023065, 0.5177372175023065, 0.4145490214336547, 0.4145490214336547, 0.4145490214336547, 0.4809631874520204, 0.4809631874520204, 0.4809631874520204, 0.3395632192260605, 0.3395632192260605, 0.3395632192260605, 0.4057605165966306, 0.4057605165966306, 0.4057605165966306, 0.20659142163530142, 0.20659142163530142, 0.20659142163530142, 0.2095223337584421, 0.2095223337584421, 0.2095223337584421, 0.21263136056134668, 0.21263136056134668, 0.21263136056134668, 0.18133367599422967, 0.18133367599422967, 0.18133367599422967, 0.22162223074056586, 0.22162223074056586, 0.22162223074056586, 0.21559000744228551, 0.21559000744228551, 0.21559000744228551, 0.856235533626677, 0.856235533626677, 0.856235533626677, 0.6804475097927747, 0.6804475097927747, 0.6804475097927747, 0.6597599653925837, 0.6597599653925837, 0.6597599653925837, 0.16858057374577273, 0.16858057374577273, 0.16858057374577273, 0.6264613571773114, 0.6264613571773114, 0.6264613571773114, 0.1533922759579176, 0.1533922759579176, 0.1533922759579176, 0.17990893308663947, 0.17990893308663947, 0.17990893308663947, 0.1738809041570768, 0.1738809041570768, 0.1738809041570768, 0.20540251519428288, 0.20540251519428288, 0.20540251519428288, 0.09444305527796004, 0.09444305527796004, 0.09444305527796004, 0.09264402880604561, 0.09264402880604561, 0.09264402880604561, 0.08609711888866656, 0.08609711888866656, 0.08609711888866656]}, "mutation_prompt": null}
{"id": "9919d42e-47a6-4e06-b6a5-9e55ecc889ee", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.6\n        self.cognitive_coefficient = 1.4\n        self.social_coefficient = 1.6\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  # Reduced mutation rate to focus improvement\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 4  # Smaller neighborhood size for refined search\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)  # Adaptive diversity\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.5 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Hybrid Swarm Optimization with adaptive diversity preservation and local intensification to enhance exploitation.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6e4a6a46-eee5-4db9-bb2f-cd625aca141a", "metadata": {"aucs": [0.8099581598370749, 0.8099581598370749, 0.8099581598370749, 0.806851009710617, 0.806851009710617, 0.806851009710617, 0.8161671495506917, 0.8161671495506917, 0.8161671495506917, 0.611729995667675, 0.611729995667675, 0.611729995667675, 0.6281165056318319, 0.6281165056318319, 0.6281165056318319, 0.6410821789041854, 0.6410821789041854, 0.6410821789041854, 0.13886176817241846, 0.13886176817241846, 0.13886176817241846, 0.11707973208913514, 0.11707973208913514, 0.11707973208913514, 0.1189622816727457, 0.1189622816727457, 0.1189622816727457, 0.09397054267692961, 0.09397054267692961, 0.09397054267692961, 0.10910629296193852, 0.10910629296193852, 0.10910629296193852, 0.11068321275553428, 0.11068321275553428, 0.11068321275553428, 0.9918228520497498, 0.9918228520497498, 0.9918228520497498, 0.987924096732118, 0.987924096732118, 0.987924096732118, 0.9888759236698017, 0.9888759236698017, 0.9888759236698017, 0.5797929682757023, 0.5797929682757023, 0.5797929682757023, 0.6218355629664631, 0.6218355629664631, 0.6218355629664631, 0.6180565272380188, 0.6180565272380188, 0.6180565272380188, 0.7746056323624737, 0.7746056323624737, 0.7746056323624737, 0.8426559568506834, 0.8426559568506834, 0.8426559568506834, 0.7517467956990806, 0.7517467956990806, 0.7517467956990806, 0.498105081543057, 0.498105081543057, 0.498105081543057, 0.12474152815871442, 0.12474152815871442, 0.12474152815871442, 0.1258667131970873, 0.1258667131970873, 0.1258667131970873, 0.5357995452395234, 0.5357995452395234, 0.5357995452395234, 0.5844432425800379, 0.5844432425800379, 0.5844432425800379, 0.4342066188819834, 0.4342066188819834, 0.4342066188819834, 0.526542710485185, 0.526542710485185, 0.526542710485185, 0.4152710114923881, 0.4152710114923881, 0.4152710114923881, 0.492381084248518, 0.492381084248518, 0.492381084248518, 0.24918791431291543, 0.24918791431291543, 0.24918791431291543, 0.07685036433926706, 0.07685036433926706, 0.07685036433926706, 0.41537839919089203, 0.41537839919089203, 0.41537839919089203, 0.09340276344393572, 0.09340276344393572, 0.09340276344393572, 0.13061094096329073, 0.13061094096329073, 0.13061094096329073, 0.1048227645006593, 0.1048227645006593, 0.1048227645006593, 0.5644914818950202, 0.5644914818950202, 0.5644914818950202, 0.4804926983319092, 0.4804926983319092, 0.4804926983319092, 0.5617286892995312, 0.5617286892995312, 0.5617286892995312, 0.7744727444952078, 0.7744727444952078, 0.7744727444952078, 0.7855888583743065, 0.7855888583743065, 0.7855888583743065, 0.7767223554223381, 0.7767223554223381, 0.7767223554223381, 0.1333506852128883, 0.1333506852128883, 0.1333506852128883, 0.12403055128978158, 0.12403055128978158, 0.12403055128978158, 0.12450585764982003, 0.12450585764982003, 0.12450585764982003, 0.13961230907723132, 0.13961230907723132, 0.13961230907723132, 0.16672256611847747, 0.16672256611847747, 0.16672256611847747, 0.1434957094571786, 0.1434957094571786, 0.1434957094571786, 0.42523624893337497, 0.42523624893337497, 0.42523624893337497, 0.5177372175023065, 0.5177372175023065, 0.5177372175023065, 0.4145490214336547, 0.4145490214336547, 0.4145490214336547, 0.4809631874520204, 0.4809631874520204, 0.4809631874520204, 0.3395632192260605, 0.3395632192260605, 0.3395632192260605, 0.4057605165966306, 0.4057605165966306, 0.4057605165966306, 0.20659142163530142, 0.20659142163530142, 0.20659142163530142, 0.2095223337584421, 0.2095223337584421, 0.2095223337584421, 0.21263136056134668, 0.21263136056134668, 0.21263136056134668, 0.18133367599422967, 0.18133367599422967, 0.18133367599422967, 0.22162223074056586, 0.22162223074056586, 0.22162223074056586, 0.21559000744228551, 0.21559000744228551, 0.21559000744228551, 0.856235533626677, 0.856235533626677, 0.856235533626677, 0.6804475097927747, 0.6804475097927747, 0.6804475097927747, 0.6597599653925837, 0.6597599653925837, 0.6597599653925837, 0.16858057374577273, 0.16858057374577273, 0.16858057374577273, 0.6264613571773114, 0.6264613571773114, 0.6264613571773114, 0.1533922759579176, 0.1533922759579176, 0.1533922759579176, 0.17990893308663947, 0.17990893308663947, 0.17990893308663947, 0.1738809041570768, 0.1738809041570768, 0.1738809041570768, 0.20540251519428288, 0.20540251519428288, 0.20540251519428288, 0.09444305527796004, 0.09444305527796004, 0.09444305527796004, 0.09264402880604561, 0.09264402880604561, 0.09264402880604561, 0.08609711888866656, 0.08609711888866656, 0.08609711888866656]}, "mutation_prompt": null}
{"id": "e99bcfe0-6c63-4db1-8a0e-ae14f48c6872", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.6\n        self.cognitive_coefficient = 1.4\n        self.social_coefficient = 1.6\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  # Reduced mutation rate to focus improvement\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 4  # Smaller neighborhood size for refined search\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)  # Adaptive diversity\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.5 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Hybrid Swarm Optimization with adaptive diversity preservation and local intensification to enhance exploitation.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6e4a6a46-eee5-4db9-bb2f-cd625aca141a", "metadata": {"aucs": [0.8099581598370749, 0.8099581598370749, 0.8099581598370749, 0.806851009710617, 0.806851009710617, 0.806851009710617, 0.8161671495506917, 0.8161671495506917, 0.8161671495506917, 0.611729995667675, 0.611729995667675, 0.611729995667675, 0.6281165056318319, 0.6281165056318319, 0.6281165056318319, 0.6410821789041854, 0.6410821789041854, 0.6410821789041854, 0.13886176817241846, 0.13886176817241846, 0.13886176817241846, 0.11707973208913514, 0.11707973208913514, 0.11707973208913514, 0.1189622816727457, 0.1189622816727457, 0.1189622816727457, 0.09397054267692961, 0.09397054267692961, 0.09397054267692961, 0.10910629296193852, 0.10910629296193852, 0.10910629296193852, 0.11068321275553428, 0.11068321275553428, 0.11068321275553428, 0.9918228520497498, 0.9918228520497498, 0.9918228520497498, 0.987924096732118, 0.987924096732118, 0.987924096732118, 0.9888759236698017, 0.9888759236698017, 0.9888759236698017, 0.5797929682757023, 0.5797929682757023, 0.5797929682757023, 0.6218355629664631, 0.6218355629664631, 0.6218355629664631, 0.6180565272380188, 0.6180565272380188, 0.6180565272380188, 0.7746056323624737, 0.7746056323624737, 0.7746056323624737, 0.8426559568506834, 0.8426559568506834, 0.8426559568506834, 0.7517467956990806, 0.7517467956990806, 0.7517467956990806, 0.498105081543057, 0.498105081543057, 0.498105081543057, 0.12474152815871442, 0.12474152815871442, 0.12474152815871442, 0.1258667131970873, 0.1258667131970873, 0.1258667131970873, 0.5357995452395234, 0.5357995452395234, 0.5357995452395234, 0.5844432425800379, 0.5844432425800379, 0.5844432425800379, 0.4342066188819834, 0.4342066188819834, 0.4342066188819834, 0.526542710485185, 0.526542710485185, 0.526542710485185, 0.4152710114923881, 0.4152710114923881, 0.4152710114923881, 0.492381084248518, 0.492381084248518, 0.492381084248518, 0.24918791431291543, 0.24918791431291543, 0.24918791431291543, 0.07685036433926706, 0.07685036433926706, 0.07685036433926706, 0.41537839919089203, 0.41537839919089203, 0.41537839919089203, 0.09340276344393572, 0.09340276344393572, 0.09340276344393572, 0.13061094096329073, 0.13061094096329073, 0.13061094096329073, 0.1048227645006593, 0.1048227645006593, 0.1048227645006593, 0.5644914818950202, 0.5644914818950202, 0.5644914818950202, 0.4804926983319092, 0.4804926983319092, 0.4804926983319092, 0.5617286892995312, 0.5617286892995312, 0.5617286892995312, 0.7744727444952078, 0.7744727444952078, 0.7744727444952078, 0.7855888583743065, 0.7855888583743065, 0.7855888583743065, 0.7767223554223381, 0.7767223554223381, 0.7767223554223381, 0.1333506852128883, 0.1333506852128883, 0.1333506852128883, 0.12403055128978158, 0.12403055128978158, 0.12403055128978158, 0.12450585764982003, 0.12450585764982003, 0.12450585764982003, 0.13961230907723132, 0.13961230907723132, 0.13961230907723132, 0.16672256611847747, 0.16672256611847747, 0.16672256611847747, 0.1434957094571786, 0.1434957094571786, 0.1434957094571786, 0.42523624893337497, 0.42523624893337497, 0.42523624893337497, 0.5177372175023065, 0.5177372175023065, 0.5177372175023065, 0.4145490214336547, 0.4145490214336547, 0.4145490214336547, 0.4809631874520204, 0.4809631874520204, 0.4809631874520204, 0.3395632192260605, 0.3395632192260605, 0.3395632192260605, 0.4057605165966306, 0.4057605165966306, 0.4057605165966306, 0.20659142163530142, 0.20659142163530142, 0.20659142163530142, 0.2095223337584421, 0.2095223337584421, 0.2095223337584421, 0.21263136056134668, 0.21263136056134668, 0.21263136056134668, 0.18133367599422967, 0.18133367599422967, 0.18133367599422967, 0.22162223074056586, 0.22162223074056586, 0.22162223074056586, 0.21559000744228551, 0.21559000744228551, 0.21559000744228551, 0.856235533626677, 0.856235533626677, 0.856235533626677, 0.6804475097927747, 0.6804475097927747, 0.6804475097927747, 0.6597599653925837, 0.6597599653925837, 0.6597599653925837, 0.16858057374577273, 0.16858057374577273, 0.16858057374577273, 0.6264613571773114, 0.6264613571773114, 0.6264613571773114, 0.1533922759579176, 0.1533922759579176, 0.1533922759579176, 0.17990893308663947, 0.17990893308663947, 0.17990893308663947, 0.1738809041570768, 0.1738809041570768, 0.1738809041570768, 0.20540251519428288, 0.20540251519428288, 0.20540251519428288, 0.09444305527796004, 0.09444305527796004, 0.09444305527796004, 0.09264402880604561, 0.09264402880604561, 0.09264402880604561, 0.08609711888866656, 0.08609711888866656, 0.08609711888866656]}, "mutation_prompt": null}
{"id": "176e5fbe-0bec-4205-85c6-ad5f2f811c87", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.6\n        self.cognitive_coefficient = 1.4\n        self.social_coefficient = 1.6\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  # Reduced mutation rate to focus improvement\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 4  # Smaller neighborhood size for refined search\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)  # Adaptive diversity\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.5 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Hybrid Swarm Optimization with adaptive diversity preservation and local intensification to enhance exploitation.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6e4a6a46-eee5-4db9-bb2f-cd625aca141a", "metadata": {"aucs": [0.8099581598370749, 0.8099581598370749, 0.8099581598370749, 0.806851009710617, 0.806851009710617, 0.806851009710617, 0.8161671495506917, 0.8161671495506917, 0.8161671495506917, 0.611729995667675, 0.611729995667675, 0.611729995667675, 0.6281165056318319, 0.6281165056318319, 0.6281165056318319, 0.6410821789041854, 0.6410821789041854, 0.6410821789041854, 0.13886176817241846, 0.13886176817241846, 0.13886176817241846, 0.11707973208913514, 0.11707973208913514, 0.11707973208913514, 0.1189622816727457, 0.1189622816727457, 0.1189622816727457, 0.09397054267692961, 0.09397054267692961, 0.09397054267692961, 0.10910629296193852, 0.10910629296193852, 0.10910629296193852, 0.11068321275553428, 0.11068321275553428, 0.11068321275553428, 0.9918228520497498, 0.9918228520497498, 0.9918228520497498, 0.987924096732118, 0.987924096732118, 0.987924096732118, 0.9888759236698017, 0.9888759236698017, 0.9888759236698017, 0.5797929682757023, 0.5797929682757023, 0.5797929682757023, 0.6218355629664631, 0.6218355629664631, 0.6218355629664631, 0.6180565272380188, 0.6180565272380188, 0.6180565272380188, 0.7746056323624737, 0.7746056323624737, 0.7746056323624737, 0.8426559568506834, 0.8426559568506834, 0.8426559568506834, 0.7517467956990806, 0.7517467956990806, 0.7517467956990806, 0.498105081543057, 0.498105081543057, 0.498105081543057, 0.12474152815871442, 0.12474152815871442, 0.12474152815871442, 0.1258667131970873, 0.1258667131970873, 0.1258667131970873, 0.5357995452395234, 0.5357995452395234, 0.5357995452395234, 0.5844432425800379, 0.5844432425800379, 0.5844432425800379, 0.4342066188819834, 0.4342066188819834, 0.4342066188819834, 0.526542710485185, 0.526542710485185, 0.526542710485185, 0.4152710114923881, 0.4152710114923881, 0.4152710114923881, 0.492381084248518, 0.492381084248518, 0.492381084248518, 0.24918791431291543, 0.24918791431291543, 0.24918791431291543, 0.07685036433926706, 0.07685036433926706, 0.07685036433926706, 0.41537839919089203, 0.41537839919089203, 0.41537839919089203, 0.09340276344393572, 0.09340276344393572, 0.09340276344393572, 0.13061094096329073, 0.13061094096329073, 0.13061094096329073, 0.1048227645006593, 0.1048227645006593, 0.1048227645006593, 0.5644914818950202, 0.5644914818950202, 0.5644914818950202, 0.4804926983319092, 0.4804926983319092, 0.4804926983319092, 0.5617286892995312, 0.5617286892995312, 0.5617286892995312, 0.7744727444952078, 0.7744727444952078, 0.7744727444952078, 0.7855888583743065, 0.7855888583743065, 0.7855888583743065, 0.7767223554223381, 0.7767223554223381, 0.7767223554223381, 0.1333506852128883, 0.1333506852128883, 0.1333506852128883, 0.12403055128978158, 0.12403055128978158, 0.12403055128978158, 0.12450585764982003, 0.12450585764982003, 0.12450585764982003, 0.13961230907723132, 0.13961230907723132, 0.13961230907723132, 0.16672256611847747, 0.16672256611847747, 0.16672256611847747, 0.1434957094571786, 0.1434957094571786, 0.1434957094571786, 0.42523624893337497, 0.42523624893337497, 0.42523624893337497, 0.5177372175023065, 0.5177372175023065, 0.5177372175023065, 0.4145490214336547, 0.4145490214336547, 0.4145490214336547, 0.4809631874520204, 0.4809631874520204, 0.4809631874520204, 0.3395632192260605, 0.3395632192260605, 0.3395632192260605, 0.4057605165966306, 0.4057605165966306, 0.4057605165966306, 0.20659142163530142, 0.20659142163530142, 0.20659142163530142, 0.2095223337584421, 0.2095223337584421, 0.2095223337584421, 0.21263136056134668, 0.21263136056134668, 0.21263136056134668, 0.18133367599422967, 0.18133367599422967, 0.18133367599422967, 0.22162223074056586, 0.22162223074056586, 0.22162223074056586, 0.21559000744228551, 0.21559000744228551, 0.21559000744228551, 0.856235533626677, 0.856235533626677, 0.856235533626677, 0.6804475097927747, 0.6804475097927747, 0.6804475097927747, 0.6597599653925837, 0.6597599653925837, 0.6597599653925837, 0.16858057374577273, 0.16858057374577273, 0.16858057374577273, 0.6264613571773114, 0.6264613571773114, 0.6264613571773114, 0.1533922759579176, 0.1533922759579176, 0.1533922759579176, 0.17990893308663947, 0.17990893308663947, 0.17990893308663947, 0.1738809041570768, 0.1738809041570768, 0.1738809041570768, 0.20540251519428288, 0.20540251519428288, 0.20540251519428288, 0.09444305527796004, 0.09444305527796004, 0.09444305527796004, 0.09264402880604561, 0.09264402880604561, 0.09264402880604561, 0.08609711888866656, 0.08609711888866656, 0.08609711888866656]}, "mutation_prompt": null}
{"id": "3e07b03e-85f1-4842-af5a-16b117914bd0", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.6\n        self.cognitive_coefficient = 1.4\n        self.social_coefficient = 1.6\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  # Reduced mutation rate to focus improvement\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 4  # Smaller neighborhood size for refined search\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)  # Adaptive diversity\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.5 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Hybrid Swarm Optimization with adaptive diversity preservation and local intensification to enhance exploitation.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6e4a6a46-eee5-4db9-bb2f-cd625aca141a", "metadata": {"aucs": [0.8099581598370749, 0.8099581598370749, 0.8099581598370749, 0.806851009710617, 0.806851009710617, 0.806851009710617, 0.8161671495506917, 0.8161671495506917, 0.8161671495506917, 0.611729995667675, 0.611729995667675, 0.611729995667675, 0.6281165056318319, 0.6281165056318319, 0.6281165056318319, 0.6410821789041854, 0.6410821789041854, 0.6410821789041854, 0.13886176817241846, 0.13886176817241846, 0.13886176817241846, 0.11707973208913514, 0.11707973208913514, 0.11707973208913514, 0.1189622816727457, 0.1189622816727457, 0.1189622816727457, 0.09397054267692961, 0.09397054267692961, 0.09397054267692961, 0.10910629296193852, 0.10910629296193852, 0.10910629296193852, 0.11068321275553428, 0.11068321275553428, 0.11068321275553428, 0.9918228520497498, 0.9918228520497498, 0.9918228520497498, 0.987924096732118, 0.987924096732118, 0.987924096732118, 0.9888759236698017, 0.9888759236698017, 0.9888759236698017, 0.5797929682757023, 0.5797929682757023, 0.5797929682757023, 0.6218355629664631, 0.6218355629664631, 0.6218355629664631, 0.6180565272380188, 0.6180565272380188, 0.6180565272380188, 0.7746056323624737, 0.7746056323624737, 0.7746056323624737, 0.8426559568506834, 0.8426559568506834, 0.8426559568506834, 0.7517467956990806, 0.7517467956990806, 0.7517467956990806, 0.498105081543057, 0.498105081543057, 0.498105081543057, 0.12474152815871442, 0.12474152815871442, 0.12474152815871442, 0.1258667131970873, 0.1258667131970873, 0.1258667131970873, 0.5357995452395234, 0.5357995452395234, 0.5357995452395234, 0.5844432425800379, 0.5844432425800379, 0.5844432425800379, 0.4342066188819834, 0.4342066188819834, 0.4342066188819834, 0.526542710485185, 0.526542710485185, 0.526542710485185, 0.4152710114923881, 0.4152710114923881, 0.4152710114923881, 0.492381084248518, 0.492381084248518, 0.492381084248518, 0.24918791431291543, 0.24918791431291543, 0.24918791431291543, 0.07685036433926706, 0.07685036433926706, 0.07685036433926706, 0.41537839919089203, 0.41537839919089203, 0.41537839919089203, 0.09340276344393572, 0.09340276344393572, 0.09340276344393572, 0.13061094096329073, 0.13061094096329073, 0.13061094096329073, 0.1048227645006593, 0.1048227645006593, 0.1048227645006593, 0.5644914818950202, 0.5644914818950202, 0.5644914818950202, 0.4804926983319092, 0.4804926983319092, 0.4804926983319092, 0.5617286892995312, 0.5617286892995312, 0.5617286892995312, 0.7744727444952078, 0.7744727444952078, 0.7744727444952078, 0.7855888583743065, 0.7855888583743065, 0.7855888583743065, 0.7767223554223381, 0.7767223554223381, 0.7767223554223381, 0.1333506852128883, 0.1333506852128883, 0.1333506852128883, 0.12403055128978158, 0.12403055128978158, 0.12403055128978158, 0.12450585764982003, 0.12450585764982003, 0.12450585764982003, 0.13961230907723132, 0.13961230907723132, 0.13961230907723132, 0.16672256611847747, 0.16672256611847747, 0.16672256611847747, 0.1434957094571786, 0.1434957094571786, 0.1434957094571786, 0.42523624893337497, 0.42523624893337497, 0.42523624893337497, 0.5177372175023065, 0.5177372175023065, 0.5177372175023065, 0.4145490214336547, 0.4145490214336547, 0.4145490214336547, 0.4809631874520204, 0.4809631874520204, 0.4809631874520204, 0.3395632192260605, 0.3395632192260605, 0.3395632192260605, 0.4057605165966306, 0.4057605165966306, 0.4057605165966306, 0.20659142163530142, 0.20659142163530142, 0.20659142163530142, 0.2095223337584421, 0.2095223337584421, 0.2095223337584421, 0.21263136056134668, 0.21263136056134668, 0.21263136056134668, 0.18133367599422967, 0.18133367599422967, 0.18133367599422967, 0.22162223074056586, 0.22162223074056586, 0.22162223074056586, 0.21559000744228551, 0.21559000744228551, 0.21559000744228551, 0.856235533626677, 0.856235533626677, 0.856235533626677, 0.6804475097927747, 0.6804475097927747, 0.6804475097927747, 0.6597599653925837, 0.6597599653925837, 0.6597599653925837, 0.16858057374577273, 0.16858057374577273, 0.16858057374577273, 0.6264613571773114, 0.6264613571773114, 0.6264613571773114, 0.1533922759579176, 0.1533922759579176, 0.1533922759579176, 0.17990893308663947, 0.17990893308663947, 0.17990893308663947, 0.1738809041570768, 0.1738809041570768, 0.1738809041570768, 0.20540251519428288, 0.20540251519428288, 0.20540251519428288, 0.09444305527796004, 0.09444305527796004, 0.09444305527796004, 0.09264402880604561, 0.09264402880604561, 0.09264402880604561, 0.08609711888866656, 0.08609711888866656, 0.08609711888866656]}, "mutation_prompt": null}
{"id": "d5254237-1b22-4812-b52c-d383c3fe965c", "solution": "import numpy as np\n\nclass EnhancedHybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Increased initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased\n        self.social_coefficient = 1.7  # Slightly increased\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n        elite_individuals = 2  # Preserve top individuals\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Slightly increased neighborhood size\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            sorted_indices = np.argsort(personal_best_value)\n            elite_positions = personal_best_position[sorted_indices[:elite_individuals]]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                if i < elite_individuals:  # Preserve elite individuals\n                    position[i] = elite_positions[i]\n                    continue\n\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.5 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)  # More adaptive inertia\n\n        return global_best_value", "name": "EnhancedHybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with adaptive inertia and elite preservation for improved convergence.", "configspace": "", "generation": 68, "fitness": 0.34078933358964475, "feedback": "The algorithm EnhancedHybridSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "6e4a6a46-eee5-4db9-bb2f-cd625aca141a", "metadata": {"aucs": [0.7537479560645807, 0.7537479560645807, 0.7537479560645807, 0.7928586720074365, 0.7928586720074365, 0.7928586720074365, 0.7812120650890871, 0.7812120650890871, 0.7812120650890871, 0.5987698617394566, 0.5987698617394566, 0.5987698617394566, 0.4768657545566092, 0.4768657545566092, 0.4768657545566092, 0.6088713995934054, 0.6088713995934054, 0.6088713995934054, 0.1303533378747228, 0.1303533378747228, 0.1303533378747228, 0.1113630427321054, 0.1113630427321054, 0.1113630427321054, 0.12531635588930912, 0.12531635588930912, 0.12531635588930912, 0.08572486586232475, 0.08572486586232475, 0.08572486586232475, 0.08883575002775856, 0.08883575002775856, 0.08883575002775856, 0.09182394362090107, 0.09182394362090107, 0.09182394362090107, 0.9923254070933613, 0.9923254070933613, 0.9923254070933613, 0.9923469020489383, 0.9923469020489383, 0.9923469020489383, 0.9853756288765781, 0.9853756288765781, 0.9853756288765781, 0.4573099558073255, 0.4573099558073255, 0.4573099558073255, 0.1551734300966493, 0.1551734300966493, 0.1551734300966493, 0.44132490094694565, 0.44132490094694565, 0.44132490094694565, 0.21274760044167906, 0.21274760044167906, 0.21274760044167906, 0.664338176716659, 0.664338176716659, 0.664338176716659, 0.7137877479834233, 0.7137877479834233, 0.7137877479834233, 0.18308664003567332, 0.18308664003567332, 0.18308664003567332, 0.31497375075198675, 0.31497375075198675, 0.31497375075198675, 0.2779099571295601, 0.2779099571295601, 0.2779099571295601, 0.23088361564076132, 0.23088361564076132, 0.23088361564076132, 0.3757151908543396, 0.3757151908543396, 0.3757151908543396, 0.13000264722203958, 0.13000264722203958, 0.13000264722203958, 0.3664103912992468, 0.3664103912992468, 0.3664103912992468, 0.13641779660321607, 0.13641779660321607, 0.13641779660321607, 0.2128711904079812, 0.2128711904079812, 0.2128711904079812, 0.3670156253207486, 0.3670156253207486, 0.3670156253207486, 0.1627947894750943, 0.1627947894750943, 0.1627947894750943, 0.06102508190366718, 0.06102508190366718, 0.06102508190366718, 0.11980049188243469, 0.11980049188243469, 0.11980049188243469, 0.23156056479959009, 0.23156056479959009, 0.23156056479959009, 0.07617891368878116, 0.07617891368878116, 0.07617891368878116, 0.3779332733503058, 0.3779332733503058, 0.3779332733503058, 0.5092487423003441, 0.5092487423003441, 0.5092487423003441, 0.054885190893103064, 0.054885190893103064, 0.054885190893103064, 0.7025295428796808, 0.7025295428796808, 0.7025295428796808, 0.7076391847489374, 0.7076391847489374, 0.7076391847489374, 0.6916557444923548, 0.6916557444923548, 0.6916557444923548, 0.13555159910480852, 0.13555159910480852, 0.13555159910480852, 0.11946051281571346, 0.11946051281571346, 0.11946051281571346, 0.12300180146619699, 0.12300180146619699, 0.12300180146619699, 0.1519205473436357, 0.1519205473436357, 0.1519205473436357, 0.13598767972160708, 0.13598767972160708, 0.13598767972160708, 0.14153680622113607, 0.14153680622113607, 0.14153680622113607, 0.3479484098601101, 0.3479484098601101, 0.3479484098601101, 0.3695005516590234, 0.3695005516590234, 0.3695005516590234, 0.3135753844227289, 0.3135753844227289, 0.3135753844227289, 0.2435020142833898, 0.2435020142833898, 0.2435020142833898, 0.31067505284726005, 0.31067505284726005, 0.31067505284726005, 0.2856152966665334, 0.2856152966665334, 0.2856152966665334, 0.21120536767276565, 0.21120536767276565, 0.21120536767276565, 0.1933984932200451, 0.1933984932200451, 0.1933984932200451, 0.188456042105837, 0.188456042105837, 0.188456042105837, 0.20019182940355718, 0.20019182940355718, 0.20019182940355718, 0.19608208310847308, 0.19608208310847308, 0.19608208310847308, 0.23011679716616862, 0.23011679716616862, 0.23011679716616862, 0.8148338217897444, 0.8148338217897444, 0.8148338217897444, 0.16181855915926047, 0.16181855915926047, 0.16181855915926047, 0.170031873186146, 0.170031873186146, 0.170031873186146, 0.7667868725096033, 0.7667868725096033, 0.7667868725096033, 0.650519609227632, 0.650519609227632, 0.650519609227632, 0.7422990802587971, 0.7422990802587971, 0.7422990802587971, 0.18644147522865928, 0.18644147522865928, 0.18644147522865928, 0.17017181520108493, 0.17017181520108493, 0.17017181520108493, 0.18493620442335335, 0.18493620442335335, 0.18493620442335335, 0.08021608231165356, 0.08021608231165356, 0.08021608231165356, 0.07809293657752314, 0.07809293657752314, 0.07809293657752314, 0.0819463387428736, 0.0819463387428736, 0.0819463387428736]}, "mutation_prompt": null}
{"id": "06efb7dc-ca1e-449e-8f5e-7fe2baa0e24c", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.6\n        self.cognitive_coefficient = 1.4\n        self.social_coefficient = 1.6\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  # Reduced mutation rate to focus improvement\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 4  # Smaller neighborhood size for refined search\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)  # Adaptive diversity\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.5 + 0.3 * ((np.cos(np.pi * evaluations / self.budget)) ** 2)\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Hybrid Swarm Optimization with adaptive diversity preservation and local intensification to enhance exploitation.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6e4a6a46-eee5-4db9-bb2f-cd625aca141a", "metadata": {"aucs": [0.8099581598370749, 0.8099581598370749, 0.8099581598370749, 0.806851009710617, 0.806851009710617, 0.806851009710617, 0.8161671495506917, 0.8161671495506917, 0.8161671495506917, 0.611729995667675, 0.611729995667675, 0.611729995667675, 0.6281165056318319, 0.6281165056318319, 0.6281165056318319, 0.6410821789041854, 0.6410821789041854, 0.6410821789041854, 0.13886176817241846, 0.13886176817241846, 0.13886176817241846, 0.11707973208913514, 0.11707973208913514, 0.11707973208913514, 0.1189622816727457, 0.1189622816727457, 0.1189622816727457, 0.09397054267692961, 0.09397054267692961, 0.09397054267692961, 0.10910629296193852, 0.10910629296193852, 0.10910629296193852, 0.11068321275553428, 0.11068321275553428, 0.11068321275553428, 0.9918228520497498, 0.9918228520497498, 0.9918228520497498, 0.987924096732118, 0.987924096732118, 0.987924096732118, 0.9888759236698017, 0.9888759236698017, 0.9888759236698017, 0.5797929682757023, 0.5797929682757023, 0.5797929682757023, 0.6218355629664631, 0.6218355629664631, 0.6218355629664631, 0.6180565272380188, 0.6180565272380188, 0.6180565272380188, 0.7746056323624737, 0.7746056323624737, 0.7746056323624737, 0.8426559568506834, 0.8426559568506834, 0.8426559568506834, 0.7517467956990806, 0.7517467956990806, 0.7517467956990806, 0.498105081543057, 0.498105081543057, 0.498105081543057, 0.12474152815871442, 0.12474152815871442, 0.12474152815871442, 0.1258667131970873, 0.1258667131970873, 0.1258667131970873, 0.5357995452395234, 0.5357995452395234, 0.5357995452395234, 0.5844432425800379, 0.5844432425800379, 0.5844432425800379, 0.4342066188819834, 0.4342066188819834, 0.4342066188819834, 0.526542710485185, 0.526542710485185, 0.526542710485185, 0.4152710114923881, 0.4152710114923881, 0.4152710114923881, 0.492381084248518, 0.492381084248518, 0.492381084248518, 0.24918791431291543, 0.24918791431291543, 0.24918791431291543, 0.07685036433926706, 0.07685036433926706, 0.07685036433926706, 0.41537839919089203, 0.41537839919089203, 0.41537839919089203, 0.09340276344393572, 0.09340276344393572, 0.09340276344393572, 0.13061094096329073, 0.13061094096329073, 0.13061094096329073, 0.1048227645006593, 0.1048227645006593, 0.1048227645006593, 0.5644914818950202, 0.5644914818950202, 0.5644914818950202, 0.4804926983319092, 0.4804926983319092, 0.4804926983319092, 0.5617286892995312, 0.5617286892995312, 0.5617286892995312, 0.7744727444952078, 0.7744727444952078, 0.7744727444952078, 0.7855888583743065, 0.7855888583743065, 0.7855888583743065, 0.7767223554223381, 0.7767223554223381, 0.7767223554223381, 0.1333506852128883, 0.1333506852128883, 0.1333506852128883, 0.12403055128978158, 0.12403055128978158, 0.12403055128978158, 0.12450585764982003, 0.12450585764982003, 0.12450585764982003, 0.13961230907723132, 0.13961230907723132, 0.13961230907723132, 0.16672256611847747, 0.16672256611847747, 0.16672256611847747, 0.1434957094571786, 0.1434957094571786, 0.1434957094571786, 0.42523624893337497, 0.42523624893337497, 0.42523624893337497, 0.5177372175023065, 0.5177372175023065, 0.5177372175023065, 0.4145490214336547, 0.4145490214336547, 0.4145490214336547, 0.4809631874520204, 0.4809631874520204, 0.4809631874520204, 0.3395632192260605, 0.3395632192260605, 0.3395632192260605, 0.4057605165966306, 0.4057605165966306, 0.4057605165966306, 0.20659142163530142, 0.20659142163530142, 0.20659142163530142, 0.2095223337584421, 0.2095223337584421, 0.2095223337584421, 0.21263136056134668, 0.21263136056134668, 0.21263136056134668, 0.18133367599422967, 0.18133367599422967, 0.18133367599422967, 0.22162223074056586, 0.22162223074056586, 0.22162223074056586, 0.21559000744228551, 0.21559000744228551, 0.21559000744228551, 0.856235533626677, 0.856235533626677, 0.856235533626677, 0.6804475097927747, 0.6804475097927747, 0.6804475097927747, 0.6597599653925837, 0.6597599653925837, 0.6597599653925837, 0.16858057374577273, 0.16858057374577273, 0.16858057374577273, 0.6264613571773114, 0.6264613571773114, 0.6264613571773114, 0.1533922759579176, 0.1533922759579176, 0.1533922759579176, 0.17990893308663947, 0.17990893308663947, 0.17990893308663947, 0.1738809041570768, 0.1738809041570768, 0.1738809041570768, 0.20540251519428288, 0.20540251519428288, 0.20540251519428288, 0.09444305527796004, 0.09444305527796004, 0.09444305527796004, 0.09264402880604561, 0.09264402880604561, 0.09264402880604561, 0.08609711888866656, 0.08609711888866656, 0.08609711888866656]}, "mutation_prompt": null}
{"id": "887fda6d-23ae-470a-917f-9f566c106357", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 70, "fitness": 0.42478828473747177, "feedback": "The algorithm HybridSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.28.", "error": "", "parent_id": "6e4a6a46-eee5-4db9-bb2f-cd625aca141a", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "c38e28bd-a3b9-4a80-820d-193988bcd9f7", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "21762e28-7fdb-4266-8d3a-a97f56feb0eb", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "75271c08-3f2e-45b9-a7b9-83b92bdd4af7", "solution": "import numpy as np\n\nclass QuantumHybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7\n        self.cognitive_coefficient = 1.5\n        self.social_coefficient = 1.7\n        self.velocity_scale = 0.1\n        self.quantum_factor = 0.05  # New quantum factor for diversity boost\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               self.quantum_factor * (np.random.uniform(self.lower_bound, self.upper_bound, self.dim) - position[i])\n                               + np.std(position, axis=0).mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)\n\n        return global_best_value", "name": "QuantumHybridSwarmOptimization", "description": "Adaptive Quantum-inspired Hybrid Swarm Optimization using quantum superposition for enhanced diversity and convergence.", "configspace": "", "generation": 73, "fitness": 0.15572227364346444, "feedback": "The algorithm QuantumHybridSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.2368174610313697, 0.2368174610313697, 0.2368174610313697, 0.3627225058989355, 0.3627225058989355, 0.3627225058989355, 0.289745498420499, 0.289745498420499, 0.289745498420499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05190765136759201, 0.05190765136759201, 0.05190765136759201, 0.06659703761280011, 0.06659703761280011, 0.06659703761280011, 0.05291374157731932, 0.05291374157731932, 0.05291374157731932, 0.047246745927817746, 0.047246745927817746, 0.047246745927817746, 0.06920474086402006, 0.06920474086402006, 0.06920474086402006, 0.046707600907750946, 0.046707600907750946, 0.046707600907750946, 0.9942751275008194, 0.9942751275008194, 0.9942751275008194, 0.9938229840910531, 0.9938229840910531, 0.9938229840910531, 0.9939117505594413, 0.9939117505594413, 0.9939117505594413, 0.16881579436015048, 0.16881579436015048, 0.16881579436015048, 0.12166145810552575, 0.12166145810552575, 0.12166145810552575, 0.17676157532631664, 0.17676157532631664, 0.17676157532631664, 0.1596090021883385, 0.1596090021883385, 0.1596090021883385, 0.16014474919270028, 0.16014474919270028, 0.16014474919270028, 0.1946135485211813, 0.1946135485211813, 0.1946135485211813, 0.07001564825056616, 0.07001564825056616, 0.07001564825056616, 0.07371073102472259, 0.07371073102472259, 0.07371073102472259, 0.03745047044115457, 0.03745047044115457, 0.03745047044115457, 0.0824708785272289, 0.0824708785272289, 0.0824708785272289, 0.05351572923791226, 0.05351572923791226, 0.05351572923791226, 0.018964981354153365, 0.018964981354153365, 0.018964981354153365, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04270209829548166, 0.04270209829548166, 0.04270209829548166, 0.07736765358623321, 0.07736765358623321, 0.07736765358623321, 0.05739389993986932, 0.05739389993986932, 0.05739389993986932, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03792272676617048, 0.03792272676617048, 0.03792272676617048, 0.03241124165924558, 0.03241124165924558, 0.03241124165924558, 0.02819022965585516, 0.02819022965585516, 0.02819022965585516, 0.2494496085685931, 0.2494496085685931, 0.2494496085685931, 0.2973745730741666, 0.2973745730741666, 0.2973745730741666, 0.22630421562122494, 0.22630421562122494, 0.22630421562122494, 0.08620170790505766, 0.08620170790505766, 0.08620170790505766, 0.0696339893308594, 0.0696339893308594, 0.0696339893308594, 0.08175847832275518, 0.08175847832275518, 0.08175847832275518, 0.14252429499518426, 0.14252429499518426, 0.14252429499518426, 0.20532569004223067, 0.20532569004223067, 0.20532569004223067, 0.13126423819686517, 0.13126423819686517, 0.13126423819686517, 0.20976743742666515, 0.20976743742666515, 0.20976743742666515, 0.1847006923964144, 0.1847006923964144, 0.1847006923964144, 0.22580724507919325, 0.22580724507919325, 0.22580724507919325, 0.13189219168063937, 0.13189219168063937, 0.13189219168063937, 0.13174239329213755, 0.13174239329213755, 0.13174239329213755, 0.14541890154151538, 0.14541890154151538, 0.14541890154151538, 0.15616229594456543, 0.15616229594456543, 0.15616229594456543, 0.14386711601947588, 0.14386711601947588, 0.14386711601947588, 0.17035696582313342, 0.17035696582313342, 0.17035696582313342, 0.14820785736389352, 0.14820785736389352, 0.14820785736389352, 0.14658401842507607, 0.14658401842507607, 0.14658401842507607, 0.15397543576738626, 0.15397543576738626, 0.15397543576738626, 0.37588455271567245, 0.37588455271567245, 0.37588455271567245, 0.17412238751691145, 0.17412238751691145, 0.17412238751691145, 0.15178017162490598, 0.15178017162490598, 0.15178017162490598, 0.1668460283483335, 0.1668460283483335, 0.1668460283483335, 0.1749131312176292, 0.1749131312176292, 0.1749131312176292, 0.20742054643061303, 0.20742054643061303, 0.20742054643061303, 0.183919068932895, 0.183919068932895, 0.183919068932895, 0.17799844267929843, 0.17799844267929843, 0.17799844267929843, 0.18409026138931328, 0.18409026138931328, 0.18409026138931328, 0.05436396240351993, 0.05436396240351993, 0.05436396240351993, 0.07028065328220623, 0.07028065328220623, 0.07028065328220623, 0.05156988677888352, 0.05156988677888352, 0.05156988677888352]}, "mutation_prompt": null}
{"id": "1735cee8-c9ff-46c0-92ad-266a71db4fa3", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "b9cf548a-e194-41b1-bf5d-497d8f2d1211", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "bbdd1e85-1a68-4031-a0d3-7b4144d3af68", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "1966801f-dfea-4ad5-8222-f768e82d6321", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "79f6d703-01ed-4de5-91b7-56321dd8beab", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "32452ef7-02b8-4209-8bed-da9f995190d8", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "58e8403b-82c8-460f-99a3-09f189af08b8", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "0b316ed2-7eb9-4caf-8ba6-ac0bab6ad9c4", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "01585589-49f8-4dc0-9470-0c84da426dda", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "eaeca67d-1d7d-4227-9fdb-a8f9d489367a", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "af786f99-766b-4db5-bc30-040e36a84215", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "abc6ad3b-81b1-4a9f-9c8b-bf6383839b12", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "6e059438-1008-4d1e-8dbe-047749ef46ab", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "72e02086-881b-410b-965b-eadf0b55695c", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "3067f814-a5ef-4a47-956d-5d95553a3d13", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "76b9ee28-c873-4236-b4e7-b30bc43f1469", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "8ee3f2f6-067f-41b2-8ae6-2cabf11876be", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "5f5622b8-cba5-4ba4-bdaa-3df028fbc533", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "c5eaeac1-6373-441d-b727-063885f585c1", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "8b6426a5-8c51-4d05-b906-190fff611405", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "cd0dbb0d-36cf-4a51-a6eb-7161c271a12d", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "7a6b7b42-172b-4323-b8e5-733c9b7bfaa2", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "8b59db0d-f11c-4370-9bd2-369a05f486b2", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "07132761-e563-4d78-a9c6-57ce7e2a6d75", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "1dce8da4-6d3f-4798-938d-e1aa8ce1012a", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
{"id": "013f9291-3152-43a5-ada4-c355e262ecd4", "solution": "import numpy as np\n\nclass HybridSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = 30\n        self.inertia = 0.7  # Adjusted initial inertia\n        self.cognitive_coefficient = 1.5  # Slightly increased cognitive coefficient\n        self.social_coefficient = 1.7  # Increased social coefficient for better collaboration\n        self.velocity_scale = 0.1\n        self.mutation_rate = 0.1  \n\n    def __call__(self, func):\n        np.random.seed(42)\n        position = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocity = np.random.uniform(-self.velocity_scale, self.velocity_scale, (self.swarm_size, self.dim))\n\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.swarm_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = None\n\n        evaluations = 0\n\n        while evaluations < self.budget:\n            neighborhood_size = 5  # Adjusted neighborhood size for diverse exploration\n            for i in range(self.swarm_size):\n                if evaluations >= self.budget:\n                    break\n\n                current_value = func(position[i])\n                evaluations += 1\n\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity_factor = np.std(position, axis=0) / (self.upper_bound - self.lower_bound)\n            for i in range(self.swarm_size):\n                neighbors = np.random.choice(self.swarm_size, neighborhood_size, replace=False)\n                local_best_position = personal_best_position[neighbors[np.argmin(personal_best_value[neighbors])]]\n                \n                r1, r2, r3 = np.random.rand(3)\n                velocity[i] = (self.inertia * velocity[i] +\n                               self.cognitive_coefficient * r1 * (personal_best_position[i] - position[i]) +\n                               self.social_coefficient * r2 * (local_best_position - position[i]) +\n                               diversity_factor.mean() * r3 * (global_best_position - position[i]))\n\n                if np.random.rand() < self.mutation_rate:\n                    velocity[i] *= np.random.uniform(-1.5, 1.5)\n\n                position[i] += velocity[i]\n\n                position[i] = np.clip(position[i], self.lower_bound, self.upper_bound)\n\n            self.inertia = 0.4 + 0.3 * (1 - evaluations / self.budget)  # Dynamic inertia adaptation\n\n        return global_best_value", "name": "HybridSwarmOptimization", "description": "Enhanced Hybrid Swarm Optimization with dynamic inertia adaptation and multi-swarm collaboration for improved exploration.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "887fda6d-23ae-470a-917f-9f566c106357", "metadata": {"aucs": [0.8282872640546954, 0.8282872640546954, 0.8282872640546954, 0.8335905897840004, 0.8335905897840004, 0.8335905897840004, 0.8104104771968546, 0.8104104771968546, 0.8104104771968546, 0.5653631751039291, 0.5653631751039291, 0.5653631751039291, 0.6538827183871501, 0.6538827183871501, 0.6538827183871501, 0.6331366492954225, 0.6331366492954225, 0.6331366492954225, 0.1418838567803381, 0.1418838567803381, 0.1418838567803381, 0.11150587264029144, 0.11150587264029144, 0.11150587264029144, 0.1193730401148223, 0.1193730401148223, 0.1193730401148223, 0.08300608689918976, 0.08300608689918976, 0.08300608689918976, 0.10080893939016111, 0.10080893939016111, 0.10080893939016111, 0.10520546329534719, 0.10520546329534719, 0.10520546329534719, 0.9908272902205743, 0.9908272902205743, 0.9908272902205743, 0.9858707417035477, 0.9858707417035477, 0.9858707417035477, 0.9888478081489384, 0.9888478081489384, 0.9888478081489384, 0.675817887665098, 0.675817887665098, 0.675817887665098, 0.6646160496647995, 0.6646160496647995, 0.6646160496647995, 0.6313169885582584, 0.6313169885582584, 0.6313169885582584, 0.8848266447381604, 0.8848266447381604, 0.8848266447381604, 0.8488858889535505, 0.8488858889535505, 0.8488858889535505, 0.81137284555533, 0.81137284555533, 0.81137284555533, 0.63767165304582, 0.63767165304582, 0.63767165304582, 0.12487740890804122, 0.12487740890804122, 0.12487740890804122, 0.5164593246588115, 0.5164593246588115, 0.5164593246588115, 0.5810609517608564, 0.5810609517608564, 0.5810609517608564, 0.6581687873602307, 0.6581687873602307, 0.6581687873602307, 0.5536369760654858, 0.5536369760654858, 0.5536369760654858, 0.44370256004243835, 0.44370256004243835, 0.44370256004243835, 0.5128987436717712, 0.5128987436717712, 0.5128987436717712, 0.5603037223135222, 0.5603037223135222, 0.5603037223135222, 0.22264434372728925, 0.22264434372728925, 0.22264434372728925, 0.24386680111807912, 0.24386680111807912, 0.24386680111807912, 0.1973110638723239, 0.1973110638723239, 0.1973110638723239, 0.0891804667760503, 0.0891804667760503, 0.0891804667760503, 0.34713303720024247, 0.34713303720024247, 0.34713303720024247, 0.09043405012050532, 0.09043405012050532, 0.09043405012050532, 0.5744430400072562, 0.5744430400072562, 0.5744430400072562, 0.52811438033121, 0.52811438033121, 0.52811438033121, 0.33472174646356767, 0.33472174646356767, 0.33472174646356767, 0.7952877063283862, 0.7952877063283862, 0.7952877063283862, 0.8013219928586409, 0.8013219928586409, 0.8013219928586409, 0.7764186140921984, 0.7764186140921984, 0.7764186140921984, 0.11762484605433987, 0.11762484605433987, 0.11762484605433987, 0.12675055583714256, 0.12675055583714256, 0.12675055583714256, 0.1031388234189562, 0.1031388234189562, 0.1031388234189562, 0.35794490910891463, 0.35794490910891463, 0.35794490910891463, 0.14729400369691448, 0.14729400369691448, 0.14729400369691448, 0.18239440496961923, 0.18239440496961923, 0.18239440496961923, 0.5903217643112713, 0.5903217643112713, 0.5903217643112713, 0.4469483538196781, 0.4469483538196781, 0.4469483538196781, 0.5363297920219683, 0.5363297920219683, 0.5363297920219683, 0.2600084624019312, 0.2600084624019312, 0.2600084624019312, 0.5404839770495464, 0.5404839770495464, 0.5404839770495464, 0.45655894504042804, 0.45655894504042804, 0.45655894504042804, 0.22224227570813926, 0.22224227570813926, 0.22224227570813926, 0.2053795674317438, 0.2053795674317438, 0.2053795674317438, 0.19011954976564505, 0.19011954976564505, 0.19011954976564505, 0.21326452378049854, 0.21326452378049854, 0.21326452378049854, 0.19614136338812582, 0.19614136338812582, 0.19614136338812582, 0.5393575386312472, 0.5393575386312472, 0.5393575386312472, 0.8842743455411636, 0.8842743455411636, 0.8842743455411636, 0.16184076040154483, 0.16184076040154483, 0.16184076040154483, 0.16149787272936844, 0.16149787272936844, 0.16149787272936844, 0.16981790439771316, 0.16981790439771316, 0.16981790439771316, 0.7706369006122443, 0.7706369006122443, 0.7706369006122443, 0.15550187688692185, 0.15550187688692185, 0.15550187688692185, 0.1734420257767526, 0.1734420257767526, 0.1734420257767526, 0.18464450289839418, 0.18464450289839418, 0.18464450289839418, 0.18794597329778417, 0.18794597329778417, 0.18794597329778417, 0.07537343060494295, 0.07537343060494295, 0.07537343060494295, 0.08627567060307428, 0.08627567060307428, 0.08627567060307428, 0.08270793203876259, 0.08270793203876259, 0.08270793203876259]}, "mutation_prompt": null}
