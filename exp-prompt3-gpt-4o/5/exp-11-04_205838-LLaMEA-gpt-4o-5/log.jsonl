{"id": "0b4a7c46-7083-485b-b842-011e05c97937", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 0, "fitness": 0.20462212677914357, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.21.", "error": "", "parent_id": null, "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "420fb5dd-dfc3-400c-9ac9-ba116375bb3f", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "c6d73099-1c10-4786-85fc-1ed6442b56b4", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "ba5884af-2fe9-43de-820d-eae980629e53", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "64ab993c-1be3-45b6-b595-884333eaac6b", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "ae15010e-e810-45d1-82f0-75db2b00ea31", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "29f8434f-44e8-4cb6-9de5-1980a294d80f", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "9d8d57f3-3c75-4312-9e27-1730c26f9be2", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "67f7a1c2-2c19-4cca-9664-46d3221fd1ca", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "7f05a035-78c6-45ee-a352-822a3542447b", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "63165113-f0d6-470f-bc0d-5ba7cbd4e800", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "639a3ed9-8794-449f-b225-e85a8713302f", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "97bca1bb-461d-4d3a-a43e-04007076f178", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "6aa3dfbd-e752-4174-9f15-a18f7b4773fe", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "36de7bea-c7d1-4ca8-a7c3-698ecfac40f0", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "d7cbd07f-6e26-493a-9e74-209fdfda75d1", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "5a4ba7f3-acd6-46b0-910d-76504d0ff9fd", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n\n        eval_count = len(X)\n\n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n\n            # Diversity measure\n            diversity = np.mean(np.std(X, axis=0))\n\n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n\n            # Differential Evolution step with adaptive mutation factor\n            adaptive_F = self.F * (1 + diversity)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + adaptive_F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n\n                f_trial = func(trial)\n                eval_count += 1\n\n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if eval_count >= self.budget:\n                break\n\n        return g_best", "name": "HybridPSO_DE", "description": "HybridPSO_DE with adaptive mutation control using diversity measure to balance exploration and exploitation.", "configspace": "", "generation": 16, "fitness": 0.16683680111156177, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.39481229329139733, 0.39481229329139733, 0.39481229329139733, 0.17747140072427703, 0.17747140072427703, 0.17747140072427703, 0.4249023538404193, 0.4249023538404193, 0.4249023538404193, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10459382792869643, 0.10459382792869643, 0.10459382792869643, 0.005899464848834524, 0.005899464848834524, 0.005899464848834524, 0.06452804755971087, 0.06452804755971087, 0.06452804755971087, 0.05321388084058798, 0.05321388084058798, 0.05321388084058798, 0.0812904908931974, 0.0812904908931974, 0.0812904908931974, 0.03645258496705284, 0.03645258496705284, 0.03645258496705284, 0.06230793185551353, 0.06230793185551353, 0.06230793185551353, 0.06896146646912094, 0.06896146646912094, 0.06896146646912094, 0.9953388434807506, 0.9953388434807506, 0.9953388434807506, 0.9927525796310886, 0.9927525796310886, 0.9927525796310886, 0.9949960367987241, 0.9949960367987241, 0.9949960367987241, 0.23454437467838074, 0.23454437467838074, 0.23454437467838074, 0.22083584898712305, 0.22083584898712305, 0.22083584898712305, 0.08459348929741539, 0.08459348929741539, 0.08459348929741539, 0.3373461918130721, 0.3373461918130721, 0.3373461918130721, 0.25553463822781275, 0.25553463822781275, 0.25553463822781275, 0.2581177920137615, 0.2581177920137615, 0.2581177920137615, 0.07335460037227093, 0.07335460037227093, 0.07335460037227093, 0.08562867215462266, 0.08562867215462266, 0.08562867215462266, 0.08780438626681919, 0.08780438626681919, 0.08780438626681919, 0.01581266530223835, 0.01581266530223835, 0.01581266530223835, 0.10475038267541292, 0.10475038267541292, 0.10475038267541292, 0.0986743801521579, 0.0986743801521579, 0.0986743801521579, 0.019102026831191887, 0.019102026831191887, 0.019102026831191887, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05285332822865907, 0.05285332822865907, 0.05285332822865907, 0.05574549361249914, 0.05574549361249914, 0.05574549361249914, 0.01765800533323003, 0.01765800533323003, 0.01765800533323003, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03317960927062269, 0.03317960927062269, 0.03317960927062269, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08620744529218194, 0.08620744529218194, 0.08620744529218194, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037827514101332005, 0.037827514101332005, 0.037827514101332005, 0.31809053292616907, 0.31809053292616907, 0.31809053292616907, 0.38399786956048854, 0.38399786956048854, 0.38399786956048854, 0.2943356641525816, 0.2943356641525816, 0.2943356641525816, 0.05101508295454804, 0.05101508295454804, 0.05101508295454804, 0.07025453340290078, 0.07025453340290078, 0.07025453340290078, 0.05318680971589018, 0.05318680971589018, 0.05318680971589018, 0.1294483459465522, 0.1294483459465522, 0.1294483459465522, 0.14181181023133027, 0.14181181023133027, 0.14181181023133027, 0.17134695425780588, 0.17134695425780588, 0.17134695425780588, 0.11900866249064179, 0.11900866249064179, 0.11900866249064179, 0.22809115447609807, 0.22809115447609807, 0.22809115447609807, 0.2666225629219686, 0.2666225629219686, 0.2666225629219686, 0.15504769431997834, 0.15504769431997834, 0.15504769431997834, 0.13760531696613998, 0.13760531696613998, 0.13760531696613998, 0.18628724337980274, 0.18628724337980274, 0.18628724337980274, 0.17568630933481622, 0.17568630933481622, 0.17568630933481622, 0.15420199192403272, 0.15420199192403272, 0.15420199192403272, 0.16382125840645623, 0.16382125840645623, 0.16382125840645623, 0.12879014617564533, 0.12879014617564533, 0.12879014617564533, 0.1286483448422565, 0.1286483448422565, 0.1286483448422565, 0.12012540824112217, 0.12012540824112217, 0.12012540824112217, 0.22643905175114754, 0.22643905175114754, 0.22643905175114754, 0.16373991437012758, 0.16373991437012758, 0.16373991437012758, 0.17831455146295938, 0.17831455146295938, 0.17831455146295938, 0.15705576803108545, 0.15705576803108545, 0.15705576803108545, 0.17217515200624367, 0.17217515200624367, 0.17217515200624367, 0.1931294141814801, 0.1931294141814801, 0.1931294141814801, 0.18103243567373373, 0.18103243567373373, 0.18103243567373373, 0.1789390000187726, 0.1789390000187726, 0.1789390000187726, 0.1877660019409927, 0.1877660019409927, 0.1877660019409927, 0.05998222303947043, 0.05998222303947043, 0.05998222303947043, 0.06236202157704429, 0.06236202157704429, 0.06236202157704429, 0.05619840161198897, 0.05619840161198897, 0.05619840161198897]}, "mutation_prompt": null}
{"id": "6d5c849a-b98a-4a15-901a-fdad1cc4ba8f", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "3483e13d-86dd-49c3-9518-37bbcb7d1bf9", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "17bee806-5734-4ed2-b313-81008122937d", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "0544dd40-6146-4cc7-a27e-a4beb100aa4b", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "32a8e395-66dd-4d91-ba90-30af1ee518d6", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "906f0d2a-e24b-426b-aae6-cdc78a4a6f97", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "12fdf3a7-dcb3-4030-b607-c442267052a8", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "ff611bba-efa7-4303-806b-5b76ac94be4f", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "9af80566-2ee6-4b37-8fd8-1fc95a8993ea", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "f2a4b8c8-f739-42cf-8781-e229b4835f91", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "54754c11-78e8-4705-881f-12093bb9861e", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "214107eb-9bc9-4952-bee5-5ea511edb2e6", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "91586ddc-3625-4d04-878f-94933177ebd2", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "dc7a28f5-2d70-48d9-b88f-d85dbe4fb6e4", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "0ae140a8-3b3b-4226-ad06-e2cf58aea910", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "b5c28ffb-ba05-49ea-9744-443ac561c87f", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "547e3cca-cfd3-48cf-8e45-988f12102ba4", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "7955546d-5559-4ff1-b154-f6b89c5a1b9c", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "7b8a19d1-c06d-42c4-a163-d174c2c633d4", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "730b24ac-3454-42f1-ace8-86eb373c39f2", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "325cb97c-0bd0-4580-b6f3-bceadc0f8f5e", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "69cea211-f84e-412c-9188-c801f2439235", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "25bbfae1-073e-456e-8957-dfa352ba4826", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "30551de9-1161-4009-8070-77af2e46fe82", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "35853611-a759-4dcc-93c2-5ef586b291cc", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "31b090ce-021f-4de6-9151-c892b5bc990d", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "62823e6e-0fb1-4951-b9f4-277fe7edb9ee", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "ad95623c-8e10-44fa-8ea7-4270526236cf", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "2e65b740-e5ae-446b-a595-ef01cc7966e6", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "f29826f7-0d8d-46e6-aa6a-9d1070fa6f9b", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "b7b3363f-d935-4b44-83cd-72ab12ea13f6", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "39e00769-0805-4580-8b43-2a4f64b31198", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "92c42594-df25-42b4-830b-d4c396f56731", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "1b53e69d-1674-4520-b0a7-ecde2e7c846e", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "2754cb08-ec27-4963-bb92-1a5ec7454274", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "b347cf55-3a16-4cc3-9c50-56514de38153", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "6b49822e-9485-4d82-a78c-f34fd5ce3170", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "0375a685-109c-4287-a6a3-66917fd17c23", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm that dynamically adjusts exploration and exploitation using adaptive parameter control.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.4600670455792557, 0.4600670455792557, 0.4600670455792557, 0.5096418838172136, 0.5096418838172136, 0.5096418838172136, 0.17736680558674978, 0.17736680558674978, 0.17736680558674978, 0.17899512253361394, 0.17899512253361394, 0.17899512253361394, 0.105731537021578, 0.105731537021578, 0.105731537021578, 0.20410431888737268, 0.20410431888737268, 0.20410431888737268, 0.10298516562596527, 0.10298516562596527, 0.10298516562596527, 0.1540976463560506, 0.1540976463560506, 0.1540976463560506, 0.10315915360873895, 0.10315915360873895, 0.10315915360873895, 0.07646942541707735, 0.07646942541707735, 0.07646942541707735, 0.07907827640026122, 0.07907827640026122, 0.07907827640026122, 0.08440833538392323, 0.08440833538392323, 0.08440833538392323, 0.9949229215906039, 0.9949229215906039, 0.9949229215906039, 0.9926764925140001, 0.9926764925140001, 0.9926764925140001, 0.9945817291558138, 0.9945817291558138, 0.9945817291558138, 0.05838295546653649, 0.05838295546653649, 0.05838295546653649, 0.02238336103804761, 0.02238336103804761, 0.02238336103804761, 0.08101245810003477, 0.08101245810003477, 0.08101245810003477, 0.4526342004177596, 0.4526342004177596, 0.4526342004177596, 0.14861666177226285, 0.14861666177226285, 0.14861666177226285, 0.44354349895250844, 0.44354349895250844, 0.44354349895250844, 0.15720691545742504, 0.15720691545742504, 0.15720691545742504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16969888633383312, 0.16969888633383312, 0.16969888633383312, 0.0200605187202495, 0.0200605187202495, 0.0200605187202495, 0.15362775022647712, 0.15362775022647712, 0.15362775022647712, 0.18603724089366247, 0.18603724089366247, 0.18603724089366247, 0.034684116396062614, 0.034684116396062614, 0.034684116396062614, 0.00037166560113655045, 0.00037166560113655045, 0.00037166560113655045, 0.0010841952480014072, 0.0010841952480014072, 0.0010841952480014072, 0.14141578493668971, 0.14141578493668971, 0.14141578493668971, 0.039918853371779695, 0.039918853371779695, 0.039918853371779695, 0.01989638830901619, 0.01989638830901619, 0.01989638830901619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03342906176996496, 0.03342906176996496, 0.03342906176996496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1115479494613082, 0.1115479494613082, 0.1115479494613082, 0.15478760628759503, 0.15478760628759503, 0.15478760628759503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4349929865937452, 0.4349929865937452, 0.4349929865937452, 0.44113855771115884, 0.44113855771115884, 0.44113855771115884, 0.42941098417649914, 0.42941098417649914, 0.42941098417649914, 0.106639169423279, 0.106639169423279, 0.106639169423279, 0.10386403274007738, 0.10386403274007738, 0.10386403274007738, 0.06026865596250841, 0.06026865596250841, 0.06026865596250841, 0.16695973479409987, 0.16695973479409987, 0.16695973479409987, 0.16203941526106536, 0.16203941526106536, 0.16203941526106536, 0.1619464885455072, 0.1619464885455072, 0.1619464885455072, 0.2315709940154954, 0.2315709940154954, 0.2315709940154954, 0.28420600648535876, 0.28420600648535876, 0.28420600648535876, 0.2949506923895586, 0.2949506923895586, 0.2949506923895586, 0.20945241710756646, 0.20945241710756646, 0.20945241710756646, 0.22095187407684902, 0.22095187407684902, 0.22095187407684902, 0.20321991122572414, 0.20321991122572414, 0.20321991122572414, 0.20257140891678915, 0.20257140891678915, 0.20257140891678915, 0.16611868191406265, 0.16611868191406265, 0.16611868191406265, 0.17036107081169705, 0.17036107081169705, 0.17036107081169705, 0.17834789438224963, 0.17834789438224963, 0.17834789438224963, 0.1878887813343847, 0.1878887813343847, 0.1878887813343847, 0.1697872490290785, 0.1697872490290785, 0.1697872490290785, 0.6431536314275792, 0.6431536314275792, 0.6431536314275792, 0.17927764625977982, 0.17927764625977982, 0.17927764625977982, 0.0986421889511625, 0.0986421889511625, 0.0986421889511625, 0.4874304267990974, 0.4874304267990974, 0.4874304267990974, 0.12338873484994506, 0.12338873484994506, 0.12338873484994506, 0.20651415894239333, 0.20651415894239333, 0.20651415894239333, 0.17641909079457985, 0.17641909079457985, 0.17641909079457985, 0.18936801631177846, 0.18936801631177846, 0.18936801631177846, 0.19078584615571015, 0.19078584615571015, 0.19078584615571015, 0.06832458706190736, 0.06832458706190736, 0.06832458706190736, 0.067085815309465, 0.067085815309465, 0.067085815309465, 0.06669005009961348, 0.06669005009961348, 0.06669005009961348]}, "mutation_prompt": null}
{"id": "cb21f51e-448e-4df9-9272-9d45fac2a4e9", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step with adaptive F and CR\n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = 0.8 + 0.1 * np.cos(np.pi * eval_count / self.budget)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Improved HybridPSO_DE with adaptive F and CR parameters for enhanced exploration-exploitation balance.", "configspace": "", "generation": 55, "fitness": 0.2075030131361702, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "0b4a7c46-7083-485b-b842-011e05c97937", "metadata": {"aucs": [0.5099702655785817, 0.5099702655785817, 0.5099702655785817, 0.17963974948317973, 0.17963974948317973, 0.17963974948317973, 0.4838088701619543, 0.4838088701619543, 0.4838088701619543, 0.19827159978675313, 0.19827159978675313, 0.19827159978675313, 0.22468778241090437, 0.22468778241090437, 0.22468778241090437, 0.16988452104943919, 0.16988452104943919, 0.16988452104943919, 0.08742136499736475, 0.08742136499736475, 0.08742136499736475, 0.10525392059032834, 0.10525392059032834, 0.10525392059032834, 0.11520219015100652, 0.11520219015100652, 0.11520219015100652, 0.08486252309337361, 0.08486252309337361, 0.08486252309337361, 0.0798171030047552, 0.0798171030047552, 0.0798171030047552, 0.09047240412026825, 0.09047240412026825, 0.09047240412026825, 0.9922865206102239, 0.9922865206102239, 0.9922865206102239, 0.9924656805613338, 0.9924656805613338, 0.9924656805613338, 0.9947013152335029, 0.9947013152335029, 0.9947013152335029, 0.057543348337574796, 0.057543348337574796, 0.057543348337574796, 0.30551597298462896, 0.30551597298462896, 0.30551597298462896, 0.08400161840909492, 0.08400161840909492, 0.08400161840909492, 0.42669127839217813, 0.42669127839217813, 0.42669127839217813, 0.06763574473890654, 0.06763574473890654, 0.06763574473890654, 0.44967323100897594, 0.44967323100897594, 0.44967323100897594, 0.09323111560011943, 0.09323111560011943, 0.09323111560011943, 0.15981132737090953, 0.15981132737090953, 0.15981132737090953, 0.14329336860701336, 0.14329336860701336, 0.14329336860701336, 0.00968518073577218, 0.00968518073577218, 0.00968518073577218, 0.12176196028692954, 0.12176196028692954, 0.12176196028692954, 0.24406593885643812, 0.24406593885643812, 0.24406593885643812, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003355433764070659, 0.0003355433764070659, 0.0003355433764070659, 0.07078222117154931, 0.07078222117154931, 0.07078222117154931, 0.07034311488407552, 0.07034311488407552, 0.07034311488407552, 0.047336328777391246, 0.047336328777391246, 0.047336328777391246, 0.03652576306280353, 0.03652576306280353, 0.03652576306280353, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04437589383339724, 0.04437589383339724, 0.04437589383339724, 0.04145406816472241, 0.04145406816472241, 0.04145406816472241, 0.12607171175864829, 0.12607171175864829, 0.12607171175864829, 0.0670671981688642, 0.0670671981688642, 0.0670671981688642, 0.1165423491943226, 0.1165423491943226, 0.1165423491943226, 0.27057900664923606, 0.27057900664923606, 0.27057900664923606, 0.4242255127774167, 0.4242255127774167, 0.4242255127774167, 0.4121819709000657, 0.4121819709000657, 0.4121819709000657, 0.06038978151312935, 0.06038978151312935, 0.06038978151312935, 0.10702109958781969, 0.10702109958781969, 0.10702109958781969, 0.07459864539222527, 0.07459864539222527, 0.07459864539222527, 0.14447568132845767, 0.14447568132845767, 0.14447568132845767, 0.412669270457511, 0.412669270457511, 0.412669270457511, 0.1465471885144498, 0.1465471885144498, 0.1465471885144498, 0.22310276885989866, 0.22310276885989866, 0.22310276885989866, 0.30307549275656676, 0.30307549275656676, 0.30307549275656676, 0.30211186128293965, 0.30211186128293965, 0.30211186128293965, 0.1842617873915896, 0.1842617873915896, 0.1842617873915896, 0.1721824041746468, 0.1721824041746468, 0.1721824041746468, 0.20894013535557499, 0.20894013535557499, 0.20894013535557499, 0.17906860229382604, 0.17906860229382604, 0.17906860229382604, 0.18579803827157804, 0.18579803827157804, 0.18579803827157804, 0.17043252423321342, 0.17043252423321342, 0.17043252423321342, 0.17443453009721832, 0.17443453009721832, 0.17443453009721832, 0.18189055460387693, 0.18189055460387693, 0.18189055460387693, 0.17301349293792212, 0.17301349293792212, 0.17301349293792212, 0.17640702446024403, 0.17640702446024403, 0.17640702446024403, 0.1469840523105651, 0.1469840523105651, 0.1469840523105651, 0.1347790623732903, 0.1347790623732903, 0.1347790623732903, 0.40043210981230715, 0.40043210981230715, 0.40043210981230715, 0.5139244889281335, 0.5139244889281335, 0.5139244889281335, 0.18503043436210065, 0.18503043436210065, 0.18503043436210065, 0.17696615841089391, 0.17696615841089391, 0.17696615841089391, 0.19328386781505802, 0.19328386781505802, 0.19328386781505802, 0.20690903513060543, 0.20690903513060543, 0.20690903513060543, 0.06706739658960614, 0.06706739658960614, 0.06706739658960614, 0.0693569895417051, 0.0693569895417051, 0.0693569895417051, 0.06538588813689039, 0.06538588813689039, 0.06538588813689039]}, "mutation_prompt": null}
{"id": "1e17999e-45c8-49e1-8fec-ee0cbc99226f", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step with adaptive F and CR\n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = 0.8 + 0.1 * np.cos(np.pi * eval_count / self.budget)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Improved HybridPSO_DE with adaptive F and CR parameters for enhanced exploration-exploitation balance.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb21f51e-448e-4df9-9272-9d45fac2a4e9", "metadata": {"aucs": [0.5099702655785817, 0.5099702655785817, 0.5099702655785817, 0.17963974948317973, 0.17963974948317973, 0.17963974948317973, 0.4838088701619543, 0.4838088701619543, 0.4838088701619543, 0.19827159978675313, 0.19827159978675313, 0.19827159978675313, 0.22468778241090437, 0.22468778241090437, 0.22468778241090437, 0.16988452104943919, 0.16988452104943919, 0.16988452104943919, 0.08742136499736475, 0.08742136499736475, 0.08742136499736475, 0.10525392059032834, 0.10525392059032834, 0.10525392059032834, 0.11520219015100652, 0.11520219015100652, 0.11520219015100652, 0.08486252309337361, 0.08486252309337361, 0.08486252309337361, 0.0798171030047552, 0.0798171030047552, 0.0798171030047552, 0.09047240412026825, 0.09047240412026825, 0.09047240412026825, 0.9922865206102239, 0.9922865206102239, 0.9922865206102239, 0.9924656805613338, 0.9924656805613338, 0.9924656805613338, 0.9947013152335029, 0.9947013152335029, 0.9947013152335029, 0.057543348337574796, 0.057543348337574796, 0.057543348337574796, 0.30551597298462896, 0.30551597298462896, 0.30551597298462896, 0.08400161840909492, 0.08400161840909492, 0.08400161840909492, 0.42669127839217813, 0.42669127839217813, 0.42669127839217813, 0.06763574473890654, 0.06763574473890654, 0.06763574473890654, 0.44967323100897594, 0.44967323100897594, 0.44967323100897594, 0.09323111560011943, 0.09323111560011943, 0.09323111560011943, 0.15981132737090953, 0.15981132737090953, 0.15981132737090953, 0.14329336860701336, 0.14329336860701336, 0.14329336860701336, 0.00968518073577218, 0.00968518073577218, 0.00968518073577218, 0.12176196028692954, 0.12176196028692954, 0.12176196028692954, 0.24406593885643812, 0.24406593885643812, 0.24406593885643812, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003355433764070659, 0.0003355433764070659, 0.0003355433764070659, 0.07078222117154931, 0.07078222117154931, 0.07078222117154931, 0.07034311488407552, 0.07034311488407552, 0.07034311488407552, 0.047336328777391246, 0.047336328777391246, 0.047336328777391246, 0.03652576306280353, 0.03652576306280353, 0.03652576306280353, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04437589383339724, 0.04437589383339724, 0.04437589383339724, 0.04145406816472241, 0.04145406816472241, 0.04145406816472241, 0.12607171175864829, 0.12607171175864829, 0.12607171175864829, 0.0670671981688642, 0.0670671981688642, 0.0670671981688642, 0.1165423491943226, 0.1165423491943226, 0.1165423491943226, 0.27057900664923606, 0.27057900664923606, 0.27057900664923606, 0.4242255127774167, 0.4242255127774167, 0.4242255127774167, 0.4121819709000657, 0.4121819709000657, 0.4121819709000657, 0.06038978151312935, 0.06038978151312935, 0.06038978151312935, 0.10702109958781969, 0.10702109958781969, 0.10702109958781969, 0.07459864539222527, 0.07459864539222527, 0.07459864539222527, 0.14447568132845767, 0.14447568132845767, 0.14447568132845767, 0.412669270457511, 0.412669270457511, 0.412669270457511, 0.1465471885144498, 0.1465471885144498, 0.1465471885144498, 0.22310276885989866, 0.22310276885989866, 0.22310276885989866, 0.30307549275656676, 0.30307549275656676, 0.30307549275656676, 0.30211186128293965, 0.30211186128293965, 0.30211186128293965, 0.1842617873915896, 0.1842617873915896, 0.1842617873915896, 0.1721824041746468, 0.1721824041746468, 0.1721824041746468, 0.20894013535557499, 0.20894013535557499, 0.20894013535557499, 0.17906860229382604, 0.17906860229382604, 0.17906860229382604, 0.18579803827157804, 0.18579803827157804, 0.18579803827157804, 0.17043252423321342, 0.17043252423321342, 0.17043252423321342, 0.17443453009721832, 0.17443453009721832, 0.17443453009721832, 0.18189055460387693, 0.18189055460387693, 0.18189055460387693, 0.17301349293792212, 0.17301349293792212, 0.17301349293792212, 0.17640702446024403, 0.17640702446024403, 0.17640702446024403, 0.1469840523105651, 0.1469840523105651, 0.1469840523105651, 0.1347790623732903, 0.1347790623732903, 0.1347790623732903, 0.40043210981230715, 0.40043210981230715, 0.40043210981230715, 0.5139244889281335, 0.5139244889281335, 0.5139244889281335, 0.18503043436210065, 0.18503043436210065, 0.18503043436210065, 0.17696615841089391, 0.17696615841089391, 0.17696615841089391, 0.19328386781505802, 0.19328386781505802, 0.19328386781505802, 0.20690903513060543, 0.20690903513060543, 0.20690903513060543, 0.06706739658960614, 0.06706739658960614, 0.06706739658960614, 0.0693569895417051, 0.0693569895417051, 0.0693569895417051, 0.06538588813689039, 0.06538588813689039, 0.06538588813689039]}, "mutation_prompt": null}
{"id": "c66c4405-aff1-4a2c-828e-7113514ad793", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max)  # Stochastic inertia weight\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step with adaptive F and stochastic CR\n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)  # Stochastic crossover rate\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Enhanced HybridPSO_DE with stochastic inertia weight and crossover rate to improve diversity and exploration.", "configspace": "", "generation": 57, "fitness": 0.2367754353976663, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "cb21f51e-448e-4df9-9272-9d45fac2a4e9", "metadata": {"aucs": [0.5901286324608489, 0.5901286324608489, 0.5901286324608489, 0.5905706616299198, 0.5905706616299198, 0.5905706616299198, 0.6380013440227598, 0.6380013440227598, 0.6380013440227598, 0.3416107388226367, 0.3416107388226367, 0.3416107388226367, 0.3186639155954393, 0.3186639155954393, 0.3186639155954393, 0.30096914256340956, 0.30096914256340956, 0.30096914256340956, 0.11703620592077746, 0.11703620592077746, 0.11703620592077746, 0.06843379050924414, 0.06843379050924414, 0.06843379050924414, 0.08959449300812283, 0.08959449300812283, 0.08959449300812283, 0.077885445826958, 0.077885445826958, 0.077885445826958, 0.09331380932845368, 0.09331380932845368, 0.09331380932845368, 0.11177774945441488, 0.11177774945441488, 0.11177774945441488, 0.9889143210178024, 0.9889143210178024, 0.9889143210178024, 0.9833489652409615, 0.9833489652409615, 0.9833489652409615, 0.9928580157218715, 0.9928580157218715, 0.9928580157218715, 0.15505239465429654, 0.15505239465429654, 0.15505239465429654, 0.35467574668555857, 0.35467574668555857, 0.35467574668555857, 0.0812798308976187, 0.0812798308976187, 0.0812798308976187, 0.5333636351233705, 0.5333636351233705, 0.5333636351233705, 0.15403074729182809, 0.15403074729182809, 0.15403074729182809, 0.6007067075382454, 0.6007067075382454, 0.6007067075382454, 0.21460068774110408, 0.21460068774110408, 0.21460068774110408, 0.10506281274268692, 0.10506281274268692, 0.10506281274268692, 0.2297774355280684, 0.2297774355280684, 0.2297774355280684, 0.11581345112234409, 0.11581345112234409, 0.11581345112234409, 0.17664700788797438, 0.17664700788797438, 0.17664700788797438, 0.19133050514060257, 0.19133050514060257, 0.19133050514060257, 0.038569856843742256, 0.038569856843742256, 0.038569856843742256, 0.01115965970837729, 0.01115965970837729, 0.01115965970837729, 0.020324555660714894, 0.020324555660714894, 0.020324555660714894, 0.08876218737989816, 0.08876218737989816, 0.08876218737989816, 0.11583432343255284, 0.11583432343255284, 0.11583432343255284, 0.18012448942062798, 0.18012448942062798, 0.18012448942062798, 0.030314600764302146, 0.030314600764302146, 0.030314600764302146, 0.05371154024014946, 0.05371154024014946, 0.05371154024014946, 0.06234762828376583, 0.06234762828376583, 0.06234762828376583, 0.06424746625441624, 0.06424746625441624, 0.06424746625441624, 0.0051500200625692605, 0.0051500200625692605, 0.0051500200625692605, 0.07313443995365598, 0.07313443995365598, 0.07313443995365598, 0.4849401939227932, 0.4849401939227932, 0.4849401939227932, 0.5129913081646607, 0.5129913081646607, 0.5129913081646607, 0.49725547231180345, 0.49725547231180345, 0.49725547231180345, 0.05104057615974067, 0.05104057615974067, 0.05104057615974067, 0.1140704834150923, 0.1140704834150923, 0.1140704834150923, 0.08449084131719609, 0.08449084131719609, 0.08449084131719609, 0.19116503026671516, 0.19116503026671516, 0.19116503026671516, 0.25228518748139384, 0.25228518748139384, 0.25228518748139384, 0.17997170941306773, 0.17997170941306773, 0.17997170941306773, 0.3194427931553734, 0.3194427931553734, 0.3194427931553734, 0.33723544481461554, 0.33723544481461554, 0.33723544481461554, 0.3501591315922328, 0.3501591315922328, 0.3501591315922328, 0.18011110962627808, 0.18011110962627808, 0.18011110962627808, 0.18278521312352292, 0.18278521312352292, 0.18278521312352292, 0.26088242077659296, 0.26088242077659296, 0.26088242077659296, 0.203053315124455, 0.203053315124455, 0.203053315124455, 0.2014580360864684, 0.2014580360864684, 0.2014580360864684, 0.17820191196752455, 0.17820191196752455, 0.17820191196752455, 0.18752682198498394, 0.18752682198498394, 0.18752682198498394, 0.2861084916317711, 0.2861084916317711, 0.2861084916317711, 0.196021195144244, 0.196021195144244, 0.196021195144244, 0.1639300498277203, 0.1639300498277203, 0.1639300498277203, 0.18804880988966832, 0.18804880988966832, 0.18804880988966832, 0.13348476700692735, 0.13348476700692735, 0.13348476700692735, 0.14882978892219922, 0.14882978892219922, 0.14882978892219922, 0.20238313607840064, 0.20238313607840064, 0.20238313607840064, 0.21025903537236657, 0.21025903537236657, 0.21025903537236657, 0.1837514729383628, 0.1837514729383628, 0.1837514729383628, 0.18824215047157888, 0.18824215047157888, 0.18824215047157888, 0.18087314210040084, 0.18087314210040084, 0.18087314210040084, 0.07816316620174402, 0.07816316620174402, 0.07816316620174402, 0.08830169639322427, 0.08830169639322427, 0.08830169639322427, 0.07123848446676273, 0.07123848446676273, 0.07123848446676273]}, "mutation_prompt": null}
{"id": "f775f9a6-f9b9-447e-a13f-e7d953aa4a6d", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max)  # Stochastic inertia weight\n            \n            # Adjust population size dynamically\n            pop_size_factor = int(20 * (1 - np.tanh(10 * eval_count / self.budget - 5)))\n            self.pop_size = max(10, pop_size_factor)  # Minimum pop size of 10\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step with adaptive F and stochastic CR\n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)  # Stochastic crossover rate\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Incorporate a dynamic population size adjustment to balance exploration and exploitation over iterations.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 20 is out of bounds for axis 0 with size 20').", "error": "IndexError('index 20 is out of bounds for axis 0 with size 20')", "parent_id": "c66c4405-aff1-4a2c-828e-7113514ad793", "metadata": {}, "mutation_prompt": null}
{"id": "ea9a6ed1-f0b1-4fd9-bd91-151f3f991ca8", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size_initial = 20\n        self.pop_size = self.pop_size_initial\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max)  # Stochastic inertia weight\n\n            # Adjust population size dynamically\n            self.pop_size = self.pop_size_initial + int((self.budget - eval_count) / self.budget * 10)  \n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step with adaptive F and stochastic CR\n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)  # Stochastic crossover rate\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "HybridPSO_DE with dynamically adjusted population size for improved exploration-exploitation balance.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 20 is out of bounds for axis 0 with size 20').", "error": "IndexError('index 20 is out of bounds for axis 0 with size 20')", "parent_id": "c66c4405-aff1-4a2c-828e-7113514ad793", "metadata": {}, "mutation_prompt": null}
{"id": "367647a5-37bb-4ff8-929e-2678998aa162", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max)  # Stochastic inertia weight\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                V[i] = np.clip(V[i], -0.5 * (self.ub - self.lb), 0.5 * (self.ub - self.lb))  # Adaptive velocity clamping\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step with adaptive F and stochastic CR\n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)  # Stochastic crossover rate\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if eval_count < self.budget:\n                self.pop_size = min(30, self.pop_size + 1)  # Dynamic population size adjustment\n            \n            if eval_count >= self.budget:\n                break\n\n        return g_best", "name": "HybridPSO_DE", "description": "Enhanced HybridPSO_DE with adaptive velocity clamping and dynamic population size to balance exploration and exploitation.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 20 is out of bounds for axis 0 with size 20').", "error": "IndexError('index 20 is out of bounds for axis 0 with size 20')", "parent_id": "c66c4405-aff1-4a2c-828e-7113514ad793", "metadata": {}, "mutation_prompt": null}
{"id": "0c925dbc-a720-4b62-8e53-96ce2a57f5fd", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max)  # Stochastic inertia weight\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step with adaptive F and stochastic CR\n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)  # Stochastic crossover rate\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Enhanced HybridPSO_DE with stochastic inertia weight and crossover rate to improve diversity and exploration.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c66c4405-aff1-4a2c-828e-7113514ad793", "metadata": {"aucs": [0.5901286324608489, 0.5901286324608489, 0.5901286324608489, 0.5905706616299198, 0.5905706616299198, 0.5905706616299198, 0.6380013440227598, 0.6380013440227598, 0.6380013440227598, 0.3416107388226367, 0.3416107388226367, 0.3416107388226367, 0.3186639155954393, 0.3186639155954393, 0.3186639155954393, 0.30096914256340956, 0.30096914256340956, 0.30096914256340956, 0.11703620592077746, 0.11703620592077746, 0.11703620592077746, 0.06843379050924414, 0.06843379050924414, 0.06843379050924414, 0.08959449300812283, 0.08959449300812283, 0.08959449300812283, 0.077885445826958, 0.077885445826958, 0.077885445826958, 0.09331380932845368, 0.09331380932845368, 0.09331380932845368, 0.11177774945441488, 0.11177774945441488, 0.11177774945441488, 0.9889143210178024, 0.9889143210178024, 0.9889143210178024, 0.9833489652409615, 0.9833489652409615, 0.9833489652409615, 0.9928580157218715, 0.9928580157218715, 0.9928580157218715, 0.15505239465429654, 0.15505239465429654, 0.15505239465429654, 0.35467574668555857, 0.35467574668555857, 0.35467574668555857, 0.0812798308976187, 0.0812798308976187, 0.0812798308976187, 0.5333636351233705, 0.5333636351233705, 0.5333636351233705, 0.15403074729182809, 0.15403074729182809, 0.15403074729182809, 0.6007067075382454, 0.6007067075382454, 0.6007067075382454, 0.21460068774110408, 0.21460068774110408, 0.21460068774110408, 0.10506281274268692, 0.10506281274268692, 0.10506281274268692, 0.2297774355280684, 0.2297774355280684, 0.2297774355280684, 0.11581345112234409, 0.11581345112234409, 0.11581345112234409, 0.17664700788797438, 0.17664700788797438, 0.17664700788797438, 0.19133050514060257, 0.19133050514060257, 0.19133050514060257, 0.038569856843742256, 0.038569856843742256, 0.038569856843742256, 0.01115965970837729, 0.01115965970837729, 0.01115965970837729, 0.020324555660714894, 0.020324555660714894, 0.020324555660714894, 0.08876218737989816, 0.08876218737989816, 0.08876218737989816, 0.11583432343255284, 0.11583432343255284, 0.11583432343255284, 0.18012448942062798, 0.18012448942062798, 0.18012448942062798, 0.030314600764302146, 0.030314600764302146, 0.030314600764302146, 0.05371154024014946, 0.05371154024014946, 0.05371154024014946, 0.06234762828376583, 0.06234762828376583, 0.06234762828376583, 0.06424746625441624, 0.06424746625441624, 0.06424746625441624, 0.0051500200625692605, 0.0051500200625692605, 0.0051500200625692605, 0.07313443995365598, 0.07313443995365598, 0.07313443995365598, 0.4849401939227932, 0.4849401939227932, 0.4849401939227932, 0.5129913081646607, 0.5129913081646607, 0.5129913081646607, 0.49725547231180345, 0.49725547231180345, 0.49725547231180345, 0.05104057615974067, 0.05104057615974067, 0.05104057615974067, 0.1140704834150923, 0.1140704834150923, 0.1140704834150923, 0.08449084131719609, 0.08449084131719609, 0.08449084131719609, 0.19116503026671516, 0.19116503026671516, 0.19116503026671516, 0.25228518748139384, 0.25228518748139384, 0.25228518748139384, 0.17997170941306773, 0.17997170941306773, 0.17997170941306773, 0.3194427931553734, 0.3194427931553734, 0.3194427931553734, 0.33723544481461554, 0.33723544481461554, 0.33723544481461554, 0.3501591315922328, 0.3501591315922328, 0.3501591315922328, 0.18011110962627808, 0.18011110962627808, 0.18011110962627808, 0.18278521312352292, 0.18278521312352292, 0.18278521312352292, 0.26088242077659296, 0.26088242077659296, 0.26088242077659296, 0.203053315124455, 0.203053315124455, 0.203053315124455, 0.2014580360864684, 0.2014580360864684, 0.2014580360864684, 0.17820191196752455, 0.17820191196752455, 0.17820191196752455, 0.18752682198498394, 0.18752682198498394, 0.18752682198498394, 0.2861084916317711, 0.2861084916317711, 0.2861084916317711, 0.196021195144244, 0.196021195144244, 0.196021195144244, 0.1639300498277203, 0.1639300498277203, 0.1639300498277203, 0.18804880988966832, 0.18804880988966832, 0.18804880988966832, 0.13348476700692735, 0.13348476700692735, 0.13348476700692735, 0.14882978892219922, 0.14882978892219922, 0.14882978892219922, 0.20238313607840064, 0.20238313607840064, 0.20238313607840064, 0.21025903537236657, 0.21025903537236657, 0.21025903537236657, 0.1837514729383628, 0.1837514729383628, 0.1837514729383628, 0.18824215047157888, 0.18824215047157888, 0.18824215047157888, 0.18087314210040084, 0.18087314210040084, 0.18087314210040084, 0.07816316620174402, 0.07816316620174402, 0.07816316620174402, 0.08830169639322427, 0.08830169639322427, 0.08830169639322427, 0.07123848446676273, 0.07123848446676273, 0.07123848446676273]}, "mutation_prompt": null}
{"id": "66f614fe-8867-4b07-adb8-9e3296aeebe0", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max)  # Stochastic inertia weight\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step with adaptive F and stochastic CR\n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)  # Stochastic crossover rate\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            # Dynamic population size adjustment\n            if eval_count < self.budget * 0.5:\n                self.pop_size = 25  # Increase population size for exploration\n            else:\n                self.pop_size = 15  # Decrease population size for exploitation\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Improved exploration and exploitation balance in HybridPSO_DE by introducing dynamic population size adjustment based on convergence rate.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 20 is out of bounds for axis 0 with size 20').", "error": "IndexError('index 20 is out of bounds for axis 0 with size 20')", "parent_id": "c66c4405-aff1-4a2c-828e-7113514ad793", "metadata": {}, "mutation_prompt": null}
{"id": "52037b43-b06f-43fc-820e-32867d0b7eab", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max)  # Stochastic inertia weight\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step with adaptive F and stochastic CR\n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)  # Stochastic crossover rate\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Enhanced HybridPSO_DE with stochastic inertia weight and crossover rate to improve diversity and exploration.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c66c4405-aff1-4a2c-828e-7113514ad793", "metadata": {"aucs": [0.5901286324608489, 0.5901286324608489, 0.5901286324608489, 0.5905706616299198, 0.5905706616299198, 0.5905706616299198, 0.6380013440227598, 0.6380013440227598, 0.6380013440227598, 0.3416107388226367, 0.3416107388226367, 0.3416107388226367, 0.3186639155954393, 0.3186639155954393, 0.3186639155954393, 0.30096914256340956, 0.30096914256340956, 0.30096914256340956, 0.11703620592077746, 0.11703620592077746, 0.11703620592077746, 0.06843379050924414, 0.06843379050924414, 0.06843379050924414, 0.08959449300812283, 0.08959449300812283, 0.08959449300812283, 0.077885445826958, 0.077885445826958, 0.077885445826958, 0.09331380932845368, 0.09331380932845368, 0.09331380932845368, 0.11177774945441488, 0.11177774945441488, 0.11177774945441488, 0.9889143210178024, 0.9889143210178024, 0.9889143210178024, 0.9833489652409615, 0.9833489652409615, 0.9833489652409615, 0.9928580157218715, 0.9928580157218715, 0.9928580157218715, 0.15505239465429654, 0.15505239465429654, 0.15505239465429654, 0.35467574668555857, 0.35467574668555857, 0.35467574668555857, 0.0812798308976187, 0.0812798308976187, 0.0812798308976187, 0.5333636351233705, 0.5333636351233705, 0.5333636351233705, 0.15403074729182809, 0.15403074729182809, 0.15403074729182809, 0.6007067075382454, 0.6007067075382454, 0.6007067075382454, 0.21460068774110408, 0.21460068774110408, 0.21460068774110408, 0.10506281274268692, 0.10506281274268692, 0.10506281274268692, 0.2297774355280684, 0.2297774355280684, 0.2297774355280684, 0.11581345112234409, 0.11581345112234409, 0.11581345112234409, 0.17664700788797438, 0.17664700788797438, 0.17664700788797438, 0.19133050514060257, 0.19133050514060257, 0.19133050514060257, 0.038569856843742256, 0.038569856843742256, 0.038569856843742256, 0.01115965970837729, 0.01115965970837729, 0.01115965970837729, 0.020324555660714894, 0.020324555660714894, 0.020324555660714894, 0.08876218737989816, 0.08876218737989816, 0.08876218737989816, 0.11583432343255284, 0.11583432343255284, 0.11583432343255284, 0.18012448942062798, 0.18012448942062798, 0.18012448942062798, 0.030314600764302146, 0.030314600764302146, 0.030314600764302146, 0.05371154024014946, 0.05371154024014946, 0.05371154024014946, 0.06234762828376583, 0.06234762828376583, 0.06234762828376583, 0.06424746625441624, 0.06424746625441624, 0.06424746625441624, 0.0051500200625692605, 0.0051500200625692605, 0.0051500200625692605, 0.07313443995365598, 0.07313443995365598, 0.07313443995365598, 0.4849401939227932, 0.4849401939227932, 0.4849401939227932, 0.5129913081646607, 0.5129913081646607, 0.5129913081646607, 0.49725547231180345, 0.49725547231180345, 0.49725547231180345, 0.05104057615974067, 0.05104057615974067, 0.05104057615974067, 0.1140704834150923, 0.1140704834150923, 0.1140704834150923, 0.08449084131719609, 0.08449084131719609, 0.08449084131719609, 0.19116503026671516, 0.19116503026671516, 0.19116503026671516, 0.25228518748139384, 0.25228518748139384, 0.25228518748139384, 0.17997170941306773, 0.17997170941306773, 0.17997170941306773, 0.3194427931553734, 0.3194427931553734, 0.3194427931553734, 0.33723544481461554, 0.33723544481461554, 0.33723544481461554, 0.3501591315922328, 0.3501591315922328, 0.3501591315922328, 0.18011110962627808, 0.18011110962627808, 0.18011110962627808, 0.18278521312352292, 0.18278521312352292, 0.18278521312352292, 0.26088242077659296, 0.26088242077659296, 0.26088242077659296, 0.203053315124455, 0.203053315124455, 0.203053315124455, 0.2014580360864684, 0.2014580360864684, 0.2014580360864684, 0.17820191196752455, 0.17820191196752455, 0.17820191196752455, 0.18752682198498394, 0.18752682198498394, 0.18752682198498394, 0.2861084916317711, 0.2861084916317711, 0.2861084916317711, 0.196021195144244, 0.196021195144244, 0.196021195144244, 0.1639300498277203, 0.1639300498277203, 0.1639300498277203, 0.18804880988966832, 0.18804880988966832, 0.18804880988966832, 0.13348476700692735, 0.13348476700692735, 0.13348476700692735, 0.14882978892219922, 0.14882978892219922, 0.14882978892219922, 0.20238313607840064, 0.20238313607840064, 0.20238313607840064, 0.21025903537236657, 0.21025903537236657, 0.21025903537236657, 0.1837514729383628, 0.1837514729383628, 0.1837514729383628, 0.18824215047157888, 0.18824215047157888, 0.18824215047157888, 0.18087314210040084, 0.18087314210040084, 0.18087314210040084, 0.07816316620174402, 0.07816316620174402, 0.07816316620174402, 0.08830169639322427, 0.08830169639322427, 0.08830169639322427, 0.07123848446676273, 0.07123848446676273, 0.07123848446676273]}, "mutation_prompt": null}
{"id": "a84af42f-54c4-48ae-9fcf-67588c925eea", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            self.pop_size = max(10, self.pop_size - eval_count // (self.budget // 10))  # Adaptive population size\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)  # Adaptive inertia weight\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step with adaptive F and stochastic CR\n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)  # Stochastic crossover rate\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "HybridPSO_DE with adaptive population size and inertia weight for enhanced exploration-exploitation balance.", "configspace": "", "generation": 64, "fitness": 0.22089729885047654, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.23.", "error": "", "parent_id": "c66c4405-aff1-4a2c-828e-7113514ad793", "metadata": {"aucs": [0.5579063590076135, 0.5579063590076135, 0.5579063590076135, 0.1801773789390123, 0.1801773789390123, 0.1801773789390123, 0.6139783118726975, 0.6139783118726975, 0.6139783118726975, 0.3750276366397246, 0.3750276366397246, 0.3750276366397246, 0.387231186838328, 0.387231186838328, 0.387231186838328, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0609331709933284, 0.0609331709933284, 0.0609331709933284, 0.104274821241499, 0.104274821241499, 0.104274821241499, 0.09520563353785105, 0.09520563353785105, 0.09520563353785105, 0.08887540486084, 0.08887540486084, 0.08887540486084, 0.08489255943431495, 0.08489255943431495, 0.08489255943431495, 0.08265693725885015, 0.08265693725885015, 0.08265693725885015, 0.9949027836087875, 0.9949027836087875, 0.9949027836087875, 0.9879909812919189, 0.9879909812919189, 0.9879909812919189, 0.9945885396236807, 0.9945885396236807, 0.9945885396236807, 0.39147060983522275, 0.39147060983522275, 0.39147060983522275, 0.13673734065148724, 0.13673734065148724, 0.13673734065148724, 0.08780233490073519, 0.08780233490073519, 0.08780233490073519, 0.1991257546632622, 0.1991257546632622, 0.1991257546632622, 0.069369284184439, 0.069369284184439, 0.069369284184439, 0.5431479354705291, 0.5431479354705291, 0.5431479354705291, 0.07938216274913068, 0.07938216274913068, 0.07938216274913068, 0.07795359776473465, 0.07795359776473465, 0.07795359776473465, 0.20591236188816442, 0.20591236188816442, 0.20591236188816442, 0.009566083738997255, 0.009566083738997255, 0.009566083738997255, 0.08957326591550696, 0.08957326591550696, 0.08957326591550696, 0.2068054917574761, 0.2068054917574761, 0.2068054917574761, 0.05512164564523592, 0.05512164564523592, 0.05512164564523592, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03331958938982149, 0.03331958938982149, 0.03331958938982149, 0.0533880819834156, 0.0533880819834156, 0.0533880819834156, 0.04499289308418197, 0.04499289308418197, 0.04499289308418197, 0.12649529858342534, 0.12649529858342534, 0.12649529858342534, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05240916790678507, 0.05240916790678507, 0.05240916790678507, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032224005196713534, 0.032224005196713534, 0.032224005196713534, 0.004599834990965945, 0.004599834990965945, 0.004599834990965945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.4793996703311184, 0.4793996703311184, 0.4793996703311184, 0.4469198657519119, 0.4469198657519119, 0.4469198657519119, 0.5086337365089526, 0.5086337365089526, 0.5086337365089526, 0.09979922215081038, 0.09979922215081038, 0.09979922215081038, 0.08382323005923442, 0.08382323005923442, 0.08382323005923442, 0.06803575253256511, 0.06803575253256511, 0.06803575253256511, 0.16547735982104073, 0.16547735982104073, 0.16547735982104073, 0.37414911359260095, 0.37414911359260095, 0.37414911359260095, 0.24843424630476785, 0.24843424630476785, 0.24843424630476785, 0.30314007030559176, 0.30314007030559176, 0.30314007030559176, 0.3446247516080888, 0.3446247516080888, 0.3446247516080888, 0.316487583066833, 0.316487583066833, 0.316487583066833, 0.2854931464814703, 0.2854931464814703, 0.2854931464814703, 0.17496178500873816, 0.17496178500873816, 0.17496178500873816, 0.22513859950474147, 0.22513859950474147, 0.22513859950474147, 0.18579112213591176, 0.18579112213591176, 0.18579112213591176, 0.19863152699241904, 0.19863152699241904, 0.19863152699241904, 0.18191219475939224, 0.18191219475939224, 0.18191219475939224, 0.1775310288654136, 0.1775310288654136, 0.1775310288654136, 0.1894833819998316, 0.1894833819998316, 0.1894833819998316, 0.17000365135086215, 0.17000365135086215, 0.17000365135086215, 0.6775012624299989, 0.6775012624299989, 0.6775012624299989, 0.1596250004971711, 0.1596250004971711, 0.1596250004971711, 0.08960036203904542, 0.08960036203904542, 0.08960036203904542, 0.16898516500384886, 0.16898516500384886, 0.16898516500384886, 0.5484299575512497, 0.5484299575512497, 0.5484299575512497, 0.1467298221462754, 0.1467298221462754, 0.1467298221462754, 0.1842944927012311, 0.1842944927012311, 0.1842944927012311, 0.19859215759438986, 0.19859215759438986, 0.19859215759438986, 0.17464397303841128, 0.17464397303841128, 0.17464397303841128, 0.07505756820937237, 0.07505756820937237, 0.07505756820937237, 0.07167801917945438, 0.07167801917945438, 0.07167801917945438, 0.07305825226288876, 0.07305825226288876, 0.07305825226288876]}, "mutation_prompt": null}
{"id": "af0b88f4-2d81-4ded-ba96-bb9b58a1a8e2", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max)  # Stochastic inertia weight\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step with adaptive F and stochastic CR\n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)  # Stochastic crossover rate\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Enhanced HybridPSO_DE with stochastic inertia weight and crossover rate to improve diversity and exploration.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c66c4405-aff1-4a2c-828e-7113514ad793", "metadata": {"aucs": [0.5901286324608489, 0.5901286324608489, 0.5901286324608489, 0.5905706616299198, 0.5905706616299198, 0.5905706616299198, 0.6380013440227598, 0.6380013440227598, 0.6380013440227598, 0.3416107388226367, 0.3416107388226367, 0.3416107388226367, 0.3186639155954393, 0.3186639155954393, 0.3186639155954393, 0.30096914256340956, 0.30096914256340956, 0.30096914256340956, 0.11703620592077746, 0.11703620592077746, 0.11703620592077746, 0.06843379050924414, 0.06843379050924414, 0.06843379050924414, 0.08959449300812283, 0.08959449300812283, 0.08959449300812283, 0.077885445826958, 0.077885445826958, 0.077885445826958, 0.09331380932845368, 0.09331380932845368, 0.09331380932845368, 0.11177774945441488, 0.11177774945441488, 0.11177774945441488, 0.9889143210178024, 0.9889143210178024, 0.9889143210178024, 0.9833489652409615, 0.9833489652409615, 0.9833489652409615, 0.9928580157218715, 0.9928580157218715, 0.9928580157218715, 0.15505239465429654, 0.15505239465429654, 0.15505239465429654, 0.35467574668555857, 0.35467574668555857, 0.35467574668555857, 0.0812798308976187, 0.0812798308976187, 0.0812798308976187, 0.5333636351233705, 0.5333636351233705, 0.5333636351233705, 0.15403074729182809, 0.15403074729182809, 0.15403074729182809, 0.6007067075382454, 0.6007067075382454, 0.6007067075382454, 0.21460068774110408, 0.21460068774110408, 0.21460068774110408, 0.10506281274268692, 0.10506281274268692, 0.10506281274268692, 0.2297774355280684, 0.2297774355280684, 0.2297774355280684, 0.11581345112234409, 0.11581345112234409, 0.11581345112234409, 0.17664700788797438, 0.17664700788797438, 0.17664700788797438, 0.19133050514060257, 0.19133050514060257, 0.19133050514060257, 0.038569856843742256, 0.038569856843742256, 0.038569856843742256, 0.01115965970837729, 0.01115965970837729, 0.01115965970837729, 0.020324555660714894, 0.020324555660714894, 0.020324555660714894, 0.08876218737989816, 0.08876218737989816, 0.08876218737989816, 0.11583432343255284, 0.11583432343255284, 0.11583432343255284, 0.18012448942062798, 0.18012448942062798, 0.18012448942062798, 0.030314600764302146, 0.030314600764302146, 0.030314600764302146, 0.05371154024014946, 0.05371154024014946, 0.05371154024014946, 0.06234762828376583, 0.06234762828376583, 0.06234762828376583, 0.06424746625441624, 0.06424746625441624, 0.06424746625441624, 0.0051500200625692605, 0.0051500200625692605, 0.0051500200625692605, 0.07313443995365598, 0.07313443995365598, 0.07313443995365598, 0.4849401939227932, 0.4849401939227932, 0.4849401939227932, 0.5129913081646607, 0.5129913081646607, 0.5129913081646607, 0.49725547231180345, 0.49725547231180345, 0.49725547231180345, 0.05104057615974067, 0.05104057615974067, 0.05104057615974067, 0.1140704834150923, 0.1140704834150923, 0.1140704834150923, 0.08449084131719609, 0.08449084131719609, 0.08449084131719609, 0.19116503026671516, 0.19116503026671516, 0.19116503026671516, 0.25228518748139384, 0.25228518748139384, 0.25228518748139384, 0.17997170941306773, 0.17997170941306773, 0.17997170941306773, 0.3194427931553734, 0.3194427931553734, 0.3194427931553734, 0.33723544481461554, 0.33723544481461554, 0.33723544481461554, 0.3501591315922328, 0.3501591315922328, 0.3501591315922328, 0.18011110962627808, 0.18011110962627808, 0.18011110962627808, 0.18278521312352292, 0.18278521312352292, 0.18278521312352292, 0.26088242077659296, 0.26088242077659296, 0.26088242077659296, 0.203053315124455, 0.203053315124455, 0.203053315124455, 0.2014580360864684, 0.2014580360864684, 0.2014580360864684, 0.17820191196752455, 0.17820191196752455, 0.17820191196752455, 0.18752682198498394, 0.18752682198498394, 0.18752682198498394, 0.2861084916317711, 0.2861084916317711, 0.2861084916317711, 0.196021195144244, 0.196021195144244, 0.196021195144244, 0.1639300498277203, 0.1639300498277203, 0.1639300498277203, 0.18804880988966832, 0.18804880988966832, 0.18804880988966832, 0.13348476700692735, 0.13348476700692735, 0.13348476700692735, 0.14882978892219922, 0.14882978892219922, 0.14882978892219922, 0.20238313607840064, 0.20238313607840064, 0.20238313607840064, 0.21025903537236657, 0.21025903537236657, 0.21025903537236657, 0.1837514729383628, 0.1837514729383628, 0.1837514729383628, 0.18824215047157888, 0.18824215047157888, 0.18824215047157888, 0.18087314210040084, 0.18087314210040084, 0.18087314210040084, 0.07816316620174402, 0.07816316620174402, 0.07816316620174402, 0.08830169639322427, 0.08830169639322427, 0.08830169639322427, 0.07123848446676273, 0.07123848446676273, 0.07123848446676273]}, "mutation_prompt": null}
{"id": "3dfcf203-2c87-4317-9f0f-cc500b224e08", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max)  # Stochastic inertia weight\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step with adaptive F and stochastic CR\n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)  # Stochastic crossover rate\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Enhanced HybridPSO_DE with stochastic inertia weight and crossover rate to improve diversity and exploration.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c66c4405-aff1-4a2c-828e-7113514ad793", "metadata": {"aucs": [0.5901286324608489, 0.5901286324608489, 0.5901286324608489, 0.5905706616299198, 0.5905706616299198, 0.5905706616299198, 0.6380013440227598, 0.6380013440227598, 0.6380013440227598, 0.3416107388226367, 0.3416107388226367, 0.3416107388226367, 0.3186639155954393, 0.3186639155954393, 0.3186639155954393, 0.30096914256340956, 0.30096914256340956, 0.30096914256340956, 0.11703620592077746, 0.11703620592077746, 0.11703620592077746, 0.06843379050924414, 0.06843379050924414, 0.06843379050924414, 0.08959449300812283, 0.08959449300812283, 0.08959449300812283, 0.077885445826958, 0.077885445826958, 0.077885445826958, 0.09331380932845368, 0.09331380932845368, 0.09331380932845368, 0.11177774945441488, 0.11177774945441488, 0.11177774945441488, 0.9889143210178024, 0.9889143210178024, 0.9889143210178024, 0.9833489652409615, 0.9833489652409615, 0.9833489652409615, 0.9928580157218715, 0.9928580157218715, 0.9928580157218715, 0.15505239465429654, 0.15505239465429654, 0.15505239465429654, 0.35467574668555857, 0.35467574668555857, 0.35467574668555857, 0.0812798308976187, 0.0812798308976187, 0.0812798308976187, 0.5333636351233705, 0.5333636351233705, 0.5333636351233705, 0.15403074729182809, 0.15403074729182809, 0.15403074729182809, 0.6007067075382454, 0.6007067075382454, 0.6007067075382454, 0.21460068774110408, 0.21460068774110408, 0.21460068774110408, 0.10506281274268692, 0.10506281274268692, 0.10506281274268692, 0.2297774355280684, 0.2297774355280684, 0.2297774355280684, 0.11581345112234409, 0.11581345112234409, 0.11581345112234409, 0.17664700788797438, 0.17664700788797438, 0.17664700788797438, 0.19133050514060257, 0.19133050514060257, 0.19133050514060257, 0.038569856843742256, 0.038569856843742256, 0.038569856843742256, 0.01115965970837729, 0.01115965970837729, 0.01115965970837729, 0.020324555660714894, 0.020324555660714894, 0.020324555660714894, 0.08876218737989816, 0.08876218737989816, 0.08876218737989816, 0.11583432343255284, 0.11583432343255284, 0.11583432343255284, 0.18012448942062798, 0.18012448942062798, 0.18012448942062798, 0.030314600764302146, 0.030314600764302146, 0.030314600764302146, 0.05371154024014946, 0.05371154024014946, 0.05371154024014946, 0.06234762828376583, 0.06234762828376583, 0.06234762828376583, 0.06424746625441624, 0.06424746625441624, 0.06424746625441624, 0.0051500200625692605, 0.0051500200625692605, 0.0051500200625692605, 0.07313443995365598, 0.07313443995365598, 0.07313443995365598, 0.4849401939227932, 0.4849401939227932, 0.4849401939227932, 0.5129913081646607, 0.5129913081646607, 0.5129913081646607, 0.49725547231180345, 0.49725547231180345, 0.49725547231180345, 0.05104057615974067, 0.05104057615974067, 0.05104057615974067, 0.1140704834150923, 0.1140704834150923, 0.1140704834150923, 0.08449084131719609, 0.08449084131719609, 0.08449084131719609, 0.19116503026671516, 0.19116503026671516, 0.19116503026671516, 0.25228518748139384, 0.25228518748139384, 0.25228518748139384, 0.17997170941306773, 0.17997170941306773, 0.17997170941306773, 0.3194427931553734, 0.3194427931553734, 0.3194427931553734, 0.33723544481461554, 0.33723544481461554, 0.33723544481461554, 0.3501591315922328, 0.3501591315922328, 0.3501591315922328, 0.18011110962627808, 0.18011110962627808, 0.18011110962627808, 0.18278521312352292, 0.18278521312352292, 0.18278521312352292, 0.26088242077659296, 0.26088242077659296, 0.26088242077659296, 0.203053315124455, 0.203053315124455, 0.203053315124455, 0.2014580360864684, 0.2014580360864684, 0.2014580360864684, 0.17820191196752455, 0.17820191196752455, 0.17820191196752455, 0.18752682198498394, 0.18752682198498394, 0.18752682198498394, 0.2861084916317711, 0.2861084916317711, 0.2861084916317711, 0.196021195144244, 0.196021195144244, 0.196021195144244, 0.1639300498277203, 0.1639300498277203, 0.1639300498277203, 0.18804880988966832, 0.18804880988966832, 0.18804880988966832, 0.13348476700692735, 0.13348476700692735, 0.13348476700692735, 0.14882978892219922, 0.14882978892219922, 0.14882978892219922, 0.20238313607840064, 0.20238313607840064, 0.20238313607840064, 0.21025903537236657, 0.21025903537236657, 0.21025903537236657, 0.1837514729383628, 0.1837514729383628, 0.1837514729383628, 0.18824215047157888, 0.18824215047157888, 0.18824215047157888, 0.18087314210040084, 0.18087314210040084, 0.18087314210040084, 0.07816316620174402, 0.07816316620174402, 0.07816316620174402, 0.08830169639322427, 0.08830169639322427, 0.08830169639322427, 0.07123848446676273, 0.07123848446676273, 0.07123848446676273]}, "mutation_prompt": null}
{"id": "a3632741-e8ff-46c5-a7c2-f9f305942ea5", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max)  # Stochastic inertia weight\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Differential Evolution step with adaptive F and stochastic CR\n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)  # Stochastic crossover rate\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Enhanced HybridPSO_DE with stochastic inertia weight and crossover rate to improve diversity and exploration.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c66c4405-aff1-4a2c-828e-7113514ad793", "metadata": {"aucs": [0.5901286324608489, 0.5901286324608489, 0.5901286324608489, 0.5905706616299198, 0.5905706616299198, 0.5905706616299198, 0.6380013440227598, 0.6380013440227598, 0.6380013440227598, 0.3416107388226367, 0.3416107388226367, 0.3416107388226367, 0.3186639155954393, 0.3186639155954393, 0.3186639155954393, 0.30096914256340956, 0.30096914256340956, 0.30096914256340956, 0.11703620592077746, 0.11703620592077746, 0.11703620592077746, 0.06843379050924414, 0.06843379050924414, 0.06843379050924414, 0.08959449300812283, 0.08959449300812283, 0.08959449300812283, 0.077885445826958, 0.077885445826958, 0.077885445826958, 0.09331380932845368, 0.09331380932845368, 0.09331380932845368, 0.11177774945441488, 0.11177774945441488, 0.11177774945441488, 0.9889143210178024, 0.9889143210178024, 0.9889143210178024, 0.9833489652409615, 0.9833489652409615, 0.9833489652409615, 0.9928580157218715, 0.9928580157218715, 0.9928580157218715, 0.15505239465429654, 0.15505239465429654, 0.15505239465429654, 0.35467574668555857, 0.35467574668555857, 0.35467574668555857, 0.0812798308976187, 0.0812798308976187, 0.0812798308976187, 0.5333636351233705, 0.5333636351233705, 0.5333636351233705, 0.15403074729182809, 0.15403074729182809, 0.15403074729182809, 0.6007067075382454, 0.6007067075382454, 0.6007067075382454, 0.21460068774110408, 0.21460068774110408, 0.21460068774110408, 0.10506281274268692, 0.10506281274268692, 0.10506281274268692, 0.2297774355280684, 0.2297774355280684, 0.2297774355280684, 0.11581345112234409, 0.11581345112234409, 0.11581345112234409, 0.17664700788797438, 0.17664700788797438, 0.17664700788797438, 0.19133050514060257, 0.19133050514060257, 0.19133050514060257, 0.038569856843742256, 0.038569856843742256, 0.038569856843742256, 0.01115965970837729, 0.01115965970837729, 0.01115965970837729, 0.020324555660714894, 0.020324555660714894, 0.020324555660714894, 0.08876218737989816, 0.08876218737989816, 0.08876218737989816, 0.11583432343255284, 0.11583432343255284, 0.11583432343255284, 0.18012448942062798, 0.18012448942062798, 0.18012448942062798, 0.030314600764302146, 0.030314600764302146, 0.030314600764302146, 0.05371154024014946, 0.05371154024014946, 0.05371154024014946, 0.06234762828376583, 0.06234762828376583, 0.06234762828376583, 0.06424746625441624, 0.06424746625441624, 0.06424746625441624, 0.0051500200625692605, 0.0051500200625692605, 0.0051500200625692605, 0.07313443995365598, 0.07313443995365598, 0.07313443995365598, 0.4849401939227932, 0.4849401939227932, 0.4849401939227932, 0.5129913081646607, 0.5129913081646607, 0.5129913081646607, 0.49725547231180345, 0.49725547231180345, 0.49725547231180345, 0.05104057615974067, 0.05104057615974067, 0.05104057615974067, 0.1140704834150923, 0.1140704834150923, 0.1140704834150923, 0.08449084131719609, 0.08449084131719609, 0.08449084131719609, 0.19116503026671516, 0.19116503026671516, 0.19116503026671516, 0.25228518748139384, 0.25228518748139384, 0.25228518748139384, 0.17997170941306773, 0.17997170941306773, 0.17997170941306773, 0.3194427931553734, 0.3194427931553734, 0.3194427931553734, 0.33723544481461554, 0.33723544481461554, 0.33723544481461554, 0.3501591315922328, 0.3501591315922328, 0.3501591315922328, 0.18011110962627808, 0.18011110962627808, 0.18011110962627808, 0.18278521312352292, 0.18278521312352292, 0.18278521312352292, 0.26088242077659296, 0.26088242077659296, 0.26088242077659296, 0.203053315124455, 0.203053315124455, 0.203053315124455, 0.2014580360864684, 0.2014580360864684, 0.2014580360864684, 0.17820191196752455, 0.17820191196752455, 0.17820191196752455, 0.18752682198498394, 0.18752682198498394, 0.18752682198498394, 0.2861084916317711, 0.2861084916317711, 0.2861084916317711, 0.196021195144244, 0.196021195144244, 0.196021195144244, 0.1639300498277203, 0.1639300498277203, 0.1639300498277203, 0.18804880988966832, 0.18804880988966832, 0.18804880988966832, 0.13348476700692735, 0.13348476700692735, 0.13348476700692735, 0.14882978892219922, 0.14882978892219922, 0.14882978892219922, 0.20238313607840064, 0.20238313607840064, 0.20238313607840064, 0.21025903537236657, 0.21025903537236657, 0.21025903537236657, 0.1837514729383628, 0.1837514729383628, 0.1837514729383628, 0.18824215047157888, 0.18824215047157888, 0.18824215047157888, 0.18087314210040084, 0.18087314210040084, 0.18087314210040084, 0.07816316620174402, 0.07816316620174402, 0.07816316620174402, 0.08830169639322427, 0.08830169639322427, 0.08830169639322427, 0.07123848446676273, 0.07123848446676273, 0.07123848446676273]}, "mutation_prompt": null}
{"id": "1698ec22-1b86-48a7-87d8-38a3d20433c2", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Adaptive population size reduction\n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            # Differential Evolution step with adaptive F and stochastic CR\n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Improved HybridPSO_DE with adaptive population size reduction for efficient exploration and exploitation.", "configspace": "", "generation": 68, "fitness": 0.2456371021638672, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "c66c4405-aff1-4a2c-828e-7113514ad793", "metadata": {"aucs": [0.6106316833832908, 0.6106316833832908, 0.6106316833832908, 0.6136720820592813, 0.6136720820592813, 0.6136720820592813, 0.6594707127613008, 0.6594707127613008, 0.6594707127613008, 0.42216608862945426, 0.42216608862945426, 0.42216608862945426, 0.41086169997900757, 0.41086169997900757, 0.41086169997900757, 0.39697818583969324, 0.39697818583969324, 0.39697818583969324, 0.11731986014769846, 0.11731986014769846, 0.11731986014769846, 0.06932270858109113, 0.06932270858109113, 0.06932270858109113, 0.09399531667933936, 0.09399531667933936, 0.09399531667933936, 0.09381003647593311, 0.09381003647593311, 0.09381003647593311, 0.09309911233621404, 0.09309911233621404, 0.09309911233621404, 0.10297111679300397, 0.10297111679300397, 0.10297111679300397, 0.9889143210178024, 0.9889143210178024, 0.9889143210178024, 0.9833489652409615, 0.9833489652409615, 0.9833489652409615, 0.9928580157218715, 0.9928580157218715, 0.9928580157218715, 0.2711802630941148, 0.2711802630941148, 0.2711802630941148, 0.40171756601810304, 0.40171756601810304, 0.40171756601810304, 0.08127969663079804, 0.08127969663079804, 0.08127969663079804, 0.5602733688425776, 0.5602733688425776, 0.5602733688425776, 0.15403074729182809, 0.15403074729182809, 0.15403074729182809, 0.6007067075382454, 0.6007067075382454, 0.6007067075382454, 0.2927543318329515, 0.2927543318329515, 0.2927543318329515, 0.10503972218856217, 0.10503972218856217, 0.10503972218856217, 0.20722054953439706, 0.20722054953439706, 0.20722054953439706, 0.11581341043536608, 0.11581341043536608, 0.11581341043536608, 0.18877536598957556, 0.18877536598957556, 0.18877536598957556, 0.20248167162644992, 0.20248167162644992, 0.20248167162644992, 0.039535971971122685, 0.039535971971122685, 0.039535971971122685, 0.013428193935409949, 0.013428193935409949, 0.013428193935409949, 0.012250183746912446, 0.012250183746912446, 0.012250183746912446, 0.08879889496947002, 0.08879889496947002, 0.08879889496947002, 0.10420255401432588, 0.10420255401432588, 0.10420255401432588, 0.18831244245678813, 0.18831244245678813, 0.18831244245678813, 0.030190382731134613, 0.030190382731134613, 0.030190382731134613, 0.05323099139973675, 0.05323099139973675, 0.05323099139973675, 0.060295877854771085, 0.060295877854771085, 0.060295877854771085, 0.0429460651262249, 0.0429460651262249, 0.0429460651262249, 0.005151317937280742, 0.005151317937280742, 0.005151317937280742, 0.07313928936144387, 0.07313928936144387, 0.07313928936144387, 0.4657011563728717, 0.4657011563728717, 0.4657011563728717, 0.5092749929485814, 0.5092749929485814, 0.5092749929485814, 0.5421881210006085, 0.5421881210006085, 0.5421881210006085, 0.051040576160587214, 0.051040576160587214, 0.051040576160587214, 0.1140364914052534, 0.1140364914052534, 0.1140364914052534, 0.08467389181654728, 0.08467389181654728, 0.08467389181654728, 0.19276299373822225, 0.19276299373822225, 0.19276299373822225, 0.2654270081655198, 0.2654270081655198, 0.2654270081655198, 0.17998068669006972, 0.17998068669006972, 0.17998068669006972, 0.3067710527673445, 0.3067710527673445, 0.3067710527673445, 0.3928280281080674, 0.3928280281080674, 0.3928280281080674, 0.37045580551737434, 0.37045580551737434, 0.37045580551737434, 0.17767654946711608, 0.17767654946711608, 0.17767654946711608, 0.18292203259616713, 0.18292203259616713, 0.18292203259616713, 0.270921503444572, 0.270921503444572, 0.270921503444572, 0.20030206104671022, 0.20030206104671022, 0.20030206104671022, 0.2014580360864684, 0.2014580360864684, 0.2014580360864684, 0.18327114061263072, 0.18327114061263072, 0.18327114061263072, 0.1985327440074346, 0.1985327440074346, 0.1985327440074346, 0.2144500770326998, 0.2144500770326998, 0.2144500770326998, 0.19628426185311598, 0.19628426185311598, 0.19628426185311598, 0.16393004969299285, 0.16393004969299285, 0.16393004969299285, 0.18804835210907345, 0.18804835210907345, 0.18804835210907345, 0.13348479861705997, 0.13348479861705997, 0.13348479861705997, 0.14883054093232162, 0.14883054093232162, 0.14883054093232162, 0.20238277363245538, 0.20238277363245538, 0.20238277363245538, 0.210259032691269, 0.210259032691269, 0.210259032691269, 0.1868940983924091, 0.1868940983924091, 0.1868940983924091, 0.18824215047157888, 0.18824215047157888, 0.18824215047157888, 0.18567153664672453, 0.18567153664672453, 0.18567153664672453, 0.07708537366176171, 0.07708537366176171, 0.07708537366176171, 0.08776181270269845, 0.08776181270269845, 0.08776181270269845, 0.0701461532365969, 0.0701461532365969, 0.0701461532365969]}, "mutation_prompt": null}
{"id": "d27833ca-5abc-4d92-8692-3228cc72149a", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - ((self.w_max - self.w_min) * eval_count / self.budget)  # Dynamic inertia weight\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = 0.7 + 0.2 * (eval_count / self.budget)  # Adaptive crossover rate\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Enhanced HybridPSO_DE with dynamic inertia weight and adaptive crossover rate to balance exploration and exploitation.", "configspace": "", "generation": 69, "fitness": 0.21479042959890476, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "1698ec22-1b86-48a7-87d8-38a3d20433c2", "metadata": {"aucs": [0.5549517983653598, 0.5549517983653598, 0.5549517983653598, 0.5988705376081958, 0.5988705376081958, 0.5988705376081958, 0.5549268717982603, 0.5549268717982603, 0.5549268717982603, 0.36346869933884296, 0.36346869933884296, 0.36346869933884296, 0.35296048851250605, 0.35296048851250605, 0.35296048851250605, 0.3307077649825384, 0.3307077649825384, 0.3307077649825384, 0.10325510886204736, 0.10325510886204736, 0.10325510886204736, 0.1291053135704704, 0.1291053135704704, 0.1291053135704704, 0.11081550673474028, 0.11081550673474028, 0.11081550673474028, 0.08994585802952026, 0.08994585802952026, 0.08994585802952026, 0.08622400564875499, 0.08622400564875499, 0.08622400564875499, 0.07833431385466483, 0.07833431385466483, 0.07833431385466483, 0.9948342828324829, 0.9948342828324829, 0.9948342828324829, 0.9917378290820301, 0.9917378290820301, 0.9917378290820301, 0.9954579037138906, 0.9954579037138906, 0.9954579037138906, 0.39664999050704275, 0.39664999050704275, 0.39664999050704275, 0.40286604149858796, 0.40286604149858796, 0.40286604149858796, 0.08000277364276898, 0.08000277364276898, 0.08000277364276898, 0.20103537050048548, 0.20103537050048548, 0.20103537050048548, 0.17711430213704937, 0.17711430213704937, 0.17711430213704937, 0.08712660211833079, 0.08712660211833079, 0.08712660211833079, 0.2317348660403057, 0.2317348660403057, 0.2317348660403057, 0.08889837244833942, 0.08889837244833942, 0.08889837244833942, 0.18114414848647675, 0.18114414848647675, 0.18114414848647675, 0.009964622351856134, 0.009964622351856134, 0.009964622351856134, 0.11516802804450876, 0.11516802804450876, 0.11516802804450876, 0.1803799247215786, 0.1803799247215786, 0.1803799247215786, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00024376365715250703, 0.00024376365715250703, 0.00024376365715250703, 0.04113151892452571, 0.04113151892452571, 0.04113151892452571, 0.04074687173218039, 0.04074687173218039, 0.04074687173218039, 0.07322661219403126, 0.07322661219403126, 0.07322661219403126, 0.01816993280104684, 0.01816993280104684, 0.01816993280104684, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15571789522822832, 0.15571789522822832, 0.15571789522822832, 0.003731234332440936, 0.003731234332440936, 0.003731234332440936, 0.16632049045577246, 0.16632049045577246, 0.16632049045577246, 0.15192969512979104, 0.15192969512979104, 0.15192969512979104, 0.44232116424413703, 0.44232116424413703, 0.44232116424413703, 0.43402415142584627, 0.43402415142584627, 0.43402415142584627, 0.09551444212909754, 0.09551444212909754, 0.09551444212909754, 0.08773469602211226, 0.08773469602211226, 0.08773469602211226, 0.10792091400527137, 0.10792091400527137, 0.10792091400527137, 0.1847974869937713, 0.1847974869937713, 0.1847974869937713, 0.1487266356286553, 0.1487266356286553, 0.1487266356286553, 0.1803078475415143, 0.1803078475415143, 0.1803078475415143, 0.36500031128389554, 0.36500031128389554, 0.36500031128389554, 0.19494524230480825, 0.19494524230480825, 0.19494524230480825, 0.280090801033984, 0.280090801033984, 0.280090801033984, 0.21790336392024678, 0.21790336392024678, 0.21790336392024678, 0.15883789473874732, 0.15883789473874732, 0.15883789473874732, 0.21022637226969532, 0.21022637226969532, 0.21022637226969532, 0.18587133001398992, 0.18587133001398992, 0.18587133001398992, 0.1661282575446068, 0.1661282575446068, 0.1661282575446068, 0.18638950208616945, 0.18638950208616945, 0.18638950208616945, 0.18768220190679819, 0.18768220190679819, 0.18768220190679819, 0.18493039940455114, 0.18493039940455114, 0.18493039940455114, 0.19448276221444116, 0.19448276221444116, 0.19448276221444116, 0.25639588161795934, 0.25639588161795934, 0.25639588161795934, 0.1608660629420119, 0.1608660629420119, 0.1608660629420119, 0.177747734761191, 0.177747734761191, 0.177747734761191, 0.1094646143690905, 0.1094646143690905, 0.1094646143690905, 0.47312655921031177, 0.47312655921031177, 0.47312655921031177, 0.147079215877014, 0.147079215877014, 0.147079215877014, 0.18893187875639683, 0.18893187875639683, 0.18893187875639683, 0.20329979363696216, 0.20329979363696216, 0.20329979363696216, 0.18165737028940532, 0.18165737028940532, 0.18165737028940532, 0.06882231107168446, 0.06882231107168446, 0.06882231107168446, 0.0659791006231184, 0.0659791006231184, 0.0659791006231184, 0.07840529136685404, 0.07840529136685404, 0.07840529136685404]}, "mutation_prompt": null}
{"id": "0c0d7c82-660e-4ef1-8865-16542162d6ee", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_max - ((self.w_max - self.w_min) * (eval_count / self.budget))  # Dynamic inertia weight\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Adaptive population size reduction\n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            # Differential Evolution step with adaptive F and dynamic CR\n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = 0.6 + 0.3 * (1.0 - eval_count / self.budget)  # Dynamic crossover rate\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Enhanced HybridPSO_DE with dynamic inertia weight and adaptive crossover strategy for better convergence.", "configspace": "", "generation": 70, "fitness": 0.20518356839997984, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "1698ec22-1b86-48a7-87d8-38a3d20433c2", "metadata": {"aucs": [0.5263303032396618, 0.5263303032396618, 0.5263303032396618, 0.15690166006569306, 0.15690166006569306, 0.15690166006569306, 0.5565667130763201, 0.5565667130763201, 0.5565667130763201, 0.02257795722960887, 0.02257795722960887, 0.02257795722960887, 0.35535903652684864, 0.35535903652684864, 0.35535903652684864, 0.3211407723618239, 0.3211407723618239, 0.3211407723618239, 0.09587545802259556, 0.09587545802259556, 0.09587545802259556, 0.10400557430751856, 0.10400557430751856, 0.10400557430751856, 0.10096651227095588, 0.10096651227095588, 0.10096651227095588, 0.08554311336483789, 0.08554311336483789, 0.08554311336483789, 0.09500180315214124, 0.09500180315214124, 0.09500180315214124, 0.08597323213006036, 0.08597323213006036, 0.08597323213006036, 0.9922865206102239, 0.9922865206102239, 0.9922865206102239, 0.9924656805613338, 0.9924656805613338, 0.9924656805613338, 0.9947013152335029, 0.9947013152335029, 0.9947013152335029, 0.05751408696354354, 0.05751408696354354, 0.05751408696354354, 0.4335046958272415, 0.4335046958272415, 0.4335046958272415, 0.08452285601654907, 0.08452285601654907, 0.08452285601654907, 0.19393898710364388, 0.19393898710364388, 0.19393898710364388, 0.06826106446680802, 0.06826106446680802, 0.06826106446680802, 0.2704371060995079, 0.2704371060995079, 0.2704371060995079, 0.1444299747899953, 0.1444299747899953, 0.1444299747899953, 0.1510846971025811, 0.1510846971025811, 0.1510846971025811, 0.1754654262875729, 0.1754654262875729, 0.1754654262875729, 0.015914750551073276, 0.015914750551073276, 0.015914750551073276, 0.17542615414781615, 0.17542615414781615, 0.17542615414781615, 0.16728655400153725, 0.16728655400153725, 0.16728655400153725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020389567552759003, 0.020389567552759003, 0.020389567552759003, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03426708359478092, 0.03426708359478092, 0.03426708359478092, 0.03393098739363176, 0.03393098739363176, 0.03393098739363176, 0.050093143347250235, 0.050093143347250235, 0.050093143347250235, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04306835380158358, 0.04306835380158358, 0.04306835380158358, 0.0468678040564775, 0.0468678040564775, 0.0468678040564775, 0.16381104793010504, 0.16381104793010504, 0.16381104793010504, 0.12520230515048292, 0.12520230515048292, 0.12520230515048292, 0.05603338905448907, 0.05603338905448907, 0.05603338905448907, 0.1514321556570134, 0.1514321556570134, 0.1514321556570134, 0.18039247481042475, 0.18039247481042475, 0.18039247481042475, 0.4440608430816698, 0.4440608430816698, 0.4440608430816698, 0.06318983188739058, 0.06318983188739058, 0.06318983188739058, 0.07741928708662904, 0.07741928708662904, 0.07741928708662904, 0.10002708000054572, 0.10002708000054572, 0.10002708000054572, 0.1375005152506752, 0.1375005152506752, 0.1375005152506752, 0.20606531597056787, 0.20606531597056787, 0.20606531597056787, 0.1766249342080095, 0.1766249342080095, 0.1766249342080095, 0.29425598467792347, 0.29425598467792347, 0.29425598467792347, 0.2565669786725533, 0.2565669786725533, 0.2565669786725533, 0.30612664567695536, 0.30612664567695536, 0.30612664567695536, 0.24413080763238704, 0.24413080763238704, 0.24413080763238704, 0.16654518842716848, 0.16654518842716848, 0.16654518842716848, 0.26449212183630777, 0.26449212183630777, 0.26449212183630777, 0.17665324522396608, 0.17665324522396608, 0.17665324522396608, 0.15983921910951104, 0.15983921910951104, 0.15983921910951104, 0.1765009875052942, 0.1765009875052942, 0.1765009875052942, 0.1794327873248439, 0.1794327873248439, 0.1794327873248439, 0.18448289592871636, 0.18448289592871636, 0.18448289592871636, 0.1812788516332483, 0.1812788516332483, 0.1812788516332483, 0.5966257742079561, 0.5966257742079561, 0.5966257742079561, 0.14410422694028568, 0.14410422694028568, 0.14410422694028568, 0.17915515232949497, 0.17915515232949497, 0.17915515232949497, 0.31885659876835504, 0.31885659876835504, 0.31885659876835504, 0.43009227451014254, 0.43009227451014254, 0.43009227451014254, 0.18517682709877448, 0.18517682709877448, 0.18517682709877448, 0.18771770473339333, 0.18771770473339333, 0.18771770473339333, 0.1961780524394512, 0.1961780524394512, 0.1961780524394512, 0.18356616089714384, 0.18356616089714384, 0.18356616089714384, 0.07513983929682477, 0.07513983929682477, 0.07513983929682477, 0.07820338496919688, 0.07820338496919688, 0.07820338496919688, 0.07393708961317313, 0.07393708961317313, 0.07393708961317313]}, "mutation_prompt": null}
{"id": "807d6bb6-38a0-49dc-a4be-79ca0ec04eac", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                momentum = 0.5 * V[i]  # Incorporate momentum\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i]) + momentum\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Adaptive population size reduction\n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            # Differential Evolution step with adaptive F and stochastic CR\n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = 0.8 + 0.1 * np.cos(5 * np.pi * eval_count / self.budget)  # Adaptive CR\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Enhanced HybridPSO_DE with momentum-based velocity update and adaptive crossover rate for improved convergence.", "configspace": "", "generation": 71, "fitness": 0.11461257927496539, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.19.", "error": "", "parent_id": "1698ec22-1b86-48a7-87d8-38a3d20433c2", "metadata": {"aucs": [0.17915280130914502, 0.17915280130914502, 0.17915280130914502, 0.1622013240002037, 0.1622013240002037, 0.1622013240002037, 0.13794887401398814, 0.13794887401398814, 0.13794887401398814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03061677379259309, 0.03061677379259309, 0.03061677379259309, 0.053981138724985445, 0.053981138724985445, 0.053981138724985445, 0.03706761037644468, 0.03706761037644468, 0.03706761037644468, 0.015694030373299084, 0.015694030373299084, 0.015694030373299084, 0.029919833516395378, 0.029919833516395378, 0.029919833516395378, 0.02895552012933078, 0.02895552012933078, 0.02895552012933078, 0.9933023191470823, 0.9933023191470823, 0.9933023191470823, 0.9885039015836014, 0.9885039015836014, 0.9885039015836014, 0.9938238390743241, 0.9938238390743241, 0.9938238390743241, 0.04940939835085012, 0.04940939835085012, 0.04940939835085012, 0.07944842243551264, 0.07944842243551264, 0.07944842243551264, 0.0669504201064014, 0.0669504201064014, 0.0669504201064014, 0.12648435831567773, 0.12648435831567773, 0.12648435831567773, 0.05914862565517065, 0.05914862565517065, 0.05914862565517065, 0.07832373623599065, 0.07832373623599065, 0.07832373623599065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013624418825447515, 0.0013624418825447515, 0.0013624418825447515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008142669809936498, 0.008142669809936498, 0.008142669809936498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008973139481923353, 0.008973139481923353, 0.008973139481923353, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029913272322263373, 0.029913272322263373, 0.029913272322263373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010561263230147944, 0.010561263230147944, 0.010561263230147944, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1837754993281282, 0.1837754993281282, 0.1837754993281282, 0.1362849527840424, 0.1362849527840424, 0.1362849527840424, 0.17927499277182035, 0.17927499277182035, 0.17927499277182035, 0.04442479147271838, 0.04442479147271838, 0.04442479147271838, 0.051629085461109336, 0.051629085461109336, 0.051629085461109336, 0.037313716824295406, 0.037313716824295406, 0.037313716824295406, 0.14109538259331145, 0.14109538259331145, 0.14109538259331145, 0.12026817296496373, 0.12026817296496373, 0.12026817296496373, 0.15607331938045266, 0.15607331938045266, 0.15607331938045266, 0.18866701299159738, 0.18866701299159738, 0.18866701299159738, 0.1562402986255289, 0.1562402986255289, 0.1562402986255289, 0.15393370995288702, 0.15393370995288702, 0.15393370995288702, 0.06732541704270534, 0.06732541704270534, 0.06732541704270534, 0.09072828838673053, 0.09072828838673053, 0.09072828838673053, 0.11232991243554336, 0.11232991243554336, 0.11232991243554336, 0.1605402458875802, 0.1605402458875802, 0.1605402458875802, 0.1486113547619652, 0.1486113547619652, 0.1486113547619652, 0.17051052593150018, 0.17051052593150018, 0.17051052593150018, 0.12732953556047655, 0.12732953556047655, 0.12732953556047655, 0.1260985345861353, 0.1260985345861353, 0.1260985345861353, 0.11537293663179826, 0.11537293663179826, 0.11537293663179826, 0.1190169472490672, 0.1190169472490672, 0.1190169472490672, 0.10187720973014258, 0.10187720973014258, 0.10187720973014258, 0.0816189847976857, 0.0816189847976857, 0.0816189847976857, 0.14881609010660213, 0.14881609010660213, 0.14881609010660213, 0.10160996016929935, 0.10160996016929935, 0.10160996016929935, 0.1826694072655377, 0.1826694072655377, 0.1826694072655377, 0.18209086244101758, 0.18209086244101758, 0.18209086244101758, 0.17298586690855922, 0.17298586690855922, 0.17298586690855922, 0.17297642201228103, 0.17297642201228103, 0.17297642201228103, 0.04450192805211062, 0.04450192805211062, 0.04450192805211062, 0.04630644878061352, 0.04630644878061352, 0.04630644878061352, 0.05832218004148948, 0.05832218004148948, 0.05832218004148948]}, "mutation_prompt": null}
{"id": "1a03f3a6-aaf8-481d-a2e1-42651ad1247e", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Adaptive population size reduction\n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            # Differential Evolution step with adaptive F and stochastic CR\n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Improved HybridPSO_DE with adaptive population size reduction for efficient exploration and exploitation.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1698ec22-1b86-48a7-87d8-38a3d20433c2", "metadata": {"aucs": [0.6106316833832908, 0.6106316833832908, 0.6106316833832908, 0.6136720820592813, 0.6136720820592813, 0.6136720820592813, 0.6594707127613008, 0.6594707127613008, 0.6594707127613008, 0.42216608862945426, 0.42216608862945426, 0.42216608862945426, 0.41086169997900757, 0.41086169997900757, 0.41086169997900757, 0.39697818583969324, 0.39697818583969324, 0.39697818583969324, 0.11731986014769846, 0.11731986014769846, 0.11731986014769846, 0.06932270858109113, 0.06932270858109113, 0.06932270858109113, 0.09399531667933936, 0.09399531667933936, 0.09399531667933936, 0.09381003647593311, 0.09381003647593311, 0.09381003647593311, 0.09309911233621404, 0.09309911233621404, 0.09309911233621404, 0.10297111679300397, 0.10297111679300397, 0.10297111679300397, 0.9889143210178024, 0.9889143210178024, 0.9889143210178024, 0.9833489652409615, 0.9833489652409615, 0.9833489652409615, 0.9928580157218715, 0.9928580157218715, 0.9928580157218715, 0.2711802630941148, 0.2711802630941148, 0.2711802630941148, 0.40171756601810304, 0.40171756601810304, 0.40171756601810304, 0.08127969663079804, 0.08127969663079804, 0.08127969663079804, 0.5602733688425776, 0.5602733688425776, 0.5602733688425776, 0.15403074729182809, 0.15403074729182809, 0.15403074729182809, 0.6007067075382454, 0.6007067075382454, 0.6007067075382454, 0.2927543318329515, 0.2927543318329515, 0.2927543318329515, 0.10503972218856217, 0.10503972218856217, 0.10503972218856217, 0.20722054953439706, 0.20722054953439706, 0.20722054953439706, 0.11581341043536608, 0.11581341043536608, 0.11581341043536608, 0.18877536598957556, 0.18877536598957556, 0.18877536598957556, 0.20248167162644992, 0.20248167162644992, 0.20248167162644992, 0.039535971971122685, 0.039535971971122685, 0.039535971971122685, 0.013428193935409949, 0.013428193935409949, 0.013428193935409949, 0.012250183746912446, 0.012250183746912446, 0.012250183746912446, 0.08879889496947002, 0.08879889496947002, 0.08879889496947002, 0.10420255401432588, 0.10420255401432588, 0.10420255401432588, 0.18831244245678813, 0.18831244245678813, 0.18831244245678813, 0.030190382731134613, 0.030190382731134613, 0.030190382731134613, 0.05323099139973675, 0.05323099139973675, 0.05323099139973675, 0.060295877854771085, 0.060295877854771085, 0.060295877854771085, 0.0429460651262249, 0.0429460651262249, 0.0429460651262249, 0.005151317937280742, 0.005151317937280742, 0.005151317937280742, 0.07313928936144387, 0.07313928936144387, 0.07313928936144387, 0.4657011563728717, 0.4657011563728717, 0.4657011563728717, 0.5092749929485814, 0.5092749929485814, 0.5092749929485814, 0.5421881210006085, 0.5421881210006085, 0.5421881210006085, 0.051040576160587214, 0.051040576160587214, 0.051040576160587214, 0.1140364914052534, 0.1140364914052534, 0.1140364914052534, 0.08467389181654728, 0.08467389181654728, 0.08467389181654728, 0.19276299373822225, 0.19276299373822225, 0.19276299373822225, 0.2654270081655198, 0.2654270081655198, 0.2654270081655198, 0.17998068669006972, 0.17998068669006972, 0.17998068669006972, 0.3067710527673445, 0.3067710527673445, 0.3067710527673445, 0.3928280281080674, 0.3928280281080674, 0.3928280281080674, 0.37045580551737434, 0.37045580551737434, 0.37045580551737434, 0.17767654946711608, 0.17767654946711608, 0.17767654946711608, 0.18292203259616713, 0.18292203259616713, 0.18292203259616713, 0.270921503444572, 0.270921503444572, 0.270921503444572, 0.20030206104671022, 0.20030206104671022, 0.20030206104671022, 0.2014580360864684, 0.2014580360864684, 0.2014580360864684, 0.18327114061263072, 0.18327114061263072, 0.18327114061263072, 0.1985327440074346, 0.1985327440074346, 0.1985327440074346, 0.2144500770326998, 0.2144500770326998, 0.2144500770326998, 0.19628426185311598, 0.19628426185311598, 0.19628426185311598, 0.16393004969299285, 0.16393004969299285, 0.16393004969299285, 0.18804835210907345, 0.18804835210907345, 0.18804835210907345, 0.13348479861705997, 0.13348479861705997, 0.13348479861705997, 0.14883054093232162, 0.14883054093232162, 0.14883054093232162, 0.20238277363245538, 0.20238277363245538, 0.20238277363245538, 0.210259032691269, 0.210259032691269, 0.210259032691269, 0.1868940983924091, 0.1868940983924091, 0.1868940983924091, 0.18824215047157888, 0.18824215047157888, 0.18824215047157888, 0.18567153664672453, 0.18567153664672453, 0.18567153664672453, 0.07708537366176171, 0.07708537366176171, 0.07708537366176171, 0.08776181270269845, 0.08776181270269845, 0.08776181270269845, 0.0701461532365969, 0.0701461532365969, 0.0701461532365969]}, "mutation_prompt": null}
{"id": "d2424477-d5c2-47b8-8ad6-aaf11d7655c4", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            # Dynamic inertia weight adjustment\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Adaptive population size reduction\n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            # Differential Evolution step with adaptive F and stochastic CR\n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Enhanced HybridPSO_DE by incorporating dynamic inertia weight adjustment and random forest-based mutation to potentially improve convergence.", "configspace": "", "generation": 73, "fitness": 0.21132328390346952, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.21.", "error": "", "parent_id": "1698ec22-1b86-48a7-87d8-38a3d20433c2", "metadata": {"aucs": [0.5596276336612712, 0.5596276336612712, 0.5596276336612712, 0.1803414763959823, 0.1803414763959823, 0.1803414763959823, 0.5692045066265137, 0.5692045066265137, 0.5692045066265137, 0.3718020938137785, 0.3718020938137785, 0.3718020938137785, 0.3202381077871813, 0.3202381077871813, 0.3202381077871813, 0.28947183495808704, 0.28947183495808704, 0.28947183495808704, 0.06043835910051565, 0.06043835910051565, 0.06043835910051565, 0.09616053456051177, 0.09616053456051177, 0.09616053456051177, 0.0977959179281308, 0.0977959179281308, 0.0977959179281308, 0.08302375739144263, 0.08302375739144263, 0.08302375739144263, 0.08660551014819162, 0.08660551014819162, 0.08660551014819162, 0.07661901087693745, 0.07661901087693745, 0.07661901087693745, 0.9949027836087875, 0.9949027836087875, 0.9949027836087875, 0.9879909812919189, 0.9879909812919189, 0.9879909812919189, 0.9945885396236807, 0.9945885396236807, 0.9945885396236807, 0.3767072540764411, 0.3767072540764411, 0.3767072540764411, 0.13494555235915762, 0.13494555235915762, 0.13494555235915762, 0.087763413926081, 0.087763413926081, 0.087763413926081, 0.1970968182993751, 0.1970968182993751, 0.1970968182993751, 0.06819237084022622, 0.06819237084022622, 0.06819237084022622, 0.5431908551027664, 0.5431908551027664, 0.5431908551027664, 0.07850576612223559, 0.07850576612223559, 0.07850576612223559, 0.06923091485909094, 0.06923091485909094, 0.06923091485909094, 0.1279158113507991, 0.1279158113507991, 0.1279158113507991, 0.014885097313087847, 0.014885097313087847, 0.014885097313087847, 0.10349264532381053, 0.10349264532381053, 0.10349264532381053, 0.21807444954769728, 0.21807444954769728, 0.21807444954769728, 0.028167906585562896, 0.028167906585562896, 0.028167906585562896, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035555244615909087, 0.0035555244615909087, 0.0035555244615909087, 0.09453183487469918, 0.09453183487469918, 0.09453183487469918, 0.03052122508898425, 0.03052122508898425, 0.03052122508898425, 0.07076723135027041, 0.07076723135027041, 0.07076723135027041, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04787194288397989, 0.04787194288397989, 0.04787194288397989, 0.04895399605998796, 0.04895399605998796, 0.04895399605998796, 0.1572280104363768, 0.1572280104363768, 0.1572280104363768, 0.003956366657703936, 0.003956366657703936, 0.003956366657703936, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3895204815929668, 0.3895204815929668, 0.3895204815929668, 0.4595422730924741, 0.4595422730924741, 0.4595422730924741, 0.4216990400029784, 0.4216990400029784, 0.4216990400029784, 0.09724796988276252, 0.09724796988276252, 0.09724796988276252, 0.07955995471520072, 0.07955995471520072, 0.07955995471520072, 0.09549349927837414, 0.09549349927837414, 0.09549349927837414, 0.14898113443446126, 0.14898113443446126, 0.14898113443446126, 0.20367240382302598, 0.20367240382302598, 0.20367240382302598, 0.17668074439794923, 0.17668074439794923, 0.17668074439794923, 0.2581092269373241, 0.2581092269373241, 0.2581092269373241, 0.3344355064991392, 0.3344355064991392, 0.3344355064991392, 0.24563471565260364, 0.24563471565260364, 0.24563471565260364, 0.19732663212524604, 0.19732663212524604, 0.19732663212524604, 0.1667959844660878, 0.1667959844660878, 0.1667959844660878, 0.2245801420645842, 0.2245801420645842, 0.2245801420645842, 0.1735066742477267, 0.1735066742477267, 0.1735066742477267, 0.19602990619865102, 0.19602990619865102, 0.19602990619865102, 0.18745662501872762, 0.18745662501872762, 0.18745662501872762, 0.1772312673638411, 0.1772312673638411, 0.1772312673638411, 0.4366539109857508, 0.4366539109857508, 0.4366539109857508, 0.17093871170260988, 0.17093871170260988, 0.17093871170260988, 0.23863127114335425, 0.23863127114335425, 0.23863127114335425, 0.17973679864939784, 0.17973679864939784, 0.17973679864939784, 0.09492257462212805, 0.09492257462212805, 0.09492257462212805, 0.168318767719991, 0.168318767719991, 0.168318767719991, 0.45258899943012065, 0.45258899943012065, 0.45258899943012065, 0.14583948749473186, 0.14583948749473186, 0.14583948749473186, 0.1832386275047101, 0.1832386275047101, 0.1832386275047101, 0.19256924044389945, 0.19256924044389945, 0.19256924044389945, 0.19232440348546842, 0.19232440348546842, 0.19232440348546842, 0.07105338649473447, 0.07105338649473447, 0.07105338649473447, 0.10543246681680352, 0.10543246681680352, 0.10543246681680352, 0.07485757746912403, 0.07485757746912403, 0.07485757746912403]}, "mutation_prompt": null}
{"id": "6f6a52ad-45d0-4b92-8de9-59df8c552cf6", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max * np.random.rand())  # Modified inertia weight\n            \n            # Particle Swarm Optimization step\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()  # Dynamic learning coefficients\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            # Adaptive population size reduction\n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            # Differential Evolution step with adaptive F and stochastic CR\n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "A refined HybridPSO_DE with randomized adaptive inertia and dynamic learning coefficients for enhanced convergence.", "configspace": "", "generation": 74, "fitness": 0.338178704895153, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.26.", "error": "", "parent_id": "1698ec22-1b86-48a7-87d8-38a3d20433c2", "metadata": {"aucs": [0.799325859369717, 0.799325859369717, 0.799325859369717, 0.7957589749190069, 0.7957589749190069, 0.7957589749190069, 0.8010979264926836, 0.8010979264926836, 0.8010979264926836, 0.5851724370369209, 0.5851724370369209, 0.5851724370369209, 0.4356178073427982, 0.4356178073427982, 0.4356178073427982, 0.5944364595068203, 0.5944364595068203, 0.5944364595068203, 0.11664657858497818, 0.11664657858497818, 0.11664657858497818, 0.4375227357045657, 0.4375227357045657, 0.4375227357045657, 0.1606929533402246, 0.1606929533402246, 0.1606929533402246, 0.1372997075212865, 0.1372997075212865, 0.1372997075212865, 0.11002524338480302, 0.11002524338480302, 0.11002524338480302, 0.13833754320511726, 0.13833754320511726, 0.13833754320511726, 0.9942492228394203, 0.9942492228394203, 0.9942492228394203, 0.990568588712438, 0.990568588712438, 0.990568588712438, 0.9937431901078089, 0.9937431901078089, 0.9937431901078089, 0.6113809327192673, 0.6113809327192673, 0.6113809327192673, 0.5215230416291485, 0.5215230416291485, 0.5215230416291485, 0.60906561053325, 0.60906561053325, 0.60906561053325, 0.2264047263710367, 0.2264047263710367, 0.2264047263710367, 0.18902643812423603, 0.18902643812423603, 0.18902643812423603, 0.7530967292225256, 0.7530967292225256, 0.7530967292225256, 0.5855854187547095, 0.5855854187547095, 0.5855854187547095, 0.3387968750924917, 0.3387968750924917, 0.3387968750924917, 0.490312208285416, 0.490312208285416, 0.490312208285416, 0.5474416185752133, 0.5474416185752133, 0.5474416185752133, 0.12445608327990798, 0.12445608327990798, 0.12445608327990798, 0.45935518542248777, 0.45935518542248777, 0.45935518542248777, 0.04524088910966928, 0.04524088910966928, 0.04524088910966928, 0.028236412005091416, 0.028236412005091416, 0.028236412005091416, 0.1800333472144039, 0.1800333472144039, 0.1800333472144039, 0.27449735191237856, 0.27449735191237856, 0.27449735191237856, 0.17042264009951036, 0.17042264009951036, 0.17042264009951036, 0.10835033646463921, 0.10835033646463921, 0.10835033646463921, 0.04572713984802179, 0.04572713984802179, 0.04572713984802179, 0.12112630547096637, 0.12112630547096637, 0.12112630547096637, 0.09270292500650557, 0.09270292500650557, 0.09270292500650557, 0.20859215999495384, 0.20859215999495384, 0.20859215999495384, 0.1902170852672892, 0.1902170852672892, 0.1902170852672892, 0.10622625231283767, 0.10622625231283767, 0.10622625231283767, 0.696383116007887, 0.696383116007887, 0.696383116007887, 0.6210495638461028, 0.6210495638461028, 0.6210495638461028, 0.6261019155338721, 0.6261019155338721, 0.6261019155338721, 0.13395955741819743, 0.13395955741819743, 0.13395955741819743, 0.12204323050626442, 0.12204323050626442, 0.12204323050626442, 0.1351630299459845, 0.1351630299459845, 0.1351630299459845, 0.15266129976301268, 0.15266129976301268, 0.15266129976301268, 0.14982247215481515, 0.14982247215481515, 0.14982247215481515, 0.22111230378358637, 0.22111230378358637, 0.22111230378358637, 0.3812317722731112, 0.3812317722731112, 0.3812317722731112, 0.43069390053569145, 0.43069390053569145, 0.43069390053569145, 0.5019254826498925, 0.5019254826498925, 0.5019254826498925, 0.2688836116123243, 0.2688836116123243, 0.2688836116123243, 0.31784030508141436, 0.31784030508141436, 0.31784030508141436, 0.2574721858010517, 0.2574721858010517, 0.2574721858010517, 0.19537355416639612, 0.19537355416639612, 0.19537355416639612, 0.20186683377435333, 0.20186683377435333, 0.20186683377435333, 0.21552590405227756, 0.21552590405227756, 0.21552590405227756, 0.6439137198629268, 0.6439137198629268, 0.6439137198629268, 0.2052724306042646, 0.2052724306042646, 0.2052724306042646, 0.2303532351524613, 0.2303532351524613, 0.2303532351524613, 0.16480758760282865, 0.16480758760282865, 0.16480758760282865, 0.8565789385690692, 0.8565789385690692, 0.8565789385690692, 0.09973912392630846, 0.09973912392630846, 0.09973912392630846, 0.15382771043874277, 0.15382771043874277, 0.15382771043874277, 0.2042817328495099, 0.2042817328495099, 0.2042817328495099, 0.2120666407692111, 0.2120666407692111, 0.2120666407692111, 0.17951520220928918, 0.17951520220928918, 0.17951520220928918, 0.18545259517861878, 0.18545259517861878, 0.18545259517861878, 0.19783276587637377, 0.19783276587637377, 0.19783276587637377, 0.09123485204396908, 0.09123485204396908, 0.09123485204396908, 0.09294255229431014, 0.09294255229431014, 0.09294255229431014, 0.08362468538235313, 0.08362468538235313, 0.08362468538235313]}, "mutation_prompt": null}
{"id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max * np.random.rand())\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < 0.1:  # Introduce Gaussian perturbations occasionally\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Introducing an enhanced local search mechanism with Gaussian perturbations for improved exploitation capabilities.", "configspace": "", "generation": 75, "fitness": 0.36048352316894533, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.27.", "error": "", "parent_id": "6f6a52ad-45d0-4b92-8de9-59df8c552cf6", "metadata": {"aucs": [0.784546575066596, 0.784546575066596, 0.784546575066596, 0.7983457316899751, 0.7983457316899751, 0.7983457316899751, 0.8046482938921573, 0.8046482938921573, 0.8046482938921573, 0.6293421161011454, 0.6293421161011454, 0.6293421161011454, 0.476315199256659, 0.476315199256659, 0.476315199256659, 0.6428184260909617, 0.6428184260909617, 0.6428184260909617, 0.15281741541064275, 0.15281741541064275, 0.15281741541064275, 0.1605870172611601, 0.1605870172611601, 0.1605870172611601, 0.1262527259101447, 0.1262527259101447, 0.1262527259101447, 0.10421958297932599, 0.10421958297932599, 0.10421958297932599, 0.09061185291706042, 0.09061185291706042, 0.09061185291706042, 0.14298010164844455, 0.14298010164844455, 0.14298010164844455, 0.991919214456532, 0.991919214456532, 0.991919214456532, 0.9834967913264329, 0.9834967913264329, 0.9834967913264329, 0.9922004384876167, 0.9922004384876167, 0.9922004384876167, 0.6171649110667088, 0.6171649110667088, 0.6171649110667088, 0.6093474625310874, 0.6093474625310874, 0.6093474625310874, 0.6681841948952487, 0.6681841948952487, 0.6681841948952487, 0.7231561929103991, 0.7231561929103991, 0.7231561929103991, 0.7483525838035276, 0.7483525838035276, 0.7483525838035276, 0.7641709609975564, 0.7641709609975564, 0.7641709609975564, 0.3558538606518069, 0.3558538606518069, 0.3558538606518069, 0.4434689443708798, 0.4434689443708798, 0.4434689443708798, 0.474427464240863, 0.474427464240863, 0.474427464240863, 0.19486403695161347, 0.19486403695161347, 0.19486403695161347, 0.39606019408614357, 0.39606019408614357, 0.39606019408614357, 0.43766700877335807, 0.43766700877335807, 0.43766700877335807, 0.05227565121267019, 0.05227565121267019, 0.05227565121267019, 0.024445000539802586, 0.024445000539802586, 0.024445000539802586, 0.24788539585541491, 0.24788539585541491, 0.24788539585541491, 0.03193047673178351, 0.03193047673178351, 0.03193047673178351, 0.15861613850749912, 0.15861613850749912, 0.15861613850749912, 0.23600901561217758, 0.23600901561217758, 0.23600901561217758, 0.03971875429773375, 0.03971875429773375, 0.03971875429773375, 0.09205971040343097, 0.09205971040343097, 0.09205971040343097, 0.08876119652174153, 0.08876119652174153, 0.08876119652174153, 0.32108111478833157, 0.32108111478833157, 0.32108111478833157, 0.4051939756958536, 0.4051939756958536, 0.4051939756958536, 0.2627328708161678, 0.2627328708161678, 0.2627328708161678, 0.6065254670854281, 0.6065254670854281, 0.6065254670854281, 0.6502152026556987, 0.6502152026556987, 0.6502152026556987, 0.7382109653380294, 0.7382109653380294, 0.7382109653380294, 0.08608597181054733, 0.08608597181054733, 0.08608597181054733, 0.12514048757700602, 0.12514048757700602, 0.12514048757700602, 0.1338803750781784, 0.1338803750781784, 0.1338803750781784, 0.15912704406139933, 0.15912704406139933, 0.15912704406139933, 0.3309877469479974, 0.3309877469479974, 0.3309877469479974, 0.6930572326221238, 0.6930572326221238, 0.6930572326221238, 0.29711380197545056, 0.29711380197545056, 0.29711380197545056, 0.4767158630745717, 0.4767158630745717, 0.4767158630745717, 0.43907316397957097, 0.43907316397957097, 0.43907316397957097, 0.37129581647105625, 0.37129581647105625, 0.37129581647105625, 0.2784187717827563, 0.2784187717827563, 0.2784187717827563, 0.3106202582958515, 0.3106202582958515, 0.3106202582958515, 0.19415969470092465, 0.19415969470092465, 0.19415969470092465, 0.2062594470059843, 0.2062594470059843, 0.2062594470059843, 0.20560289769650197, 0.20560289769650197, 0.20560289769650197, 0.2030185618117213, 0.2030185618117213, 0.2030185618117213, 0.23603295165804816, 0.23603295165804816, 0.23603295165804816, 0.19950437774953633, 0.19950437774953633, 0.19950437774953633, 0.18306930156838175, 0.18306930156838175, 0.18306930156838175, 0.8595010371132848, 0.8595010371132848, 0.8595010371132848, 0.18631922257951306, 0.18631922257951306, 0.18631922257951306, 0.153332609011547, 0.153332609011547, 0.153332609011547, 0.31217708695611357, 0.31217708695611357, 0.31217708695611357, 0.21310444308002885, 0.21310444308002885, 0.21310444308002885, 0.19407021119711287, 0.19407021119711287, 0.19407021119711287, 0.1939543670881929, 0.1939543670881929, 0.1939543670881929, 0.18819490609958867, 0.18819490609958867, 0.18819490609958867, 0.0899581287922836, 0.0899581287922836, 0.0899581287922836, 0.08388284232792143, 0.08388284232792143, 0.08388284232792143, 0.08167481421506162, 0.08167481421506162, 0.08167481421506162]}, "mutation_prompt": null}
{"id": "ea5ff455-07ae-4de6-9d42-53f9d03266ad", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max * np.random.rand())\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.4 and self.pop_size > 5:\n                self.pop_size = max(5, int(self.pop_size * 0.95))\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < 0.15:  # Increase frequency of Gaussian perturbations\n                perturbation = np.random.normal(0, 0.2, self.dim)  # Enhance perturbation magnitude\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Amplifying exploration by adaptive population resizing and enhanced perturbation strategy.", "configspace": "", "generation": 76, "fitness": 0.33975181981720426, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.7759813893929877, 0.7759813893929877, 0.7759813893929877, 0.8010995410128934, 0.8010995410128934, 0.8010995410128934, 0.8082411773276589, 0.8082411773276589, 0.8082411773276589, 0.07467541443397618, 0.07467541443397618, 0.07467541443397618, 0.1214329367447664, 0.1214329367447664, 0.1214329367447664, 0.0166531129598132, 0.0166531129598132, 0.0166531129598132, 0.1265214031834857, 0.1265214031834857, 0.1265214031834857, 0.13479174209153566, 0.13479174209153566, 0.13479174209153566, 0.13119795433155756, 0.13119795433155756, 0.13119795433155756, 0.10422985325428857, 0.10422985325428857, 0.10422985325428857, 0.10600727281124378, 0.10600727281124378, 0.10600727281124378, 0.14821933712387636, 0.14821933712387636, 0.14821933712387636, 0.991919214456532, 0.991919214456532, 0.991919214456532, 0.9834967913264329, 0.9834967913264329, 0.9834967913264329, 0.9922004384876167, 0.9922004384876167, 0.9922004384876167, 0.6288287950442644, 0.6288287950442644, 0.6288287950442644, 0.6146347048189025, 0.6146347048189025, 0.6146347048189025, 0.6596689336451861, 0.6596689336451861, 0.6596689336451861, 0.2217717408944201, 0.2217717408944201, 0.2217717408944201, 0.7968597208501642, 0.7968597208501642, 0.7968597208501642, 0.7482736999889923, 0.7482736999889923, 0.7482736999889923, 0.37703752631226617, 0.37703752631226617, 0.37703752631226617, 0.12782034812159038, 0.12782034812159038, 0.12782034812159038, 0.47002236327606506, 0.47002236327606506, 0.47002236327606506, 0.17187507487087406, 0.17187507487087406, 0.17187507487087406, 0.41398772816946283, 0.41398772816946283, 0.41398772816946283, 0.43694733755729376, 0.43694733755729376, 0.43694733755729376, 0.0021803545914131917, 0.0021803545914131917, 0.0021803545914131917, 0.031662419622816906, 0.031662419622816906, 0.031662419622816906, 0.33552585173270566, 0.33552585173270566, 0.33552585173270566, 0.08459148471825484, 0.08459148471825484, 0.08459148471825484, 0.12410924840469473, 0.12410924840469473, 0.12410924840469473, 0.2014915116373287, 0.2014915116373287, 0.2014915116373287, 0.12618379800856128, 0.12618379800856128, 0.12618379800856128, 0.079610621046598, 0.079610621046598, 0.079610621046598, 0.08967695823455635, 0.08967695823455635, 0.08967695823455635, 0.2506392526038075, 0.2506392526038075, 0.2506392526038075, 0.3106970806114224, 0.3106970806114224, 0.3106970806114224, 0.3125574908859674, 0.3125574908859674, 0.3125574908859674, 0.6234563022636578, 0.6234563022636578, 0.6234563022636578, 0.7112744720020104, 0.7112744720020104, 0.7112744720020104, 0.6675836394970454, 0.6675836394970454, 0.6675836394970454, 0.08539704234447909, 0.08539704234447909, 0.08539704234447909, 0.10468051498720665, 0.10468051498720665, 0.10468051498720665, 0.12475236482394048, 0.12475236482394048, 0.12475236482394048, 0.16003742020342526, 0.16003742020342526, 0.16003742020342526, 0.4219912580052506, 0.4219912580052506, 0.4219912580052506, 0.5721128522450767, 0.5721128522450767, 0.5721128522450767, 0.27037622969999464, 0.27037622969999464, 0.27037622969999464, 0.41539638712846105, 0.41539638712846105, 0.41539638712846105, 0.4831869854827603, 0.4831869854827603, 0.4831869854827603, 0.320209010623993, 0.320209010623993, 0.320209010623993, 0.3634468577628913, 0.3634468577628913, 0.3634468577628913, 0.2800517653866327, 0.2800517653866327, 0.2800517653866327, 0.18945607586686208, 0.18945607586686208, 0.18945607586686208, 0.20606486318155381, 0.20606486318155381, 0.20606486318155381, 0.23152266961780155, 0.23152266961780155, 0.23152266961780155, 0.2256030546004979, 0.2256030546004979, 0.2256030546004979, 0.6419381035027079, 0.6419381035027079, 0.6419381035027079, 0.18458614822428399, 0.18458614822428399, 0.18458614822428399, 0.18287446932172813, 0.18287446932172813, 0.18287446932172813, 0.8654966489703686, 0.8654966489703686, 0.8654966489703686, 0.18635832235468142, 0.18635832235468142, 0.18635832235468142, 0.15327316518039547, 0.15327316518039547, 0.15327316518039547, 0.7973071370930619, 0.7973071370930619, 0.7973071370930619, 0.21303731020386196, 0.21303731020386196, 0.21303731020386196, 0.2031097271244655, 0.2031097271244655, 0.2031097271244655, 0.1787093684454285, 0.1787093684454285, 0.1787093684454285, 0.2093754113593097, 0.2093754113593097, 0.2093754113593097, 0.08079557911195245, 0.08079557911195245, 0.08079557911195245, 0.08767275386512718, 0.08767275386512718, 0.08767275386512718, 0.0876754917715189, 0.0876754917715189, 0.0876754917715189]}, "mutation_prompt": null}
{"id": "4e8391ea-1298-46ec-807a-fd346340f234", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            diversity = np.mean(np.std(X, axis=0))\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget) * (diversity / (self.ub - self.lb))\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < min(0.1, 0.2 * diversity):  # Adaptive perturbation frequency based on diversity\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Introducing adaptive inertia and perturbation frequency based on population diversity for enhanced balance between exploration and exploitation.", "configspace": "", "generation": 77, "fitness": 0.15381954651677424, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.26907930626750054, 0.26907930626750054, 0.26907930626750054, 0.28660773797342887, 0.28660773797342887, 0.28660773797342887, 0.3153850616642059, 0.3153850616642059, 0.3153850616642059, 0.00043232312815799645, 0.00043232312815799645, 0.00043232312815799645, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06779331837131652, 0.06779331837131652, 0.06779331837131652, 0.06185686131442958, 0.06185686131442958, 0.06185686131442958, 0.06306055219932916, 0.06306055219932916, 0.06306055219932916, 0.06027576894783959, 0.06027576894783959, 0.06027576894783959, 0.05541926691577104, 0.05541926691577104, 0.05541926691577104, 0.065621988535433, 0.065621988535433, 0.065621988535433, 0.991754815567769, 0.991754815567769, 0.991754815567769, 0.9941493066312876, 0.9941493066312876, 0.9941493066312876, 0.9940303657537798, 0.9940303657537798, 0.9940303657537798, 0.12893896857307718, 0.12893896857307718, 0.12893896857307718, 0.1921043066531507, 0.1921043066531507, 0.1921043066531507, 0.10775784618750017, 0.10775784618750017, 0.10775784618750017, 0.17725510293227076, 0.17725510293227076, 0.17725510293227076, 0.181187936734994, 0.181187936734994, 0.181187936734994, 0.17857767715635564, 0.17857767715635564, 0.17857767715635564, 0.07957287218326581, 0.07957287218326581, 0.07957287218326581, 0.08192022142803634, 0.08192022142803634, 0.08192022142803634, 0.08520634065401078, 0.08520634065401078, 0.08520634065401078, 0.06968649342066457, 0.06968649342066457, 0.06968649342066457, 0.03710309915812282, 0.03710309915812282, 0.03710309915812282, 0.08428184778318448, 0.08428184778318448, 0.08428184778318448, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040172922606315664, 0.040172922606315664, 0.040172922606315664, 0.05760011294686995, 0.05760011294686995, 0.05760011294686995, 0.03646777174367821, 0.03646777174367821, 0.03646777174367821, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020591721861834222, 0.020591721861834222, 0.020591721861834222, 0.013931079511997235, 0.013931079511997235, 0.013931079511997235, 0.032240361744329094, 0.032240361744329094, 0.032240361744329094, 0.27118640307231723, 0.27118640307231723, 0.27118640307231723, 0.2713318544243901, 0.2713318544243901, 0.2713318544243901, 0.2800390186063825, 0.2800390186063825, 0.2800390186063825, 0.04554897781719047, 0.04554897781719047, 0.04554897781719047, 0.06783921152758665, 0.06783921152758665, 0.06783921152758665, 0.08173710467866346, 0.08173710467866346, 0.08173710467866346, 0.1589264101200879, 0.1589264101200879, 0.1589264101200879, 0.12765029280734563, 0.12765029280734563, 0.12765029280734563, 0.15906926386647446, 0.15906926386647446, 0.15906926386647446, 0.20274830776382613, 0.20274830776382613, 0.20274830776382613, 0.17681703066623145, 0.17681703066623145, 0.17681703066623145, 0.2208603677423484, 0.2208603677423484, 0.2208603677423484, 0.16225644979961396, 0.16225644979961396, 0.16225644979961396, 0.12833331064206055, 0.12833331064206055, 0.12833331064206055, 0.15470962318282833, 0.15470962318282833, 0.15470962318282833, 0.1563100156485573, 0.1563100156485573, 0.1563100156485573, 0.1716373178437416, 0.1716373178437416, 0.1716373178437416, 0.16270685600982382, 0.16270685600982382, 0.16270685600982382, 0.1602960682511615, 0.1602960682511615, 0.1602960682511615, 0.15326354135892029, 0.15326354135892029, 0.15326354135892029, 0.1596158437029469, 0.1596158437029469, 0.1596158437029469, 0.14789910229211478, 0.14789910229211478, 0.14789910229211478, 0.17428054129481385, 0.17428054129481385, 0.17428054129481385, 0.1531849356559969, 0.1531849356559969, 0.1531849356559969, 0.16712069383028594, 0.16712069383028594, 0.16712069383028594, 0.17439626411496445, 0.17439626411496445, 0.17439626411496445, 0.21005965061679865, 0.21005965061679865, 0.21005965061679865, 0.18553322794365168, 0.18553322794365168, 0.18553322794365168, 0.17992825319889472, 0.17992825319889472, 0.17992825319889472, 0.1913238173046542, 0.1913238173046542, 0.1913238173046542, 0.05954880382548655, 0.05954880382548655, 0.05954880382548655, 0.0639199721193594, 0.0639199721193594, 0.0639199721193594, 0.06406546092831977, 0.06406546092831977, 0.06406546092831977]}, "mutation_prompt": null}
{"id": "78e6820b-cbf1-481c-8fad-6abf08d99cf1", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            diversity = np.mean(np.std(X, axis=0))\n            w = self.w_min + (self.w_max - self.w_min) * (diversity / 5.0)\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n            \n            if np.random.rand() < 0.1:  # Introduce Gaussian perturbations occasionally\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Incrementally enhance exploration by adding an adaptive inertia weight scheme based on diversity.", "configspace": "", "generation": 78, "fitness": 0.322535538138468, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.7712835566064253, 0.7712835566064253, 0.7712835566064253, 0.8173097104562662, 0.8173097104562662, 0.8173097104562662, 0.8185270818577202, 0.8185270818577202, 0.8185270818577202, 0.6394552276693719, 0.6394552276693719, 0.6394552276693719, 0.5567766170096269, 0.5567766170096269, 0.5567766170096269, 0.620852565017852, 0.620852565017852, 0.620852565017852, 0.1407546625321705, 0.1407546625321705, 0.1407546625321705, 0.1348246908707752, 0.1348246908707752, 0.1348246908707752, 0.12872557706728271, 0.12872557706728271, 0.12872557706728271, 0.12046450808060805, 0.12046450808060805, 0.12046450808060805, 0.11124506469851947, 0.11124506469851947, 0.11124506469851947, 0.14504362803682147, 0.14504362803682147, 0.14504362803682147, 0.9910481472501914, 0.9910481472501914, 0.9910481472501914, 0.9940581729299077, 0.9940581729299077, 0.9940581729299077, 0.9967835060248166, 0.9967835060248166, 0.9967835060248166, 0.5896128496856178, 0.5896128496856178, 0.5896128496856178, 0.5443783386053884, 0.5443783386053884, 0.5443783386053884, 0.5882898023867537, 0.5882898023867537, 0.5882898023867537, 0.170493310511719, 0.170493310511719, 0.170493310511719, 0.11496454202700046, 0.11496454202700046, 0.11496454202700046, 0.13085849280579587, 0.13085849280579587, 0.13085849280579587, 0.3585354288153465, 0.3585354288153465, 0.3585354288153465, 0.3209944155483331, 0.3209944155483331, 0.3209944155483331, 0.43611561038557933, 0.43611561038557933, 0.43611561038557933, 0.1294246449899149, 0.1294246449899149, 0.1294246449899149, 0.48913617260245823, 0.48913617260245823, 0.48913617260245823, 0.11270612188482032, 0.11270612188482032, 0.11270612188482032, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03918648927403123, 0.03918648927403123, 0.03918648927403123, 0.006389538526565097, 0.006389538526565097, 0.006389538526565097, 0.09673298400383479, 0.09673298400383479, 0.09673298400383479, 0.05784404545786148, 0.05784404545786148, 0.05784404545786148, 0.17335817931298192, 0.17335817931298192, 0.17335817931298192, 0.045555994149206525, 0.045555994149206525, 0.045555994149206525, 0.08745713835477542, 0.08745713835477542, 0.08745713835477542, 0.2627436950137213, 0.2627436950137213, 0.2627436950137213, 0.3021018353175845, 0.3021018353175845, 0.3021018353175845, 0.4124926394926921, 0.4124926394926921, 0.4124926394926921, 0.29374130649696184, 0.29374130649696184, 0.29374130649696184, 0.5688746321409348, 0.5688746321409348, 0.5688746321409348, 0.6011952570315111, 0.6011952570315111, 0.6011952570315111, 0.6496595112691885, 0.6496595112691885, 0.6496595112691885, 0.07144476737924721, 0.07144476737924721, 0.07144476737924721, 0.12332041939447991, 0.12332041939447991, 0.12332041939447991, 0.14509079196100738, 0.14509079196100738, 0.14509079196100738, 0.33403862979025956, 0.33403862979025956, 0.33403862979025956, 0.30739939716328357, 0.30739939716328357, 0.30739939716328357, 0.18293973221347348, 0.18293973221347348, 0.18293973221347348, 0.5207672341390057, 0.5207672341390057, 0.5207672341390057, 0.4405648818049043, 0.4405648818049043, 0.4405648818049043, 0.5347757597220848, 0.5347757597220848, 0.5347757597220848, 0.2229674943845964, 0.2229674943845964, 0.2229674943845964, 0.21011888774249954, 0.21011888774249954, 0.21011888774249954, 0.30992030010721117, 0.30992030010721117, 0.30992030010721117, 0.18936087120173806, 0.18936087120173806, 0.18936087120173806, 0.1896777358407139, 0.1896777358407139, 0.1896777358407139, 0.21193429778991002, 0.21193429778991002, 0.21193429778991002, 0.18477681563395776, 0.18477681563395776, 0.18477681563395776, 0.2232898359929275, 0.2232898359929275, 0.2232898359929275, 0.21497687451687075, 0.21497687451687075, 0.21497687451687075, 0.8156845858435596, 0.8156845858435596, 0.8156845858435596, 0.17566015299352766, 0.17566015299352766, 0.17566015299352766, 0.16372930418626874, 0.16372930418626874, 0.16372930418626874, 0.15464632524134103, 0.15464632524134103, 0.15464632524134103, 0.718035977938934, 0.718035977938934, 0.718035977938934, 0.2132708668319847, 0.2132708668319847, 0.2132708668319847, 0.18401899110495112, 0.18401899110495112, 0.18401899110495112, 0.173924613487917, 0.173924613487917, 0.173924613487917, 0.18643581977000157, 0.18643581977000157, 0.18643581977000157, 0.08855171346628721, 0.08855171346628721, 0.08855171346628721, 0.07514115638439434, 0.07514115638439434, 0.07514115638439434, 0.08599881974342316, 0.08599881974342316, 0.08599881974342316]}, "mutation_prompt": null}
{"id": "cd038cdc-aa4f-48b4-968c-af50b9b13daf", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max * np.random.rand())\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < 0.1:  # Introduce Gaussian perturbations occasionally\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Introducing an enhanced local search mechanism with Gaussian perturbations for improved exploitation capabilities.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.784546575066596, 0.784546575066596, 0.784546575066596, 0.7983457316899751, 0.7983457316899751, 0.7983457316899751, 0.8046482938921573, 0.8046482938921573, 0.8046482938921573, 0.6293421161011454, 0.6293421161011454, 0.6293421161011454, 0.476315199256659, 0.476315199256659, 0.476315199256659, 0.6428184260909617, 0.6428184260909617, 0.6428184260909617, 0.15281741541064275, 0.15281741541064275, 0.15281741541064275, 0.1605870172611601, 0.1605870172611601, 0.1605870172611601, 0.1262527259101447, 0.1262527259101447, 0.1262527259101447, 0.10421958297932599, 0.10421958297932599, 0.10421958297932599, 0.09061185291706042, 0.09061185291706042, 0.09061185291706042, 0.14298010164844455, 0.14298010164844455, 0.14298010164844455, 0.991919214456532, 0.991919214456532, 0.991919214456532, 0.9834967913264329, 0.9834967913264329, 0.9834967913264329, 0.9922004384876167, 0.9922004384876167, 0.9922004384876167, 0.6171649110667088, 0.6171649110667088, 0.6171649110667088, 0.6093474625310874, 0.6093474625310874, 0.6093474625310874, 0.6681841948952487, 0.6681841948952487, 0.6681841948952487, 0.7231561929103991, 0.7231561929103991, 0.7231561929103991, 0.7483525838035276, 0.7483525838035276, 0.7483525838035276, 0.7641709609975564, 0.7641709609975564, 0.7641709609975564, 0.3558538606518069, 0.3558538606518069, 0.3558538606518069, 0.4434689443708798, 0.4434689443708798, 0.4434689443708798, 0.474427464240863, 0.474427464240863, 0.474427464240863, 0.19486403695161347, 0.19486403695161347, 0.19486403695161347, 0.39606019408614357, 0.39606019408614357, 0.39606019408614357, 0.43766700877335807, 0.43766700877335807, 0.43766700877335807, 0.05227565121267019, 0.05227565121267019, 0.05227565121267019, 0.024445000539802586, 0.024445000539802586, 0.024445000539802586, 0.24788539585541491, 0.24788539585541491, 0.24788539585541491, 0.03193047673178351, 0.03193047673178351, 0.03193047673178351, 0.15861613850749912, 0.15861613850749912, 0.15861613850749912, 0.23600901561217758, 0.23600901561217758, 0.23600901561217758, 0.03971875429773375, 0.03971875429773375, 0.03971875429773375, 0.09205971040343097, 0.09205971040343097, 0.09205971040343097, 0.08876119652174153, 0.08876119652174153, 0.08876119652174153, 0.32108111478833157, 0.32108111478833157, 0.32108111478833157, 0.4051939756958536, 0.4051939756958536, 0.4051939756958536, 0.2627328708161678, 0.2627328708161678, 0.2627328708161678, 0.6065254670854281, 0.6065254670854281, 0.6065254670854281, 0.6502152026556987, 0.6502152026556987, 0.6502152026556987, 0.7382109653380294, 0.7382109653380294, 0.7382109653380294, 0.08608597181054733, 0.08608597181054733, 0.08608597181054733, 0.12514048757700602, 0.12514048757700602, 0.12514048757700602, 0.1338803750781784, 0.1338803750781784, 0.1338803750781784, 0.15912704406139933, 0.15912704406139933, 0.15912704406139933, 0.3309877469479974, 0.3309877469479974, 0.3309877469479974, 0.6930572326221238, 0.6930572326221238, 0.6930572326221238, 0.29711380197545056, 0.29711380197545056, 0.29711380197545056, 0.4767158630745717, 0.4767158630745717, 0.4767158630745717, 0.43907316397957097, 0.43907316397957097, 0.43907316397957097, 0.37129581647105625, 0.37129581647105625, 0.37129581647105625, 0.2784187717827563, 0.2784187717827563, 0.2784187717827563, 0.3106202582958515, 0.3106202582958515, 0.3106202582958515, 0.19415969470092465, 0.19415969470092465, 0.19415969470092465, 0.2062594470059843, 0.2062594470059843, 0.2062594470059843, 0.20560289769650197, 0.20560289769650197, 0.20560289769650197, 0.2030185618117213, 0.2030185618117213, 0.2030185618117213, 0.23603295165804816, 0.23603295165804816, 0.23603295165804816, 0.19950437774953633, 0.19950437774953633, 0.19950437774953633, 0.18306930156838175, 0.18306930156838175, 0.18306930156838175, 0.8595010371132848, 0.8595010371132848, 0.8595010371132848, 0.18631922257951306, 0.18631922257951306, 0.18631922257951306, 0.153332609011547, 0.153332609011547, 0.153332609011547, 0.31217708695611357, 0.31217708695611357, 0.31217708695611357, 0.21310444308002885, 0.21310444308002885, 0.21310444308002885, 0.19407021119711287, 0.19407021119711287, 0.19407021119711287, 0.1939543670881929, 0.1939543670881929, 0.1939543670881929, 0.18819490609958867, 0.18819490609958867, 0.18819490609958867, 0.0899581287922836, 0.0899581287922836, 0.0899581287922836, 0.08388284232792143, 0.08388284232792143, 0.08388284232792143, 0.08167481421506162, 0.08167481421506162, 0.08167481421506162]}, "mutation_prompt": null}
{"id": "f4216b8c-feb0-43f8-9274-16691bdbbbd9", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max * np.random.rand())\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < 0.1:  # Introduce Gaussian perturbations occasionally\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Introducing an enhanced local search mechanism with Gaussian perturbations for improved exploitation capabilities.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.784546575066596, 0.784546575066596, 0.784546575066596, 0.7983457316899751, 0.7983457316899751, 0.7983457316899751, 0.8046482938921573, 0.8046482938921573, 0.8046482938921573, 0.6293421161011454, 0.6293421161011454, 0.6293421161011454, 0.476315199256659, 0.476315199256659, 0.476315199256659, 0.6428184260909617, 0.6428184260909617, 0.6428184260909617, 0.15281741541064275, 0.15281741541064275, 0.15281741541064275, 0.1605870172611601, 0.1605870172611601, 0.1605870172611601, 0.1262527259101447, 0.1262527259101447, 0.1262527259101447, 0.10421958297932599, 0.10421958297932599, 0.10421958297932599, 0.09061185291706042, 0.09061185291706042, 0.09061185291706042, 0.14298010164844455, 0.14298010164844455, 0.14298010164844455, 0.991919214456532, 0.991919214456532, 0.991919214456532, 0.9834967913264329, 0.9834967913264329, 0.9834967913264329, 0.9922004384876167, 0.9922004384876167, 0.9922004384876167, 0.6171649110667088, 0.6171649110667088, 0.6171649110667088, 0.6093474625310874, 0.6093474625310874, 0.6093474625310874, 0.6681841948952487, 0.6681841948952487, 0.6681841948952487, 0.7231561929103991, 0.7231561929103991, 0.7231561929103991, 0.7483525838035276, 0.7483525838035276, 0.7483525838035276, 0.7641709609975564, 0.7641709609975564, 0.7641709609975564, 0.3558538606518069, 0.3558538606518069, 0.3558538606518069, 0.4434689443708798, 0.4434689443708798, 0.4434689443708798, 0.474427464240863, 0.474427464240863, 0.474427464240863, 0.19486403695161347, 0.19486403695161347, 0.19486403695161347, 0.39606019408614357, 0.39606019408614357, 0.39606019408614357, 0.43766700877335807, 0.43766700877335807, 0.43766700877335807, 0.05227565121267019, 0.05227565121267019, 0.05227565121267019, 0.024445000539802586, 0.024445000539802586, 0.024445000539802586, 0.24788539585541491, 0.24788539585541491, 0.24788539585541491, 0.03193047673178351, 0.03193047673178351, 0.03193047673178351, 0.15861613850749912, 0.15861613850749912, 0.15861613850749912, 0.23600901561217758, 0.23600901561217758, 0.23600901561217758, 0.03971875429773375, 0.03971875429773375, 0.03971875429773375, 0.09205971040343097, 0.09205971040343097, 0.09205971040343097, 0.08876119652174153, 0.08876119652174153, 0.08876119652174153, 0.32108111478833157, 0.32108111478833157, 0.32108111478833157, 0.4051939756958536, 0.4051939756958536, 0.4051939756958536, 0.2627328708161678, 0.2627328708161678, 0.2627328708161678, 0.6065254670854281, 0.6065254670854281, 0.6065254670854281, 0.6502152026556987, 0.6502152026556987, 0.6502152026556987, 0.7382109653380294, 0.7382109653380294, 0.7382109653380294, 0.08608597181054733, 0.08608597181054733, 0.08608597181054733, 0.12514048757700602, 0.12514048757700602, 0.12514048757700602, 0.1338803750781784, 0.1338803750781784, 0.1338803750781784, 0.15912704406139933, 0.15912704406139933, 0.15912704406139933, 0.3309877469479974, 0.3309877469479974, 0.3309877469479974, 0.6930572326221238, 0.6930572326221238, 0.6930572326221238, 0.29711380197545056, 0.29711380197545056, 0.29711380197545056, 0.4767158630745717, 0.4767158630745717, 0.4767158630745717, 0.43907316397957097, 0.43907316397957097, 0.43907316397957097, 0.37129581647105625, 0.37129581647105625, 0.37129581647105625, 0.2784187717827563, 0.2784187717827563, 0.2784187717827563, 0.3106202582958515, 0.3106202582958515, 0.3106202582958515, 0.19415969470092465, 0.19415969470092465, 0.19415969470092465, 0.2062594470059843, 0.2062594470059843, 0.2062594470059843, 0.20560289769650197, 0.20560289769650197, 0.20560289769650197, 0.2030185618117213, 0.2030185618117213, 0.2030185618117213, 0.23603295165804816, 0.23603295165804816, 0.23603295165804816, 0.19950437774953633, 0.19950437774953633, 0.19950437774953633, 0.18306930156838175, 0.18306930156838175, 0.18306930156838175, 0.8595010371132848, 0.8595010371132848, 0.8595010371132848, 0.18631922257951306, 0.18631922257951306, 0.18631922257951306, 0.153332609011547, 0.153332609011547, 0.153332609011547, 0.31217708695611357, 0.31217708695611357, 0.31217708695611357, 0.21310444308002885, 0.21310444308002885, 0.21310444308002885, 0.19407021119711287, 0.19407021119711287, 0.19407021119711287, 0.1939543670881929, 0.1939543670881929, 0.1939543670881929, 0.18819490609958867, 0.18819490609958867, 0.18819490609958867, 0.0899581287922836, 0.0899581287922836, 0.0899581287922836, 0.08388284232792143, 0.08388284232792143, 0.08388284232792143, 0.08167481421506162, 0.08167481421506162, 0.08167481421506162]}, "mutation_prompt": null}
{"id": "60572dc2-d0c6-4581-a67d-5239e0f25f6a", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max * np.random.rand())\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < 0.1:  # Introduce Gaussian perturbations occasionally\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Introducing an enhanced local search mechanism with Gaussian perturbations for improved exploitation capabilities.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.784546575066596, 0.784546575066596, 0.784546575066596, 0.7983457316899751, 0.7983457316899751, 0.7983457316899751, 0.8046482938921573, 0.8046482938921573, 0.8046482938921573, 0.6293421161011454, 0.6293421161011454, 0.6293421161011454, 0.476315199256659, 0.476315199256659, 0.476315199256659, 0.6428184260909617, 0.6428184260909617, 0.6428184260909617, 0.15281741541064275, 0.15281741541064275, 0.15281741541064275, 0.1605870172611601, 0.1605870172611601, 0.1605870172611601, 0.1262527259101447, 0.1262527259101447, 0.1262527259101447, 0.10421958297932599, 0.10421958297932599, 0.10421958297932599, 0.09061185291706042, 0.09061185291706042, 0.09061185291706042, 0.14298010164844455, 0.14298010164844455, 0.14298010164844455, 0.991919214456532, 0.991919214456532, 0.991919214456532, 0.9834967913264329, 0.9834967913264329, 0.9834967913264329, 0.9922004384876167, 0.9922004384876167, 0.9922004384876167, 0.6171649110667088, 0.6171649110667088, 0.6171649110667088, 0.6093474625310874, 0.6093474625310874, 0.6093474625310874, 0.6681841948952487, 0.6681841948952487, 0.6681841948952487, 0.7231561929103991, 0.7231561929103991, 0.7231561929103991, 0.7483525838035276, 0.7483525838035276, 0.7483525838035276, 0.7641709609975564, 0.7641709609975564, 0.7641709609975564, 0.3558538606518069, 0.3558538606518069, 0.3558538606518069, 0.4434689443708798, 0.4434689443708798, 0.4434689443708798, 0.474427464240863, 0.474427464240863, 0.474427464240863, 0.19486403695161347, 0.19486403695161347, 0.19486403695161347, 0.39606019408614357, 0.39606019408614357, 0.39606019408614357, 0.43766700877335807, 0.43766700877335807, 0.43766700877335807, 0.05227565121267019, 0.05227565121267019, 0.05227565121267019, 0.024445000539802586, 0.024445000539802586, 0.024445000539802586, 0.24788539585541491, 0.24788539585541491, 0.24788539585541491, 0.03193047673178351, 0.03193047673178351, 0.03193047673178351, 0.15861613850749912, 0.15861613850749912, 0.15861613850749912, 0.23600901561217758, 0.23600901561217758, 0.23600901561217758, 0.03971875429773375, 0.03971875429773375, 0.03971875429773375, 0.09205971040343097, 0.09205971040343097, 0.09205971040343097, 0.08876119652174153, 0.08876119652174153, 0.08876119652174153, 0.32108111478833157, 0.32108111478833157, 0.32108111478833157, 0.4051939756958536, 0.4051939756958536, 0.4051939756958536, 0.2627328708161678, 0.2627328708161678, 0.2627328708161678, 0.6065254670854281, 0.6065254670854281, 0.6065254670854281, 0.6502152026556987, 0.6502152026556987, 0.6502152026556987, 0.7382109653380294, 0.7382109653380294, 0.7382109653380294, 0.08608597181054733, 0.08608597181054733, 0.08608597181054733, 0.12514048757700602, 0.12514048757700602, 0.12514048757700602, 0.1338803750781784, 0.1338803750781784, 0.1338803750781784, 0.15912704406139933, 0.15912704406139933, 0.15912704406139933, 0.3309877469479974, 0.3309877469479974, 0.3309877469479974, 0.6930572326221238, 0.6930572326221238, 0.6930572326221238, 0.29711380197545056, 0.29711380197545056, 0.29711380197545056, 0.4767158630745717, 0.4767158630745717, 0.4767158630745717, 0.43907316397957097, 0.43907316397957097, 0.43907316397957097, 0.37129581647105625, 0.37129581647105625, 0.37129581647105625, 0.2784187717827563, 0.2784187717827563, 0.2784187717827563, 0.3106202582958515, 0.3106202582958515, 0.3106202582958515, 0.19415969470092465, 0.19415969470092465, 0.19415969470092465, 0.2062594470059843, 0.2062594470059843, 0.2062594470059843, 0.20560289769650197, 0.20560289769650197, 0.20560289769650197, 0.2030185618117213, 0.2030185618117213, 0.2030185618117213, 0.23603295165804816, 0.23603295165804816, 0.23603295165804816, 0.19950437774953633, 0.19950437774953633, 0.19950437774953633, 0.18306930156838175, 0.18306930156838175, 0.18306930156838175, 0.8595010371132848, 0.8595010371132848, 0.8595010371132848, 0.18631922257951306, 0.18631922257951306, 0.18631922257951306, 0.153332609011547, 0.153332609011547, 0.153332609011547, 0.31217708695611357, 0.31217708695611357, 0.31217708695611357, 0.21310444308002885, 0.21310444308002885, 0.21310444308002885, 0.19407021119711287, 0.19407021119711287, 0.19407021119711287, 0.1939543670881929, 0.1939543670881929, 0.1939543670881929, 0.18819490609958867, 0.18819490609958867, 0.18819490609958867, 0.0899581287922836, 0.0899581287922836, 0.0899581287922836, 0.08388284232792143, 0.08388284232792143, 0.08388284232792143, 0.08167481421506162, 0.08167481421506162, 0.08167481421506162]}, "mutation_prompt": null}
{"id": "c0697f4f-ee37-4ff7-a4e9-3cdd13f08020", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max * np.random.rand())\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < 0.1:  # Introduce Gaussian perturbations occasionally\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Introducing an enhanced local search mechanism with Gaussian perturbations for improved exploitation capabilities.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.784546575066596, 0.784546575066596, 0.784546575066596, 0.7983457316899751, 0.7983457316899751, 0.7983457316899751, 0.8046482938921573, 0.8046482938921573, 0.8046482938921573, 0.6293421161011454, 0.6293421161011454, 0.6293421161011454, 0.476315199256659, 0.476315199256659, 0.476315199256659, 0.6428184260909617, 0.6428184260909617, 0.6428184260909617, 0.15281741541064275, 0.15281741541064275, 0.15281741541064275, 0.1605870172611601, 0.1605870172611601, 0.1605870172611601, 0.1262527259101447, 0.1262527259101447, 0.1262527259101447, 0.10421958297932599, 0.10421958297932599, 0.10421958297932599, 0.09061185291706042, 0.09061185291706042, 0.09061185291706042, 0.14298010164844455, 0.14298010164844455, 0.14298010164844455, 0.991919214456532, 0.991919214456532, 0.991919214456532, 0.9834967913264329, 0.9834967913264329, 0.9834967913264329, 0.9922004384876167, 0.9922004384876167, 0.9922004384876167, 0.6171649110667088, 0.6171649110667088, 0.6171649110667088, 0.6093474625310874, 0.6093474625310874, 0.6093474625310874, 0.6681841948952487, 0.6681841948952487, 0.6681841948952487, 0.7231561929103991, 0.7231561929103991, 0.7231561929103991, 0.7483525838035276, 0.7483525838035276, 0.7483525838035276, 0.7641709609975564, 0.7641709609975564, 0.7641709609975564, 0.3558538606518069, 0.3558538606518069, 0.3558538606518069, 0.4434689443708798, 0.4434689443708798, 0.4434689443708798, 0.474427464240863, 0.474427464240863, 0.474427464240863, 0.19486403695161347, 0.19486403695161347, 0.19486403695161347, 0.39606019408614357, 0.39606019408614357, 0.39606019408614357, 0.43766700877335807, 0.43766700877335807, 0.43766700877335807, 0.05227565121267019, 0.05227565121267019, 0.05227565121267019, 0.024445000539802586, 0.024445000539802586, 0.024445000539802586, 0.24788539585541491, 0.24788539585541491, 0.24788539585541491, 0.03193047673178351, 0.03193047673178351, 0.03193047673178351, 0.15861613850749912, 0.15861613850749912, 0.15861613850749912, 0.23600901561217758, 0.23600901561217758, 0.23600901561217758, 0.03971875429773375, 0.03971875429773375, 0.03971875429773375, 0.09205971040343097, 0.09205971040343097, 0.09205971040343097, 0.08876119652174153, 0.08876119652174153, 0.08876119652174153, 0.32108111478833157, 0.32108111478833157, 0.32108111478833157, 0.4051939756958536, 0.4051939756958536, 0.4051939756958536, 0.2627328708161678, 0.2627328708161678, 0.2627328708161678, 0.6065254670854281, 0.6065254670854281, 0.6065254670854281, 0.6502152026556987, 0.6502152026556987, 0.6502152026556987, 0.7382109653380294, 0.7382109653380294, 0.7382109653380294, 0.08608597181054733, 0.08608597181054733, 0.08608597181054733, 0.12514048757700602, 0.12514048757700602, 0.12514048757700602, 0.1338803750781784, 0.1338803750781784, 0.1338803750781784, 0.15912704406139933, 0.15912704406139933, 0.15912704406139933, 0.3309877469479974, 0.3309877469479974, 0.3309877469479974, 0.6930572326221238, 0.6930572326221238, 0.6930572326221238, 0.29711380197545056, 0.29711380197545056, 0.29711380197545056, 0.4767158630745717, 0.4767158630745717, 0.4767158630745717, 0.43907316397957097, 0.43907316397957097, 0.43907316397957097, 0.37129581647105625, 0.37129581647105625, 0.37129581647105625, 0.2784187717827563, 0.2784187717827563, 0.2784187717827563, 0.3106202582958515, 0.3106202582958515, 0.3106202582958515, 0.19415969470092465, 0.19415969470092465, 0.19415969470092465, 0.2062594470059843, 0.2062594470059843, 0.2062594470059843, 0.20560289769650197, 0.20560289769650197, 0.20560289769650197, 0.2030185618117213, 0.2030185618117213, 0.2030185618117213, 0.23603295165804816, 0.23603295165804816, 0.23603295165804816, 0.19950437774953633, 0.19950437774953633, 0.19950437774953633, 0.18306930156838175, 0.18306930156838175, 0.18306930156838175, 0.8595010371132848, 0.8595010371132848, 0.8595010371132848, 0.18631922257951306, 0.18631922257951306, 0.18631922257951306, 0.153332609011547, 0.153332609011547, 0.153332609011547, 0.31217708695611357, 0.31217708695611357, 0.31217708695611357, 0.21310444308002885, 0.21310444308002885, 0.21310444308002885, 0.19407021119711287, 0.19407021119711287, 0.19407021119711287, 0.1939543670881929, 0.1939543670881929, 0.1939543670881929, 0.18819490609958867, 0.18819490609958867, 0.18819490609958867, 0.0899581287922836, 0.0899581287922836, 0.0899581287922836, 0.08388284232792143, 0.08388284232792143, 0.08388284232792143, 0.08167481421506162, 0.08167481421506162, 0.08167481421506162]}, "mutation_prompt": null}
{"id": "63449adf-3f79-4555-b71a-e7bd7eaf216a", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max * np.random.rand())\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < 0.1:  # Introduce Gaussian perturbations occasionally\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Integrating adaptive learning rates for velocity updates and dynamic mutation scaling for enhanced exploration.", "configspace": "", "generation": 83, "fitness": 0.36048352316894533, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.27.", "error": "", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.784546575066596, 0.784546575066596, 0.784546575066596, 0.7983457316899751, 0.7983457316899751, 0.7983457316899751, 0.8046482938921573, 0.8046482938921573, 0.8046482938921573, 0.6293421161011454, 0.6293421161011454, 0.6293421161011454, 0.476315199256659, 0.476315199256659, 0.476315199256659, 0.6428184260909617, 0.6428184260909617, 0.6428184260909617, 0.15281741541064275, 0.15281741541064275, 0.15281741541064275, 0.1605870172611601, 0.1605870172611601, 0.1605870172611601, 0.1262527259101447, 0.1262527259101447, 0.1262527259101447, 0.10421958297932599, 0.10421958297932599, 0.10421958297932599, 0.09061185291706042, 0.09061185291706042, 0.09061185291706042, 0.14298010164844455, 0.14298010164844455, 0.14298010164844455, 0.991919214456532, 0.991919214456532, 0.991919214456532, 0.9834967913264329, 0.9834967913264329, 0.9834967913264329, 0.9922004384876167, 0.9922004384876167, 0.9922004384876167, 0.6171649110667088, 0.6171649110667088, 0.6171649110667088, 0.6093474625310874, 0.6093474625310874, 0.6093474625310874, 0.6681841948952487, 0.6681841948952487, 0.6681841948952487, 0.7231561929103991, 0.7231561929103991, 0.7231561929103991, 0.7483525838035276, 0.7483525838035276, 0.7483525838035276, 0.7641709609975564, 0.7641709609975564, 0.7641709609975564, 0.3558538606518069, 0.3558538606518069, 0.3558538606518069, 0.4434689443708798, 0.4434689443708798, 0.4434689443708798, 0.474427464240863, 0.474427464240863, 0.474427464240863, 0.19486403695161347, 0.19486403695161347, 0.19486403695161347, 0.39606019408614357, 0.39606019408614357, 0.39606019408614357, 0.43766700877335807, 0.43766700877335807, 0.43766700877335807, 0.05227565121267019, 0.05227565121267019, 0.05227565121267019, 0.024445000539802586, 0.024445000539802586, 0.024445000539802586, 0.24788539585541491, 0.24788539585541491, 0.24788539585541491, 0.03193047673178351, 0.03193047673178351, 0.03193047673178351, 0.15861613850749912, 0.15861613850749912, 0.15861613850749912, 0.23600901561217758, 0.23600901561217758, 0.23600901561217758, 0.03971875429773375, 0.03971875429773375, 0.03971875429773375, 0.09205971040343097, 0.09205971040343097, 0.09205971040343097, 0.08876119652174153, 0.08876119652174153, 0.08876119652174153, 0.32108111478833157, 0.32108111478833157, 0.32108111478833157, 0.4051939756958536, 0.4051939756958536, 0.4051939756958536, 0.2627328708161678, 0.2627328708161678, 0.2627328708161678, 0.6065254670854281, 0.6065254670854281, 0.6065254670854281, 0.6502152026556987, 0.6502152026556987, 0.6502152026556987, 0.7382109653380294, 0.7382109653380294, 0.7382109653380294, 0.08608597181054733, 0.08608597181054733, 0.08608597181054733, 0.12514048757700602, 0.12514048757700602, 0.12514048757700602, 0.1338803750781784, 0.1338803750781784, 0.1338803750781784, 0.15912704406139933, 0.15912704406139933, 0.15912704406139933, 0.3309877469479974, 0.3309877469479974, 0.3309877469479974, 0.6930572326221238, 0.6930572326221238, 0.6930572326221238, 0.29711380197545056, 0.29711380197545056, 0.29711380197545056, 0.4767158630745717, 0.4767158630745717, 0.4767158630745717, 0.43907316397957097, 0.43907316397957097, 0.43907316397957097, 0.37129581647105625, 0.37129581647105625, 0.37129581647105625, 0.2784187717827563, 0.2784187717827563, 0.2784187717827563, 0.3106202582958515, 0.3106202582958515, 0.3106202582958515, 0.19415969470092465, 0.19415969470092465, 0.19415969470092465, 0.2062594470059843, 0.2062594470059843, 0.2062594470059843, 0.20560289769650197, 0.20560289769650197, 0.20560289769650197, 0.2030185618117213, 0.2030185618117213, 0.2030185618117213, 0.23603295165804816, 0.23603295165804816, 0.23603295165804816, 0.19950437774953633, 0.19950437774953633, 0.19950437774953633, 0.18306930156838175, 0.18306930156838175, 0.18306930156838175, 0.8595010371132848, 0.8595010371132848, 0.8595010371132848, 0.18631922257951306, 0.18631922257951306, 0.18631922257951306, 0.153332609011547, 0.153332609011547, 0.153332609011547, 0.31217708695611357, 0.31217708695611357, 0.31217708695611357, 0.21310444308002885, 0.21310444308002885, 0.21310444308002885, 0.19407021119711287, 0.19407021119711287, 0.19407021119711287, 0.1939543670881929, 0.1939543670881929, 0.1939543670881929, 0.18819490609958867, 0.18819490609958867, 0.18819490609958867, 0.0899581287922836, 0.0899581287922836, 0.0899581287922836, 0.08388284232792143, 0.08388284232792143, 0.08388284232792143, 0.08167481421506162, 0.08167481421506162, 0.08167481421506162]}, "mutation_prompt": null}
{"id": "db0958ae-369f-44e3-b942-3270baf3c154", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max * np.random.rand())\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < 0.1:  # Introduce Gaussian perturbations occasionally\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Introducing an enhanced local search mechanism with Gaussian perturbations for improved exploitation capabilities.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.784546575066596, 0.784546575066596, 0.784546575066596, 0.7983457316899751, 0.7983457316899751, 0.7983457316899751, 0.8046482938921573, 0.8046482938921573, 0.8046482938921573, 0.6293421161011454, 0.6293421161011454, 0.6293421161011454, 0.476315199256659, 0.476315199256659, 0.476315199256659, 0.6428184260909617, 0.6428184260909617, 0.6428184260909617, 0.15281741541064275, 0.15281741541064275, 0.15281741541064275, 0.1605870172611601, 0.1605870172611601, 0.1605870172611601, 0.1262527259101447, 0.1262527259101447, 0.1262527259101447, 0.10421958297932599, 0.10421958297932599, 0.10421958297932599, 0.09061185291706042, 0.09061185291706042, 0.09061185291706042, 0.14298010164844455, 0.14298010164844455, 0.14298010164844455, 0.991919214456532, 0.991919214456532, 0.991919214456532, 0.9834967913264329, 0.9834967913264329, 0.9834967913264329, 0.9922004384876167, 0.9922004384876167, 0.9922004384876167, 0.6171649110667088, 0.6171649110667088, 0.6171649110667088, 0.6093474625310874, 0.6093474625310874, 0.6093474625310874, 0.6681841948952487, 0.6681841948952487, 0.6681841948952487, 0.7231561929103991, 0.7231561929103991, 0.7231561929103991, 0.7483525838035276, 0.7483525838035276, 0.7483525838035276, 0.7641709609975564, 0.7641709609975564, 0.7641709609975564, 0.3558538606518069, 0.3558538606518069, 0.3558538606518069, 0.4434689443708798, 0.4434689443708798, 0.4434689443708798, 0.474427464240863, 0.474427464240863, 0.474427464240863, 0.19486403695161347, 0.19486403695161347, 0.19486403695161347, 0.39606019408614357, 0.39606019408614357, 0.39606019408614357, 0.43766700877335807, 0.43766700877335807, 0.43766700877335807, 0.05227565121267019, 0.05227565121267019, 0.05227565121267019, 0.024445000539802586, 0.024445000539802586, 0.024445000539802586, 0.24788539585541491, 0.24788539585541491, 0.24788539585541491, 0.03193047673178351, 0.03193047673178351, 0.03193047673178351, 0.15861613850749912, 0.15861613850749912, 0.15861613850749912, 0.23600901561217758, 0.23600901561217758, 0.23600901561217758, 0.03971875429773375, 0.03971875429773375, 0.03971875429773375, 0.09205971040343097, 0.09205971040343097, 0.09205971040343097, 0.08876119652174153, 0.08876119652174153, 0.08876119652174153, 0.32108111478833157, 0.32108111478833157, 0.32108111478833157, 0.4051939756958536, 0.4051939756958536, 0.4051939756958536, 0.2627328708161678, 0.2627328708161678, 0.2627328708161678, 0.6065254670854281, 0.6065254670854281, 0.6065254670854281, 0.6502152026556987, 0.6502152026556987, 0.6502152026556987, 0.7382109653380294, 0.7382109653380294, 0.7382109653380294, 0.08608597181054733, 0.08608597181054733, 0.08608597181054733, 0.12514048757700602, 0.12514048757700602, 0.12514048757700602, 0.1338803750781784, 0.1338803750781784, 0.1338803750781784, 0.15912704406139933, 0.15912704406139933, 0.15912704406139933, 0.3309877469479974, 0.3309877469479974, 0.3309877469479974, 0.6930572326221238, 0.6930572326221238, 0.6930572326221238, 0.29711380197545056, 0.29711380197545056, 0.29711380197545056, 0.4767158630745717, 0.4767158630745717, 0.4767158630745717, 0.43907316397957097, 0.43907316397957097, 0.43907316397957097, 0.37129581647105625, 0.37129581647105625, 0.37129581647105625, 0.2784187717827563, 0.2784187717827563, 0.2784187717827563, 0.3106202582958515, 0.3106202582958515, 0.3106202582958515, 0.19415969470092465, 0.19415969470092465, 0.19415969470092465, 0.2062594470059843, 0.2062594470059843, 0.2062594470059843, 0.20560289769650197, 0.20560289769650197, 0.20560289769650197, 0.2030185618117213, 0.2030185618117213, 0.2030185618117213, 0.23603295165804816, 0.23603295165804816, 0.23603295165804816, 0.19950437774953633, 0.19950437774953633, 0.19950437774953633, 0.18306930156838175, 0.18306930156838175, 0.18306930156838175, 0.8595010371132848, 0.8595010371132848, 0.8595010371132848, 0.18631922257951306, 0.18631922257951306, 0.18631922257951306, 0.153332609011547, 0.153332609011547, 0.153332609011547, 0.31217708695611357, 0.31217708695611357, 0.31217708695611357, 0.21310444308002885, 0.21310444308002885, 0.21310444308002885, 0.19407021119711287, 0.19407021119711287, 0.19407021119711287, 0.1939543670881929, 0.1939543670881929, 0.1939543670881929, 0.18819490609958867, 0.18819490609958867, 0.18819490609958867, 0.0899581287922836, 0.0899581287922836, 0.0899581287922836, 0.08388284232792143, 0.08388284232792143, 0.08388284232792143, 0.08167481421506162, 0.08167481421506162, 0.08167481421506162]}, "mutation_prompt": null}
{"id": "d8a868c9-b6ec-4e39-a226-2e463694cade", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = self.w_min + (self.w_max - self.w_min) * (1 - eval_count / self.budget)  # Adaptive inertia weight\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.6 * (1 - eval_count / (2 * self.budget))  # Aggressive mutation scaling\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < 0.1:  # Introduce Gaussian perturbations occasionally\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Enhancing convergence by integrating adaptive inertia and aggressive mutation scaling in the hybrid PSO-DE algorithm.", "configspace": "", "generation": 85, "fitness": 0.22531854348241276, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.5447336646360112, 0.5447336646360112, 0.5447336646360112, 0.5211634564694217, 0.5211634564694217, 0.5211634564694217, 0.5735303042062421, 0.5735303042062421, 0.5735303042062421, 0.26494640794232993, 0.26494640794232993, 0.26494640794232993, 0.28786622588764, 0.28786622588764, 0.28786622588764, 0.032522434650371745, 0.032522434650371745, 0.032522434650371745, 0.10372147420032174, 0.10372147420032174, 0.10372147420032174, 0.10633658755972519, 0.10633658755972519, 0.10633658755972519, 0.09464153584446156, 0.09464153584446156, 0.09464153584446156, 0.09046067157281412, 0.09046067157281412, 0.09046067157281412, 0.07100081760611665, 0.07100081760611665, 0.07100081760611665, 0.08759639301847377, 0.08759639301847377, 0.08759639301847377, 0.991782991125123, 0.991782991125123, 0.991782991125123, 0.9941058346479815, 0.9941058346479815, 0.9941058346479815, 0.9940397167110169, 0.9940397167110169, 0.9940397167110169, 0.3699325638284102, 0.3699325638284102, 0.3699325638284102, 0.39803613802923654, 0.39803613802923654, 0.39803613802923654, 0.42503370586491085, 0.42503370586491085, 0.42503370586491085, 0.16679681226458942, 0.16679681226458942, 0.16679681226458942, 0.11418687622428769, 0.11418687622428769, 0.11418687622428769, 0.19511978224729154, 0.19511978224729154, 0.19511978224729154, 0.1390129479845622, 0.1390129479845622, 0.1390129479845622, 0.08467379304509792, 0.08467379304509792, 0.08467379304509792, 0.15840191758365763, 0.15840191758365763, 0.15840191758365763, 0.12598287202747727, 0.12598287202747727, 0.12598287202747727, 0.1475472982192303, 0.1475472982192303, 0.1475472982192303, 0.1699418284379417, 0.1699418284379417, 0.1699418284379417, 0.03532423726841094, 0.03532423726841094, 0.03532423726841094, 0.025339258965968114, 0.025339258965968114, 0.025339258965968114, 0.029577139261156682, 0.029577139261156682, 0.029577139261156682, 0.08915381324146943, 0.08915381324146943, 0.08915381324146943, 0.07199687475782524, 0.07199687475782524, 0.07199687475782524, 0.011519318174668336, 0.011519318174668336, 0.011519318174668336, 0.023105050621947343, 0.023105050621947343, 0.023105050621947343, 0.04800033256600833, 0.04800033256600833, 0.04800033256600833, 0.05030393007363876, 0.05030393007363876, 0.05030393007363876, 0.05514565097674695, 0.05514565097674695, 0.05514565097674695, 0.060062717985813974, 0.060062717985813974, 0.060062717985813974, 0.04300872921326715, 0.04300872921326715, 0.04300872921326715, 0.45371401005012724, 0.45371401005012724, 0.45371401005012724, 0.4033871236842479, 0.4033871236842479, 0.4033871236842479, 0.45679265581833983, 0.45679265581833983, 0.45679265581833983, 0.05790366817019532, 0.05790366817019532, 0.05790366817019532, 0.08396142242002402, 0.08396142242002402, 0.08396142242002402, 0.11766267679073295, 0.11766267679073295, 0.11766267679073295, 0.27279403960176274, 0.27279403960176274, 0.27279403960176274, 0.158215052955902, 0.158215052955902, 0.158215052955902, 0.23073611090227564, 0.23073611090227564, 0.23073611090227564, 0.2707290939099489, 0.2707290939099489, 0.2707290939099489, 0.2832014558417084, 0.2832014558417084, 0.2832014558417084, 0.33216855939437495, 0.33216855939437495, 0.33216855939437495, 0.19201102446459273, 0.19201102446459273, 0.19201102446459273, 0.20380398493349539, 0.20380398493349539, 0.20380398493349539, 0.22625581012426588, 0.22625581012426588, 0.22625581012426588, 0.17113879767449092, 0.17113879767449092, 0.17113879767449092, 0.1846527181574572, 0.1846527181574572, 0.1846527181574572, 0.17372552116172368, 0.17372552116172368, 0.17372552116172368, 0.17401525162280373, 0.17401525162280373, 0.17401525162280373, 0.1847559259891639, 0.1847559259891639, 0.1847559259891639, 0.17503333381773933, 0.17503333381773933, 0.17503333381773933, 0.6061653713502685, 0.6061653713502685, 0.6061653713502685, 0.1806239299726896, 0.1806239299726896, 0.1806239299726896, 0.18137618450841386, 0.18137618450841386, 0.18137618450841386, 0.16265857021540542, 0.16265857021540542, 0.16265857021540542, 0.505172586050553, 0.505172586050553, 0.505172586050553, 0.20397810310094466, 0.20397810310094466, 0.20397810310094466, 0.18708615990701738, 0.18708615990701738, 0.18708615990701738, 0.19002057470154077, 0.19002057470154077, 0.19002057470154077, 0.18318711794268927, 0.18318711794268927, 0.18318711794268927, 0.07111136238060722, 0.07111136238060722, 0.07111136238060722, 0.07600333264404457, 0.07600333264404457, 0.07600333264404457, 0.07324149553250592, 0.07324149553250592, 0.07324149553250592]}, "mutation_prompt": null}
{"id": "a930a15c-f4c6-48d1-b9da-642b647c6bc5", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max * np.random.rand())\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < 0.1:  # Introduce Gaussian perturbations occasionally\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Introducing an enhanced local search mechanism with Gaussian perturbations for improved exploitation capabilities.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.784546575066596, 0.784546575066596, 0.784546575066596, 0.7983457316899751, 0.7983457316899751, 0.7983457316899751, 0.8046482938921573, 0.8046482938921573, 0.8046482938921573, 0.6293421161011454, 0.6293421161011454, 0.6293421161011454, 0.476315199256659, 0.476315199256659, 0.476315199256659, 0.6428184260909617, 0.6428184260909617, 0.6428184260909617, 0.15281741541064275, 0.15281741541064275, 0.15281741541064275, 0.1605870172611601, 0.1605870172611601, 0.1605870172611601, 0.1262527259101447, 0.1262527259101447, 0.1262527259101447, 0.10421958297932599, 0.10421958297932599, 0.10421958297932599, 0.09061185291706042, 0.09061185291706042, 0.09061185291706042, 0.14298010164844455, 0.14298010164844455, 0.14298010164844455, 0.991919214456532, 0.991919214456532, 0.991919214456532, 0.9834967913264329, 0.9834967913264329, 0.9834967913264329, 0.9922004384876167, 0.9922004384876167, 0.9922004384876167, 0.6171649110667088, 0.6171649110667088, 0.6171649110667088, 0.6093474625310874, 0.6093474625310874, 0.6093474625310874, 0.6681841948952487, 0.6681841948952487, 0.6681841948952487, 0.7231561929103991, 0.7231561929103991, 0.7231561929103991, 0.7483525838035276, 0.7483525838035276, 0.7483525838035276, 0.7641709609975564, 0.7641709609975564, 0.7641709609975564, 0.3558538606518069, 0.3558538606518069, 0.3558538606518069, 0.4434689443708798, 0.4434689443708798, 0.4434689443708798, 0.474427464240863, 0.474427464240863, 0.474427464240863, 0.19486403695161347, 0.19486403695161347, 0.19486403695161347, 0.39606019408614357, 0.39606019408614357, 0.39606019408614357, 0.43766700877335807, 0.43766700877335807, 0.43766700877335807, 0.05227565121267019, 0.05227565121267019, 0.05227565121267019, 0.024445000539802586, 0.024445000539802586, 0.024445000539802586, 0.24788539585541491, 0.24788539585541491, 0.24788539585541491, 0.03193047673178351, 0.03193047673178351, 0.03193047673178351, 0.15861613850749912, 0.15861613850749912, 0.15861613850749912, 0.23600901561217758, 0.23600901561217758, 0.23600901561217758, 0.03971875429773375, 0.03971875429773375, 0.03971875429773375, 0.09205971040343097, 0.09205971040343097, 0.09205971040343097, 0.08876119652174153, 0.08876119652174153, 0.08876119652174153, 0.32108111478833157, 0.32108111478833157, 0.32108111478833157, 0.4051939756958536, 0.4051939756958536, 0.4051939756958536, 0.2627328708161678, 0.2627328708161678, 0.2627328708161678, 0.6065254670854281, 0.6065254670854281, 0.6065254670854281, 0.6502152026556987, 0.6502152026556987, 0.6502152026556987, 0.7382109653380294, 0.7382109653380294, 0.7382109653380294, 0.08608597181054733, 0.08608597181054733, 0.08608597181054733, 0.12514048757700602, 0.12514048757700602, 0.12514048757700602, 0.1338803750781784, 0.1338803750781784, 0.1338803750781784, 0.15912704406139933, 0.15912704406139933, 0.15912704406139933, 0.3309877469479974, 0.3309877469479974, 0.3309877469479974, 0.6930572326221238, 0.6930572326221238, 0.6930572326221238, 0.29711380197545056, 0.29711380197545056, 0.29711380197545056, 0.4767158630745717, 0.4767158630745717, 0.4767158630745717, 0.43907316397957097, 0.43907316397957097, 0.43907316397957097, 0.37129581647105625, 0.37129581647105625, 0.37129581647105625, 0.2784187717827563, 0.2784187717827563, 0.2784187717827563, 0.3106202582958515, 0.3106202582958515, 0.3106202582958515, 0.19415969470092465, 0.19415969470092465, 0.19415969470092465, 0.2062594470059843, 0.2062594470059843, 0.2062594470059843, 0.20560289769650197, 0.20560289769650197, 0.20560289769650197, 0.2030185618117213, 0.2030185618117213, 0.2030185618117213, 0.23603295165804816, 0.23603295165804816, 0.23603295165804816, 0.19950437774953633, 0.19950437774953633, 0.19950437774953633, 0.18306930156838175, 0.18306930156838175, 0.18306930156838175, 0.8595010371132848, 0.8595010371132848, 0.8595010371132848, 0.18631922257951306, 0.18631922257951306, 0.18631922257951306, 0.153332609011547, 0.153332609011547, 0.153332609011547, 0.31217708695611357, 0.31217708695611357, 0.31217708695611357, 0.21310444308002885, 0.21310444308002885, 0.21310444308002885, 0.19407021119711287, 0.19407021119711287, 0.19407021119711287, 0.1939543670881929, 0.1939543670881929, 0.1939543670881929, 0.18819490609958867, 0.18819490609958867, 0.18819490609958867, 0.0899581287922836, 0.0899581287922836, 0.0899581287922836, 0.08388284232792143, 0.08388284232792143, 0.08388284232792143, 0.08167481421506162, 0.08167481421506162, 0.08167481421506162]}, "mutation_prompt": null}
{"id": "3af3e9a5-6c53-4b51-ab4e-e2b0509fd9be", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max * np.random.rand())\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < 0.1:  # Introduce Gaussian perturbations occasionally\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Introducing an enhanced local search mechanism with Gaussian perturbations for improved exploitation capabilities.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.784546575066596, 0.784546575066596, 0.784546575066596, 0.7983457316899751, 0.7983457316899751, 0.7983457316899751, 0.8046482938921573, 0.8046482938921573, 0.8046482938921573, 0.6293421161011454, 0.6293421161011454, 0.6293421161011454, 0.476315199256659, 0.476315199256659, 0.476315199256659, 0.6428184260909617, 0.6428184260909617, 0.6428184260909617, 0.15281741541064275, 0.15281741541064275, 0.15281741541064275, 0.1605870172611601, 0.1605870172611601, 0.1605870172611601, 0.1262527259101447, 0.1262527259101447, 0.1262527259101447, 0.10421958297932599, 0.10421958297932599, 0.10421958297932599, 0.09061185291706042, 0.09061185291706042, 0.09061185291706042, 0.14298010164844455, 0.14298010164844455, 0.14298010164844455, 0.991919214456532, 0.991919214456532, 0.991919214456532, 0.9834967913264329, 0.9834967913264329, 0.9834967913264329, 0.9922004384876167, 0.9922004384876167, 0.9922004384876167, 0.6171649110667088, 0.6171649110667088, 0.6171649110667088, 0.6093474625310874, 0.6093474625310874, 0.6093474625310874, 0.6681841948952487, 0.6681841948952487, 0.6681841948952487, 0.7231561929103991, 0.7231561929103991, 0.7231561929103991, 0.7483525838035276, 0.7483525838035276, 0.7483525838035276, 0.7641709609975564, 0.7641709609975564, 0.7641709609975564, 0.3558538606518069, 0.3558538606518069, 0.3558538606518069, 0.4434689443708798, 0.4434689443708798, 0.4434689443708798, 0.474427464240863, 0.474427464240863, 0.474427464240863, 0.19486403695161347, 0.19486403695161347, 0.19486403695161347, 0.39606019408614357, 0.39606019408614357, 0.39606019408614357, 0.43766700877335807, 0.43766700877335807, 0.43766700877335807, 0.05227565121267019, 0.05227565121267019, 0.05227565121267019, 0.024445000539802586, 0.024445000539802586, 0.024445000539802586, 0.24788539585541491, 0.24788539585541491, 0.24788539585541491, 0.03193047673178351, 0.03193047673178351, 0.03193047673178351, 0.15861613850749912, 0.15861613850749912, 0.15861613850749912, 0.23600901561217758, 0.23600901561217758, 0.23600901561217758, 0.03971875429773375, 0.03971875429773375, 0.03971875429773375, 0.09205971040343097, 0.09205971040343097, 0.09205971040343097, 0.08876119652174153, 0.08876119652174153, 0.08876119652174153, 0.32108111478833157, 0.32108111478833157, 0.32108111478833157, 0.4051939756958536, 0.4051939756958536, 0.4051939756958536, 0.2627328708161678, 0.2627328708161678, 0.2627328708161678, 0.6065254670854281, 0.6065254670854281, 0.6065254670854281, 0.6502152026556987, 0.6502152026556987, 0.6502152026556987, 0.7382109653380294, 0.7382109653380294, 0.7382109653380294, 0.08608597181054733, 0.08608597181054733, 0.08608597181054733, 0.12514048757700602, 0.12514048757700602, 0.12514048757700602, 0.1338803750781784, 0.1338803750781784, 0.1338803750781784, 0.15912704406139933, 0.15912704406139933, 0.15912704406139933, 0.3309877469479974, 0.3309877469479974, 0.3309877469479974, 0.6930572326221238, 0.6930572326221238, 0.6930572326221238, 0.29711380197545056, 0.29711380197545056, 0.29711380197545056, 0.4767158630745717, 0.4767158630745717, 0.4767158630745717, 0.43907316397957097, 0.43907316397957097, 0.43907316397957097, 0.37129581647105625, 0.37129581647105625, 0.37129581647105625, 0.2784187717827563, 0.2784187717827563, 0.2784187717827563, 0.3106202582958515, 0.3106202582958515, 0.3106202582958515, 0.19415969470092465, 0.19415969470092465, 0.19415969470092465, 0.2062594470059843, 0.2062594470059843, 0.2062594470059843, 0.20560289769650197, 0.20560289769650197, 0.20560289769650197, 0.2030185618117213, 0.2030185618117213, 0.2030185618117213, 0.23603295165804816, 0.23603295165804816, 0.23603295165804816, 0.19950437774953633, 0.19950437774953633, 0.19950437774953633, 0.18306930156838175, 0.18306930156838175, 0.18306930156838175, 0.8595010371132848, 0.8595010371132848, 0.8595010371132848, 0.18631922257951306, 0.18631922257951306, 0.18631922257951306, 0.153332609011547, 0.153332609011547, 0.153332609011547, 0.31217708695611357, 0.31217708695611357, 0.31217708695611357, 0.21310444308002885, 0.21310444308002885, 0.21310444308002885, 0.19407021119711287, 0.19407021119711287, 0.19407021119711287, 0.1939543670881929, 0.1939543670881929, 0.1939543670881929, 0.18819490609958867, 0.18819490609958867, 0.18819490609958867, 0.0899581287922836, 0.0899581287922836, 0.0899581287922836, 0.08388284232792143, 0.08388284232792143, 0.08388284232792143, 0.08167481421506162, 0.08167481421506162, 0.08167481421506162]}, "mutation_prompt": null}
{"id": "a674d288-8c82-4978-a10a-8f2602820d6b", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max * np.random.rand())\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < 0.1:  # Introduce Gaussian perturbations occasionally\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Introducing an enhanced local search mechanism with Gaussian perturbations for improved exploitation capabilities.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.784546575066596, 0.784546575066596, 0.784546575066596, 0.7983457316899751, 0.7983457316899751, 0.7983457316899751, 0.8046482938921573, 0.8046482938921573, 0.8046482938921573, 0.6293421161011454, 0.6293421161011454, 0.6293421161011454, 0.476315199256659, 0.476315199256659, 0.476315199256659, 0.6428184260909617, 0.6428184260909617, 0.6428184260909617, 0.15281741541064275, 0.15281741541064275, 0.15281741541064275, 0.1605870172611601, 0.1605870172611601, 0.1605870172611601, 0.1262527259101447, 0.1262527259101447, 0.1262527259101447, 0.10421958297932599, 0.10421958297932599, 0.10421958297932599, 0.09061185291706042, 0.09061185291706042, 0.09061185291706042, 0.14298010164844455, 0.14298010164844455, 0.14298010164844455, 0.991919214456532, 0.991919214456532, 0.991919214456532, 0.9834967913264329, 0.9834967913264329, 0.9834967913264329, 0.9922004384876167, 0.9922004384876167, 0.9922004384876167, 0.6171649110667088, 0.6171649110667088, 0.6171649110667088, 0.6093474625310874, 0.6093474625310874, 0.6093474625310874, 0.6681841948952487, 0.6681841948952487, 0.6681841948952487, 0.7231561929103991, 0.7231561929103991, 0.7231561929103991, 0.7483525838035276, 0.7483525838035276, 0.7483525838035276, 0.7641709609975564, 0.7641709609975564, 0.7641709609975564, 0.3558538606518069, 0.3558538606518069, 0.3558538606518069, 0.4434689443708798, 0.4434689443708798, 0.4434689443708798, 0.474427464240863, 0.474427464240863, 0.474427464240863, 0.19486403695161347, 0.19486403695161347, 0.19486403695161347, 0.39606019408614357, 0.39606019408614357, 0.39606019408614357, 0.43766700877335807, 0.43766700877335807, 0.43766700877335807, 0.05227565121267019, 0.05227565121267019, 0.05227565121267019, 0.024445000539802586, 0.024445000539802586, 0.024445000539802586, 0.24788539585541491, 0.24788539585541491, 0.24788539585541491, 0.03193047673178351, 0.03193047673178351, 0.03193047673178351, 0.15861613850749912, 0.15861613850749912, 0.15861613850749912, 0.23600901561217758, 0.23600901561217758, 0.23600901561217758, 0.03971875429773375, 0.03971875429773375, 0.03971875429773375, 0.09205971040343097, 0.09205971040343097, 0.09205971040343097, 0.08876119652174153, 0.08876119652174153, 0.08876119652174153, 0.32108111478833157, 0.32108111478833157, 0.32108111478833157, 0.4051939756958536, 0.4051939756958536, 0.4051939756958536, 0.2627328708161678, 0.2627328708161678, 0.2627328708161678, 0.6065254670854281, 0.6065254670854281, 0.6065254670854281, 0.6502152026556987, 0.6502152026556987, 0.6502152026556987, 0.7382109653380294, 0.7382109653380294, 0.7382109653380294, 0.08608597181054733, 0.08608597181054733, 0.08608597181054733, 0.12514048757700602, 0.12514048757700602, 0.12514048757700602, 0.1338803750781784, 0.1338803750781784, 0.1338803750781784, 0.15912704406139933, 0.15912704406139933, 0.15912704406139933, 0.3309877469479974, 0.3309877469479974, 0.3309877469479974, 0.6930572326221238, 0.6930572326221238, 0.6930572326221238, 0.29711380197545056, 0.29711380197545056, 0.29711380197545056, 0.4767158630745717, 0.4767158630745717, 0.4767158630745717, 0.43907316397957097, 0.43907316397957097, 0.43907316397957097, 0.37129581647105625, 0.37129581647105625, 0.37129581647105625, 0.2784187717827563, 0.2784187717827563, 0.2784187717827563, 0.3106202582958515, 0.3106202582958515, 0.3106202582958515, 0.19415969470092465, 0.19415969470092465, 0.19415969470092465, 0.2062594470059843, 0.2062594470059843, 0.2062594470059843, 0.20560289769650197, 0.20560289769650197, 0.20560289769650197, 0.2030185618117213, 0.2030185618117213, 0.2030185618117213, 0.23603295165804816, 0.23603295165804816, 0.23603295165804816, 0.19950437774953633, 0.19950437774953633, 0.19950437774953633, 0.18306930156838175, 0.18306930156838175, 0.18306930156838175, 0.8595010371132848, 0.8595010371132848, 0.8595010371132848, 0.18631922257951306, 0.18631922257951306, 0.18631922257951306, 0.153332609011547, 0.153332609011547, 0.153332609011547, 0.31217708695611357, 0.31217708695611357, 0.31217708695611357, 0.21310444308002885, 0.21310444308002885, 0.21310444308002885, 0.19407021119711287, 0.19407021119711287, 0.19407021119711287, 0.1939543670881929, 0.1939543670881929, 0.1939543670881929, 0.18819490609958867, 0.18819490609958867, 0.18819490609958867, 0.0899581287922836, 0.0899581287922836, 0.0899581287922836, 0.08388284232792143, 0.08388284232792143, 0.08388284232792143, 0.08167481421506162, 0.08167481421506162, 0.08167481421506162]}, "mutation_prompt": null}
{"id": "ae2c1e2d-5f11-4dea-a09a-d5dc56186a1c", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max * np.random.rand())\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < 0.1:  # Introduce Gaussian perturbations occasionally\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Introducing an enhanced local search mechanism with Gaussian perturbations for improved exploitation capabilities.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.784546575066596, 0.784546575066596, 0.784546575066596, 0.7983457316899751, 0.7983457316899751, 0.7983457316899751, 0.8046482938921573, 0.8046482938921573, 0.8046482938921573, 0.6293421161011454, 0.6293421161011454, 0.6293421161011454, 0.476315199256659, 0.476315199256659, 0.476315199256659, 0.6428184260909617, 0.6428184260909617, 0.6428184260909617, 0.15281741541064275, 0.15281741541064275, 0.15281741541064275, 0.1605870172611601, 0.1605870172611601, 0.1605870172611601, 0.1262527259101447, 0.1262527259101447, 0.1262527259101447, 0.10421958297932599, 0.10421958297932599, 0.10421958297932599, 0.09061185291706042, 0.09061185291706042, 0.09061185291706042, 0.14298010164844455, 0.14298010164844455, 0.14298010164844455, 0.991919214456532, 0.991919214456532, 0.991919214456532, 0.9834967913264329, 0.9834967913264329, 0.9834967913264329, 0.9922004384876167, 0.9922004384876167, 0.9922004384876167, 0.6171649110667088, 0.6171649110667088, 0.6171649110667088, 0.6093474625310874, 0.6093474625310874, 0.6093474625310874, 0.6681841948952487, 0.6681841948952487, 0.6681841948952487, 0.7231561929103991, 0.7231561929103991, 0.7231561929103991, 0.7483525838035276, 0.7483525838035276, 0.7483525838035276, 0.7641709609975564, 0.7641709609975564, 0.7641709609975564, 0.3558538606518069, 0.3558538606518069, 0.3558538606518069, 0.4434689443708798, 0.4434689443708798, 0.4434689443708798, 0.474427464240863, 0.474427464240863, 0.474427464240863, 0.19486403695161347, 0.19486403695161347, 0.19486403695161347, 0.39606019408614357, 0.39606019408614357, 0.39606019408614357, 0.43766700877335807, 0.43766700877335807, 0.43766700877335807, 0.05227565121267019, 0.05227565121267019, 0.05227565121267019, 0.024445000539802586, 0.024445000539802586, 0.024445000539802586, 0.24788539585541491, 0.24788539585541491, 0.24788539585541491, 0.03193047673178351, 0.03193047673178351, 0.03193047673178351, 0.15861613850749912, 0.15861613850749912, 0.15861613850749912, 0.23600901561217758, 0.23600901561217758, 0.23600901561217758, 0.03971875429773375, 0.03971875429773375, 0.03971875429773375, 0.09205971040343097, 0.09205971040343097, 0.09205971040343097, 0.08876119652174153, 0.08876119652174153, 0.08876119652174153, 0.32108111478833157, 0.32108111478833157, 0.32108111478833157, 0.4051939756958536, 0.4051939756958536, 0.4051939756958536, 0.2627328708161678, 0.2627328708161678, 0.2627328708161678, 0.6065254670854281, 0.6065254670854281, 0.6065254670854281, 0.6502152026556987, 0.6502152026556987, 0.6502152026556987, 0.7382109653380294, 0.7382109653380294, 0.7382109653380294, 0.08608597181054733, 0.08608597181054733, 0.08608597181054733, 0.12514048757700602, 0.12514048757700602, 0.12514048757700602, 0.1338803750781784, 0.1338803750781784, 0.1338803750781784, 0.15912704406139933, 0.15912704406139933, 0.15912704406139933, 0.3309877469479974, 0.3309877469479974, 0.3309877469479974, 0.6930572326221238, 0.6930572326221238, 0.6930572326221238, 0.29711380197545056, 0.29711380197545056, 0.29711380197545056, 0.4767158630745717, 0.4767158630745717, 0.4767158630745717, 0.43907316397957097, 0.43907316397957097, 0.43907316397957097, 0.37129581647105625, 0.37129581647105625, 0.37129581647105625, 0.2784187717827563, 0.2784187717827563, 0.2784187717827563, 0.3106202582958515, 0.3106202582958515, 0.3106202582958515, 0.19415969470092465, 0.19415969470092465, 0.19415969470092465, 0.2062594470059843, 0.2062594470059843, 0.2062594470059843, 0.20560289769650197, 0.20560289769650197, 0.20560289769650197, 0.2030185618117213, 0.2030185618117213, 0.2030185618117213, 0.23603295165804816, 0.23603295165804816, 0.23603295165804816, 0.19950437774953633, 0.19950437774953633, 0.19950437774953633, 0.18306930156838175, 0.18306930156838175, 0.18306930156838175, 0.8595010371132848, 0.8595010371132848, 0.8595010371132848, 0.18631922257951306, 0.18631922257951306, 0.18631922257951306, 0.153332609011547, 0.153332609011547, 0.153332609011547, 0.31217708695611357, 0.31217708695611357, 0.31217708695611357, 0.21310444308002885, 0.21310444308002885, 0.21310444308002885, 0.19407021119711287, 0.19407021119711287, 0.19407021119711287, 0.1939543670881929, 0.1939543670881929, 0.1939543670881929, 0.18819490609958867, 0.18819490609958867, 0.18819490609958867, 0.0899581287922836, 0.0899581287922836, 0.0899581287922836, 0.08388284232792143, 0.08388284232792143, 0.08388284232792143, 0.08167481421506162, 0.08167481421506162, 0.08167481421506162]}, "mutation_prompt": null}
{"id": "8dd85c78-db0a-470c-a442-cce33d671b7c", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max * np.random.rand())\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < 0.1:  # Introduce Gaussian perturbations occasionally\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Introducing an enhanced local search mechanism with Gaussian perturbations for improved exploitation capabilities.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.784546575066596, 0.784546575066596, 0.784546575066596, 0.7983457316899751, 0.7983457316899751, 0.7983457316899751, 0.8046482938921573, 0.8046482938921573, 0.8046482938921573, 0.6293421161011454, 0.6293421161011454, 0.6293421161011454, 0.476315199256659, 0.476315199256659, 0.476315199256659, 0.6428184260909617, 0.6428184260909617, 0.6428184260909617, 0.15281741541064275, 0.15281741541064275, 0.15281741541064275, 0.1605870172611601, 0.1605870172611601, 0.1605870172611601, 0.1262527259101447, 0.1262527259101447, 0.1262527259101447, 0.10421958297932599, 0.10421958297932599, 0.10421958297932599, 0.09061185291706042, 0.09061185291706042, 0.09061185291706042, 0.14298010164844455, 0.14298010164844455, 0.14298010164844455, 0.991919214456532, 0.991919214456532, 0.991919214456532, 0.9834967913264329, 0.9834967913264329, 0.9834967913264329, 0.9922004384876167, 0.9922004384876167, 0.9922004384876167, 0.6171649110667088, 0.6171649110667088, 0.6171649110667088, 0.6093474625310874, 0.6093474625310874, 0.6093474625310874, 0.6681841948952487, 0.6681841948952487, 0.6681841948952487, 0.7231561929103991, 0.7231561929103991, 0.7231561929103991, 0.7483525838035276, 0.7483525838035276, 0.7483525838035276, 0.7641709609975564, 0.7641709609975564, 0.7641709609975564, 0.3558538606518069, 0.3558538606518069, 0.3558538606518069, 0.4434689443708798, 0.4434689443708798, 0.4434689443708798, 0.474427464240863, 0.474427464240863, 0.474427464240863, 0.19486403695161347, 0.19486403695161347, 0.19486403695161347, 0.39606019408614357, 0.39606019408614357, 0.39606019408614357, 0.43766700877335807, 0.43766700877335807, 0.43766700877335807, 0.05227565121267019, 0.05227565121267019, 0.05227565121267019, 0.024445000539802586, 0.024445000539802586, 0.024445000539802586, 0.24788539585541491, 0.24788539585541491, 0.24788539585541491, 0.03193047673178351, 0.03193047673178351, 0.03193047673178351, 0.15861613850749912, 0.15861613850749912, 0.15861613850749912, 0.23600901561217758, 0.23600901561217758, 0.23600901561217758, 0.03971875429773375, 0.03971875429773375, 0.03971875429773375, 0.09205971040343097, 0.09205971040343097, 0.09205971040343097, 0.08876119652174153, 0.08876119652174153, 0.08876119652174153, 0.32108111478833157, 0.32108111478833157, 0.32108111478833157, 0.4051939756958536, 0.4051939756958536, 0.4051939756958536, 0.2627328708161678, 0.2627328708161678, 0.2627328708161678, 0.6065254670854281, 0.6065254670854281, 0.6065254670854281, 0.6502152026556987, 0.6502152026556987, 0.6502152026556987, 0.7382109653380294, 0.7382109653380294, 0.7382109653380294, 0.08608597181054733, 0.08608597181054733, 0.08608597181054733, 0.12514048757700602, 0.12514048757700602, 0.12514048757700602, 0.1338803750781784, 0.1338803750781784, 0.1338803750781784, 0.15912704406139933, 0.15912704406139933, 0.15912704406139933, 0.3309877469479974, 0.3309877469479974, 0.3309877469479974, 0.6930572326221238, 0.6930572326221238, 0.6930572326221238, 0.29711380197545056, 0.29711380197545056, 0.29711380197545056, 0.4767158630745717, 0.4767158630745717, 0.4767158630745717, 0.43907316397957097, 0.43907316397957097, 0.43907316397957097, 0.37129581647105625, 0.37129581647105625, 0.37129581647105625, 0.2784187717827563, 0.2784187717827563, 0.2784187717827563, 0.3106202582958515, 0.3106202582958515, 0.3106202582958515, 0.19415969470092465, 0.19415969470092465, 0.19415969470092465, 0.2062594470059843, 0.2062594470059843, 0.2062594470059843, 0.20560289769650197, 0.20560289769650197, 0.20560289769650197, 0.2030185618117213, 0.2030185618117213, 0.2030185618117213, 0.23603295165804816, 0.23603295165804816, 0.23603295165804816, 0.19950437774953633, 0.19950437774953633, 0.19950437774953633, 0.18306930156838175, 0.18306930156838175, 0.18306930156838175, 0.8595010371132848, 0.8595010371132848, 0.8595010371132848, 0.18631922257951306, 0.18631922257951306, 0.18631922257951306, 0.153332609011547, 0.153332609011547, 0.153332609011547, 0.31217708695611357, 0.31217708695611357, 0.31217708695611357, 0.21310444308002885, 0.21310444308002885, 0.21310444308002885, 0.19407021119711287, 0.19407021119711287, 0.19407021119711287, 0.1939543670881929, 0.1939543670881929, 0.1939543670881929, 0.18819490609958867, 0.18819490609958867, 0.18819490609958867, 0.0899581287922836, 0.0899581287922836, 0.0899581287922836, 0.08388284232792143, 0.08388284232792143, 0.08388284232792143, 0.08167481421506162, 0.08167481421506162, 0.08167481421506162]}, "mutation_prompt": null}
{"id": "bd5b1f5b-ff2c-4667-bd8f-4a8e0a6cdf17", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max * np.random.rand())\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < 0.1:  # Introduce Gaussian perturbations occasionally\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Introducing an enhanced local search mechanism with Gaussian perturbations for improved exploitation capabilities.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.784546575066596, 0.784546575066596, 0.784546575066596, 0.7983457316899751, 0.7983457316899751, 0.7983457316899751, 0.8046482938921573, 0.8046482938921573, 0.8046482938921573, 0.6293421161011454, 0.6293421161011454, 0.6293421161011454, 0.476315199256659, 0.476315199256659, 0.476315199256659, 0.6428184260909617, 0.6428184260909617, 0.6428184260909617, 0.15281741541064275, 0.15281741541064275, 0.15281741541064275, 0.1605870172611601, 0.1605870172611601, 0.1605870172611601, 0.1262527259101447, 0.1262527259101447, 0.1262527259101447, 0.10421958297932599, 0.10421958297932599, 0.10421958297932599, 0.09061185291706042, 0.09061185291706042, 0.09061185291706042, 0.14298010164844455, 0.14298010164844455, 0.14298010164844455, 0.991919214456532, 0.991919214456532, 0.991919214456532, 0.9834967913264329, 0.9834967913264329, 0.9834967913264329, 0.9922004384876167, 0.9922004384876167, 0.9922004384876167, 0.6171649110667088, 0.6171649110667088, 0.6171649110667088, 0.6093474625310874, 0.6093474625310874, 0.6093474625310874, 0.6681841948952487, 0.6681841948952487, 0.6681841948952487, 0.7231561929103991, 0.7231561929103991, 0.7231561929103991, 0.7483525838035276, 0.7483525838035276, 0.7483525838035276, 0.7641709609975564, 0.7641709609975564, 0.7641709609975564, 0.3558538606518069, 0.3558538606518069, 0.3558538606518069, 0.4434689443708798, 0.4434689443708798, 0.4434689443708798, 0.474427464240863, 0.474427464240863, 0.474427464240863, 0.19486403695161347, 0.19486403695161347, 0.19486403695161347, 0.39606019408614357, 0.39606019408614357, 0.39606019408614357, 0.43766700877335807, 0.43766700877335807, 0.43766700877335807, 0.05227565121267019, 0.05227565121267019, 0.05227565121267019, 0.024445000539802586, 0.024445000539802586, 0.024445000539802586, 0.24788539585541491, 0.24788539585541491, 0.24788539585541491, 0.03193047673178351, 0.03193047673178351, 0.03193047673178351, 0.15861613850749912, 0.15861613850749912, 0.15861613850749912, 0.23600901561217758, 0.23600901561217758, 0.23600901561217758, 0.03971875429773375, 0.03971875429773375, 0.03971875429773375, 0.09205971040343097, 0.09205971040343097, 0.09205971040343097, 0.08876119652174153, 0.08876119652174153, 0.08876119652174153, 0.32108111478833157, 0.32108111478833157, 0.32108111478833157, 0.4051939756958536, 0.4051939756958536, 0.4051939756958536, 0.2627328708161678, 0.2627328708161678, 0.2627328708161678, 0.6065254670854281, 0.6065254670854281, 0.6065254670854281, 0.6502152026556987, 0.6502152026556987, 0.6502152026556987, 0.7382109653380294, 0.7382109653380294, 0.7382109653380294, 0.08608597181054733, 0.08608597181054733, 0.08608597181054733, 0.12514048757700602, 0.12514048757700602, 0.12514048757700602, 0.1338803750781784, 0.1338803750781784, 0.1338803750781784, 0.15912704406139933, 0.15912704406139933, 0.15912704406139933, 0.3309877469479974, 0.3309877469479974, 0.3309877469479974, 0.6930572326221238, 0.6930572326221238, 0.6930572326221238, 0.29711380197545056, 0.29711380197545056, 0.29711380197545056, 0.4767158630745717, 0.4767158630745717, 0.4767158630745717, 0.43907316397957097, 0.43907316397957097, 0.43907316397957097, 0.37129581647105625, 0.37129581647105625, 0.37129581647105625, 0.2784187717827563, 0.2784187717827563, 0.2784187717827563, 0.3106202582958515, 0.3106202582958515, 0.3106202582958515, 0.19415969470092465, 0.19415969470092465, 0.19415969470092465, 0.2062594470059843, 0.2062594470059843, 0.2062594470059843, 0.20560289769650197, 0.20560289769650197, 0.20560289769650197, 0.2030185618117213, 0.2030185618117213, 0.2030185618117213, 0.23603295165804816, 0.23603295165804816, 0.23603295165804816, 0.19950437774953633, 0.19950437774953633, 0.19950437774953633, 0.18306930156838175, 0.18306930156838175, 0.18306930156838175, 0.8595010371132848, 0.8595010371132848, 0.8595010371132848, 0.18631922257951306, 0.18631922257951306, 0.18631922257951306, 0.153332609011547, 0.153332609011547, 0.153332609011547, 0.31217708695611357, 0.31217708695611357, 0.31217708695611357, 0.21310444308002885, 0.21310444308002885, 0.21310444308002885, 0.19407021119711287, 0.19407021119711287, 0.19407021119711287, 0.1939543670881929, 0.1939543670881929, 0.1939543670881929, 0.18819490609958867, 0.18819490609958867, 0.18819490609958867, 0.0899581287922836, 0.0899581287922836, 0.0899581287922836, 0.08388284232792143, 0.08388284232792143, 0.08388284232792143, 0.08167481421506162, 0.08167481421506162, 0.08167481421506162]}, "mutation_prompt": null}
{"id": "207da76e-4cd7-4c84-9576-0f120f75362a", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max * np.random.rand())\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < 0.1:  # Introduce Gaussian perturbations occasionally\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Introducing an enhanced local search mechanism with Gaussian perturbations for improved exploitation capabilities.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.784546575066596, 0.784546575066596, 0.784546575066596, 0.7983457316899751, 0.7983457316899751, 0.7983457316899751, 0.8046482938921573, 0.8046482938921573, 0.8046482938921573, 0.6293421161011454, 0.6293421161011454, 0.6293421161011454, 0.476315199256659, 0.476315199256659, 0.476315199256659, 0.6428184260909617, 0.6428184260909617, 0.6428184260909617, 0.15281741541064275, 0.15281741541064275, 0.15281741541064275, 0.1605870172611601, 0.1605870172611601, 0.1605870172611601, 0.1262527259101447, 0.1262527259101447, 0.1262527259101447, 0.10421958297932599, 0.10421958297932599, 0.10421958297932599, 0.09061185291706042, 0.09061185291706042, 0.09061185291706042, 0.14298010164844455, 0.14298010164844455, 0.14298010164844455, 0.991919214456532, 0.991919214456532, 0.991919214456532, 0.9834967913264329, 0.9834967913264329, 0.9834967913264329, 0.9922004384876167, 0.9922004384876167, 0.9922004384876167, 0.6171649110667088, 0.6171649110667088, 0.6171649110667088, 0.6093474625310874, 0.6093474625310874, 0.6093474625310874, 0.6681841948952487, 0.6681841948952487, 0.6681841948952487, 0.7231561929103991, 0.7231561929103991, 0.7231561929103991, 0.7483525838035276, 0.7483525838035276, 0.7483525838035276, 0.7641709609975564, 0.7641709609975564, 0.7641709609975564, 0.3558538606518069, 0.3558538606518069, 0.3558538606518069, 0.4434689443708798, 0.4434689443708798, 0.4434689443708798, 0.474427464240863, 0.474427464240863, 0.474427464240863, 0.19486403695161347, 0.19486403695161347, 0.19486403695161347, 0.39606019408614357, 0.39606019408614357, 0.39606019408614357, 0.43766700877335807, 0.43766700877335807, 0.43766700877335807, 0.05227565121267019, 0.05227565121267019, 0.05227565121267019, 0.024445000539802586, 0.024445000539802586, 0.024445000539802586, 0.24788539585541491, 0.24788539585541491, 0.24788539585541491, 0.03193047673178351, 0.03193047673178351, 0.03193047673178351, 0.15861613850749912, 0.15861613850749912, 0.15861613850749912, 0.23600901561217758, 0.23600901561217758, 0.23600901561217758, 0.03971875429773375, 0.03971875429773375, 0.03971875429773375, 0.09205971040343097, 0.09205971040343097, 0.09205971040343097, 0.08876119652174153, 0.08876119652174153, 0.08876119652174153, 0.32108111478833157, 0.32108111478833157, 0.32108111478833157, 0.4051939756958536, 0.4051939756958536, 0.4051939756958536, 0.2627328708161678, 0.2627328708161678, 0.2627328708161678, 0.6065254670854281, 0.6065254670854281, 0.6065254670854281, 0.6502152026556987, 0.6502152026556987, 0.6502152026556987, 0.7382109653380294, 0.7382109653380294, 0.7382109653380294, 0.08608597181054733, 0.08608597181054733, 0.08608597181054733, 0.12514048757700602, 0.12514048757700602, 0.12514048757700602, 0.1338803750781784, 0.1338803750781784, 0.1338803750781784, 0.15912704406139933, 0.15912704406139933, 0.15912704406139933, 0.3309877469479974, 0.3309877469479974, 0.3309877469479974, 0.6930572326221238, 0.6930572326221238, 0.6930572326221238, 0.29711380197545056, 0.29711380197545056, 0.29711380197545056, 0.4767158630745717, 0.4767158630745717, 0.4767158630745717, 0.43907316397957097, 0.43907316397957097, 0.43907316397957097, 0.37129581647105625, 0.37129581647105625, 0.37129581647105625, 0.2784187717827563, 0.2784187717827563, 0.2784187717827563, 0.3106202582958515, 0.3106202582958515, 0.3106202582958515, 0.19415969470092465, 0.19415969470092465, 0.19415969470092465, 0.2062594470059843, 0.2062594470059843, 0.2062594470059843, 0.20560289769650197, 0.20560289769650197, 0.20560289769650197, 0.2030185618117213, 0.2030185618117213, 0.2030185618117213, 0.23603295165804816, 0.23603295165804816, 0.23603295165804816, 0.19950437774953633, 0.19950437774953633, 0.19950437774953633, 0.18306930156838175, 0.18306930156838175, 0.18306930156838175, 0.8595010371132848, 0.8595010371132848, 0.8595010371132848, 0.18631922257951306, 0.18631922257951306, 0.18631922257951306, 0.153332609011547, 0.153332609011547, 0.153332609011547, 0.31217708695611357, 0.31217708695611357, 0.31217708695611357, 0.21310444308002885, 0.21310444308002885, 0.21310444308002885, 0.19407021119711287, 0.19407021119711287, 0.19407021119711287, 0.1939543670881929, 0.1939543670881929, 0.1939543670881929, 0.18819490609958867, 0.18819490609958867, 0.18819490609958867, 0.0899581287922836, 0.0899581287922836, 0.0899581287922836, 0.08388284232792143, 0.08388284232792143, 0.08388284232792143, 0.08167481421506162, 0.08167481421506162, 0.08167481421506162]}, "mutation_prompt": null}
{"id": "0064226f-bc25-42eb-8389-5df3024b5976", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max * np.random.rand())\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < 0.1:  # Introduce Gaussian perturbations occasionally\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Introducing an enhanced local search mechanism with Gaussian perturbations for improved exploitation capabilities.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.784546575066596, 0.784546575066596, 0.784546575066596, 0.7983457316899751, 0.7983457316899751, 0.7983457316899751, 0.8046482938921573, 0.8046482938921573, 0.8046482938921573, 0.6293421161011454, 0.6293421161011454, 0.6293421161011454, 0.476315199256659, 0.476315199256659, 0.476315199256659, 0.6428184260909617, 0.6428184260909617, 0.6428184260909617, 0.15281741541064275, 0.15281741541064275, 0.15281741541064275, 0.1605870172611601, 0.1605870172611601, 0.1605870172611601, 0.1262527259101447, 0.1262527259101447, 0.1262527259101447, 0.10421958297932599, 0.10421958297932599, 0.10421958297932599, 0.09061185291706042, 0.09061185291706042, 0.09061185291706042, 0.14298010164844455, 0.14298010164844455, 0.14298010164844455, 0.991919214456532, 0.991919214456532, 0.991919214456532, 0.9834967913264329, 0.9834967913264329, 0.9834967913264329, 0.9922004384876167, 0.9922004384876167, 0.9922004384876167, 0.6171649110667088, 0.6171649110667088, 0.6171649110667088, 0.6093474625310874, 0.6093474625310874, 0.6093474625310874, 0.6681841948952487, 0.6681841948952487, 0.6681841948952487, 0.7231561929103991, 0.7231561929103991, 0.7231561929103991, 0.7483525838035276, 0.7483525838035276, 0.7483525838035276, 0.7641709609975564, 0.7641709609975564, 0.7641709609975564, 0.3558538606518069, 0.3558538606518069, 0.3558538606518069, 0.4434689443708798, 0.4434689443708798, 0.4434689443708798, 0.474427464240863, 0.474427464240863, 0.474427464240863, 0.19486403695161347, 0.19486403695161347, 0.19486403695161347, 0.39606019408614357, 0.39606019408614357, 0.39606019408614357, 0.43766700877335807, 0.43766700877335807, 0.43766700877335807, 0.05227565121267019, 0.05227565121267019, 0.05227565121267019, 0.024445000539802586, 0.024445000539802586, 0.024445000539802586, 0.24788539585541491, 0.24788539585541491, 0.24788539585541491, 0.03193047673178351, 0.03193047673178351, 0.03193047673178351, 0.15861613850749912, 0.15861613850749912, 0.15861613850749912, 0.23600901561217758, 0.23600901561217758, 0.23600901561217758, 0.03971875429773375, 0.03971875429773375, 0.03971875429773375, 0.09205971040343097, 0.09205971040343097, 0.09205971040343097, 0.08876119652174153, 0.08876119652174153, 0.08876119652174153, 0.32108111478833157, 0.32108111478833157, 0.32108111478833157, 0.4051939756958536, 0.4051939756958536, 0.4051939756958536, 0.2627328708161678, 0.2627328708161678, 0.2627328708161678, 0.6065254670854281, 0.6065254670854281, 0.6065254670854281, 0.6502152026556987, 0.6502152026556987, 0.6502152026556987, 0.7382109653380294, 0.7382109653380294, 0.7382109653380294, 0.08608597181054733, 0.08608597181054733, 0.08608597181054733, 0.12514048757700602, 0.12514048757700602, 0.12514048757700602, 0.1338803750781784, 0.1338803750781784, 0.1338803750781784, 0.15912704406139933, 0.15912704406139933, 0.15912704406139933, 0.3309877469479974, 0.3309877469479974, 0.3309877469479974, 0.6930572326221238, 0.6930572326221238, 0.6930572326221238, 0.29711380197545056, 0.29711380197545056, 0.29711380197545056, 0.4767158630745717, 0.4767158630745717, 0.4767158630745717, 0.43907316397957097, 0.43907316397957097, 0.43907316397957097, 0.37129581647105625, 0.37129581647105625, 0.37129581647105625, 0.2784187717827563, 0.2784187717827563, 0.2784187717827563, 0.3106202582958515, 0.3106202582958515, 0.3106202582958515, 0.19415969470092465, 0.19415969470092465, 0.19415969470092465, 0.2062594470059843, 0.2062594470059843, 0.2062594470059843, 0.20560289769650197, 0.20560289769650197, 0.20560289769650197, 0.2030185618117213, 0.2030185618117213, 0.2030185618117213, 0.23603295165804816, 0.23603295165804816, 0.23603295165804816, 0.19950437774953633, 0.19950437774953633, 0.19950437774953633, 0.18306930156838175, 0.18306930156838175, 0.18306930156838175, 0.8595010371132848, 0.8595010371132848, 0.8595010371132848, 0.18631922257951306, 0.18631922257951306, 0.18631922257951306, 0.153332609011547, 0.153332609011547, 0.153332609011547, 0.31217708695611357, 0.31217708695611357, 0.31217708695611357, 0.21310444308002885, 0.21310444308002885, 0.21310444308002885, 0.19407021119711287, 0.19407021119711287, 0.19407021119711287, 0.1939543670881929, 0.1939543670881929, 0.1939543670881929, 0.18819490609958867, 0.18819490609958867, 0.18819490609958867, 0.0899581287922836, 0.0899581287922836, 0.0899581287922836, 0.08388284232792143, 0.08388284232792143, 0.08388284232792143, 0.08167481421506162, 0.08167481421506162, 0.08167481421506162]}, "mutation_prompt": null}
{"id": "95fa2a29-755f-46ec-a5b2-2dbbd7bae902", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max * np.random.rand())\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < 0.1:  # Introduce Lévy flight perturbations occasionally\n                perturbation = np.random.normal(0, 0.1, self.dim) * np.random.standard_cauchy(self.dim)\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Enhance exploration by introducing Lévy flight perturbations in the update rules for diversity.", "configspace": "", "generation": 94, "fitness": 0.35856100678648767, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.26.", "error": "", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.777127994936702, 0.777127994936702, 0.777127994936702, 0.7997208810629874, 0.7997208810629874, 0.7997208810629874, 0.7692027877359646, 0.7692027877359646, 0.7692027877359646, 0.5328152906749186, 0.5328152906749186, 0.5328152906749186, 0.5732951134451273, 0.5732951134451273, 0.5732951134451273, 0.49817692694018245, 0.49817692694018245, 0.49817692694018245, 0.43522667480684274, 0.43522667480684274, 0.43522667480684274, 0.12392790564046974, 0.12392790564046974, 0.12392790564046974, 0.13064856649884637, 0.13064856649884637, 0.13064856649884637, 0.09607469709728411, 0.09607469709728411, 0.09607469709728411, 0.1117786592995007, 0.1117786592995007, 0.1117786592995007, 0.11808141445558684, 0.11808141445558684, 0.11808141445558684, 0.991919214456532, 0.991919214456532, 0.991919214456532, 0.9834967913264329, 0.9834967913264329, 0.9834967913264329, 0.9922004384876167, 0.9922004384876167, 0.9922004384876167, 0.5796944066172968, 0.5796944066172968, 0.5796944066172968, 0.6206531396373953, 0.6206531396373953, 0.6206531396373953, 0.6410461129926941, 0.6410461129926941, 0.6410461129926941, 0.2227526141940892, 0.2227526141940892, 0.2227526141940892, 0.7757870650950175, 0.7757870650950175, 0.7757870650950175, 0.7228930619913658, 0.7228930619913658, 0.7228930619913658, 0.3737745964633853, 0.3737745964633853, 0.3737745964633853, 0.3377134817633197, 0.3377134817633197, 0.3377134817633197, 0.4203799004644003, 0.4203799004644003, 0.4203799004644003, 0.11123369399221117, 0.11123369399221117, 0.11123369399221117, 0.3094395222502737, 0.3094395222502737, 0.3094395222502737, 0.5155079925640964, 0.5155079925640964, 0.5155079925640964, 0.06423165196250247, 0.06423165196250247, 0.06423165196250247, 0.02462755663443217, 0.02462755663443217, 0.02462755663443217, 0.30871329787527246, 0.30871329787527246, 0.30871329787527246, 0.036670048399418786, 0.036670048399418786, 0.036670048399418786, 0.19343084419107914, 0.19343084419107914, 0.19343084419107914, 0.2350692859439628, 0.2350692859439628, 0.2350692859439628, 0.0645433739147937, 0.0645433739147937, 0.0645433739147937, 0.1319355490879479, 0.1319355490879479, 0.1319355490879479, 0.08737701839973111, 0.08737701839973111, 0.08737701839973111, 0.25555301246886974, 0.25555301246886974, 0.25555301246886974, 0.3000035597763775, 0.3000035597763775, 0.3000035597763775, 0.2784466271926187, 0.2784466271926187, 0.2784466271926187, 0.6326609306667066, 0.6326609306667066, 0.6326609306667066, 0.6226272821494767, 0.6226272821494767, 0.6226272821494767, 0.6069323660591562, 0.6069323660591562, 0.6069323660591562, 0.09849799007940219, 0.09849799007940219, 0.09849799007940219, 0.1288721003973362, 0.1288721003973362, 0.1288721003973362, 0.11781117610797154, 0.11781117610797154, 0.11781117610797154, 0.22225473395957074, 0.22225473395957074, 0.22225473395957074, 0.4707345721753551, 0.4707345721753551, 0.4707345721753551, 0.6348206195971798, 0.6348206195971798, 0.6348206195971798, 0.4409274369703037, 0.4409274369703037, 0.4409274369703037, 0.4462459021128631, 0.4462459021128631, 0.4462459021128631, 0.45989918540522634, 0.45989918540522634, 0.45989918540522634, 0.2870528667855603, 0.2870528667855603, 0.2870528667855603, 0.2844263957580996, 0.2844263957580996, 0.2844263957580996, 0.3150353045748314, 0.3150353045748314, 0.3150353045748314, 0.2685071935662985, 0.2685071935662985, 0.2685071935662985, 0.21909228395087843, 0.21909228395087843, 0.21909228395087843, 0.21229325512643227, 0.21229325512643227, 0.21229325512643227, 0.23747210804452623, 0.23747210804452623, 0.23747210804452623, 0.2003218961343629, 0.2003218961343629, 0.2003218961343629, 0.20717289300242092, 0.20717289300242092, 0.20717289300242092, 0.1843700564303964, 0.1843700564303964, 0.1843700564303964, 0.8408937571848525, 0.8408937571848525, 0.8408937571848525, 0.18622297193425574, 0.18622297193425574, 0.18622297193425574, 0.15401404640612415, 0.15401404640612415, 0.15401404640612415, 0.7765093679591992, 0.7765093679591992, 0.7765093679591992, 0.21312120869405848, 0.21312120869405848, 0.21312120869405848, 0.18851781573409765, 0.18851781573409765, 0.18851781573409765, 0.17887095366437666, 0.17887095366437666, 0.17887095366437666, 0.1789132197444453, 0.1789132197444453, 0.1789132197444453, 0.08134352600848893, 0.08134352600848893, 0.08134352600848893, 0.090188156928938, 0.090188156928938, 0.090188156928938, 0.0845981445763726, 0.0845981445763726, 0.0845981445763726]}, "mutation_prompt": null}
{"id": "70e30605-609d-4960-92fa-686a00d187dc", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max * np.random.rand())\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < 0.1:  # Introduce Gaussian perturbations occasionally\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Introducing an enhanced local search mechanism with Gaussian perturbations for improved exploitation capabilities.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.784546575066596, 0.784546575066596, 0.784546575066596, 0.7983457316899751, 0.7983457316899751, 0.7983457316899751, 0.8046482938921573, 0.8046482938921573, 0.8046482938921573, 0.6293421161011454, 0.6293421161011454, 0.6293421161011454, 0.476315199256659, 0.476315199256659, 0.476315199256659, 0.6428184260909617, 0.6428184260909617, 0.6428184260909617, 0.15281741541064275, 0.15281741541064275, 0.15281741541064275, 0.1605870172611601, 0.1605870172611601, 0.1605870172611601, 0.1262527259101447, 0.1262527259101447, 0.1262527259101447, 0.10421958297932599, 0.10421958297932599, 0.10421958297932599, 0.09061185291706042, 0.09061185291706042, 0.09061185291706042, 0.14298010164844455, 0.14298010164844455, 0.14298010164844455, 0.991919214456532, 0.991919214456532, 0.991919214456532, 0.9834967913264329, 0.9834967913264329, 0.9834967913264329, 0.9922004384876167, 0.9922004384876167, 0.9922004384876167, 0.6171649110667088, 0.6171649110667088, 0.6171649110667088, 0.6093474625310874, 0.6093474625310874, 0.6093474625310874, 0.6681841948952487, 0.6681841948952487, 0.6681841948952487, 0.7231561929103991, 0.7231561929103991, 0.7231561929103991, 0.7483525838035276, 0.7483525838035276, 0.7483525838035276, 0.7641709609975564, 0.7641709609975564, 0.7641709609975564, 0.3558538606518069, 0.3558538606518069, 0.3558538606518069, 0.4434689443708798, 0.4434689443708798, 0.4434689443708798, 0.474427464240863, 0.474427464240863, 0.474427464240863, 0.19486403695161347, 0.19486403695161347, 0.19486403695161347, 0.39606019408614357, 0.39606019408614357, 0.39606019408614357, 0.43766700877335807, 0.43766700877335807, 0.43766700877335807, 0.05227565121267019, 0.05227565121267019, 0.05227565121267019, 0.024445000539802586, 0.024445000539802586, 0.024445000539802586, 0.24788539585541491, 0.24788539585541491, 0.24788539585541491, 0.03193047673178351, 0.03193047673178351, 0.03193047673178351, 0.15861613850749912, 0.15861613850749912, 0.15861613850749912, 0.23600901561217758, 0.23600901561217758, 0.23600901561217758, 0.03971875429773375, 0.03971875429773375, 0.03971875429773375, 0.09205971040343097, 0.09205971040343097, 0.09205971040343097, 0.08876119652174153, 0.08876119652174153, 0.08876119652174153, 0.32108111478833157, 0.32108111478833157, 0.32108111478833157, 0.4051939756958536, 0.4051939756958536, 0.4051939756958536, 0.2627328708161678, 0.2627328708161678, 0.2627328708161678, 0.6065254670854281, 0.6065254670854281, 0.6065254670854281, 0.6502152026556987, 0.6502152026556987, 0.6502152026556987, 0.7382109653380294, 0.7382109653380294, 0.7382109653380294, 0.08608597181054733, 0.08608597181054733, 0.08608597181054733, 0.12514048757700602, 0.12514048757700602, 0.12514048757700602, 0.1338803750781784, 0.1338803750781784, 0.1338803750781784, 0.15912704406139933, 0.15912704406139933, 0.15912704406139933, 0.3309877469479974, 0.3309877469479974, 0.3309877469479974, 0.6930572326221238, 0.6930572326221238, 0.6930572326221238, 0.29711380197545056, 0.29711380197545056, 0.29711380197545056, 0.4767158630745717, 0.4767158630745717, 0.4767158630745717, 0.43907316397957097, 0.43907316397957097, 0.43907316397957097, 0.37129581647105625, 0.37129581647105625, 0.37129581647105625, 0.2784187717827563, 0.2784187717827563, 0.2784187717827563, 0.3106202582958515, 0.3106202582958515, 0.3106202582958515, 0.19415969470092465, 0.19415969470092465, 0.19415969470092465, 0.2062594470059843, 0.2062594470059843, 0.2062594470059843, 0.20560289769650197, 0.20560289769650197, 0.20560289769650197, 0.2030185618117213, 0.2030185618117213, 0.2030185618117213, 0.23603295165804816, 0.23603295165804816, 0.23603295165804816, 0.19950437774953633, 0.19950437774953633, 0.19950437774953633, 0.18306930156838175, 0.18306930156838175, 0.18306930156838175, 0.8595010371132848, 0.8595010371132848, 0.8595010371132848, 0.18631922257951306, 0.18631922257951306, 0.18631922257951306, 0.153332609011547, 0.153332609011547, 0.153332609011547, 0.31217708695611357, 0.31217708695611357, 0.31217708695611357, 0.21310444308002885, 0.21310444308002885, 0.21310444308002885, 0.19407021119711287, 0.19407021119711287, 0.19407021119711287, 0.1939543670881929, 0.1939543670881929, 0.1939543670881929, 0.18819490609958867, 0.18819490609958867, 0.18819490609958867, 0.0899581287922836, 0.0899581287922836, 0.0899581287922836, 0.08388284232792143, 0.08388284232792143, 0.08388284232792143, 0.08167481421506162, 0.08167481421506162, 0.08167481421506162]}, "mutation_prompt": null}
{"id": "124b59d6-3c26-4cb8-ad1b-f66b7bd3c2ee", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max * np.random.rand())\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < 0.1:  # Introduce Gaussian perturbations occasionally\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Introducing an enhanced local search mechanism with Gaussian perturbations for improved exploitation capabilities.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.784546575066596, 0.784546575066596, 0.784546575066596, 0.7983457316899751, 0.7983457316899751, 0.7983457316899751, 0.8046482938921573, 0.8046482938921573, 0.8046482938921573, 0.6293421161011454, 0.6293421161011454, 0.6293421161011454, 0.476315199256659, 0.476315199256659, 0.476315199256659, 0.6428184260909617, 0.6428184260909617, 0.6428184260909617, 0.15281741541064275, 0.15281741541064275, 0.15281741541064275, 0.1605870172611601, 0.1605870172611601, 0.1605870172611601, 0.1262527259101447, 0.1262527259101447, 0.1262527259101447, 0.10421958297932599, 0.10421958297932599, 0.10421958297932599, 0.09061185291706042, 0.09061185291706042, 0.09061185291706042, 0.14298010164844455, 0.14298010164844455, 0.14298010164844455, 0.991919214456532, 0.991919214456532, 0.991919214456532, 0.9834967913264329, 0.9834967913264329, 0.9834967913264329, 0.9922004384876167, 0.9922004384876167, 0.9922004384876167, 0.6171649110667088, 0.6171649110667088, 0.6171649110667088, 0.6093474625310874, 0.6093474625310874, 0.6093474625310874, 0.6681841948952487, 0.6681841948952487, 0.6681841948952487, 0.7231561929103991, 0.7231561929103991, 0.7231561929103991, 0.7483525838035276, 0.7483525838035276, 0.7483525838035276, 0.7641709609975564, 0.7641709609975564, 0.7641709609975564, 0.3558538606518069, 0.3558538606518069, 0.3558538606518069, 0.4434689443708798, 0.4434689443708798, 0.4434689443708798, 0.474427464240863, 0.474427464240863, 0.474427464240863, 0.19486403695161347, 0.19486403695161347, 0.19486403695161347, 0.39606019408614357, 0.39606019408614357, 0.39606019408614357, 0.43766700877335807, 0.43766700877335807, 0.43766700877335807, 0.05227565121267019, 0.05227565121267019, 0.05227565121267019, 0.024445000539802586, 0.024445000539802586, 0.024445000539802586, 0.24788539585541491, 0.24788539585541491, 0.24788539585541491, 0.03193047673178351, 0.03193047673178351, 0.03193047673178351, 0.15861613850749912, 0.15861613850749912, 0.15861613850749912, 0.23600901561217758, 0.23600901561217758, 0.23600901561217758, 0.03971875429773375, 0.03971875429773375, 0.03971875429773375, 0.09205971040343097, 0.09205971040343097, 0.09205971040343097, 0.08876119652174153, 0.08876119652174153, 0.08876119652174153, 0.32108111478833157, 0.32108111478833157, 0.32108111478833157, 0.4051939756958536, 0.4051939756958536, 0.4051939756958536, 0.2627328708161678, 0.2627328708161678, 0.2627328708161678, 0.6065254670854281, 0.6065254670854281, 0.6065254670854281, 0.6502152026556987, 0.6502152026556987, 0.6502152026556987, 0.7382109653380294, 0.7382109653380294, 0.7382109653380294, 0.08608597181054733, 0.08608597181054733, 0.08608597181054733, 0.12514048757700602, 0.12514048757700602, 0.12514048757700602, 0.1338803750781784, 0.1338803750781784, 0.1338803750781784, 0.15912704406139933, 0.15912704406139933, 0.15912704406139933, 0.3309877469479974, 0.3309877469479974, 0.3309877469479974, 0.6930572326221238, 0.6930572326221238, 0.6930572326221238, 0.29711380197545056, 0.29711380197545056, 0.29711380197545056, 0.4767158630745717, 0.4767158630745717, 0.4767158630745717, 0.43907316397957097, 0.43907316397957097, 0.43907316397957097, 0.37129581647105625, 0.37129581647105625, 0.37129581647105625, 0.2784187717827563, 0.2784187717827563, 0.2784187717827563, 0.3106202582958515, 0.3106202582958515, 0.3106202582958515, 0.19415969470092465, 0.19415969470092465, 0.19415969470092465, 0.2062594470059843, 0.2062594470059843, 0.2062594470059843, 0.20560289769650197, 0.20560289769650197, 0.20560289769650197, 0.2030185618117213, 0.2030185618117213, 0.2030185618117213, 0.23603295165804816, 0.23603295165804816, 0.23603295165804816, 0.19950437774953633, 0.19950437774953633, 0.19950437774953633, 0.18306930156838175, 0.18306930156838175, 0.18306930156838175, 0.8595010371132848, 0.8595010371132848, 0.8595010371132848, 0.18631922257951306, 0.18631922257951306, 0.18631922257951306, 0.153332609011547, 0.153332609011547, 0.153332609011547, 0.31217708695611357, 0.31217708695611357, 0.31217708695611357, 0.21310444308002885, 0.21310444308002885, 0.21310444308002885, 0.19407021119711287, 0.19407021119711287, 0.19407021119711287, 0.1939543670881929, 0.1939543670881929, 0.1939543670881929, 0.18819490609958867, 0.18819490609958867, 0.18819490609958867, 0.0899581287922836, 0.0899581287922836, 0.0899581287922836, 0.08388284232792143, 0.08388284232792143, 0.08388284232792143, 0.08167481421506162, 0.08167481421506162, 0.08167481421506162]}, "mutation_prompt": null}
{"id": "a59c8bcb-099d-4c34-8e98-5103503e6241", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            # Adaptive inertia weight based on evaluation progress\n            w = self.w_max - ((self.w_max - self.w_min) * (eval_count / self.budget))\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < 0.1:  # Introduce Gaussian perturbations occasionally\n                perturbation = np.random.normal(0, 0.05, self.dim)  # Reduced perturbation variance\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Introducing adaptive inertia weight dynamics and enhanced diversity preservation during the search process.", "configspace": "", "generation": 97, "fitness": 0.2190312829352911, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.546291065730311, 0.546291065730311, 0.546291065730311, 0.5234691124840318, 0.5234691124840318, 0.5234691124840318, 0.5755454730227887, 0.5755454730227887, 0.5755454730227887, 0.3580898662263601, 0.3580898662263601, 0.3580898662263601, 0.25474726926039337, 0.25474726926039337, 0.25474726926039337, 0.029029923478199104, 0.029029923478199104, 0.029029923478199104, 0.14456130669307787, 0.14456130669307787, 0.14456130669307787, 0.08905953510924591, 0.08905953510924591, 0.08905953510924591, 0.08460329635067632, 0.08460329635067632, 0.08460329635067632, 0.09564840222516091, 0.09564840222516091, 0.09564840222516091, 0.08596915977715924, 0.08596915977715924, 0.08596915977715924, 0.07571620770928655, 0.07571620770928655, 0.07571620770928655, 0.991756021450507, 0.991756021450507, 0.991756021450507, 0.9941437038619615, 0.9941437038619615, 0.9941437038619615, 0.9940303254248323, 0.9940303254248323, 0.9940303254248323, 0.3556567855690649, 0.3556567855690649, 0.3556567855690649, 0.42184113184503413, 0.42184113184503413, 0.42184113184503413, 0.3620421821149211, 0.3620421821149211, 0.3620421821149211, 0.28376367137840786, 0.28376367137840786, 0.28376367137840786, 0.17174751992601855, 0.17174751992601855, 0.17174751992601855, 0.2732461885031007, 0.2732461885031007, 0.2732461885031007, 0.15012269716529958, 0.15012269716529958, 0.15012269716529958, 0.09252714339188517, 0.09252714339188517, 0.09252714339188517, 0.18691779467734781, 0.18691779467734781, 0.18691779467734781, 0.08058887156565064, 0.08058887156565064, 0.08058887156565064, 0.16575947489647624, 0.16575947489647624, 0.16575947489647624, 0.0661778793023845, 0.0661778793023845, 0.0661778793023845, 0.019999661625631937, 0.019999661625631937, 0.019999661625631937, 0.0003575982098349417, 0.0003575982098349417, 0.0003575982098349417, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06575611912012069, 0.06575611912012069, 0.06575611912012069, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07268393497059533, 0.07268393497059533, 0.07268393497059533, 0.02381581446970582, 0.02381581446970582, 0.02381581446970582, 0.03988276593022111, 0.03988276593022111, 0.03988276593022111, 0.048774569365263254, 0.048774569365263254, 0.048774569365263254, 0.12805658623826055, 0.12805658623826055, 0.12805658623826055, 0.10113940251177589, 0.10113940251177589, 0.10113940251177589, 0.06721734598664875, 0.06721734598664875, 0.06721734598664875, 0.41445651807430606, 0.41445651807430606, 0.41445651807430606, 0.4403277921875355, 0.4403277921875355, 0.4403277921875355, 0.4021782350012044, 0.4021782350012044, 0.4021782350012044, 0.0489677163003136, 0.0489677163003136, 0.0489677163003136, 0.0934925159283182, 0.0934925159283182, 0.0934925159283182, 0.11512092393972084, 0.11512092393972084, 0.11512092393972084, 0.1635492208557604, 0.1635492208557604, 0.1635492208557604, 0.22122559527574137, 0.22122559527574137, 0.22122559527574137, 0.16719011240454307, 0.16719011240454307, 0.16719011240454307, 0.2182648881847098, 0.2182648881847098, 0.2182648881847098, 0.1871421993091512, 0.1871421993091512, 0.1871421993091512, 0.19215147053749237, 0.19215147053749237, 0.19215147053749237, 0.2349343543117578, 0.2349343543117578, 0.2349343543117578, 0.1903824298199841, 0.1903824298199841, 0.1903824298199841, 0.1454618621273237, 0.1454618621273237, 0.1454618621273237, 0.16827970320121477, 0.16827970320121477, 0.16827970320121477, 0.17219256406421024, 0.17219256406421024, 0.17219256406421024, 0.1858366115035811, 0.1858366115035811, 0.1858366115035811, 0.40069450114237326, 0.40069450114237326, 0.40069450114237326, 0.20099869599226394, 0.20099869599226394, 0.20099869599226394, 0.18811444511800335, 0.18811444511800335, 0.18811444511800335, 0.14759138763350255, 0.14759138763350255, 0.14759138763350255, 0.16978930514936696, 0.16978930514936696, 0.16978930514936696, 0.5900836393713664, 0.5900836393713664, 0.5900836393713664, 0.1637926139676723, 0.1637926139676723, 0.1637926139676723, 0.12117386829817567, 0.12117386829817567, 0.12117386829817567, 0.20935164125100092, 0.20935164125100092, 0.20935164125100092, 0.1963707367329841, 0.1963707367329841, 0.1963707367329841, 0.19035890287718016, 0.19035890287718016, 0.19035890287718016, 0.1911778858880383, 0.1911778858880383, 0.1911778858880383, 0.07658430505256053, 0.07658430505256053, 0.07658430505256053, 0.07268593989691186, 0.07268593989691186, 0.07268593989691186, 0.06939398237504979, 0.06939398237504979, 0.06939398237504979]}, "mutation_prompt": null}
{"id": "d4403458-36fc-475b-84fb-3fd5a2f1d14d", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max * np.random.rand())\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < 0.1:  # Introduce Gaussian perturbations occasionally\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Introducing an enhanced local search mechanism with Gaussian perturbations for improved exploitation capabilities.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.784546575066596, 0.784546575066596, 0.784546575066596, 0.7983457316899751, 0.7983457316899751, 0.7983457316899751, 0.8046482938921573, 0.8046482938921573, 0.8046482938921573, 0.6293421161011454, 0.6293421161011454, 0.6293421161011454, 0.476315199256659, 0.476315199256659, 0.476315199256659, 0.6428184260909617, 0.6428184260909617, 0.6428184260909617, 0.15281741541064275, 0.15281741541064275, 0.15281741541064275, 0.1605870172611601, 0.1605870172611601, 0.1605870172611601, 0.1262527259101447, 0.1262527259101447, 0.1262527259101447, 0.10421958297932599, 0.10421958297932599, 0.10421958297932599, 0.09061185291706042, 0.09061185291706042, 0.09061185291706042, 0.14298010164844455, 0.14298010164844455, 0.14298010164844455, 0.991919214456532, 0.991919214456532, 0.991919214456532, 0.9834967913264329, 0.9834967913264329, 0.9834967913264329, 0.9922004384876167, 0.9922004384876167, 0.9922004384876167, 0.6171649110667088, 0.6171649110667088, 0.6171649110667088, 0.6093474625310874, 0.6093474625310874, 0.6093474625310874, 0.6681841948952487, 0.6681841948952487, 0.6681841948952487, 0.7231561929103991, 0.7231561929103991, 0.7231561929103991, 0.7483525838035276, 0.7483525838035276, 0.7483525838035276, 0.7641709609975564, 0.7641709609975564, 0.7641709609975564, 0.3558538606518069, 0.3558538606518069, 0.3558538606518069, 0.4434689443708798, 0.4434689443708798, 0.4434689443708798, 0.474427464240863, 0.474427464240863, 0.474427464240863, 0.19486403695161347, 0.19486403695161347, 0.19486403695161347, 0.39606019408614357, 0.39606019408614357, 0.39606019408614357, 0.43766700877335807, 0.43766700877335807, 0.43766700877335807, 0.05227565121267019, 0.05227565121267019, 0.05227565121267019, 0.024445000539802586, 0.024445000539802586, 0.024445000539802586, 0.24788539585541491, 0.24788539585541491, 0.24788539585541491, 0.03193047673178351, 0.03193047673178351, 0.03193047673178351, 0.15861613850749912, 0.15861613850749912, 0.15861613850749912, 0.23600901561217758, 0.23600901561217758, 0.23600901561217758, 0.03971875429773375, 0.03971875429773375, 0.03971875429773375, 0.09205971040343097, 0.09205971040343097, 0.09205971040343097, 0.08876119652174153, 0.08876119652174153, 0.08876119652174153, 0.32108111478833157, 0.32108111478833157, 0.32108111478833157, 0.4051939756958536, 0.4051939756958536, 0.4051939756958536, 0.2627328708161678, 0.2627328708161678, 0.2627328708161678, 0.6065254670854281, 0.6065254670854281, 0.6065254670854281, 0.6502152026556987, 0.6502152026556987, 0.6502152026556987, 0.7382109653380294, 0.7382109653380294, 0.7382109653380294, 0.08608597181054733, 0.08608597181054733, 0.08608597181054733, 0.12514048757700602, 0.12514048757700602, 0.12514048757700602, 0.1338803750781784, 0.1338803750781784, 0.1338803750781784, 0.15912704406139933, 0.15912704406139933, 0.15912704406139933, 0.3309877469479974, 0.3309877469479974, 0.3309877469479974, 0.6930572326221238, 0.6930572326221238, 0.6930572326221238, 0.29711380197545056, 0.29711380197545056, 0.29711380197545056, 0.4767158630745717, 0.4767158630745717, 0.4767158630745717, 0.43907316397957097, 0.43907316397957097, 0.43907316397957097, 0.37129581647105625, 0.37129581647105625, 0.37129581647105625, 0.2784187717827563, 0.2784187717827563, 0.2784187717827563, 0.3106202582958515, 0.3106202582958515, 0.3106202582958515, 0.19415969470092465, 0.19415969470092465, 0.19415969470092465, 0.2062594470059843, 0.2062594470059843, 0.2062594470059843, 0.20560289769650197, 0.20560289769650197, 0.20560289769650197, 0.2030185618117213, 0.2030185618117213, 0.2030185618117213, 0.23603295165804816, 0.23603295165804816, 0.23603295165804816, 0.19950437774953633, 0.19950437774953633, 0.19950437774953633, 0.18306930156838175, 0.18306930156838175, 0.18306930156838175, 0.8595010371132848, 0.8595010371132848, 0.8595010371132848, 0.18631922257951306, 0.18631922257951306, 0.18631922257951306, 0.153332609011547, 0.153332609011547, 0.153332609011547, 0.31217708695611357, 0.31217708695611357, 0.31217708695611357, 0.21310444308002885, 0.21310444308002885, 0.21310444308002885, 0.19407021119711287, 0.19407021119711287, 0.19407021119711287, 0.1939543670881929, 0.1939543670881929, 0.1939543670881929, 0.18819490609958867, 0.18819490609958867, 0.18819490609958867, 0.0899581287922836, 0.0899581287922836, 0.0899581287922836, 0.08388284232792143, 0.08388284232792143, 0.08388284232792143, 0.08167481421506162, 0.08167481421506162, 0.08167481421506162]}, "mutation_prompt": null}
{"id": "0c8b3536-20a7-4790-a2c0-fd8272aed426", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.pop_size = 20\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w_max = 0.9\n        self.w_min = 0.4\n        self.F = 0.5\n        self.CR = 0.9\n        \n    def __call__(self, func):\n        np.random.seed(0)\n        X = np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))\n        V = np.random.uniform(-abs(self.ub-self.lb), abs(self.ub-self.lb), (self.pop_size, self.dim))\n        p_best = X.copy()\n        p_best_vals = np.array([func(x) for x in X])\n        g_best = p_best[np.argmin(p_best_vals)]\n        \n        eval_count = len(X)\n        \n        while eval_count < self.budget:\n            w = np.random.uniform(self.w_min, self.w_max * np.random.rand())\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(2)\n                self.c1, self.c2 = 1.5 + np.random.rand(), 1.5 + np.random.rand()\n                V[i] = w * V[i] + self.c1 * r1 * (p_best[i] - X[i]) + self.c2 * r2 * (g_best - X[i])\n                X[i] = np.clip(X[i] + V[i], self.lb, self.ub)\n            \n            if eval_count > self.budget * 0.5 and self.pop_size > 5:\n                self.pop_size -= 1\n                X = X[:self.pop_size]\n                V = V[:self.pop_size]\n                p_best = p_best[:self.pop_size]\n                p_best_vals = p_best_vals[:self.pop_size]\n            \n            self.F = 0.4 + 0.3 * (np.exp(-5.0 * eval_count / self.budget))\n            self.CR = np.random.uniform(0.7, 0.9)\n            for i in range(self.pop_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = X[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lb, self.ub)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, X[i])\n                \n                f_trial = func(trial)\n                eval_count += 1\n                \n                if f_trial < p_best_vals[i]:\n                    p_best[i] = trial\n                    p_best_vals[i] = f_trial\n                    if f_trial < func(g_best):\n                        g_best = trial\n\n            if np.random.rand() < 0.1:  # Introduce Gaussian perturbations occasionally\n                perturbation = np.random.normal(0, 0.1, self.dim)\n                candidate = np.clip(g_best + perturbation, self.lb, self.ub)\n                f_candidate = func(candidate)\n                eval_count += 1\n                if f_candidate < func(g_best):\n                    g_best = candidate\n            \n            if eval_count >= self.budget:\n                break\n        \n        return g_best", "name": "HybridPSO_DE", "description": "Introducing an enhanced local search mechanism with Gaussian perturbations for improved exploitation capabilities.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3ebc83e7-4483-4b50-b50d-2a8b97906baa", "metadata": {"aucs": [0.784546575066596, 0.784546575066596, 0.784546575066596, 0.7983457316899751, 0.7983457316899751, 0.7983457316899751, 0.8046482938921573, 0.8046482938921573, 0.8046482938921573, 0.6293421161011454, 0.6293421161011454, 0.6293421161011454, 0.476315199256659, 0.476315199256659, 0.476315199256659, 0.6428184260909617, 0.6428184260909617, 0.6428184260909617, 0.15281741541064275, 0.15281741541064275, 0.15281741541064275, 0.1605870172611601, 0.1605870172611601, 0.1605870172611601, 0.1262527259101447, 0.1262527259101447, 0.1262527259101447, 0.10421958297932599, 0.10421958297932599, 0.10421958297932599, 0.09061185291706042, 0.09061185291706042, 0.09061185291706042, 0.14298010164844455, 0.14298010164844455, 0.14298010164844455, 0.991919214456532, 0.991919214456532, 0.991919214456532, 0.9834967913264329, 0.9834967913264329, 0.9834967913264329, 0.9922004384876167, 0.9922004384876167, 0.9922004384876167, 0.6171649110667088, 0.6171649110667088, 0.6171649110667088, 0.6093474625310874, 0.6093474625310874, 0.6093474625310874, 0.6681841948952487, 0.6681841948952487, 0.6681841948952487, 0.7231561929103991, 0.7231561929103991, 0.7231561929103991, 0.7483525838035276, 0.7483525838035276, 0.7483525838035276, 0.7641709609975564, 0.7641709609975564, 0.7641709609975564, 0.3558538606518069, 0.3558538606518069, 0.3558538606518069, 0.4434689443708798, 0.4434689443708798, 0.4434689443708798, 0.474427464240863, 0.474427464240863, 0.474427464240863, 0.19486403695161347, 0.19486403695161347, 0.19486403695161347, 0.39606019408614357, 0.39606019408614357, 0.39606019408614357, 0.43766700877335807, 0.43766700877335807, 0.43766700877335807, 0.05227565121267019, 0.05227565121267019, 0.05227565121267019, 0.024445000539802586, 0.024445000539802586, 0.024445000539802586, 0.24788539585541491, 0.24788539585541491, 0.24788539585541491, 0.03193047673178351, 0.03193047673178351, 0.03193047673178351, 0.15861613850749912, 0.15861613850749912, 0.15861613850749912, 0.23600901561217758, 0.23600901561217758, 0.23600901561217758, 0.03971875429773375, 0.03971875429773375, 0.03971875429773375, 0.09205971040343097, 0.09205971040343097, 0.09205971040343097, 0.08876119652174153, 0.08876119652174153, 0.08876119652174153, 0.32108111478833157, 0.32108111478833157, 0.32108111478833157, 0.4051939756958536, 0.4051939756958536, 0.4051939756958536, 0.2627328708161678, 0.2627328708161678, 0.2627328708161678, 0.6065254670854281, 0.6065254670854281, 0.6065254670854281, 0.6502152026556987, 0.6502152026556987, 0.6502152026556987, 0.7382109653380294, 0.7382109653380294, 0.7382109653380294, 0.08608597181054733, 0.08608597181054733, 0.08608597181054733, 0.12514048757700602, 0.12514048757700602, 0.12514048757700602, 0.1338803750781784, 0.1338803750781784, 0.1338803750781784, 0.15912704406139933, 0.15912704406139933, 0.15912704406139933, 0.3309877469479974, 0.3309877469479974, 0.3309877469479974, 0.6930572326221238, 0.6930572326221238, 0.6930572326221238, 0.29711380197545056, 0.29711380197545056, 0.29711380197545056, 0.4767158630745717, 0.4767158630745717, 0.4767158630745717, 0.43907316397957097, 0.43907316397957097, 0.43907316397957097, 0.37129581647105625, 0.37129581647105625, 0.37129581647105625, 0.2784187717827563, 0.2784187717827563, 0.2784187717827563, 0.3106202582958515, 0.3106202582958515, 0.3106202582958515, 0.19415969470092465, 0.19415969470092465, 0.19415969470092465, 0.2062594470059843, 0.2062594470059843, 0.2062594470059843, 0.20560289769650197, 0.20560289769650197, 0.20560289769650197, 0.2030185618117213, 0.2030185618117213, 0.2030185618117213, 0.23603295165804816, 0.23603295165804816, 0.23603295165804816, 0.19950437774953633, 0.19950437774953633, 0.19950437774953633, 0.18306930156838175, 0.18306930156838175, 0.18306930156838175, 0.8595010371132848, 0.8595010371132848, 0.8595010371132848, 0.18631922257951306, 0.18631922257951306, 0.18631922257951306, 0.153332609011547, 0.153332609011547, 0.153332609011547, 0.31217708695611357, 0.31217708695611357, 0.31217708695611357, 0.21310444308002885, 0.21310444308002885, 0.21310444308002885, 0.19407021119711287, 0.19407021119711287, 0.19407021119711287, 0.1939543670881929, 0.1939543670881929, 0.1939543670881929, 0.18819490609958867, 0.18819490609958867, 0.18819490609958867, 0.0899581287922836, 0.0899581287922836, 0.0899581287922836, 0.08388284232792143, 0.08388284232792143, 0.08388284232792143, 0.08167481421506162, 0.08167481421506162, 0.08167481421506162]}, "mutation_prompt": null}
