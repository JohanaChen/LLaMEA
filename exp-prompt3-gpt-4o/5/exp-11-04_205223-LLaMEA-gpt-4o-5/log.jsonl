{"id": "5ff25612-0108-4301-aa28-6c7a5f2f4430", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.7\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                # Evaluate the function\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Update velocities and positions for PSO\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                # Clamp positions to the search space\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Apply DE mutation and crossover\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly select three indices for mutation\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                # Evaluate the trial vector\n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                # Update position if the trial vector is better\n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    # Update global best\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for global exploration and local exploitation.", "configspace": "", "generation": 0, "fitness": 0.3523143768664814, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.30.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8980287912557612, 0.8997953605254675, 0.9115857592385209, 0.9286853952470461, 0.18342875382227797, 0.897656263226581, 0.8948245359900984, 0.9016462435372804, 0.9093516721298047, 0.8357819885260334, 0.0434236103559531, 0.042934888218253975, 0.8195871580022182, 0.8082580942815176, 0.8121293731051478, 0.8103103936664198, 0.8258522312443132, 0.019482844205761296, 0.6922735557185797, 0.04249800156626293, 0.1380154712221936, 0.7961854391199977, 0.07258227803002226, 0.1344742969295819, 0.1734530929596636, 0.1554876551205191, 0.7526814962519672, 0.15569045761434486, 0.14060156490850317, 0.10628698542523529, 0.12193015940792573, 0.1532704531170761, 0.17275348704088156, 0.11944565693568854, 0.1370330472456135, 0.12839384074700644, 0.9916814999528091, 0.9880472189375121, 0.9907036046906521, 0.9922804110705591, 0.9889421293264343, 0.9916778600042343, 0.9715379819004872, 0.9859790940984211, 0.9936832542896893, 0.0599600470605377, 0.7616200583742451, 0.7743220398749076, 0.7835108576036516, 0.15441648102810845, 0.15212803249142415, 0.7905479178021758, 0.0518767333587804, 0.7768490598250133, 0.9043592212285347, 0.2045606355669285, 0.3877269727624154, 0.1942231478962646, 0.1498465551449477, 0.11385389176234961, 0.8575376766210803, 0.8906712785017028, 0.9015344612741951, 0.4472994969666184, 0.6543359793440009, 0.13153468215866893, 0.6982436728995627, 9.999999999998899e-05, 0.6601989692014634, 0.4761744230922049, 0.5773926283870133, 0.4919127425097434, 0.4945141373959481, 0.02249602444082155, 0.4816671615892767, 0.5409892838285628, 0.13327571513516945, 0.5002773230331785, 0.4769554788767245, 9.999999999998899e-05, 0.3668437577717395, 0.07223927309386913, 0.23231152246481912, 0.09348767899353372, 0.06333011061977012, 9.999999999998899e-05, 0.0004571317587171997, 0.05667304065684797, 0.026269278885241554, 0.05882356999034255, 0.1251853489636544, 0.11053292017766037, 0.18872543805624642, 0.1746676134904468, 0.017986320768652364, 0.13229210064187313, 0.3380271640544473, 0.15883942867318823, 0.46342717564090263, 0.20262168423046534, 0.11611130739712938, 0.0559762701727059, 0.23440757516948107, 0.12941130870506568, 0.18952946288321848, 0.2201811396475326, 0.11118257584220104, 0.0762526200206477, 0.29429573699414435, 9.999999999998899e-05, 0.2540508185388881, 0.4204221032696953, 0.006632586495615045, 0.20012255266136803, 0.148827856913906, 0.05001921675516041, 0.1939577360423269, 0.6092418535479005, 0.6909959291205392, 0.7320313641905456, 0.6629484632318463, 0.6818448803257775, 0.208608854153308, 0.7467865945274517, 0.6691190886801799, 0.6435973614183861, 0.11348867884321612, 0.09576624458384764, 0.07737021231768126, 0.17726459228323055, 0.12453389097399703, 0.13020690219423536, 0.08117141578578557, 0.0921209700394564, 0.13291437381104754, 0.17282973896150433, 0.14333350538008416, 0.1430223943856006, 0.2519508277857443, 0.4957323264273713, 0.22906689228934196, 0.2365296826831642, 0.20326158174788023, 0.25553616434678084, 0.6225550342403665, 0.23542298415772922, 0.48263411596026995, 0.36751833280887525, 0.26400271220671045, 0.3990931845503395, 0.592318325033479, 0.21340507520186247, 0.6525448707183941, 0.4668252114791067, 0.23868795670015763, 0.4095545864198369, 0.4188979996626693, 0.4718962330191363, 0.3771808552248159, 0.352892349781335, 0.21775437375758677, 0.15998334980698892, 0.2098006436099218, 0.342973045012136, 0.22401014760276172, 0.23650642490938933, 0.2192881107273409, 0.1957025521939676, 0.30412813305892894, 0.19245802764811992, 0.23283507305256346, 0.20871950332421108, 0.2187294433764836, 0.22427484724073943, 0.22613231192162786, 0.24556397573994782, 0.19019747638258755, 0.25135557918828877, 0.7704482067098113, 0.19655589793381745, 0.2132621588674506, 0.9269598116212671, 0.2131142053566325, 0.9242222505824683, 0.20104907519722792, 0.19930064780806955, 0.16639963190923956, 0.18698109907302052, 0.15456824161053373, 0.16906088336807334, 0.11263522813534943, 0.17166377180391523, 0.8571851179432679, 0.21263728503586465, 0.21188604309773618, 0.8635475095134575, 0.10934412827818885, 0.10909945098263563, 0.199728447623713, 0.21321741516098647, 0.18790784800625615, 0.18100706925236387, 0.2580959379554091, 0.19643700898397498, 0.253082309769455, 0.20452589431020773, 0.23234066524231323, 0.08523958299151746, 0.096848359817444, 0.10658402524316457, 0.08897504430165848, 0.07397607049760313, 0.14903407391869428, 0.15039819087116735, 0.08875557210497298, 0.08502604883844467]}, "mutation_prompt": null}
{"id": "fae67569-be99-4406-b9c7-d2d0142ca07c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.7\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        # Initialize the swarm\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                # Evaluate the function\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                # Update global best\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Update velocities and positions for PSO\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                # Clamp positions to the search space\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Apply DE mutation and crossover\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Randomly select three indices for mutation\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                # Evaluate the trial vector\n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                # Update position if the trial vector is better\n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    # Update global best\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "A hybrid metaheuristic combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for global exploration and local exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "5ff25612-0108-4301-aa28-6c7a5f2f4430", "metadata": {"aucs": [0.8980287912557612, 0.8997953605254675, 0.9115857592385209, 0.9286853952470461, 0.18342875382227797, 0.897656263226581, 0.8948245359900984, 0.9016462435372804, 0.9093516721298047, 0.8357819885260334, 0.0434236103559531, 0.042934888218253975, 0.8195871580022182, 0.8082580942815176, 0.8121293731051478, 0.8103103936664198, 0.8258522312443132, 0.019482844205761296, 0.6922735557185797, 0.04249800156626293, 0.1380154712221936, 0.7961854391199977, 0.07258227803002226, 0.1344742969295819, 0.1734530929596636, 0.1554876551205191, 0.7526814962519672, 0.15569045761434486, 0.14060156490850317, 0.10628698542523529, 0.12193015940792573, 0.1532704531170761, 0.17275348704088156, 0.11944565693568854, 0.1370330472456135, 0.12839384074700644, 0.9916814999528091, 0.9880472189375121, 0.9907036046906521, 0.9922804110705591, 0.9889421293264343, 0.9916778600042343, 0.9715379819004872, 0.9859790940984211, 0.9936832542896893, 0.0599600470605377, 0.7616200583742451, 0.7743220398749076, 0.7835108576036516, 0.15441648102810845, 0.15212803249142415, 0.7905479178021758, 0.0518767333587804, 0.7768490598250133, 0.9043592212285347, 0.2045606355669285, 0.3877269727624154, 0.1942231478962646, 0.1498465551449477, 0.11385389176234961, 0.8575376766210803, 0.8906712785017028, 0.9015344612741951, 0.4472994969666184, 0.6543359793440009, 0.13153468215866893, 0.6982436728995627, 9.999999999998899e-05, 0.6601989692014634, 0.4761744230922049, 0.5773926283870133, 0.4919127425097434, 0.4945141373959481, 0.02249602444082155, 0.4816671615892767, 0.5409892838285628, 0.13327571513516945, 0.5002773230331785, 0.4769554788767245, 9.999999999998899e-05, 0.3668437577717395, 0.07223927309386913, 0.23231152246481912, 0.09348767899353372, 0.06333011061977012, 9.999999999998899e-05, 0.0004571317587171997, 0.05667304065684797, 0.026269278885241554, 0.05882356999034255, 0.1251853489636544, 0.11053292017766037, 0.18872543805624642, 0.1746676134904468, 0.017986320768652364, 0.13229210064187313, 0.3380271640544473, 0.15883942867318823, 0.46342717564090263, 0.20262168423046534, 0.11611130739712938, 0.0559762701727059, 0.23440757516948107, 0.12941130870506568, 0.18952946288321848, 0.2201811396475326, 0.11118257584220104, 0.0762526200206477, 0.29429573699414435, 9.999999999998899e-05, 0.2540508185388881, 0.4204221032696953, 0.006632586495615045, 0.20012255266136803, 0.148827856913906, 0.05001921675516041, 0.1939577360423269, 0.6092418535479005, 0.6909959291205392, 0.7320313641905456, 0.6629484632318463, 0.6818448803257775, 0.208608854153308, 0.7467865945274517, 0.6691190886801799, 0.6435973614183861, 0.11348867884321612, 0.09576624458384764, 0.07737021231768126, 0.17726459228323055, 0.12453389097399703, 0.13020690219423536, 0.08117141578578557, 0.0921209700394564, 0.13291437381104754, 0.17282973896150433, 0.14333350538008416, 0.1430223943856006, 0.2519508277857443, 0.4957323264273713, 0.22906689228934196, 0.2365296826831642, 0.20326158174788023, 0.25553616434678084, 0.6225550342403665, 0.23542298415772922, 0.48263411596026995, 0.36751833280887525, 0.26400271220671045, 0.3990931845503395, 0.592318325033479, 0.21340507520186247, 0.6525448707183941, 0.4668252114791067, 0.23868795670015763, 0.4095545864198369, 0.4188979996626693, 0.4718962330191363, 0.3771808552248159, 0.352892349781335, 0.21775437375758677, 0.15998334980698892, 0.2098006436099218, 0.342973045012136, 0.22401014760276172, 0.23650642490938933, 0.2192881107273409, 0.1957025521939676, 0.30412813305892894, 0.19245802764811992, 0.23283507305256346, 0.20871950332421108, 0.2187294433764836, 0.22427484724073943, 0.22613231192162786, 0.24556397573994782, 0.19019747638258755, 0.25135557918828877, 0.7704482067098113, 0.19655589793381745, 0.2132621588674506, 0.9269598116212671, 0.2131142053566325, 0.9242222505824683, 0.20104907519722792, 0.19930064780806955, 0.16639963190923956, 0.18698109907302052, 0.15456824161053373, 0.16906088336807334, 0.11263522813534943, 0.17166377180391523, 0.8571851179432679, 0.21263728503586465, 0.21188604309773618, 0.8635475095134575, 0.10934412827818885, 0.10909945098263563, 0.199728447623713, 0.21321741516098647, 0.18790784800625615, 0.18100706925236387, 0.2580959379554091, 0.19643700898397498, 0.253082309769455, 0.20452589431020773, 0.23234066524231323, 0.08523958299151746, 0.096848359817444, 0.10658402524316457, 0.08897504430165848, 0.07397607049760313, 0.14903407391869428, 0.15039819087116735, 0.08875557210497298, 0.08502604883844467]}, "mutation_prompt": null}
{"id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 2, "fitness": 0.3575873531658717, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.29.", "error": "", "parent_id": "5ff25612-0108-4301-aa28-6c7a5f2f4430", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "46d6fe07-571f-4011-8233-b71077572010", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "4e857866-c0fe-4731-b3fe-2f0ff0685fa3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "1667b2c6-a584-4fa6-8b1d-69d8e796685c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "a8615a62-0183-404e-b262-1254a3c5cc84", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adjust mutation factor and recombination rate\n            self.mutation_factor = 0.8 + (0.1 * (self.best_global_value / np.sum(personal_best_values)))\n            self.recombination_rate = 0.9 - (0.1 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "HybridPSODE with adaptive mutation factor and recombination rate for enhanced diversity and convergence.", "configspace": "", "generation": 6, "fitness": 0.3383397266125409, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.29.", "error": "", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8566393529210438, 0.8535896906563355, 0.8622622834843245, 0.18256876910160247, 0.19020745018056473, 0.1344706118324389, 0.848439440578993, 0.857263675898721, 0.8422933592091667, 0.7677751362530015, 0.7731154956251483, 9.999999999998899e-05, 0.7820169297989004, 0.7442786061563718, 9.999999999998899e-05, 0.7553119367858625, 0.7912018100555115, 0.766565194510285, 0.1388983787268787, 0.1455878832281351, 0.1708604721453879, 0.10696610735958278, 0.12512639300106343, 0.13531779461319127, 0.5556877360467181, 0.17312160108176755, 0.15927784024735525, 0.12246326224147774, 0.12422199179951787, 0.13403432538277704, 0.11793348739935827, 0.14961511275385087, 0.12905154035063604, 0.1110813245992216, 0.12113663727309099, 0.11128403727661318, 0.9947966961576623, 0.9877984030800072, 0.9923906487820334, 0.9919194182554272, 0.986989078959381, 0.9917974126157071, 0.98974621653554, 0.9880461285948972, 0.9937735303092751, 0.6338606738473118, 0.728320175117028, 0.6950318376639533, 0.15043326893939846, 0.674352541861176, 0.6806221839834641, 0.7007976708121767, 0.6698850150397087, 0.08388921899105772, 0.2262992667746373, 0.8161580903879329, 0.17110760732189845, 0.1945109377741603, 0.19386336809244353, 0.21236339567514584, 0.8764095430128028, 0.8232958839588421, 0.7998373593728353, 0.1291409232601629, 0.2669295213548052, 0.5880701900135646, 0.6434891757633682, 9.999999999998899e-05, 0.33704423708322384, 0.46153546412001656, 0.12824664486299353, 0.388877250779357, 0.36057025978329316, 0.009907056509571133, 0.28449040682064686, 0.48959748530547054, 0.1303389203145885, 0.30875090598358046, 0.32420200745846584, 0.463090218292288, 0.4793715901450818, 0.07329201415967967, 0.024294259354418868, 0.07159672800741568, 0.08944440532769149, 0.02160921747278277, 9.999999999998899e-05, 0.05974530272460199, 0.041033561617073055, 0.15297034872177906, 0.21583817942702255, 0.1594853268832379, 0.37015640859800225, 0.20448816192310093, 0.013533798590880552, 0.1955747158219735, 0.15047042002116373, 0.20284260556093925, 0.4013537517374849, 0.10152970531809602, 0.07448136646028891, 0.08205283760725357, 0.09661988425500001, 0.07744806007381844, 0.1367581132438105, 0.0836133791782182, 0.20864108381715496, 0.08167751629709497, 0.04353023368464293, 9.999999999998899e-05, 0.19790580843084382, 0.25360913163019483, 0.006510330222125438, 0.24459001034862693, 0.057098115582622455, 0.2008788516787523, 0.048990261206304786, 0.6048926139029351, 0.5815401114048449, 0.6154105805349968, 0.6074592728503586, 0.6109368864952676, 0.570547650382887, 0.5702735804707293, 0.6422194913084696, 0.6345488686074521, 0.1119199595121867, 0.09479014884759329, 0.1392300021759867, 0.1389404685776945, 0.10278836974032002, 0.10113438152908005, 0.15052246465472585, 0.14782067494807238, 0.10450916448658121, 0.29892248288995504, 0.17135489921153402, 0.1411882963726908, 0.3033619817898421, 0.18158082691090494, 0.1767175151694801, 0.19564822051228636, 0.15864469875439569, 0.15901126711598468, 0.3519679700899222, 0.5437937088311613, 0.4057521471564304, 0.23839354010671165, 0.2150402928691696, 0.5640889377267102, 0.5760826361101877, 0.17545430101575898, 0.47359474936896817, 0.3653232581081449, 0.2890841926768024, 0.3926487116425196, 0.4744869726615112, 0.2238229240896903, 0.3999516538471374, 0.4957319591391419, 0.16213924303873517, 0.14603946706962756, 0.22562352037535915, 0.1900855983221308, 0.19788103245515487, 0.17357875144843515, 0.19073021967982773, 0.22222313674262772, 0.2406059345565139, 0.18195263599947264, 0.2960949863170925, 0.6627031167576231, 0.19699199534347922, 0.7435545265128101, 0.7482951470709092, 0.19737183652192336, 0.22432816250945398, 0.24623011586802346, 0.21430593167364997, 0.19461151338464977, 0.16406181177325996, 0.9078742213131461, 0.1659421279345844, 0.8723480333511435, 0.19862429353748823, 0.8948768151195131, 0.8772827680443864, 0.16122316092337785, 0.16122539014206672, 0.7780531057040455, 0.1131049992215809, 0.8143949574824254, 0.8036928572400219, 0.21113862762629365, 0.20771316718860489, 0.13006155697003596, 0.1553515503847972, 0.15569495711545955, 0.22935030824788782, 0.19888923568360295, 0.21371729414567842, 0.19367489579961972, 0.17199404751519176, 0.285985389988734, 0.20160533799618963, 0.2071726648894282, 0.2107584367200257, 0.08839491816335465, 0.0851980982068199, 0.08954855400177952, 0.12034056123680692, 0.10521823801193986, 0.14227149253305127, 0.10847500050706405, 0.09401704249755205, 0.07984793152178049]}, "mutation_prompt": null}
{"id": "27609abf-31bb-40e8-8376-eec470e39972", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "250acb09-c794-4f50-95c1-1362b257a298", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "6f42da5b-174b-44c3-af6b-2c08acc6ba6f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "3726c9a3-8b15-423a-88af-37e85bb95933", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "cf5369c0-b278-4fd2-9f74-2a04b67bb4e4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            # Adaptive adjustment of social and cognitive coefficients\n            self.cognitive_coef = 1.5 + 0.5 * (self.evaluations / self.budget)\n            self.social_coef = 1.5 - 0.5 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                # Boundary reflection\n                out_of_bounds = np.logical_or(positions[i] < self.lower_bound, positions[i] > self.upper_bound)\n                positions[i][out_of_bounds] = positions[i][out_of_bounds] * -1\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive social-cognitive coefficients and boundary reflection for robustness.", "configspace": "", "generation": 11, "fitness": 0.20013737774256105, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8550509668598001, 0.3961165891750391, 0.845432864312725, 0.25629293012700627, 0.14962128668092134, 0.5087874858577275, 0.2527474540157887, 0.3179679134668465, 0.27189633379419287, 0.11139570766160323, 9.999999999998899e-05, 0.0861254951118503, 0.088895495618448, 0.17426670916655707, 0.06329869572438673, 9.999999999998899e-05, 0.13698281868022355, 0.3187352439898734, 0.07890640970667628, 0.07566185514986334, 0.14097690411038855, 0.1051342153974354, 0.1311964815220834, 0.12735491168927016, 0.09387348472877166, 0.1278720366029078, 0.0650113988121469, 0.07763880868681883, 0.07967315731480207, 0.09114433928893073, 0.13566275862884725, 0.06401648516505354, 0.04794356776165054, 0.11249824596781677, 0.04608445970899322, 0.05658736704577072, 0.9425565838893551, 0.9882163950786892, 0.9467495049351006, 0.6139222238324654, 0.9607411361097157, 0.9644976772052578, 0.9421175929631123, 0.9746595293577888, 0.9399191713268809, 0.22415706621796594, 0.1941615874890248, 0.06278512593866703, 0.17620362238168474, 0.3948649528443907, 0.23872376187378963, 0.17085145299198723, 0.18743545407064222, 0.10365977597358411, 0.29262006694839016, 0.3152484176070415, 0.383298184728606, 0.27298892405204545, 0.765007098095819, 0.2825774155600529, 0.1836056582925436, 0.16885004335388965, 0.21974160428154987, 0.16629894004286072, 0.06699160419767336, 0.2800102246111462, 0.1484258234460416, 0.14174543467492495, 0.12229669198379489, 0.15738528841586308, 0.19217794000367183, 0.13335591843418027, 0.128863024622629, 0.00982765810930919, 0.1810279840891953, 0.15974692311119176, 0.12217013582685798, 0.20852263483111744, 0.19980832586781916, 9.999999999998899e-05, 0.4714080570894702, 9.999999999998899e-05, 0.008911711018966706, 9.999999999998899e-05, 0.10513619772427663, 0.021014250677680812, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033139489607323824, 0.1853368521315809, 0.057019272977255064, 0.13663368164730694, 0.08362557608969634, 0.19178404489918843, 0.14258678172338857, 0.15919531700541178, 0.12598989490168055, 0.11118712603057357, 0.037846439984894675, 0.08692337151062224, 9.999999999998899e-05, 0.06915209354597651, 0.12823057257149517, 0.08491858857258106, 0.056858068627904323, 9.999999999998899e-05, 0.12324774099559621, 0.06091852353389293, 0.0251073320409112, 0.1600169153727835, 0.02282039284569981, 0.041078575026755826, 0.34866298338221313, 0.10474373810305893, 0.046290961674372966, 0.08265779333746937, 0.34319097265304366, 0.4273295669515026, 0.5602169114398491, 0.21872670052746046, 0.20805038340941362, 0.2934810374755815, 0.4728868075492718, 0.31536603309337685, 0.43896866042230265, 0.058614101829976395, 0.09538994557469871, 0.12062661544267739, 0.08554782049253262, 0.0650259461703323, 0.0994188192821408, 0.07922373438224928, 0.07050947078432435, 0.11105041912086999, 0.1043462520794679, 0.11262962215396077, 0.1341275245526269, 0.1242108823126189, 0.09839997378566678, 0.11144950635419859, 0.2017877060967438, 0.0937197856471279, 0.14135495775958695, 0.32943647191857395, 0.38907857073319285, 0.1701519839141432, 0.2602989965118637, 0.16419553445200086, 0.178649468859568, 0.2255669532087602, 0.2457355830105944, 0.2576613157002178, 0.24590325108166755, 0.13528539183221222, 0.11218394052899572, 0.18949392049592972, 0.20667756803379933, 0.15910000673528157, 0.2152655589008622, 0.1591609794539388, 0.1495936947526103, 0.23986545997592135, 0.14759230744965424, 0.1727496173769445, 0.19139277044919767, 0.1680196148677735, 0.19042527220186933, 0.2108759767272822, 0.1704969741955603, 0.19900128485980972, 0.19454069186847323, 0.17368513927544604, 0.18688931488878457, 0.17987626926905886, 0.1799313992144549, 0.19831068882655345, 0.22170470651093976, 0.16878357376785302, 0.16520117064715045, 0.20478111674170352, 0.4037149587583847, 0.16591900815043026, 0.19925640144844592, 0.1978594182283666, 0.2209539093549988, 0.16446038279845376, 0.14642679095382227, 0.15592103841488825, 0.2716465102881215, 0.11048355969092905, 0.1799187511452508, 0.34193201021023634, 0.18216345615380702, 0.14655595833750645, 0.1815432287884612, 0.10592615438604369, 0.15458759774017705, 0.16079063584368702, 0.151478932876703, 0.15986366195865953, 0.19274502581988973, 0.15322506149964232, 0.17232079109761167, 0.1891312418126756, 0.1450118721238226, 0.19239177245092742, 0.08682090975486823, 0.06380941834652021, 0.07104664966376473, 0.07890700011109475, 0.06708026300049219, 0.12372975265015573, 0.07563693782447867, 0.06820271732216987, 0.07189131495589296]}, "mutation_prompt": null}
{"id": "903899c4-d700-4765-bd99-d73af6af92b0", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "dd735068-76ff-4fb8-b098-9f74a7077208", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "b39867b2-cd04-4c31-9fb8-5c90181027c7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "df49ad3e-4507-4cfb-acfb-c0479c8255d9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive mutation factor\n            self.mutation_factor = (0.8 - self.evaluations / (2 * self.budget))\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n\n                # Hybrid recombination\n                crossover_mask = np.random.rand(self.dim) < self.recombination_rate\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive mutation factor and hybrid recombination for better convergence.", "configspace": "", "generation": 15, "fitness": 0.33903206434859307, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.29.", "error": "", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8753581268251162, 0.8612558067281467, 0.8814546846611464, 0.18262804373315344, 0.885077110422326, 0.13444658159916312, 0.17539463080284878, 0.8858797369237558, 0.88506611984974, 0.7992150037204243, 0.7952137665507684, 0.7955392362334934, 0.7989750549222188, 0.7894911301118599, 9.999999999998899e-05, 0.7662720635720444, 0.7875261188838563, 0.7877102754122918, 0.1578971389195324, 0.13345209769880784, 0.11329335366202542, 0.06526166400254862, 0.1370364539161948, 0.14689518070050367, 0.12565168378449765, 0.13957171147029457, 0.15227447921789805, 0.10676179612588954, 0.13909830135636747, 0.11304694070234067, 0.13933734561065847, 0.1431415462794916, 0.11903075544387776, 0.11932116100524148, 0.1630137545296475, 0.14208536490651802, 0.9947966644553792, 0.9877906042954286, 0.9923901520528536, 0.9920037942401928, 0.9860348631220975, 0.9917505529785884, 0.9895229008658062, 0.9880234596074826, 0.9937578815560401, 0.059719284929726224, 0.7542710725779885, 0.7613153451817056, 0.7184173329196184, 0.7694454670692144, 0.15085929308953072, 0.7661164327383992, 0.7518360058001914, 0.08382292604831854, 0.22206251091980989, 0.8486908983803345, 0.8524601848045938, 0.20924578531429006, 0.11712591875464151, 0.8509108107114675, 0.3900466113027926, 0.35660927835387235, 0.23249963121460437, 0.3917303158742296, 0.22247356939381902, 0.13319480288630692, 0.2680722336718847, 9.999999999998899e-05, 0.3080026031797598, 0.2269799680908795, 0.12879363853282833, 0.25496291075981603, 0.13101693272127524, 0.009986608959598353, 0.2526784305635148, 0.26715040549801217, 0.2696685074904134, 0.13535715494201506, 0.27781966244450984, 0.24708571878730679, 0.28344396766145374, 0.12788026586854195, 9.999999999998899e-05, 0.08132628489002036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015690825263159458, 0.024601448351862176, 0.19718130336020667, 0.1874342149951682, 0.09686288097104423, 0.26496377390176395, 0.11855996622067866, 0.15438323391947884, 0.1489987018753658, 0.18328340116273145, 0.48874550538566663, 0.2066353939590907, 0.11888418997394379, 0.2124704051254026, 0.23415054793727264, 0.09912638253029293, 0.0783789618809706, 0.38502311631003105, 0.07201835606990847, 0.3474101580248803, 0.08290603047554523, 0.043757510660933474, 0.1584887878387099, 0.20075014320810247, 9.999999999998899e-05, 0.006737955020064357, 0.19125325540451754, 0.0485223024838235, 0.050116741154135114, 0.2205996841184542, 0.7379541907334556, 0.5805715037640624, 0.5861584790721852, 0.556758844927518, 0.5866338927952439, 0.5844678773235197, 0.6200462751009748, 0.77397074237437, 0.605495251631047, 0.16321595803019173, 0.08760073822297687, 0.1403827624741134, 0.10093760232891014, 0.09411211422879462, 0.1139769674543808, 0.10495756756767205, 0.1697612986414766, 0.10398720692521402, 0.16948401557566395, 0.24310738710525448, 0.1774940894051671, 0.33483205681810924, 0.7362176611325878, 0.2694502798116041, 0.20276047378711126, 0.12996977041159186, 0.16515016355866685, 0.4791499925478744, 0.4680989823747286, 0.3733275302354848, 0.45967575217479295, 0.1842615705649311, 0.5364255039936864, 0.481880095839458, 0.2316875612480329, 0.5587890522903286, 0.4043879387039354, 0.2495954046408233, 0.22831314118895096, 0.3051577983868, 0.30314691453104337, 0.47153888115974163, 0.29548083478279163, 0.43170916894101397, 0.396060171958284, 0.20236662861642185, 0.24190855153101243, 0.24357000518303784, 0.22256217785957355, 0.19373176190269037, 0.22515952048521193, 0.21614806340110582, 0.1905055269762952, 0.24356525161981968, 0.23639128182996494, 0.21294882852041963, 0.7773816292739973, 0.7027913695747917, 0.21410128918500837, 0.23888675377878377, 0.21795270464707406, 0.20453295598842092, 0.20394846424623392, 0.18725785939676776, 0.914129693041949, 0.16585216748924703, 0.9051627715694075, 0.8681899964548208, 0.9079656126244942, 0.16485952511791713, 0.8301433448274178, 0.15998270631378841, 0.8740509254831708, 0.1132699538668347, 0.8846745645203595, 0.8503737360122653, 0.21059117794630455, 0.2085614250902097, 0.21064039270566448, 0.11309225274854307, 0.15610126198832497, 0.2137249680641311, 0.17850672501838305, 0.20168906544714638, 0.21214331799972808, 0.2188536812153309, 0.21707422195841553, 0.20567894210784998, 0.19999859378728957, 0.18167987609691538, 0.08979857148925752, 0.08312242961294958, 0.08260752093315205, 0.10212081223854297, 0.08083956608009668, 0.0806366567398269, 0.0885620823551595, 0.09040565507373899, 0.0815305711272113]}, "mutation_prompt": null}
{"id": "ea9b2d41-893f-4678-a61f-dbae3898ae9e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "65b5cd1f-dbeb-4d7c-bd10-444b525b29f6", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "5dc842eb-240a-43c1-baa8-c449e4401e8d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                stochastic_component = np.random.normal(0, 0.1, self.dim)  # Stochastic component\n                velocities[i] = inertia + cognitive + social + stochastic_component\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with stochastic component addition to improve diversity and prevent premature convergence.", "configspace": "", "generation": 18, "fitness": 0.28530227136409003, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.7042701885963544, 0.6315129403147768, 0.6724512805018832, 0.6712442142069717, 0.7390083544896799, 0.6672978551220825, 0.8024347105662536, 0.7167778808850667, 0.6833902277230879, 0.37494200583630044, 0.3721177237219032, 0.2853352132363246, 0.4383505668380351, 0.3101304106819983, 0.24743833432032925, 0.34082848273426514, 0.3006884452112447, 0.35133534516743603, 0.13859607748769542, 0.17514510610019884, 0.12352792789454237, 0.2674413022215839, 0.17825471804189452, 0.07642596357086784, 0.16148711062085075, 0.11873366825948994, 0.15921725201966164, 0.1699520626368034, 0.11300607864180534, 0.11532829910868714, 0.14548593207861538, 0.14237808093220228, 0.10556986070838537, 0.1056214325347059, 0.15574787455073624, 0.15447250257760392, 0.9934725901954744, 0.9824686846832257, 0.9928529576250811, 0.9840362564520168, 0.9949172276218167, 0.9905761502216962, 0.9887618133733014, 0.9937113289109999, 0.9908959412701364, 0.35510309569879517, 0.3597244419506853, 0.4165215461775458, 0.3440223494148891, 0.4495001388019355, 0.43544138069802507, 0.3493941100393859, 0.36010686949838777, 0.3520484211803153, 0.6550363798463428, 0.06003901904677589, 0.35672303327831223, 0.21634809820204648, 0.36955041174653347, 0.2040512199062443, 0.4468401769380771, 0.4244920156316091, 0.8892380071053336, 0.22597736171931992, 0.19528527271747242, 0.1976796938612505, 0.18472864226318697, 0.18045209016482955, 0.2408316500219414, 0.19560912012407106, 0.21073449937663913, 0.14818736797238885, 0.212246104699106, 0.11427094765208023, 0.20470152863327018, 0.2455340138131129, 0.32333722216723226, 0.16348265514938343, 0.12973950900337006, 0.12111892593492102, 0.1540458711396987, 0.0519585728561045, 0.001272135868632951, 0.04389817170641186, 9.999999999998899e-05, 0.08522667162570652, 0.08161703775247986, 0.07186409160919172, 0.07829035545541518, 0.013649993244711722, 0.26291425018330206, 0.2301080262585231, 0.19488323225562043, 0.11513658570000584, 0.018801174320372982, 0.01697284751705952, 0.1476811020964871, 0.17924108164814967, 0.11673954916909846, 0.1693696512706756, 0.08060242065523382, 0.03062747653597253, 0.13008118560979964, 0.061842478126781675, 0.08818512368254994, 0.1263179735302118, 0.07106171275567053, 0.08802004760637605, 0.20871653741105822, 0.13847305971688295, 0.1298423815624481, 0.10287234542739043, 0.22659050687695648, 0.039100578643293415, 0.08137209676315238, 0.2235864624861279, 0.08246281927614707, 0.4751393533085918, 0.5862394242964035, 0.5713003082215956, 0.4777111427093448, 0.4918349343333258, 0.5098329717298993, 0.4846551918085591, 0.5368616962714687, 0.5119087045509227, 0.0608820813242944, 0.09387228925359992, 0.1194931107388244, 0.09522832842536333, 0.10847075554499552, 0.1057715135349987, 0.06969700786346489, 0.07529650767523921, 0.11847550581940303, 0.19634134380828283, 0.16837191369841453, 0.4333773508232729, 0.3385310293289603, 0.22261773810506624, 0.19606676779195764, 0.20372248792909986, 0.1476690069116816, 0.20819870746459468, 0.36855165192270334, 0.28383204491659064, 0.3595705142335296, 0.2989138993591032, 0.20773606680564993, 0.32954049284912046, 0.36042130159968544, 0.31910487106196983, 0.3509806059705941, 0.23008200962088998, 0.27269219867605266, 0.25679732189833193, 0.23271458903741316, 0.20005576468876263, 0.18481592846487216, 0.19376121283137393, 0.2489666356159027, 0.323686910145924, 0.18638837027519173, 0.18516256146992705, 0.250818361717155, 0.20356837194882504, 0.1820083520368676, 0.19197805815744073, 0.21649460399330778, 0.16575690537545074, 0.19347101091460828, 0.20664054574706947, 0.44975663709727975, 0.23714833848976635, 0.2093796739429148, 0.3871617155376852, 0.24508984233300302, 0.45183688279133316, 0.21716594454794502, 0.23536082455562468, 0.1708706645779161, 0.16466728305074796, 0.8497827409559211, 0.17123711329197178, 0.8736809647171625, 0.11643512057964944, 0.9145695757763509, 0.1584661445842256, 0.16194311977667508, 0.15491815867397285, 0.20889505800424035, 0.20970483163207887, 0.7703338461553175, 0.2045508091553725, 0.7785122448107107, 0.6915083030931495, 0.15612181618985865, 0.16710044042712158, 0.20000214685497908, 0.20517257862881977, 0.17914643435301403, 0.17869533389638037, 0.19009413809265352, 0.1835814633833721, 0.18622343054307244, 0.18312403275362854, 0.18686397743315042, 0.07697619931668909, 0.10170663744311714, 0.08407137398821818, 0.13668783078490088, 0.08493280960181404, 0.07700454969391735, 0.1319515285377001, 0.07727231951167979, 0.08424609119981574]}, "mutation_prompt": null}
{"id": "93fccc0a-ae00-4e64-bede-0e67137894c6", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "c096aed1-a286-47f9-89c7-bc5a8f0bee48", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Non-linear inertia weight schedule for better convergence\n            self.inertia_weight = 0.9 * (1 - (self.evaluations / self.budget) ** 2)\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        (self.mutation_factor + 0.1 * np.sin(2 * np.pi * self.evaluations / self.budget)) *\n                                        (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Introducing a non-linear inertia weight schedule and adaptive mutation factor for improved convergence.", "configspace": "", "generation": 20, "fitness": 0.3318660125321139, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8276804574382046, 0.8300317846981121, 0.8161278979066307, 0.18257248507874724, 0.8425853669727225, 0.18812209377954991, 0.8247471939877971, 0.8464792997956095, 0.864377443757621, 0.7368178380548038, 0.7323371536815408, 0.5731233369964287, 0.0666078524715642, 0.7204873436306063, 0.7158583847679671, 0.6724676677235439, 0.7425073034514376, 0.7269943350594301, 0.15908181944483457, 0.1780984478342389, 0.13270222966609868, 0.14772720175902776, 0.12339050647578564, 0.13998711861515312, 0.1404345458763835, 0.14650846426533193, 0.13537615563458183, 0.15817894763796592, 0.11321497240999523, 0.10286404479478861, 0.11557352982671909, 0.12591477878085167, 0.1288767852806011, 0.13011078299014756, 0.15299020846791778, 0.13969281161111435, 0.9947966749774736, 0.9877502684932136, 0.9923903827193093, 0.9920044279956421, 0.9859866333720003, 0.991778327974444, 0.9895464063676878, 0.9880362727297686, 0.9937609833576204, 0.059821536233516936, 0.6716783014937782, 0.6939518709482768, 0.15063346026968738, 0.15299069122846942, 0.1495714304920046, 0.658506302111457, 0.6856954802330137, 0.12573140456753917, 0.22723568492509705, 0.35852590617417834, 0.22584034954977028, 0.7747725684975938, 0.19160630697682868, 0.7446959830418884, 0.8767651693485057, 0.2313816526471183, 0.22809071704181183, 0.1275096618643583, 0.42829532901295064, 0.43075318230488946, 0.5182284036030415, 9.999999999998899e-05, 0.4308001847270678, 0.3386915866176421, 0.5315021953229488, 0.5600264311090419, 0.13260036117596552, 0.27584343061379923, 0.13270312005798135, 0.614404825788964, 0.3272546587845261, 0.13361123155053267, 0.2867786013033268, 0.24123747951141272, 0.3933266390656902, 0.09352015263205671, 0.05598504252270009, 0.06530694224941103, 0.04911288052174023, 0.16688904278876504, 0.036960872541780376, 0.08043393053092784, 0.023758159565317682, 0.07779860584135623, 0.23434462952723678, 0.11899869798492269, 0.20366523100217393, 0.1232158391239333, 0.016907403007360156, 0.07389412796478989, 0.04782764992878874, 0.33108267623518495, 0.23892014764925484, 0.18245579673165502, 0.14556376871152787, 0.09619108660567477, 0.12319626812958762, 0.07825768342938866, 0.11665990537168602, 0.10727899499175708, 0.16030870990720492, 0.07096163499034613, 0.04298094228469129, 9.999999999998899e-05, 0.2667688625433364, 0.3363405804364765, 0.0066206059484157365, 0.33486968530950856, 0.18810357680010292, 0.04955846153889143, 0.25184305628987713, 0.6455362347252624, 0.5830481716485656, 0.6278257301310024, 0.598902506298237, 0.6668572467445502, 0.5693388261041264, 0.6703358289580557, 0.7030507037649251, 0.6069772191932987, 0.13793924320260664, 0.09597593844019847, 0.16039772217444037, 0.14279898854073636, 0.14747099940971453, 0.15040761423567894, 0.09877069430629037, 0.09876176086646737, 0.12888716473398287, 0.471948714334145, 0.3423882801422129, 0.1708512930224233, 0.5124419440990876, 0.21991155062376488, 0.1873189122640493, 0.20912330102659116, 0.27741162959081933, 0.2069738401334449, 0.3638413168292529, 0.2734964766452723, 0.5733231864627741, 0.19300416158521738, 0.2150463692086262, 0.6076394258907735, 0.5223714621770035, 0.1756809058018014, 0.461481854085369, 0.2271221627650094, 0.2379840699530884, 0.15618065720606467, 0.31856666623162544, 0.1900433652661654, 0.22918546680386953, 0.2682562011213244, 0.22137233208086937, 0.335063696894526, 0.2288783234911852, 0.20031269121925455, 0.19028560811290574, 0.23677274980849183, 0.22013569395131627, 0.20729054349426101, 0.22456784714698486, 0.1710721605988239, 0.1927095215192094, 0.18830348246211015, 0.22783255288462612, 0.22618421595486904, 0.238066182312488, 0.20661917165761634, 0.21333691939831756, 0.21311477433743198, 0.23898559074626735, 0.18692565549057694, 0.1393370417779619, 0.9125828697837988, 0.8702041494020536, 0.8733042678491559, 0.17678290451192402, 0.9006761886932277, 0.16468264661392673, 0.8702846392601999, 0.1634472317071186, 0.8450223110503321, 0.11323933436058509, 0.8302609067424315, 0.8493716828567504, 0.20922332699354074, 0.20759487211163719, 0.8156575759913052, 0.11305566116522536, 0.15591941172152912, 0.2121230270390162, 0.18852536558147626, 0.24470359993321256, 0.18418711533405208, 0.2261080368836179, 0.22089028121060317, 0.19790534369503354, 0.2075752049334204, 0.19161645640883584, 0.09110695836234228, 0.07131533982658622, 0.1079866821934129, 0.09010850475766308, 0.08912831397148568, 0.11495726449808374, 0.09052117823404426, 0.04832466888452713, 0.07808006384293054]}, "mutation_prompt": null}
{"id": "934d8817-dcba-436f-b898-64ad6e6197e5", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "25e5db6b-9854-41f1-936f-d93f97339e76", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "c7643ded-808a-4497-a6cf-ad883198ad80", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "35863543-30b9-4e1b-8ca3-49fdd4a815b8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n            \n            # Adaptive cognitive-social coefficients\n            self.cognitive_coef = 1.5 + (0.7 * (self.evaluations / self.budget))\n            self.social_coef = 1.5 + (0.7 * (1 - self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Improved HybridPSODE with adaptive cognitive-social coefficients for enhanced convergence speed.", "configspace": "", "generation": 24, "fitness": 0.2895595151095072, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8612312081003829, 0.12601825726361582, 0.8647412964829917, 0.8247959400943777, 0.835156587773183, 0.856626332788422, 0.8281042135622751, 0.8494179439003184, 0.8499256574264749, 9.999999999998899e-05, 0.7395667686767002, 0.07341941427448129, 0.7699616249503635, 0.7316090435310955, 0.04747060242792833, 0.693408241286372, 0.7117566042273378, 0.018430422010905056, 0.12618626258908516, 0.1493534859991873, 0.6117879358406877, 0.1111777228985309, 0.13734310898376478, 0.13128289844905117, 0.11401438896401994, 0.0474254274899627, 0.13022175380910417, 0.10955456962282728, 0.09119373068695746, 0.09745980376723806, 0.13986439368688774, 0.11740857014574035, 0.13411079928826508, 0.1376308435247674, 0.1216519891498723, 0.12152365709376756, 0.9952233841549122, 0.9910182799120888, 0.9941226458642337, 0.9922608057180223, 0.9835632108529995, 0.9928556847671515, 0.09975846986132741, 0.9779336007393332, 0.9943875493204526, 0.6366494447584589, 0.6998925179131592, 0.05945077647850394, 0.6591338133199214, 0.15083476121199002, 0.701869585417964, 0.08888998138046866, 0.08927659747815453, 0.05182768716717745, 0.2293163097011165, 0.15621666991795502, 0.17143771925013784, 0.1931687906624855, 0.19319606124068467, 0.19204236273065511, 0.7944895804309633, 0.8161931372364831, 0.12314741185207967, 0.33790308277886794, 0.1258082416469768, 0.4593538067055959, 0.12984140404199407, 0.49978416418603766, 0.48920662794246783, 0.4272994139381662, 0.45636895629110263, 0.3874253450728493, 0.2977904376078586, 0.01016124896331061, 0.2808913258232678, 0.13231699037021427, 0.5021865123340964, 0.4256947505910602, 0.554055346741073, 0.03268964338548974, 0.6154626951900009, 0.07398438896100401, 9.999999999998899e-05, 0.09498114404274272, 9.999999999998899e-05, 0.07743865211991285, 0.0569640805189372, 0.05930855468652241, 0.040347879115416485, 9.999999999998899e-05, 0.019806263562167303, 0.06438209667212469, 0.2949124788904589, 0.1625698822219367, 0.09517329069378955, 0.15036521396362224, 0.32131623922590036, 0.2246045891119156, 0.21671787376984242, 0.06841720709634502, 0.04696694112301447, 0.08333974926103582, 0.09408654191937627, 0.09345453102905288, 0.0741291367837692, 0.13784627487154466, 0.07834786439703856, 0.1318274275883652, 0.14917897792027435, 9.999999999998899e-05, 0.21065656317252546, 0.23142273254225432, 0.35803677065859374, 0.32077172982112057, 0.04955953691122472, 0.3412553324466773, 0.053431842916099814, 0.14208534243372362, 0.5701314024001984, 0.6543346667304817, 0.5641001661068695, 0.6733128194627626, 0.20837606487071103, 0.5714133488811488, 0.5813324931432471, 0.6069612595765828, 0.1137696556444715, 0.09573014390031509, 0.12443924844335885, 0.10999556659066434, 0.14158977887260826, 0.16803461613893256, 0.07131301964282688, 0.08065952325063175, 0.098618937229483, 0.22958686094371283, 0.3389833993607494, 0.1429293226479158, 0.3035243406384224, 0.15648949671451007, 0.34058403513827273, 0.20185744882953938, 0.3478494274121746, 0.1734934119661966, 0.3450693716670964, 0.19815233679786837, 0.3447607094518559, 0.3755589405475964, 0.15108184767948718, 0.44531045527269664, 0.2903310020607267, 0.37655254716595166, 0.17967061302511866, 0.1968111933652693, 0.25174445263758927, 0.47186148784861714, 0.32420657914840967, 0.3387208522908446, 0.2675641856243073, 0.2107427338404494, 0.17339741587210866, 0.3231702707569931, 0.22553320230502572, 0.19391790943216314, 0.2323746819938568, 0.19143748170206587, 0.20079891570251596, 0.24926047882360902, 0.20969033601972653, 0.23543501042730752, 0.2927967461647497, 0.24522410822791085, 0.2351478755330524, 0.24285928969961967, 0.21397087187143637, 0.22200552965589626, 0.21949294346982984, 0.21686743315208568, 0.2153933271879176, 0.21922844207407743, 0.799611297685754, 0.1560861382858295, 0.19645975081690903, 0.8517030330254687, 0.19823349042863403, 0.16461127162391054, 0.1418415799471735, 0.1283002987167049, 0.16128842719800907, 0.07906202204159529, 0.2101119631814874, 0.6752585587072528, 0.20782755563844624, 0.16456956194968775, 0.20802087151379312, 0.2123973624577078, 0.10924832447706778, 0.15631408328765772, 0.19498352274013298, 0.22271267677016415, 0.18123150287189593, 0.19517808950710835, 0.19454632110521342, 0.195785319597937, 0.18742371410039405, 0.20993628672931985, 0.2265034311629065, 0.08292948095202701, 0.04787562117589661, 0.08019131237989408, 0.09964535085529946, 0.11023293082710861, 0.09633368954281918, 0.09576821882506514, 0.08893930246463244, 0.09672540386546336]}, "mutation_prompt": null}
{"id": "82aa3962-dfaa-4c28-8ec7-9bdf522b5045", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "4bf7f198-203a-47eb-b20a-14617690862f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]) +\n                                        0.1 * (positions[i] - personal_best_positions[c]),  # Added exploration term\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Adaptive HybridPSODE with improved parameter tuning and environment exploration using dynamic swarm adjustment.", "configspace": "", "generation": 26, "fitness": 0.32785331186442307, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.27.", "error": "", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8390651091637513, 0.8155907330979797, 0.804763599213749, 0.18956911309487212, 0.1904705528023798, 0.12259381638134004, 0.8189825060143231, 0.8342314365867473, 0.8180698617486196, 0.6704717858313572, 0.6059463409817564, 0.5893084762105325, 0.6164904788985368, 0.5316181161850935, 0.6423686961423909, 0.6085413104520355, 0.6536989002220797, 0.6380973339684384, 0.12703815900813298, 0.16006621793791598, 0.15378557337060594, 0.6066268833310535, 0.04274370943585981, 0.15973135875747635, 0.1649283101566511, 0.04801374961671334, 0.13014460973796393, 0.1365851219228964, 0.15797543118642277, 0.12612063632879222, 0.13766059656977014, 0.11491015572877805, 0.13133715737650964, 0.11529003693657813, 0.15837175813602933, 0.1332208748607534, 0.9934457501352854, 0.9889823191918575, 0.991507002449062, 0.9919954277536508, 0.9900961559961816, 0.9904303475552793, 0.9826491685229063, 0.9881213206474476, 0.9939531561224396, 0.05989116510607506, 0.624863090663024, 0.11301430600962104, 0.6122043689724687, 0.15092393431814255, 0.6445678491799636, 0.6802617859569001, 0.08923214224795706, 0.08827903265855108, 0.7254108133716075, 0.8137535769312751, 0.7858352953003284, 0.7747347702652053, 0.20267659538711302, 0.21080721500990474, 0.8014183615079341, 0.7955476485219048, 0.6157837526559794, 0.4829889853479724, 0.4749219979660253, 0.48916457375737343, 0.43144390569953095, 0.4806057628376872, 0.44211151440995466, 0.44668660761898804, 0.44998082926045413, 0.49043856796127594, 0.4327069143485128, 0.01693541139145438, 0.3932892328611435, 0.433274516891492, 0.43763154568452733, 0.5024760558051998, 0.5193644135960813, 0.2307598034119278, 0.4292280320055103, 0.04382911137311474, 0.08211428486297645, 0.06060712478676655, 0.07390947360545763, 0.04250534424675556, 9.999999999998899e-05, 0.08591717339250682, 0.007807011849880974, 0.023810488535842, 0.14212502241025537, 0.10597419645287898, 0.08632516531717283, 0.0848647904593085, 0.1524106498719242, 0.10481057701804153, 0.1403810662747348, 0.20306029452452612, 0.02332408778111894, 0.03350385270377754, 0.03345267875485569, 0.022862842170961684, 0.0810559668760894, 0.025963113418993822, 0.07485820853051117, 0.061454967446241016, 0.08765333263342545, 0.06915928277352379, 0.04244739919260698, 9.999999999998899e-05, 0.32356990070611547, 0.21604194798308773, 0.006476324031995162, 0.2239658671935163, 0.04949427613204893, 0.04957959127771994, 0.04945868236366768, 0.570797166040526, 0.5879774638347597, 0.5773642660804847, 0.5939215331677008, 0.5911586031610117, 0.5645005751511831, 0.5883459690228472, 0.6161842681881802, 0.5982793362992025, 0.06872212982449599, 0.043572806833175326, 0.11365257323782918, 0.1206621093304544, 0.12335341664763377, 0.11443738649835666, 0.10924983772188956, 0.10870475275039515, 0.1370189435682594, 0.21842630501465266, 0.2443766103074655, 0.2244971109248204, 0.31651663490038795, 0.17608370414371988, 0.18764818412902717, 0.3053108975646667, 0.17893256661162282, 0.1553690806574275, 0.37586101764153523, 0.5231570037630862, 0.3674326146205886, 0.49276206654008337, 0.3294193857075922, 0.43944582807636234, 0.5342679824675978, 0.20106022320144745, 0.600500740580334, 0.36250358837942764, 0.3289990454053874, 0.4089347529378823, 0.2613087810851844, 0.28442933039370366, 0.2714942542879796, 0.3594345718629425, 0.4385062811487198, 0.15936768816790647, 0.19688163987188623, 0.21817335801762883, 0.21734938204977083, 0.2218360141752611, 0.15543119193786847, 0.19930443435154066, 0.2095165791178898, 0.1828751660020984, 0.19726564114066347, 0.23325290534169685, 0.2865579999139777, 0.2218616722344443, 0.1944412345547658, 0.2081732162687755, 0.20490812262475888, 0.22989265643503243, 0.19990212637399551, 0.6281732416395782, 0.1633063891369908, 0.8802285732897396, 0.14152781694483474, 0.869387712219255, 0.20058129678208303, 0.844623102481476, 0.8525648519067967, 0.1975701848976179, 0.19527100315872903, 0.1269032206671593, 0.1084291044672846, 0.20678274582424716, 0.8053349850180435, 0.1539252436424856, 0.20532347430244602, 0.7925491156535166, 0.15605543027119506, 0.11260825479986158, 0.21015170779154946, 0.21548163070332993, 0.1897840355927225, 0.20345070389124564, 0.2212139281327481, 0.20244500248973862, 0.18277482454325722, 0.191000024165491, 0.19155224698355877, 0.08318489898321313, 0.09591072261610678, 0.09137261510795847, 0.1265486342002472, 0.07701219347035126, 0.07052773507631593, 0.08930636694525274, 0.08535887966895284, 0.10272310931756523]}, "mutation_prompt": null}
{"id": "7e3c0901-9f2d-40ba-bdf5-45c670111ba9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            # Adjust cognitive and social coefficients\n            self.cognitive_coef = 1.5 + 0.5 * (self.evaluations / self.budget)\n            self.social_coef = 1.5 - 0.5 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive social and cognitive coefficients for better exploration-exploitation trade-off.", "configspace": "", "generation": 27, "fitness": 0.34992354642711826, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8707301115047154, 0.8501821926844425, 0.872402790400854, 0.18270141283174424, 0.8775286140174017, 0.1344380271556752, 0.869000804788289, 0.8953465055838519, 0.8676890701603679, 0.7868343700213752, 0.7813209365770691, 0.7862540306057958, 0.7457433972428511, 0.7738949519620322, 9.999999999998899e-05, 0.7749132920817017, 0.773971716802442, 0.7844211451944214, 0.16724572780692792, 0.16456982646851415, 0.1784803692679272, 0.15315032582046184, 0.13156413638591458, 0.11328760230022816, 0.15064549478495703, 0.1371570522761767, 0.11215247590117672, 0.1413276872482826, 0.12744708519476666, 0.11284787754911119, 0.10103193093541918, 0.1441162842728978, 0.15319628929874274, 0.12695519256918253, 0.1299784109022044, 0.1760522045105275, 0.9947964286690194, 0.9877949404996391, 0.9923901952098351, 0.9920038650935762, 0.9859859130367636, 0.9917628543434365, 0.9895298572110668, 0.9880284704461023, 0.9937591177015697, 0.653809417770298, 0.7446330058401383, 0.702610925634007, 0.7247907489488334, 0.7228571633881749, 0.1504742164211852, 0.7765038135751977, 0.6986102900160522, 0.08381284342227135, 0.17173960744596006, 0.3322928383886615, 0.22799930567972682, 0.194070519204958, 0.17499325485829664, 0.3492555457101878, 0.8255390476627449, 0.2355401128286122, 0.8245114522918515, 0.2945270515961438, 0.5839025270620998, 0.5582010074196502, 0.6411037249283325, 9.999999999998899e-05, 0.510892565758716, 0.5110000021889272, 0.2935326516264164, 0.5453874807643339, 0.5128215565651935, 0.40387302924959756, 0.4216734643303862, 0.30124633579416527, 0.2990380209139384, 0.4263997038936175, 0.44401418886183686, 0.26020643800590904, 0.3860884224414025, 0.07389296807132828, 0.12451402558275282, 0.06940970147786196, 0.016857278224707617, 0.18659130533579404, 0.05942461588187886, 0.07892629883357949, 0.07136997046144511, 0.03773222416802824, 0.12182686353117511, 0.2174313533955352, 0.20448634271095767, 0.31347575790044657, 0.015683368550220123, 0.1203461007137332, 0.37315532135884455, 0.12367379690844849, 0.3328618597645556, 0.17754317965520017, 0.29681328752713976, 0.04766148790824465, 0.17019322924191416, 0.078845504526173, 0.2947820656172453, 0.08976719415993206, 0.16714206509861307, 0.08218138980183975, 0.04322259617056412, 9.999999999998899e-05, 0.2352228758218503, 0.25249648669154745, 0.006620378892720158, 0.4067904484225926, 0.16037165960842426, 0.04993032801690478, 0.21119252807918187, 0.5868774382885158, 0.5716312473397764, 0.601428970903211, 0.20861251163563366, 0.1817396586180815, 0.616172961783755, 0.6790643796193416, 0.583933353752198, 0.6784262300435969, 0.16005788069834348, 0.10005940722615847, 0.14732501437791912, 0.11044424070520453, 0.11440334264550733, 0.11667030789960986, 0.11579904258546536, 0.10990895780220344, 0.14786391949419087, 0.5285665997479745, 0.2055673709597784, 0.23168056831669548, 0.18198722911292575, 0.19218497121040368, 0.20406324774951046, 0.1985351912666683, 0.2142248483446909, 0.1596990728091061, 0.5317517639232305, 0.500080101883954, 0.4843821240108528, 0.45164654880805943, 0.13935524589506765, 0.46019929913602486, 0.5935146828514306, 0.21979072660946863, 0.515741588196601, 0.36724279176236574, 0.35457493167349863, 0.21989801423479938, 0.3279263011388621, 0.29938855192440483, 0.20881286242922736, 0.406727127257704, 0.20888590358236525, 0.28055526711421985, 0.25058193351628655, 0.18617234089794565, 0.2812524190072059, 0.21964745411031428, 0.2182553211888385, 0.18393868356274223, 0.23823422226787183, 0.18684286129157102, 0.19101533021001793, 0.19139569235360754, 0.17988170798980663, 0.6733837314074325, 0.6842235782441732, 0.19383400315387822, 0.19663620190399045, 0.700667837741128, 0.21204474404046125, 0.2031359089976894, 0.18703597395436244, 0.911517007473116, 0.1659484003950047, 0.8955608582450375, 0.19904362662345831, 0.8983409416060583, 0.16350379668555703, 0.8570647250296908, 0.1623873421472648, 0.8677641346012102, 0.11326551153193687, 0.7917141036177222, 0.847966489977416, 0.21065022274838097, 0.20887680213512116, 0.18724167211934128, 0.11310322099833614, 0.15581027873774578, 0.1924149630549461, 0.20983169824608594, 0.18294585555898468, 0.19067243710575343, 0.22550952449253825, 0.19615146903835223, 0.1298570727308448, 0.2295980690358349, 0.20407232748067494, 0.0851347330792942, 0.09312078133380786, 0.08695489358992714, 0.08761256771606185, 0.0889885518884761, 0.08621085828595221, 0.09499347724808993, 0.09576778818246368, 0.09298895839047383]}, "mutation_prompt": null}
{"id": "9b6dfbf7-ff08-4811-aced-7f945292876c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "5a9ae416-0867-402d-84a6-74e26af80415", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "bb0b0e33-d42b-4f00-869e-696c0aa5dab1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "aed6493f-b381-4a94-ac13-9d13f2d1095e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive mutation factor\n            self.mutation_factor = 0.8 - (0.3 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive mutation factor to boost local search efficacy.", "configspace": "", "generation": 31, "fitness": 0.3295049228457619, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8688628741006391, 0.8715430417925012, 0.8768233754096066, 0.18270947950015848, 0.8656617397482707, 0.13444493965478121, 0.8614101197621817, 0.8750785622895652, 0.8820737436842576, 0.8032086835844163, 0.7664627506713406, 0.7582978408392386, 0.7924102019370511, 0.7741745224862907, 9.999999999998899e-05, 0.05890295554370606, 0.7955270095687843, 0.7889589688890656, 0.17871629599865357, 0.13228040761866755, 0.1369209725717213, 0.0993015068380404, 0.11032531509821641, 0.11418214902073087, 0.12230641825440924, 0.14090180698963506, 0.15258567925561617, 0.1457143332656291, 0.1439398226876195, 0.11947395234890223, 0.15070998905871924, 0.09941167964825415, 0.1499827484510977, 0.1372110029531055, 0.014960593722287197, 0.13738218942820457, 0.9947966660671873, 0.9877915022974159, 0.9923901642290841, 0.9920038719682224, 0.9860246656902459, 0.9917556183819168, 0.9895252972553822, 0.9880254724726996, 0.9937583914145145, 0.059629024111753304, 0.7390280748204925, 0.7447817731477464, 0.15067906879157456, 0.7772437967832961, 0.6984859435202326, 0.7725444631634458, 0.739991871043707, 0.08385662841114094, 0.33145899766953746, 0.16136122867938485, 0.7926908460144235, 0.1944489929683616, 0.18923856808490158, 0.27630932346965753, 0.9124805169624841, 0.8332557732073664, 0.34615678044743514, 0.34935194827322313, 0.20971722387440328, 0.13339335390757023, 0.13460812804156996, 9.999999999998899e-05, 0.3875813509739585, 0.36420662597097186, 0.28813524331123885, 0.3299173742775512, 0.2585394491758948, 0.2870072266184116, 0.2554788167789257, 0.29329748165801095, 0.12951317449227628, 0.13491855163470268, 0.30196613272214856, 0.10032971799593793, 0.29401641981265225, 0.18806427432302064, 9.999999999998899e-05, 0.051799582743075945, 0.007144616217335531, 9.999999999998899e-05, 9.999999999998899e-05, 0.030987580187637254, 0.025020290908600362, 0.146783381511277, 0.11671407591902228, 0.10559796741436744, 0.1147325246254135, 0.14161675305928945, 0.08199184486497857, 0.23875273909992734, 0.3420451535686331, 0.23084873856923127, 0.2337447788222714, 0.1058598637601672, 0.06857208467250242, 0.25658045838665045, 0.12555028091852305, 0.07762009077249932, 0.10283502655174892, 0.09090747987805914, 0.130149039066496, 0.0827880914232284, 0.04301154439259336, 0.3053320996008312, 0.17523716914491183, 0.28837432249640993, 0.006582857125034924, 0.21243947331392898, 0.10888855992120294, 0.050055154663153134, 0.27037430384604855, 0.6021069775312735, 0.5576988244558159, 0.6378529960261022, 0.5569694190752635, 0.6263382662679863, 0.5596273045923701, 0.5974683198189235, 0.612185152834732, 0.5857608051160447, 0.1667312374834361, 0.08494769730408447, 0.14770954567550654, 0.10471842586923363, 0.11603110121476479, 0.10624948517935662, 0.12977643046105147, 0.15140870070205803, 0.08728787778321678, 0.22262574625062947, 0.3015152847117408, 0.2303643903127579, 0.24040610363495485, 0.22330733061020414, 0.15345188068956073, 0.20136349988425728, 0.22353825182066123, 0.20448030531139771, 0.42695611204748474, 0.334309824943934, 0.3683417751347471, 0.4218409596433227, 0.2334440096118623, 0.39026881353368703, 0.2882378603244572, 0.5656807980529162, 0.43231026681395923, 0.3357274552581724, 0.3309584893594727, 0.3830353827535501, 0.276663091931174, 0.36999732485650116, 0.32911537157489223, 0.36633898081114646, 0.20438214571402402, 0.3780768502216487, 0.25009642145916366, 0.183791755756175, 0.2098593104385601, 0.22195670121428301, 0.19746668325010586, 0.2008250092414181, 0.2686132186104574, 0.1910137799983086, 0.2275687142949413, 0.23665895039387586, 0.21437678051561004, 0.19473071346683202, 0.23233647304762162, 0.7418652517930588, 0.7326573288992688, 0.24156710625272648, 0.770202865790656, 0.21885629837615495, 0.18784250379050327, 0.9238294931037243, 0.16595558607528327, 0.8945749589282798, 0.19767852484180393, 0.8696398968699999, 0.162870055979773, 0.2037758984278194, 0.16252514599273749, 0.8474383122648946, 0.11328496073953898, 0.8685318108403812, 0.8403143276799894, 0.2098071100678417, 0.2089637634998207, 0.21024408326421318, 0.11310154775358405, 0.15556958526350462, 0.1883926733382122, 0.19271297446889046, 0.20207419897351897, 0.17246686373028552, 0.19459371518652502, 0.20747066600331432, 0.19138161106927787, 0.22017514228766943, 0.19914817155483866, 0.09188187284036453, 0.0972081195919704, 0.0972687166753401, 0.09262001613066839, 0.09834211091334577, 0.07845628933852844, 0.1638608121781262, 0.08535215724956091, 0.08960800673438751]}, "mutation_prompt": null}
{"id": "c7b984d4-3bee-45b9-a827-146a8b8f21e9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "3fe0c094-b97b-4de7-8ed8-7edb57ec5060", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "8cbdfc82-d72e-4a2f-8d08-2555dc14727a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "435505f8-55d7-455b-aebc-9c93da433e7b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight and recombination rate\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n            self.recombination_rate = 0.5 + (0.4 * (1 - self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                # Dynamic coefficients for better balance\n                cognitive = (1.2 + 0.5 * np.random.rand()) * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = (1.2 + 0.5 * np.random.rand()) * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "HybridPSODE with adaptive recombination rate and dynamic cognitive-social coefficient for better performance.", "configspace": "", "generation": 35, "fitness": 0.31327606604492014, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.28.", "error": "", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8731338602332619, 0.8820650525984994, 0.8437532978238205, 0.8559658327666199, 0.8608221209322432, 0.15703222009072326, 0.8778531810425856, 0.17546695502935505, 0.8683355476497995, 0.766871442540927, 9.999999999998899e-05, 9.999999999998899e-05, 0.06682283537407474, 0.7709505172530616, 0.06824252700868949, 0.7574160871050895, 0.7714882591229364, 0.7598313943321924, 0.12823120860416404, 0.12279858373076291, 0.15499485274698832, 0.06915065840347157, 0.13485149513510464, 0.14485090312542692, 0.15875838577568524, 0.1545774605892941, 0.11926646844196587, 0.13305860861966612, 0.10379072577492043, 0.153248535641894, 0.13575139328462715, 0.10734027699556392, 0.16749791867061903, 0.5471667894649739, 0.15663922643047956, 0.1152644783216954, 0.990954632186551, 0.9888622324616378, 0.9941965495798534, 0.9913287936420014, 0.9922122941595579, 0.9918419893796317, 0.986486563536857, 0.9886144707947014, 0.9907872795524691, 0.6797912415712277, 0.0598946200280468, 0.6702920187250263, 0.15324181007796722, 0.684023815587797, 0.674192206916611, 0.12651177299561278, 0.08364823664770715, 0.7497465100024134, 0.3881071891906601, 0.8576724733409442, 0.838692153295296, 0.8394650787419369, 0.11644184630952603, 0.11631354416704887, 0.8688564272588771, 0.36209890457971194, 0.8698245002005087, 0.3164730671416711, 0.3469636398362409, 0.35297913805512815, 0.4648614880048946, 0.29220447035362307, 0.3622255058013454, 0.39197264261698306, 0.10975657179778298, 0.287558396262136, 0.39208214239515904, 0.016823003838700945, 0.022529711448387557, 0.4775565716403305, 0.1920691265584017, 0.28460739815567726, 0.4692608955869406, 0.2994413793391687, 0.1321726014344895, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00868138380864203, 0.13973289722832838, 0.06272768431210407, 0.014753535631703896, 0.03822348315805446, 0.0258313100822275, 0.32653119788798846, 0.2219966526471001, 0.172366212171838, 0.13195788411842513, 0.07778799935722724, 0.21131152867046354, 0.13682642374364729, 0.4364787367188242, 0.06646478213050289, 0.266759588955508, 9.999999999998899e-05, 0.16059229424906984, 0.0994180408902674, 0.1609455994306248, 0.2769086278310299, 0.09805083066802867, 0.08823050301063873, 0.07251134418210026, 0.011881765561717272, 0.3570409437208518, 0.23043639867910848, 0.03819923576558082, 0.3266490712816482, 0.32600583340675393, 9.999999999998899e-05, 0.05701690418602667, 0.08331485978655495, 0.6558927415346788, 0.6527983570993863, 0.6913656629113154, 0.20952374441061283, 0.6644896050077955, 0.20892337361827829, 0.6323246413734473, 0.14002885321630054, 0.6020353796016116, 0.06722994393385162, 0.10439895178585412, 0.10377880181066101, 0.1365625524282612, 0.11803443138362313, 0.11131300415653955, 0.09879393308717022, 0.07512017691237927, 0.5176333715298352, 0.27104395853937846, 0.16250680779676496, 0.2517279170960819, 0.5709446473452989, 0.17057215195241204, 0.1490420527485561, 0.22397677001812166, 0.17891904944911785, 0.2645821018660628, 0.40990718828017414, 0.41112264920770947, 0.457931299114843, 0.3944579925791134, 0.19499705368678388, 0.1808089301813226, 0.4375967158613878, 0.55270603573639, 0.21109835942160782, 0.23020415676481176, 0.28039685899852795, 0.3927943629423418, 0.2922402588882942, 0.18992206071253004, 0.18396187368401318, 0.3965992748593883, 0.20378701158905654, 0.3841318420806994, 0.20804960464107425, 0.20786175425042797, 0.2391256835571528, 0.19451139328219058, 0.17956494571177573, 0.21336323056825446, 0.21487181701373503, 0.1848936529547347, 0.20443069504631473, 0.23637603217133163, 0.2130562942530656, 0.611348735429962, 0.22877673085120132, 0.6268375806339423, 0.2136847117163062, 0.22933388316566172, 0.19721570109525888, 0.2055606302195515, 0.21178765717113968, 0.156127677007461, 0.18244537439769992, 0.18634021884522156, 0.20074620897741347, 0.8927766196854235, 0.20040949891446302, 0.12665005111240457, 0.15277326792894252, 0.8057255462631402, 0.11301636395110659, 0.08268671307208075, 0.7946237164966579, 0.16594440161579127, 0.16669807208131426, 0.1048697403627602, 0.13001372904968267, 0.8450879702588056, 0.19647382776195155, 0.18858008455308017, 0.19935735180683556, 0.17871119502316923, 0.17375546030754885, 0.18180755387316505, 0.21325953899115402, 0.22199520308665033, 0.20221372155737283, 0.08788373193342103, 0.09066341678650536, 0.08628700883608942, 0.07915759334771921, 0.08166761297584257, 0.09440278867020557, 0.08790067953652836, 0.08119239154474267, 0.10124873502392007]}, "mutation_prompt": null}
{"id": "6161ff5f-f99b-4cc5-b486-1f56be5083b2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "e7bcd7c4-ff2d-44bc-9663-01f2fd4f4aa3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            # Calculate diversity for adaptive coefficients\n            diversity = np.mean(np.std(positions, axis=0)) / (self.upper_bound - self.lower_bound)\n            self.cognitive_coef = 1.5 + 0.5 * diversity\n            self.social_coef = 1.5 - 0.5 * diversity\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Introduce adaptive social and cognitive coefficients based on diversity for enhanced convergence and exploration.", "configspace": "", "generation": 37, "fitness": 0.322857639219627, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.877706312919011, 0.8749310868116892, 0.8664679727933211, 0.18986964084893965, 0.8704760459057115, 0.8519465654257801, 0.14350368835574878, 0.869048861067781, 0.881126089907608, 0.7905412305649808, 0.7399845585275491, 0.793334748907726, 0.0681840097359232, 0.6929718364975682, 9.999999999998899e-05, 9.999999999998899e-05, 0.793626773038449, 0.006762841978572021, 0.14966380995321082, 0.14105111423516414, 0.1294679106376787, 0.13805647522604125, 0.12530123310492658, 0.16187989878604203, 0.16931986257445475, 0.06288773876632059, 0.1298620074485929, 0.1361616693141161, 0.1294594354191564, 0.13667115705274246, 0.13014021427872136, 0.0982794240521222, 0.16724134479765018, 0.15038692839195267, 0.10778582484898702, 0.0972252116787713, 0.9947803826738959, 0.9893028525685781, 0.9917239066389274, 0.9903494498187552, 0.9872182843508502, 0.9917921356598454, 0.9885165026193478, 0.9889830658348583, 0.9937650665436732, 0.05955738660031962, 0.7265791560437861, 0.6548004722909594, 0.7085695350357122, 0.152706689022015, 0.7457214765003388, 0.746519618489325, 0.08899011629514497, 0.08884602994149304, 0.39251543268783473, 0.3431882853655045, 0.2428678630999701, 0.28135378881049367, 0.19098907041423485, 0.8706166224662493, 0.06984626684758966, 0.8369804116361478, 0.7698831989707929, 0.2773549244404987, 0.461464605431366, 0.5145088781751778, 0.13389912596081, 0.523958527798398, 0.5837899630792123, 0.4271064466287615, 0.5343890626687552, 0.13437117206471394, 0.3892443306184509, 0.054512311712981654, 0.5196664222358391, 0.44207197928239717, 0.5073638645866635, 0.6500212426126937, 0.4952184899754931, 0.13385722997685612, 0.5961465262633425, 0.18415476659694874, 0.06167729832004332, 0.07017331138726435, 0.07879300175482273, 0.18173014447739744, 0.06003814145372377, 0.05188689040568384, 0.052039525415331966, 0.0362129447146563, 0.18060492060177535, 0.07089589352783165, 0.119037893583125, 0.16245030206550037, 0.010039694987727277, 0.15334468303905324, 0.12482823324776504, 0.15980621015953944, 0.3217870243153791, 0.04833279690640191, 0.2630604176079041, 0.05689703444821137, 0.1671470287227783, 0.21319546944346768, 0.09066361970170655, 0.2462860721848994, 0.1258896971161585, 0.07429666654952138, 0.2099891434276654, 0.04260097412869235, 0.2113040206820367, 0.006572309957441735, 0.00651099529775534, 0.29621794270170354, 0.0819137975677453, 0.050026101756443286, 0.22518671652628774, 0.7688413428748703, 0.5971331102602181, 0.5667825310581605, 0.6573905381994241, 0.6623111182818102, 0.6689036582771788, 0.66921140245211, 0.6319603467127248, 0.7142204368928229, 0.13216528355382984, 0.09361365508513686, 0.12721035902375732, 0.10849609573147467, 0.12618231895196153, 0.14181191515971237, 0.10539458153982906, 0.14012106203533026, 0.08246831203401284, 0.1939349572691511, 0.2805034470903709, 0.20001019092269667, 0.19950172577431236, 0.2689376721145339, 0.19728223810108403, 0.13655090238615541, 0.11886496577495709, 0.2569204790469194, 0.566489927857726, 0.2196589926957141, 0.43429493557163246, 0.4686430358279289, 0.21451198695114515, 0.4089489137770038, 0.44826281789360944, 0.46795011696896827, 0.4983235830777033, 0.40375573139362775, 0.24745536824104564, 0.29368505726489846, 0.3464411808931134, 0.39675273223415264, 0.17892164937182475, 0.4331476811541941, 0.16086237033820106, 0.13836759047415326, 0.21546933962901027, 0.20583465575677407, 0.20114926155947732, 0.21482830094824612, 0.21717289631174574, 0.22791110951433324, 0.22175601964614866, 0.18513112209946603, 0.22225095927389182, 0.1920361698976356, 0.1985059597230786, 0.2267304072839037, 0.7419911742681444, 0.2189470820718632, 0.24853979167468399, 0.21090408847480946, 0.23072625218105536, 0.6410186565787623, 0.14003853721626913, 0.8983999169712483, 0.1876534243759742, 0.17714467791040045, 0.17632577530409688, 0.8843310751730662, 0.16678286145977184, 0.18549163030019133, 0.15784053734033587, 0.08300821057487973, 0.11283122410080848, 0.8695255365592383, 0.1689510667575871, 0.8127623020748225, 0.20801714578203867, 0.2089332048582898, 0.1131891055079679, 0.15663553833508959, 0.16867145079968593, 0.18903362073693197, 0.17455200862626497, 0.24013098854011228, 0.22887421978245026, 0.18727957635417636, 0.2005128044947655, 0.1946480425830286, 0.19278328868114303, 0.10294233600602043, 0.08522686239231969, 0.09010271701000039, 0.08766929721280381, 0.1094789622525002, 0.07535825743600222, 0.12150545677715674, 0.06567070961118004, 0.08782275668413275]}, "mutation_prompt": null}
{"id": "903f45b3-e45e-489a-8d52-7332e38464b3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "84ac1cba-8def-418a-89dd-075fb2b3493c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "6eb2a37a-bd31-48db-bd57-502cad14bae5", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "453b3dd2-e81c-42b1-93dd-fff4407e4769", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "3270dc4d-27b7-4a44-90b3-4c437dc65935", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "eeb7960d-d51b-4953-823d-45223b8aca40", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                # Introduce position perturbation\n                perturbation = np.random.randn(self.dim) * (0.1 * np.exp(-self.evaluations / self.budget))\n                positions[i] += perturbation\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhance exploration by introducing position perturbation based on dynamic factors to balance local and global search.", "configspace": "", "generation": 43, "fitness": 0.28484158787718217, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.24.", "error": "", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.6904030207364934, 0.6945694626556199, 0.704750685275666, 0.6879683343456264, 0.6717128550813103, 0.6871371416310594, 0.7687417411872378, 0.7080018973254993, 0.7418705102641017, 0.3092683874568122, 0.34685052149935114, 0.4296313536164368, 0.31836732445010707, 0.3896561232360315, 0.3184711490577371, 0.2017932813092087, 0.372928841247253, 0.3869687286596597, 0.13021263194267318, 0.1452240468505297, 0.11242390674267388, 0.1314675453230153, 0.14899090548460203, 0.06470645188868673, 0.13058094608903448, 0.13080142251649574, 0.14259479291891708, 0.1457687338575986, 0.13273986604987387, 0.12645585647758417, 0.11398798729775295, 0.12064722859806976, 0.10773858589312035, 0.10637559111230732, 0.11258636911263653, 0.11152227132116455, 0.9935880857235964, 0.98246540535792, 0.9928479997011918, 0.9889101033886885, 0.9949172278243468, 0.9905980099795488, 0.9891384510030707, 0.9937211936022771, 0.9932326786296363, 0.33153043129428084, 0.40956836842581856, 0.46633103074085214, 0.46339631123592817, 0.4189483975270982, 0.3630723642783853, 0.4777543595457757, 0.34942622350484565, 0.3684680188139515, 0.22862236327270324, 0.7784240472588748, 0.45563039640842573, 0.21369693786942456, 0.8561245679239731, 0.19172402905806996, 0.5395619654128467, 0.11696114983777739, 0.5607764317109856, 0.23482563428148373, 0.24920630147302636, 0.1902724903509273, 0.19469738743439713, 0.2679239280397946, 0.19193561676161586, 0.2722649451387281, 0.18952808526122011, 0.3023522796258187, 0.18257788662737395, 0.12020180929009294, 0.22780159675370548, 0.21623423435202982, 0.21379676045899743, 0.2316866075187608, 0.1277903106470356, 0.16893441469405424, 0.21688455636266069, 0.07805967922652524, 0.0018388772216685334, 0.062863499224322, 0.08122348258790357, 0.011720080155653845, 0.01139613763572489, 0.05623997791262536, 0.000497852583677405, 0.04016199265180753, 0.2386980201894392, 0.04061766707077619, 0.15108903536758245, 0.19797750034056072, 0.0391818492230932, 0.22659061144031, 0.259476112825644, 0.11756300408728837, 0.07971418934481223, 0.04640331619418214, 0.09521967094346728, 0.10841962089357327, 0.0906711980779299, 0.06893283571680531, 0.060028832379218855, 0.09857875042868869, 0.06351390023019599, 0.15667134299434693, 0.2214321115154484, 0.24961536613208013, 0.20775111543465485, 0.11200059477214941, 0.25825943390490425, 0.07819444442628753, 0.09510594867154376, 0.05972948480132856, 0.1260320582430834, 0.5863157040940151, 0.44898626116564866, 0.4735209618943519, 0.5456802119197985, 0.46080305564919277, 0.495998778352023, 0.5147614690472155, 0.5694417140224586, 0.5546105165373766, 0.11033581506622281, 0.0453792856604579, 0.08766347360443705, 0.09977260647408714, 0.18756018831056642, 0.13683158397729112, 0.12979280072029198, 0.09170563349019378, 0.12611177152776887, 0.14681524133525015, 0.222290019478258, 0.2048507273007243, 0.2919906244601447, 0.1535703877423874, 0.2835024827164013, 0.20153078892766596, 0.17244195936285012, 0.17367309897954342, 0.33939001936890933, 0.32446533527607124, 0.3161357068870744, 0.32619990942159416, 0.22033079676047929, 0.36884096374186115, 0.3860646110960906, 0.2841838341737136, 0.34687740558526337, 0.19101230952024395, 0.2807390594742135, 0.20500468991257215, 0.26178097690697755, 0.19879707266678615, 0.2948633947848802, 0.20456891995855953, 0.30054489175562327, 0.2540806419773576, 0.2650180378721495, 0.18984968663091673, 0.2340546645089936, 0.19391234896595766, 0.18917957620300108, 0.18949592207198596, 0.22903636295081564, 0.2090994194039052, 0.21460385644769975, 0.2446583634334779, 0.2232085057187283, 0.18751809161004596, 0.1846683672322963, 0.21862776690801178, 0.19542367156415774, 0.47625069233086603, 0.24185845258270466, 0.21791043306754343, 0.17263269551605576, 0.18679466081869867, 0.18544622380136577, 0.8969947735837503, 0.8833217879084837, 0.1684756042640887, 0.8964312327000691, 0.14694806126372673, 0.152818681603772, 0.15562281207064965, 0.11276397432301255, 0.21226472563280285, 0.725670481476117, 0.20862860635089375, 0.20891988575696274, 0.7730155792376225, 0.15674169458263298, 0.15478251193951398, 0.17730692111288915, 0.19632754485612425, 0.21625647799256575, 0.1836507678997351, 0.19878340844148334, 0.18403056153947517, 0.23266240158896268, 0.21015633669079503, 0.22575133004035974, 0.0915934958507143, 0.08034541011084784, 0.08223223960389492, 0.06134246711440994, 0.09312525007591355, 0.08236985881506786, 0.09518267657535473, 0.07325492060294159, 0.07520751137818538]}, "mutation_prompt": null}
{"id": "a785609d-651d-4d50-b04d-3f47fccf3779", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "1ac74bf9-f546-45ae-a018-65972a61b9ea", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n            \n            # Adapt mutation factor dynamically\n            self.mutation_factor = 0.5 + 0.3 * (1 - self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive mutation factor for improved diversity and convergence.", "configspace": "", "generation": 45, "fitness": 0.32950524075522775, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8688628741006922, 0.8715430417910288, 0.8768233754095888, 0.18270947950015848, 0.865661739748273, 0.13444493965478121, 0.8614101197620054, 0.875078562289386, 0.8820737436843361, 0.8032086837032142, 0.7664627507614157, 0.7582978409156991, 0.7924102019298024, 0.7741745224915146, 9.999999999998899e-05, 0.05890295554370517, 0.7955270095692872, 0.788958968888725, 0.17871629599865357, 0.13228040761866755, 0.1369209725717213, 0.0993015068380404, 0.11032531509821641, 0.11418214902073087, 0.1223064182544138, 0.14090180698963273, 0.15258567925561617, 0.1457143332656291, 0.14393982268762107, 0.11947395234890223, 0.15070998905870925, 0.09941167964825415, 0.1499827484510985, 0.13721100295310484, 0.014960593722286974, 0.137382189428226, 0.9947966660671873, 0.9877915022974159, 0.9923901642290841, 0.9920038719682224, 0.9860246656902459, 0.9917556183819168, 0.9895252972553822, 0.9880254724726996, 0.9937583914145145, 0.059629024111753304, 0.7390280748192676, 0.7447817731523092, 0.15067906879157456, 0.7772437967880146, 0.6984859434247198, 0.7725444631643916, 0.739991871039438, 0.08385662841114094, 0.33145899766953746, 0.16136122867938485, 0.7926908460144235, 0.1944489929683616, 0.18923856808490158, 0.27630932346965753, 0.9124805169624841, 0.8332557732073664, 0.34615678044743514, 0.3493519482725349, 0.20971722387496128, 0.13339335390757023, 0.13460812804156996, 9.999999999998899e-05, 0.38758135106248215, 0.36420662597135856, 0.2881352432904464, 0.32991737427982826, 0.2585394492253833, 0.28700722661814293, 0.2554788167790024, 0.2932974816567335, 0.12951317449227628, 0.13491855163470468, 0.3019661327221608, 0.10032971799593815, 0.2940164198127342, 0.18806427432303474, 9.999999999998899e-05, 0.044003786015605506, 0.007144616217328981, 9.999999999998899e-05, 9.999999999998899e-05, 0.030987580187648023, 0.02502029090859703, 0.14678338151126513, 0.11671407591902605, 0.10559796741436933, 0.11473252462528905, 0.1416167530592789, 0.08199184486497413, 0.23875273909994643, 0.3420451535686063, 0.23084873856921428, 0.2337447788221806, 0.10585986376016698, 0.06857208467244458, 0.2565804583866257, 0.12555028091852583, 0.0776200907725152, 0.10283502655175614, 0.09090747987805425, 0.13014903906648922, 0.08278809142323029, 0.04301154439259369, 0.3053320995957399, 0.17523716914031084, 0.28837432249639083, 0.006582857125016051, 0.21243947337876512, 0.10888855992139546, 0.050055154663153134, 0.27037430384613026, 0.6021069775317505, 0.5576988244508894, 0.637852996021445, 0.5569694190861351, 0.6263382662679116, 0.5596273045878486, 0.5974683198185828, 0.612185152837766, 0.5857608051161063, 0.1667312374834361, 0.08494769730408624, 0.14770954567550654, 0.10471842586923363, 0.11603110121476479, 0.10624948517935662, 0.12977643046105147, 0.15140870070205803, 0.08728787778321678, 0.22262574625063924, 0.3015152847117406, 0.23036439031276745, 0.2404061036349613, 0.223307330610244, 0.15345188068955684, 0.2013634998842183, 0.2235382518206117, 0.20448030531141426, 0.42695611296654334, 0.3343098433679478, 0.36834175540735914, 0.4218409642049623, 0.23344401523109748, 0.3902687991031625, 0.2882378595809607, 0.5656816675323447, 0.43231025123786426, 0.3357274539394036, 0.33095849159998014, 0.3830353826786661, 0.2766630922059692, 0.3699973079769805, 0.3291153733510066, 0.3663389923189201, 0.20438214315815317, 0.37807698111865806, 0.25009642145878697, 0.18379175575618145, 0.2098593104385601, 0.2219567012142738, 0.19746668325008343, 0.20082500924174784, 0.2686132186104562, 0.19101377999835967, 0.23543220473030635, 0.23665895039387586, 0.21437678051561004, 0.19473071346683157, 0.23233647304762162, 0.7418652517808348, 0.732657328887919, 0.24156710625272648, 0.7702028657935345, 0.21885629837615495, 0.1878425037905035, 0.9238294931037243, 0.16595558607528327, 0.8945749589282792, 0.19767852484180393, 0.8696398968699843, 0.162870055979773, 0.2037758984278194, 0.16252514599273749, 0.8474383122649342, 0.11328496073953898, 0.8685318108403757, 0.840314327679992, 0.2098071100678417, 0.2089637634998207, 0.21024408326421318, 0.11310154775358405, 0.15556958526350462, 0.18839267333821397, 0.19271297446888547, 0.20207419897351775, 0.17246686373029185, 0.19459371518657875, 0.20747066600323416, 0.19138161106932294, 0.22017514228769286, 0.1991481715548522, 0.09188187284036176, 0.0972081195919704, 0.09726871667532755, 0.09262001613066839, 0.09834211091334677, 0.07845628933853299, 0.16386081217812976, 0.08535215724956202, 0.08960800673438751]}, "mutation_prompt": null}
{"id": "13c247f5-3b93-45df-b061-63b67beaf93d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "e2e6dbc8-c1c7-41e0-9fbc-a4859aea45fb", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n            \n            # Dynamic adjustment of cognitive and social coefficients\n            self.cognitive_coef = 1.5 + 0.5 * (self.evaluations / self.budget)\n            self.social_coef = 1.5 - 0.5 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive cognitive and social coefficients for better convergence.", "configspace": "", "generation": 47, "fitness": 0.34992354642711826, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8707301115047154, 0.8501821926844425, 0.872402790400854, 0.18270141283174424, 0.8775286140174017, 0.1344380271556752, 0.869000804788289, 0.8953465055838519, 0.8676890701603679, 0.7868343700213752, 0.7813209365770691, 0.7862540306057958, 0.7457433972428511, 0.7738949519620322, 9.999999999998899e-05, 0.7749132920817017, 0.773971716802442, 0.7844211451944214, 0.16724572780692792, 0.16456982646851415, 0.1784803692679272, 0.15315032582046184, 0.13156413638591458, 0.11328760230022816, 0.15064549478495703, 0.1371570522761767, 0.11215247590117672, 0.1413276872482826, 0.12744708519476666, 0.11284787754911119, 0.10103193093541918, 0.1441162842728978, 0.15319628929874274, 0.12695519256918253, 0.1299784109022044, 0.1760522045105275, 0.9947964286690194, 0.9877949404996391, 0.9923901952098351, 0.9920038650935762, 0.9859859130367636, 0.9917628543434365, 0.9895298572110668, 0.9880284704461023, 0.9937591177015697, 0.653809417770298, 0.7446330058401383, 0.702610925634007, 0.7247907489488334, 0.7228571633881749, 0.1504742164211852, 0.7765038135751977, 0.6986102900160522, 0.08381284342227135, 0.17173960744596006, 0.3322928383886615, 0.22799930567972682, 0.194070519204958, 0.17499325485829664, 0.3492555457101878, 0.8255390476627449, 0.2355401128286122, 0.8245114522918515, 0.2945270515961438, 0.5839025270620998, 0.5582010074196502, 0.6411037249283325, 9.999999999998899e-05, 0.510892565758716, 0.5110000021889272, 0.2935326516264164, 0.5453874807643339, 0.5128215565651935, 0.40387302924959756, 0.4216734643303862, 0.30124633579416527, 0.2990380209139384, 0.4263997038936175, 0.44401418886183686, 0.26020643800590904, 0.3860884224414025, 0.07389296807132828, 0.12451402558275282, 0.06940970147786196, 0.016857278224707617, 0.18659130533579404, 0.05942461588187886, 0.07892629883357949, 0.07136997046144511, 0.03773222416802824, 0.12182686353117511, 0.2174313533955352, 0.20448634271095767, 0.31347575790044657, 0.015683368550220123, 0.1203461007137332, 0.37315532135884455, 0.12367379690844849, 0.3328618597645556, 0.17754317965520017, 0.29681328752713976, 0.04766148790824465, 0.17019322924191416, 0.078845504526173, 0.2947820656172453, 0.08976719415993206, 0.16714206509861307, 0.08218138980183975, 0.04322259617056412, 9.999999999998899e-05, 0.2352228758218503, 0.25249648669154745, 0.006620378892720158, 0.4067904484225926, 0.16037165960842426, 0.04993032801690478, 0.21119252807918187, 0.5868774382885158, 0.5716312473397764, 0.601428970903211, 0.20861251163563366, 0.1817396586180815, 0.616172961783755, 0.6790643796193416, 0.583933353752198, 0.6784262300435969, 0.16005788069834348, 0.10005940722615847, 0.14732501437791912, 0.11044424070520453, 0.11440334264550733, 0.11667030789960986, 0.11579904258546536, 0.10990895780220344, 0.14786391949419087, 0.5285665997479745, 0.2055673709597784, 0.23168056831669548, 0.18198722911292575, 0.19218497121040368, 0.20406324774951046, 0.1985351912666683, 0.2142248483446909, 0.1596990728091061, 0.5317517639232305, 0.500080101883954, 0.4843821240108528, 0.45164654880805943, 0.13935524589506765, 0.46019929913602486, 0.5935146828514306, 0.21979072660946863, 0.515741588196601, 0.36724279176236574, 0.35457493167349863, 0.21989801423479938, 0.3279263011388621, 0.29938855192440483, 0.20881286242922736, 0.406727127257704, 0.20888590358236525, 0.28055526711421985, 0.25058193351628655, 0.18617234089794565, 0.2812524190072059, 0.21964745411031428, 0.2182553211888385, 0.18393868356274223, 0.23823422226787183, 0.18684286129157102, 0.19101533021001793, 0.19139569235360754, 0.17988170798980663, 0.6733837314074325, 0.6842235782441732, 0.19383400315387822, 0.19663620190399045, 0.700667837741128, 0.21204474404046125, 0.2031359089976894, 0.18703597395436244, 0.911517007473116, 0.1659484003950047, 0.8955608582450375, 0.19904362662345831, 0.8983409416060583, 0.16350379668555703, 0.8570647250296908, 0.1623873421472648, 0.8677641346012102, 0.11326551153193687, 0.7917141036177222, 0.847966489977416, 0.21065022274838097, 0.20887680213512116, 0.18724167211934128, 0.11310322099833614, 0.15581027873774578, 0.1924149630549461, 0.20983169824608594, 0.18294585555898468, 0.19067243710575343, 0.22550952449253825, 0.19615146903835223, 0.1298570727308448, 0.2295980690358349, 0.20407232748067494, 0.0851347330792942, 0.09312078133380786, 0.08695489358992714, 0.08761256771606185, 0.0889885518884761, 0.08621085828595221, 0.09499347724808993, 0.09576778818246368, 0.09298895839047383]}, "mutation_prompt": null}
{"id": "f70cd30e-e7a3-4577-abd0-d5fe2b361b02", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "93d298fc-8fd8-4e46-ac5a-25aab69d9eeb", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                diversity_factor = np.std(positions, axis=0)\n                adaptive_mutation = self.mutation_factor * (1.0 + diversity_factor)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        adaptive_mutation * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive mutation and swarm diversity maintenance for improved convergence.", "configspace": "", "generation": 49, "fitness": 0.24342931261905795, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.25.", "error": "", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.7228762691168356, 0.1251066726514638, 0.7493972219585089, 0.156311414149934, 0.189319290174215, 0.19037993791693408, 0.7954277107975481, 0.7529170662092193, 0.7932989461975009, 9.999999999998899e-05, 0.03694808126105453, 9.999999999998899e-05, 9.999999999998899e-05, 0.04182149079467312, 0.038278110550578504, 0.6763207277248844, 0.0174766184555043, 0.004306736145674894, 0.6206390044649779, 0.12382030330614235, 0.13782516101678433, 0.04239107913429074, 0.1697478930126728, 0.07204756179561644, 0.12079980842027693, 0.04725304334140912, 0.11132882599790261, 0.13125970794061792, 0.10765765407649652, 0.1378304245004519, 0.1108124897767171, 0.12381976908905779, 0.11698698853371148, 0.08979707999122566, 0.11913491019330702, 0.10509344046194669, 0.9928468232915292, 0.9927359609520955, 0.9939907656400991, 0.9911234227484693, 0.9844491919016372, 0.9881323664838193, 0.9946507022974713, 0.9919186713017835, 0.9953197745313023, 0.05525120899613434, 0.054658821234620736, 0.11165048566960045, 0.14286245454911006, 0.14591520404076086, 0.1474969251109276, 0.5921081872032898, 0.05171372803135288, 0.08660098207539646, 0.21615612185939015, 0.7172152392801462, 0.16023719128422254, 0.20723540889430836, 0.6289888890097046, 0.25553533515759397, 0.1161321790251264, 0.1156740527566984, 0.12728640565595217, 0.3443190773879444, 0.28444493174143703, 0.27239235341059653, 0.3895544642343757, 0.42624250889490845, 0.3700783609036702, 0.2307899850244267, 0.25704627062622165, 0.4501196669205454, 0.01642958970036057, 0.016678070723309846, 0.053067805991255046, 0.1140597967080037, 0.4876265887417972, 0.3384964627953092, 0.34391095480128475, 0.1247718660149898, 0.10423031073435485, 0.05862676672528033, 9.999999999998899e-05, 0.03318016642649668, 9.999999999998899e-05, 0.0006285259276768151, 9.999999999998899e-05, 0.025534998311807833, 0.013373994559361724, 9.999999999998899e-05, 0.12351668797046145, 0.046907737246457915, 0.06155057598942859, 0.015628629270104444, 9.999999999998899e-05, 9.999999999998899e-05, 0.04372551568106098, 9.999999999998899e-05, 0.05001486426252122, 0.04104920029415571, 0.1471118646197347, 9.999999999998899e-05, 0.04898297684110153, 0.10563798956656101, 0.07062936917927254, 0.08418731883011588, 0.08784394669232298, 0.10376842667132535, 0.16843342677835715, 9.999999999998899e-05, 0.1841292450082762, 0.19326715719259346, 0.005841032175024741, 0.3411937472088873, 0.07480440738467664, 0.04782307474852443, 0.04732050581685965, 0.5619953133175615, 0.6247299561054007, 0.5990888547088167, 0.5990813467954943, 0.5733355518395798, 0.5540663451787858, 0.5553393756888758, 0.5109380030810025, 0.6608535784807653, 0.08775950305234292, 0.0806487868074739, 0.019862957554626193, 0.10476144086196504, 0.10611491678137353, 0.11122302618211866, 0.10502343508923728, 0.058707503251520965, 0.13828620689926774, 0.16354197076706845, 0.14107729322227058, 0.14640337184587238, 0.1435685033953369, 0.24458294716713758, 0.22391856347113415, 0.1337757741308926, 0.11875435758222297, 0.15039671488425643, 0.46531561185028114, 0.1799877899000749, 0.23418209018602765, 0.398960971052171, 0.15177579006070008, 0.28055633681878867, 0.417882202309679, 0.20489295478277658, 0.24846564855725883, 0.22312806226735393, 0.21508732406957953, 0.27709099677270443, 0.19574630209515986, 0.1115374476390838, 0.2380833197485569, 0.29519645392602434, 0.136036237989264, 0.07269484074529486, 0.20071698733997878, 0.19097760121205642, 0.19224495403689135, 0.22060078883448564, 0.15304065060719385, 0.18690360429431774, 0.20787612124560872, 0.1832244257827239, 0.2186314706788266, 0.24283593019282945, 0.5749846179560776, 0.20058664482449862, 0.6693856258443016, 0.1857908392767934, 0.20466344158686112, 0.22978335559671614, 0.593410075367913, 0.23190994455922587, 0.20287958720207966, 0.8293511556658886, 0.1697783346188898, 0.7802838193055489, 0.19712861398076065, 0.14388270417958593, 0.15700043694554966, 0.17546675417372348, 0.15506314659296205, 0.20023576620744898, 0.10867827967042054, 0.6895310948867566, 0.6568204520431191, 0.19821085296540264, 0.6824250242568052, 0.12698328310869833, 0.11282375463038319, 0.11241260188576596, 0.22108813052475662, 0.1785094085159652, 0.20749537725767897, 0.19755660761355232, 0.31959169842431445, 0.16043737684257542, 0.1955474451562399, 0.215076634861755, 0.18190839219716815, 0.08016096477920986, 0.08901701956380059, 0.07120761718242952, 0.07288011106290015, 0.0695369225129161, 0.09288030906236022, 0.0896300631031518, 0.07566068375706925, 0.12507888795449307]}, "mutation_prompt": null}
{"id": "fa2b3f0b-987b-4a9b-8753-7755c9597652", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9  # Initial inertia weight adjusted for exploration\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            # Dynamically adjust inertia weight\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = self.cognitive_coef * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = self.social_coef * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic inertia weight adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.8721520097375887, 0.8397182162557648, 0.8762961089321041, 0.1825503951140095, 0.8676623043105826, 0.13443044847005348, 0.8751515977183961, 0.8633382903517044, 0.8799272491856008, 0.7754369583721945, 0.7543785660645153, 0.7575537250443337, 0.06848303787746479, 0.7693685960790899, 9.999999999998899e-05, 0.7619988213300227, 0.8013921375253016, 0.7691150046517788, 0.16786109359041712, 0.11067679961869015, 0.1682568084737872, 0.14672047689644474, 0.1507809247327777, 0.16526000083003367, 0.1477145854537053, 0.11409424045459238, 0.10690075214332917, 0.14033713712168394, 0.08828870526698629, 0.12487281113737136, 0.14743357445833605, 0.15421462460009894, 0.08998500229292661, 0.10155226086504376, 0.01467017143936411, 0.11707814743423328, 0.9947966684875934, 0.9877928557200916, 0.9923902237486062, 0.9920039886754398, 0.9860135158126703, 0.9917640927903046, 0.9895296890686989, 0.988028556565121, 0.993759159911214, 0.05980641847523016, 0.7251427890478939, 0.7521546150769828, 0.7014958536918441, 0.7405621738323316, 0.1510305190154162, 0.7266754924566269, 0.7342468546624814, 0.08385688921682977, 0.22740781020393275, 0.8571619767157255, 0.17065649785591397, 0.19391587518563302, 0.1133645703513223, 0.8267190681767529, 0.8534575813890144, 0.8505384837045606, 0.8896998852334439, 0.12965184566971, 0.5130667141706426, 0.5559124964235505, 0.582153389732479, 9.999999999998899e-05, 0.6339282805791107, 0.5603451878689601, 0.44011038059396224, 0.49879939836504283, 0.5646286620162115, 0.13231242537758536, 0.23374913193010338, 0.4747031822536326, 0.4247670095750212, 0.3847214808218653, 0.5177541038075, 0.352965851900652, 0.4184946883819419, 0.0992582620189767, 9.999999999998899e-05, 0.042882751012851994, 0.07178955525262276, 0.010630067283461386, 9.999999999998899e-05, 0.042766227638113885, 0.14908834532381787, 0.023290589813421136, 0.09152854929618315, 0.11598522563062075, 0.3360655512897158, 0.1903405648658547, 0.016599383773213794, 0.07740018272236304, 0.1602836512243272, 0.3002656494156406, 0.3748809058834166, 0.3415116634197245, 0.24603902177802472, 0.14440246786874178, 0.0973629088953869, 0.08150047733958532, 0.2062710830507254, 0.08473671859070908, 0.2365714554248196, 0.09953496187674049, 0.043511995409801774, 9.999999999998899e-05, 0.24815792191266295, 0.25241057387433374, 0.006616203244805052, 0.21874793168573448, 0.17466005221646397, 0.04988376618597645, 0.18392996559223707, 0.6079201040211439, 0.761004237106794, 0.6029528959924395, 0.6103579085992921, 0.6386820619709934, 0.6444349645328951, 0.6670923224061545, 0.6403093057617315, 0.6636628256389014, 0.14028971568372928, 0.09054091555279808, 0.13645983967022435, 0.13311888165128438, 0.6010094919822467, 0.13051573611279632, 0.11022311408286567, 0.12363381356601932, 0.1117421895744346, 0.1854742485816504, 0.1430826155883569, 0.23185210279573476, 0.5389387941852715, 0.18618753236808894, 0.10488677260640145, 0.20133070497712846, 0.14536362008104875, 0.19693782787592085, 0.4615260938872632, 0.434920457812886, 0.4990693891606012, 0.4816420629536733, 0.20847455802268033, 0.581630596015102, 0.689798433355568, 0.5078252441050697, 0.6688667110772964, 0.3709194914853914, 0.2700124845610299, 0.4008014739311523, 0.3550751283364575, 0.39796152854269107, 0.2568076653169791, 0.3276943089302572, 0.3889563881228004, 0.4085240917275771, 0.2361157914337676, 0.1985077800702454, 0.20677301190565744, 0.21979990032777263, 0.21486120030742284, 0.2013174627058606, 0.20724106983718715, 0.2309853354331839, 0.2700006290183302, 0.24005891396168, 0.19395580539724633, 0.782667850415935, 0.6195182774969277, 0.24003587549629524, 0.7171137301065071, 0.24737779191330544, 0.22112693619467216, 0.18415177140322891, 0.18777263613489015, 0.9224842291458715, 0.16591935435431948, 0.8697913358380881, 0.1987252234757143, 0.8710512883246398, 0.16303470863801217, 0.20694478953159579, 0.1623113280724301, 0.8192766877794438, 0.11326535409962857, 0.82074078739147, 0.8349212187123332, 0.21010725040673817, 0.20980956510084126, 0.18700072953909175, 0.11309209546135168, 0.15597691777268885, 0.1728224108209706, 0.21569437482784393, 0.21829381753674493, 0.21131891730900565, 0.21490439560443442, 0.200329626247156, 0.21038263082135622, 0.20605962541780043, 0.21249661075950355, 0.09926491638826518, 0.07946979343185301, 0.08289789547826187, 0.07216662181188627, 0.08853904153038716, 0.09419337545526485, 0.07631317658319425, 0.07755684470780366, 0.08672637640030967]}, "mutation_prompt": null}
{"id": "33b6eef7-ca5e-49e4-9ebf-89dede26548f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        self.mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < self.recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive social and cognitive coefficients for better convergence.", "configspace": "", "generation": 51, "fitness": 0.36800968857992195, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.30.", "error": "", "parent_id": "99f52302-5e2a-4be8-9c32-51615ac0ddfe", "metadata": {"aucs": [0.9170666746359765, 0.9151847178619897, 0.9204913655863101, 0.9176945328032362, 0.9053943766755596, 0.9199162035955433, 0.9225991639532953, 0.9227424698689394, 0.9122290411148158, 0.07597757758265056, 0.8000451099896237, 0.8341330858543763, 0.8398845411168157, 0.8649169653969033, 0.8083366061251887, 0.8330332946872104, 0.8629000715121729, 0.8568758038130094, 0.10844663986997327, 0.16410659032349761, 0.1428406382467794, 0.11155426581738159, 0.14029961525121382, 0.12804785124013174, 0.13354297731804032, 0.13449313850244393, 0.13948236357861266, 0.1500839213479629, 0.131136991152779, 0.13564026212737967, 0.1352025438425689, 0.11236677711435039, 0.13374677036896299, 0.17185843522458888, 0.11160878520126771, 0.09421442237421052, 0.9733737921330295, 0.9517515983816036, 0.9676212391820859, 0.974950671759648, 0.9931694204319821, 0.9618213461435641, 0.971390105106194, 0.9822481502216532, 0.9867086760984078, 0.8141753469623076, 0.8113496655886417, 0.7721872304038075, 0.488371548091621, 0.8427643406669056, 0.15231408889662235, 0.8210856869841912, 0.6164033293461466, 0.768977821868289, 0.922276578421832, 0.8829156354545944, 0.24255582141462306, 0.8946039692151673, 0.26966935353139565, 0.8516426395558645, 0.9101117770226289, 0.13881292094682884, 0.8564378806504014, 0.3043166426240117, 0.1819801978656268, 0.19291738553441318, 0.13024950176769567, 0.23550296152404349, 0.20326799328109924, 0.13319846777360056, 0.194693319344161, 0.19488412818955703, 0.18384776036377082, 0.2190648966466645, 0.14673751135085222, 0.19919649245256232, 0.1631012741264678, 0.14285422074305065, 0.21529376025479474, 0.25342826558298015, 0.21867328112061946, 0.06672701569530237, 0.23858969450317202, 0.22953897003357737, 0.07450389637925237, 0.1686321342563244, 0.08410450997378682, 0.04650641455362725, 0.3042137727951424, 0.0669791064884705, 0.21342609883630226, 0.19273505710573835, 0.2992528481524974, 0.07275714473083628, 0.2605756104458341, 0.15445490657495753, 0.4417907857134493, 0.2088310962108173, 0.16639364033116522, 0.17186418428449002, 0.06014849311214021, 0.06499844307927183, 0.10779393206463772, 0.1679730409892629, 0.17080940524726573, 0.22576472706156958, 0.23481723158521606, 0.09123739598271108, 0.4557996447145529, 0.04245548837604474, 0.2743632289236335, 0.33459795663836367, 0.425380715915464, 0.3833104100025515, 0.08458755942430796, 0.33934134545629047, 0.3516989924020789, 0.6583906936813698, 0.6747023897156245, 0.6782830910669552, 0.5553425043209907, 0.5703391701466267, 0.728610674766063, 0.5945901620918086, 0.7083742120872142, 0.658401337404912, 0.14762127574783157, 0.13270029728976063, 0.13216723326452207, 0.6943725327248875, 0.15079401279644222, 0.13516041669866385, 0.07816439553001697, 0.132409256528353, 0.15774285307809022, 0.22520743139832888, 0.20370952734762993, 0.22608461284379278, 0.3919952283966691, 0.17253127289227943, 0.16215175800319792, 0.19729361617497188, 0.2103948357671852, 0.22550094601679216, 0.3697743766982512, 0.472215187466408, 0.1582304084914109, 0.49421481054024996, 0.6071202758176706, 0.4178261706352673, 0.5468463022911432, 0.43535267778770415, 0.31014815366721227, 0.2975759231191393, 0.3825164285403504, 0.20612713306753072, 0.21185127407368343, 0.3966205382603777, 0.4407988578440819, 0.3092041741142574, 0.3345353517103493, 0.24116321625407156, 0.21561283402417486, 0.2040987277413372, 0.24469713278405503, 0.21584592004675318, 0.21542258640518674, 0.22988563361318637, 0.2522630852709228, 0.21135257482039982, 0.24518519487750434, 0.2207694466295208, 0.24046276163993596, 0.20707435549855568, 0.24962394147597256, 0.1844285823869264, 0.24704044520976243, 0.2187064524509963, 0.2024167782964098, 0.1928748462916816, 0.16588092832926704, 0.17160860773960052, 0.18628514408011465, 0.9222931893312737, 0.19933992086167618, 0.17712297372942976, 0.9273453514094799, 0.9031254954533513, 0.1667123267597912, 0.1436324154495483, 0.1671386211761785, 0.7171866494772802, 0.1670155670057185, 0.8978245884608546, 0.6389050880251148, 0.6233556721070557, 0.1549562410119122, 0.15558739039255143, 0.18280950342971103, 0.183164734238925, 0.18066241240251435, 0.1883684368637355, 0.30720635117676565, 0.19522230577989308, 0.216341484237091, 0.20259991923623943, 0.2092496086121408, 0.09159590401013062, 0.08784928366448208, 0.13714387142328321, 0.0857162991967736, 0.12553385726189137, 0.08828003090627101, 0.08337767645852823, 0.09784745921257021, 0.09094094258668994]}, "mutation_prompt": null}
{"id": "633c3f21-4fbb-430e-8452-34611c489239", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 52, "fitness": 0.38735119021585157, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.31.", "error": "", "parent_id": "33b6eef7-ca5e-49e4-9ebf-89dede26548f", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "8ca12833-9ec8-4ba5-85da-763641c18402", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            adaptive_swarm_size = max(5, int(self.swarm_size * (1 - self.evaluations / self.budget)))\n            for i in range(adaptive_swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(adaptive_swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(adaptive_swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Improved exploration by dynamically adjusting swarm size based on evaluations.", "configspace": "", "generation": 53, "fitness": 0.34679198113377213, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.29.", "error": "", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9096743669730738, 0.9122927853588796, 0.9124142389437873, 0.9260051315957843, 0.912139763784253, 0.9218918044064982, 0.9110908289705432, 0.9086268636495356, 0.9222231047929443, 0.8307264738526685, 0.8074593401536393, 0.8272791369149298, 0.8422347184508145, 0.8411988740238499, 0.8510070338968285, 0.8381077968317374, 0.851202035075131, 0.8014373150751384, 0.17381265541187152, 0.16858418735762914, 0.1721304652622201, 0.1511898718728828, 0.146627331003498, 0.15347084493391883, 0.15095793201642171, 0.13082936085999897, 0.13727424859757953, 0.1601402388762675, 0.11462566723396628, 0.10680162042774988, 0.12742597721358984, 0.1111397672033474, 0.14913804029373445, 0.14469414712648654, 0.13658600566868828, 0.09522239274883959, 0.9802373825462268, 0.981996039198448, 0.9761000627000732, 0.990056224920752, 0.9865003491808517, 0.9810431482149341, 0.9841853506455152, 0.9833858876846088, 0.9759407367237112, 0.4694012497589559, 0.8045790596514644, 0.5499006908020636, 0.514302682219085, 0.8260360770623556, 0.5517355050815647, 0.5492877330073969, 0.6327169341670855, 0.1084503115578982, 0.8756525835299148, 0.8401749554984559, 0.24002001421857944, 0.8748155783333253, 0.8472472452355564, 0.892069082623409, 0.22620005299475876, 0.3753922315083781, 0.8528781124650203, 0.20834046710764575, 0.1345334136301004, 0.16900612404821236, 0.19833471473713582, 0.4996214446040691, 0.13220249257314043, 0.5042452647021167, 0.1884270030551074, 0.2709606641426231, 0.21969895373725423, 0.117886092439208, 0.335047564230202, 0.27425964652966517, 0.15887651822244986, 0.23945337917421716, 0.20372235197382194, 0.16975067825375123, 0.1752263776336469, 0.06322776585840106, 0.08303849188953805, 0.1540767869726376, 0.04276638050317927, 0.02123413960062548, 0.057857425818051755, 0.03976878844077636, 0.016456408277142676, 0.08516776360520706, 0.21903642352995334, 0.17573716722538013, 0.15389861069766453, 0.09658808252056861, 0.118766440883731, 0.0814754082355359, 0.2152643881728853, 0.21729533422894287, 0.17821248593744765, 0.04774645962593982, 0.12410847878955178, 0.05254496963718125, 0.11085884060421047, 0.21649762299530584, 0.16918466004860488, 0.31250195253041846, 0.19996223277457925, 0.12057656056284127, 0.3449325608796012, 0.20672797563363166, 0.10424916023630504, 0.16023911673156255, 0.13677235941154609, 0.26058860205831513, 0.14021351161540951, 0.1705343164597063, 0.22792668642014235, 0.6070999361581535, 0.5827832975526762, 0.594338897488156, 0.5927887287978544, 0.6403022294473771, 0.6823946329539823, 0.52747992711698, 0.623354951475905, 0.6517912279188125, 0.12031470851090054, 0.1102353724115428, 0.12484877769383529, 0.1071276299668561, 0.13862884833168865, 0.13290172312877602, 0.13746992101581978, 0.13470458656584017, 0.1151482824884037, 0.26795843297080923, 0.18851323391740749, 0.18360928716964187, 0.23750164809070407, 0.1767125967530052, 0.16414766987608287, 0.3162466178547435, 0.1584179936814034, 0.14817876876623381, 0.3002610039039936, 0.30051967039740346, 0.39153133164316434, 0.34399767981874363, 0.42545190285904977, 0.3033738641271072, 0.38762918049282913, 0.41803552142361555, 0.22841857669042842, 0.2986299046362735, 0.29382231542610504, 0.12428879610599275, 0.2686669833215257, 0.21533043658354734, 0.3198966462387306, 0.22167294494306855, 0.26452253252906954, 0.3041304345386153, 0.22077057727034577, 0.22369369635864, 0.22473401536436965, 0.20450337961549703, 0.21138921804345212, 0.27398366116985906, 0.24456057630170402, 0.21148145711818522, 0.24514520135192241, 0.2024218502280547, 0.22133335577771673, 0.24853953544451846, 0.19365269086393888, 0.27781149327663957, 0.30622031189779697, 0.2172893625197082, 0.2219942024185073, 0.2419755348065884, 0.1806269333346403, 0.18725792981704348, 0.20004147104569758, 0.8841974369594767, 0.1874517193293902, 0.722128788469554, 0.16309401081536, 0.15009423596053018, 0.16633323588267668, 0.595560418453911, 0.20993237540379306, 0.3878291299999115, 0.9050932698007372, 0.16822524994797128, 0.21037301411414577, 0.39449597712150086, 0.15397822367097158, 0.8942386206598267, 0.22540690262145213, 0.19399565177943545, 0.18447244538019547, 0.2007531195514426, 0.21321643862355832, 0.19983954557014272, 0.20176645162286055, 0.21331012250263548, 0.17840004612204807, 0.0881655254846444, 0.09425092483143793, 0.08975488672545218, 0.09756396532027756, 0.08679631964221513, 0.07969143627428199, 0.09688214326608502, 0.08447702174608529, 0.09709800483707731]}, "mutation_prompt": null}
{"id": "b7a29349-5266-4b6b-86aa-9e691975f1f1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "79c3232a-dcf3-4cd9-b508-9309152afb6b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "f52929a6-cb10-4de8-bd24-44907a837a72", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "99943c88-1014-4ee5-b817-b6462588662f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "3c5f0c77-e269-4ff4-8305-1972f4d0d372", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "a51ba1b4-8891-4317-af2f-910de23937d7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "f8529ba8-3146-4a19-a8fc-eb8f5d2325b9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "c7b1c73f-2804-47b9-97c3-9a383f37bf35", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "7d987c3a-d4ee-49e4-b41d-86338e2fd8e4", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "fd4fd75a-ae52-4773-9e1e-36b886cd9754", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "f8eec0d8-ab68-4ac9-9e91-18fbd032d75c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "2fc5f727-1151-49f4-8ed6-10a42d58f6f8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "7a06c462-7cfc-4a37-9469-547a6842fc0e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            # Adaptive learning rate adjustment based on performance\n            improvement_rate = np.mean(personal_best_values) / self.best_global_value\n            self.cognitive_coef = max(0.5, self.cognitive_coef * (0.9 + 0.1 * improvement_rate))\n            self.social_coef = max(0.5, self.social_coef * (0.9 + 0.1 * (1 - improvement_rate)))\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive learning rates based on swarm performance to balance exploration and exploitation.", "configspace": "", "generation": 66, "fitness": 0.24854262698529114, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.28.", "error": "", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9035118164969762, 0.9164539001130126, 0.9119023287396779, 0.9054863262796884, 0.9015015701701602, 0.9202255346319971, 0.911866124318167, 0.9123712655015985, 0.9097524067616682, 0.04622770734323789, 0.05851272950441455, 0.06406789723171247, 0.007549575383366536, 9.999999999998899e-05, 9.999999999998899e-05, 0.1915788140736363, 0.01556708957938846, 9.999999999998899e-05, 0.15097673785851007, 0.7088180580288606, 0.11874013556745944, 0.10842040477588089, 0.09311274282996784, 0.07960971290205832, 0.21993627633281132, 0.19095063959001313, 0.12256941086320639, 0.10688185834134989, 0.13940854846175266, 0.1218216826261187, 0.06649385071856306, 0.07655666226963809, 0.08812400868477666, 0.08271263605542734, 0.08493964343090377, 0.07987584018433025, 0.9807929345810407, 0.9664146525518935, 0.9839779815454964, 0.9893604729906968, 0.9885596616315836, 0.975546668904812, 0.9823512085016729, 0.9853540384595725, 0.9763138282986212, 0.08003762821830895, 0.088278302402094, 0.07850460515187752, 0.055121833580332735, 0.025799617928089158, 0.1544324267187267, 0.5722507731271049, 0.08240565237496744, 0.05169791398668111, 0.30733361568075046, 0.6471371372731469, 0.6985518630003462, 0.20976592463788946, 0.22638323602705646, 0.3083996968053486, 0.1634420549930925, 0.15028668639860987, 0.1563666473908526, 0.057148367234563735, 0.09977042973174033, 0.08719233574665453, 0.130620515317026, 0.12465809916839576, 0.1406437927497336, 0.0923308257243971, 0.023607142536434367, 0.01717385717354647, 0.00960643609124634, 0.009804830378014828, 0.10041183857998204, 0.04690204902783901, 0.0722845506355888, 0.08407159981615264, 0.08632320693062523, 9.999999999998899e-05, 0.10843169143003184, 9.999999999998899e-05, 0.06511156025402198, 9.999999999998899e-05, 9.999999999998899e-05, 0.024464351773194948, 0.009151177389466247, 9.999999999998899e-05, 0.038202542078503265, 9.999999999998899e-05, 0.09195550484433657, 0.03580115581241117, 0.18240100727841213, 0.15776065036971465, 0.016799119597058265, 0.014354217598687824, 0.024119159519748745, 0.006469556308149382, 0.11072903034010706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01860810049131756, 9.999999999998899e-05, 0.027284686398634905, 0.2076128009942123, 0.06091529284193553, 0.051775419955897295, 0.18555719166922913, 0.08545632264609482, 0.23574359729554917, 0.22683100090683717, 0.09397029594904693, 0.7795793575789625, 0.6424349523008253, 0.6973504899625745, 0.6229607681765725, 0.6782737092106998, 0.6859982623485865, 0.6582529999849533, 0.4874563517586944, 0.6755231963681949, 0.16046094925827614, 0.09763983013227695, 0.1052209635529936, 0.10344582219531784, 0.07832489632968465, 0.08248729316225978, 0.13172189539203372, 0.11387818949154804, 0.054311216827380826, 0.15540058371622967, 0.20382002360270612, 0.20087789294261538, 0.17659799717485436, 0.2700315338234863, 0.15283541811183554, 0.20672111525974102, 0.25717793767915087, 0.23125466477975554, 0.3271909318327053, 0.28305018130557824, 0.28998589410824116, 0.530542332224917, 0.3481956640329814, 0.22078492634325564, 0.4265990984836183, 0.5828413211918353, 0.6100741661917148, 0.16030987571598487, 0.15881545789025353, 0.28300271994510784, 0.19376807458184953, 0.24843306875962357, 0.17473375378146394, 0.2003608431365136, 0.2059501318414484, 0.41377579353223204, 0.2124409666888214, 0.2189314732823625, 0.21583049054367143, 0.19197145383804715, 0.21422987245946556, 0.22308978854089379, 0.2104771745452808, 0.2038698516175076, 0.22604661269320692, 0.24362997399858655, 0.19671594822361116, 0.4474581607094976, 0.17849705042622732, 0.15060478909733266, 0.16905863483852224, 0.1740647807065503, 0.15470173204658588, 0.17909670519486176, 0.26149761378494063, 0.18372891831241656, 0.18619491483876727, 0.16310494108640172, 0.1734069010492003, 0.1276162366266611, 0.3302969911703124, 0.5054957273023091, 0.9010233677289231, 0.16763272115120254, 0.2080702508513097, 0.20262915262115233, 0.14926312248855333, 0.7957094461044736, 0.1673130563618499, 0.7913245664506001, 0.15612123375541254, 0.24968733884237282, 0.19481317698475353, 0.18924252633003757, 0.20260225794451914, 0.17673633620880336, 0.19774781707495814, 0.16227860254597892, 0.21875303547603941, 0.19494499183166947, 0.19898724538993662, 0.07073578746464859, 0.085453744301076, 0.08768220864428444, 0.08099729487178231, 0.06649859272921754, 0.0712493557494609, 0.07753601864029191, 0.06824678318506705, 0.07627083805539481]}, "mutation_prompt": null}
{"id": "9bf548a5-1cef-4479-97d1-dfa5732c21da", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "53fef0ce-3fd9-4792-88e4-8fc899c107c9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n        self.stagnation_counter = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n        last_best_value = np.inf\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Check for stagnation\n            if self.best_global_value == last_best_value:\n                self.stagnation_counter += 1\n            else:\n                self.stagnation_counter = 0\n            last_best_value = self.best_global_value\n\n            # Adaptive random reinitialization for stagnation\n            if self.stagnation_counter > self.swarm_size:\n                indices = np.random.choice(self.swarm_size, self.swarm_size // 2, replace=False)\n                positions[indices] = np.random.uniform(self.lower_bound, self.upper_bound, (len(indices), self.dim))\n                self.stagnation_counter = 0\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive inertia weights and improved diversity using adaptive random reinitialization for stagnation.", "configspace": "", "generation": 68, "fitness": 0.3843201153134125, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.30.", "error": "", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.217262344673407, 0.49427699627425115, 0.4683586260268786, 0.49302460764886824, 0.14509826652044666, 0.1627096778383409, 0.46315120264268805, 0.1564458516385404, 0.7060609500904103, 0.13303527119795633, 0.12247116328634133, 0.16582848685783325, 0.12614126323508335, 0.12959515774359098, 0.12372628993251023, 0.14298410612140666, 0.09916656139817037, 0.11229769246962096, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.7522256026966979, 0.8389065522845623, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.8159756858970832, 0.8046268077655702, 0.3706280224597708, 0.8790067559325772, 0.8915204313832543, 0.870027689824126, 0.8233255587284904, 0.8042157956392015, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13216775179087747, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.1334256621861818, 0.13164592616345505, 0.12349970601032634, 0.13361097119070742, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.48289665959253003, 0.13441676594549468, 0.15055465732396311, 9.999999999998899e-05, 0.16807845518147257, 0.0817508834746371, 0.03142844282772561, 0.10650937954871209, 0.07428652731792396, 0.04784459411072561, 0.0957729887429647, 0.19194922053244445, 0.20828139162999848, 0.20069372615708558, 0.15828175726403426, 0.17215010551068077, 0.16258121832135763, 0.136479745875265, 0.18451928739599532, 0.2754384400982651, 0.3115250636466723, 0.06800037696570616, 0.10645187166488035, 0.07788158029513581, 0.09339426343059054, 0.21411119102096676, 0.28247512520692186, 0.16907364197728725, 0.10395053491428552, 0.198145345534408, 0.29280861739923647, 0.2488977810193279, 0.3047148175876224, 0.35042998196532615, 0.20647010300297663, 0.39445862420546707, 0.16514250502265826, 0.28097235340612003, 0.2981386931150247, 0.6017395521208743, 0.5944386895694846, 0.5515034465996662, 0.676260348773264, 0.5954384159709039, 0.6157178259805369, 0.7248397763625323, 0.651624060681672, 0.5878515264674704, 0.13986336708232738, 0.11297438899449042, 0.0896957312716411, 0.12016097581821872, 0.13898860067311947, 0.10803574249940429, 0.11927836515941448, 0.10417915179686821, 0.09630575264767027, 0.2246698035668473, 0.2045524342925915, 0.1783425960046081, 0.19335817902710573, 0.1867661593794322, 0.2431040682490131, 0.17513815862681348, 0.16697409597081603, 0.18525184421633833, 0.45427909203021044, 0.47915137784426787, 0.30773793160037677, 0.42916478996183816, 0.4376600523997546, 0.45275338206276206, 0.4312605734569315, 0.5922330271593406, 0.4598291448288565, 0.31032487044191526, 0.3706582819606249, 0.2542415652231145, 0.25541989860197056, 0.41028391504406336, 0.31565135520048193, 0.21837606126325437, 0.33969307996614884, 0.2368448189871737, 0.24375463881481196, 0.2079838061664322, 0.21129211267036407, 0.18844914380437683, 0.2099748460345212, 0.18360855642431506, 0.2439617548747085, 0.2008455523426096, 0.20299050477003688, 0.7250040603682546, 0.2480998349925383, 0.2341465208932123, 0.2101000505596492, 0.1940125151714832, 0.23488113088764995, 0.22853457735449412, 0.18399959047234238, 0.18848502019708546, 0.8947223266896206, 0.1687723503331443, 0.17097077591506826, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.184861074871991, 0.869483073996267, 0.15363711364600896, 0.2081667087954081, 0.7719985651795285, 0.20602571087053945, 0.7995142335943147, 0.21155995483219725, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.2049056447146419, 0.1868452105435393, 0.20234162942153266, 0.19066220220064944, 0.1948578616203056, 0.20182331327644543, 0.1954849999183128, 0.22465629429959022, 0.1937022562850047, 0.08333226600976762, 0.0899640646344122, 0.08024229205965583, 0.11739462502405718, 0.0915222236147527, 0.08018853876554022, 0.12060903012249213, 0.07622205716547947, 0.07637116026154311]}, "mutation_prompt": null}
{"id": "ba0c6e93-fba9-4b01-a231-8f0390708879", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.3 * (self.evaluations / self.budget)) # Adjusted damping rate\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive inertia damping for improved convergence speed and precision.", "configspace": "", "generation": 69, "fitness": 0.38639313789784213, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.30.", "error": "", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9136786775537631, 0.9188602924617792, 0.9085616827987717, 0.9177293602482997, 0.9151978147011177, 0.9243071363483425, 0.9147816830715512, 0.9178798764881495, 0.916481337120745, 0.8530467822399512, 0.043127344775190424, 0.8449944466232477, 0.845702984081511, 0.8562062513175599, 0.8644394835729081, 0.8412489000081929, 0.836979321780088, 0.8467435311051617, 0.16752410518801386, 0.14924134516460852, 0.5534731706280158, 0.6950106558545945, 0.7472347415544843, 0.17411680857365264, 0.5639286739657546, 0.14460450380543222, 0.16433097367456762, 0.1766971117677547, 0.16941744664828584, 0.133897004141881, 0.1460777679313613, 0.10655501144379542, 0.12815830409451845, 0.15465023749707507, 0.1349108721906398, 0.1472979561790747, 0.965886607932563, 0.9739809737034181, 0.9774357549561817, 0.9893609445543954, 0.9862975087083419, 0.977229920858583, 0.9823635397240195, 0.9846592686551024, 0.9762244599559411, 0.8344966576156626, 0.8324707047421138, 0.8357021715461268, 0.7449424598939026, 0.7717579612439565, 0.8235164032626683, 0.7398148298224186, 0.8250677766974187, 0.7622352170611681, 0.8439531557475772, 0.23775736782054313, 0.22555990476887955, 0.857391792237731, 0.21762607049247396, 0.3668900874335983, 0.840615979956027, 0.24536004712857684, 0.8621351932644056, 0.2909873373925561, 0.24673293778536887, 0.4973829929886734, 0.1335415490347578, 0.35494835259067337, 0.2819136725886854, 0.21777375108503683, 0.2319374675808722, 0.21412816028774118, 0.213978590291787, 0.12351139336829531, 0.23077385205545653, 0.21547171114082586, 0.22991771779468828, 0.3128913304114128, 0.25227088384092766, 0.13450566367275407, 0.2976288357038246, 0.2024516340300765, 0.08655541259002852, 0.17574870299590128, 0.06258763220761299, 0.134531053412694, 0.1727815920857012, 0.13879147233519928, 0.048289307237396994, 0.016704078326339022, 0.20601383007817908, 0.17859724709707592, 0.28998721435798713, 0.14729761839391853, 0.07314660533599904, 0.12681785000022883, 0.2486089093279601, 0.1153829168230579, 0.14100663711859596, 0.05145294601697825, 0.09741348959308271, 0.07622063097272025, 0.10267084492290146, 0.15876301742151622, 0.3304525686134685, 0.1632309171698778, 0.10204717176562861, 0.31037229479220296, 0.22236472864448065, 0.29084982179880314, 0.2599898787233623, 0.2934068506284573, 0.33096182853614686, 0.3473386363838181, 0.38597666207902404, 0.2515327996503607, 0.2642527046538603, 0.6771503601859958, 0.6302209411762654, 0.7546368762163254, 0.6403124964905218, 0.5656254378495813, 0.6846160003430906, 0.7377157879991392, 0.7306079890034541, 0.6358270502623369, 0.10442485286609937, 0.13928660371632173, 0.08885864729147797, 0.17803673200651426, 0.14558271238532305, 0.14785172398057533, 0.06982800637842701, 0.11724953635429813, 0.12958272310733265, 0.20011213518215876, 0.1642649604536498, 0.1528420419395412, 0.18461219671762819, 0.19271086700131657, 0.2683893567085466, 0.2166846173918482, 0.21363510384496853, 0.13874000199162784, 0.49156288916854773, 0.7349600946292882, 0.4578433588133497, 0.4840193719632456, 0.4754279014450158, 0.32578118933927047, 0.21070933906990796, 0.5721867040611355, 0.5338760965614453, 0.27102058971741516, 0.37984247799866366, 0.3611328090096464, 0.22840299024483124, 0.35157474949477396, 0.33719470576012367, 0.3476207033053884, 0.1555137066803456, 0.2306795882018039, 0.22333797512911147, 0.18384467603183652, 0.34184984540223873, 0.23810160364711686, 0.22226162949344574, 0.22590011816769673, 0.21706022720654827, 0.21656485788108926, 0.17884461424461373, 0.22041558015715768, 0.24722134849017208, 0.2255841473918534, 0.21977740205198137, 0.7837720446571723, 0.19845921579017067, 0.22347108859589693, 0.20680856263835767, 0.19877256692182066, 0.8951459679394704, 0.1683980508682369, 0.17176146053869457, 0.8398561186304518, 0.18848909655093327, 0.8315837548146677, 0.1560361095172046, 0.1835581888510054, 0.9086119430421101, 0.799956446963194, 0.2083694247777127, 0.7895975954929566, 0.20540283723437625, 0.7555999637963902, 0.20304571503741886, 0.6111234080940068, 0.15659843741223634, 0.7722110995116902, 0.18290653538248314, 0.22797606997769426, 0.19123718103468335, 0.19837910143416615, 0.20003493364918978, 0.21526480592551867, 0.19721392942158833, 0.17919733739678523, 0.23100232114516095, 0.08946417938913986, 0.11727103519917059, 0.0826561131900384, 0.09396842650426518, 0.08533356073939702, 0.10770641440192352, 0.09964372724473247, 0.09186268411025522, 0.09093122038950019]}, "mutation_prompt": null}
{"id": "77a7c235-d14f-4186-9318-b5808d6a0d6d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "a2c726bb-6d5a-4e4c-8052-003733b322fe", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "8816791f-1ee6-4d5d-b7dc-44f6eb72c7ba", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "4af6b6c0-2ee7-4387-8dc5-5e7234d1196a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.6 * (self.evaluations / self.budget))  # Adjusted to 0.6\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            dynamic_mutation_factor = 0.5 + 0.4 * (1 - (self.evaluations / self.budget))  # Adjusted to 0.4\n            dynamic_recombination_rate = 0.7 + 0.3 * (self.evaluations / self.budget)  # Adjusted to 0.3\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Improved HybridPSODE with adaptive inertia and dynamic parameters for enhanced exploration and exploitation.", "configspace": "", "generation": 73, "fitness": 0.37048904145745837, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.29.", "error": "", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9053346988925839, 0.9133179620431694, 0.9138468413229405, 0.9230854309217319, 0.9184585346306365, 0.9142906283201315, 0.9152660366026717, 0.9145744388720832, 0.914169874442606, 0.8511835974284574, 0.04962215709803386, 0.8445174202447113, 0.8481377558532649, 0.8487348356566857, 0.8408184624354893, 0.7479299368550381, 0.8546554510239808, 0.8473795765606007, 0.16458354033237632, 0.12958104765098521, 0.17411456262134195, 0.1777384459173914, 0.1801922309316234, 0.15236150115959357, 0.15207475422360772, 0.17316942921901524, 0.16457283544573542, 0.16651923621267672, 0.11379394508141905, 0.13701356503377027, 0.15679489665616397, 0.1127668856517603, 0.11830723364117768, 0.12113682328059472, 0.14786405068598873, 0.13416186843795308, 0.97058358276795, 0.976678272128846, 0.98398756072662, 0.9765501619164885, 0.9876139632502375, 0.975878311370639, 0.9853379027003843, 0.9856057489444252, 0.982294824775547, 0.8093074530249644, 0.8313268531584403, 0.8324052989208555, 0.813074661533649, 0.8105585053949829, 0.819548886386258, 0.825976417427935, 0.8360910955674776, 0.8144519572272809, 0.3729527601989474, 0.3842184301043178, 0.8438613299224994, 0.8544500067371366, 0.18932512196886564, 0.8615740808012972, 0.34297584196520836, 0.8502041943446681, 0.8905276106632751, 0.2204843640886167, 0.2033115903558631, 0.23438490982101645, 0.1342054328735781, 0.22091785041658318, 0.1615883377466989, 0.20414108112311402, 0.16753245702507935, 0.3970993465431901, 0.17192261351051497, 0.08913307933037484, 0.13429946663976733, 0.29371275807677344, 0.268758023464046, 0.15105908450379468, 0.13847818910764131, 0.14768253507295448, 0.1964454457716559, 0.22308706879530804, 0.12386112939189986, 0.26244331445591296, 0.26461930126870903, 0.14226270478755487, 0.0007051012561123393, 0.07397876971667261, 0.06774424675834634, 0.023208845176932336, 0.20180722838787013, 0.31228459876557413, 0.2944638908299205, 0.272210985752276, 0.07128651639345984, 0.15731530290446405, 0.25513351009342455, 0.1603166651216621, 0.35296038622158443, 0.06787321443547167, 0.06333229931946394, 0.12918741440239323, 0.0818951740134507, 0.1730012508481955, 0.25880981714915896, 0.08525176383792354, 0.3140706470710374, 0.17451341688825472, 0.33151559773500605, 0.31980861703360575, 0.2770413095040992, 0.4160762159691016, 0.3275963255876071, 0.21451952778419292, 0.4233423534093945, 0.34070610186225214, 0.38730599948826916, 0.6682333899714019, 0.5518304046473481, 0.6780741756534168, 0.7843545994667995, 0.6840417819941664, 0.5858085700265387, 0.5686227813448228, 0.6582080047698753, 0.5982852858499896, 0.11780889936912642, 0.08513876978431123, 0.08462442573845341, 0.11428445440073143, 0.12674482257634567, 0.13900661021121907, 0.11227341720789585, 0.13598280819290975, 0.1180901432708763, 0.19398115053202614, 0.31175198494762857, 0.21118415121465184, 0.1826204300255284, 0.16042853927627276, 0.1931311167187736, 0.1644668510605638, 0.17630388499037675, 0.26334929005384045, 0.3886985851701191, 0.25222488871836857, 0.4951685663480936, 0.47999312772957703, 0.6081231771398204, 0.4515056688216993, 0.51146984437716, 0.5266669178627501, 0.49758223718668937, 0.36219379179596056, 0.32641926284282397, 0.39667774541796963, 0.29844680019707726, 0.21312432698977868, 0.2541242158819842, 0.3105291803681248, 0.31758331225197267, 0.3919276843071595, 0.2671157062651094, 0.21207883395879357, 0.24155906331265442, 0.2276855472787156, 0.24208641403897968, 0.24280288198000877, 0.24157871040859002, 0.20728973176924415, 0.22421493780513913, 0.7854470327085387, 0.2158426977817387, 0.22401200600339555, 0.2343977586825, 0.8294295844951507, 0.1848980486314915, 0.24248136409574272, 0.23971180933808012, 0.20522932113157566, 0.20626974621017646, 0.17131402458656286, 0.17225803740402612, 0.19394296593248506, 0.19727370616997175, 0.8839229966692278, 0.8861266232266782, 0.765878300967217, 0.16736889231019503, 0.467440001115335, 0.28932843492073035, 0.20792660048905243, 0.20721947722074674, 0.1261695770369854, 0.20702794636276745, 0.27951739050937974, 0.15661347203774034, 0.15447982830590212, 0.2159105767777616, 0.18691398880082188, 0.1872945728994302, 0.2093557507098044, 0.20800578755601373, 0.22398435360355873, 0.19813174957823343, 0.20576041279986923, 0.20552050808079436, 0.09697401858140853, 0.09263644278093275, 0.08396305235640089, 0.08427927486636122, 0.08939546809142573, 0.09079251687952206, 0.08216535818716475, 0.08299309333449978, 0.09240197785833881]}, "mutation_prompt": null}
{"id": "5858980e-0984-4329-9324-f49f4effa529", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "af5bcfe4-b053-436b-b9d8-98f6fabdc5ab", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "ed8e5854-d0c4-42ce-a4c5-07f9dd625c42", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "6a26cd6d-e444-4554-b8f0-1742e4098717", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, int(1.5 * self.dim))  # Modified swarm size strategy\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            adaptive_inertia_weight = 0.9 - 0.4 * np.sin((np.pi * self.evaluations) / (2 * self.budget))  # New inertia weight modulation\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = adaptive_inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Improved HybridPSODE with adaptive swarm size and dynamic inertia weight modulation.", "configspace": "", "generation": 77, "fitness": 0.3198499066503638, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.29.", "error": "", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9341949838811765, 0.9376807732522018, 0.9453459881508924, 0.9377861558695688, 0.9385184848671014, 0.9425306937736422, 0.937796637971191, 0.9466252009218953, 0.9323488049317791, 0.8514750800209313, 0.9028688452877365, 0.8405543231818968, 0.8909159001947546, 0.891614310606602, 0.7122528630368368, 0.8859149414214571, 0.8917756557614388, 0.8705524071480492, 0.14336770554158396, 0.7439729159161641, 0.15152022845989888, 0.18129983752216616, 0.18536810881436894, 0.11541260848701018, 0.1110703105412284, 0.18356781786823362, 0.1498304580470955, 0.12726371425121474, 0.11577470779108279, 0.11770697520876894, 0.14088231580900012, 0.14438138846289517, 0.1427207821363139, 0.12834543504999196, 0.17583998679676893, 0.12471104260514643, 0.9848978122897477, 0.9858494323854418, 0.9823455328687645, 0.9744643473253181, 0.9926510455025014, 0.9815574414705287, 0.9805309461914145, 0.9882243866384451, 0.9764633519134206, 0.23297509818168205, 0.4059421902216189, 0.26262108892104696, 0.4474569106747688, 0.5586873287306107, 0.1777329442688308, 0.11068222189504906, 0.2654130181281462, 0.7645703033603917, 0.9107522234916892, 0.24776272320999382, 0.2273389035402299, 0.19306351266808064, 0.21488813569190446, 0.9059257655896803, 0.9029516756474841, 0.15792808824267812, 0.22674416417901921, 0.22713395019877725, 0.17019130761850843, 0.35114696756707076, 0.2128810937886143, 0.1309317245261169, 0.14757668264446344, 0.13079861099330792, 0.137680007632066, 0.17556016474111225, 0.18938560851144137, 0.13151502710020868, 0.1550931472567474, 0.15765148001985785, 0.23181206373805407, 0.15104784049355835, 0.1489941466279221, 0.3709929839624049, 0.12935192463860568, 0.11896359675238055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007017109622720841, 0.018519075572195343, 0.04727288814570507, 0.11790380625773156, 0.13398244757828215, 0.291023867288018, 0.08433573862962551, 0.1394812533847124, 0.19047896115636487, 0.06214178014591143, 0.07683336831233156, 0.053355674996167, 0.1540019107478796, 0.08890721676475366, 0.21404790565738863, 0.05524210913621663, 0.08382978858547707, 0.08442745013868136, 0.1761989970555332, 0.19832058066240132, 0.2710930132094571, 0.10810888897581428, 0.3396646745619408, 0.04567289607711578, 0.04448611239323241, 0.3912796951277576, 0.03974640790055095, 0.25026597561090513, 0.059614860006767634, 0.06109136222835254, 0.31474568041029427, 0.571984310388116, 0.47829610369813325, 0.45681322188141926, 0.6501391962294675, 0.6911414186348515, 0.6103945082537238, 0.5397036268087901, 0.5894548215054828, 0.5696435247605142, 0.0851415141662395, 0.10695287799890052, 0.10663548480809126, 0.15441690837101674, 0.2733258453064158, 0.15046686034034373, 0.09787630751710896, 0.18954120161179255, 0.0946647135450095, 0.18794692685950565, 0.2584954256595685, 0.19405253166264014, 0.1611921091687626, 0.19013589341553172, 0.23815863253730163, 0.28930672245855127, 0.19526253915363467, 0.18790312565178025, 0.5549216322281446, 0.5295877003879266, 0.3539424519947436, 0.3878812822162374, 0.17963162098057184, 0.3113632874257447, 0.4632272961957611, 0.40041822972871255, 0.28706779096418744, 0.4898990898883585, 0.2943658697241306, 0.32451076921283606, 0.2528383064530699, 0.20568013440570854, 0.25469546783390495, 0.3223216628515574, 0.3015716383371688, 0.09290163179787037, 0.2134839668740781, 0.19096732511493342, 0.19729735257527592, 0.2253590379957413, 0.24281846766514426, 0.22673265128515974, 0.20373271096354806, 0.2246646802891954, 0.22321063944030928, 0.24659396139298306, 0.20821045787028536, 0.1893264969197792, 0.2096010404029941, 0.22271323235828644, 0.2002594745317181, 0.1875916404534277, 0.24824324653966856, 0.21868575278870261, 0.17222698969274008, 0.19981014623720073, 0.8983710923731114, 0.1708098226710073, 0.20062004092362573, 0.17243185285495222, 0.21045234525299827, 0.114972385768487, 0.9448940889841795, 0.19541973791925316, 0.3222414238476303, 0.2121557768462814, 0.11131817885944562, 0.2085443410660076, 0.6360040022564272, 0.1129306251724067, 0.1547860963242822, 0.10466739693619787, 0.20262509381837046, 0.19048783148744652, 0.2026364566743054, 0.19082675273486316, 0.18616059325889012, 0.19397740249910744, 0.18956074275627244, 0.18921052672965166, 0.20892873704775794, 0.09543835212808172, 0.09527646167666937, 0.07521409200139206, 0.0897590103756083, 0.11396117273442563, 0.09595424918557893, 0.11397991645997751, 0.09323877053149132, 0.10591417194382102]}, "mutation_prompt": null}
{"id": "fb4a20c1-0e9a-4b03-9f1b-dc15637da926", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "1090cd26-b5e3-458a-9fbb-4bbda77a948b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "37187ef7-a47d-42b7-a068-9a57369a8f59", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            if self.evaluations % (self.budget // 10) == 0:\n                random_idx = np.random.randint(0, self.swarm_size)\n                positions[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with improved diversity through random injections and adaptive learning rates.", "configspace": "", "generation": 80, "fitness": 0.38735119021585157, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.31.", "error": "", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "23ef4bcf-c3a0-4ada-a083-1746d2fea6e7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                \n                stochastic_scale = np.random.uniform(0.8, 1.2)  # Stochastic scaling factor\n                velocities[i] = (inertia + cognitive + social) * stochastic_scale\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with improved diversity by incorporating stochastic velocity scaling.", "configspace": "", "generation": 81, "fitness": 0.37734057386941305, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.30.", "error": "", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9205501723541842, 0.9211737468547538, 0.9161057142811684, 0.9136609505575125, 0.91830753923465, 0.9238536513099826, 0.920560424940954, 0.9237919360483366, 0.9258244604835496, 0.8540807204012266, 0.8148803092414318, 0.8525932071480951, 0.8465784954506314, 0.8603685195262503, 0.8654779901868391, 0.8595042989648494, 0.8558912269614585, 0.8468280291146965, 0.1448907258639247, 0.1743913319364927, 0.17481023578969557, 0.10853995589266319, 0.1828340796015393, 0.15173785886873736, 0.16900656082009302, 0.181413853043339, 0.15407277874718872, 0.14978349610605368, 0.17682971718814056, 0.13445685477361635, 0.11584714259032336, 0.17295144697470277, 0.1322393513215513, 0.14481603869698534, 0.1470231074141659, 0.15555999265204823, 0.9748553141686066, 0.9626148791356569, 0.9829913459851021, 0.9824340299195268, 0.986120978701824, 0.9749348966503054, 0.9782610268725974, 0.9800835073891351, 0.9970582087703105, 0.8183824136865115, 0.8327014343997887, 0.8367189857144531, 0.8326713432594735, 0.8224978148467017, 0.8288675542856387, 0.8150935549667799, 0.2714965274156266, 0.753766642782105, 0.3851207779364463, 0.31097637618659624, 0.8489714332008121, 0.8741573789567872, 0.3536004430477083, 0.8987485899342766, 0.809530184247424, 0.34485505326822397, 0.8736037060012842, 0.16739052283736056, 0.18391633369333926, 0.13141333315834325, 0.18855227783802564, 0.1819194110139709, 0.13265445236100526, 0.2827023077559797, 0.13076419897314917, 0.16530375272739983, 0.20658604512862377, 0.1256446731109261, 0.24453748062446257, 0.20716075109811938, 0.21895408633313485, 0.19284444294443337, 0.4079202616480512, 0.20192082998351346, 0.21886010033871284, 0.08618763975982835, 0.001147043765007738, 0.009905895355339478, 0.13123976481684896, 0.06226268317742034, 0.004368261937571671, 0.11516656170570982, 0.09377170255674716, 0.2630809934502034, 0.2843530138622816, 0.21507140135027825, 0.20880832754512535, 0.30800501754584264, 0.30109567041286023, 0.20079593355321135, 0.41703774051606335, 0.22089341128289264, 0.16388644785591877, 0.09941885948877549, 0.12316792186264025, 0.06675741946540426, 0.42536856439340376, 0.0986315873230198, 0.08709731177945867, 0.19645845677777207, 0.10556937563661317, 0.10793535855094594, 0.24966314560329095, 0.27379531014816505, 0.2620597546623754, 0.26333456337774186, 0.2889734227210383, 0.16378182800390118, 0.3837067243954627, 0.32976971530073584, 0.12344584313948725, 0.7121638565324098, 0.7493446887394396, 0.5918062701646566, 0.7591545152448218, 0.617573880836954, 0.6151343120207031, 0.6240182140426832, 0.63517898834959, 0.6723434363732872, 0.11409147031772227, 0.11599691617242991, 0.16940521461412938, 0.11995051522288491, 0.1066861513927253, 0.11709522190871124, 0.18085456773340347, 0.13596029588367564, 0.1444028747763958, 0.16958780470257895, 0.23572757211842088, 0.21755330173824527, 0.22148673923556184, 0.1616439081562301, 0.16722221437796092, 0.14963270524943095, 0.2692936295655016, 0.28138773123499317, 0.4634860714915441, 0.4388922807427621, 0.4953093233875021, 0.6237516066624585, 0.49565944985409127, 0.3979195985911872, 0.4304123247927223, 0.2891949960275888, 0.4738394771126542, 0.2944428657449172, 0.3050908276272336, 0.29980240622684595, 0.22845838570358223, 0.34383219301936474, 0.3404938408826028, 0.39908131411794434, 0.23588027714475623, 0.36297871111820723, 0.20677742586178982, 0.2084008181144582, 0.2615998181864756, 0.21339106013518083, 0.19563360755455417, 0.22947107102408115, 0.21730799540976553, 0.27666559045360883, 0.24154261234370977, 0.2366304371675173, 0.24469533207076666, 0.1895035019920681, 0.7636460098101658, 0.20236557629952912, 0.24185295627159353, 0.21381110800342706, 0.23981964354178154, 0.8088697346888523, 0.17029699490381156, 0.17007292263026375, 0.1866071564355658, 0.9177715763214954, 0.17820741407709262, 0.7839372728495336, 0.8879718767240055, 0.8607458687026703, 0.8845094773768376, 0.20662054354033754, 0.20454974841584228, 0.36806581714014, 0.16800690757513292, 0.2042521648784753, 0.2807709906627327, 0.4601568822879989, 0.1555085960074052, 0.20872042511620903, 0.2010097509216101, 0.2025779928581657, 0.1847868512741685, 0.19259623437784967, 0.18813594801897504, 0.18694260398205176, 0.2101109935974954, 0.19722272337158198, 0.19658906769403095, 0.09200688962019599, 0.10002428869239499, 0.09005519874363255, 0.10128612905629308, 0.09717592020664945, 0.14941657097178707, 0.09643421501249616, 0.08838649285934297, 0.1014179452866445]}, "mutation_prompt": null}
{"id": "ab8a2576-4b7b-4fc6-ba38-97b23f069ed6", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "ca4bbd76-8ded-4db0-9d39-e0be2ad7807d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "cdda21a2-d3ef-4505-8547-a4b31c8b49ba", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "d1fdf444-67bc-48c6-b57a-d413c29d287a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "c1a26fc3-679d-467f-809c-1f10d78022e9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "823a2718-d71f-4035-97de-89017dccd53a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            if self.evaluations % (self.budget // 10) == 0:  # Adjust swarm size adaptively\n                self.swarm_size = max(5, int(self.swarm_size * 0.9))\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Advanced HybridPSODE with adaptive swarm-size adjustment for improved convergence.", "configspace": "", "generation": 87, "fitness": 0.38735119021585157, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.31.", "error": "", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "aaf10e91-411d-4e0f-ad3f-1c628170bcba", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "cba80923-d6dc-432d-9682-03fee4aaca0a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 - (0.5 * (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = inertia + cognitive + social\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic adaptation of mutation factor and recombination rate\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic mutation factor and recombination rate to improve exploration.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9148760120547224, 0.9136929654740136, 0.9106419179813756, 0.9117075699253576, 0.9131092738377303, 0.9227774008975381, 0.9223520683090569, 0.9156039257496373, 0.9172913716691147, 0.8442391400367204, 0.859412429741465, 0.856569744139149, 0.8452513662391923, 0.8586028790220794, 0.8663409862122273, 0.8462145958446368, 0.8497285110158657, 0.8688353364095602, 0.1746840669034322, 0.7166801631503148, 0.17851948232045867, 0.18700482204733526, 0.13210744503935512, 0.17521451014893352, 0.6025204085824154, 0.14321641159305343, 0.7060609500904103, 0.12359624915539458, 0.13170110614856745, 0.14958211972663904, 0.11446373735577109, 0.1147079993816571, 0.11022487155756844, 0.1378106781929781, 0.14578022910112354, 0.12313014262693156, 0.9704265115804733, 0.9739841135254135, 0.9774474576218343, 0.9893608297169574, 0.9862989316108359, 0.9772262424147221, 0.9823624916952527, 0.9846581652614173, 0.9762195069499371, 0.8331048809682116, 0.8391314518660542, 0.8326359758190438, 0.6139381072417871, 0.8118693088386701, 0.8173346769530638, 0.779810956205155, 0.6499829303601886, 0.8405389904529794, 0.2263051724885723, 0.8236502717984366, 0.8455381061528557, 0.891562371098238, 0.8103927617117058, 0.8591515334590419, 0.8656053580232016, 0.8578690848292329, 0.8882916538460846, 0.18744827344550896, 0.20716732847031072, 0.13111899896523282, 0.1492639808178725, 0.13221366285998393, 0.22023804953418746, 0.2331027556343549, 0.16039092247470232, 0.13342567081071943, 0.13164592616345505, 0.12349970601032634, 0.15912539592329555, 0.17305408082512352, 0.1695374009650371, 0.24899634726643216, 0.18368291133140358, 0.13441676594549468, 0.15055465732396311, 0.042428994204655845, 0.16238988067233895, 0.11709017815083189, 0.0266536032945347, 0.1356846647569624, 0.0772174691626164, 0.07843245410013533, 0.09189758006323989, 0.17668189817018976, 0.13929466835522653, 0.1857305572297291, 0.10197262773979843, 0.303325584970526, 0.13749530150783396, 0.10080908924725396, 0.16328051689799306, 0.21822676907605998, 0.38887992797868576, 0.06416220100382652, 0.10049464498869243, 0.08498437599667819, 0.09339426343059054, 0.240514349494533, 0.29267397822548413, 0.17714033463406664, 0.10395146758788232, 0.25902831320689457, 0.4247591075018782, 0.2198231112608019, 0.2319752741173483, 0.26090474215859727, 0.3596690410451163, 0.4307345154474995, 0.18742037620411134, 0.3171288050624864, 0.39041696383222724, 0.6024293658005038, 0.6554171809260728, 0.5515034465996662, 0.6878178326328785, 0.5969597870004507, 0.6157178259805369, 0.6681115264630868, 0.6945678010993009, 0.5613317763146098, 0.1397967629779192, 0.15074242777773128, 0.11960666281072463, 0.1499021132323073, 0.12961559089568397, 0.1159515697052661, 0.06818190645058309, 0.10417915179686821, 0.10130320793231018, 0.17621779656295333, 0.1585312623706988, 0.17281035588593952, 0.1908880793398301, 0.12550581231168034, 0.16810439062282878, 0.19316800514466936, 0.22287638969165835, 0.17762914023192056, 0.4189202341358471, 0.46489622164182987, 0.3673153634267996, 0.4349570057589722, 0.7483837573530572, 0.349812507986648, 0.20902750347832244, 0.5922382844531885, 0.5902710885616945, 0.41039990075528254, 0.2988724874393661, 0.29021489897222363, 0.31489779355534886, 0.26118380931428553, 0.44166681098639127, 0.27173348101043093, 0.4498410195270738, 0.2385961395224283, 0.24783013254547936, 0.2070178326455584, 0.2111002318455819, 0.20554280829373361, 0.23176088866981026, 0.24418502775351403, 0.24143736196962595, 0.2074030511952587, 0.21304838754980016, 0.7250040603682546, 0.2480998349925383, 0.24353386739349492, 0.2167558776712426, 0.19362665851687044, 0.20800154079826705, 0.2222365518204712, 0.7867163828689998, 0.2064603959651221, 0.8947223266896206, 0.1687723503331443, 0.17175577756281124, 0.19732867706655688, 0.1883735743871755, 0.8817399955016091, 0.8077310247066316, 0.18494756171627347, 0.8970106656107418, 0.15363711364600896, 0.2081667087954081, 0.6068542291472314, 0.20602571087053945, 0.6540393322950158, 0.2115612654752158, 0.15396767286438207, 0.15659388998761792, 0.8259104799039012, 0.19960991834937136, 0.18319078412207557, 0.19275091004512301, 0.197119570742866, 0.21202504409351097, 0.19970118139437376, 0.20535542140886642, 0.19879779381984874, 0.1916116448268136, 0.08292117526561693, 0.09696462132859107, 0.08693532379796176, 0.11572620989517746, 0.09476529377552267, 0.10492580216944647, 0.11262762915226687, 0.10402137406736622, 0.08331146679186952]}, "mutation_prompt": null}
{"id": "24661f22-483a-4940-bc4c-8731da622244", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n        self.velocity_clamp = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity clamping\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 * (0.99 ** (self.evaluations / self.budget))  # Inertia weight decay\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = np.clip(inertia + cognitive + social, -self.velocity_clamp, self.velocity_clamp)\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive velocity clamping and inertia weight decay for improved convergence.", "configspace": "", "generation": 90, "fitness": 0.39784966715238257, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.30.", "error": "", "parent_id": "633c3f21-4fbb-430e-8452-34611c489239", "metadata": {"aucs": [0.9114583042674573, 0.9124168846169535, 0.9043209930245285, 0.9191530144260356, 0.9056703419653467, 0.9245491880272814, 0.9152236719380243, 0.9130920982266659, 0.9100670880858112, 0.8376301325296708, 0.6445905461583405, 0.8288974657206021, 0.8537285362781935, 0.04751769878933232, 0.8383736791435551, 0.8325509356930274, 0.8381769858203926, 0.8404941784049755, 0.14227216813598476, 0.5266274764445191, 0.16225003078791056, 0.1564546763057264, 0.1576713412620988, 0.6758595419313065, 0.16290686855286307, 0.15168901902571053, 0.13321196821531578, 0.13544463723267475, 0.11175903144746391, 0.11813008362991873, 0.13408401021340655, 0.14934054610876168, 0.12084436113307218, 0.12800307672015643, 0.46211760403634794, 0.14097842022321694, 0.9671199231290751, 0.9739763609526687, 0.9774195080502808, 0.9893611118720099, 0.9862955729395827, 0.9772355616985482, 0.9823706321732472, 0.9846608783416418, 0.9763507695473238, 0.833214948594697, 0.7952189811526589, 0.8039697202876739, 0.8377994548856182, 0.7115473529528462, 0.7786258544361756, 0.8054845658543405, 0.7742397622235703, 0.7272492163624128, 0.3798852302483453, 0.8142478929424037, 0.8244945741081955, 0.856427452456002, 0.1590133896323117, 0.7342903419132828, 0.8767856299570215, 0.9084384690882178, 0.3079948654909841, 0.30679539702044856, 0.5550720280918194, 0.13107868950137125, 0.1327393919197728, 0.37428376445498546, 0.3567763400901932, 0.5875358992986157, 0.44523546572464756, 0.40105952824344526, 0.322653796346953, 0.12288218213760227, 0.13570853405440686, 0.4071303619299015, 0.45462226703415787, 0.4174292923538171, 0.4013222475039042, 0.1332503261112561, 0.37228192470302335, 0.24393950369326622, 0.11544830626711533, 0.1641468305232644, 0.06043860888689401, 0.07291939749766274, 0.05741598405966375, 0.22162346904406116, 0.03945064968919154, 0.006320970828495809, 0.16567704842237363, 0.2154422876068719, 0.2864561917050643, 0.14869725923925148, 0.0799325816276436, 0.18984220600008617, 0.11190300219393445, 0.2265073238792501, 0.3026227136731796, 0.05443549028139727, 0.06824409334684478, 0.08105144146107146, 0.08061482883875293, 0.1888319881383569, 0.3034131679021066, 0.12573535645085177, 0.10812521769689432, 0.20919887218028377, 0.20771567383102763, 0.3908331524464631, 0.2995325903235061, 0.28309490006754556, 0.2917670417679816, 0.30261231728497595, 0.2550970074893003, 0.3120747299975717, 0.18584533653459623, 0.7588327403611625, 0.6934063359771336, 0.7922199089959421, 0.5690703348878235, 0.615155048226992, 0.7072945151372608, 0.7004631672775199, 0.6276361474344642, 0.7334230398661716, 0.15041261461016797, 0.11684734834894173, 0.10681382020419072, 0.11626329889092635, 0.14682424043903086, 0.1375948259096087, 0.10273322587345646, 0.10854219636103757, 0.10434279403963553, 0.24713898722482397, 0.19110342343781572, 0.3241193114707759, 0.20353925146173946, 0.17552383629944868, 0.2895394728383952, 0.202885062174035, 0.20136946699310276, 0.1858856997377718, 0.6502229254661223, 0.5383773594578966, 0.4656300604980631, 0.45962096866032975, 0.4389494349494152, 0.4663518240659784, 0.5749532145926798, 0.7036278959059591, 0.4742006460830275, 0.39096041949933236, 0.33782134493934723, 0.3840551824664866, 0.3210382920512005, 0.42946027893125416, 0.41883245808380676, 0.4500005850673878, 0.4046762882678375, 0.4960434127973222, 0.2094228715269183, 0.20648666936196436, 0.22497204938361282, 0.22925995781349107, 0.20749477489379953, 0.21364223626212597, 0.22011623543288683, 0.2172472972513545, 0.22991846760556478, 0.7292205306024458, 0.1925171622887326, 0.6246369862187704, 0.24752768091674604, 0.19793053755395928, 0.24518459516542457, 0.24259632396104336, 0.2287575623067506, 0.2015519515729155, 0.908768720078369, 0.16794641839201707, 0.17168959363853298, 0.7681990039234595, 0.1883257025223367, 0.879461783229896, 0.15663745336594037, 0.17134386020888592, 0.9131367316632499, 0.8464944996076633, 0.20820642327018535, 0.20635061511401254, 0.20718123110055242, 0.8408127906302636, 0.20922347660161378, 0.15448290364842887, 0.15660734788220876, 0.8041922009508706, 0.2177268124743872, 0.2672259865340888, 0.17268448750320364, 0.1985652652427894, 0.16949472023532453, 0.19254184431882737, 0.20919615600875519, 0.17564382515536603, 0.1767715601237858, 0.08807204508046163, 0.0875789757637927, 0.08839458492121244, 0.08698565402894132, 0.08680156621140633, 0.10040482434826503, 0.09072016531601423, 0.08866770085576792, 0.09056497537152097]}, "mutation_prompt": null}
{"id": "33f6389c-a4bf-4ed6-8c3d-f2ac0863d957", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n        self.velocity_clamp = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity clamping\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 * (0.99 ** (self.evaluations / self.budget))  # Inertia weight decay\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = np.clip(inertia + cognitive + social, -self.velocity_clamp, self.velocity_clamp)\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive velocity clamping and inertia weight decay for improved convergence.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "24661f22-483a-4940-bc4c-8731da622244", "metadata": {"aucs": [0.9114583042674573, 0.9124168846169535, 0.9043209930245285, 0.9191530144260356, 0.9056703419653467, 0.9245491880272814, 0.9152236719380243, 0.9130920982266659, 0.9100670880858112, 0.8376301325296708, 0.6445905461583405, 0.8288974657206021, 0.8537285362781935, 0.04751769878933232, 0.8383736791435551, 0.8325509356930274, 0.8381769858203926, 0.8404941784049755, 0.14227216813598476, 0.5266274764445191, 0.16225003078791056, 0.1564546763057264, 0.1576713412620988, 0.6758595419313065, 0.16290686855286307, 0.15168901902571053, 0.13321196821531578, 0.13544463723267475, 0.11175903144746391, 0.11813008362991873, 0.13408401021340655, 0.14934054610876168, 0.12084436113307218, 0.12800307672015643, 0.46211760403634794, 0.14097842022321694, 0.9671199231290751, 0.9739763609526687, 0.9774195080502808, 0.9893611118720099, 0.9862955729395827, 0.9772355616985482, 0.9823706321732472, 0.9846608783416418, 0.9763507695473238, 0.833214948594697, 0.7952189811526589, 0.8039697202876739, 0.8377994548856182, 0.7115473529528462, 0.7786258544361756, 0.8054845658543405, 0.7742397622235703, 0.7272492163624128, 0.3798852302483453, 0.8142478929424037, 0.8244945741081955, 0.856427452456002, 0.1590133896323117, 0.7342903419132828, 0.8767856299570215, 0.9084384690882178, 0.3079948654909841, 0.30679539702044856, 0.5550720280918194, 0.13107868950137125, 0.1327393919197728, 0.37428376445498546, 0.3567763400901932, 0.5875358992986157, 0.44523546572464756, 0.40105952824344526, 0.322653796346953, 0.12288218213760227, 0.13570853405440686, 0.4071303619299015, 0.45462226703415787, 0.4174292923538171, 0.4013222475039042, 0.1332503261112561, 0.37228192470302335, 0.24393950369326622, 0.11544830626711533, 0.1641468305232644, 0.06043860888689401, 0.07291939749766274, 0.05741598405966375, 0.22162346904406116, 0.03945064968919154, 0.006320970828495809, 0.16567704842237363, 0.2154422876068719, 0.2864561917050643, 0.14869725923925148, 0.0799325816276436, 0.18984220600008617, 0.11190300219393445, 0.2265073238792501, 0.3026227136731796, 0.05443549028139727, 0.06824409334684478, 0.08105144146107146, 0.08061482883875293, 0.1888319881383569, 0.3034131679021066, 0.12573535645085177, 0.10812521769689432, 0.20919887218028377, 0.20771567383102763, 0.3908331524464631, 0.2995325903235061, 0.28309490006754556, 0.2917670417679816, 0.30261231728497595, 0.2550970074893003, 0.3120747299975717, 0.18584533653459623, 0.7588327403611625, 0.6934063359771336, 0.7922199089959421, 0.5690703348878235, 0.615155048226992, 0.7072945151372608, 0.7004631672775199, 0.6276361474344642, 0.7334230398661716, 0.15041261461016797, 0.11684734834894173, 0.10681382020419072, 0.11626329889092635, 0.14682424043903086, 0.1375948259096087, 0.10273322587345646, 0.10854219636103757, 0.10434279403963553, 0.24713898722482397, 0.19110342343781572, 0.3241193114707759, 0.20353925146173946, 0.17552383629944868, 0.2895394728383952, 0.202885062174035, 0.20136946699310276, 0.1858856997377718, 0.6502229254661223, 0.5383773594578966, 0.4656300604980631, 0.45962096866032975, 0.4389494349494152, 0.4663518240659784, 0.5749532145926798, 0.7036278959059591, 0.4742006460830275, 0.39096041949933236, 0.33782134493934723, 0.3840551824664866, 0.3210382920512005, 0.42946027893125416, 0.41883245808380676, 0.4500005850673878, 0.4046762882678375, 0.4960434127973222, 0.2094228715269183, 0.20648666936196436, 0.22497204938361282, 0.22925995781349107, 0.20749477489379953, 0.21364223626212597, 0.22011623543288683, 0.2172472972513545, 0.22991846760556478, 0.7292205306024458, 0.1925171622887326, 0.6246369862187704, 0.24752768091674604, 0.19793053755395928, 0.24518459516542457, 0.24259632396104336, 0.2287575623067506, 0.2015519515729155, 0.908768720078369, 0.16794641839201707, 0.17168959363853298, 0.7681990039234595, 0.1883257025223367, 0.879461783229896, 0.15663745336594037, 0.17134386020888592, 0.9131367316632499, 0.8464944996076633, 0.20820642327018535, 0.20635061511401254, 0.20718123110055242, 0.8408127906302636, 0.20922347660161378, 0.15448290364842887, 0.15660734788220876, 0.8041922009508706, 0.2177268124743872, 0.2672259865340888, 0.17268448750320364, 0.1985652652427894, 0.16949472023532453, 0.19254184431882737, 0.20919615600875519, 0.17564382515536603, 0.1767715601237858, 0.08807204508046163, 0.0875789757637927, 0.08839458492121244, 0.08698565402894132, 0.08680156621140633, 0.10040482434826503, 0.09072016531601423, 0.08866770085576792, 0.09056497537152097]}, "mutation_prompt": null}
{"id": "44821d91-0f05-4858-9eab-50763f3a6025", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n        self.velocity_clamp = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity clamping\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 * (0.98 ** (self.evaluations / self.budget))  # Inertia weight decay\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = np.clip(inertia + cognitive + social, -self.velocity_clamp, self.velocity_clamp)\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            dynamic_mutation_factor = 0.5 + 0.25 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.75 + 0.15 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with dynamic exploration-exploitation balance using adaptive parameters for improved convergence.", "configspace": "", "generation": 92, "fitness": 0.3756635311626912, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.29.", "error": "", "parent_id": "24661f22-483a-4940-bc4c-8731da622244", "metadata": {"aucs": [0.9186371245655012, 0.9215433317404098, 0.9137334019612497, 0.9152847251008972, 0.9067955654883206, 0.9147955825836667, 0.9216389348946198, 0.9156145923113338, 0.9228966832279178, 0.7153728276576723, 0.7531567785322392, 0.8444871716334208, 0.8517280755015091, 9.999999999998899e-05, 0.840804537616427, 0.7199822654127574, 0.859433903954505, 0.8513401483218126, 0.16787396127701681, 0.12267995126529019, 0.5755138150739051, 0.14421353098571998, 0.13430752135167134, 0.14544823179472388, 0.14890861894490248, 0.10349560667771951, 0.16700940688344457, 0.14539521550904155, 0.11185177900584586, 0.14730702823920294, 0.13811130478307931, 0.13522457047986058, 0.11082615913241933, 0.11206723338468672, 0.15729233369737217, 0.14407994240451427, 0.9733179441194325, 0.9741946946002958, 0.9740061211962368, 0.9788139568926623, 0.986263432357149, 0.9738782737972389, 0.9803105490672119, 0.9818666393533513, 0.9827496225251773, 0.7882068051188181, 0.7879049410427776, 0.8084543738483493, 0.1510255155679664, 0.8096422696572669, 0.1531079527504926, 0.8169176980643262, 0.8058755596710101, 0.8054639645709991, 0.8311635691649617, 0.3461193672574805, 0.8706166268967093, 0.8619912836449766, 0.8711517397509916, 0.21218393059667506, 0.24439286334596422, 0.23442481277822658, 0.35982528642388234, 0.5990832061201516, 0.3801738872643077, 0.5645924016475591, 0.3969630860361847, 0.1327464026448132, 0.6051081050968159, 0.3814208319052802, 0.36698970118499485, 0.4604361107605184, 0.2891927457105691, 0.3170945569471677, 0.2877635314397303, 0.4052522882559937, 0.31382419275455087, 0.44825799799137733, 0.3396798411678119, 0.1681730083552364, 0.42340492609876224, 0.04569940264688954, 0.016430091075603892, 0.08431797282347275, 0.10027758924095254, 0.1053536166186908, 0.04044152872545914, 0.08738546691684768, 0.07734163864390453, 0.011107182700206053, 0.27072184845313185, 0.20740405543299456, 0.1682312407554606, 0.16556852175636871, 0.09725101073921993, 0.08047997701837395, 0.24282700614367736, 0.1656402064540865, 0.3402681552715363, 0.07402798249030662, 0.19035034382542448, 0.12887229431995217, 0.11059239232603701, 0.10697143063597181, 0.2100934221227262, 0.1675728540399548, 0.22391789924011218, 0.12801260054016728, 0.21319333215683822, 0.24881598547480033, 0.269361534730311, 0.35776422389726914, 0.2976197898720315, 0.3906155763402217, 0.28743373458560895, 0.2651276449275305, 0.34199386706207835, 0.6626240577654761, 0.7239748886049231, 0.6584609129636125, 0.6540443751727326, 0.6555861943423176, 0.6428159914189586, 0.7381493097397991, 0.6307940092707587, 0.7087935416551618, 0.09994427993724764, 0.14333016606347415, 0.1253325128895647, 0.11198989912697854, 0.10256557247451836, 0.12120550993533252, 0.10200001777367596, 0.12520418481526208, 0.11387463919844798, 0.2697710297570125, 0.2645958249151221, 0.15543074496367626, 0.17145929346057076, 0.22080561762731965, 0.28182381546034185, 0.23306449769767823, 0.2806215045567828, 0.16874521501625173, 0.5361791869541953, 0.723162788312989, 0.4277284703370339, 0.4260651360577087, 0.23642448270945005, 0.5237920439289052, 0.7195955571642598, 0.5216555253736945, 0.5950845802913347, 0.36367157749949597, 0.23417662719102583, 0.2622047680122922, 0.39056800411298587, 0.22453555217867716, 0.3969525234025124, 0.44342581912732637, 0.417083774827152, 0.13739583943695854, 0.23699006663673594, 0.201537683626703, 0.2168206030347063, 0.1925674350326937, 0.19654555627496106, 0.19622219193839552, 0.22607570894194995, 0.1976921108666958, 0.20631662735233813, 0.24077339074344672, 0.20512017719320885, 0.22000534121128434, 0.23314736549910398, 0.18773294151276199, 0.2110801023934441, 0.6377170940544115, 0.21463631110035897, 0.24169949901579468, 0.8228888600375224, 0.167547525801922, 0.16942477492950925, 0.9172678231832533, 0.18811947047610178, 0.19885387127375675, 0.9185370062279321, 0.16826632662626329, 0.8515515547729653, 0.8078603268099873, 0.2092779601691498, 0.1274902208185551, 0.16641537302983433, 0.6843253958325137, 0.20687243099268793, 0.15601410821577044, 0.16434649378305966, 0.21074103635291708, 0.20300733311597974, 0.19813082199329057, 0.1913147682225902, 0.19842867719010682, 0.17579810215647373, 0.19894071413873915, 0.18970009600010396, 0.20655018722783447, 0.2181338004275436, 0.09590309607048297, 0.09749880204291772, 0.09635888960704886, 0.08779648811791207, 0.08450054842285704, 0.09538273911962858, 0.12304891527221062, 0.08587131607458853, 0.08970490981594703]}, "mutation_prompt": null}
{"id": "be4757ac-064a-4300-91bf-ade223574fa5", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n        self.velocity_clamp = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity clamping\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 * (0.99 ** (self.evaluations / self.budget))  # Inertia weight decay\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = np.clip(inertia + cognitive + social, -self.velocity_clamp, self.velocity_clamp)\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive velocity clamping and inertia weight decay for improved convergence.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "24661f22-483a-4940-bc4c-8731da622244", "metadata": {"aucs": [0.9114583042674573, 0.9124168846169535, 0.9043209930245285, 0.9191530144260356, 0.9056703419653467, 0.9245491880272814, 0.9152236719380243, 0.9130920982266659, 0.9100670880858112, 0.8376301325296708, 0.6445905461583405, 0.8288974657206021, 0.8537285362781935, 0.04751769878933232, 0.8383736791435551, 0.8325509356930274, 0.8381769858203926, 0.8404941784049755, 0.14227216813598476, 0.5266274764445191, 0.16225003078791056, 0.1564546763057264, 0.1576713412620988, 0.6758595419313065, 0.16290686855286307, 0.15168901902571053, 0.13321196821531578, 0.13544463723267475, 0.11175903144746391, 0.11813008362991873, 0.13408401021340655, 0.14934054610876168, 0.12084436113307218, 0.12800307672015643, 0.46211760403634794, 0.14097842022321694, 0.9671199231290751, 0.9739763609526687, 0.9774195080502808, 0.9893611118720099, 0.9862955729395827, 0.9772355616985482, 0.9823706321732472, 0.9846608783416418, 0.9763507695473238, 0.833214948594697, 0.7952189811526589, 0.8039697202876739, 0.8377994548856182, 0.7115473529528462, 0.7786258544361756, 0.8054845658543405, 0.7742397622235703, 0.7272492163624128, 0.3798852302483453, 0.8142478929424037, 0.8244945741081955, 0.856427452456002, 0.1590133896323117, 0.7342903419132828, 0.8767856299570215, 0.9084384690882178, 0.3079948654909841, 0.30679539702044856, 0.5550720280918194, 0.13107868950137125, 0.1327393919197728, 0.37428376445498546, 0.3567763400901932, 0.5875358992986157, 0.44523546572464756, 0.40105952824344526, 0.322653796346953, 0.12288218213760227, 0.13570853405440686, 0.4071303619299015, 0.45462226703415787, 0.4174292923538171, 0.4013222475039042, 0.1332503261112561, 0.37228192470302335, 0.24393950369326622, 0.11544830626711533, 0.1641468305232644, 0.06043860888689401, 0.07291939749766274, 0.05741598405966375, 0.22162346904406116, 0.03945064968919154, 0.006320970828495809, 0.16567704842237363, 0.2154422876068719, 0.2864561917050643, 0.14869725923925148, 0.0799325816276436, 0.18984220600008617, 0.11190300219393445, 0.2265073238792501, 0.3026227136731796, 0.05443549028139727, 0.06824409334684478, 0.08105144146107146, 0.08061482883875293, 0.1888319881383569, 0.3034131679021066, 0.12573535645085177, 0.10812521769689432, 0.20919887218028377, 0.20771567383102763, 0.3908331524464631, 0.2995325903235061, 0.28309490006754556, 0.2917670417679816, 0.30261231728497595, 0.2550970074893003, 0.3120747299975717, 0.18584533653459623, 0.7588327403611625, 0.6934063359771336, 0.7922199089959421, 0.5690703348878235, 0.615155048226992, 0.7072945151372608, 0.7004631672775199, 0.6276361474344642, 0.7334230398661716, 0.15041261461016797, 0.11684734834894173, 0.10681382020419072, 0.11626329889092635, 0.14682424043903086, 0.1375948259096087, 0.10273322587345646, 0.10854219636103757, 0.10434279403963553, 0.24713898722482397, 0.19110342343781572, 0.3241193114707759, 0.20353925146173946, 0.17552383629944868, 0.2895394728383952, 0.202885062174035, 0.20136946699310276, 0.1858856997377718, 0.6502229254661223, 0.5383773594578966, 0.4656300604980631, 0.45962096866032975, 0.4389494349494152, 0.4663518240659784, 0.5749532145926798, 0.7036278959059591, 0.4742006460830275, 0.39096041949933236, 0.33782134493934723, 0.3840551824664866, 0.3210382920512005, 0.42946027893125416, 0.41883245808380676, 0.4500005850673878, 0.4046762882678375, 0.4960434127973222, 0.2094228715269183, 0.20648666936196436, 0.22497204938361282, 0.22925995781349107, 0.20749477489379953, 0.21364223626212597, 0.22011623543288683, 0.2172472972513545, 0.22991846760556478, 0.7292205306024458, 0.1925171622887326, 0.6246369862187704, 0.24752768091674604, 0.19793053755395928, 0.24518459516542457, 0.24259632396104336, 0.2287575623067506, 0.2015519515729155, 0.908768720078369, 0.16794641839201707, 0.17168959363853298, 0.7681990039234595, 0.1883257025223367, 0.879461783229896, 0.15663745336594037, 0.17134386020888592, 0.9131367316632499, 0.8464944996076633, 0.20820642327018535, 0.20635061511401254, 0.20718123110055242, 0.8408127906302636, 0.20922347660161378, 0.15448290364842887, 0.15660734788220876, 0.8041922009508706, 0.2177268124743872, 0.2672259865340888, 0.17268448750320364, 0.1985652652427894, 0.16949472023532453, 0.19254184431882737, 0.20919615600875519, 0.17564382515536603, 0.1767715601237858, 0.08807204508046163, 0.0875789757637927, 0.08839458492121244, 0.08698565402894132, 0.08680156621140633, 0.10040482434826503, 0.09072016531601423, 0.08866770085576792, 0.09056497537152097]}, "mutation_prompt": null}
{"id": "3c8c66b9-1dd5-44e6-9b18-3b6109a86b37", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n        self.velocity_clamp = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity clamping\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 * (0.99 ** (self.evaluations / self.budget))  # Inertia weight decay\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = np.clip(inertia + cognitive + social, -self.velocity_clamp, self.velocity_clamp)\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive velocity clamping and inertia weight decay for improved convergence.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "24661f22-483a-4940-bc4c-8731da622244", "metadata": {"aucs": [0.9114583042674573, 0.9124168846169535, 0.9043209930245285, 0.9191530144260356, 0.9056703419653467, 0.9245491880272814, 0.9152236719380243, 0.9130920982266659, 0.9100670880858112, 0.8376301325296708, 0.6445905461583405, 0.8288974657206021, 0.8537285362781935, 0.04751769878933232, 0.8383736791435551, 0.8325509356930274, 0.8381769858203926, 0.8404941784049755, 0.14227216813598476, 0.5266274764445191, 0.16225003078791056, 0.1564546763057264, 0.1576713412620988, 0.6758595419313065, 0.16290686855286307, 0.15168901902571053, 0.13321196821531578, 0.13544463723267475, 0.11175903144746391, 0.11813008362991873, 0.13408401021340655, 0.14934054610876168, 0.12084436113307218, 0.12800307672015643, 0.46211760403634794, 0.14097842022321694, 0.9671199231290751, 0.9739763609526687, 0.9774195080502808, 0.9893611118720099, 0.9862955729395827, 0.9772355616985482, 0.9823706321732472, 0.9846608783416418, 0.9763507695473238, 0.833214948594697, 0.7952189811526589, 0.8039697202876739, 0.8377994548856182, 0.7115473529528462, 0.7786258544361756, 0.8054845658543405, 0.7742397622235703, 0.7272492163624128, 0.3798852302483453, 0.8142478929424037, 0.8244945741081955, 0.856427452456002, 0.1590133896323117, 0.7342903419132828, 0.8767856299570215, 0.9084384690882178, 0.3079948654909841, 0.30679539702044856, 0.5550720280918194, 0.13107868950137125, 0.1327393919197728, 0.37428376445498546, 0.3567763400901932, 0.5875358992986157, 0.44523546572464756, 0.40105952824344526, 0.322653796346953, 0.12288218213760227, 0.13570853405440686, 0.4071303619299015, 0.45462226703415787, 0.4174292923538171, 0.4013222475039042, 0.1332503261112561, 0.37228192470302335, 0.24393950369326622, 0.11544830626711533, 0.1641468305232644, 0.06043860888689401, 0.07291939749766274, 0.05741598405966375, 0.22162346904406116, 0.03945064968919154, 0.006320970828495809, 0.16567704842237363, 0.2154422876068719, 0.2864561917050643, 0.14869725923925148, 0.0799325816276436, 0.18984220600008617, 0.11190300219393445, 0.2265073238792501, 0.3026227136731796, 0.05443549028139727, 0.06824409334684478, 0.08105144146107146, 0.08061482883875293, 0.1888319881383569, 0.3034131679021066, 0.12573535645085177, 0.10812521769689432, 0.20919887218028377, 0.20771567383102763, 0.3908331524464631, 0.2995325903235061, 0.28309490006754556, 0.2917670417679816, 0.30261231728497595, 0.2550970074893003, 0.3120747299975717, 0.18584533653459623, 0.7588327403611625, 0.6934063359771336, 0.7922199089959421, 0.5690703348878235, 0.615155048226992, 0.7072945151372608, 0.7004631672775199, 0.6276361474344642, 0.7334230398661716, 0.15041261461016797, 0.11684734834894173, 0.10681382020419072, 0.11626329889092635, 0.14682424043903086, 0.1375948259096087, 0.10273322587345646, 0.10854219636103757, 0.10434279403963553, 0.24713898722482397, 0.19110342343781572, 0.3241193114707759, 0.20353925146173946, 0.17552383629944868, 0.2895394728383952, 0.202885062174035, 0.20136946699310276, 0.1858856997377718, 0.6502229254661223, 0.5383773594578966, 0.4656300604980631, 0.45962096866032975, 0.4389494349494152, 0.4663518240659784, 0.5749532145926798, 0.7036278959059591, 0.4742006460830275, 0.39096041949933236, 0.33782134493934723, 0.3840551824664866, 0.3210382920512005, 0.42946027893125416, 0.41883245808380676, 0.4500005850673878, 0.4046762882678375, 0.4960434127973222, 0.2094228715269183, 0.20648666936196436, 0.22497204938361282, 0.22925995781349107, 0.20749477489379953, 0.21364223626212597, 0.22011623543288683, 0.2172472972513545, 0.22991846760556478, 0.7292205306024458, 0.1925171622887326, 0.6246369862187704, 0.24752768091674604, 0.19793053755395928, 0.24518459516542457, 0.24259632396104336, 0.2287575623067506, 0.2015519515729155, 0.908768720078369, 0.16794641839201707, 0.17168959363853298, 0.7681990039234595, 0.1883257025223367, 0.879461783229896, 0.15663745336594037, 0.17134386020888592, 0.9131367316632499, 0.8464944996076633, 0.20820642327018535, 0.20635061511401254, 0.20718123110055242, 0.8408127906302636, 0.20922347660161378, 0.15448290364842887, 0.15660734788220876, 0.8041922009508706, 0.2177268124743872, 0.2672259865340888, 0.17268448750320364, 0.1985652652427894, 0.16949472023532453, 0.19254184431882737, 0.20919615600875519, 0.17564382515536603, 0.1767715601237858, 0.08807204508046163, 0.0875789757637927, 0.08839458492121244, 0.08698565402894132, 0.08680156621140633, 0.10040482434826503, 0.09072016531601423, 0.08866770085576792, 0.09056497537152097]}, "mutation_prompt": null}
{"id": "7bea216c-d241-43d0-95b8-08ff50b3e763", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n        self.velocity_clamp = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity clamping\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 * (0.99 ** (self.evaluations / self.budget))  # Inertia weight decay\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = np.clip(inertia + cognitive + social, -self.velocity_clamp, self.velocity_clamp)\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive velocity clamping and inertia weight decay for improved convergence.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "24661f22-483a-4940-bc4c-8731da622244", "metadata": {"aucs": [0.9114583042674573, 0.9124168846169535, 0.9043209930245285, 0.9191530144260356, 0.9056703419653467, 0.9245491880272814, 0.9152236719380243, 0.9130920982266659, 0.9100670880858112, 0.8376301325296708, 0.6445905461583405, 0.8288974657206021, 0.8537285362781935, 0.04751769878933232, 0.8383736791435551, 0.8325509356930274, 0.8381769858203926, 0.8404941784049755, 0.14227216813598476, 0.5266274764445191, 0.16225003078791056, 0.1564546763057264, 0.1576713412620988, 0.6758595419313065, 0.16290686855286307, 0.15168901902571053, 0.13321196821531578, 0.13544463723267475, 0.11175903144746391, 0.11813008362991873, 0.13408401021340655, 0.14934054610876168, 0.12084436113307218, 0.12800307672015643, 0.46211760403634794, 0.14097842022321694, 0.9671199231290751, 0.9739763609526687, 0.9774195080502808, 0.9893611118720099, 0.9862955729395827, 0.9772355616985482, 0.9823706321732472, 0.9846608783416418, 0.9763507695473238, 0.833214948594697, 0.7952189811526589, 0.8039697202876739, 0.8377994548856182, 0.7115473529528462, 0.7786258544361756, 0.8054845658543405, 0.7742397622235703, 0.7272492163624128, 0.3798852302483453, 0.8142478929424037, 0.8244945741081955, 0.856427452456002, 0.1590133896323117, 0.7342903419132828, 0.8767856299570215, 0.9084384690882178, 0.3079948654909841, 0.30679539702044856, 0.5550720280918194, 0.13107868950137125, 0.1327393919197728, 0.37428376445498546, 0.3567763400901932, 0.5875358992986157, 0.44523546572464756, 0.40105952824344526, 0.322653796346953, 0.12288218213760227, 0.13570853405440686, 0.4071303619299015, 0.45462226703415787, 0.4174292923538171, 0.4013222475039042, 0.1332503261112561, 0.37228192470302335, 0.24393950369326622, 0.11544830626711533, 0.1641468305232644, 0.06043860888689401, 0.07291939749766274, 0.05741598405966375, 0.22162346904406116, 0.03945064968919154, 0.006320970828495809, 0.16567704842237363, 0.2154422876068719, 0.2864561917050643, 0.14869725923925148, 0.0799325816276436, 0.18984220600008617, 0.11190300219393445, 0.2265073238792501, 0.3026227136731796, 0.05443549028139727, 0.06824409334684478, 0.08105144146107146, 0.08061482883875293, 0.1888319881383569, 0.3034131679021066, 0.12573535645085177, 0.10812521769689432, 0.20919887218028377, 0.20771567383102763, 0.3908331524464631, 0.2995325903235061, 0.28309490006754556, 0.2917670417679816, 0.30261231728497595, 0.2550970074893003, 0.3120747299975717, 0.18584533653459623, 0.7588327403611625, 0.6934063359771336, 0.7922199089959421, 0.5690703348878235, 0.615155048226992, 0.7072945151372608, 0.7004631672775199, 0.6276361474344642, 0.7334230398661716, 0.15041261461016797, 0.11684734834894173, 0.10681382020419072, 0.11626329889092635, 0.14682424043903086, 0.1375948259096087, 0.10273322587345646, 0.10854219636103757, 0.10434279403963553, 0.24713898722482397, 0.19110342343781572, 0.3241193114707759, 0.20353925146173946, 0.17552383629944868, 0.2895394728383952, 0.202885062174035, 0.20136946699310276, 0.1858856997377718, 0.6502229254661223, 0.5383773594578966, 0.4656300604980631, 0.45962096866032975, 0.4389494349494152, 0.4663518240659784, 0.5749532145926798, 0.7036278959059591, 0.4742006460830275, 0.39096041949933236, 0.33782134493934723, 0.3840551824664866, 0.3210382920512005, 0.42946027893125416, 0.41883245808380676, 0.4500005850673878, 0.4046762882678375, 0.4960434127973222, 0.2094228715269183, 0.20648666936196436, 0.22497204938361282, 0.22925995781349107, 0.20749477489379953, 0.21364223626212597, 0.22011623543288683, 0.2172472972513545, 0.22991846760556478, 0.7292205306024458, 0.1925171622887326, 0.6246369862187704, 0.24752768091674604, 0.19793053755395928, 0.24518459516542457, 0.24259632396104336, 0.2287575623067506, 0.2015519515729155, 0.908768720078369, 0.16794641839201707, 0.17168959363853298, 0.7681990039234595, 0.1883257025223367, 0.879461783229896, 0.15663745336594037, 0.17134386020888592, 0.9131367316632499, 0.8464944996076633, 0.20820642327018535, 0.20635061511401254, 0.20718123110055242, 0.8408127906302636, 0.20922347660161378, 0.15448290364842887, 0.15660734788220876, 0.8041922009508706, 0.2177268124743872, 0.2672259865340888, 0.17268448750320364, 0.1985652652427894, 0.16949472023532453, 0.19254184431882737, 0.20919615600875519, 0.17564382515536603, 0.1767715601237858, 0.08807204508046163, 0.0875789757637927, 0.08839458492121244, 0.08698565402894132, 0.08680156621140633, 0.10040482434826503, 0.09072016531601423, 0.08866770085576792, 0.09056497537152097]}, "mutation_prompt": null}
{"id": "430c4d87-9215-44de-bc9c-42de41743659", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n        self.velocity_clamp = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity clamping\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 * (0.99 ** (self.evaluations / self.budget))  # Inertia weight decay\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = np.clip(inertia + cognitive + social, -self.velocity_clamp, self.velocity_clamp)\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive velocity clamping and inertia weight decay for improved convergence.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "24661f22-483a-4940-bc4c-8731da622244", "metadata": {"aucs": [0.9114583042674573, 0.9124168846169535, 0.9043209930245285, 0.9191530144260356, 0.9056703419653467, 0.9245491880272814, 0.9152236719380243, 0.9130920982266659, 0.9100670880858112, 0.8376301325296708, 0.6445905461583405, 0.8288974657206021, 0.8537285362781935, 0.04751769878933232, 0.8383736791435551, 0.8325509356930274, 0.8381769858203926, 0.8404941784049755, 0.14227216813598476, 0.5266274764445191, 0.16225003078791056, 0.1564546763057264, 0.1576713412620988, 0.6758595419313065, 0.16290686855286307, 0.15168901902571053, 0.13321196821531578, 0.13544463723267475, 0.11175903144746391, 0.11813008362991873, 0.13408401021340655, 0.14934054610876168, 0.12084436113307218, 0.12800307672015643, 0.46211760403634794, 0.14097842022321694, 0.9671199231290751, 0.9739763609526687, 0.9774195080502808, 0.9893611118720099, 0.9862955729395827, 0.9772355616985482, 0.9823706321732472, 0.9846608783416418, 0.9763507695473238, 0.833214948594697, 0.7952189811526589, 0.8039697202876739, 0.8377994548856182, 0.7115473529528462, 0.7786258544361756, 0.8054845658543405, 0.7742397622235703, 0.7272492163624128, 0.3798852302483453, 0.8142478929424037, 0.8244945741081955, 0.856427452456002, 0.1590133896323117, 0.7342903419132828, 0.8767856299570215, 0.9084384690882178, 0.3079948654909841, 0.30679539702044856, 0.5550720280918194, 0.13107868950137125, 0.1327393919197728, 0.37428376445498546, 0.3567763400901932, 0.5875358992986157, 0.44523546572464756, 0.40105952824344526, 0.322653796346953, 0.12288218213760227, 0.13570853405440686, 0.4071303619299015, 0.45462226703415787, 0.4174292923538171, 0.4013222475039042, 0.1332503261112561, 0.37228192470302335, 0.24393950369326622, 0.11544830626711533, 0.1641468305232644, 0.06043860888689401, 0.07291939749766274, 0.05741598405966375, 0.22162346904406116, 0.03945064968919154, 0.006320970828495809, 0.16567704842237363, 0.2154422876068719, 0.2864561917050643, 0.14869725923925148, 0.0799325816276436, 0.18984220600008617, 0.11190300219393445, 0.2265073238792501, 0.3026227136731796, 0.05443549028139727, 0.06824409334684478, 0.08105144146107146, 0.08061482883875293, 0.1888319881383569, 0.3034131679021066, 0.12573535645085177, 0.10812521769689432, 0.20919887218028377, 0.20771567383102763, 0.3908331524464631, 0.2995325903235061, 0.28309490006754556, 0.2917670417679816, 0.30261231728497595, 0.2550970074893003, 0.3120747299975717, 0.18584533653459623, 0.7588327403611625, 0.6934063359771336, 0.7922199089959421, 0.5690703348878235, 0.615155048226992, 0.7072945151372608, 0.7004631672775199, 0.6276361474344642, 0.7334230398661716, 0.15041261461016797, 0.11684734834894173, 0.10681382020419072, 0.11626329889092635, 0.14682424043903086, 0.1375948259096087, 0.10273322587345646, 0.10854219636103757, 0.10434279403963553, 0.24713898722482397, 0.19110342343781572, 0.3241193114707759, 0.20353925146173946, 0.17552383629944868, 0.2895394728383952, 0.202885062174035, 0.20136946699310276, 0.1858856997377718, 0.6502229254661223, 0.5383773594578966, 0.4656300604980631, 0.45962096866032975, 0.4389494349494152, 0.4663518240659784, 0.5749532145926798, 0.7036278959059591, 0.4742006460830275, 0.39096041949933236, 0.33782134493934723, 0.3840551824664866, 0.3210382920512005, 0.42946027893125416, 0.41883245808380676, 0.4500005850673878, 0.4046762882678375, 0.4960434127973222, 0.2094228715269183, 0.20648666936196436, 0.22497204938361282, 0.22925995781349107, 0.20749477489379953, 0.21364223626212597, 0.22011623543288683, 0.2172472972513545, 0.22991846760556478, 0.7292205306024458, 0.1925171622887326, 0.6246369862187704, 0.24752768091674604, 0.19793053755395928, 0.24518459516542457, 0.24259632396104336, 0.2287575623067506, 0.2015519515729155, 0.908768720078369, 0.16794641839201707, 0.17168959363853298, 0.7681990039234595, 0.1883257025223367, 0.879461783229896, 0.15663745336594037, 0.17134386020888592, 0.9131367316632499, 0.8464944996076633, 0.20820642327018535, 0.20635061511401254, 0.20718123110055242, 0.8408127906302636, 0.20922347660161378, 0.15448290364842887, 0.15660734788220876, 0.8041922009508706, 0.2177268124743872, 0.2672259865340888, 0.17268448750320364, 0.1985652652427894, 0.16949472023532453, 0.19254184431882737, 0.20919615600875519, 0.17564382515536603, 0.1767715601237858, 0.08807204508046163, 0.0875789757637927, 0.08839458492121244, 0.08698565402894132, 0.08680156621140633, 0.10040482434826503, 0.09072016531601423, 0.08866770085576792, 0.09056497537152097]}, "mutation_prompt": null}
{"id": "b5fc6d77-9c5b-4bdb-a63f-1b5d32dffbdb", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n        self.velocity_clamp = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity clamping\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 * (0.99 ** (self.evaluations / self.budget))  # Inertia weight decay\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = np.clip(inertia + cognitive + social, -self.velocity_clamp, self.velocity_clamp)\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive velocity clamping and inertia weight decay for improved convergence.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "24661f22-483a-4940-bc4c-8731da622244", "metadata": {"aucs": [0.9114583042674573, 0.9124168846169535, 0.9043209930245285, 0.9191530144260356, 0.9056703419653467, 0.9245491880272814, 0.9152236719380243, 0.9130920982266659, 0.9100670880858112, 0.8376301325296708, 0.6445905461583405, 0.8288974657206021, 0.8537285362781935, 0.04751769878933232, 0.8383736791435551, 0.8325509356930274, 0.8381769858203926, 0.8404941784049755, 0.14227216813598476, 0.5266274764445191, 0.16225003078791056, 0.1564546763057264, 0.1576713412620988, 0.6758595419313065, 0.16290686855286307, 0.15168901902571053, 0.13321196821531578, 0.13544463723267475, 0.11175903144746391, 0.11813008362991873, 0.13408401021340655, 0.14934054610876168, 0.12084436113307218, 0.12800307672015643, 0.46211760403634794, 0.14097842022321694, 0.9671199231290751, 0.9739763609526687, 0.9774195080502808, 0.9893611118720099, 0.9862955729395827, 0.9772355616985482, 0.9823706321732472, 0.9846608783416418, 0.9763507695473238, 0.833214948594697, 0.7952189811526589, 0.8039697202876739, 0.8377994548856182, 0.7115473529528462, 0.7786258544361756, 0.8054845658543405, 0.7742397622235703, 0.7272492163624128, 0.3798852302483453, 0.8142478929424037, 0.8244945741081955, 0.856427452456002, 0.1590133896323117, 0.7342903419132828, 0.8767856299570215, 0.9084384690882178, 0.3079948654909841, 0.30679539702044856, 0.5550720280918194, 0.13107868950137125, 0.1327393919197728, 0.37428376445498546, 0.3567763400901932, 0.5875358992986157, 0.44523546572464756, 0.40105952824344526, 0.322653796346953, 0.12288218213760227, 0.13570853405440686, 0.4071303619299015, 0.45462226703415787, 0.4174292923538171, 0.4013222475039042, 0.1332503261112561, 0.37228192470302335, 0.24393950369326622, 0.11544830626711533, 0.1641468305232644, 0.06043860888689401, 0.07291939749766274, 0.05741598405966375, 0.22162346904406116, 0.03945064968919154, 0.006320970828495809, 0.16567704842237363, 0.2154422876068719, 0.2864561917050643, 0.14869725923925148, 0.0799325816276436, 0.18984220600008617, 0.11190300219393445, 0.2265073238792501, 0.3026227136731796, 0.05443549028139727, 0.06824409334684478, 0.08105144146107146, 0.08061482883875293, 0.1888319881383569, 0.3034131679021066, 0.12573535645085177, 0.10812521769689432, 0.20919887218028377, 0.20771567383102763, 0.3908331524464631, 0.2995325903235061, 0.28309490006754556, 0.2917670417679816, 0.30261231728497595, 0.2550970074893003, 0.3120747299975717, 0.18584533653459623, 0.7588327403611625, 0.6934063359771336, 0.7922199089959421, 0.5690703348878235, 0.615155048226992, 0.7072945151372608, 0.7004631672775199, 0.6276361474344642, 0.7334230398661716, 0.15041261461016797, 0.11684734834894173, 0.10681382020419072, 0.11626329889092635, 0.14682424043903086, 0.1375948259096087, 0.10273322587345646, 0.10854219636103757, 0.10434279403963553, 0.24713898722482397, 0.19110342343781572, 0.3241193114707759, 0.20353925146173946, 0.17552383629944868, 0.2895394728383952, 0.202885062174035, 0.20136946699310276, 0.1858856997377718, 0.6502229254661223, 0.5383773594578966, 0.4656300604980631, 0.45962096866032975, 0.4389494349494152, 0.4663518240659784, 0.5749532145926798, 0.7036278959059591, 0.4742006460830275, 0.39096041949933236, 0.33782134493934723, 0.3840551824664866, 0.3210382920512005, 0.42946027893125416, 0.41883245808380676, 0.4500005850673878, 0.4046762882678375, 0.4960434127973222, 0.2094228715269183, 0.20648666936196436, 0.22497204938361282, 0.22925995781349107, 0.20749477489379953, 0.21364223626212597, 0.22011623543288683, 0.2172472972513545, 0.22991846760556478, 0.7292205306024458, 0.1925171622887326, 0.6246369862187704, 0.24752768091674604, 0.19793053755395928, 0.24518459516542457, 0.24259632396104336, 0.2287575623067506, 0.2015519515729155, 0.908768720078369, 0.16794641839201707, 0.17168959363853298, 0.7681990039234595, 0.1883257025223367, 0.879461783229896, 0.15663745336594037, 0.17134386020888592, 0.9131367316632499, 0.8464944996076633, 0.20820642327018535, 0.20635061511401254, 0.20718123110055242, 0.8408127906302636, 0.20922347660161378, 0.15448290364842887, 0.15660734788220876, 0.8041922009508706, 0.2177268124743872, 0.2672259865340888, 0.17268448750320364, 0.1985652652427894, 0.16949472023532453, 0.19254184431882737, 0.20919615600875519, 0.17564382515536603, 0.1767715601237858, 0.08807204508046163, 0.0875789757637927, 0.08839458492121244, 0.08698565402894132, 0.08680156621140633, 0.10040482434826503, 0.09072016531601423, 0.08866770085576792, 0.09056497537152097]}, "mutation_prompt": null}
{"id": "1b444d14-5382-400f-92ab-b9f3bfd2d7c1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n        self.velocity_clamp = (self.upper_bound - self.lower_bound) / 2\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            # Dynamically adjust swarm size\n            self.swarm_size = max(5, int(2 * self.dim * (1 - (self.evaluations / self.budget))))\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 * (0.99 ** (self.evaluations / self.budget))\n\n            for i in range(self.swarm_size):\n                # Dynamic adjustment of cognitive and social coefficients\n                adaptive_cognitive = self.cognitive_coef * (1 - np.log1p(self.evaluations) / np.log1p(self.budget))\n                adaptive_social = self.social_coef * (np.log1p(self.evaluations) / np.log1p(self.budget))\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = np.clip(inertia + cognitive + social, -self.velocity_clamp, self.velocity_clamp)\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhance exploration and exploitation by dynamically adjusting swarm size and social-cognitive coefficients based on function evaluations.", "configspace": "", "generation": 98, "fitness": 0.30391250460252794, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.27.", "error": "", "parent_id": "24661f22-483a-4940-bc4c-8731da622244", "metadata": {"aucs": [0.8858066224573684, 0.8636953922279517, 0.8570888169985282, 0.8749790336911273, 0.190361352734554, 0.8548431791182356, 0.8818381502495355, 0.8360922337533927, 0.8766133973723693, 0.0740245993309625, 9.999999999998899e-05, 9.999999999998899e-05, 0.06593738306919827, 0.7479207072740638, 9.999999999998899e-05, 0.7791876337390017, 0.05478397327008011, 0.05383756515659366, 0.09273573231218502, 0.1272919343949247, 0.15040988732104377, 0.1312334071925645, 0.1529039231320123, 0.07376375047751171, 0.14823718520488782, 0.05169267592475113, 0.14873382789839684, 0.08793383022055079, 0.6905971617096268, 0.15275184132394293, 0.13969755344945312, 0.13211182213253447, 0.11070168007377068, 0.12093436168141203, 0.14283264268048557, 0.1024726764276136, 0.9916733256313084, 0.9868032307424487, 0.9912146460166952, 0.9914084456173962, 0.9905292027206457, 0.9858611766334463, 0.9853992572119853, 0.989555330709814, 0.9848462417818992, 0.7034402634817134, 0.6734656691649541, 0.7029888955172241, 0.15083189100557826, 0.6891450991677287, 0.15067001462337526, 0.7505978033787395, 0.08829370038709816, 0.08890079249483718, 0.24231006357395668, 0.8122883308710012, 0.3734283689862078, 0.38154025819505666, 0.11647422538335617, 0.19394189711009735, 0.06992829457000549, 0.1772677498141828, 0.8540219132450713, 0.30202431208258507, 0.305105192616413, 0.30311000587761516, 0.10541609374096084, 0.1277146858163991, 0.24519319238866233, 0.31503287084410025, 0.31480856539361435, 0.2854494403483542, 0.2304116374035159, 0.14638667678278294, 0.23843664435751377, 0.26958310364973836, 0.3364438051284844, 0.29987954250948734, 0.27890280017448266, 9.999999999998899e-05, 0.3359125784848377, 9.999999999998899e-05, 0.007239845632709518, 0.042563799115689305, 9.999999999998899e-05, 0.024911827286205335, 0.018108934218995953, 0.06069761107275684, 0.004255700531108575, 0.25667809003819775, 0.15822208286815242, 0.0724263381330591, 0.14122507580494925, 0.21996061839017178, 0.012164316948246934, 0.07038316764521901, 0.15674604821273064, 0.007929916777444701, 0.10025418680193399, 0.0472476979356834, 0.05083241069318989, 0.1705306192369671, 0.2561791688024826, 0.09452265449583352, 0.07648384258368568, 0.07563497450902246, 0.2600486853907994, 0.11057474113049137, 0.3112917504837097, 0.1486386134685852, 0.13925586000919432, 9.999999999998899e-05, 0.17696872352422743, 0.1951580588913786, 0.14791656999812586, 0.08322699258775779, 0.0821686643038092, 0.6414266088533334, 0.6040598285512295, 0.5825998474535709, 0.6608143882408479, 0.5514718351779155, 0.5300721771935328, 0.6148953021478052, 0.5639033737201244, 0.6025916665451608, 0.0830518550908117, 0.1173142424008281, 0.09512658705411103, 0.14976805759918477, 0.11235680917617352, 0.10089447276874086, 0.10767193504434314, 0.12117209056664302, 0.10418771407329186, 0.21658907185175524, 0.37671512420082964, 0.16509072434491956, 0.6300474046045317, 0.268979564316986, 0.3115262467009853, 0.2831291714653972, 0.20267498069422896, 0.18755126933893795, 0.3563531145240756, 0.4789379121587616, 0.4259373069531047, 0.45505004954750194, 0.4766642748873582, 0.36511695779272035, 0.4534497979876889, 0.5097216336385563, 0.5867014284336796, 0.29507837995882524, 0.2389331272166222, 0.2603646473935495, 0.2988649058832963, 0.21223524123512294, 0.18688196660890266, 0.29002816140831966, 0.3385830459009056, 0.2546768501132608, 0.18997996167536946, 0.20514706093828528, 0.23085341814914673, 0.22949931069559415, 0.20211783196996624, 0.2032838028496654, 0.24454367156528267, 0.28390856351216975, 0.26253899942261305, 0.7471898560964555, 0.20746430635831026, 0.24212154714811318, 0.1943667789552992, 0.20540493435955198, 0.22057642059743776, 0.23218389599717093, 0.6916299003487264, 0.22070384840437718, 0.1879477913960067, 0.1726420630957045, 0.17025299073863243, 0.9316803838564496, 0.20048157297257363, 0.8843339938950935, 0.17211818613266971, 0.14454893460918317, 0.16291227314210077, 0.8661760236129635, 0.10846533632278221, 0.7345262821378806, 0.1552554393177923, 0.16753509760185903, 0.2131118222636913, 0.8557865737505508, 0.20975535604808726, 0.16797842385081185, 0.21854170973974807, 0.21847449143727304, 0.20172495123475387, 0.18861507286051116, 0.19095978077283648, 0.1775689669623891, 0.20489325921784018, 0.1863029435314395, 0.1942090839861591, 0.0989225586432333, 0.10402243265868838, 0.09529311491911119, 0.10751987779119576, 0.12295069908252865, 0.08419597454279792, 0.08880248704531912, 0.09172954693025226, 0.09025948102460757]}, "mutation_prompt": null}
{"id": "cfa886f9-f915-4ecf-b2fb-c847b9418c09", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.swarm_size = max(5, 2 * self.dim)\n        self.inertia_weight = 0.9\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.best_global_position = None\n        self.best_global_value = np.inf\n        self.evaluations = 0\n        self.velocity_clamp = (self.upper_bound - self.lower_bound) / 2  # Adaptive velocity clamping\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.swarm_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.swarm_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_values = np.full(self.swarm_size, np.inf)\n\n        while self.evaluations < self.budget:\n            for i in range(self.swarm_size):\n                current_value = func(positions[i])\n                self.evaluations += 1\n                \n                if current_value < personal_best_values[i]:\n                    personal_best_values[i] = current_value\n                    personal_best_positions[i] = positions[i]\n\n                if current_value < self.best_global_value:\n                    self.best_global_value = current_value\n                    self.best_global_position = positions[i]\n\n            self.inertia_weight = 0.9 * (0.99 ** (self.evaluations / self.budget))  # Inertia weight decay\n\n            for i in range(self.swarm_size):\n                adaptive_cognitive = self.cognitive_coef * (1 - (self.evaluations / self.budget))\n                adaptive_social = self.social_coef * (self.evaluations / self.budget)\n\n                inertia = self.inertia_weight * velocities[i]\n                cognitive = adaptive_cognitive * np.random.rand(self.dim) * (personal_best_positions[i] - positions[i])\n                social = adaptive_social * np.random.rand(self.dim) * (self.best_global_position - positions[i])\n                velocities[i] = np.clip(inertia + cognitive + social, -self.velocity_clamp, self.velocity_clamp)\n                positions[i] += velocities[i]\n\n                positions[i] = np.clip(positions[i], self.lower_bound, self.upper_bound)\n\n            dynamic_mutation_factor = 0.5 + 0.3 * (1 - (self.evaluations / self.budget))\n            dynamic_recombination_rate = 0.7 + 0.2 * (self.evaluations / self.budget)\n\n            for i in range(self.swarm_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.swarm_size), i), 3, replace=False)\n                mutant_vector = np.clip(personal_best_positions[a] + \n                                        dynamic_mutation_factor * (personal_best_positions[b] - personal_best_positions[c]),\n                                        self.lower_bound, self.upper_bound)\n                trial_vector = np.where(np.random.rand(self.dim) < dynamic_recombination_rate, mutant_vector, positions[i])\n                \n                trial_value = func(trial_vector)\n                self.evaluations += 1\n                \n                if trial_value < personal_best_values[i]:\n                    positions[i] = trial_vector\n                    personal_best_values[i] = trial_value\n                    personal_best_positions[i] = trial_vector\n\n                    if trial_value < self.best_global_value:\n                        self.best_global_value = trial_value\n                        self.best_global_position = trial_vector\n\n        return self.best_global_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive velocity clamping and inertia weight decay for improved convergence.", "configspace": "", "generation": 91, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "24661f22-483a-4940-bc4c-8731da622244", "metadata": {"aucs": [0.9114583042674573, 0.9124168846169535, 0.9043209930245285, 0.9191530144260356, 0.9056703419653467, 0.9245491880272814, 0.9152236719380243, 0.9130920982266659, 0.9100670880858112, 0.8376301325296708, 0.6445905461583405, 0.8288974657206021, 0.8537285362781935, 0.04751769878933232, 0.8383736791435551, 0.8325509356930274, 0.8381769858203926, 0.8404941784049755, 0.14227216813598476, 0.5266274764445191, 0.16225003078791056, 0.1564546763057264, 0.1576713412620988, 0.6758595419313065, 0.16290686855286307, 0.15168901902571053, 0.13321196821531578, 0.13544463723267475, 0.11175903144746391, 0.11813008362991873, 0.13408401021340655, 0.14934054610876168, 0.12084436113307218, 0.12800307672015643, 0.46211760403634794, 0.14097842022321694, 0.9671199231290751, 0.9739763609526687, 0.9774195080502808, 0.9893611118720099, 0.9862955729395827, 0.9772355616985482, 0.9823706321732472, 0.9846608783416418, 0.9763507695473238, 0.833214948594697, 0.7952189811526589, 0.8039697202876739, 0.8377994548856182, 0.7115473529528462, 0.7786258544361756, 0.8054845658543405, 0.7742397622235703, 0.7272492163624128, 0.3798852302483453, 0.8142478929424037, 0.8244945741081955, 0.856427452456002, 0.1590133896323117, 0.7342903419132828, 0.8767856299570215, 0.9084384690882178, 0.3079948654909841, 0.30679539702044856, 0.5550720280918194, 0.13107868950137125, 0.1327393919197728, 0.37428376445498546, 0.3567763400901932, 0.5875358992986157, 0.44523546572464756, 0.40105952824344526, 0.322653796346953, 0.12288218213760227, 0.13570853405440686, 0.4071303619299015, 0.45462226703415787, 0.4174292923538171, 0.4013222475039042, 0.1332503261112561, 0.37228192470302335, 0.24393950369326622, 0.11544830626711533, 0.1641468305232644, 0.06043860888689401, 0.07291939749766274, 0.05741598405966375, 0.22162346904406116, 0.03945064968919154, 0.006320970828495809, 0.16567704842237363, 0.2154422876068719, 0.2864561917050643, 0.14869725923925148, 0.0799325816276436, 0.18984220600008617, 0.11190300219393445, 0.2265073238792501, 0.3026227136731796, 0.05443549028139727, 0.06824409334684478, 0.08105144146107146, 0.08061482883875293, 0.1888319881383569, 0.3034131679021066, 0.12573535645085177, 0.10812521769689432, 0.20919887218028377, 0.20771567383102763, 0.3908331524464631, 0.2995325903235061, 0.28309490006754556, 0.2917670417679816, 0.30261231728497595, 0.2550970074893003, 0.3120747299975717, 0.18584533653459623, 0.7588327403611625, 0.6934063359771336, 0.7922199089959421, 0.5690703348878235, 0.615155048226992, 0.7072945151372608, 0.7004631672775199, 0.6276361474344642, 0.7334230398661716, 0.15041261461016797, 0.11684734834894173, 0.10681382020419072, 0.11626329889092635, 0.14682424043903086, 0.1375948259096087, 0.10273322587345646, 0.10854219636103757, 0.10434279403963553, 0.24713898722482397, 0.19110342343781572, 0.3241193114707759, 0.20353925146173946, 0.17552383629944868, 0.2895394728383952, 0.202885062174035, 0.20136946699310276, 0.1858856997377718, 0.6502229254661223, 0.5383773594578966, 0.4656300604980631, 0.45962096866032975, 0.4389494349494152, 0.4663518240659784, 0.5749532145926798, 0.7036278959059591, 0.4742006460830275, 0.39096041949933236, 0.33782134493934723, 0.3840551824664866, 0.3210382920512005, 0.42946027893125416, 0.41883245808380676, 0.4500005850673878, 0.4046762882678375, 0.4960434127973222, 0.2094228715269183, 0.20648666936196436, 0.22497204938361282, 0.22925995781349107, 0.20749477489379953, 0.21364223626212597, 0.22011623543288683, 0.2172472972513545, 0.22991846760556478, 0.7292205306024458, 0.1925171622887326, 0.6246369862187704, 0.24752768091674604, 0.19793053755395928, 0.24518459516542457, 0.24259632396104336, 0.2287575623067506, 0.2015519515729155, 0.908768720078369, 0.16794641839201707, 0.17168959363853298, 0.7681990039234595, 0.1883257025223367, 0.879461783229896, 0.15663745336594037, 0.17134386020888592, 0.9131367316632499, 0.8464944996076633, 0.20820642327018535, 0.20635061511401254, 0.20718123110055242, 0.8408127906302636, 0.20922347660161378, 0.15448290364842887, 0.15660734788220876, 0.8041922009508706, 0.2177268124743872, 0.2672259865340888, 0.17268448750320364, 0.1985652652427894, 0.16949472023532453, 0.19254184431882737, 0.20919615600875519, 0.17564382515536603, 0.1767715601237858, 0.08807204508046163, 0.0875789757637927, 0.08839458492121244, 0.08698565402894132, 0.08680156621140633, 0.10040482434826503, 0.09072016531601423, 0.08866770085576792, 0.09056497537152097]}, "mutation_prompt": null}
