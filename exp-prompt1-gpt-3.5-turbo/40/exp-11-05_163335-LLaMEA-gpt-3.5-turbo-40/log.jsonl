{"id": "6b098ed2-99be-49a4-9e0a-a213a69d210d", "solution": "import numpy as np\n\nclass DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), -5.0, 5.0)\n                if np.random.rand() < self.CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest):\n            for i in range(self.npop):\n                velocity[i] = self.w * velocity[i] + self.c1 * np.random.rand() * (pbest[i] - pop[i]) + self.c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            pop, pbest, gbest = mutate(pbest, gbest, pop)\n            velocity = update_velocity(pbest, pop, velocity, gbest)\n            pop += velocity\n        \n        return gbest", "name": "DE_PSO_Optimizer", "description": "A Novel Hybrid Metaheuristic Algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) for efficient global optimization.", "configspace": "", "generation": 0, "fitness": 0.17695383511327772, "feedback": "The algorithm DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": null, "metadata": {"aucs": [0.40570495824440833, 0.36693818103325637, 0.37155929400979393, 0.3601811873617382, 0.35830257139296884, 0.3816845606616277, 0.3150091038195296, 0.345021555141206, 0.3599665196551226, 0.04078902424213249, 0.05052609897945726, 0.034290442442944546, 0.04059491392934378, 0.017605703985658527, 0.07546536598484055, 0.04052387103282529, 0.07880147550387517, 0.03362554658934569, 0.058705115413758335, 0.06832402431772899, 0.07982461389346973, 0.06056663118209038, 0.06933784436264867, 0.07453332426800263, 0.06207714364857564, 0.0833698385117192, 0.07314727822228217, 0.07507018575399216, 0.0652287677686958, 0.0640449264165811, 0.06015204690310716, 0.05728900362136269, 0.04789233608403298, 0.07493418403771213, 0.07660009046839844, 0.04950644561042794, 0.9585917871777293, 0.8767341097842777, 0.8877781680306214, 0.7670951381350665, 0.9221596548097767, 0.8112252932684871, 0.9376670744636653, 0.8283204341660898, 0.9229730518557704, 0.16658672651322393, 0.13805099840382684, 0.1386753234581667, 0.16437090772880258, 0.13618121796345928, 0.18218663693011006, 0.1390052021591186, 0.19823534991444425, 0.15749378425097094, 0.37246763104961167, 0.228614178355926, 0.24451096276402562, 0.25936832894363904, 0.2321545876052964, 0.26255070799079416, 0.23319858735507581, 0.26567955313589353, 0.29373350069070425, 0.10524428982365297, 0.09677091401738258, 0.11719272553979954, 0.05690503146792436, 0.15933262183904284, 0.0833136277019838, 0.1148947044427423, 0.1094708051251273, 0.13222063364825698, 0.12042034999286921, 0.10899859957952063, 0.07132297321242909, 0.1513385815761651, 0.10063788598795675, 0.12687898286906096, 0.11971159435104417, 0.12532206206106145, 0.12234273530310125, 0.0667766782427297, 0.02448639949166498, 0.03656779342816441, 0.02395457256314637, 0.0267652200831644, 0.03144484084303967, 0.03649205358503982, 0.009084201796820013, 0.04300589783261599, 0.14875939989582854, 0.057381328635922046, 0.08921555709056994, 0.06307810659699842, 0.10273032537361526, 0.04526591857510698, 0.09300319251643063, 0.08952275792786568, 0.12415851096629726, 9.999999999998899e-05, 0.0013259232882839589, 9.999999999998899e-05, 0.00725468539375107, 9.999999999998899e-05, 0.0014781647742947435, 0.003668313698407699, 9.999999999998899e-05, 9.999999999998899e-05, 0.07594852413020925, 0.07433604882669931, 0.07600751639972403, 0.05015801487907334, 0.08950136623001692, 0.08678635605313179, 0.09841683123114431, 0.0633096330937819, 0.06668498236545417, 0.3237932595681715, 0.3572598433338129, 0.3412002517104731, 0.3112217214615254, 0.3362937417011782, 0.29611455621976535, 0.35426362793546606, 0.30907615413777056, 0.33551853428595546, 0.06855935845144956, 0.08788758931116414, 0.07697780562836909, 0.08771496822693903, 0.07518215154073116, 0.0732325362109203, 0.08097491589779571, 0.07206166695906124, 0.08026402057833526, 0.1313823714494372, 0.12814590786055435, 0.13525777492878333, 0.16576936456693858, 0.12147504350138838, 0.1225431684336763, 0.13249855965170498, 0.12694352665060182, 0.1420357243333501, 0.21456039924803527, 0.23228225776354916, 0.2206370941112279, 0.2451294584490339, 0.20518328972085997, 0.18886017954156464, 0.24385497561616132, 0.22389550438091055, 0.21906999341667122, 0.16573604219165738, 0.1804296397608296, 0.16219645648478143, 0.18435380873698304, 0.1784491657013596, 0.17557526795496214, 0.18642002166247806, 0.16008882318298456, 0.1787733861586538, 0.17758101778851088, 0.17851726608196727, 0.18962933846519725, 0.17609073302085032, 0.1719212194991433, 0.16933456563781601, 0.23380051638445454, 0.2076568209998555, 0.16781650760848477, 0.166949095434746, 0.1677076534385351, 0.1617983174850961, 0.17327034160373367, 0.16153208274944686, 0.16300490042238613, 0.16565363717080617, 0.1656345701943145, 0.1606611395599683, 0.17339876278354482, 0.20572495305482308, 0.1469339811056225, 0.16514601713835686, 0.18155906281391487, 0.18019441644552026, 0.1359124265156002, 0.18512893600900093, 0.20265137948800394, 0.5513874030853535, 0.15134209806138044, 0.41787981946650343, 0.11729463488826608, 0.23816412451029634, 0.18805175409862163, 0.5199014513776345, 0.1343100806792843, 0.12250057216382415, 0.17558950095746206, 0.17681287834907167, 0.17218120370222345, 0.16550306783785096, 0.16583310427142972, 0.18644573096739592, 0.20085358665675312, 0.16804119641917026, 0.17400477811745696, 0.06442361797186835, 0.05570813958728871, 0.05826575214035856, 0.06168125404610181, 0.07131107207089138, 0.06965496346295064, 0.0647712761385254, 0.06610454210931749, 0.07746590806563214]}, "mutation_prompt": null}
{"id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improved DE_PSO_Optimizer by incorporating a dynamic adaptation of DE and PSO parameters during optimization to enhance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": 0.21651938992378972, "feedback": "The algorithm Dynamic_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "6b098ed2-99be-49a4-9e0a-a213a69d210d", "metadata": {"aucs": [0.4761725772796388, 0.49330598676782855, 0.610710160337876, 0.5168857467674808, 0.5750125882924857, 0.5008599641883471, 0.47618386951607783, 0.5691037369244569, 0.5964061237674252, 0.16076741515430804, 0.026255501350947674, 9.999999999998899e-05, 9.999999999998899e-05, 0.03561951389306284, 9.999999999998899e-05, 0.026444373545261413, 0.08227280777869816, 9.999999999998899e-05, 0.08250793964226655, 0.11890230810445013, 0.09465415183275894, 0.0820471974823962, 0.06545350535422678, 0.11783802513898323, 0.08263852515260228, 0.0899688632404011, 0.07883818268876297, 0.09573391089739003, 0.0716790274466006, 0.06217335054691975, 0.08106453432528649, 0.03405814242678573, 0.06370459488399915, 0.09511298118987654, 0.07284639412120142, 0.06997418391131782, 0.9277904489742702, 0.8596079408959093, 0.9487649774264948, 0.7709139906720786, 0.8614589200111302, 0.8885752425742293, 0.9309302978472149, 0.8452950090104351, 0.9081941553616775, 0.18193593379211292, 0.23812749398703725, 0.143771463902299, 0.18116478818124926, 0.16303282971986832, 0.23953024044460025, 0.2633778751693441, 0.2884270825737255, 0.2198554849773976, 0.2339531747279009, 0.1689014272802849, 0.2847473071714156, 0.3394520799851538, 0.6923132118343542, 0.33510136929556644, 0.26777608548060594, 0.2128541928066312, 0.6620522622148248, 0.16734788046587223, 0.1313786530883947, 0.13110671729176715, 0.16071144548465932, 0.1637914936863255, 0.10603298424515162, 0.16044336155318983, 0.13441006726938598, 0.13532990190252003, 0.15181409640059684, 0.16593387474436783, 0.3351156966606069, 0.19807931426602543, 0.11540818509420736, 0.10132011164360444, 0.17846718521061122, 0.11617854865019239, 0.11476412578104267, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792818339823218, 0.04730580089897907, 9.999999999998899e-05, 0.01580448275252022, 0.0028927217460826826, 0.07704660847810696, 0.08078147852994466, 0.16309730398268818, 0.056153075859784796, 0.10680447128570125, 0.10407319773026624, 0.029389216031968646, 0.035418202719721514, 0.2541524038609839, 0.11180667078228834, 0.1001025584348294, 0.03858303660323237, 0.04908420294595439, 0.036672599551710094, 0.038252368481453414, 0.089038107985968, 0.0488504852012831, 0.11179618103364375, 0.037694299623098226, 0.08687889611486821, 0.08580432995244391, 0.14844211362506698, 0.06333651445912769, 0.1399437233125378, 0.13762668354051444, 0.11311554317407302, 0.07751799768262135, 0.09285214895462635, 0.17752535622444887, 0.27621460260276676, 0.39695328211492653, 0.4185100962661914, 0.37940658828693996, 0.43029014764367735, 0.3549454188244492, 0.3683897839823729, 0.3963402472930816, 0.4620025931863301, 0.1360523321096212, 0.10469338287742846, 0.115324135145635, 0.10995250020019032, 0.1507418587608712, 0.09035302940867462, 0.05950665372693387, 0.1296645248350614, 0.1143448498987727, 0.17539649587698225, 0.12946966453037134, 0.16091880942926395, 0.1754719657644862, 0.19942842710884467, 0.1422775851286322, 0.15104441318401896, 0.13053308063815916, 0.22301801053388426, 0.2332375926828414, 0.24118952022830598, 0.26266867095591173, 0.25720480290443715, 0.29861275643440455, 0.24610490870326895, 0.2423150874061044, 0.2997859018577026, 0.19621106887851958, 0.1924928610026444, 0.17463927508815136, 0.21234627231871817, 0.1830836170479302, 0.192646820717977, 0.2799979936164897, 0.21436764181000356, 0.20707842825529288, 0.18812152731914134, 0.18930147222558313, 0.18287126993837433, 0.1772285299455172, 0.1870966245606125, 0.17100229440844028, 0.16999476027415017, 0.17744395560067028, 0.17180889425103962, 0.1757752019039457, 0.18471115815682837, 0.18695775112980206, 0.18405784380645562, 0.17877215768830412, 0.1665769552670897, 0.17228023163242978, 0.18327595226269233, 0.17896552770976837, 0.18701345566047456, 0.1285177260352831, 0.16832778629877554, 0.14813345072892747, 0.7397991180632475, 0.1944102121993715, 0.7047284587760303, 0.11897868918084564, 0.17255654399096676, 0.27773944213096247, 0.6811390877462962, 0.15311285613353542, 0.4055657955888512, 0.20045987219493466, 0.16097798173458144, 0.19942278554901294, 0.6811939856607508, 0.15341995052266522, 0.6051313634173514, 0.16384223483238058, 0.1945206481639037, 0.17544932352215004, 0.17353736915862827, 0.18831581399752262, 0.15491283783377807, 0.17501434711224828, 0.17237399442218926, 0.18426011069596082, 0.08240109546941987, 0.09575524134604152, 0.06482000561156642, 0.07622615094206175, 0.08016761566222008, 0.07495351616050161, 0.08097947886824097, 0.07754460637927807, 0.06245573515019165]}, "mutation_prompt": null}
{"id": "5c1c0b1a-7758-4f13-97b3-1d0f2a4b1e7f", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improved DE_PSO_Optimizer by incorporating a dynamic adaptation of DE and PSO parameters during optimization to enhance exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.4761725772796388, 0.49330598676782855, 0.610710160337876, 0.5168857467674808, 0.5750125882924857, 0.5008599641883471, 0.47618386951607783, 0.5691037369244569, 0.5964061237674252, 0.16076741515430804, 0.026255501350947674, 9.999999999998899e-05, 9.999999999998899e-05, 0.03561951389306284, 9.999999999998899e-05, 0.026444373545261413, 0.08227280777869816, 9.999999999998899e-05, 0.08250793964226655, 0.11890230810445013, 0.09465415183275894, 0.0820471974823962, 0.06545350535422678, 0.11783802513898323, 0.08263852515260228, 0.0899688632404011, 0.07883818268876297, 0.09573391089739003, 0.0716790274466006, 0.06217335054691975, 0.08106453432528649, 0.03405814242678573, 0.06370459488399915, 0.09511298118987654, 0.07284639412120142, 0.06997418391131782, 0.9277904489742702, 0.8596079408959093, 0.9487649774264948, 0.7709139906720786, 0.8614589200111302, 0.8885752425742293, 0.9309302978472149, 0.8452950090104351, 0.9081941553616775, 0.18193593379211292, 0.23812749398703725, 0.143771463902299, 0.18116478818124926, 0.16303282971986832, 0.23953024044460025, 0.2633778751693441, 0.2884270825737255, 0.2198554849773976, 0.2339531747279009, 0.1689014272802849, 0.2847473071714156, 0.3394520799851538, 0.6923132118343542, 0.33510136929556644, 0.26777608548060594, 0.2128541928066312, 0.6620522622148248, 0.16734788046587223, 0.1313786530883947, 0.13110671729176715, 0.16071144548465932, 0.1637914936863255, 0.10603298424515162, 0.16044336155318983, 0.13441006726938598, 0.13532990190252003, 0.15181409640059684, 0.16593387474436783, 0.3351156966606069, 0.19807931426602543, 0.11540818509420736, 0.10132011164360444, 0.17846718521061122, 0.11617854865019239, 0.11476412578104267, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792818339823218, 0.04730580089897907, 9.999999999998899e-05, 0.01580448275252022, 0.0028927217460826826, 0.07704660847810696, 0.08078147852994466, 0.16309730398268818, 0.056153075859784796, 0.10680447128570125, 0.10407319773026624, 0.029389216031968646, 0.035418202719721514, 0.2541524038609839, 0.11180667078228834, 0.1001025584348294, 0.03858303660323237, 0.04908420294595439, 0.036672599551710094, 0.038252368481453414, 0.089038107985968, 0.0488504852012831, 0.11179618103364375, 0.037694299623098226, 0.08687889611486821, 0.08580432995244391, 0.14844211362506698, 0.06333651445912769, 0.1399437233125378, 0.13762668354051444, 0.11311554317407302, 0.07751799768262135, 0.09285214895462635, 0.17752535622444887, 0.27621460260276676, 0.39695328211492653, 0.4185100962661914, 0.37940658828693996, 0.43029014764367735, 0.3549454188244492, 0.3683897839823729, 0.3963402472930816, 0.4620025931863301, 0.1360523321096212, 0.10469338287742846, 0.115324135145635, 0.10995250020019032, 0.1507418587608712, 0.09035302940867462, 0.05950665372693387, 0.1296645248350614, 0.1143448498987727, 0.17539649587698225, 0.12946966453037134, 0.16091880942926395, 0.1754719657644862, 0.19942842710884467, 0.1422775851286322, 0.15104441318401896, 0.13053308063815916, 0.22301801053388426, 0.2332375926828414, 0.24118952022830598, 0.26266867095591173, 0.25720480290443715, 0.29861275643440455, 0.24610490870326895, 0.2423150874061044, 0.2997859018577026, 0.19621106887851958, 0.1924928610026444, 0.17463927508815136, 0.21234627231871817, 0.1830836170479302, 0.192646820717977, 0.2799979936164897, 0.21436764181000356, 0.20707842825529288, 0.18812152731914134, 0.18930147222558313, 0.18287126993837433, 0.1772285299455172, 0.1870966245606125, 0.17100229440844028, 0.16999476027415017, 0.17744395560067028, 0.17180889425103962, 0.1757752019039457, 0.18471115815682837, 0.18695775112980206, 0.18405784380645562, 0.17877215768830412, 0.1665769552670897, 0.17228023163242978, 0.18327595226269233, 0.17896552770976837, 0.18701345566047456, 0.1285177260352831, 0.16832778629877554, 0.14813345072892747, 0.7397991180632475, 0.1944102121993715, 0.7047284587760303, 0.11897868918084564, 0.17255654399096676, 0.27773944213096247, 0.6811390877462962, 0.15311285613353542, 0.4055657955888512, 0.20045987219493466, 0.16097798173458144, 0.19942278554901294, 0.6811939856607508, 0.15341995052266522, 0.6051313634173514, 0.16384223483238058, 0.1945206481639037, 0.17544932352215004, 0.17353736915862827, 0.18831581399752262, 0.15491283783377807, 0.17501434711224828, 0.17237399442218926, 0.18426011069596082, 0.08240109546941987, 0.09575524134604152, 0.06482000561156642, 0.07622615094206175, 0.08016761566222008, 0.07495351616050161, 0.08097947886824097, 0.07754460637927807, 0.06245573515019165]}, "mutation_prompt": null}
{"id": "2e485915-a8c2-4f22-b1be-d1b0a768797d", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improved DE_PSO_Optimizer by incorporating a dynamic adaptation of DE and PSO parameters during optimization to enhance exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.4761725772796388, 0.49330598676782855, 0.610710160337876, 0.5168857467674808, 0.5750125882924857, 0.5008599641883471, 0.47618386951607783, 0.5691037369244569, 0.5964061237674252, 0.16076741515430804, 0.026255501350947674, 9.999999999998899e-05, 9.999999999998899e-05, 0.03561951389306284, 9.999999999998899e-05, 0.026444373545261413, 0.08227280777869816, 9.999999999998899e-05, 0.08250793964226655, 0.11890230810445013, 0.09465415183275894, 0.0820471974823962, 0.06545350535422678, 0.11783802513898323, 0.08263852515260228, 0.0899688632404011, 0.07883818268876297, 0.09573391089739003, 0.0716790274466006, 0.06217335054691975, 0.08106453432528649, 0.03405814242678573, 0.06370459488399915, 0.09511298118987654, 0.07284639412120142, 0.06997418391131782, 0.9277904489742702, 0.8596079408959093, 0.9487649774264948, 0.7709139906720786, 0.8614589200111302, 0.8885752425742293, 0.9309302978472149, 0.8452950090104351, 0.9081941553616775, 0.18193593379211292, 0.23812749398703725, 0.143771463902299, 0.18116478818124926, 0.16303282971986832, 0.23953024044460025, 0.2633778751693441, 0.2884270825737255, 0.2198554849773976, 0.2339531747279009, 0.1689014272802849, 0.2847473071714156, 0.3394520799851538, 0.6923132118343542, 0.33510136929556644, 0.26777608548060594, 0.2128541928066312, 0.6620522622148248, 0.16734788046587223, 0.1313786530883947, 0.13110671729176715, 0.16071144548465932, 0.1637914936863255, 0.10603298424515162, 0.16044336155318983, 0.13441006726938598, 0.13532990190252003, 0.15181409640059684, 0.16593387474436783, 0.3351156966606069, 0.19807931426602543, 0.11540818509420736, 0.10132011164360444, 0.17846718521061122, 0.11617854865019239, 0.11476412578104267, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792818339823218, 0.04730580089897907, 9.999999999998899e-05, 0.01580448275252022, 0.0028927217460826826, 0.07704660847810696, 0.08078147852994466, 0.16309730398268818, 0.056153075859784796, 0.10680447128570125, 0.10407319773026624, 0.029389216031968646, 0.035418202719721514, 0.2541524038609839, 0.11180667078228834, 0.1001025584348294, 0.03858303660323237, 0.04908420294595439, 0.036672599551710094, 0.038252368481453414, 0.089038107985968, 0.0488504852012831, 0.11179618103364375, 0.037694299623098226, 0.08687889611486821, 0.08580432995244391, 0.14844211362506698, 0.06333651445912769, 0.1399437233125378, 0.13762668354051444, 0.11311554317407302, 0.07751799768262135, 0.09285214895462635, 0.17752535622444887, 0.27621460260276676, 0.39695328211492653, 0.4185100962661914, 0.37940658828693996, 0.43029014764367735, 0.3549454188244492, 0.3683897839823729, 0.3963402472930816, 0.4620025931863301, 0.1360523321096212, 0.10469338287742846, 0.115324135145635, 0.10995250020019032, 0.1507418587608712, 0.09035302940867462, 0.05950665372693387, 0.1296645248350614, 0.1143448498987727, 0.17539649587698225, 0.12946966453037134, 0.16091880942926395, 0.1754719657644862, 0.19942842710884467, 0.1422775851286322, 0.15104441318401896, 0.13053308063815916, 0.22301801053388426, 0.2332375926828414, 0.24118952022830598, 0.26266867095591173, 0.25720480290443715, 0.29861275643440455, 0.24610490870326895, 0.2423150874061044, 0.2997859018577026, 0.19621106887851958, 0.1924928610026444, 0.17463927508815136, 0.21234627231871817, 0.1830836170479302, 0.192646820717977, 0.2799979936164897, 0.21436764181000356, 0.20707842825529288, 0.18812152731914134, 0.18930147222558313, 0.18287126993837433, 0.1772285299455172, 0.1870966245606125, 0.17100229440844028, 0.16999476027415017, 0.17744395560067028, 0.17180889425103962, 0.1757752019039457, 0.18471115815682837, 0.18695775112980206, 0.18405784380645562, 0.17877215768830412, 0.1665769552670897, 0.17228023163242978, 0.18327595226269233, 0.17896552770976837, 0.18701345566047456, 0.1285177260352831, 0.16832778629877554, 0.14813345072892747, 0.7397991180632475, 0.1944102121993715, 0.7047284587760303, 0.11897868918084564, 0.17255654399096676, 0.27773944213096247, 0.6811390877462962, 0.15311285613353542, 0.4055657955888512, 0.20045987219493466, 0.16097798173458144, 0.19942278554901294, 0.6811939856607508, 0.15341995052266522, 0.6051313634173514, 0.16384223483238058, 0.1945206481639037, 0.17544932352215004, 0.17353736915862827, 0.18831581399752262, 0.15491283783377807, 0.17501434711224828, 0.17237399442218926, 0.18426011069596082, 0.08240109546941987, 0.09575524134604152, 0.06482000561156642, 0.07622615094206175, 0.08016761566222008, 0.07495351616050161, 0.08097947886824097, 0.07754460637927807, 0.06245573515019165]}, "mutation_prompt": null}
{"id": "3dc5dc73-1d41-4096-af31-8507623244a6", "solution": "import numpy as np\n\nclass Hybrid_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c, d, e = pop[np.random.choice(idxs, 5, replace=False)]\n                mutant = np.clip(a + F * (b - c) + F * (d - e), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Hybrid_DE_PSO_Optimizer", "description": "Implementing a hybrid Differential Evolution (DE) and Particle Swarm Optimization (PSO) algorithm with adaptive control parameters and a novel mutation strategy for population update.", "configspace": "", "generation": 4, "fitness": 0.21648354705364184, "feedback": "The algorithm Hybrid_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.6211622414202516, 0.3851679341525551, 0.6071721274021353, 0.5027822547314735, 0.6003724575842255, 0.5204104028585521, 0.5732987368081577, 0.6295835734533196, 0.5419150433771381, 0.05069700222795814, 0.003514826710310226, 0.03248110695125128, 0.07214202270297232, 0.136609814752491, 0.011189940683217214, 0.06370247131825346, 0.0006994981691524904, 0.05173437457000796, 0.07532897182665399, 0.08508119311423001, 0.10171374533773014, 0.1285726303434752, 0.09330120195273339, 0.08380916066684607, 0.10843264132904207, 0.08946801776362867, 0.0965482351520377, 0.10019578453193756, 0.06309562969274707, 0.07884711751737017, 0.08817793997699719, 0.09915003517404786, 0.10222120496396203, 0.06611276895064033, 0.0726798058442808, 0.08113066837002958, 0.949454358275076, 0.9630096639629765, 0.9072801158178379, 0.6970656400026232, 0.8801229816818779, 0.9003734673316879, 0.9621204855264741, 0.8971895200248895, 0.931586503553304, 0.2923013368392021, 0.27487168784169236, 0.19442107842134815, 0.17359584123245908, 0.1730844694909185, 0.24413384335175015, 0.2839118963173074, 0.2678347570536892, 0.18742295461001734, 0.21282397698278033, 0.21588997922941378, 0.605341814467331, 0.6388982684511277, 0.19410207818503722, 0.200110203577211, 0.22153953063733356, 0.658109022329473, 0.7123560832569678, 0.14548389499635983, 0.1132647097104511, 0.0841394035802363, 0.12985712669988736, 0.11867369591460353, 9.999999999998899e-05, 0.12391442331508928, 0.09806824732966701, 0.18005652259894467, 0.1582159238362617, 0.11635492676400394, 0.10842563070071176, 0.1321761978470284, 0.12055416993348067, 0.1268842821545011, 0.12544165366093807, 0.07714294298350999, 0.09088954250629233, 0.05050762392219499, 0.0171752550514509, 0.0762008790523716, 0.048515924889770745, 0.07864212569536233, 0.033648069706633366, 0.034118624726671265, 0.03426623123864414, 9.999999999998899e-05, 0.08941314244722232, 0.09452576721455697, 0.07498585513707601, 0.1720893694464687, 0.13305494675288987, 0.030119482599074265, 0.036155914742820094, 0.056818212587061656, 0.17216102112284826, 0.08928199343712007, 0.019663405297984382, 0.09256987068286582, 0.05309104263997888, 0.08904813897286934, 0.028067027156263302, 0.15103276239041064, 0.06802424160530185, 0.05254051928720527, 0.10336942635802115, 0.1403425438709357, 0.05947472084154648, 0.1315573267707032, 0.07172541173196134, 0.09495975855600913, 0.18294597132929358, 0.09607442070269312, 0.14274646226265852, 0.3732709404715867, 0.43775924528663235, 0.43409042005663434, 0.3791114142017863, 0.4205359198983215, 0.3928342373906769, 0.3907562435605799, 0.4105050269679287, 0.35374359687299173, 0.08308621850387976, 0.07674676297722782, 0.087104368057068, 0.1410309138449959, 0.07238658019939537, 0.11513144039627243, 0.11283180525716685, 0.09059987863318342, 0.08545951758172943, 0.16250994875213365, 0.1399003166293039, 0.16757624027738272, 0.15055783486658092, 0.1408948526525381, 0.16623128187415315, 0.20084756109275792, 0.1615853394759581, 0.1647118828094164, 0.21014630295767966, 0.2431965814005238, 0.3048703493754309, 0.19367808922177654, 0.29714040946689546, 0.2664115958612788, 0.2820598148052542, 0.33199054019322927, 0.24032645235524486, 0.2157041380432253, 0.17981402401609414, 0.24383174316483713, 0.2627950817920497, 0.2401036356387083, 0.28185165653246536, 0.17984731761442763, 0.22189911527330752, 0.18978564390437636, 0.17698376159700113, 0.1639907084690183, 0.1832260889025843, 0.19949852031774107, 0.18996116505639793, 0.17577743019226055, 0.2077157438944205, 0.21263208164571035, 0.16489958898065582, 0.17868813417268048, 0.17063520464337711, 0.16725070988097723, 0.17655035467662206, 0.16909368772930755, 0.16314744074561693, 0.17820363651788118, 0.16356540180175083, 0.21961071894209094, 0.6458731049224178, 0.16532588440161455, 0.14839969831517597, 0.29531744436887963, 0.1682171624478982, 0.17375399705921246, 0.17211508742569692, 0.14745685858928592, 0.556449159718295, 0.7049187202895133, 0.201046571378946, 0.41711591692339023, 0.195597668808285, 0.15506140640808952, 0.14674999331637062, 0.12238553565400889, 0.1583493854963024, 0.601861909591419, 0.17756704753213615, 0.1742093253917848, 0.1819957765637037, 0.17189303496742725, 0.20076310601295055, 0.1562706087527056, 0.17945605711013035, 0.196848435443559, 0.17238672269269661, 0.07874110224905673, 0.051278883032276235, 0.06850625281886402, 0.06932700040098638, 0.07286200737342186, 0.06852020976411477, 0.0597922684274832, 0.07328526480906017, 0.06595397116577029]}, "mutation_prompt": null}
{"id": "a4cdea0e-7de4-431e-bb39-9ec170e2dd65", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improved DE_PSO_Optimizer by incorporating a dynamic adaptation of DE and PSO parameters during optimization to enhance exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.4761725772796388, 0.49330598676782855, 0.610710160337876, 0.5168857467674808, 0.5750125882924857, 0.5008599641883471, 0.47618386951607783, 0.5691037369244569, 0.5964061237674252, 0.16076741515430804, 0.026255501350947674, 9.999999999998899e-05, 9.999999999998899e-05, 0.03561951389306284, 9.999999999998899e-05, 0.026444373545261413, 0.08227280777869816, 9.999999999998899e-05, 0.08250793964226655, 0.11890230810445013, 0.09465415183275894, 0.0820471974823962, 0.06545350535422678, 0.11783802513898323, 0.08263852515260228, 0.0899688632404011, 0.07883818268876297, 0.09573391089739003, 0.0716790274466006, 0.06217335054691975, 0.08106453432528649, 0.03405814242678573, 0.06370459488399915, 0.09511298118987654, 0.07284639412120142, 0.06997418391131782, 0.9277904489742702, 0.8596079408959093, 0.9487649774264948, 0.7709139906720786, 0.8614589200111302, 0.8885752425742293, 0.9309302978472149, 0.8452950090104351, 0.9081941553616775, 0.18193593379211292, 0.23812749398703725, 0.143771463902299, 0.18116478818124926, 0.16303282971986832, 0.23953024044460025, 0.2633778751693441, 0.2884270825737255, 0.2198554849773976, 0.2339531747279009, 0.1689014272802849, 0.2847473071714156, 0.3394520799851538, 0.6923132118343542, 0.33510136929556644, 0.26777608548060594, 0.2128541928066312, 0.6620522622148248, 0.16734788046587223, 0.1313786530883947, 0.13110671729176715, 0.16071144548465932, 0.1637914936863255, 0.10603298424515162, 0.16044336155318983, 0.13441006726938598, 0.13532990190252003, 0.15181409640059684, 0.16593387474436783, 0.3351156966606069, 0.19807931426602543, 0.11540818509420736, 0.10132011164360444, 0.17846718521061122, 0.11617854865019239, 0.11476412578104267, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792818339823218, 0.04730580089897907, 9.999999999998899e-05, 0.01580448275252022, 0.0028927217460826826, 0.07704660847810696, 0.08078147852994466, 0.16309730398268818, 0.056153075859784796, 0.10680447128570125, 0.10407319773026624, 0.029389216031968646, 0.035418202719721514, 0.2541524038609839, 0.11180667078228834, 0.1001025584348294, 0.03858303660323237, 0.04908420294595439, 0.036672599551710094, 0.038252368481453414, 0.089038107985968, 0.0488504852012831, 0.11179618103364375, 0.037694299623098226, 0.08687889611486821, 0.08580432995244391, 0.14844211362506698, 0.06333651445912769, 0.1399437233125378, 0.13762668354051444, 0.11311554317407302, 0.07751799768262135, 0.09285214895462635, 0.17752535622444887, 0.27621460260276676, 0.39695328211492653, 0.4185100962661914, 0.37940658828693996, 0.43029014764367735, 0.3549454188244492, 0.3683897839823729, 0.3963402472930816, 0.4620025931863301, 0.1360523321096212, 0.10469338287742846, 0.115324135145635, 0.10995250020019032, 0.1507418587608712, 0.09035302940867462, 0.05950665372693387, 0.1296645248350614, 0.1143448498987727, 0.17539649587698225, 0.12946966453037134, 0.16091880942926395, 0.1754719657644862, 0.19942842710884467, 0.1422775851286322, 0.15104441318401896, 0.13053308063815916, 0.22301801053388426, 0.2332375926828414, 0.24118952022830598, 0.26266867095591173, 0.25720480290443715, 0.29861275643440455, 0.24610490870326895, 0.2423150874061044, 0.2997859018577026, 0.19621106887851958, 0.1924928610026444, 0.17463927508815136, 0.21234627231871817, 0.1830836170479302, 0.192646820717977, 0.2799979936164897, 0.21436764181000356, 0.20707842825529288, 0.18812152731914134, 0.18930147222558313, 0.18287126993837433, 0.1772285299455172, 0.1870966245606125, 0.17100229440844028, 0.16999476027415017, 0.17744395560067028, 0.17180889425103962, 0.1757752019039457, 0.18471115815682837, 0.18695775112980206, 0.18405784380645562, 0.17877215768830412, 0.1665769552670897, 0.17228023163242978, 0.18327595226269233, 0.17896552770976837, 0.18701345566047456, 0.1285177260352831, 0.16832778629877554, 0.14813345072892747, 0.7397991180632475, 0.1944102121993715, 0.7047284587760303, 0.11897868918084564, 0.17255654399096676, 0.27773944213096247, 0.6811390877462962, 0.15311285613353542, 0.4055657955888512, 0.20045987219493466, 0.16097798173458144, 0.19942278554901294, 0.6811939856607508, 0.15341995052266522, 0.6051313634173514, 0.16384223483238058, 0.1945206481639037, 0.17544932352215004, 0.17353736915862827, 0.18831581399752262, 0.15491283783377807, 0.17501434711224828, 0.17237399442218926, 0.18426011069596082, 0.08240109546941987, 0.09575524134604152, 0.06482000561156642, 0.07622615094206175, 0.08016761566222008, 0.07495351616050161, 0.08097947886824097, 0.07754460637927807, 0.06245573515019165]}, "mutation_prompt": null}
{"id": "683646fb-6ec4-43ab-a02b-beff8895decc", "solution": "import numpy as np\n\nclass Enhanced_Opposition_DE_PSO_Optimizer(Dynamic_DE_PSO_Optimizer):\n    def mutate(pbest, gbest, pop, F, CR):\n        mutant_pop = []\n        for i in range(self.npop):\n            idxs = [idx for idx in range(self.npop) if idx != i]\n            a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n            mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n            if np.random.rand() < CR:\n                mutant = np.clip(mutant, -5.0, 5.0)\n            else:\n                mutant = pop[i]\n            if func(mutant) < func(pop[i]):\n                pop[i] = mutant\n            if func(mutant) < func(pbest[i]):\n                pbest[i] = mutant\n            if func(mutant) < func(gbest):\n                gbest = mutant\n            # Opposite direction mutation\n            opposite_mutant = np.clip(a - F * (b - c), -5.0, 5.0)\n            if np.random.rand() < CR:\n                opposite_mutant = np.clip(opposite_mutant, -5.0, 5.0)\n            else:\n                opposite_mutant = pop[i]\n            if func(opposite_mutant) < func(pop[i]):\n                pop[i] = opposite_mutant\n            if func(opposite_mutant) < func(pbest[i]):\n                pbest[i] = opposite_mutant\n            if func(opposite_mutant) < func(gbest):\n                gbest = opposite_mutant\n        return pop, pbest, gbest", "name": "Enhanced_Opposition_DE_PSO_Optimizer", "description": "Enhancing diversity through opposition-based learning.", "configspace": "", "generation": 6, "fitness": 0.21651938992378972, "feedback": "The algorithm Enhanced_Opposition_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.4761725772796388, 0.49330598676782855, 0.610710160337876, 0.5168857467674808, 0.5750125882924857, 0.5008599641883471, 0.47618386951607783, 0.5691037369244569, 0.5964061237674252, 0.16076741515430804, 0.026255501350947674, 9.999999999998899e-05, 9.999999999998899e-05, 0.03561951389306284, 9.999999999998899e-05, 0.026444373545261413, 0.08227280777869816, 9.999999999998899e-05, 0.08250793964226655, 0.11890230810445013, 0.09465415183275894, 0.0820471974823962, 0.06545350535422678, 0.11783802513898323, 0.08263852515260228, 0.0899688632404011, 0.07883818268876297, 0.09573391089739003, 0.0716790274466006, 0.06217335054691975, 0.08106453432528649, 0.03405814242678573, 0.06370459488399915, 0.09511298118987654, 0.07284639412120142, 0.06997418391131782, 0.9277904489742702, 0.8596079408959093, 0.9487649774264948, 0.7709139906720786, 0.8614589200111302, 0.8885752425742293, 0.9309302978472149, 0.8452950090104351, 0.9081941553616775, 0.18193593379211292, 0.23812749398703725, 0.143771463902299, 0.18116478818124926, 0.16303282971986832, 0.23953024044460025, 0.2633778751693441, 0.2884270825737255, 0.2198554849773976, 0.2339531747279009, 0.1689014272802849, 0.2847473071714156, 0.3394520799851538, 0.6923132118343542, 0.33510136929556644, 0.26777608548060594, 0.2128541928066312, 0.6620522622148248, 0.16734788046587223, 0.1313786530883947, 0.13110671729176715, 0.16071144548465932, 0.1637914936863255, 0.10603298424515162, 0.16044336155318983, 0.13441006726938598, 0.13532990190252003, 0.15181409640059684, 0.16593387474436783, 0.3351156966606069, 0.19807931426602543, 0.11540818509420736, 0.10132011164360444, 0.17846718521061122, 0.11617854865019239, 0.11476412578104267, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792818339823218, 0.04730580089897907, 9.999999999998899e-05, 0.01580448275252022, 0.0028927217460826826, 0.07704660847810696, 0.08078147852994466, 0.16309730398268818, 0.056153075859784796, 0.10680447128570125, 0.10407319773026624, 0.029389216031968646, 0.035418202719721514, 0.2541524038609839, 0.11180667078228834, 0.1001025584348294, 0.03858303660323237, 0.04908420294595439, 0.036672599551710094, 0.038252368481453414, 0.089038107985968, 0.0488504852012831, 0.11179618103364375, 0.037694299623098226, 0.08687889611486821, 0.08580432995244391, 0.14844211362506698, 0.06333651445912769, 0.1399437233125378, 0.13762668354051444, 0.11311554317407302, 0.07751799768262135, 0.09285214895462635, 0.17752535622444887, 0.27621460260276676, 0.39695328211492653, 0.4185100962661914, 0.37940658828693996, 0.43029014764367735, 0.3549454188244492, 0.3683897839823729, 0.3963402472930816, 0.4620025931863301, 0.1360523321096212, 0.10469338287742846, 0.115324135145635, 0.10995250020019032, 0.1507418587608712, 0.09035302940867462, 0.05950665372693387, 0.1296645248350614, 0.1143448498987727, 0.17539649587698225, 0.12946966453037134, 0.16091880942926395, 0.1754719657644862, 0.19942842710884467, 0.1422775851286322, 0.15104441318401896, 0.13053308063815916, 0.22301801053388426, 0.2332375926828414, 0.24118952022830598, 0.26266867095591173, 0.25720480290443715, 0.29861275643440455, 0.24610490870326895, 0.2423150874061044, 0.2997859018577026, 0.19621106887851958, 0.1924928610026444, 0.17463927508815136, 0.21234627231871817, 0.1830836170479302, 0.192646820717977, 0.2799979936164897, 0.21436764181000356, 0.20707842825529288, 0.18812152731914134, 0.18930147222558313, 0.18287126993837433, 0.1772285299455172, 0.1870966245606125, 0.17100229440844028, 0.16999476027415017, 0.17744395560067028, 0.17180889425103962, 0.1757752019039457, 0.18471115815682837, 0.18695775112980206, 0.18405784380645562, 0.17877215768830412, 0.1665769552670897, 0.17228023163242978, 0.18327595226269233, 0.17896552770976837, 0.18701345566047456, 0.1285177260352831, 0.16832778629877554, 0.14813345072892747, 0.7397991180632475, 0.1944102121993715, 0.7047284587760303, 0.11897868918084564, 0.17255654399096676, 0.27773944213096247, 0.6811390877462962, 0.15311285613353542, 0.4055657955888512, 0.20045987219493466, 0.16097798173458144, 0.19942278554901294, 0.6811939856607508, 0.15341995052266522, 0.6051313634173514, 0.16384223483238058, 0.1945206481639037, 0.17544932352215004, 0.17353736915862827, 0.18831581399752262, 0.15491283783377807, 0.17501434711224828, 0.17237399442218926, 0.18426011069596082, 0.08240109546941987, 0.09575524134604152, 0.06482000561156642, 0.07622615094206175, 0.08016761566222008, 0.07495351616050161, 0.08097947886824097, 0.07754460637927807, 0.06245573515019165]}, "mutation_prompt": null}
{"id": "77234d04-0e1c-4aaf-a94b-8ed384640572", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improved DE_PSO_Optimizer by incorporating a dynamic adaptation of DE and PSO parameters during optimization to enhance exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.4761725772796388, 0.49330598676782855, 0.610710160337876, 0.5168857467674808, 0.5750125882924857, 0.5008599641883471, 0.47618386951607783, 0.5691037369244569, 0.5964061237674252, 0.16076741515430804, 0.026255501350947674, 9.999999999998899e-05, 9.999999999998899e-05, 0.03561951389306284, 9.999999999998899e-05, 0.026444373545261413, 0.08227280777869816, 9.999999999998899e-05, 0.08250793964226655, 0.11890230810445013, 0.09465415183275894, 0.0820471974823962, 0.06545350535422678, 0.11783802513898323, 0.08263852515260228, 0.0899688632404011, 0.07883818268876297, 0.09573391089739003, 0.0716790274466006, 0.06217335054691975, 0.08106453432528649, 0.03405814242678573, 0.06370459488399915, 0.09511298118987654, 0.07284639412120142, 0.06997418391131782, 0.9277904489742702, 0.8596079408959093, 0.9487649774264948, 0.7709139906720786, 0.8614589200111302, 0.8885752425742293, 0.9309302978472149, 0.8452950090104351, 0.9081941553616775, 0.18193593379211292, 0.23812749398703725, 0.143771463902299, 0.18116478818124926, 0.16303282971986832, 0.23953024044460025, 0.2633778751693441, 0.2884270825737255, 0.2198554849773976, 0.2339531747279009, 0.1689014272802849, 0.2847473071714156, 0.3394520799851538, 0.6923132118343542, 0.33510136929556644, 0.26777608548060594, 0.2128541928066312, 0.6620522622148248, 0.16734788046587223, 0.1313786530883947, 0.13110671729176715, 0.16071144548465932, 0.1637914936863255, 0.10603298424515162, 0.16044336155318983, 0.13441006726938598, 0.13532990190252003, 0.15181409640059684, 0.16593387474436783, 0.3351156966606069, 0.19807931426602543, 0.11540818509420736, 0.10132011164360444, 0.17846718521061122, 0.11617854865019239, 0.11476412578104267, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792818339823218, 0.04730580089897907, 9.999999999998899e-05, 0.01580448275252022, 0.0028927217460826826, 0.07704660847810696, 0.08078147852994466, 0.16309730398268818, 0.056153075859784796, 0.10680447128570125, 0.10407319773026624, 0.029389216031968646, 0.035418202719721514, 0.2541524038609839, 0.11180667078228834, 0.1001025584348294, 0.03858303660323237, 0.04908420294595439, 0.036672599551710094, 0.038252368481453414, 0.089038107985968, 0.0488504852012831, 0.11179618103364375, 0.037694299623098226, 0.08687889611486821, 0.08580432995244391, 0.14844211362506698, 0.06333651445912769, 0.1399437233125378, 0.13762668354051444, 0.11311554317407302, 0.07751799768262135, 0.09285214895462635, 0.17752535622444887, 0.27621460260276676, 0.39695328211492653, 0.4185100962661914, 0.37940658828693996, 0.43029014764367735, 0.3549454188244492, 0.3683897839823729, 0.3963402472930816, 0.4620025931863301, 0.1360523321096212, 0.10469338287742846, 0.115324135145635, 0.10995250020019032, 0.1507418587608712, 0.09035302940867462, 0.05950665372693387, 0.1296645248350614, 0.1143448498987727, 0.17539649587698225, 0.12946966453037134, 0.16091880942926395, 0.1754719657644862, 0.19942842710884467, 0.1422775851286322, 0.15104441318401896, 0.13053308063815916, 0.22301801053388426, 0.2332375926828414, 0.24118952022830598, 0.26266867095591173, 0.25720480290443715, 0.29861275643440455, 0.24610490870326895, 0.2423150874061044, 0.2997859018577026, 0.19621106887851958, 0.1924928610026444, 0.17463927508815136, 0.21234627231871817, 0.1830836170479302, 0.192646820717977, 0.2799979936164897, 0.21436764181000356, 0.20707842825529288, 0.18812152731914134, 0.18930147222558313, 0.18287126993837433, 0.1772285299455172, 0.1870966245606125, 0.17100229440844028, 0.16999476027415017, 0.17744395560067028, 0.17180889425103962, 0.1757752019039457, 0.18471115815682837, 0.18695775112980206, 0.18405784380645562, 0.17877215768830412, 0.1665769552670897, 0.17228023163242978, 0.18327595226269233, 0.17896552770976837, 0.18701345566047456, 0.1285177260352831, 0.16832778629877554, 0.14813345072892747, 0.7397991180632475, 0.1944102121993715, 0.7047284587760303, 0.11897868918084564, 0.17255654399096676, 0.27773944213096247, 0.6811390877462962, 0.15311285613353542, 0.4055657955888512, 0.20045987219493466, 0.16097798173458144, 0.19942278554901294, 0.6811939856607508, 0.15341995052266522, 0.6051313634173514, 0.16384223483238058, 0.1945206481639037, 0.17544932352215004, 0.17353736915862827, 0.18831581399752262, 0.15491283783377807, 0.17501434711224828, 0.17237399442218926, 0.18426011069596082, 0.08240109546941987, 0.09575524134604152, 0.06482000561156642, 0.07622615094206175, 0.08016761566222008, 0.07495351616050161, 0.08097947886824097, 0.07754460637927807, 0.06245573515019165]}, "mutation_prompt": null}
{"id": "cd8ea063-92f1-485f-9eb4-8ce1f4fdb029", "solution": "import numpy as np\n\nclass Hybrid_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Hybrid_DE_PSO_Optimizer", "description": "Incorporate a hybrid Differential Evolution (DE) with Particle Swarm Optimization (PSO) to enable global exploration through DE and local exploitation via PSO.", "configspace": "", "generation": 8, "fitness": 0.21651938992378972, "feedback": "The algorithm Hybrid_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.4761725772796388, 0.49330598676782855, 0.610710160337876, 0.5168857467674808, 0.5750125882924857, 0.5008599641883471, 0.47618386951607783, 0.5691037369244569, 0.5964061237674252, 0.16076741515430804, 0.026255501350947674, 9.999999999998899e-05, 9.999999999998899e-05, 0.03561951389306284, 9.999999999998899e-05, 0.026444373545261413, 0.08227280777869816, 9.999999999998899e-05, 0.08250793964226655, 0.11890230810445013, 0.09465415183275894, 0.0820471974823962, 0.06545350535422678, 0.11783802513898323, 0.08263852515260228, 0.0899688632404011, 0.07883818268876297, 0.09573391089739003, 0.0716790274466006, 0.06217335054691975, 0.08106453432528649, 0.03405814242678573, 0.06370459488399915, 0.09511298118987654, 0.07284639412120142, 0.06997418391131782, 0.9277904489742702, 0.8596079408959093, 0.9487649774264948, 0.7709139906720786, 0.8614589200111302, 0.8885752425742293, 0.9309302978472149, 0.8452950090104351, 0.9081941553616775, 0.18193593379211292, 0.23812749398703725, 0.143771463902299, 0.18116478818124926, 0.16303282971986832, 0.23953024044460025, 0.2633778751693441, 0.2884270825737255, 0.2198554849773976, 0.2339531747279009, 0.1689014272802849, 0.2847473071714156, 0.3394520799851538, 0.6923132118343542, 0.33510136929556644, 0.26777608548060594, 0.2128541928066312, 0.6620522622148248, 0.16734788046587223, 0.1313786530883947, 0.13110671729176715, 0.16071144548465932, 0.1637914936863255, 0.10603298424515162, 0.16044336155318983, 0.13441006726938598, 0.13532990190252003, 0.15181409640059684, 0.16593387474436783, 0.3351156966606069, 0.19807931426602543, 0.11540818509420736, 0.10132011164360444, 0.17846718521061122, 0.11617854865019239, 0.11476412578104267, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792818339823218, 0.04730580089897907, 9.999999999998899e-05, 0.01580448275252022, 0.0028927217460826826, 0.07704660847810696, 0.08078147852994466, 0.16309730398268818, 0.056153075859784796, 0.10680447128570125, 0.10407319773026624, 0.029389216031968646, 0.035418202719721514, 0.2541524038609839, 0.11180667078228834, 0.1001025584348294, 0.03858303660323237, 0.04908420294595439, 0.036672599551710094, 0.038252368481453414, 0.089038107985968, 0.0488504852012831, 0.11179618103364375, 0.037694299623098226, 0.08687889611486821, 0.08580432995244391, 0.14844211362506698, 0.06333651445912769, 0.1399437233125378, 0.13762668354051444, 0.11311554317407302, 0.07751799768262135, 0.09285214895462635, 0.17752535622444887, 0.27621460260276676, 0.39695328211492653, 0.4185100962661914, 0.37940658828693996, 0.43029014764367735, 0.3549454188244492, 0.3683897839823729, 0.3963402472930816, 0.4620025931863301, 0.1360523321096212, 0.10469338287742846, 0.115324135145635, 0.10995250020019032, 0.1507418587608712, 0.09035302940867462, 0.05950665372693387, 0.1296645248350614, 0.1143448498987727, 0.17539649587698225, 0.12946966453037134, 0.16091880942926395, 0.1754719657644862, 0.19942842710884467, 0.1422775851286322, 0.15104441318401896, 0.13053308063815916, 0.22301801053388426, 0.2332375926828414, 0.24118952022830598, 0.26266867095591173, 0.25720480290443715, 0.29861275643440455, 0.24610490870326895, 0.2423150874061044, 0.2997859018577026, 0.19621106887851958, 0.1924928610026444, 0.17463927508815136, 0.21234627231871817, 0.1830836170479302, 0.192646820717977, 0.2799979936164897, 0.21436764181000356, 0.20707842825529288, 0.18812152731914134, 0.18930147222558313, 0.18287126993837433, 0.1772285299455172, 0.1870966245606125, 0.17100229440844028, 0.16999476027415017, 0.17744395560067028, 0.17180889425103962, 0.1757752019039457, 0.18471115815682837, 0.18695775112980206, 0.18405784380645562, 0.17877215768830412, 0.1665769552670897, 0.17228023163242978, 0.18327595226269233, 0.17896552770976837, 0.18701345566047456, 0.1285177260352831, 0.16832778629877554, 0.14813345072892747, 0.7397991180632475, 0.1944102121993715, 0.7047284587760303, 0.11897868918084564, 0.17255654399096676, 0.27773944213096247, 0.6811390877462962, 0.15311285613353542, 0.4055657955888512, 0.20045987219493466, 0.16097798173458144, 0.19942278554901294, 0.6811939856607508, 0.15341995052266522, 0.6051313634173514, 0.16384223483238058, 0.1945206481639037, 0.17544932352215004, 0.17353736915862827, 0.18831581399752262, 0.15491283783377807, 0.17501434711224828, 0.17237399442218926, 0.18426011069596082, 0.08240109546941987, 0.09575524134604152, 0.06482000561156642, 0.07622615094206175, 0.08016761566222008, 0.07495351616050161, 0.08097947886824097, 0.07754460637927807, 0.06245573515019165]}, "mutation_prompt": null}
{"id": "15df9dd8-a960-486a-ab25-1ef2b1475fb0", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99, w_min=0.4, w_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n        self.w_min = w_min\n        self.w_max = w_max\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w = max(self.w_min, min(self.w_max, self.w * self.w_decay))\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer", "description": "Enhanced DE_PSO_Optimizer by introducing a novel adaptive inertia weight adjustment mechanism to balance exploration and exploitation during optimization.", "configspace": "", "generation": 9, "fitness": 0.21651938992378972, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.4761725772796388, 0.49330598676782855, 0.610710160337876, 0.5168857467674808, 0.5750125882924857, 0.5008599641883471, 0.47618386951607783, 0.5691037369244569, 0.5964061237674252, 0.16076741515430804, 0.026255501350947674, 9.999999999998899e-05, 9.999999999998899e-05, 0.03561951389306284, 9.999999999998899e-05, 0.026444373545261413, 0.08227280777869816, 9.999999999998899e-05, 0.08250793964226655, 0.11890230810445013, 0.09465415183275894, 0.0820471974823962, 0.06545350535422678, 0.11783802513898323, 0.08263852515260228, 0.0899688632404011, 0.07883818268876297, 0.09573391089739003, 0.0716790274466006, 0.06217335054691975, 0.08106453432528649, 0.03405814242678573, 0.06370459488399915, 0.09511298118987654, 0.07284639412120142, 0.06997418391131782, 0.9277904489742702, 0.8596079408959093, 0.9487649774264948, 0.7709139906720786, 0.8614589200111302, 0.8885752425742293, 0.9309302978472149, 0.8452950090104351, 0.9081941553616775, 0.18193593379211292, 0.23812749398703725, 0.143771463902299, 0.18116478818124926, 0.16303282971986832, 0.23953024044460025, 0.2633778751693441, 0.2884270825737255, 0.2198554849773976, 0.2339531747279009, 0.1689014272802849, 0.2847473071714156, 0.3394520799851538, 0.6923132118343542, 0.33510136929556644, 0.26777608548060594, 0.2128541928066312, 0.6620522622148248, 0.16734788046587223, 0.1313786530883947, 0.13110671729176715, 0.16071144548465932, 0.1637914936863255, 0.10603298424515162, 0.16044336155318983, 0.13441006726938598, 0.13532990190252003, 0.15181409640059684, 0.16593387474436783, 0.3351156966606069, 0.19807931426602543, 0.11540818509420736, 0.10132011164360444, 0.17846718521061122, 0.11617854865019239, 0.11476412578104267, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792818339823218, 0.04730580089897907, 9.999999999998899e-05, 0.01580448275252022, 0.0028927217460826826, 0.07704660847810696, 0.08078147852994466, 0.16309730398268818, 0.056153075859784796, 0.10680447128570125, 0.10407319773026624, 0.029389216031968646, 0.035418202719721514, 0.2541524038609839, 0.11180667078228834, 0.1001025584348294, 0.03858303660323237, 0.04908420294595439, 0.036672599551710094, 0.038252368481453414, 0.089038107985968, 0.0488504852012831, 0.11179618103364375, 0.037694299623098226, 0.08687889611486821, 0.08580432995244391, 0.14844211362506698, 0.06333651445912769, 0.1399437233125378, 0.13762668354051444, 0.11311554317407302, 0.07751799768262135, 0.09285214895462635, 0.17752535622444887, 0.27621460260276676, 0.39695328211492653, 0.4185100962661914, 0.37940658828693996, 0.43029014764367735, 0.3549454188244492, 0.3683897839823729, 0.3963402472930816, 0.4620025931863301, 0.1360523321096212, 0.10469338287742846, 0.115324135145635, 0.10995250020019032, 0.1507418587608712, 0.09035302940867462, 0.05950665372693387, 0.1296645248350614, 0.1143448498987727, 0.17539649587698225, 0.12946966453037134, 0.16091880942926395, 0.1754719657644862, 0.19942842710884467, 0.1422775851286322, 0.15104441318401896, 0.13053308063815916, 0.22301801053388426, 0.2332375926828414, 0.24118952022830598, 0.26266867095591173, 0.25720480290443715, 0.29861275643440455, 0.24610490870326895, 0.2423150874061044, 0.2997859018577026, 0.19621106887851958, 0.1924928610026444, 0.17463927508815136, 0.21234627231871817, 0.1830836170479302, 0.192646820717977, 0.2799979936164897, 0.21436764181000356, 0.20707842825529288, 0.18812152731914134, 0.18930147222558313, 0.18287126993837433, 0.1772285299455172, 0.1870966245606125, 0.17100229440844028, 0.16999476027415017, 0.17744395560067028, 0.17180889425103962, 0.1757752019039457, 0.18471115815682837, 0.18695775112980206, 0.18405784380645562, 0.17877215768830412, 0.1665769552670897, 0.17228023163242978, 0.18327595226269233, 0.17896552770976837, 0.18701345566047456, 0.1285177260352831, 0.16832778629877554, 0.14813345072892747, 0.7397991180632475, 0.1944102121993715, 0.7047284587760303, 0.11897868918084564, 0.17255654399096676, 0.27773944213096247, 0.6811390877462962, 0.15311285613353542, 0.4055657955888512, 0.20045987219493466, 0.16097798173458144, 0.19942278554901294, 0.6811939856607508, 0.15341995052266522, 0.6051313634173514, 0.16384223483238058, 0.1945206481639037, 0.17544932352215004, 0.17353736915862827, 0.18831581399752262, 0.15491283783377807, 0.17501434711224828, 0.17237399442218926, 0.18426011069596082, 0.08240109546941987, 0.09575524134604152, 0.06482000561156642, 0.07622615094206175, 0.08016761566222008, 0.07495351616050161, 0.08097947886824097, 0.07754460637927807, 0.06245573515019165]}, "mutation_prompt": null}
{"id": "075a870b-2340-48c9-8514-5389c93e0c23", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99, levy_scale=0.1, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n        self.levy_scale = levy_scale\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                levy = np.random.standard_cauchy(size=self.dim) * self.levy_scale\n                mutant = np.clip(a + F * (b - c) + levy, -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer", "description": "Enhancing population diversity by integrating Levy flights for exploration and adaptively updating the mutation and crossover rates during optimization to balance exploration and exploitation.", "configspace": "", "generation": 10, "fitness": 0.20946021180774005, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.4509522923888679, 0.5053393737175009, 0.5857044960573041, 0.4996276233667747, 0.5720214074768886, 0.5313435520946445, 0.5456515703050083, 0.5831515847381508, 0.5693066070178328, 0.06935619451079744, 0.024812871758969735, 0.04327962215856218, 0.039267482160271205, 0.04269613602591249, 0.05615251646895025, 0.0291703160659752, 0.048625807054418324, 0.08397937524996346, 0.08566010246141209, 0.10872445339773418, 0.11920901009022511, 0.08977893404762238, 0.07521290899089961, 0.07435070318723103, 0.09404838325164533, 0.08395843861990815, 0.09796977422587949, 0.07594738589941696, 0.07335955851557441, 0.07107507858815787, 0.10724611734697864, 0.07682606728904151, 0.07502223466474445, 0.08988055050093369, 0.10233079912709508, 0.08102512794464634, 0.9471958754111843, 0.8003622927030652, 0.9295556819653967, 0.8841653177912709, 0.926895600400825, 0.8988951879891516, 0.8860556860554825, 0.9432080427523742, 0.8369909811204863, 0.25073556398455377, 0.22766637546132107, 0.3173492252144988, 0.17797195453372439, 0.2802905376167315, 0.2588397899065614, 0.2288032411540597, 0.22773011642983, 0.2967335263026668, 0.32914589213364065, 0.5935201546096449, 0.29246778821451946, 0.20556406043820574, 0.18906938884398738, 0.254897176035226, 0.21697935961524573, 0.1656861275021715, 0.20333878871755928, 0.16228590428967238, 0.08561644339835583, 0.13423260404778758, 0.11575145787449348, 0.17700604360807015, 0.21522308881831398, 0.12279983483862811, 0.13715585812974718, 0.12069660580997954, 0.14883114536676056, 0.09450144757257783, 0.11418848182174168, 0.13642777590594035, 0.10537181499563208, 0.12532996529166485, 0.10797585914216234, 0.11019749125475631, 0.15200367363627976, 0.11189916000806355, 0.04671685641672885, 0.06506383136866423, 0.01673190739819297, 9.999999999998899e-05, 0.028219399415336577, 0.026776144677438274, 0.017979437438524704, 0.04673216826754234, 0.06869326150087074, 0.09313189900907526, 0.1084089954880032, 0.19380510346743562, 0.04596848636787487, 0.02170077689934169, 0.13318571915203536, 0.055166804729353536, 0.0692926677441923, 0.08494585187799275, 0.03225149429280627, 0.045799402461463745, 0.10850928482172661, 0.04841887935830813, 0.08690453223960581, 0.06150872301267607, 0.03688178462775216, 0.1009304179732744, 0.12430580427465321, 0.09362520950940512, 0.12346300085804085, 0.07021181015627831, 0.14298137322876414, 0.10131542878205912, 0.10078478742597219, 0.0787138691811855, 0.09417549896565358, 0.3621897467074331, 0.3998848897640249, 0.3997290548445174, 0.4029174161328303, 0.390230820920367, 0.42498435835673176, 0.3578660047329124, 0.3810258388321519, 0.4064314379037798, 0.0972341757573647, 0.12022799832295972, 0.06802539172021393, 0.07818404364838549, 0.12332217488791197, 0.10624351552080791, 0.09612225208913239, 0.1133086478173373, 0.08853297098076929, 0.10874451034417032, 0.13769195738585782, 0.15930991888392854, 0.1103329813254319, 0.20052807696878805, 0.14208699902343325, 0.1412667480030354, 0.1976034802316492, 0.16070795908991042, 0.28904253468972996, 0.2479094610042255, 0.2877269332588359, 0.3226149202131029, 0.3245244239262066, 0.21809608134083402, 0.2499200010570145, 0.25864527443864815, 0.27780708148682753, 0.256139946305305, 0.20817299661252253, 0.2435975163241576, 0.23326603747826558, 0.19581947321391213, 0.2581556300743585, 0.16493735522901265, 0.20615208309952582, 0.24533303713661248, 0.19637380275542426, 0.1703844136593884, 0.17478637152611864, 0.17851935324264634, 0.1856041344798759, 0.1716082751473288, 0.17021038366995223, 0.17581137464896035, 0.18878315619357644, 0.1718077545316924, 0.19694475215748897, 0.18323631206106128, 0.16471223342976937, 0.1733529792154448, 0.18737146594701648, 0.1744677213582161, 0.18964883589853254, 0.17570402107129834, 0.13744254950402135, 0.12188445914193236, 0.11250936278654666, 0.6060689811519923, 0.19435998447309777, 0.20528151830376462, 0.1530297957057295, 0.16246153409901798, 0.7252652853257843, 0.5386502062828331, 0.3336151371879815, 0.13950660287031025, 0.18959397454592297, 0.6805701690903225, 0.1623802450168097, 0.10162852597532324, 0.20106423586721045, 0.0906265887465526, 0.15775439269380043, 0.19268498151712743, 0.17241826521876846, 0.1745351263095719, 0.18011271136708162, 0.18446316609563673, 0.16544106263648606, 0.16469218643767514, 0.17706064741149663, 0.062446391614345176, 0.06909778040636083, 0.07708027023746922, 0.05860356102931963, 0.0753626232374196, 0.07945573744205103, 0.07252799806109178, 0.07513820048801734, 0.07359653624607287]}, "mutation_prompt": null}
{"id": "b3c7d4eb-76c7-455d-9d5a-345c9f86f613", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                perf_ratio = 1.0 - func(pop[i]) / func(pbest[i])\n                velocity[i] = w * perf_ratio * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer", "description": "Enhanced Dynamic DE_PSO_Optimizer by incorporating an adaptive inertia weight update mechanism based on individual performance to balance exploration and exploitation.", "configspace": "", "generation": 11, "fitness": 0.1128500258445345, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.2729314421457413, 0.26219523589133464, 0.29349310029906794, 0.1595041789644398, 0.13025899917201, 0.2885662603190069, 0.23630773543981087, 0.28424064050627207, 0.20525470980348004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06675783324251638, 0.10454101348352363, 0.08963062427279489, 0.06258953954082425, 0.04936656116435678, 0.07197181782940465, 0.0973743238260909, 0.06603329356342269, 0.08533162817827122, 0.02165143304282935, 0.062239176511615035, 0.033902485725038956, 0.06842815225755239, 0.022786594535491367, 0.07004312793426959, 0.04221238069590749, 0.041845129166256045, 0.051315127027668495, 0.10709029539355341, 0.057010588291549924, 0.16723022851419556, 0.08242229123324718, 0.1264951056061464, 0.08238688780437786, 0.11371668536422908, 0.09571272448967216, 0.07975647485781356, 0.16978849335886625, 0.058178389664716224, 0.03835676958415046, 0.0859577506556296, 0.06105525547899138, 0.06589591711983123, 0.0899202871546988, 0.06314567050404929, 9.999999999998899e-05, 0.23156168636908636, 0.0929283777565153, 0.12507732965799567, 0.1735548920803749, 0.23280259089552657, 0.2066714968078417, 0.12416306464111526, 0.1411990042749921, 0.17385041635570797, 0.08773078117704025, 0.13776419158864683, 0.08484915812409743, 9.999999999998899e-05, 0.05129654322141053, 9.999999999998899e-05, 0.1733006088426733, 0.017855029663929045, 0.10958715916103245, 0.07657567871494686, 0.04129482865662926, 0.14601574620117608, 0.09370840389815172, 0.11968552849024416, 9.999999999998899e-05, 0.02571420633468402, 0.05135802693819569, 0.0222173422325026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13850359139669577, 0.021331014516441926, 0.13384302496732703, 0.049409346541572585, 0.07621735463587487, 0.01067261520311591, 0.18512301823048227, 0.03944233630971572, 0.06034737402686863, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03292298128197868, 0.008620042316623944, 9.999999999998899e-05, 0.032308740810362724, 0.01578707037710969, 9.999999999998899e-05, 0.04778800492543833, 0.03559932954572165, 0.2068276061854022, 0.3137841197543585, 0.35123188695094154, 0.19061331127344694, 0.1711017103465391, 0.14772667407240092, 0.3391563896298797, 0.20049087268334265, 0.2912813200188099, 0.05310404614750275, 0.018864065901292637, 0.08430026077609365, 0.06979265918438249, 0.045249901864766295, 0.10145478071209324, 0.05914089119807864, 0.09420906549705255, 0.06839818013681542, 0.15216309257843696, 0.16740408019576825, 0.1353633320772928, 0.13119646718978017, 0.13807415202701467, 0.1401456125028202, 0.16134701923435002, 0.21692147061972278, 0.14339854391968143, 0.14824385168916798, 0.20966124611939052, 0.23110875447013257, 0.21127362213573897, 0.217028510396865, 0.18531298076180214, 0.1700359259358305, 0.2240869144778781, 0.19063848105451153, 0.11582475221235367, 0.1088997321184837, 0.10342909530241173, 0.1066389806170076, 0.14447088276370046, 0.13393085366309265, 0.17633214586416146, 0.13098881202311952, 0.15500171678636832, 0.18799921338356052, 0.20389322509235475, 0.18563416812479638, 0.2575036481984383, 0.16961351888493903, 0.16755642310965035, 0.16196913115699774, 0.17877355223376312, 0.17918535690391546, 0.16736320926139836, 0.19643032086638257, 0.16997590736114254, 0.17816793384129925, 0.16721820710033386, 0.17559923078390927, 0.1631978264003786, 0.18373267699830198, 0.16285035757748245, 0.1164976726372472, 0.17550484456728388, 0.12343242605072846, 0.28850139223956384, 0.18866043384061937, 0.19176983719926988, 0.10336124365608035, 0.16315198371534423, 0.14410349596602423, 0.24160258507107524, 0.15153872107947153, 0.3029680447506319, 0.1080081991788906, 0.1417824581576288, 0.15738134289022032, 0.33945770096653793, 0.15604109540897737, 0.30320951950130937, 0.16300409259317894, 0.15206336725177094, 0.16109120317891634, 0.17933250388894062, 0.17464168181575335, 0.15769482991979478, 0.18413851927070524, 0.1774092644340428, 0.1764050309621975, 0.08956337275232706, 0.05568484305230814, 0.061083165207574175, 0.070302570270666, 0.0832291827653786, 0.05248116765636934, 0.05719739775451216, 0.0919336187740073, 0.06209379886041788]}, "mutation_prompt": null}
{"id": "e4b13615-e76e-48cb-8d27-b1a2d19407f2", "solution": "class Enhanced_Dynamic_DE_PSO_Optimizer(Dynamic_DE_PSO_Optimizer):\n    def __call__(self, func):\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                scale = 1.0 - (1.0 - 0.1) * np.random.rand()  # Adaptive mutation scaling\n                mutant = np.clip(a + scale * F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest", "name": "Enhanced_Dynamic_DE_PSO_Optimizer", "description": "Enhanced Dynamic DE_PSO_Optimizer with adaptive mutation scaling to improve convergence and diversity maintenance.", "configspace": "", "generation": 12, "fitness": 0.0, "feedback": "The algorithm Enhanced_Dynamic_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "0a624995-e27f-407d-ad2a-e06498c35a16", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improved DE_PSO_Optimizer by incorporating a dynamic adaptation of DE and PSO parameters during optimization to enhance exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.4761725772796388, 0.49330598676782855, 0.610710160337876, 0.5168857467674808, 0.5750125882924857, 0.5008599641883471, 0.47618386951607783, 0.5691037369244569, 0.5964061237674252, 0.16076741515430804, 0.026255501350947674, 9.999999999998899e-05, 9.999999999998899e-05, 0.03561951389306284, 9.999999999998899e-05, 0.026444373545261413, 0.08227280777869816, 9.999999999998899e-05, 0.08250793964226655, 0.11890230810445013, 0.09465415183275894, 0.0820471974823962, 0.06545350535422678, 0.11783802513898323, 0.08263852515260228, 0.0899688632404011, 0.07883818268876297, 0.09573391089739003, 0.0716790274466006, 0.06217335054691975, 0.08106453432528649, 0.03405814242678573, 0.06370459488399915, 0.09511298118987654, 0.07284639412120142, 0.06997418391131782, 0.9277904489742702, 0.8596079408959093, 0.9487649774264948, 0.7709139906720786, 0.8614589200111302, 0.8885752425742293, 0.9309302978472149, 0.8452950090104351, 0.9081941553616775, 0.18193593379211292, 0.23812749398703725, 0.143771463902299, 0.18116478818124926, 0.16303282971986832, 0.23953024044460025, 0.2633778751693441, 0.2884270825737255, 0.2198554849773976, 0.2339531747279009, 0.1689014272802849, 0.2847473071714156, 0.3394520799851538, 0.6923132118343542, 0.33510136929556644, 0.26777608548060594, 0.2128541928066312, 0.6620522622148248, 0.16734788046587223, 0.1313786530883947, 0.13110671729176715, 0.16071144548465932, 0.1637914936863255, 0.10603298424515162, 0.16044336155318983, 0.13441006726938598, 0.13532990190252003, 0.15181409640059684, 0.16593387474436783, 0.3351156966606069, 0.19807931426602543, 0.11540818509420736, 0.10132011164360444, 0.17846718521061122, 0.11617854865019239, 0.11476412578104267, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792818339823218, 0.04730580089897907, 9.999999999998899e-05, 0.01580448275252022, 0.0028927217460826826, 0.07704660847810696, 0.08078147852994466, 0.16309730398268818, 0.056153075859784796, 0.10680447128570125, 0.10407319773026624, 0.029389216031968646, 0.035418202719721514, 0.2541524038609839, 0.11180667078228834, 0.1001025584348294, 0.03858303660323237, 0.04908420294595439, 0.036672599551710094, 0.038252368481453414, 0.089038107985968, 0.0488504852012831, 0.11179618103364375, 0.037694299623098226, 0.08687889611486821, 0.08580432995244391, 0.14844211362506698, 0.06333651445912769, 0.1399437233125378, 0.13762668354051444, 0.11311554317407302, 0.07751799768262135, 0.09285214895462635, 0.17752535622444887, 0.27621460260276676, 0.39695328211492653, 0.4185100962661914, 0.37940658828693996, 0.43029014764367735, 0.3549454188244492, 0.3683897839823729, 0.3963402472930816, 0.4620025931863301, 0.1360523321096212, 0.10469338287742846, 0.115324135145635, 0.10995250020019032, 0.1507418587608712, 0.09035302940867462, 0.05950665372693387, 0.1296645248350614, 0.1143448498987727, 0.17539649587698225, 0.12946966453037134, 0.16091880942926395, 0.1754719657644862, 0.19942842710884467, 0.1422775851286322, 0.15104441318401896, 0.13053308063815916, 0.22301801053388426, 0.2332375926828414, 0.24118952022830598, 0.26266867095591173, 0.25720480290443715, 0.29861275643440455, 0.24610490870326895, 0.2423150874061044, 0.2997859018577026, 0.19621106887851958, 0.1924928610026444, 0.17463927508815136, 0.21234627231871817, 0.1830836170479302, 0.192646820717977, 0.2799979936164897, 0.21436764181000356, 0.20707842825529288, 0.18812152731914134, 0.18930147222558313, 0.18287126993837433, 0.1772285299455172, 0.1870966245606125, 0.17100229440844028, 0.16999476027415017, 0.17744395560067028, 0.17180889425103962, 0.1757752019039457, 0.18471115815682837, 0.18695775112980206, 0.18405784380645562, 0.17877215768830412, 0.1665769552670897, 0.17228023163242978, 0.18327595226269233, 0.17896552770976837, 0.18701345566047456, 0.1285177260352831, 0.16832778629877554, 0.14813345072892747, 0.7397991180632475, 0.1944102121993715, 0.7047284587760303, 0.11897868918084564, 0.17255654399096676, 0.27773944213096247, 0.6811390877462962, 0.15311285613353542, 0.4055657955888512, 0.20045987219493466, 0.16097798173458144, 0.19942278554901294, 0.6811939856607508, 0.15341995052266522, 0.6051313634173514, 0.16384223483238058, 0.1945206481639037, 0.17544932352215004, 0.17353736915862827, 0.18831581399752262, 0.15491283783377807, 0.17501434711224828, 0.17237399442218926, 0.18426011069596082, 0.08240109546941987, 0.09575524134604152, 0.06482000561156642, 0.07622615094206175, 0.08016761566222008, 0.07495351616050161, 0.08097947886824097, 0.07754460637927807, 0.06245573515019165]}, "mutation_prompt": null}
{"id": "2ed995f4-81b2-4f23-b3dd-dc6f6a411965", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improved DE_PSO_Optimizer by incorporating a dynamic adaptation of DE and PSO parameters during optimization to enhance exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.4761725772796388, 0.49330598676782855, 0.610710160337876, 0.5168857467674808, 0.5750125882924857, 0.5008599641883471, 0.47618386951607783, 0.5691037369244569, 0.5964061237674252, 0.16076741515430804, 0.026255501350947674, 9.999999999998899e-05, 9.999999999998899e-05, 0.03561951389306284, 9.999999999998899e-05, 0.026444373545261413, 0.08227280777869816, 9.999999999998899e-05, 0.08250793964226655, 0.11890230810445013, 0.09465415183275894, 0.0820471974823962, 0.06545350535422678, 0.11783802513898323, 0.08263852515260228, 0.0899688632404011, 0.07883818268876297, 0.09573391089739003, 0.0716790274466006, 0.06217335054691975, 0.08106453432528649, 0.03405814242678573, 0.06370459488399915, 0.09511298118987654, 0.07284639412120142, 0.06997418391131782, 0.9277904489742702, 0.8596079408959093, 0.9487649774264948, 0.7709139906720786, 0.8614589200111302, 0.8885752425742293, 0.9309302978472149, 0.8452950090104351, 0.9081941553616775, 0.18193593379211292, 0.23812749398703725, 0.143771463902299, 0.18116478818124926, 0.16303282971986832, 0.23953024044460025, 0.2633778751693441, 0.2884270825737255, 0.2198554849773976, 0.2339531747279009, 0.1689014272802849, 0.2847473071714156, 0.3394520799851538, 0.6923132118343542, 0.33510136929556644, 0.26777608548060594, 0.2128541928066312, 0.6620522622148248, 0.16734788046587223, 0.1313786530883947, 0.13110671729176715, 0.16071144548465932, 0.1637914936863255, 0.10603298424515162, 0.16044336155318983, 0.13441006726938598, 0.13532990190252003, 0.15181409640059684, 0.16593387474436783, 0.3351156966606069, 0.19807931426602543, 0.11540818509420736, 0.10132011164360444, 0.17846718521061122, 0.11617854865019239, 0.11476412578104267, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792818339823218, 0.04730580089897907, 9.999999999998899e-05, 0.01580448275252022, 0.0028927217460826826, 0.07704660847810696, 0.08078147852994466, 0.16309730398268818, 0.056153075859784796, 0.10680447128570125, 0.10407319773026624, 0.029389216031968646, 0.035418202719721514, 0.2541524038609839, 0.11180667078228834, 0.1001025584348294, 0.03858303660323237, 0.04908420294595439, 0.036672599551710094, 0.038252368481453414, 0.089038107985968, 0.0488504852012831, 0.11179618103364375, 0.037694299623098226, 0.08687889611486821, 0.08580432995244391, 0.14844211362506698, 0.06333651445912769, 0.1399437233125378, 0.13762668354051444, 0.11311554317407302, 0.07751799768262135, 0.09285214895462635, 0.17752535622444887, 0.27621460260276676, 0.39695328211492653, 0.4185100962661914, 0.37940658828693996, 0.43029014764367735, 0.3549454188244492, 0.3683897839823729, 0.3963402472930816, 0.4620025931863301, 0.1360523321096212, 0.10469338287742846, 0.115324135145635, 0.10995250020019032, 0.1507418587608712, 0.09035302940867462, 0.05950665372693387, 0.1296645248350614, 0.1143448498987727, 0.17539649587698225, 0.12946966453037134, 0.16091880942926395, 0.1754719657644862, 0.19942842710884467, 0.1422775851286322, 0.15104441318401896, 0.13053308063815916, 0.22301801053388426, 0.2332375926828414, 0.24118952022830598, 0.26266867095591173, 0.25720480290443715, 0.29861275643440455, 0.24610490870326895, 0.2423150874061044, 0.2997859018577026, 0.19621106887851958, 0.1924928610026444, 0.17463927508815136, 0.21234627231871817, 0.1830836170479302, 0.192646820717977, 0.2799979936164897, 0.21436764181000356, 0.20707842825529288, 0.18812152731914134, 0.18930147222558313, 0.18287126993837433, 0.1772285299455172, 0.1870966245606125, 0.17100229440844028, 0.16999476027415017, 0.17744395560067028, 0.17180889425103962, 0.1757752019039457, 0.18471115815682837, 0.18695775112980206, 0.18405784380645562, 0.17877215768830412, 0.1665769552670897, 0.17228023163242978, 0.18327595226269233, 0.17896552770976837, 0.18701345566047456, 0.1285177260352831, 0.16832778629877554, 0.14813345072892747, 0.7397991180632475, 0.1944102121993715, 0.7047284587760303, 0.11897868918084564, 0.17255654399096676, 0.27773944213096247, 0.6811390877462962, 0.15311285613353542, 0.4055657955888512, 0.20045987219493466, 0.16097798173458144, 0.19942278554901294, 0.6811939856607508, 0.15341995052266522, 0.6051313634173514, 0.16384223483238058, 0.1945206481639037, 0.17544932352215004, 0.17353736915862827, 0.18831581399752262, 0.15491283783377807, 0.17501434711224828, 0.17237399442218926, 0.18426011069596082, 0.08240109546941987, 0.09575524134604152, 0.06482000561156642, 0.07622615094206175, 0.08016761566222008, 0.07495351616050161, 0.08097947886824097, 0.07754460637927807, 0.06245573515019165]}, "mutation_prompt": null}
{"id": "a17eb2e0-4eeb-411e-bb30-2fabb58043f8", "solution": "import numpy as np\n\nclass MultiSwarm_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, nswarms=5, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.nswarms = nswarms\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pops = [np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim)) for _ in range(self.nswarms)]\n        pbests = [np.copy(pop) for pop in pops]\n        gbests = [pop[np.argmin(evaluate(pop))] for pop in pops]\n        velocities = [np.zeros_like(pop) for pop in pops]\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            for swarm_idx in range(self.nswarms):\n                pops[swarm_idx], pbests[swarm_idx], gbests[swarm_idx] = mutate(pbests[swarm_idx], gbests[swarm_idx], pops[swarm_idx], self.F, self.CR)\n                velocities[swarm_idx] = update_velocity(pbests[swarm_idx], pops[swarm_idx], velocities[swarm_idx], gbests[swarm_idx], self.w, self.c1, self.c2)\n                pops[swarm_idx] += velocities[swarm_idx]\n        \n        final_gbest = np.array(gbests)[np.argmin([func(g) for g in gbests])]\n        return final_gbest", "name": "MultiSwarm_DE_PSO_Optimizer", "description": "Enhancing diversity through multi-swarm optimization by introducing multiple subpopulations with independent evolution and information exchange.", "configspace": "", "generation": 15, "fitness": 0.13919640640855155, "feedback": "The algorithm MultiSwarm_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.15.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.22182688201893586, 0.28718705609886996, 0.23164745924793406, 0.21572618706269697, 0.21337122728879176, 0.23953232175857997, 0.24780921898781705, 0.2635973751903977, 0.24579252577697652, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008432537398401663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06761887286418733, 0.06378431282917796, 0.06510311054363538, 0.06430218003838395, 0.05024034126377919, 0.05880706395895574, 0.06957979042641149, 0.04969984676228412, 0.0693538958423564, 0.044622597034920886, 0.04107839062770635, 0.04818264856855514, 0.05887750269345049, 0.05727143336192653, 0.05847942780893267, 0.04933792426408912, 0.0467234255975334, 0.047234876043491414, 0.7502326668547087, 0.7902959063165911, 0.7433376937697457, 0.811450432892972, 0.7542313542078997, 0.7541366952084244, 0.7789221903114067, 0.809261513801942, 0.8019349029361955, 0.11683571108884694, 0.10380485192170841, 0.08300643476474812, 0.10182955898244528, 0.1063926443865234, 0.12352790210565667, 0.13061862648114075, 0.09801401362082418, 0.12949608244372668, 0.19903589314019499, 0.19484369264116652, 0.1652170015342661, 0.18168122808080212, 0.1833167048212686, 0.16398097035016834, 0.15996639607371366, 0.17044819911001508, 0.15191418129024337, 0.05631686150941184, 0.061968525778971384, 0.04579704513812555, 0.05678642051531846, 0.04668528089150026, 0.06039079692820326, 0.05530105967051169, 0.039208527746265154, 0.0755092734569347, 0.0758296799420527, 0.04383487481173176, 0.04896340394105825, 0.05416569823056738, 0.07322704791264756, 0.05740700421086409, 0.06394042672965994, 0.06401736858981932, 0.053968304499619424, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05990726775566768, 0.050122333259227214, 0.0527207128967615, 0.05081741762469594, 0.049166734475825646, 0.03501092664525729, 0.05582768567038898, 0.05768149037542758, 0.03409455227554514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03566396653437265, 0.012272324646732113, 0.02109161329816811, 0.013734016400489435, 0.007690547038937123, 0.016550955966647574, 0.008024098996778584, 0.015173815013511893, 0.025431636658906243, 0.2549115136946608, 0.2337597394478177, 0.2508427246600894, 0.24690369571867965, 0.23889073663336147, 0.24770223244186396, 0.28895229917473897, 0.2535242172634433, 0.23953366165979062, 0.06754822461113086, 0.0654915806908346, 0.05893329286220417, 0.06729983462185851, 0.06429915661994656, 0.05688176285031299, 0.07078757595411622, 0.06340285242526367, 0.06592686397242209, 0.11727942834934724, 0.1215659514371693, 0.16891409962362014, 0.1586597438649815, 0.1742388167925668, 0.1302909066234157, 0.12869088295478648, 0.1357297391531922, 0.13010940240482072, 0.1846356604920858, 0.20364934020647318, 0.1893597870940006, 0.2093847381587003, 0.18969247975496106, 0.19213391803690383, 0.18680921121934646, 0.19520698919508084, 0.19275521350319846, 0.13491207321292764, 0.11990949771609427, 0.14851882342999578, 0.15613711452516876, 0.16062894325140664, 0.16101418126289224, 0.1264260656894719, 0.1528865976607865, 0.1255781125794967, 0.1756357469584413, 0.16380580683394097, 0.17246258917579893, 0.1780112297971611, 0.1742894542218021, 0.15607318542744375, 0.20351999388746123, 0.15826483757838194, 0.18700393329617537, 0.15801058513061106, 0.1547989198023575, 0.14826800458416944, 0.16300055151313975, 0.16247916826942077, 0.1574718806330324, 0.1535353438189473, 0.15425510548609822, 0.16775467553809997, 0.1588508102565107, 0.16337016098860313, 0.2164739455751703, 0.24663811345752684, 0.20513127223133665, 0.21115104784344763, 0.23234873014560842, 0.15184936202196309, 0.20796829465243283, 0.23480190120501043, 0.1604356752191557, 0.26550442944939967, 0.20169477319658913, 0.1249136993118184, 0.14695295938661912, 0.16490976300746785, 0.16748114402796221, 0.2312808447081941, 0.16282473271509845, 0.1840951386782479, 0.16764616044673353, 0.1748092268259025, 0.1637672214448026, 0.1519547067041751, 0.1776649021579222, 0.1748771475785923, 0.17117015779880018, 0.06683273959462044, 0.058667434314988554, 0.06234555620642901, 0.05891046928376964, 0.06020517583873353, 0.05829471466465397, 0.05859094021132516, 0.07016390367497183, 0.05264225744151385]}, "mutation_prompt": null}
{"id": "5fade3ec-4b82-4466-a0db-73706a85b755", "solution": "import numpy as np\n\nclass Enhanced_Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c, d, e = pop[np.random.choice(idxs, 5, replace=False)]\n                mutant = np.clip(a + F * (b - c) + F * (d - e), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_Dynamic_DE_PSO_Optimizer", "description": "Enhanced Dynamic_DE_PSO_Optimizer by incorporating adaptive population size and mutation strategy to improve convergence rate and exploration in optimization.", "configspace": "", "generation": 16, "fitness": 0.21648354705364184, "feedback": "The algorithm Enhanced_Dynamic_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.6211622414202516, 0.3851679341525551, 0.6071721274021353, 0.5027822547314735, 0.6003724575842255, 0.5204104028585521, 0.5732987368081577, 0.6295835734533196, 0.5419150433771381, 0.05069700222795814, 0.003514826710310226, 0.03248110695125128, 0.07214202270297232, 0.136609814752491, 0.011189940683217214, 0.06370247131825346, 0.0006994981691524904, 0.05173437457000796, 0.07532897182665399, 0.08508119311423001, 0.10171374533773014, 0.1285726303434752, 0.09330120195273339, 0.08380916066684607, 0.10843264132904207, 0.08946801776362867, 0.0965482351520377, 0.10019578453193756, 0.06309562969274707, 0.07884711751737017, 0.08817793997699719, 0.09915003517404786, 0.10222120496396203, 0.06611276895064033, 0.0726798058442808, 0.08113066837002958, 0.949454358275076, 0.9630096639629765, 0.9072801158178379, 0.6970656400026232, 0.8801229816818779, 0.9003734673316879, 0.9621204855264741, 0.8971895200248895, 0.931586503553304, 0.2923013368392021, 0.27487168784169236, 0.19442107842134815, 0.17359584123245908, 0.1730844694909185, 0.24413384335175015, 0.2839118963173074, 0.2678347570536892, 0.18742295461001734, 0.21282397698278033, 0.21588997922941378, 0.605341814467331, 0.6388982684511277, 0.19410207818503722, 0.200110203577211, 0.22153953063733356, 0.658109022329473, 0.7123560832569678, 0.14548389499635983, 0.1132647097104511, 0.0841394035802363, 0.12985712669988736, 0.11867369591460353, 9.999999999998899e-05, 0.12391442331508928, 0.09806824732966701, 0.18005652259894467, 0.1582159238362617, 0.11635492676400394, 0.10842563070071176, 0.1321761978470284, 0.12055416993348067, 0.1268842821545011, 0.12544165366093807, 0.07714294298350999, 0.09088954250629233, 0.05050762392219499, 0.0171752550514509, 0.0762008790523716, 0.048515924889770745, 0.07864212569536233, 0.033648069706633366, 0.034118624726671265, 0.03426623123864414, 9.999999999998899e-05, 0.08941314244722232, 0.09452576721455697, 0.07498585513707601, 0.1720893694464687, 0.13305494675288987, 0.030119482599074265, 0.036155914742820094, 0.056818212587061656, 0.17216102112284826, 0.08928199343712007, 0.019663405297984382, 0.09256987068286582, 0.05309104263997888, 0.08904813897286934, 0.028067027156263302, 0.15103276239041064, 0.06802424160530185, 0.05254051928720527, 0.10336942635802115, 0.1403425438709357, 0.05947472084154648, 0.1315573267707032, 0.07172541173196134, 0.09495975855600913, 0.18294597132929358, 0.09607442070269312, 0.14274646226265852, 0.3732709404715867, 0.43775924528663235, 0.43409042005663434, 0.3791114142017863, 0.4205359198983215, 0.3928342373906769, 0.3907562435605799, 0.4105050269679287, 0.35374359687299173, 0.08308621850387976, 0.07674676297722782, 0.087104368057068, 0.1410309138449959, 0.07238658019939537, 0.11513144039627243, 0.11283180525716685, 0.09059987863318342, 0.08545951758172943, 0.16250994875213365, 0.1399003166293039, 0.16757624027738272, 0.15055783486658092, 0.1408948526525381, 0.16623128187415315, 0.20084756109275792, 0.1615853394759581, 0.1647118828094164, 0.21014630295767966, 0.2431965814005238, 0.3048703493754309, 0.19367808922177654, 0.29714040946689546, 0.2664115958612788, 0.2820598148052542, 0.33199054019322927, 0.24032645235524486, 0.2157041380432253, 0.17981402401609414, 0.24383174316483713, 0.2627950817920497, 0.2401036356387083, 0.28185165653246536, 0.17984731761442763, 0.22189911527330752, 0.18978564390437636, 0.17698376159700113, 0.1639907084690183, 0.1832260889025843, 0.19949852031774107, 0.18996116505639793, 0.17577743019226055, 0.2077157438944205, 0.21263208164571035, 0.16489958898065582, 0.17868813417268048, 0.17063520464337711, 0.16725070988097723, 0.17655035467662206, 0.16909368772930755, 0.16314744074561693, 0.17820363651788118, 0.16356540180175083, 0.21961071894209094, 0.6458731049224178, 0.16532588440161455, 0.14839969831517597, 0.29531744436887963, 0.1682171624478982, 0.17375399705921246, 0.17211508742569692, 0.14745685858928592, 0.556449159718295, 0.7049187202895133, 0.201046571378946, 0.41711591692339023, 0.195597668808285, 0.15506140640808952, 0.14674999331637062, 0.12238553565400889, 0.1583493854963024, 0.601861909591419, 0.17756704753213615, 0.1742093253917848, 0.1819957765637037, 0.17189303496742725, 0.20076310601295055, 0.1562706087527056, 0.17945605711013035, 0.196848435443559, 0.17238672269269661, 0.07874110224905673, 0.051278883032276235, 0.06850625281886402, 0.06932700040098638, 0.07286200737342186, 0.06852020976411477, 0.0597922684274832, 0.07328526480906017, 0.06595397116577029]}, "mutation_prompt": null}
{"id": "cc8f63a5-d56e-47e6-9ffe-deee80e71c4d", "solution": "import numpy as np\n\nclass Enhanced_Dynamic_DE_PSO_Optimizer(Dynamic_DE_PSO_Optimizer):\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        super().__init__(budget, dim, npop, F, CR, w, c1, c2, F_decay, CR_decay, w_decay, c1_decay, c2_decay)\n\n    def mutate_hybrid(pbest, gbest, pop, F, CR):\n        mutant_pop = []\n        for i in range(self.npop):\n            idxs = [idx for idx in range(self.npop) if idx != i]\n            a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n            pbest_mutant = np.clip(pop[i] + F * (pbest[i] - pop[i]) + F * (gbest - pop[i]), -5.0, 5.0)\n            if np.random.rand() < CR:\n                mutant = np.clip(pbest_mutant, -5.0, 5.0)\n            else:\n                mutant = pop[i]\n            if func(mutant) < func(pop[i]):\n                pop[i] = mutant\n            if func(mutant) < func(pbest[i]):\n                pbest[i] = mutant\n            if func(mutant) < func(gbest):\n                gbest = mutant\n        return pop, pbest, gbest\n\n    for _ in range(self.budget):\n        self.F *= self.F_decay\n        self.CR *= self.CR_decay\n        self.w *= self.w_decay\n        self.c1 *= self.c1_decay\n        self.c2 *= self.c2_decay\n        \n        pop, pbest, gbest = mutate_hybrid(pbest, gbest, pop, self.F, self.CR)\n        velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n        pop += velocity\n    \n    return gbest", "name": "Enhanced_Dynamic_DE_PSO_Optimizer", "description": "Enhanced Dynamic_DE_PSO_Optimizer by introducing a hybrid mutation strategy combining Differential Evolution's current-to-pbest/1 and Particle Swarm Optimization's best-so-far positions to improve exploration-exploitation balance.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError(\"'return' outside function\", ('<string>', 36, 5, None)).", "error": "SyntaxError(\"'return' outside function\", ('<string>', 36, 5, None))", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {}, "mutation_prompt": null}
{"id": "4a651a6b-c8eb-4a92-a2ea-2aeda2f28d1a", "solution": "import numpy as np\n\nclass Enhanced_Dynamic_DE_PSO_Optimizer(Dynamic_DE_PSO_Optimizer):\n    def __call__(self, func):\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                gaussian_perturbation = np.random.normal(0, 0.1, size=self.dim)\n                mutant = np.clip(a + F * (b - c) + gaussian_perturbation, -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest", "name": "Enhanced_Dynamic_DE_PSO_Optimizer", "description": "Enhanced Dynamic_DE_PSO_Optimizer by introducing a dynamic mutation scheme based on Gaussian perturbation to increase diversity and improve exploration capabilities.", "configspace": "", "generation": 18, "fitness": 0.0, "feedback": "The algorithm Enhanced_Dynamic_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "4effb646-585f-410d-aa19-7eaf55ce38a5", "solution": "import numpy as np\n\nclass Enhanced_Opposition_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        def generate_opposite(pop):\n            return np.clip(-pop, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop_opposite = generate_opposite(pop)\n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_Opposition_DE_PSO_Optimizer", "description": "Enhancing diversity through opposition-based learning by generating opposite solutions and introducing a novel opposition-based mutation strategy.", "configspace": "", "generation": 19, "fitness": 0.21651938992378972, "feedback": "The algorithm Enhanced_Opposition_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.4761725772796388, 0.49330598676782855, 0.610710160337876, 0.5168857467674808, 0.5750125882924857, 0.5008599641883471, 0.47618386951607783, 0.5691037369244569, 0.5964061237674252, 0.16076741515430804, 0.026255501350947674, 9.999999999998899e-05, 9.999999999998899e-05, 0.03561951389306284, 9.999999999998899e-05, 0.026444373545261413, 0.08227280777869816, 9.999999999998899e-05, 0.08250793964226655, 0.11890230810445013, 0.09465415183275894, 0.0820471974823962, 0.06545350535422678, 0.11783802513898323, 0.08263852515260228, 0.0899688632404011, 0.07883818268876297, 0.09573391089739003, 0.0716790274466006, 0.06217335054691975, 0.08106453432528649, 0.03405814242678573, 0.06370459488399915, 0.09511298118987654, 0.07284639412120142, 0.06997418391131782, 0.9277904489742702, 0.8596079408959093, 0.9487649774264948, 0.7709139906720786, 0.8614589200111302, 0.8885752425742293, 0.9309302978472149, 0.8452950090104351, 0.9081941553616775, 0.18193593379211292, 0.23812749398703725, 0.143771463902299, 0.18116478818124926, 0.16303282971986832, 0.23953024044460025, 0.2633778751693441, 0.2884270825737255, 0.2198554849773976, 0.2339531747279009, 0.1689014272802849, 0.2847473071714156, 0.3394520799851538, 0.6923132118343542, 0.33510136929556644, 0.26777608548060594, 0.2128541928066312, 0.6620522622148248, 0.16734788046587223, 0.1313786530883947, 0.13110671729176715, 0.16071144548465932, 0.1637914936863255, 0.10603298424515162, 0.16044336155318983, 0.13441006726938598, 0.13532990190252003, 0.15181409640059684, 0.16593387474436783, 0.3351156966606069, 0.19807931426602543, 0.11540818509420736, 0.10132011164360444, 0.17846718521061122, 0.11617854865019239, 0.11476412578104267, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792818339823218, 0.04730580089897907, 9.999999999998899e-05, 0.01580448275252022, 0.0028927217460826826, 0.07704660847810696, 0.08078147852994466, 0.16309730398268818, 0.056153075859784796, 0.10680447128570125, 0.10407319773026624, 0.029389216031968646, 0.035418202719721514, 0.2541524038609839, 0.11180667078228834, 0.1001025584348294, 0.03858303660323237, 0.04908420294595439, 0.036672599551710094, 0.038252368481453414, 0.089038107985968, 0.0488504852012831, 0.11179618103364375, 0.037694299623098226, 0.08687889611486821, 0.08580432995244391, 0.14844211362506698, 0.06333651445912769, 0.1399437233125378, 0.13762668354051444, 0.11311554317407302, 0.07751799768262135, 0.09285214895462635, 0.17752535622444887, 0.27621460260276676, 0.39695328211492653, 0.4185100962661914, 0.37940658828693996, 0.43029014764367735, 0.3549454188244492, 0.3683897839823729, 0.3963402472930816, 0.4620025931863301, 0.1360523321096212, 0.10469338287742846, 0.115324135145635, 0.10995250020019032, 0.1507418587608712, 0.09035302940867462, 0.05950665372693387, 0.1296645248350614, 0.1143448498987727, 0.17539649587698225, 0.12946966453037134, 0.16091880942926395, 0.1754719657644862, 0.19942842710884467, 0.1422775851286322, 0.15104441318401896, 0.13053308063815916, 0.22301801053388426, 0.2332375926828414, 0.24118952022830598, 0.26266867095591173, 0.25720480290443715, 0.29861275643440455, 0.24610490870326895, 0.2423150874061044, 0.2997859018577026, 0.19621106887851958, 0.1924928610026444, 0.17463927508815136, 0.21234627231871817, 0.1830836170479302, 0.192646820717977, 0.2799979936164897, 0.21436764181000356, 0.20707842825529288, 0.18812152731914134, 0.18930147222558313, 0.18287126993837433, 0.1772285299455172, 0.1870966245606125, 0.17100229440844028, 0.16999476027415017, 0.17744395560067028, 0.17180889425103962, 0.1757752019039457, 0.18471115815682837, 0.18695775112980206, 0.18405784380645562, 0.17877215768830412, 0.1665769552670897, 0.17228023163242978, 0.18327595226269233, 0.17896552770976837, 0.18701345566047456, 0.1285177260352831, 0.16832778629877554, 0.14813345072892747, 0.7397991180632475, 0.1944102121993715, 0.7047284587760303, 0.11897868918084564, 0.17255654399096676, 0.27773944213096247, 0.6811390877462962, 0.15311285613353542, 0.4055657955888512, 0.20045987219493466, 0.16097798173458144, 0.19942278554901294, 0.6811939856607508, 0.15341995052266522, 0.6051313634173514, 0.16384223483238058, 0.1945206481639037, 0.17544932352215004, 0.17353736915862827, 0.18831581399752262, 0.15491283783377807, 0.17501434711224828, 0.17237399442218926, 0.18426011069596082, 0.08240109546941987, 0.09575524134604152, 0.06482000561156642, 0.07622615094206175, 0.08016761566222008, 0.07495351616050161, 0.08097947886824097, 0.07754460637927807, 0.06245573515019165]}, "mutation_prompt": null}
{"id": "e5d98e5c-d4ba-4c69-bea5-036e8e51c68f", "solution": "import numpy as np\n\nclass Enhanced_Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_Dynamic_DE_PSO_Optimizer", "description": "Enhanced Dynamic DE_PSO_Optimizer with adaptive population size and boundary-handling strategies to improve exploration and exploitation in optimization tasks.", "configspace": "", "generation": 20, "fitness": 0.21651938992378972, "feedback": "The algorithm Enhanced_Dynamic_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.4761725772796388, 0.49330598676782855, 0.610710160337876, 0.5168857467674808, 0.5750125882924857, 0.5008599641883471, 0.47618386951607783, 0.5691037369244569, 0.5964061237674252, 0.16076741515430804, 0.026255501350947674, 9.999999999998899e-05, 9.999999999998899e-05, 0.03561951389306284, 9.999999999998899e-05, 0.026444373545261413, 0.08227280777869816, 9.999999999998899e-05, 0.08250793964226655, 0.11890230810445013, 0.09465415183275894, 0.0820471974823962, 0.06545350535422678, 0.11783802513898323, 0.08263852515260228, 0.0899688632404011, 0.07883818268876297, 0.09573391089739003, 0.0716790274466006, 0.06217335054691975, 0.08106453432528649, 0.03405814242678573, 0.06370459488399915, 0.09511298118987654, 0.07284639412120142, 0.06997418391131782, 0.9277904489742702, 0.8596079408959093, 0.9487649774264948, 0.7709139906720786, 0.8614589200111302, 0.8885752425742293, 0.9309302978472149, 0.8452950090104351, 0.9081941553616775, 0.18193593379211292, 0.23812749398703725, 0.143771463902299, 0.18116478818124926, 0.16303282971986832, 0.23953024044460025, 0.2633778751693441, 0.2884270825737255, 0.2198554849773976, 0.2339531747279009, 0.1689014272802849, 0.2847473071714156, 0.3394520799851538, 0.6923132118343542, 0.33510136929556644, 0.26777608548060594, 0.2128541928066312, 0.6620522622148248, 0.16734788046587223, 0.1313786530883947, 0.13110671729176715, 0.16071144548465932, 0.1637914936863255, 0.10603298424515162, 0.16044336155318983, 0.13441006726938598, 0.13532990190252003, 0.15181409640059684, 0.16593387474436783, 0.3351156966606069, 0.19807931426602543, 0.11540818509420736, 0.10132011164360444, 0.17846718521061122, 0.11617854865019239, 0.11476412578104267, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792818339823218, 0.04730580089897907, 9.999999999998899e-05, 0.01580448275252022, 0.0028927217460826826, 0.07704660847810696, 0.08078147852994466, 0.16309730398268818, 0.056153075859784796, 0.10680447128570125, 0.10407319773026624, 0.029389216031968646, 0.035418202719721514, 0.2541524038609839, 0.11180667078228834, 0.1001025584348294, 0.03858303660323237, 0.04908420294595439, 0.036672599551710094, 0.038252368481453414, 0.089038107985968, 0.0488504852012831, 0.11179618103364375, 0.037694299623098226, 0.08687889611486821, 0.08580432995244391, 0.14844211362506698, 0.06333651445912769, 0.1399437233125378, 0.13762668354051444, 0.11311554317407302, 0.07751799768262135, 0.09285214895462635, 0.17752535622444887, 0.27621460260276676, 0.39695328211492653, 0.4185100962661914, 0.37940658828693996, 0.43029014764367735, 0.3549454188244492, 0.3683897839823729, 0.3963402472930816, 0.4620025931863301, 0.1360523321096212, 0.10469338287742846, 0.115324135145635, 0.10995250020019032, 0.1507418587608712, 0.09035302940867462, 0.05950665372693387, 0.1296645248350614, 0.1143448498987727, 0.17539649587698225, 0.12946966453037134, 0.16091880942926395, 0.1754719657644862, 0.19942842710884467, 0.1422775851286322, 0.15104441318401896, 0.13053308063815916, 0.22301801053388426, 0.2332375926828414, 0.24118952022830598, 0.26266867095591173, 0.25720480290443715, 0.29861275643440455, 0.24610490870326895, 0.2423150874061044, 0.2997859018577026, 0.19621106887851958, 0.1924928610026444, 0.17463927508815136, 0.21234627231871817, 0.1830836170479302, 0.192646820717977, 0.2799979936164897, 0.21436764181000356, 0.20707842825529288, 0.18812152731914134, 0.18930147222558313, 0.18287126993837433, 0.1772285299455172, 0.1870966245606125, 0.17100229440844028, 0.16999476027415017, 0.17744395560067028, 0.17180889425103962, 0.1757752019039457, 0.18471115815682837, 0.18695775112980206, 0.18405784380645562, 0.17877215768830412, 0.1665769552670897, 0.17228023163242978, 0.18327595226269233, 0.17896552770976837, 0.18701345566047456, 0.1285177260352831, 0.16832778629877554, 0.14813345072892747, 0.7397991180632475, 0.1944102121993715, 0.7047284587760303, 0.11897868918084564, 0.17255654399096676, 0.27773944213096247, 0.6811390877462962, 0.15311285613353542, 0.4055657955888512, 0.20045987219493466, 0.16097798173458144, 0.19942278554901294, 0.6811939856607508, 0.15341995052266522, 0.6051313634173514, 0.16384223483238058, 0.1945206481639037, 0.17544932352215004, 0.17353736915862827, 0.18831581399752262, 0.15491283783377807, 0.17501434711224828, 0.17237399442218926, 0.18426011069596082, 0.08240109546941987, 0.09575524134604152, 0.06482000561156642, 0.07622615094206175, 0.08016761566222008, 0.07495351616050161, 0.08097947886824097, 0.07754460637927807, 0.06245573515019165]}, "mutation_prompt": null}
{"id": "101f5cda-1b5c-4512-8b23-f3c2188ca436", "solution": "import numpy as np\n\nclass Multi_Stage_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def multi_stage_evolution(pbest, gbest, pop, F, CR):\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pbest, gbest, pop\n\n        def adapt_evolution(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pbest, gbest, pop = multi_stage_evolution(pbest, gbest, pop, self.F, self.CR)\n            velocity = adapt_evolution(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Multi_Stage_DE_PSO_Optimizer", "description": "Improved DE_PSO_Optimizer using Multi-Stage Evolution with adaptive evolution strategies to enhance population diversity and convergence speed.", "configspace": "", "generation": 21, "fitness": 0.21651938992378972, "feedback": "The algorithm Multi_Stage_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.4761725772796388, 0.49330598676782855, 0.610710160337876, 0.5168857467674808, 0.5750125882924857, 0.5008599641883471, 0.47618386951607783, 0.5691037369244569, 0.5964061237674252, 0.16076741515430804, 0.026255501350947674, 9.999999999998899e-05, 9.999999999998899e-05, 0.03561951389306284, 9.999999999998899e-05, 0.026444373545261413, 0.08227280777869816, 9.999999999998899e-05, 0.08250793964226655, 0.11890230810445013, 0.09465415183275894, 0.0820471974823962, 0.06545350535422678, 0.11783802513898323, 0.08263852515260228, 0.0899688632404011, 0.07883818268876297, 0.09573391089739003, 0.0716790274466006, 0.06217335054691975, 0.08106453432528649, 0.03405814242678573, 0.06370459488399915, 0.09511298118987654, 0.07284639412120142, 0.06997418391131782, 0.9277904489742702, 0.8596079408959093, 0.9487649774264948, 0.7709139906720786, 0.8614589200111302, 0.8885752425742293, 0.9309302978472149, 0.8452950090104351, 0.9081941553616775, 0.18193593379211292, 0.23812749398703725, 0.143771463902299, 0.18116478818124926, 0.16303282971986832, 0.23953024044460025, 0.2633778751693441, 0.2884270825737255, 0.2198554849773976, 0.2339531747279009, 0.1689014272802849, 0.2847473071714156, 0.3394520799851538, 0.6923132118343542, 0.33510136929556644, 0.26777608548060594, 0.2128541928066312, 0.6620522622148248, 0.16734788046587223, 0.1313786530883947, 0.13110671729176715, 0.16071144548465932, 0.1637914936863255, 0.10603298424515162, 0.16044336155318983, 0.13441006726938598, 0.13532990190252003, 0.15181409640059684, 0.16593387474436783, 0.3351156966606069, 0.19807931426602543, 0.11540818509420736, 0.10132011164360444, 0.17846718521061122, 0.11617854865019239, 0.11476412578104267, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792818339823218, 0.04730580089897907, 9.999999999998899e-05, 0.01580448275252022, 0.0028927217460826826, 0.07704660847810696, 0.08078147852994466, 0.16309730398268818, 0.056153075859784796, 0.10680447128570125, 0.10407319773026624, 0.029389216031968646, 0.035418202719721514, 0.2541524038609839, 0.11180667078228834, 0.1001025584348294, 0.03858303660323237, 0.04908420294595439, 0.036672599551710094, 0.038252368481453414, 0.089038107985968, 0.0488504852012831, 0.11179618103364375, 0.037694299623098226, 0.08687889611486821, 0.08580432995244391, 0.14844211362506698, 0.06333651445912769, 0.1399437233125378, 0.13762668354051444, 0.11311554317407302, 0.07751799768262135, 0.09285214895462635, 0.17752535622444887, 0.27621460260276676, 0.39695328211492653, 0.4185100962661914, 0.37940658828693996, 0.43029014764367735, 0.3549454188244492, 0.3683897839823729, 0.3963402472930816, 0.4620025931863301, 0.1360523321096212, 0.10469338287742846, 0.115324135145635, 0.10995250020019032, 0.1507418587608712, 0.09035302940867462, 0.05950665372693387, 0.1296645248350614, 0.1143448498987727, 0.17539649587698225, 0.12946966453037134, 0.16091880942926395, 0.1754719657644862, 0.19942842710884467, 0.1422775851286322, 0.15104441318401896, 0.13053308063815916, 0.22301801053388426, 0.2332375926828414, 0.24118952022830598, 0.26266867095591173, 0.25720480290443715, 0.29861275643440455, 0.24610490870326895, 0.2423150874061044, 0.2997859018577026, 0.19621106887851958, 0.1924928610026444, 0.17463927508815136, 0.21234627231871817, 0.1830836170479302, 0.192646820717977, 0.2799979936164897, 0.21436764181000356, 0.20707842825529288, 0.18812152731914134, 0.18930147222558313, 0.18287126993837433, 0.1772285299455172, 0.1870966245606125, 0.17100229440844028, 0.16999476027415017, 0.17744395560067028, 0.17180889425103962, 0.1757752019039457, 0.18471115815682837, 0.18695775112980206, 0.18405784380645562, 0.17877215768830412, 0.1665769552670897, 0.17228023163242978, 0.18327595226269233, 0.17896552770976837, 0.18701345566047456, 0.1285177260352831, 0.16832778629877554, 0.14813345072892747, 0.7397991180632475, 0.1944102121993715, 0.7047284587760303, 0.11897868918084564, 0.17255654399096676, 0.27773944213096247, 0.6811390877462962, 0.15311285613353542, 0.4055657955888512, 0.20045987219493466, 0.16097798173458144, 0.19942278554901294, 0.6811939856607508, 0.15341995052266522, 0.6051313634173514, 0.16384223483238058, 0.1945206481639037, 0.17544932352215004, 0.17353736915862827, 0.18831581399752262, 0.15491283783377807, 0.17501434711224828, 0.17237399442218926, 0.18426011069596082, 0.08240109546941987, 0.09575524134604152, 0.06482000561156642, 0.07622615094206175, 0.08016761566222008, 0.07495351616050161, 0.08097947886824097, 0.07754460637927807, 0.06245573515019165]}, "mutation_prompt": null}
{"id": "6cd54b9c-1abf-4c88-868c-beb8c4b42ccc", "solution": "import numpy as np\n\nclass Improved_Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                levy = np.random.standard_cauchy(self.dim)\n                mutant = np.clip(a + F * (b - c) + levy, -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest\n", "name": "Improved_Dynamic_DE_PSO_Optimizer", "description": "Improved Dynamic_DE_PSO_Optimizer by incorporating Levy flights for enhanced global search capability while maintaining the original parameter adaptation strategy for local exploration.", "configspace": "", "generation": 22, "fitness": 0.19661280011575255, "feedback": "The algorithm Improved_Dynamic_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.4831413232707793, 0.4058329526250616, 0.44086078451071053, 0.40292448375892287, 0.5226039356708433, 0.4024541636729063, 0.46877300499072794, 0.43367645190419213, 0.4985120495213038, 0.0016099651618595168, 0.04931535193793968, 0.005722213376283203, 0.04363939435507891, 9.999999999998899e-05, 0.008810944371230867, 9.999999999998899e-05, 0.01532924548549841, 9.999999999998899e-05, 0.11889516143063594, 0.09293993705835024, 0.11004713516322373, 0.10656027341777408, 0.09555749083144327, 0.0885067182156889, 0.09388883932565784, 0.09798774705140345, 0.13345853237702665, 0.05912004951051675, 0.08445895314029261, 0.058636434472189136, 0.06213045979992038, 0.0631107383761339, 0.054221806418072394, 0.05755574206141245, 0.06117321109329932, 0.09503523460342478, 0.964350363697236, 0.8852886103994537, 0.9347696750492256, 0.8990944399120325, 0.9305393114233929, 0.9364128134472114, 0.9486892854831764, 0.9467010526421582, 0.9605342072067955, 0.1891506201043084, 0.16147828136365427, 0.1439893959044508, 0.20991151563352572, 0.12007641501851363, 0.203295720256101, 0.2076367381976969, 0.14236059104171495, 0.16331550225918745, 0.30884542494550504, 0.5398451930193868, 0.20556707721709966, 0.20258263826358236, 0.18862120813814787, 0.15013184627513654, 0.26434323042854113, 0.5948079096909045, 0.327773744665393, 0.11673337439381215, 0.14768075478091747, 0.026513629982604425, 0.09134860963039904, 0.10272268805334328, 0.08972425931295658, 0.08428353181733617, 0.06181740636066135, 0.12716901477231768, 0.09865689478570983, 0.10670335450950008, 0.1066585271002165, 0.11461249317624989, 0.09808220134679946, 0.1234158150278094, 0.12528161044676744, 0.16810440487862266, 0.16392303435175493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08470478013576399, 0.14139452507824768, 9.999999999998899e-05, 0.022832459842717645, 0.071548024978626, 0.0719041235300476, 0.08300559077056424, 0.0568887096329892, 0.047211604727429024, 0.055067453507074426, 0.07719894295943797, 0.03968658968527017, 0.09664474830783198, 0.04881829973604457, 0.08999195817227024, 0.08694541580206572, 0.046423480893632574, 0.046993944548886835, 0.08284644471890101, 0.10319769128217171, 0.036249208676548905, 0.07062281076026666, 0.14160227752138765, 0.04081174797643272, 0.10150731645287192, 0.06515077431877303, 0.19240575810162253, 0.07669124435143626, 0.1220332524497062, 0.19898540675822962, 0.05990979002108865, 0.13638955429885813, 0.07770568509660702, 0.3585625687229871, 0.3865988654757945, 0.38638854552075763, 0.3259429131267684, 0.37836328954806175, 0.38800055453989335, 0.35979383308128154, 0.2997864659394188, 0.3418083684537113, 0.09290985402592555, 0.09217539163047972, 0.08429800534179899, 0.0926648605713537, 0.09105321385203657, 0.08929097388964857, 0.10617406497854154, 0.10480097400126542, 0.07448551097725664, 0.10606595649212736, 0.13725202011049764, 0.13654325477328222, 0.14042368127651828, 0.15726322002649706, 0.15805553900977065, 0.1506239646267008, 0.16048220516215495, 0.14899525087487842, 0.19803848793403356, 0.22257573682874865, 0.27317385925006543, 0.2274302871249222, 0.2239238135886651, 0.22017730664631796, 0.22366935586098002, 0.2751316590554116, 0.2386911437463034, 0.2342624207438374, 0.20576450623286668, 0.19292472880586653, 0.20904532843117873, 0.24210020289218248, 0.22054699274755918, 0.16870233706498095, 0.21895024549305675, 0.2149381356097313, 0.16814736465159563, 0.16818886154103507, 0.17535443851222665, 0.20095757927683355, 0.1807057234138627, 0.1757947133551756, 0.17788191959026523, 0.18139484603628897, 0.1849071705138683, 0.16343724672690862, 0.16935755935468055, 0.16971714875142896, 0.20246552810930518, 0.18455541345400495, 0.17643856990789342, 0.15380132359624166, 0.17588057811970104, 0.1829690898683891, 0.5844512799503467, 0.12374435553043373, 0.1455101591787047, 0.31294981818239254, 0.19060718361746187, 0.14890019389153308, 0.14824002011063242, 0.14784378505632756, 0.5832490358537226, 0.46426990115375566, 0.1482267779002967, 0.26185633379189854, 0.2574261212846254, 0.4586033006377285, 0.12019417804783039, 0.20238665979780113, 0.1435148166754745, 0.20051814704851378, 0.16832825490304548, 0.16533209326476683, 0.1740196073094198, 0.1753861783997912, 0.16945057458340362, 0.1932082639442303, 0.1726979816962988, 0.17972419360535186, 0.17844110532602775, 0.07666177439036836, 0.0747706529912937, 0.06790499751867396, 0.06155844924038034, 0.06968143904638402, 0.06678109829598489, 0.06286361439625998, 0.0702780227184292, 0.07387472633222714]}, "mutation_prompt": null}
{"id": "e60bb14d-fad1-491a-adca-d9532a3aedd9", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improved DE_PSO_Optimizer by incorporating a dynamic adaptation of DE and PSO parameters during optimization to enhance exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.4761725772796388, 0.49330598676782855, 0.610710160337876, 0.5168857467674808, 0.5750125882924857, 0.5008599641883471, 0.47618386951607783, 0.5691037369244569, 0.5964061237674252, 0.16076741515430804, 0.026255501350947674, 9.999999999998899e-05, 9.999999999998899e-05, 0.03561951389306284, 9.999999999998899e-05, 0.026444373545261413, 0.08227280777869816, 9.999999999998899e-05, 0.08250793964226655, 0.11890230810445013, 0.09465415183275894, 0.0820471974823962, 0.06545350535422678, 0.11783802513898323, 0.08263852515260228, 0.0899688632404011, 0.07883818268876297, 0.09573391089739003, 0.0716790274466006, 0.06217335054691975, 0.08106453432528649, 0.03405814242678573, 0.06370459488399915, 0.09511298118987654, 0.07284639412120142, 0.06997418391131782, 0.9277904489742702, 0.8596079408959093, 0.9487649774264948, 0.7709139906720786, 0.8614589200111302, 0.8885752425742293, 0.9309302978472149, 0.8452950090104351, 0.9081941553616775, 0.18193593379211292, 0.23812749398703725, 0.143771463902299, 0.18116478818124926, 0.16303282971986832, 0.23953024044460025, 0.2633778751693441, 0.2884270825737255, 0.2198554849773976, 0.2339531747279009, 0.1689014272802849, 0.2847473071714156, 0.3394520799851538, 0.6923132118343542, 0.33510136929556644, 0.26777608548060594, 0.2128541928066312, 0.6620522622148248, 0.16734788046587223, 0.1313786530883947, 0.13110671729176715, 0.16071144548465932, 0.1637914936863255, 0.10603298424515162, 0.16044336155318983, 0.13441006726938598, 0.13532990190252003, 0.15181409640059684, 0.16593387474436783, 0.3351156966606069, 0.19807931426602543, 0.11540818509420736, 0.10132011164360444, 0.17846718521061122, 0.11617854865019239, 0.11476412578104267, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792818339823218, 0.04730580089897907, 9.999999999998899e-05, 0.01580448275252022, 0.0028927217460826826, 0.07704660847810696, 0.08078147852994466, 0.16309730398268818, 0.056153075859784796, 0.10680447128570125, 0.10407319773026624, 0.029389216031968646, 0.035418202719721514, 0.2541524038609839, 0.11180667078228834, 0.1001025584348294, 0.03858303660323237, 0.04908420294595439, 0.036672599551710094, 0.038252368481453414, 0.089038107985968, 0.0488504852012831, 0.11179618103364375, 0.037694299623098226, 0.08687889611486821, 0.08580432995244391, 0.14844211362506698, 0.06333651445912769, 0.1399437233125378, 0.13762668354051444, 0.11311554317407302, 0.07751799768262135, 0.09285214895462635, 0.17752535622444887, 0.27621460260276676, 0.39695328211492653, 0.4185100962661914, 0.37940658828693996, 0.43029014764367735, 0.3549454188244492, 0.3683897839823729, 0.3963402472930816, 0.4620025931863301, 0.1360523321096212, 0.10469338287742846, 0.115324135145635, 0.10995250020019032, 0.1507418587608712, 0.09035302940867462, 0.05950665372693387, 0.1296645248350614, 0.1143448498987727, 0.17539649587698225, 0.12946966453037134, 0.16091880942926395, 0.1754719657644862, 0.19942842710884467, 0.1422775851286322, 0.15104441318401896, 0.13053308063815916, 0.22301801053388426, 0.2332375926828414, 0.24118952022830598, 0.26266867095591173, 0.25720480290443715, 0.29861275643440455, 0.24610490870326895, 0.2423150874061044, 0.2997859018577026, 0.19621106887851958, 0.1924928610026444, 0.17463927508815136, 0.21234627231871817, 0.1830836170479302, 0.192646820717977, 0.2799979936164897, 0.21436764181000356, 0.20707842825529288, 0.18812152731914134, 0.18930147222558313, 0.18287126993837433, 0.1772285299455172, 0.1870966245606125, 0.17100229440844028, 0.16999476027415017, 0.17744395560067028, 0.17180889425103962, 0.1757752019039457, 0.18471115815682837, 0.18695775112980206, 0.18405784380645562, 0.17877215768830412, 0.1665769552670897, 0.17228023163242978, 0.18327595226269233, 0.17896552770976837, 0.18701345566047456, 0.1285177260352831, 0.16832778629877554, 0.14813345072892747, 0.7397991180632475, 0.1944102121993715, 0.7047284587760303, 0.11897868918084564, 0.17255654399096676, 0.27773944213096247, 0.6811390877462962, 0.15311285613353542, 0.4055657955888512, 0.20045987219493466, 0.16097798173458144, 0.19942278554901294, 0.6811939856607508, 0.15341995052266522, 0.6051313634173514, 0.16384223483238058, 0.1945206481639037, 0.17544932352215004, 0.17353736915862827, 0.18831581399752262, 0.15491283783377807, 0.17501434711224828, 0.17237399442218926, 0.18426011069596082, 0.08240109546941987, 0.09575524134604152, 0.06482000561156642, 0.07622615094206175, 0.08016761566222008, 0.07495351616050161, 0.08097947886824097, 0.07754460637927807, 0.06245573515019165]}, "mutation_prompt": null}
{"id": "1847391b-9c31-40a0-9183-ebb6db67884f", "solution": "import numpy as np\n\nclass Chaotic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_init(npop, dim):\n            chaotic_pop = np.zeros((npop, dim))\n            x = np.random.rand()\n            for i in range(npop):\n                x = 4 * x * (1 - x)\n                chaotic_pop[i] = -5.0 + (x * 10.0)\n            return chaotic_pop\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = chaotic_init(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Chaotic_DE_PSO_Optimizer", "description": "Enhancing exploration by introducing a chaotic search strategy based on the logistic map for population initialization.", "configspace": "", "generation": 24, "fitness": 0.05704639405591302, "feedback": "The algorithm Chaotic_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.07.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.09325905801563494, 0.09328600533663989, 0.09326325569642668, 0.03265427587460712, 0.03268498767047767, 0.03267718534092401, 0.08657363112857475, 0.0865904311929071, 0.08658197071669438, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.047864739891094854, 0.04884572229320128, 0.048483248735536444, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05003201437051352, 0.05152474088269554, 0.051314517028237194, 0.02175420705994724, 0.022028223543527736, 0.02216649671779647, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017987384396418893, 0.017976266415168918, 0.017970288693219816, 0.025093767413790324, 0.02507782673766834, 0.025069018747681526, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013416202483745643, 0.013741755176071235, 0.013669797766982295, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10203798003935971, 0.10140184295627463, 0.1016584588927042, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012622172868163029, 0.0012941882531275484, 0.0013095682255576113, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06149906766458568, 0.06076070270357781, 0.06068294567771959, 0.059436407096692734, 0.05803997182017773, 0.057983049934871245, 0.058599706304232724, 0.05759815185012007, 0.057382699882316035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08721759846822064, 0.09095084443621215, 0.0895457486473209, 0.057397051444162184, 0.06275850579823095, 0.06286657249989658, 0.0071990194884310466, 0.007585345185668668, 0.007336259328905914, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08390984476558982, 0.0839316274979568, 0.08385198576054498, 0.09209776157269589, 0.09213644182416103, 0.09215374180903801, 0.14562240416170824, 0.14574900966805504, 0.1457115790927852, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03944078758936542, 0.04355376425397539, 0.04337614525940314, 0.029117934263409695, 0.028586425540825577, 0.029062801220956502, 0.09076354621795568, 0.09723766341743234, 0.1060320579434556, 0.08327274338887403, 0.0834923832233675, 0.08378398316185809, 0.09165117135063916, 0.09017239336301841, 0.09100657271132351, 0.11430498438678915, 0.11439428891491932, 0.11453295851617318, 0.14285535709124764, 0.14272078831246904, 0.14305367827081572, 0.12802510243986964, 0.12778470108414475, 0.12817534923280527, 0.052065445071271865, 0.05232885933827569, 0.052643780315940636, 0.09114748110083437, 0.09093452807628255, 0.09076401117138888, 0.07620010278529576, 0.07626233508641433, 0.07638210175196491, 0.2597114741651477, 0.2441488244921618, 0.2605662116846331, 0.2596358356408488, 0.2539960100430356, 0.2419021190159738, 0.26031170777434265, 0.25394894402259993, 0.25447981428153454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14564084952330503, 0.14887037595088237, 0.14808539208258675, 0.15611516736533226, 0.15634997941039108, 0.15686835374740637, 0.047718207964346004, 0.04772745226522912, 0.047583981827914235, 0.0992415705237305, 0.09968425295945926, 0.09960186011370753, 0.03490290662389994, 0.029686019612717107, 0.0349504659269434, 0.014470347643958159, 0.014498771428450907, 0.014495713156291279, 0.07047204635276272, 0.07106146880145048, 0.07138223631567575, 0.019207631780861045, 0.019227500611468384, 0.019215860898609716, 0.18240734661199265, 0.1608837158843729, 0.167889053176406, 0.17904811005598964, 0.1756030888570569, 0.16930779279795172, 0.18695873557291487, 0.18738437601077973, 0.1743439870032375, 0.04019327944876128, 0.043597026943805184, 0.04322086527568059, 0.03410239965802431, 0.034661981301670086, 0.03398447090547141, 0.049772182724398095, 0.05036430393407332, 0.04965750069030528]}, "mutation_prompt": null}
{"id": "dc2ef3b0-8663-46e6-abcc-b2aac5beface", "solution": "import numpy as np\n\nclass Enhanced_Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99, w_min=0.4, w_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n        self.w_min = w_min\n        self.w_max = w_max\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                cognitive = c1 * np.random.rand() * (pbest[i] - pop[i])\n                social = c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = w * velocity[i] + cognitive + social\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w = self.w_max - (_ / self.budget) * (self.w_max - self.w_min)\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_Dynamic_DE_PSO_Optimizer", "description": "Enhanced Dynamic_DE_PSO_Optimizer by incorporating a novel adaptive inertia weight strategy to balance global and local search capabilities.", "configspace": "", "generation": 25, "fitness": 0.15871864191657878, "feedback": "The algorithm Enhanced_Dynamic_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.18.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.333438184331146, 0.27826394200977433, 0.30750419946673924, 0.26110096071933253, 0.2857699425125324, 0.30916020194261784, 0.29221819404916316, 0.26255001504987485, 0.29567016967686677, 9.999999999998899e-05, 0.0014748505697349534, 9.999999999998899e-05, 0.009581673988238948, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002380862433164488, 0.008993598153713034, 9.999999999998899e-05, 0.06480277725347128, 0.06644166739069601, 0.08787289503957141, 0.07748757524996186, 0.054219281442585476, 0.06327097917422086, 0.06662832980021394, 0.0703758153340901, 0.06843524451778882, 0.06343931904915712, 0.04252153378508805, 0.04714917698839949, 0.05462090021060573, 0.04599791641681916, 0.056687379643180824, 0.061877704249687304, 0.06004744517821914, 0.05763249721259922, 0.9264452171413514, 0.8451825237097519, 0.9586009587580995, 0.8313043542633887, 0.8910548030489133, 0.9154541975155669, 0.9469180797695783, 0.8950371746952261, 0.9412126256071863, 0.12721168843332764, 0.1286592814811114, 0.11075656670640766, 0.1371450935749392, 0.13712194843096315, 0.13312054037950327, 0.15306851492822082, 0.11035528200250355, 0.15724229632127606, 0.24881540098477872, 0.17419282214456921, 0.17810438108486437, 0.20594497139803425, 0.16968594909023538, 0.239978715154047, 0.13445573873364425, 0.21349115389173812, 0.23882620611500927, 0.0599606107200068, 0.13872238850896412, 0.10322061268373273, 0.04386747558684734, 0.09075967707076582, 0.04455105417744709, 0.10986049496786765, 0.09319975651171386, 0.09743832180904011, 0.10528030322419113, 0.08416296742775453, 0.07281566856108512, 0.09666204166625925, 0.10073577237260511, 0.0656629009493418, 0.11012701586820473, 0.11656705321837346, 0.07175353132659479, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015459507617273216, 0.04392939714387689, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10690373505481243, 0.051557140401849555, 0.12538374417872822, 0.10919693892098314, 0.09679173736980506, 0.03564921250776021, 0.07442069628781389, 0.04140428836811205, 0.14597798638071124, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02823038528849886, 0.05396495991154804, 0.035568775025512145, 0.023263073904396192, 0.032186756675044115, 0.060909010640443406, 0.03954454797725515, 0.05351457733961795, 0.05908485873472458, 0.2978321096385771, 0.2949946248553196, 0.3070622183242594, 0.31415327563563367, 0.298945525796518, 0.24701229278632175, 0.2870116051353644, 0.31782815255260255, 0.3016210631933035, 0.06005870948130598, 0.08051291887480583, 0.06435502054396569, 0.07167374593321352, 0.055147255951703666, 0.07692310766706656, 0.07097033935871622, 0.05879699286867146, 0.07165718128989962, 0.14587681900467908, 0.09975027247850954, 0.11741264457773637, 0.11635795956321504, 0.12286723254291465, 0.1089199991511709, 0.12185451527285418, 0.10962190202318778, 0.12106358474600587, 0.19188352346678272, 0.1942340489496296, 0.21063356804828504, 0.19810403990414416, 0.23543456609950542, 0.19384838705615637, 0.20924448208503021, 0.20499777196467583, 0.20764713284440228, 0.17528919020070166, 0.12869113430937795, 0.16075081902935218, 0.14263888641698408, 0.14003916768197033, 0.16197744409446035, 0.15111882519253683, 0.18963335605026244, 0.1351527552710602, 0.16861998067628958, 0.1779996691234088, 0.1633266194034695, 0.17732653967562984, 0.1792117168577575, 0.15591588401983048, 0.17361315108191355, 0.17384889490538247, 0.16287731252168558, 0.16494794885443098, 0.16218711333660718, 0.16053378898681492, 0.16203179950803093, 0.15813530578353752, 0.155050712542528, 0.15834035819558845, 0.1662302381051335, 0.16116405256287203, 0.1477269508162159, 0.2140498467261831, 0.166968489831954, 0.47806485952553857, 0.1855135170678498, 0.1624007779970521, 0.11629721483139277, 0.15616246496464714, 0.2069891960542981, 0.40082155013576914, 0.15182130042608788, 0.17833319482647003, 0.23792179629480936, 0.1491237936544283, 0.179393081465562, 0.42681472269368925, 0.19344025471040305, 0.19718638984528447, 0.16596407777230415, 0.1736232366569015, 0.16202437367814215, 0.17353736915862827, 0.16897451923025675, 0.1714594991864129, 0.16372497105716577, 0.16093269619787953, 0.17682498179739736, 0.07153901174800192, 0.060164212321168864, 0.05546601264738604, 0.04801707371528663, 0.061068210000124634, 0.05182332739217854, 0.050976474855696896, 0.0634589511243061, 0.056409081127186234]}, "mutation_prompt": null}
{"id": "a2cd6fe4-099d-4ab2-ac3c-a15a959157a4", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improved DE_PSO_Optimizer by incorporating a dynamic adaptation of DE and PSO parameters during optimization to enhance exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.4761725772796388, 0.49330598676782855, 0.610710160337876, 0.5168857467674808, 0.5750125882924857, 0.5008599641883471, 0.47618386951607783, 0.5691037369244569, 0.5964061237674252, 0.16076741515430804, 0.026255501350947674, 9.999999999998899e-05, 9.999999999998899e-05, 0.03561951389306284, 9.999999999998899e-05, 0.026444373545261413, 0.08227280777869816, 9.999999999998899e-05, 0.08250793964226655, 0.11890230810445013, 0.09465415183275894, 0.0820471974823962, 0.06545350535422678, 0.11783802513898323, 0.08263852515260228, 0.0899688632404011, 0.07883818268876297, 0.09573391089739003, 0.0716790274466006, 0.06217335054691975, 0.08106453432528649, 0.03405814242678573, 0.06370459488399915, 0.09511298118987654, 0.07284639412120142, 0.06997418391131782, 0.9277904489742702, 0.8596079408959093, 0.9487649774264948, 0.7709139906720786, 0.8614589200111302, 0.8885752425742293, 0.9309302978472149, 0.8452950090104351, 0.9081941553616775, 0.18193593379211292, 0.23812749398703725, 0.143771463902299, 0.18116478818124926, 0.16303282971986832, 0.23953024044460025, 0.2633778751693441, 0.2884270825737255, 0.2198554849773976, 0.2339531747279009, 0.1689014272802849, 0.2847473071714156, 0.3394520799851538, 0.6923132118343542, 0.33510136929556644, 0.26777608548060594, 0.2128541928066312, 0.6620522622148248, 0.16734788046587223, 0.1313786530883947, 0.13110671729176715, 0.16071144548465932, 0.1637914936863255, 0.10603298424515162, 0.16044336155318983, 0.13441006726938598, 0.13532990190252003, 0.15181409640059684, 0.16593387474436783, 0.3351156966606069, 0.19807931426602543, 0.11540818509420736, 0.10132011164360444, 0.17846718521061122, 0.11617854865019239, 0.11476412578104267, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792818339823218, 0.04730580089897907, 9.999999999998899e-05, 0.01580448275252022, 0.0028927217460826826, 0.07704660847810696, 0.08078147852994466, 0.16309730398268818, 0.056153075859784796, 0.10680447128570125, 0.10407319773026624, 0.029389216031968646, 0.035418202719721514, 0.2541524038609839, 0.11180667078228834, 0.1001025584348294, 0.03858303660323237, 0.04908420294595439, 0.036672599551710094, 0.038252368481453414, 0.089038107985968, 0.0488504852012831, 0.11179618103364375, 0.037694299623098226, 0.08687889611486821, 0.08580432995244391, 0.14844211362506698, 0.06333651445912769, 0.1399437233125378, 0.13762668354051444, 0.11311554317407302, 0.07751799768262135, 0.09285214895462635, 0.17752535622444887, 0.27621460260276676, 0.39695328211492653, 0.4185100962661914, 0.37940658828693996, 0.43029014764367735, 0.3549454188244492, 0.3683897839823729, 0.3963402472930816, 0.4620025931863301, 0.1360523321096212, 0.10469338287742846, 0.115324135145635, 0.10995250020019032, 0.1507418587608712, 0.09035302940867462, 0.05950665372693387, 0.1296645248350614, 0.1143448498987727, 0.17539649587698225, 0.12946966453037134, 0.16091880942926395, 0.1754719657644862, 0.19942842710884467, 0.1422775851286322, 0.15104441318401896, 0.13053308063815916, 0.22301801053388426, 0.2332375926828414, 0.24118952022830598, 0.26266867095591173, 0.25720480290443715, 0.29861275643440455, 0.24610490870326895, 0.2423150874061044, 0.2997859018577026, 0.19621106887851958, 0.1924928610026444, 0.17463927508815136, 0.21234627231871817, 0.1830836170479302, 0.192646820717977, 0.2799979936164897, 0.21436764181000356, 0.20707842825529288, 0.18812152731914134, 0.18930147222558313, 0.18287126993837433, 0.1772285299455172, 0.1870966245606125, 0.17100229440844028, 0.16999476027415017, 0.17744395560067028, 0.17180889425103962, 0.1757752019039457, 0.18471115815682837, 0.18695775112980206, 0.18405784380645562, 0.17877215768830412, 0.1665769552670897, 0.17228023163242978, 0.18327595226269233, 0.17896552770976837, 0.18701345566047456, 0.1285177260352831, 0.16832778629877554, 0.14813345072892747, 0.7397991180632475, 0.1944102121993715, 0.7047284587760303, 0.11897868918084564, 0.17255654399096676, 0.27773944213096247, 0.6811390877462962, 0.15311285613353542, 0.4055657955888512, 0.20045987219493466, 0.16097798173458144, 0.19942278554901294, 0.6811939856607508, 0.15341995052266522, 0.6051313634173514, 0.16384223483238058, 0.1945206481639037, 0.17544932352215004, 0.17353736915862827, 0.18831581399752262, 0.15491283783377807, 0.17501434711224828, 0.17237399442218926, 0.18426011069596082, 0.08240109546941987, 0.09575524134604152, 0.06482000561156642, 0.07622615094206175, 0.08016761566222008, 0.07495351616050161, 0.08097947886824097, 0.07754460637927807, 0.06245573515019165]}, "mutation_prompt": null}
{"id": "9bb3b8c0-712a-40de-893f-d053a28aaf57", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improved DE_PSO_Optimizer by incorporating a dynamic adaptation of DE and PSO parameters during optimization to enhance exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.4761725772796388, 0.49330598676782855, 0.610710160337876, 0.5168857467674808, 0.5750125882924857, 0.5008599641883471, 0.47618386951607783, 0.5691037369244569, 0.5964061237674252, 0.16076741515430804, 0.026255501350947674, 9.999999999998899e-05, 9.999999999998899e-05, 0.03561951389306284, 9.999999999998899e-05, 0.026444373545261413, 0.08227280777869816, 9.999999999998899e-05, 0.08250793964226655, 0.11890230810445013, 0.09465415183275894, 0.0820471974823962, 0.06545350535422678, 0.11783802513898323, 0.08263852515260228, 0.0899688632404011, 0.07883818268876297, 0.09573391089739003, 0.0716790274466006, 0.06217335054691975, 0.08106453432528649, 0.03405814242678573, 0.06370459488399915, 0.09511298118987654, 0.07284639412120142, 0.06997418391131782, 0.9277904489742702, 0.8596079408959093, 0.9487649774264948, 0.7709139906720786, 0.8614589200111302, 0.8885752425742293, 0.9309302978472149, 0.8452950090104351, 0.9081941553616775, 0.18193593379211292, 0.23812749398703725, 0.143771463902299, 0.18116478818124926, 0.16303282971986832, 0.23953024044460025, 0.2633778751693441, 0.2884270825737255, 0.2198554849773976, 0.2339531747279009, 0.1689014272802849, 0.2847473071714156, 0.3394520799851538, 0.6923132118343542, 0.33510136929556644, 0.26777608548060594, 0.2128541928066312, 0.6620522622148248, 0.16734788046587223, 0.1313786530883947, 0.13110671729176715, 0.16071144548465932, 0.1637914936863255, 0.10603298424515162, 0.16044336155318983, 0.13441006726938598, 0.13532990190252003, 0.15181409640059684, 0.16593387474436783, 0.3351156966606069, 0.19807931426602543, 0.11540818509420736, 0.10132011164360444, 0.17846718521061122, 0.11617854865019239, 0.11476412578104267, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792818339823218, 0.04730580089897907, 9.999999999998899e-05, 0.01580448275252022, 0.0028927217460826826, 0.07704660847810696, 0.08078147852994466, 0.16309730398268818, 0.056153075859784796, 0.10680447128570125, 0.10407319773026624, 0.029389216031968646, 0.035418202719721514, 0.2541524038609839, 0.11180667078228834, 0.1001025584348294, 0.03858303660323237, 0.04908420294595439, 0.036672599551710094, 0.038252368481453414, 0.089038107985968, 0.0488504852012831, 0.11179618103364375, 0.037694299623098226, 0.08687889611486821, 0.08580432995244391, 0.14844211362506698, 0.06333651445912769, 0.1399437233125378, 0.13762668354051444, 0.11311554317407302, 0.07751799768262135, 0.09285214895462635, 0.17752535622444887, 0.27621460260276676, 0.39695328211492653, 0.4185100962661914, 0.37940658828693996, 0.43029014764367735, 0.3549454188244492, 0.3683897839823729, 0.3963402472930816, 0.4620025931863301, 0.1360523321096212, 0.10469338287742846, 0.115324135145635, 0.10995250020019032, 0.1507418587608712, 0.09035302940867462, 0.05950665372693387, 0.1296645248350614, 0.1143448498987727, 0.17539649587698225, 0.12946966453037134, 0.16091880942926395, 0.1754719657644862, 0.19942842710884467, 0.1422775851286322, 0.15104441318401896, 0.13053308063815916, 0.22301801053388426, 0.2332375926828414, 0.24118952022830598, 0.26266867095591173, 0.25720480290443715, 0.29861275643440455, 0.24610490870326895, 0.2423150874061044, 0.2997859018577026, 0.19621106887851958, 0.1924928610026444, 0.17463927508815136, 0.21234627231871817, 0.1830836170479302, 0.192646820717977, 0.2799979936164897, 0.21436764181000356, 0.20707842825529288, 0.18812152731914134, 0.18930147222558313, 0.18287126993837433, 0.1772285299455172, 0.1870966245606125, 0.17100229440844028, 0.16999476027415017, 0.17744395560067028, 0.17180889425103962, 0.1757752019039457, 0.18471115815682837, 0.18695775112980206, 0.18405784380645562, 0.17877215768830412, 0.1665769552670897, 0.17228023163242978, 0.18327595226269233, 0.17896552770976837, 0.18701345566047456, 0.1285177260352831, 0.16832778629877554, 0.14813345072892747, 0.7397991180632475, 0.1944102121993715, 0.7047284587760303, 0.11897868918084564, 0.17255654399096676, 0.27773944213096247, 0.6811390877462962, 0.15311285613353542, 0.4055657955888512, 0.20045987219493466, 0.16097798173458144, 0.19942278554901294, 0.6811939856607508, 0.15341995052266522, 0.6051313634173514, 0.16384223483238058, 0.1945206481639037, 0.17544932352215004, 0.17353736915862827, 0.18831581399752262, 0.15491283783377807, 0.17501434711224828, 0.17237399442218926, 0.18426011069596082, 0.08240109546941987, 0.09575524134604152, 0.06482000561156642, 0.07622615094206175, 0.08016761566222008, 0.07495351616050161, 0.08097947886824097, 0.07754460637927807, 0.06245573515019165]}, "mutation_prompt": null}
{"id": "fed38240-7a0c-4849-b3b5-118326f40911", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR, func_values):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR or func(mutant) < np.mean(func_values):\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        func_values = evaluate(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR, func_values)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n            func_values = evaluate(pop)\n        \n        return gbest", "name": "Adaptive_DE_PSO_Optimizer", "description": "Introduce a novel adaptive mutation strategy based on the function values to improve exploration and exploitation.", "configspace": "", "generation": 28, "fitness": 0.2112746378907159, "feedback": "The algorithm Adaptive_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.5428409618761483, 0.36334743663362934, 0.48949128103570483, 0.46413988842821474, 0.4878424420913462, 0.5667245066616247, 0.5351980586466034, 0.48858535466783093, 0.5645836915911794, 0.014952722695779408, 0.1717947119106591, 0.010625588900504024, 0.0010436217879256082, 0.05107522293387179, 0.005579122989791685, 0.02933900959416902, 0.02933115975723577, 9.999999999998899e-05, 0.06902693393557946, 0.08375166290971248, 0.07771727176921395, 0.08940872735918526, 0.05889715712730592, 0.11208452675836544, 0.097837488387846, 0.11103539560219344, 0.10177694458549469, 0.06842082512753622, 0.07426059819200603, 0.06919057201069845, 0.07269735792480769, 0.10846883455144485, 0.05420832092919592, 0.08122599773023498, 0.06736230287966005, 0.09414376344027098, 0.9162985974907091, 0.7637857885139536, 0.932419810749263, 0.12105932628322369, 0.8092503329633345, 0.7890356921707561, 0.8971090222848496, 0.707766894209009, 0.9016243051291986, 0.22326098696508856, 0.2934041139650775, 0.23636462507692002, 0.24054644280227833, 0.20233737634058457, 0.2560404452742484, 0.21289394672174633, 0.1863236424716923, 0.20403386826264913, 0.6046893698778035, 0.43316880686534964, 0.5545017073609781, 0.6783078624219966, 0.31635496620793213, 0.31717845643112585, 0.5600584292119062, 0.23001985920676438, 0.6235427868544235, 0.1547136265917326, 0.1353744953954722, 0.11602487728146149, 9.999999999998899e-05, 0.17412119298053408, 0.0989045966818699, 0.12340505322078299, 0.1649018897195803, 0.11047603408757278, 0.12907054316463185, 0.11918371662271388, 0.11865931980738553, 0.12230271970423001, 0.13840104647805496, 0.1112905977013845, 0.17164247969586266, 0.1582904943794109, 0.19861101048826224, 0.040394990133396425, 9.999999999998899e-05, 0.014517257775907066, 0.12086278601235334, 0.08652948875233613, 0.021801665113867275, 0.09079850647467169, 9.999999999998899e-05, 0.09192748104679793, 0.1833573068605373, 0.07168384955956719, 0.1866377999592559, 0.1455400256454763, 0.10250023647147588, 0.0746094361061399, 0.13026198278647538, 0.1035126905933994, 0.06636267536733254, 0.0554860062211332, 0.07105704950666059, 0.09495344631979419, 0.041868914307565674, 0.05210324447759396, 0.09370862316913586, 0.05156260935589685, 0.03570758228675064, 0.02944230168836781, 0.09807949537234362, 0.14791425320560758, 0.1389425310877077, 0.16254365609108878, 0.13711213321591453, 0.14707152791713285, 0.06688420308235621, 0.08356270185901726, 0.07407908618246206, 0.3795617273285732, 0.44915987722710093, 0.39072098493852325, 0.39663796191410305, 0.4096882784825657, 0.4392929505643336, 0.4023594758855511, 0.40908514055885725, 0.39221666263970034, 0.12457445049320881, 0.08226173325574604, 0.09523360438069395, 0.0962693184002752, 0.11565281818731021, 0.10304696670712965, 0.07952833343952048, 0.09004698963014801, 0.08194306816512087, 0.20815544923423723, 0.13683736099611465, 0.16899408236390778, 0.12656290387791835, 0.26388155428894344, 0.20248470952461484, 0.15420921057084347, 0.12908425145302094, 0.20469776824719887, 0.22218959355093315, 0.29650342377169203, 0.24614429255128567, 0.24834244739738454, 0.2276522206554057, 0.23663265640059994, 0.26277507903246156, 0.2733560024377575, 0.27578687656647016, 0.17341965918594837, 0.16159313708790246, 0.2331380569268634, 0.21521388352839177, 0.19224898176690008, 0.21462778419693906, 0.21301360389356483, 0.2167270607990618, 0.22804946114484215, 0.19683914599699237, 0.2236049234017211, 0.17919640663235892, 0.19487315148830076, 0.16470058994190528, 0.22870741149089047, 0.22042706770522125, 0.1841121072688583, 0.17750101082660674, 0.17915644985051427, 0.18148856236916222, 0.17984239197400653, 0.17647408497277606, 0.19175368321202346, 0.1710276417377551, 0.16757842234133746, 0.18729662306610462, 0.183911931391179, 0.17860657525958612, 0.16005605424325564, 0.14619885008905953, 0.707728488066169, 0.18980145590443265, 0.1615438436763318, 0.11696581142912021, 0.1660270968702462, 0.14761619439279972, 0.7198326004047382, 0.15187790461710515, 0.07932168629473713, 0.2028681666261163, 0.16294273294309136, 0.19870342090995952, 0.5584774165954293, 0.1499957661355693, 0.6338067108107008, 0.1681637580674311, 0.17461538393695797, 0.1641511483179856, 0.16626774346870588, 0.1619117838485945, 0.1775227700476658, 0.18353112550167927, 0.1592019514925863, 0.1768849377563365, 0.07334166612853454, 0.06086511038974274, 0.06916473059179296, 0.07722823571622062, 0.07618101955767598, 0.07810992598690425, 0.05814997859259763, 0.06503804580271189, 0.0759900710623932]}, "mutation_prompt": null}
{"id": "81bc3454-8190-40bf-b5bd-7e752679fb22", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def levy_flight(self, beta=1.5):\n        sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * (2 ** ((beta - 1) / 2)))) ** (1 / beta)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return step\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                step = self.levy_flight()\n                mutant = np.clip(a + F * (b - c) + step, -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer", "description": "Enhance exploration by introducing Levy flight for a more diverse search strategy.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gamma' is not defined\").", "error": "NameError(\"name 'gamma' is not defined\")", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {}, "mutation_prompt": null}
{"id": "b526550e-92e2-474a-b7ff-cb55c23a068c", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improved DE_PSO_Optimizer by incorporating a dynamic adaptation of DE and PSO parameters during optimization to enhance exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.4761725772796388, 0.49330598676782855, 0.610710160337876, 0.5168857467674808, 0.5750125882924857, 0.5008599641883471, 0.47618386951607783, 0.5691037369244569, 0.5964061237674252, 0.16076741515430804, 0.026255501350947674, 9.999999999998899e-05, 9.999999999998899e-05, 0.03561951389306284, 9.999999999998899e-05, 0.026444373545261413, 0.08227280777869816, 9.999999999998899e-05, 0.08250793964226655, 0.11890230810445013, 0.09465415183275894, 0.0820471974823962, 0.06545350535422678, 0.11783802513898323, 0.08263852515260228, 0.0899688632404011, 0.07883818268876297, 0.09573391089739003, 0.0716790274466006, 0.06217335054691975, 0.08106453432528649, 0.03405814242678573, 0.06370459488399915, 0.09511298118987654, 0.07284639412120142, 0.06997418391131782, 0.9277904489742702, 0.8596079408959093, 0.9487649774264948, 0.7709139906720786, 0.8614589200111302, 0.8885752425742293, 0.9309302978472149, 0.8452950090104351, 0.9081941553616775, 0.18193593379211292, 0.23812749398703725, 0.143771463902299, 0.18116478818124926, 0.16303282971986832, 0.23953024044460025, 0.2633778751693441, 0.2884270825737255, 0.2198554849773976, 0.2339531747279009, 0.1689014272802849, 0.2847473071714156, 0.3394520799851538, 0.6923132118343542, 0.33510136929556644, 0.26777608548060594, 0.2128541928066312, 0.6620522622148248, 0.16734788046587223, 0.1313786530883947, 0.13110671729176715, 0.16071144548465932, 0.1637914936863255, 0.10603298424515162, 0.16044336155318983, 0.13441006726938598, 0.13532990190252003, 0.15181409640059684, 0.16593387474436783, 0.3351156966606069, 0.19807931426602543, 0.11540818509420736, 0.10132011164360444, 0.17846718521061122, 0.11617854865019239, 0.11476412578104267, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792818339823218, 0.04730580089897907, 9.999999999998899e-05, 0.01580448275252022, 0.0028927217460826826, 0.07704660847810696, 0.08078147852994466, 0.16309730398268818, 0.056153075859784796, 0.10680447128570125, 0.10407319773026624, 0.029389216031968646, 0.035418202719721514, 0.2541524038609839, 0.11180667078228834, 0.1001025584348294, 0.03858303660323237, 0.04908420294595439, 0.036672599551710094, 0.038252368481453414, 0.089038107985968, 0.0488504852012831, 0.11179618103364375, 0.037694299623098226, 0.08687889611486821, 0.08580432995244391, 0.14844211362506698, 0.06333651445912769, 0.1399437233125378, 0.13762668354051444, 0.11311554317407302, 0.07751799768262135, 0.09285214895462635, 0.17752535622444887, 0.27621460260276676, 0.39695328211492653, 0.4185100962661914, 0.37940658828693996, 0.43029014764367735, 0.3549454188244492, 0.3683897839823729, 0.3963402472930816, 0.4620025931863301, 0.1360523321096212, 0.10469338287742846, 0.115324135145635, 0.10995250020019032, 0.1507418587608712, 0.09035302940867462, 0.05950665372693387, 0.1296645248350614, 0.1143448498987727, 0.17539649587698225, 0.12946966453037134, 0.16091880942926395, 0.1754719657644862, 0.19942842710884467, 0.1422775851286322, 0.15104441318401896, 0.13053308063815916, 0.22301801053388426, 0.2332375926828414, 0.24118952022830598, 0.26266867095591173, 0.25720480290443715, 0.29861275643440455, 0.24610490870326895, 0.2423150874061044, 0.2997859018577026, 0.19621106887851958, 0.1924928610026444, 0.17463927508815136, 0.21234627231871817, 0.1830836170479302, 0.192646820717977, 0.2799979936164897, 0.21436764181000356, 0.20707842825529288, 0.18812152731914134, 0.18930147222558313, 0.18287126993837433, 0.1772285299455172, 0.1870966245606125, 0.17100229440844028, 0.16999476027415017, 0.17744395560067028, 0.17180889425103962, 0.1757752019039457, 0.18471115815682837, 0.18695775112980206, 0.18405784380645562, 0.17877215768830412, 0.1665769552670897, 0.17228023163242978, 0.18327595226269233, 0.17896552770976837, 0.18701345566047456, 0.1285177260352831, 0.16832778629877554, 0.14813345072892747, 0.7397991180632475, 0.1944102121993715, 0.7047284587760303, 0.11897868918084564, 0.17255654399096676, 0.27773944213096247, 0.6811390877462962, 0.15311285613353542, 0.4055657955888512, 0.20045987219493466, 0.16097798173458144, 0.19942278554901294, 0.6811939856607508, 0.15341995052266522, 0.6051313634173514, 0.16384223483238058, 0.1945206481639037, 0.17544932352215004, 0.17353736915862827, 0.18831581399752262, 0.15491283783377807, 0.17501434711224828, 0.17237399442218926, 0.18426011069596082, 0.08240109546941987, 0.09575524134604152, 0.06482000561156642, 0.07622615094206175, 0.08016761566222008, 0.07495351616050161, 0.08097947886824097, 0.07754460637927807, 0.06245573515019165]}, "mutation_prompt": null}
{"id": "23b3fba4-e0dd-4d43-b7bf-3fe6a4038195", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer(Dynamic_DE_PSO_Optimizer):\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99, levy_scale=0.1):\n        super().__init__(budget, dim, npop, F, CR, w, c1, c2, F_decay, CR_decay, w_decay, c1_decay, c2_decay)\n        self.levy_scale = levy_scale\n\n    def levy_flight(self, dim):\n        beta = 1.5\n        sigma = (np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (np.math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n        u = np.random.normal(0, sigma, dim)\n        v = np.random.normal(0, 1, dim)\n        step = u / (np.abs(v) ** (1 / beta))\n        return 0.01 * step\n\n    def update_velocity(self, pbest, pop, velocity, gbest, w, c1, c2):\n        for i in range(self.npop):\n            velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i]) + self.levy_scale * self.levy_flight(self.dim)\n            velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n        return velocity", "name": "Enhanced_DE_PSO_Optimizer", "description": "Enhances exploration by adding Levy flights to the velocity update, improving the algorithm's ability to escape local optima.", "configspace": "", "generation": 31, "fitness": 0.21651938992378972, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.4761725772796388, 0.49330598676782855, 0.610710160337876, 0.5168857467674808, 0.5750125882924857, 0.5008599641883471, 0.47618386951607783, 0.5691037369244569, 0.5964061237674252, 0.16076741515430804, 0.026255501350947674, 9.999999999998899e-05, 9.999999999998899e-05, 0.03561951389306284, 9.999999999998899e-05, 0.026444373545261413, 0.08227280777869816, 9.999999999998899e-05, 0.08250793964226655, 0.11890230810445013, 0.09465415183275894, 0.0820471974823962, 0.06545350535422678, 0.11783802513898323, 0.08263852515260228, 0.0899688632404011, 0.07883818268876297, 0.09573391089739003, 0.0716790274466006, 0.06217335054691975, 0.08106453432528649, 0.03405814242678573, 0.06370459488399915, 0.09511298118987654, 0.07284639412120142, 0.06997418391131782, 0.9277904489742702, 0.8596079408959093, 0.9487649774264948, 0.7709139906720786, 0.8614589200111302, 0.8885752425742293, 0.9309302978472149, 0.8452950090104351, 0.9081941553616775, 0.18193593379211292, 0.23812749398703725, 0.143771463902299, 0.18116478818124926, 0.16303282971986832, 0.23953024044460025, 0.2633778751693441, 0.2884270825737255, 0.2198554849773976, 0.2339531747279009, 0.1689014272802849, 0.2847473071714156, 0.3394520799851538, 0.6923132118343542, 0.33510136929556644, 0.26777608548060594, 0.2128541928066312, 0.6620522622148248, 0.16734788046587223, 0.1313786530883947, 0.13110671729176715, 0.16071144548465932, 0.1637914936863255, 0.10603298424515162, 0.16044336155318983, 0.13441006726938598, 0.13532990190252003, 0.15181409640059684, 0.16593387474436783, 0.3351156966606069, 0.19807931426602543, 0.11540818509420736, 0.10132011164360444, 0.17846718521061122, 0.11617854865019239, 0.11476412578104267, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792818339823218, 0.04730580089897907, 9.999999999998899e-05, 0.01580448275252022, 0.0028927217460826826, 0.07704660847810696, 0.08078147852994466, 0.16309730398268818, 0.056153075859784796, 0.10680447128570125, 0.10407319773026624, 0.029389216031968646, 0.035418202719721514, 0.2541524038609839, 0.11180667078228834, 0.1001025584348294, 0.03858303660323237, 0.04908420294595439, 0.036672599551710094, 0.038252368481453414, 0.089038107985968, 0.0488504852012831, 0.11179618103364375, 0.037694299623098226, 0.08687889611486821, 0.08580432995244391, 0.14844211362506698, 0.06333651445912769, 0.1399437233125378, 0.13762668354051444, 0.11311554317407302, 0.07751799768262135, 0.09285214895462635, 0.17752535622444887, 0.27621460260276676, 0.39695328211492653, 0.4185100962661914, 0.37940658828693996, 0.43029014764367735, 0.3549454188244492, 0.3683897839823729, 0.3963402472930816, 0.4620025931863301, 0.1360523321096212, 0.10469338287742846, 0.115324135145635, 0.10995250020019032, 0.1507418587608712, 0.09035302940867462, 0.05950665372693387, 0.1296645248350614, 0.1143448498987727, 0.17539649587698225, 0.12946966453037134, 0.16091880942926395, 0.1754719657644862, 0.19942842710884467, 0.1422775851286322, 0.15104441318401896, 0.13053308063815916, 0.22301801053388426, 0.2332375926828414, 0.24118952022830598, 0.26266867095591173, 0.25720480290443715, 0.29861275643440455, 0.24610490870326895, 0.2423150874061044, 0.2997859018577026, 0.19621106887851958, 0.1924928610026444, 0.17463927508815136, 0.21234627231871817, 0.1830836170479302, 0.192646820717977, 0.2799979936164897, 0.21436764181000356, 0.20707842825529288, 0.18812152731914134, 0.18930147222558313, 0.18287126993837433, 0.1772285299455172, 0.1870966245606125, 0.17100229440844028, 0.16999476027415017, 0.17744395560067028, 0.17180889425103962, 0.1757752019039457, 0.18471115815682837, 0.18695775112980206, 0.18405784380645562, 0.17877215768830412, 0.1665769552670897, 0.17228023163242978, 0.18327595226269233, 0.17896552770976837, 0.18701345566047456, 0.1285177260352831, 0.16832778629877554, 0.14813345072892747, 0.7397991180632475, 0.1944102121993715, 0.7047284587760303, 0.11897868918084564, 0.17255654399096676, 0.27773944213096247, 0.6811390877462962, 0.15311285613353542, 0.4055657955888512, 0.20045987219493466, 0.16097798173458144, 0.19942278554901294, 0.6811939856607508, 0.15341995052266522, 0.6051313634173514, 0.16384223483238058, 0.1945206481639037, 0.17544932352215004, 0.17353736915862827, 0.18831581399752262, 0.15491283783377807, 0.17501434711224828, 0.17237399442218926, 0.18426011069596082, 0.08240109546941987, 0.09575524134604152, 0.06482000561156642, 0.07622615094206175, 0.08016761566222008, 0.07495351616050161, 0.08097947886824097, 0.07754460637927807, 0.06245573515019165]}, "mutation_prompt": null}
{"id": "8e27515e-efa5-44ff-b975-6b9c2b6ad029", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99, alpha=0.2, beta=0.2):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n            self.F += self.alpha * np.random.randn()\n            self.CR += self.beta * np.random.randn()\n            self.w += self.alpha * np.random.randn()\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer", "description": "Enhancing the exploration and exploitation balance by introducing a novel adaptive mechanism for parameter control during optimization.", "configspace": "", "generation": 32, "fitness": 0.1537105072048748, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.3198876392383434, 0.39222713027557865, 0.2358901044319588, 0.39906024327997414, 0.36356385503054867, 0.21509407021696847, 0.45488474887948205, 0.4032037190674933, 0.21346376272630074, 9.999999999998899e-05, 0.038966498960309015, 9.999999999998899e-05, 9.999999999998899e-05, 0.017613021457786426, 9.999999999998899e-05, 9.999999999998899e-05, 0.012312563866836546, 9.999999999998899e-05, 0.07194153917330293, 0.07276068728892804, 0.05240385474077469, 0.08990430153793383, 0.07850505181114331, 0.05841892529437742, 0.06054457094550347, 0.09421874168484556, 0.07369569146044563, 0.04828177847464865, 0.07151834404453239, 0.034180071932504275, 0.08517094313869333, 0.05464886246506029, 0.04618556605208102, 0.07717658448290221, 0.05568989898508914, 0.03797521103998247, 0.25870164806272555, 0.9296475308874786, 0.9545891819070652, 0.1039041184822368, 0.9271717013329905, 0.9433323238012409, 0.1979951585392269, 0.8853662548154666, 0.9437311990128004, 0.18919377115123992, 0.17687907943048853, 0.08624000041636315, 0.1413743207842013, 0.2051374613646414, 0.0994747279973841, 0.10743218895536377, 0.18659588071452382, 0.08204434710708863, 0.17348948104467599, 0.15532461657526142, 0.13545663873179714, 0.2292147894193729, 0.2409502300401274, 0.1591886167374329, 0.13705337974319975, 0.260761772831431, 0.18556002657025572, 0.07187512690992248, 0.131170992412733, 0.00263874683591514, 0.12158128907200572, 0.1460987337267614, 0.009011145159766198, 0.09730330494403039, 0.11578371557605693, 0.06389175492317556, 0.14453691501696453, 0.11556528436621649, 0.03347261907302923, 0.07209950086211081, 0.11509571662346385, 9.999999999998899e-05, 0.25573017047840463, 0.13368432980171396, 0.037008988513923424, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10222309399332297, 0.00827086019764589, 9.999999999998899e-05, 0.03474414139908799, 0.01352973128356294, 9.999999999998899e-05, 0.14804099538254212, 0.047558800921932765, 0.04597983094330793, 0.08643829750300358, 0.08890952878872815, 0.01289386000339654, 0.15345181026729038, 0.052071473036568894, 0.021657393121763402, 9.999999999998899e-05, 0.009276870161881612, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008739099400916217, 9.999999999998899e-05, 0.018419135700283418, 9.999999999998899e-05, 9.999999999998899e-05, 0.041469838310806306, 0.04748732734021688, 0.03524077194074815, 9.999999999998899e-05, 0.06854535166991282, 0.0056272954164187095, 0.11484470853493334, 0.050032782420846744, 9.999999999998899e-05, 0.231274963300919, 0.335336195184052, 0.2432217095273047, 0.35462795641986455, 0.3113516744625028, 0.2366268635219132, 0.4043066164527582, 0.27269619110990984, 0.2377785392716255, 0.08128649288717427, 0.06120940577834155, 0.03571477475393203, 0.1157241844834318, 0.06537069177898758, 0.09060163656951503, 0.0765861075472627, 0.05876515704615182, 0.04739490104179289, 0.146771943665841, 0.15317758325980935, 0.11287940297062415, 0.242848684146876, 0.18635570041066163, 0.10886717393277145, 0.1892502492220638, 0.1128860382412129, 0.11595943682818999, 0.1921973167635005, 0.24451132021651734, 0.18885221377527228, 0.2751399201073823, 0.20747986409394348, 0.1911013409004304, 0.19625244449322865, 0.2514690498634583, 0.1856646445445902, 0.1419103615141023, 0.17354014411356167, 0.10396085265286015, 0.1874767331126338, 0.17802909329700956, 0.11713721224098028, 0.19571357896100128, 0.21488292542497933, 0.14127242118541838, 0.1759951584624161, 0.17412739792824028, 0.18499777278870633, 0.1941032414423005, 0.17265940369633304, 0.18924790239744682, 0.23856936878648138, 0.1761724065742154, 0.19255390303269404, 0.15887887564712677, 0.1587442728438656, 0.15414633130502675, 0.17392159219719106, 0.19046640233619705, 0.1609160779902553, 0.1775849690260225, 0.17985482156231958, 0.1418262371632174, 0.11779580927024658, 0.16775590906945692, 0.14475370162309886, 0.17276724142812838, 0.1883216175340976, 0.12483588577603533, 0.112816103536306, 0.16545052432400187, 0.1523393282147898, 0.5350001331142367, 0.1479970175610431, 0.26749813445478143, 0.13221347723625332, 0.1615690821597212, 0.15637329896970154, 0.4389211465022843, 0.15234648418539076, 0.19732752360120864, 0.16792762688578733, 0.17723184279166648, 0.17473301822303167, 0.1822815454086617, 0.1626588253342004, 0.1555765441484135, 0.1727587625667073, 0.17378930215666055, 0.17666409644442194, 0.09939833436342471, 0.07373338577209088, 0.051497546585867915, 0.09428092093985474, 0.0796846403911291, 0.050353322870420714, 0.1314133932415369, 0.07029672177295321, 0.05954489052403644]}, "mutation_prompt": null}
{"id": "f179f644-3a71-4b70-a8f4-e1836a64c539", "solution": "import numpy as np\n\nclass Improved_Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2**((beta - 1) / 2)))**(1 / beta)\n            u = np.random.normal(0, sigma, size=dim)\n            v = np.random.normal(0, 1, size=dim)\n            step = u / np.abs(v)**(1 / beta)\n            return step\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                levy_step = levy_flight(self.dim)\n                mutant = np.clip(a + F * levy_step * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Improved_Dynamic_DE_PSO_Optimizer", "description": "Improving Dynamic_DE_PSO_Optimizer by introducing a novel adaptive mutation strategy based on Levy flights for enhanced exploration in the search space.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gamma' is not defined\").", "error": "NameError(\"name 'gamma' is not defined\")", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {}, "mutation_prompt": null}
{"id": "6f549a9f-dd2b-4ffe-99f8-9f7932322ece", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improved DE_PSO_Optimizer by incorporating a dynamic adaptation of DE and PSO parameters during optimization to enhance exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.4761725772796388, 0.49330598676782855, 0.610710160337876, 0.5168857467674808, 0.5750125882924857, 0.5008599641883471, 0.47618386951607783, 0.5691037369244569, 0.5964061237674252, 0.16076741515430804, 0.026255501350947674, 9.999999999998899e-05, 9.999999999998899e-05, 0.03561951389306284, 9.999999999998899e-05, 0.026444373545261413, 0.08227280777869816, 9.999999999998899e-05, 0.08250793964226655, 0.11890230810445013, 0.09465415183275894, 0.0820471974823962, 0.06545350535422678, 0.11783802513898323, 0.08263852515260228, 0.0899688632404011, 0.07883818268876297, 0.09573391089739003, 0.0716790274466006, 0.06217335054691975, 0.08106453432528649, 0.03405814242678573, 0.06370459488399915, 0.09511298118987654, 0.07284639412120142, 0.06997418391131782, 0.9277904489742702, 0.8596079408959093, 0.9487649774264948, 0.7709139906720786, 0.8614589200111302, 0.8885752425742293, 0.9309302978472149, 0.8452950090104351, 0.9081941553616775, 0.18193593379211292, 0.23812749398703725, 0.143771463902299, 0.18116478818124926, 0.16303282971986832, 0.23953024044460025, 0.2633778751693441, 0.2884270825737255, 0.2198554849773976, 0.2339531747279009, 0.1689014272802849, 0.2847473071714156, 0.3394520799851538, 0.6923132118343542, 0.33510136929556644, 0.26777608548060594, 0.2128541928066312, 0.6620522622148248, 0.16734788046587223, 0.1313786530883947, 0.13110671729176715, 0.16071144548465932, 0.1637914936863255, 0.10603298424515162, 0.16044336155318983, 0.13441006726938598, 0.13532990190252003, 0.15181409640059684, 0.16593387474436783, 0.3351156966606069, 0.19807931426602543, 0.11540818509420736, 0.10132011164360444, 0.17846718521061122, 0.11617854865019239, 0.11476412578104267, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792818339823218, 0.04730580089897907, 9.999999999998899e-05, 0.01580448275252022, 0.0028927217460826826, 0.07704660847810696, 0.08078147852994466, 0.16309730398268818, 0.056153075859784796, 0.10680447128570125, 0.10407319773026624, 0.029389216031968646, 0.035418202719721514, 0.2541524038609839, 0.11180667078228834, 0.1001025584348294, 0.03858303660323237, 0.04908420294595439, 0.036672599551710094, 0.038252368481453414, 0.089038107985968, 0.0488504852012831, 0.11179618103364375, 0.037694299623098226, 0.08687889611486821, 0.08580432995244391, 0.14844211362506698, 0.06333651445912769, 0.1399437233125378, 0.13762668354051444, 0.11311554317407302, 0.07751799768262135, 0.09285214895462635, 0.17752535622444887, 0.27621460260276676, 0.39695328211492653, 0.4185100962661914, 0.37940658828693996, 0.43029014764367735, 0.3549454188244492, 0.3683897839823729, 0.3963402472930816, 0.4620025931863301, 0.1360523321096212, 0.10469338287742846, 0.115324135145635, 0.10995250020019032, 0.1507418587608712, 0.09035302940867462, 0.05950665372693387, 0.1296645248350614, 0.1143448498987727, 0.17539649587698225, 0.12946966453037134, 0.16091880942926395, 0.1754719657644862, 0.19942842710884467, 0.1422775851286322, 0.15104441318401896, 0.13053308063815916, 0.22301801053388426, 0.2332375926828414, 0.24118952022830598, 0.26266867095591173, 0.25720480290443715, 0.29861275643440455, 0.24610490870326895, 0.2423150874061044, 0.2997859018577026, 0.19621106887851958, 0.1924928610026444, 0.17463927508815136, 0.21234627231871817, 0.1830836170479302, 0.192646820717977, 0.2799979936164897, 0.21436764181000356, 0.20707842825529288, 0.18812152731914134, 0.18930147222558313, 0.18287126993837433, 0.1772285299455172, 0.1870966245606125, 0.17100229440844028, 0.16999476027415017, 0.17744395560067028, 0.17180889425103962, 0.1757752019039457, 0.18471115815682837, 0.18695775112980206, 0.18405784380645562, 0.17877215768830412, 0.1665769552670897, 0.17228023163242978, 0.18327595226269233, 0.17896552770976837, 0.18701345566047456, 0.1285177260352831, 0.16832778629877554, 0.14813345072892747, 0.7397991180632475, 0.1944102121993715, 0.7047284587760303, 0.11897868918084564, 0.17255654399096676, 0.27773944213096247, 0.6811390877462962, 0.15311285613353542, 0.4055657955888512, 0.20045987219493466, 0.16097798173458144, 0.19942278554901294, 0.6811939856607508, 0.15341995052266522, 0.6051313634173514, 0.16384223483238058, 0.1945206481639037, 0.17544932352215004, 0.17353736915862827, 0.18831581399752262, 0.15491283783377807, 0.17501434711224828, 0.17237399442218926, 0.18426011069596082, 0.08240109546941987, 0.09575524134604152, 0.06482000561156642, 0.07622615094206175, 0.08016761566222008, 0.07495351616050161, 0.08097947886824097, 0.07754460637927807, 0.06245573515019165]}, "mutation_prompt": null}
{"id": "5b7409f4-1d75-4cb2-85a8-5b80f47dd55f", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improved DE_PSO_Optimizer by incorporating a dynamic adaptation of DE and PSO parameters during optimization to enhance exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.4761725772796388, 0.49330598676782855, 0.610710160337876, 0.5168857467674808, 0.5750125882924857, 0.5008599641883471, 0.47618386951607783, 0.5691037369244569, 0.5964061237674252, 0.16076741515430804, 0.026255501350947674, 9.999999999998899e-05, 9.999999999998899e-05, 0.03561951389306284, 9.999999999998899e-05, 0.026444373545261413, 0.08227280777869816, 9.999999999998899e-05, 0.08250793964226655, 0.11890230810445013, 0.09465415183275894, 0.0820471974823962, 0.06545350535422678, 0.11783802513898323, 0.08263852515260228, 0.0899688632404011, 0.07883818268876297, 0.09573391089739003, 0.0716790274466006, 0.06217335054691975, 0.08106453432528649, 0.03405814242678573, 0.06370459488399915, 0.09511298118987654, 0.07284639412120142, 0.06997418391131782, 0.9277904489742702, 0.8596079408959093, 0.9487649774264948, 0.7709139906720786, 0.8614589200111302, 0.8885752425742293, 0.9309302978472149, 0.8452950090104351, 0.9081941553616775, 0.18193593379211292, 0.23812749398703725, 0.143771463902299, 0.18116478818124926, 0.16303282971986832, 0.23953024044460025, 0.2633778751693441, 0.2884270825737255, 0.2198554849773976, 0.2339531747279009, 0.1689014272802849, 0.2847473071714156, 0.3394520799851538, 0.6923132118343542, 0.33510136929556644, 0.26777608548060594, 0.2128541928066312, 0.6620522622148248, 0.16734788046587223, 0.1313786530883947, 0.13110671729176715, 0.16071144548465932, 0.1637914936863255, 0.10603298424515162, 0.16044336155318983, 0.13441006726938598, 0.13532990190252003, 0.15181409640059684, 0.16593387474436783, 0.3351156966606069, 0.19807931426602543, 0.11540818509420736, 0.10132011164360444, 0.17846718521061122, 0.11617854865019239, 0.11476412578104267, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792818339823218, 0.04730580089897907, 9.999999999998899e-05, 0.01580448275252022, 0.0028927217460826826, 0.07704660847810696, 0.08078147852994466, 0.16309730398268818, 0.056153075859784796, 0.10680447128570125, 0.10407319773026624, 0.029389216031968646, 0.035418202719721514, 0.2541524038609839, 0.11180667078228834, 0.1001025584348294, 0.03858303660323237, 0.04908420294595439, 0.036672599551710094, 0.038252368481453414, 0.089038107985968, 0.0488504852012831, 0.11179618103364375, 0.037694299623098226, 0.08687889611486821, 0.08580432995244391, 0.14844211362506698, 0.06333651445912769, 0.1399437233125378, 0.13762668354051444, 0.11311554317407302, 0.07751799768262135, 0.09285214895462635, 0.17752535622444887, 0.27621460260276676, 0.39695328211492653, 0.4185100962661914, 0.37940658828693996, 0.43029014764367735, 0.3549454188244492, 0.3683897839823729, 0.3963402472930816, 0.4620025931863301, 0.1360523321096212, 0.10469338287742846, 0.115324135145635, 0.10995250020019032, 0.1507418587608712, 0.09035302940867462, 0.05950665372693387, 0.1296645248350614, 0.1143448498987727, 0.17539649587698225, 0.12946966453037134, 0.16091880942926395, 0.1754719657644862, 0.19942842710884467, 0.1422775851286322, 0.15104441318401896, 0.13053308063815916, 0.22301801053388426, 0.2332375926828414, 0.24118952022830598, 0.26266867095591173, 0.25720480290443715, 0.29861275643440455, 0.24610490870326895, 0.2423150874061044, 0.2997859018577026, 0.19621106887851958, 0.1924928610026444, 0.17463927508815136, 0.21234627231871817, 0.1830836170479302, 0.192646820717977, 0.2799979936164897, 0.21436764181000356, 0.20707842825529288, 0.18812152731914134, 0.18930147222558313, 0.18287126993837433, 0.1772285299455172, 0.1870966245606125, 0.17100229440844028, 0.16999476027415017, 0.17744395560067028, 0.17180889425103962, 0.1757752019039457, 0.18471115815682837, 0.18695775112980206, 0.18405784380645562, 0.17877215768830412, 0.1665769552670897, 0.17228023163242978, 0.18327595226269233, 0.17896552770976837, 0.18701345566047456, 0.1285177260352831, 0.16832778629877554, 0.14813345072892747, 0.7397991180632475, 0.1944102121993715, 0.7047284587760303, 0.11897868918084564, 0.17255654399096676, 0.27773944213096247, 0.6811390877462962, 0.15311285613353542, 0.4055657955888512, 0.20045987219493466, 0.16097798173458144, 0.19942278554901294, 0.6811939856607508, 0.15341995052266522, 0.6051313634173514, 0.16384223483238058, 0.1945206481639037, 0.17544932352215004, 0.17353736915862827, 0.18831581399752262, 0.15491283783377807, 0.17501434711224828, 0.17237399442218926, 0.18426011069596082, 0.08240109546941987, 0.09575524134604152, 0.06482000561156642, 0.07622615094206175, 0.08016761566222008, 0.07495351616050161, 0.08097947886824097, 0.07754460637927807, 0.06245573515019165]}, "mutation_prompt": null}
{"id": "f1234aaa-2427-4678-9404-74eea09723cd", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improved DE_PSO_Optimizer by incorporating a dynamic adaptation of DE and PSO parameters during optimization to enhance exploration and exploitation.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.4761725772796388, 0.49330598676782855, 0.610710160337876, 0.5168857467674808, 0.5750125882924857, 0.5008599641883471, 0.47618386951607783, 0.5691037369244569, 0.5964061237674252, 0.16076741515430804, 0.026255501350947674, 9.999999999998899e-05, 9.999999999998899e-05, 0.03561951389306284, 9.999999999998899e-05, 0.026444373545261413, 0.08227280777869816, 9.999999999998899e-05, 0.08250793964226655, 0.11890230810445013, 0.09465415183275894, 0.0820471974823962, 0.06545350535422678, 0.11783802513898323, 0.08263852515260228, 0.0899688632404011, 0.07883818268876297, 0.09573391089739003, 0.0716790274466006, 0.06217335054691975, 0.08106453432528649, 0.03405814242678573, 0.06370459488399915, 0.09511298118987654, 0.07284639412120142, 0.06997418391131782, 0.9277904489742702, 0.8596079408959093, 0.9487649774264948, 0.7709139906720786, 0.8614589200111302, 0.8885752425742293, 0.9309302978472149, 0.8452950090104351, 0.9081941553616775, 0.18193593379211292, 0.23812749398703725, 0.143771463902299, 0.18116478818124926, 0.16303282971986832, 0.23953024044460025, 0.2633778751693441, 0.2884270825737255, 0.2198554849773976, 0.2339531747279009, 0.1689014272802849, 0.2847473071714156, 0.3394520799851538, 0.6923132118343542, 0.33510136929556644, 0.26777608548060594, 0.2128541928066312, 0.6620522622148248, 0.16734788046587223, 0.1313786530883947, 0.13110671729176715, 0.16071144548465932, 0.1637914936863255, 0.10603298424515162, 0.16044336155318983, 0.13441006726938598, 0.13532990190252003, 0.15181409640059684, 0.16593387474436783, 0.3351156966606069, 0.19807931426602543, 0.11540818509420736, 0.10132011164360444, 0.17846718521061122, 0.11617854865019239, 0.11476412578104267, 9.999999999998899e-05, 9.999999999998899e-05, 0.0792818339823218, 0.04730580089897907, 9.999999999998899e-05, 0.01580448275252022, 0.0028927217460826826, 0.07704660847810696, 0.08078147852994466, 0.16309730398268818, 0.056153075859784796, 0.10680447128570125, 0.10407319773026624, 0.029389216031968646, 0.035418202719721514, 0.2541524038609839, 0.11180667078228834, 0.1001025584348294, 0.03858303660323237, 0.04908420294595439, 0.036672599551710094, 0.038252368481453414, 0.089038107985968, 0.0488504852012831, 0.11179618103364375, 0.037694299623098226, 0.08687889611486821, 0.08580432995244391, 0.14844211362506698, 0.06333651445912769, 0.1399437233125378, 0.13762668354051444, 0.11311554317407302, 0.07751799768262135, 0.09285214895462635, 0.17752535622444887, 0.27621460260276676, 0.39695328211492653, 0.4185100962661914, 0.37940658828693996, 0.43029014764367735, 0.3549454188244492, 0.3683897839823729, 0.3963402472930816, 0.4620025931863301, 0.1360523321096212, 0.10469338287742846, 0.115324135145635, 0.10995250020019032, 0.1507418587608712, 0.09035302940867462, 0.05950665372693387, 0.1296645248350614, 0.1143448498987727, 0.17539649587698225, 0.12946966453037134, 0.16091880942926395, 0.1754719657644862, 0.19942842710884467, 0.1422775851286322, 0.15104441318401896, 0.13053308063815916, 0.22301801053388426, 0.2332375926828414, 0.24118952022830598, 0.26266867095591173, 0.25720480290443715, 0.29861275643440455, 0.24610490870326895, 0.2423150874061044, 0.2997859018577026, 0.19621106887851958, 0.1924928610026444, 0.17463927508815136, 0.21234627231871817, 0.1830836170479302, 0.192646820717977, 0.2799979936164897, 0.21436764181000356, 0.20707842825529288, 0.18812152731914134, 0.18930147222558313, 0.18287126993837433, 0.1772285299455172, 0.1870966245606125, 0.17100229440844028, 0.16999476027415017, 0.17744395560067028, 0.17180889425103962, 0.1757752019039457, 0.18471115815682837, 0.18695775112980206, 0.18405784380645562, 0.17877215768830412, 0.1665769552670897, 0.17228023163242978, 0.18327595226269233, 0.17896552770976837, 0.18701345566047456, 0.1285177260352831, 0.16832778629877554, 0.14813345072892747, 0.7397991180632475, 0.1944102121993715, 0.7047284587760303, 0.11897868918084564, 0.17255654399096676, 0.27773944213096247, 0.6811390877462962, 0.15311285613353542, 0.4055657955888512, 0.20045987219493466, 0.16097798173458144, 0.19942278554901294, 0.6811939856607508, 0.15341995052266522, 0.6051313634173514, 0.16384223483238058, 0.1945206481639037, 0.17544932352215004, 0.17353736915862827, 0.18831581399752262, 0.15491283783377807, 0.17501434711224828, 0.17237399442218926, 0.18426011069596082, 0.08240109546941987, 0.09575524134604152, 0.06482000561156642, 0.07622615094206175, 0.08016761566222008, 0.07495351616050161, 0.08097947886824097, 0.07754460637927807, 0.06245573515019165]}, "mutation_prompt": null}
{"id": "83724b54-c07c-4cbf-8cc9-668da52a7495", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n                # Local Search\n                candidate = mutant + np.random.uniform(-0.1, 0.1, size=self.dim)\n                if func(candidate) < func(mutant):\n                    pop[i] = candidate\n                    pbest[i] = candidate\n                    gbest = candidate\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer", "description": "Introduce a local search step after mutation to improve exploitation of promising regions in the search space.", "configspace": "", "generation": 37, "fitness": 0.08796792786171631, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.11.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.163729362039728, 0.1345990608335622, 0.18357684205784797, 0.11848878529474294, 0.1739728243287565, 0.22667987037242898, 0.14245721765998043, 0.12115483106238134, 0.09791626084270955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043889731818896105, 0.04149958526019981, 0.03452934867428337, 0.03312043743835169, 0.05967154915950268, 0.05612594284471217, 0.04140367574428949, 0.0694808557693195, 0.016746786969738747, 0.004790243510703451, 0.004838452416550121, 0.0018340124691711424, 0.03512394604539737, 0.001085925711583724, 0.015021379385673939, 0.003577143634152846, 0.04179127985999476, 0.033866650718591185, 0.739740544608581, 0.16012466548099802, 0.06801838457716547, 0.12014848352975693, 0.8850723821828187, 0.7314873519972639, 0.2255066009168154, 0.10529103615894186, 0.07715939974019381, 9.999999999998899e-05, 0.08332884603064716, 0.022779112991226036, 0.033470862340694074, 0.018242967253492837, 9.999999999998899e-05, 0.014677022052117739, 0.07468762866585532, 9.999999999998899e-05, 0.16104539075563684, 0.15715805442102615, 0.119238425608032, 0.18092011852062007, 0.1494769118931717, 0.19456205716538555, 0.09958160867939236, 0.16133502801847477, 0.1600784099193081, 9.999999999998899e-05, 0.022670201257761757, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03815479344089201, 9.999999999998899e-05, 0.07053160631217892, 0.05113904591951979, 9.999999999998899e-05, 0.0006139863272848212, 9.999999999998899e-05, 0.07693726208122276, 0.005624017940172421, 9.999999999998899e-05, 0.04866873161681573, 0.0194638007601039, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029098473607248376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006103478738570534, 9.999999999998899e-05, 0.011734209370757753, 0.00612676145289881, 0.021459221196285183, 0.04554759852155188, 0.017004479051702548, 0.019048830699018304, 0.06463225467660083, 0.005982443212072419, 0.041917210192970344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011525140718326998, 0.0017871346806421773, 9.999999999998899e-05, 9.999999999998899e-05, 0.018323519522694398, 0.0005521483455178666, 9.999999999998899e-05, 9.999999999998899e-05, 0.00020746829591933302, 9.999999999998899e-05, 0.0013515638451641054, 0.0012978014364831703, 0.22992647097349805, 0.17787092529870263, 0.21035406726891848, 0.27529637720864164, 0.1439287816303949, 0.20270114984364318, 0.2013980027548209, 0.20509608665125267, 0.1613216604588823, 0.0344244268595818, 0.05184286764716939, 0.04339718337220566, 0.029155785435747594, 0.016230465691885576, 0.019679926063273734, 0.028366464747171305, 0.04003978296146471, 0.04338980032447326, 0.1103698020804249, 0.20368586489058504, 0.11924941363869768, 0.0999296614851406, 0.11903165354902956, 0.13681463905201108, 0.11471237543309876, 0.09232442282948328, 0.09823202080316873, 0.15021858892459838, 0.14161582624852165, 0.14352810184653642, 0.13800672315110074, 0.143373137864106, 0.17329131808542464, 0.13497088957271808, 0.2224430906562529, 0.1633153722577907, 0.07514822018979794, 0.10057432542204847, 0.05878621448287158, 0.07204596477425818, 0.1034670482528125, 0.0947780219234059, 0.0837317855149382, 0.1153559435666297, 0.08562072185800351, 0.18248706409907, 0.1695907357602655, 0.19837344895346687, 0.1553939193729813, 0.15347687857878156, 0.16343865601978325, 0.13188620629655745, 0.16693461265056264, 0.12619759825849086, 0.1274679351873259, 0.05709392163939064, 0.15154229242386086, 0.02760110467773158, 0.13630329756994797, 0.03128410989184449, 0.13264865668131787, 0.15414731587772112, 0.13747749545629395, 0.0954394555648378, 0.12278735275736541, 0.10562530319203378, 0.16702490508739143, 0.14369734476048557, 0.09783820286285716, 0.11121372173409383, 0.10501113929077033, 0.12035303515815154, 0.11040265245322212, 0.11036477947379952, 0.06482451525699418, 0.0772094995958994, 0.09280658047220092, 0.09084345139217187, 0.10065174407788724, 0.06222153732652713, 0.10881627368238822, 0.1771126685145189, 0.16478039220012686, 0.18251413775787573, 0.18004704419899098, 0.17556196453754802, 0.17330415060081195, 0.18096677702611108, 0.16818726435764553, 0.1718001111280142, 0.036906300992715524, 0.053356902523772454, 0.0651923301440469, 0.05582436843989924, 0.05414705071366266, 0.03207670334453139, 0.04438254631596861, 0.040083422302855776, 0.06529681816544197]}, "mutation_prompt": null}
{"id": "320cb57d-2c12-4ccd-adb1-bd0262b31b98", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n\n            # Adaptive selection of mutation and crossover rates\n            self.F = max(0.4, self.F * np.random.normal(1, 0.1))\n            self.CR = max(0.1, min(0.95, self.CR * np.random.normal(1, 0.1)))\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer", "description": "Enhancing diversity through adaptive selection of mutation and crossover rates while maintaining individual memory and global best solution updates.", "configspace": "", "generation": 38, "fitness": 0.21559988200443647, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.6489008738820227, 0.6098805261794957, 0.6134658422121821, 0.6067799215217984, 0.5890222920185159, 0.6333176047621136, 0.6417833849792627, 0.39230478190868523, 0.552089538253454, 0.13160184398780606, 0.03858105409866652, 0.025663953267201056, 0.03827864586215324, 0.036908125791359825, 9.999999999998899e-05, 9.999999999998899e-05, 0.03166153507734215, 0.040301013436822575, 0.07499397037736366, 0.0967413024941729, 0.08041654270093768, 0.09731721653397885, 0.10239848277673846, 0.07621820152655545, 0.09185086355042271, 0.09635373604213293, 0.08073939772792715, 0.06889060526970481, 0.09118010367647145, 0.07983703992292901, 0.0913031402892941, 0.06517949927908429, 0.06547319874392543, 0.06971819523136147, 0.056544828842144845, 0.07825573605720715, 0.9121480688256004, 0.9494835763504124, 0.9221653877390394, 0.895223245673215, 0.8349098290040453, 0.889901499359748, 0.90958953843381, 0.7564689080958932, 0.9493104858562993, 0.2499564841938532, 0.2750873849986445, 0.19714696325242964, 0.21484315011027189, 0.284526161389151, 0.2193572129367911, 0.2788993877742646, 0.18857299765387192, 0.22473792234758672, 0.2167769952215045, 0.22138718948250102, 0.20692658360927985, 0.2615395451253919, 0.1854152857862602, 0.18063758117226714, 0.3179736972780094, 0.16581151193344978, 0.14264144103857979, 0.13256958837430521, 0.130499191663497, 0.1368241249150458, 0.11474843008046942, 0.10216650389002968, 0.1242412733441064, 0.18780624553205694, 0.15696677882903898, 0.11121207501904173, 0.15474886836337687, 0.12170922292694764, 0.10591692362625693, 0.12173523146573206, 0.11973691862712799, 0.12335008160107752, 0.1413868120617532, 0.1265170669247172, 0.12288712225744491, 0.09139516847576745, 0.024557699279680878, 9.999999999998899e-05, 0.13360486332355048, 0.07018635377092619, 0.023649678552651654, 0.06812699537170663, 0.00083041129710959, 0.058404224593353704, 0.1745411552449454, 0.08161810102556499, 0.2614238848745922, 0.11965071970643149, 0.05936942195829542, 0.08655154883371974, 0.2992335518711601, 0.10678823864123055, 0.1479743741156424, 0.02941490070036723, 0.045844441401548974, 0.07544279804194465, 0.014729729975178407, 0.06780893038301206, 0.07292862412494505, 0.05886703431727469, 0.042038771984717505, 0.12530863700491934, 0.02622041456334867, 0.13536497951201176, 0.09429035329011426, 0.004966782037028494, 0.10043925472962201, 0.18887043428029449, 0.10543601525031632, 0.1393282401864233, 0.10082452987950075, 0.4806107967204837, 0.4746387169067492, 0.4527613677942989, 0.41003300373311646, 0.42065794852212746, 0.35193307481586344, 0.40117449513296954, 0.3817797340280795, 0.4524414442674123, 0.08042957717530719, 0.09765078937718896, 0.12004566889608137, 0.11918865256610645, 0.09397595363915845, 0.09379346010641243, 0.10542333522465652, 0.07607601132205344, 0.07867630716889129, 0.19227208203807944, 0.1343783050230617, 0.14340764270117867, 0.14632305841151794, 0.19804137621876838, 0.16049870331912874, 0.1499321394019455, 0.24205672328727745, 0.14909241159859754, 0.23289493459995858, 0.22411203355980192, 0.271013137597646, 0.2917268340125798, 0.2991117991645852, 0.29493206526164206, 0.2433290806137448, 0.30478220242704235, 0.22590315186926802, 0.22682531045537258, 0.22019459613141845, 0.20726263880245688, 0.2773512324660269, 0.16182094810619674, 0.2457620030777945, 0.19629486489404346, 0.25031235976618293, 0.22199531252615612, 0.19267389891101339, 0.14829285769377853, 0.17438429376055686, 0.1960571652723343, 0.17330461830473054, 0.17331998299653006, 0.21349755851061536, 0.1925961543777288, 0.19534385795353593, 0.17655471060759265, 0.17187687922888073, 0.17172649590164835, 0.18616522631844512, 0.1625037041774665, 0.16503008504645678, 0.17447283100993716, 0.18278134579294358, 0.17536627290906304, 0.7006791801044958, 0.17144163887059116, 0.14912807634071323, 0.19046850638040824, 0.19111002924750387, 0.17700976526373557, 0.1361993935128627, 0.3778895036142693, 0.6939912872368874, 0.7867498383324173, 0.3432162914274981, 0.35428483214613893, 0.10258362318888647, 0.1632768203086773, 0.19491766514644637, 0.6898133870302425, 0.10204392003801455, 0.29548229427237027, 0.16239241749359112, 0.17338828529848738, 0.1591782534056314, 0.16597768631610232, 0.16877246145986136, 0.18221053374554053, 0.1727194113849322, 0.16821513175435288, 0.19036660745268796, 0.07628427931546744, 0.08262103281698019, 0.07635368486404914, 0.06451161762275626, 0.07164024098374633, 0.07296829012665262, 0.07596738809743042, 0.06213194949650369, 0.07797921033532951]}, "mutation_prompt": null}
{"id": "8c3607ef-af3b-4b69-b930-5d73b337fc5d", "solution": "import numpy as np\n\nclass Improved_Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99, w_min=0.4, w_max=0.9, w_change=0.05):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = 1.0  # Fixed for adaptive weight update\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n        self.w_min = w_min\n        self.w_max = w_max\n        self.w_change = w_change\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        def adaptive_weight_update(iteration):\n            return self.w_min + (self.w_max - self.w_min) * np.exp(-self.w_change * iteration)\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for it in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w = adaptive_weight_update(it)\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Improved_Dynamic_DE_PSO_Optimizer", "description": "Improved Dynamic DE_PSO Optimizer by incorporating a novel adaptive inertia weight update strategy to balance exploration and exploitation.", "configspace": "", "generation": 39, "fitness": 0.20533627797545304, "feedback": "The algorithm Improved_Dynamic_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.34575011829578195, 0.4723896994516351, 0.5586088370762612, 0.5572910047062831, 0.5121991659306258, 0.5102176008407486, 0.5532167750580289, 0.5561322373736379, 0.40649121283436185, 9.999999999998899e-05, 0.023968507590410804, 0.0038546418264188143, 0.03002473325422239, 0.04205521582244276, 0.016922138765774197, 0.00199623713871222, 0.15597596424264792, 9.999999999998899e-05, 0.0785844361417799, 0.08690222265708747, 0.062237474425258954, 0.10699248917640203, 0.09006932555536873, 0.10616025529430628, 0.09452294552621843, 0.08666700164632601, 0.10709285329551532, 0.054987715309752105, 0.06736679853992666, 0.08058438505131038, 0.08180122036157444, 0.07368637758208729, 0.06279040796288027, 0.08556468734782374, 0.06718222167020227, 0.06376449383854288, 0.9259500287637469, 0.7624415687325123, 0.9585610621960856, 0.7716014688089173, 0.8910895888313123, 0.9155057925636887, 0.9450751429848653, 0.8948891404704211, 0.9329294909898028, 0.2241573699536148, 0.17450238339258883, 0.19910302774625666, 0.31856302532467584, 0.1986700460341123, 0.22771521962048658, 0.26182340764404555, 0.2391382048290468, 0.21733461004866295, 0.3204258019802113, 0.190886134474607, 0.6179982946961691, 0.31798986553098263, 0.24101052857675997, 0.2622609533285608, 0.13385819668600019, 0.32910722357030897, 0.3004796125025869, 0.13194375763674837, 0.18472967698035814, 0.1401959513379013, 0.11343237257169714, 0.1038713513061984, 0.12734222067194167, 0.14052050871821653, 0.10701581129013271, 0.14357284818797766, 0.1301081258204515, 0.14062156956831928, 0.09593093157375754, 0.12344608611958208, 0.11005853821207023, 0.11145662321711769, 0.32339149854866733, 0.10201660009981406, 0.12443690011655273, 0.024889276901848056, 9.999999999998899e-05, 0.03912147190314441, 0.03349314427297834, 0.051236701615079094, 9.999999999998899e-05, 0.00277995359871952, 9.999999999998899e-05, 0.0338398314959002, 0.14597302736268958, 0.03328649115664717, 0.11739732585073126, 0.06648617351820763, 0.0998235571832472, 0.045597295521422665, 0.16005718569887162, 0.07641019929006376, 0.09621239029458362, 0.01951208582061259, 0.01864712757677134, 0.04774059672014974, 0.043661914438230975, 0.05784240739708146, 0.034882450029699474, 0.052769704018073904, 0.03757400852160664, 0.09263754633802068, 0.06005316664039695, 0.12563122893761935, 0.09732429307607104, 0.042150335417167506, 0.1196914054141891, 0.10426271426997136, 0.16839350509823126, 0.12500995662222958, 0.10743748624260241, 0.35675305412334646, 0.4155332287490834, 0.38453247614117825, 0.47573397715391974, 0.3841219045709019, 0.31091634022844694, 0.3645767821102608, 0.42704143509924974, 0.4060025851983542, 0.08845601991790886, 0.12308062164139988, 0.07559094412454903, 0.08890041890355282, 0.10749512226291102, 0.08044383473358352, 0.11302251559636212, 0.08723536264049603, 0.11394910662780988, 0.22370075976710546, 0.19598174343666552, 0.24580905857131385, 0.18426551550893355, 0.1802311736150881, 0.1353220807884431, 0.20475651579309329, 0.23859120006486123, 0.15645477815044506, 0.23541244057606914, 0.2628196770330825, 0.2685043039054371, 0.2992212307679565, 0.31257556003512177, 0.2893997984460428, 0.23457522167156253, 0.2959893545184601, 0.20080928802905196, 0.23236710552890805, 0.2444779547182837, 0.17223725296473824, 0.16295293829641377, 0.24328500544648757, 0.2376792335900143, 0.16074147305616715, 0.20360731144012645, 0.1546922029919917, 0.1851849699860284, 0.20965862063287477, 0.17909682558669882, 0.21225825372231377, 0.17772315644016035, 0.20355185538924603, 0.18966096733179916, 0.19751160628199782, 0.20992104893672536, 0.16192342970800688, 0.1700421023771791, 0.1778667705553344, 0.16490444876340715, 0.1699398951635971, 0.19544422096683312, 0.18130508538555545, 0.18372599075189133, 0.17511323729060968, 0.1671703846342607, 0.1633386350148459, 0.17340958232739445, 0.6630461826415511, 0.19078261498930116, 0.17824523024218342, 0.09795439812147355, 0.16960677906769595, 0.223120187196428, 0.609389302578477, 0.29247929797549554, 0.20964060030722953, 0.19191748922266172, 0.1563195498570289, 0.1947750991381193, 0.5285313260034591, 0.14823744990915422, 0.1994934660520974, 0.17839933277000286, 0.18390079462911624, 0.1804489603896896, 0.17700325614617618, 0.15974326393322247, 0.17418045387802283, 0.1762051809795232, 0.18267397112539852, 0.16591029583084071, 0.06969495735070963, 0.0931019924333345, 0.07159820387461335, 0.07594445880701095, 0.08037387635669457, 0.06895067340167971, 0.070151405813901, 0.07179177774187429, 0.07689129605999878]}, "mutation_prompt": null}
{"id": "a94be00e-90a0-4647-8f00-2f0513e9abc2", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                levy = np.random.standard_cauchy(self.dim)\n                mutant = np.clip(a + F * (b - c) + levy, -5.0, 5.0)\n                if np.random.rand() < CR:\n                    mutant = np.clip(mutant, -5.0, 5.0)\n                else:\n                    mutant = pop[i]\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer", "description": "Enhancing diversity through a novel mutation strategy that incorporates Levy flights to promote exploration.", "configspace": "", "generation": 40, "fitness": 0.19661280011575255, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.4831413232707793, 0.4058329526250616, 0.44086078451071053, 0.40292448375892287, 0.5226039356708433, 0.4024541636729063, 0.46877300499072794, 0.43367645190419213, 0.4985120495213038, 0.0016099651618595168, 0.04931535193793968, 0.005722213376283203, 0.04363939435507891, 9.999999999998899e-05, 0.008810944371230867, 9.999999999998899e-05, 0.01532924548549841, 9.999999999998899e-05, 0.11889516143063594, 0.09293993705835024, 0.11004713516322373, 0.10656027341777408, 0.09555749083144327, 0.0885067182156889, 0.09388883932565784, 0.09798774705140345, 0.13345853237702665, 0.05912004951051675, 0.08445895314029261, 0.058636434472189136, 0.06213045979992038, 0.0631107383761339, 0.054221806418072394, 0.05755574206141245, 0.06117321109329932, 0.09503523460342478, 0.964350363697236, 0.8852886103994537, 0.9347696750492256, 0.8990944399120325, 0.9305393114233929, 0.9364128134472114, 0.9486892854831764, 0.9467010526421582, 0.9605342072067955, 0.1891506201043084, 0.16147828136365427, 0.1439893959044508, 0.20991151563352572, 0.12007641501851363, 0.203295720256101, 0.2076367381976969, 0.14236059104171495, 0.16331550225918745, 0.30884542494550504, 0.5398451930193868, 0.20556707721709966, 0.20258263826358236, 0.18862120813814787, 0.15013184627513654, 0.26434323042854113, 0.5948079096909045, 0.327773744665393, 0.11673337439381215, 0.14768075478091747, 0.026513629982604425, 0.09134860963039904, 0.10272268805334328, 0.08972425931295658, 0.08428353181733617, 0.06181740636066135, 0.12716901477231768, 0.09865689478570983, 0.10670335450950008, 0.1066585271002165, 0.11461249317624989, 0.09808220134679946, 0.1234158150278094, 0.12528161044676744, 0.16810440487862266, 0.16392303435175493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08470478013576399, 0.14139452507824768, 9.999999999998899e-05, 0.022832459842717645, 0.071548024978626, 0.0719041235300476, 0.08300559077056424, 0.0568887096329892, 0.047211604727429024, 0.055067453507074426, 0.07719894295943797, 0.03968658968527017, 0.09664474830783198, 0.04881829973604457, 0.08999195817227024, 0.08694541580206572, 0.046423480893632574, 0.046993944548886835, 0.08284644471890101, 0.10319769128217171, 0.036249208676548905, 0.07062281076026666, 0.14160227752138765, 0.04081174797643272, 0.10150731645287192, 0.06515077431877303, 0.19240575810162253, 0.07669124435143626, 0.1220332524497062, 0.19898540675822962, 0.05990979002108865, 0.13638955429885813, 0.07770568509660702, 0.3585625687229871, 0.3865988654757945, 0.38638854552075763, 0.3259429131267684, 0.37836328954806175, 0.38800055453989335, 0.35979383308128154, 0.2997864659394188, 0.3418083684537113, 0.09290985402592555, 0.09217539163047972, 0.08429800534179899, 0.0926648605713537, 0.09105321385203657, 0.08929097388964857, 0.10617406497854154, 0.10480097400126542, 0.07448551097725664, 0.10606595649212736, 0.13725202011049764, 0.13654325477328222, 0.14042368127651828, 0.15726322002649706, 0.15805553900977065, 0.1506239646267008, 0.16048220516215495, 0.14899525087487842, 0.19803848793403356, 0.22257573682874865, 0.27317385925006543, 0.2274302871249222, 0.2239238135886651, 0.22017730664631796, 0.22366935586098002, 0.2751316590554116, 0.2386911437463034, 0.2342624207438374, 0.20576450623286668, 0.19292472880586653, 0.20904532843117873, 0.24210020289218248, 0.22054699274755918, 0.16870233706498095, 0.21895024549305675, 0.2149381356097313, 0.16814736465159563, 0.16818886154103507, 0.17535443851222665, 0.20095757927683355, 0.1807057234138627, 0.1757947133551756, 0.17788191959026523, 0.18139484603628897, 0.1849071705138683, 0.16343724672690862, 0.16935755935468055, 0.16971714875142896, 0.20246552810930518, 0.18455541345400495, 0.17643856990789342, 0.15380132359624166, 0.17588057811970104, 0.1829690898683891, 0.5844512799503467, 0.12374435553043373, 0.1455101591787047, 0.31294981818239254, 0.19060718361746187, 0.14890019389153308, 0.14824002011063242, 0.14784378505632756, 0.5832490358537226, 0.46426990115375566, 0.1482267779002967, 0.26185633379189854, 0.2574261212846254, 0.4586033006377285, 0.12019417804783039, 0.20238665979780113, 0.1435148166754745, 0.20051814704851378, 0.16832825490304548, 0.16533209326476683, 0.1740196073094198, 0.1753861783997912, 0.16945057458340362, 0.1932082639442303, 0.1726979816962988, 0.17972419360535186, 0.17844110532602775, 0.07666177439036836, 0.0747706529912937, 0.06790499751867396, 0.06155844924038034, 0.06968143904638402, 0.06678109829598489, 0.06286361439625998, 0.0702780227184292, 0.07387472633222714]}, "mutation_prompt": null}
{"id": "78d3b95d-262b-4fd5-9cf5-74312fdde984", "solution": "import numpy as np\n\nclass Hybrid_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Hybrid_DE_PSO_Optimizer", "description": "Improved DE_PSO_Optimizer by introducing a novel hybrid mutation strategy combining DE/rand/1 and DE/current-to-best/1 strategies for enhanced exploration and exploitation.", "configspace": "", "generation": 41, "fitness": 0.22418335168283535, "feedback": "The algorithm Hybrid_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "caacb4ce-c24a-4434-abf3-f8e8181d636c", "metadata": {"aucs": [0.5987598374789668, 0.6297601486975153, 0.6406664663370596, 0.6495326157368873, 0.6101070464678928, 0.6460390414721463, 0.6278667290224074, 0.624186565738106, 0.6300242381193769, 0.29352153401834746, 0.07033663319735173, 0.3483451366555089, 0.14495162083624402, 0.19516738939169576, 0.3404868540646626, 0.0763476894232139, 0.2374417752993494, 0.04275482118980778, 0.08392480588674078, 0.07944907471604123, 0.08199059133597397, 0.11208690436893953, 0.10627782532402619, 0.09171038183743008, 0.14593988064252794, 0.11913031131453578, 0.1046441282026479, 0.07941508306934031, 0.0817704317920166, 0.10647837507909974, 0.09816476133714602, 0.09134520233696908, 0.08201064092436372, 0.1029744287279809, 0.09169207165247828, 0.06842602226048855, 0.89005733062056, 0.7966717597252103, 0.9342542533300147, 0.8485700580849589, 0.9273399643315758, 0.7875904071066369, 0.8496075117359653, 0.8358638234814375, 0.8839786479825129, 0.2949299548917983, 0.28440637362103693, 0.26822814801866435, 0.3318593964841049, 0.24370839313850146, 0.21998986699018674, 0.3420404101699204, 0.22593142401245037, 0.34229737628136103, 0.3109942071811491, 0.1885700610879426, 0.30441395138906513, 0.26145376004260534, 0.24589323734007762, 0.24936396623745805, 0.1994860397039745, 0.2090717727735948, 0.19896308775510307, 0.08908263876437938, 0.12506414797919352, 0.11597445562430553, 0.11453759105083916, 0.11735862453535595, 0.10350628734873868, 0.10780048596474767, 0.13026852272903, 0.14625019603015732, 0.13997804608564857, 0.09674536733004391, 0.11293922906163412, 0.1467971652773905, 0.09107937093148144, 0.1173107002986502, 0.11344573087991616, 0.11232148801529906, 0.2529485207482516, 0.015235924990187777, 9.999999999998899e-05, 0.042907530244870595, 0.03777787491429041, 9.999999999998899e-05, 0.005861796619658133, 0.038021067691116905, 9.999999999998899e-05, 0.045749425346734096, 0.03231651374526168, 0.07341109501816023, 0.07741497757629934, 0.0697954833439084, 0.03355674346261861, 0.024117337009300188, 0.033572749395793244, 0.07550897552282476, 0.042486764171385194, 0.06442316773738987, 0.040084394885841146, 0.10459665271159246, 0.051795044661398615, 0.12144909360624367, 0.04879966045825457, 0.06268289997742416, 0.07239725132384578, 0.06496295635414862, 0.04043940969636495, 0.07191686041791312, 0.16315656718475602, 0.1416832875377777, 0.08019175837420411, 0.17136550202386824, 0.15542847339710242, 0.1054669510482239, 0.11011852235972197, 0.44448200056695664, 0.4192944058328595, 0.4765174287898477, 0.46637803801187405, 0.4450910931847185, 0.43463001050380246, 0.474817242848803, 0.45069929855337065, 0.5180398192598548, 0.10494823585482227, 0.08593033957894969, 0.08979436476307023, 0.10027084901046168, 0.10150369835795536, 0.09166594144726004, 0.0991966034076307, 0.10518735460961548, 0.08145984539768014, 0.2606217327854794, 0.1477738378444886, 0.1570976045957987, 0.16543014221453833, 0.16921870125261262, 0.1397983285083132, 0.13711400454499367, 0.1263063110848931, 0.24084118708109792, 0.2266683102991185, 0.2937405526746657, 0.23638893909346514, 0.22363267643479257, 0.23552627788800462, 0.2798547796768027, 0.3200718543933524, 0.26657630120677134, 0.2376741515893207, 0.2471183745462724, 0.22207325031415248, 0.24874665812471108, 0.22893464814347486, 0.17416314113588383, 0.2104959879818401, 0.23847769417058007, 0.25352595107353637, 0.2019671562297528, 0.20265318016644007, 0.19509408561120167, 0.1868596476845853, 0.19105517480826395, 0.1667734633841006, 0.19097647483479108, 0.20253468150980902, 0.20026201665616783, 0.20912324270378135, 0.1934990801951627, 0.19022487954146916, 0.17852767711258488, 0.17606665776471642, 0.18684944930811687, 0.1727287748481393, 0.19393185014669, 0.17171496810785214, 0.17365165922610215, 0.16469549305598807, 0.6907790411728432, 0.15017180411688225, 0.7520468898953805, 0.1938894886569782, 0.6659820979556679, 0.1433927287847906, 0.16427304469946635, 0.7147433102458121, 0.5570818022751072, 0.1504651766650883, 0.36268264679443407, 0.2394971711131525, 0.16276182997593647, 0.19134941785763981, 0.16390255268203602, 0.16602463429934977, 0.10334959250700215, 0.170613732699464, 0.16084353448300048, 0.1711972759384175, 0.19193808684178404, 0.18370245643168737, 0.16007733779104216, 0.1635315621868505, 0.16751536394374233, 0.1786828100428891, 0.06818364939517108, 0.07640008641255247, 0.07997287165219802, 0.07871769031843234, 0.08317007531289, 0.0724961449980086, 0.06516567996880873, 0.08987200402108098, 0.10049926088593908]}, "mutation_prompt": null}
{"id": "ccd8b6a4-eae1-4dbf-a5e9-2d6ea4183985", "solution": "import numpy as np\n\nclass Enhanced_Hybrid_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99, F_min=0.1, F_max=0.9, CR_min=0.1, CR_max=0.9, w_min=0.5, w_max=1.0, c1_min=0.5, c1_max=2.0, c2_min=0.5, c2_max=2.0):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n        self.F_min = F_min\n        self.F_max = F_max\n        self.CR_min = CR_min\n        self.CR_max = CR_max\n        self.w_min = w_min\n        self.w_max = w_max\n        self.c1_min = c1_min\n        self.c1_max = c1_max\n        self.c2_min = c2_min\n        self.c2_max = c2_max\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def adapt_parameters():\n            self.F = np.clip(np.random.normal(self.F, 0.1), self.F_min, self.F_max)\n            self.CR = np.clip(np.random.normal(self.CR, 0.1), self.CR_min, self.CR_max)\n            self.w = np.clip(np.random.normal(self.w, 0.1), self.w_min, self.w_max)\n            self.c1 = np.clip(np.random.normal(self.c1, 0.1), self.c1_min, self.c1_max)\n            self.c2 = np.clip(np.random.normal(self.c2, 0.1), self.c2_min, self.c2_max)\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            adapt_parameters()\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest\n", "name": "Enhanced_Hybrid_DE_PSO_Optimizer", "description": "Enhanced Hybrid_DE_PSO_Optimizer by incorporating a novel adaptive mutation strategy based on self-adaptive control parameters for improved convergence speed and accuracy.", "configspace": "", "generation": 42, "fitness": 0.1733029010120958, "feedback": "The algorithm Enhanced_Hybrid_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "78d3b95d-262b-4fd5-9cf5-74312fdde984", "metadata": {"aucs": [0.4790584589968756, 0.2517749604625694, 0.3583410408596662, 0.4192186609124192, 0.21813522739519842, 0.3988965503166789, 0.44549295005327505, 0.24673233412205586, 0.36881902868732375, 0.16294964033423753, 9.999999999998899e-05, 0.07134227806851101, 0.06420642822424327, 0.012101685362938985, 0.055436210734665425, 0.08257204407214613, 0.008191328875927328, 0.06380164697661406, 0.06542984383219841, 0.06236422401095865, 0.07851187727117726, 0.06902962076100794, 0.06375434904409705, 0.11555035604707464, 0.08272768892942639, 0.067742814508988, 0.06879063814973274, 0.0712844396983815, 0.048136785392110304, 0.0750755247125493, 0.07665644365898427, 0.044859097694267214, 0.0744036862517714, 0.07816391512716891, 0.055793548064316245, 0.08292644867786914, 0.9148961176346104, 0.9457150493828835, 0.9126637012865908, 0.913241803787069, 0.9643955248203022, 0.9621488127584437, 0.9301375361058832, 0.927683483914576, 0.9482070166059484, 0.20109609692875008, 0.09848565047182034, 0.18503964657736238, 0.20236101881409252, 0.10896162748308491, 0.1515616203358624, 0.21075826747071313, 0.1206842267424818, 0.20027189228893516, 0.44323395466891746, 0.134830708661278, 0.24084958274963475, 0.48661067216405796, 0.13571570562045143, 0.19493666063017068, 0.20390752970753223, 0.16343098043586213, 0.2496267767456143, 0.12925624352358156, 0.0545150285661089, 0.11325316425475562, 0.12064863723560193, 0.09050628482699374, 0.12599802968218177, 0.11858501453063708, 0.024423809298258492, 0.14016213620877604, 0.10131409971629624, 0.051175710599435154, 0.08255988381366386, 0.10833828359783182, 0.04667662842098652, 0.10519154466105707, 0.10470387351691757, 0.08268405631293085, 0.13462407358265227, 0.026628170040632226, 9.999999999998899e-05, 9.999999999998899e-05, 0.06736220811494509, 9.999999999998899e-05, 9.999999999998899e-05, 0.004322151047722933, 9.999999999998899e-05, 0.0010857223375462244, 0.06178703163282118, 0.031133699750147792, 0.09191688240540064, 0.07641270520125165, 0.026339458739922716, 0.019560888480986582, 0.10963743852124919, 0.02614271361711651, 0.10061096133422631, 0.007111313135441, 9.999999999998899e-05, 9.999999999998899e-05, 0.024732255467477038, 9.999999999998899e-05, 9.999999999998899e-05, 0.028417928691855887, 9.999999999998899e-05, 0.0009616416978504017, 0.07445349910184396, 0.03827668323116917, 0.03885994128665882, 0.09157460550199759, 0.01120588558760538, 0.06991003382985816, 0.09729577144718238, 0.021929700679148345, 0.08153869671547709, 0.36123812540394007, 0.24654999717355452, 0.3776929351522764, 0.3861279118261336, 0.24932988890950858, 0.3571848218335798, 0.4096184597172423, 0.26076877756531436, 0.3375016621393977, 0.08063288645416866, 0.04935518248694548, 0.07825111732437295, 0.12345564597524206, 0.053338999806539, 0.0937390241019993, 0.09300201628487648, 0.05659069192274546, 0.0716183062788015, 0.10644127228163414, 0.127190748717514, 0.11350637367716843, 0.17024415605960352, 0.15875008849234762, 0.11807955079455257, 0.13062696692038356, 0.11672274808343175, 0.11750983281934568, 0.2569454081221111, 0.17878722370751454, 0.21334112069012634, 0.26012277568308484, 0.18170198412621308, 0.23486391429436437, 0.24336046073556994, 0.19436044019430376, 0.20083208742897019, 0.22578094991168318, 0.11655718074226518, 0.21537228962070198, 0.19972853105729482, 0.11183957480959472, 0.16346994345924137, 0.18615852808104005, 0.12914651018877954, 0.17054416129499828, 0.19064490465541195, 0.14835911319939132, 0.17862367967881687, 0.17738836704572591, 0.20225006461513462, 0.17740570369284636, 0.22620866218525593, 0.16934916259745425, 0.20177179486212282, 0.18392541926766048, 0.1521343621585678, 0.16622015642633814, 0.1911883040621365, 0.1600842101227814, 0.16136872611831843, 0.18248776308803283, 0.16119550935959837, 0.17544256256594926, 0.17802415167190122, 0.16289221968208334, 0.14967797598187937, 0.16608825633045599, 0.17454809637321556, 0.1913161366019459, 0.15952254592377102, 0.13633380557636465, 0.3340144849125223, 0.25932905228095326, 0.18086101649150255, 0.1887799109898749, 0.14051891090208224, 0.17826640739090582, 0.14653162876624393, 0.39186516595012244, 0.17952841557325594, 0.34920007343564097, 0.17413643960414138, 0.17292520519986776, 0.17214917800247442, 0.17552212527625233, 0.16515423256973627, 0.16799983423760023, 0.17282456386166445, 0.1734173998613049, 0.17480581222953628, 0.06982401665753091, 0.05105977432837805, 0.0635604428302502, 0.07653521047851186, 0.060076167627805654, 0.057374727553808014, 0.08006413124891221, 0.05210308992552759, 0.0679183432060978]}, "mutation_prompt": null}
{"id": "5e738998-19c3-4ce6-b5ac-f4a42ee9b707", "solution": "import numpy as np\n\nclass Hybrid_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Hybrid_DE_PSO_Optimizer", "description": "Improved DE_PSO_Optimizer by introducing a novel hybrid mutation strategy combining DE/rand/1 and DE/current-to-best/1 strategies for enhanced exploration and exploitation.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "78d3b95d-262b-4fd5-9cf5-74312fdde984", "metadata": {"aucs": [0.5987598374789668, 0.6297601486975153, 0.6406664663370596, 0.6495326157368873, 0.6101070464678928, 0.6460390414721463, 0.6278667290224074, 0.624186565738106, 0.6300242381193769, 0.29352153401834746, 0.07033663319735173, 0.3483451366555089, 0.14495162083624402, 0.19516738939169576, 0.3404868540646626, 0.0763476894232139, 0.2374417752993494, 0.04275482118980778, 0.08392480588674078, 0.07944907471604123, 0.08199059133597397, 0.11208690436893953, 0.10627782532402619, 0.09171038183743008, 0.14593988064252794, 0.11913031131453578, 0.1046441282026479, 0.07941508306934031, 0.0817704317920166, 0.10647837507909974, 0.09816476133714602, 0.09134520233696908, 0.08201064092436372, 0.1029744287279809, 0.09169207165247828, 0.06842602226048855, 0.89005733062056, 0.7966717597252103, 0.9342542533300147, 0.8485700580849589, 0.9273399643315758, 0.7875904071066369, 0.8496075117359653, 0.8358638234814375, 0.8839786479825129, 0.2949299548917983, 0.28440637362103693, 0.26822814801866435, 0.3318593964841049, 0.24370839313850146, 0.21998986699018674, 0.3420404101699204, 0.22593142401245037, 0.34229737628136103, 0.3109942071811491, 0.1885700610879426, 0.30441395138906513, 0.26145376004260534, 0.24589323734007762, 0.24936396623745805, 0.1994860397039745, 0.2090717727735948, 0.19896308775510307, 0.08908263876437938, 0.12506414797919352, 0.11597445562430553, 0.11453759105083916, 0.11735862453535595, 0.10350628734873868, 0.10780048596474767, 0.13026852272903, 0.14625019603015732, 0.13997804608564857, 0.09674536733004391, 0.11293922906163412, 0.1467971652773905, 0.09107937093148144, 0.1173107002986502, 0.11344573087991616, 0.11232148801529906, 0.2529485207482516, 0.015235924990187777, 9.999999999998899e-05, 0.042907530244870595, 0.03777787491429041, 9.999999999998899e-05, 0.005861796619658133, 0.038021067691116905, 9.999999999998899e-05, 0.045749425346734096, 0.03231651374526168, 0.07341109501816023, 0.07741497757629934, 0.0697954833439084, 0.03355674346261861, 0.024117337009300188, 0.033572749395793244, 0.07550897552282476, 0.042486764171385194, 0.06442316773738987, 0.040084394885841146, 0.10459665271159246, 0.051795044661398615, 0.12144909360624367, 0.04879966045825457, 0.06268289997742416, 0.07239725132384578, 0.06496295635414862, 0.04043940969636495, 0.07191686041791312, 0.16315656718475602, 0.1416832875377777, 0.08019175837420411, 0.17136550202386824, 0.15542847339710242, 0.1054669510482239, 0.11011852235972197, 0.44448200056695664, 0.4192944058328595, 0.4765174287898477, 0.46637803801187405, 0.4450910931847185, 0.43463001050380246, 0.474817242848803, 0.45069929855337065, 0.5180398192598548, 0.10494823585482227, 0.08593033957894969, 0.08979436476307023, 0.10027084901046168, 0.10150369835795536, 0.09166594144726004, 0.0991966034076307, 0.10518735460961548, 0.08145984539768014, 0.2606217327854794, 0.1477738378444886, 0.1570976045957987, 0.16543014221453833, 0.16921870125261262, 0.1397983285083132, 0.13711400454499367, 0.1263063110848931, 0.24084118708109792, 0.2266683102991185, 0.2937405526746657, 0.23638893909346514, 0.22363267643479257, 0.23552627788800462, 0.2798547796768027, 0.3200718543933524, 0.26657630120677134, 0.2376741515893207, 0.2471183745462724, 0.22207325031415248, 0.24874665812471108, 0.22893464814347486, 0.17416314113588383, 0.2104959879818401, 0.23847769417058007, 0.25352595107353637, 0.2019671562297528, 0.20265318016644007, 0.19509408561120167, 0.1868596476845853, 0.19105517480826395, 0.1667734633841006, 0.19097647483479108, 0.20253468150980902, 0.20026201665616783, 0.20912324270378135, 0.1934990801951627, 0.19022487954146916, 0.17852767711258488, 0.17606665776471642, 0.18684944930811687, 0.1727287748481393, 0.19393185014669, 0.17171496810785214, 0.17365165922610215, 0.16469549305598807, 0.6907790411728432, 0.15017180411688225, 0.7520468898953805, 0.1938894886569782, 0.6659820979556679, 0.1433927287847906, 0.16427304469946635, 0.7147433102458121, 0.5570818022751072, 0.1504651766650883, 0.36268264679443407, 0.2394971711131525, 0.16276182997593647, 0.19134941785763981, 0.16390255268203602, 0.16602463429934977, 0.10334959250700215, 0.170613732699464, 0.16084353448300048, 0.1711972759384175, 0.19193808684178404, 0.18370245643168737, 0.16007733779104216, 0.1635315621868505, 0.16751536394374233, 0.1786828100428891, 0.06818364939517108, 0.07640008641255247, 0.07997287165219802, 0.07871769031843234, 0.08317007531289, 0.0724961449980086, 0.06516567996880873, 0.08987200402108098, 0.10049926088593908]}, "mutation_prompt": null}
{"id": "e909fd06-1ccf-432f-96f5-4e816fbe7c08", "solution": "import numpy as np\n\nclass Hybrid_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Hybrid_DE_PSO_Optimizer", "description": "Improved DE_PSO_Optimizer by introducing a novel hybrid mutation strategy combining DE/rand/1 and DE/current-to-best/1 strategies for enhanced exploration and exploitation.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "78d3b95d-262b-4fd5-9cf5-74312fdde984", "metadata": {"aucs": [0.5987598374789668, 0.6297601486975153, 0.6406664663370596, 0.6495326157368873, 0.6101070464678928, 0.6460390414721463, 0.6278667290224074, 0.624186565738106, 0.6300242381193769, 0.29352153401834746, 0.07033663319735173, 0.3483451366555089, 0.14495162083624402, 0.19516738939169576, 0.3404868540646626, 0.0763476894232139, 0.2374417752993494, 0.04275482118980778, 0.08392480588674078, 0.07944907471604123, 0.08199059133597397, 0.11208690436893953, 0.10627782532402619, 0.09171038183743008, 0.14593988064252794, 0.11913031131453578, 0.1046441282026479, 0.07941508306934031, 0.0817704317920166, 0.10647837507909974, 0.09816476133714602, 0.09134520233696908, 0.08201064092436372, 0.1029744287279809, 0.09169207165247828, 0.06842602226048855, 0.89005733062056, 0.7966717597252103, 0.9342542533300147, 0.8485700580849589, 0.9273399643315758, 0.7875904071066369, 0.8496075117359653, 0.8358638234814375, 0.8839786479825129, 0.2949299548917983, 0.28440637362103693, 0.26822814801866435, 0.3318593964841049, 0.24370839313850146, 0.21998986699018674, 0.3420404101699204, 0.22593142401245037, 0.34229737628136103, 0.3109942071811491, 0.1885700610879426, 0.30441395138906513, 0.26145376004260534, 0.24589323734007762, 0.24936396623745805, 0.1994860397039745, 0.2090717727735948, 0.19896308775510307, 0.08908263876437938, 0.12506414797919352, 0.11597445562430553, 0.11453759105083916, 0.11735862453535595, 0.10350628734873868, 0.10780048596474767, 0.13026852272903, 0.14625019603015732, 0.13997804608564857, 0.09674536733004391, 0.11293922906163412, 0.1467971652773905, 0.09107937093148144, 0.1173107002986502, 0.11344573087991616, 0.11232148801529906, 0.2529485207482516, 0.015235924990187777, 9.999999999998899e-05, 0.042907530244870595, 0.03777787491429041, 9.999999999998899e-05, 0.005861796619658133, 0.038021067691116905, 9.999999999998899e-05, 0.045749425346734096, 0.03231651374526168, 0.07341109501816023, 0.07741497757629934, 0.0697954833439084, 0.03355674346261861, 0.024117337009300188, 0.033572749395793244, 0.07550897552282476, 0.042486764171385194, 0.06442316773738987, 0.040084394885841146, 0.10459665271159246, 0.051795044661398615, 0.12144909360624367, 0.04879966045825457, 0.06268289997742416, 0.07239725132384578, 0.06496295635414862, 0.04043940969636495, 0.07191686041791312, 0.16315656718475602, 0.1416832875377777, 0.08019175837420411, 0.17136550202386824, 0.15542847339710242, 0.1054669510482239, 0.11011852235972197, 0.44448200056695664, 0.4192944058328595, 0.4765174287898477, 0.46637803801187405, 0.4450910931847185, 0.43463001050380246, 0.474817242848803, 0.45069929855337065, 0.5180398192598548, 0.10494823585482227, 0.08593033957894969, 0.08979436476307023, 0.10027084901046168, 0.10150369835795536, 0.09166594144726004, 0.0991966034076307, 0.10518735460961548, 0.08145984539768014, 0.2606217327854794, 0.1477738378444886, 0.1570976045957987, 0.16543014221453833, 0.16921870125261262, 0.1397983285083132, 0.13711400454499367, 0.1263063110848931, 0.24084118708109792, 0.2266683102991185, 0.2937405526746657, 0.23638893909346514, 0.22363267643479257, 0.23552627788800462, 0.2798547796768027, 0.3200718543933524, 0.26657630120677134, 0.2376741515893207, 0.2471183745462724, 0.22207325031415248, 0.24874665812471108, 0.22893464814347486, 0.17416314113588383, 0.2104959879818401, 0.23847769417058007, 0.25352595107353637, 0.2019671562297528, 0.20265318016644007, 0.19509408561120167, 0.1868596476845853, 0.19105517480826395, 0.1667734633841006, 0.19097647483479108, 0.20253468150980902, 0.20026201665616783, 0.20912324270378135, 0.1934990801951627, 0.19022487954146916, 0.17852767711258488, 0.17606665776471642, 0.18684944930811687, 0.1727287748481393, 0.19393185014669, 0.17171496810785214, 0.17365165922610215, 0.16469549305598807, 0.6907790411728432, 0.15017180411688225, 0.7520468898953805, 0.1938894886569782, 0.6659820979556679, 0.1433927287847906, 0.16427304469946635, 0.7147433102458121, 0.5570818022751072, 0.1504651766650883, 0.36268264679443407, 0.2394971711131525, 0.16276182997593647, 0.19134941785763981, 0.16390255268203602, 0.16602463429934977, 0.10334959250700215, 0.170613732699464, 0.16084353448300048, 0.1711972759384175, 0.19193808684178404, 0.18370245643168737, 0.16007733779104216, 0.1635315621868505, 0.16751536394374233, 0.1786828100428891, 0.06818364939517108, 0.07640008641255247, 0.07997287165219802, 0.07871769031843234, 0.08317007531289, 0.0724961449980086, 0.06516567996880873, 0.08987200402108098, 0.10049926088593908]}, "mutation_prompt": null}
{"id": "4a231589-8c0f-466e-abdb-607bbddd9b7b", "solution": "import numpy as np\n\nclass Dynamic_Hybrid_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Dynamic_Hybrid_DE_PSO_Optimizer", "description": "Utilize a dynamic adaptation strategy for the algorithm's parameters to enhance performance and adaptability.", "configspace": "", "generation": 45, "fitness": 0.22418335168283535, "feedback": "The algorithm Dynamic_Hybrid_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "78d3b95d-262b-4fd5-9cf5-74312fdde984", "metadata": {"aucs": [0.5987598374789668, 0.6297601486975153, 0.6406664663370596, 0.6495326157368873, 0.6101070464678928, 0.6460390414721463, 0.6278667290224074, 0.624186565738106, 0.6300242381193769, 0.29352153401834746, 0.07033663319735173, 0.3483451366555089, 0.14495162083624402, 0.19516738939169576, 0.3404868540646626, 0.0763476894232139, 0.2374417752993494, 0.04275482118980778, 0.08392480588674078, 0.07944907471604123, 0.08199059133597397, 0.11208690436893953, 0.10627782532402619, 0.09171038183743008, 0.14593988064252794, 0.11913031131453578, 0.1046441282026479, 0.07941508306934031, 0.0817704317920166, 0.10647837507909974, 0.09816476133714602, 0.09134520233696908, 0.08201064092436372, 0.1029744287279809, 0.09169207165247828, 0.06842602226048855, 0.89005733062056, 0.7966717597252103, 0.9342542533300147, 0.8485700580849589, 0.9273399643315758, 0.7875904071066369, 0.8496075117359653, 0.8358638234814375, 0.8839786479825129, 0.2949299548917983, 0.28440637362103693, 0.26822814801866435, 0.3318593964841049, 0.24370839313850146, 0.21998986699018674, 0.3420404101699204, 0.22593142401245037, 0.34229737628136103, 0.3109942071811491, 0.1885700610879426, 0.30441395138906513, 0.26145376004260534, 0.24589323734007762, 0.24936396623745805, 0.1994860397039745, 0.2090717727735948, 0.19896308775510307, 0.08908263876437938, 0.12506414797919352, 0.11597445562430553, 0.11453759105083916, 0.11735862453535595, 0.10350628734873868, 0.10780048596474767, 0.13026852272903, 0.14625019603015732, 0.13997804608564857, 0.09674536733004391, 0.11293922906163412, 0.1467971652773905, 0.09107937093148144, 0.1173107002986502, 0.11344573087991616, 0.11232148801529906, 0.2529485207482516, 0.015235924990187777, 9.999999999998899e-05, 0.042907530244870595, 0.03777787491429041, 9.999999999998899e-05, 0.005861796619658133, 0.038021067691116905, 9.999999999998899e-05, 0.045749425346734096, 0.03231651374526168, 0.07341109501816023, 0.07741497757629934, 0.0697954833439084, 0.03355674346261861, 0.024117337009300188, 0.033572749395793244, 0.07550897552282476, 0.042486764171385194, 0.06442316773738987, 0.040084394885841146, 0.10459665271159246, 0.051795044661398615, 0.12144909360624367, 0.04879966045825457, 0.06268289997742416, 0.07239725132384578, 0.06496295635414862, 0.04043940969636495, 0.07191686041791312, 0.16315656718475602, 0.1416832875377777, 0.08019175837420411, 0.17136550202386824, 0.15542847339710242, 0.1054669510482239, 0.11011852235972197, 0.44448200056695664, 0.4192944058328595, 0.4765174287898477, 0.46637803801187405, 0.4450910931847185, 0.43463001050380246, 0.474817242848803, 0.45069929855337065, 0.5180398192598548, 0.10494823585482227, 0.08593033957894969, 0.08979436476307023, 0.10027084901046168, 0.10150369835795536, 0.09166594144726004, 0.0991966034076307, 0.10518735460961548, 0.08145984539768014, 0.2606217327854794, 0.1477738378444886, 0.1570976045957987, 0.16543014221453833, 0.16921870125261262, 0.1397983285083132, 0.13711400454499367, 0.1263063110848931, 0.24084118708109792, 0.2266683102991185, 0.2937405526746657, 0.23638893909346514, 0.22363267643479257, 0.23552627788800462, 0.2798547796768027, 0.3200718543933524, 0.26657630120677134, 0.2376741515893207, 0.2471183745462724, 0.22207325031415248, 0.24874665812471108, 0.22893464814347486, 0.17416314113588383, 0.2104959879818401, 0.23847769417058007, 0.25352595107353637, 0.2019671562297528, 0.20265318016644007, 0.19509408561120167, 0.1868596476845853, 0.19105517480826395, 0.1667734633841006, 0.19097647483479108, 0.20253468150980902, 0.20026201665616783, 0.20912324270378135, 0.1934990801951627, 0.19022487954146916, 0.17852767711258488, 0.17606665776471642, 0.18684944930811687, 0.1727287748481393, 0.19393185014669, 0.17171496810785214, 0.17365165922610215, 0.16469549305598807, 0.6907790411728432, 0.15017180411688225, 0.7520468898953805, 0.1938894886569782, 0.6659820979556679, 0.1433927287847906, 0.16427304469946635, 0.7147433102458121, 0.5570818022751072, 0.1504651766650883, 0.36268264679443407, 0.2394971711131525, 0.16276182997593647, 0.19134941785763981, 0.16390255268203602, 0.16602463429934977, 0.10334959250700215, 0.170613732699464, 0.16084353448300048, 0.1711972759384175, 0.19193808684178404, 0.18370245643168737, 0.16007733779104216, 0.1635315621868505, 0.16751536394374233, 0.1786828100428891, 0.06818364939517108, 0.07640008641255247, 0.07997287165219802, 0.07871769031843234, 0.08317007531289, 0.0724961449980086, 0.06516567996880873, 0.08987200402108098, 0.10049926088593908]}, "mutation_prompt": null}
{"id": "e8aa5126-723d-4b16-9ccf-9062e1296150", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Levy flight mutation\n                levy = np.random.standard_cauchy(self.dim)\n                mutant_levy = pop[i] + F * levy\n                mutant_levy = np.clip(mutant_levy, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer", "description": "Enhancing the exploration phase by incorporating a novel mutation mechanism based on Levy flights to promote searching diverse regions of the search space.", "configspace": "", "generation": 46, "fitness": 0.22940698383277858, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "78d3b95d-262b-4fd5-9cf5-74312fdde984", "metadata": {"aucs": [0.6408305132141714, 0.6382143744508734, 0.6025075253171273, 0.6228504942702504, 0.5987744430745388, 0.6073743465193787, 0.6165461772072242, 0.6393505217714397, 0.6175505974894224, 0.34335562507534323, 0.3290835324817383, 0.08219892759736613, 0.1546946572220822, 0.052603074238664504, 0.2844225372615464, 0.2033831747586572, 0.08716735951076027, 0.29025303974787, 0.09431704414806519, 0.09416172372438925, 0.09037477397124238, 0.14771377206798209, 0.09647004241537016, 0.1267749896267093, 0.10047187097466825, 0.08129530510949057, 0.08240785694516362, 0.08764918149154477, 0.11708421706289895, 0.11102784304785618, 0.10833914923279031, 0.08906993940775842, 0.07488300136573567, 0.08761801185934093, 0.06554497115258362, 0.09545009148640116, 0.9119717734455911, 0.9089025254399304, 0.943639691026856, 0.8140686158493959, 0.9158603632393613, 0.9256276676067133, 0.9416192595362406, 0.9613692948508705, 0.9160927375852016, 0.31662975998269893, 0.21489471015117378, 0.32764265162153405, 0.34697163724877655, 0.28055452050105556, 0.30856390966926817, 0.3546566224356057, 0.2954151350456514, 0.36228095858061393, 0.6491813418896208, 0.28494177805396215, 0.2194943063097341, 0.2123585861379732, 0.6141065873302378, 0.2603855327237822, 0.1361295026239916, 0.21734822318078084, 0.21975840282985792, 0.1770778699231067, 0.1563664974223662, 0.11961679242791812, 0.11222038996499761, 0.11009078186850607, 0.10462063831272339, 0.1604540272377002, 0.1597500242241986, 0.17245198272861484, 0.143496324702431, 0.09546079189196788, 0.15043745080458304, 0.12497019857019931, 0.13953225021123794, 0.11856993970409546, 0.17296695810822005, 0.14442971761870882, 0.11997541557805047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011734816578798601, 9.999999999998899e-05, 0.02743174947470739, 0.00023013462392851292, 9.999999999998899e-05, 9.999999999998899e-05, 0.08027513375802808, 0.18772930614612726, 0.07265881379531436, 0.17079678024901968, 0.04161327309519092, 0.026033768108198463, 0.07599482856708328, 0.08320940177643898, 0.08622045359603103, 0.03309401619211183, 0.15235282147987927, 0.06560004314472168, 0.12035598957203997, 0.09793700273350403, 0.05675941281090602, 0.18072652558917857, 0.10329424867124204, 0.05185833264763828, 0.08855438997819365, 0.06542892616704865, 0.07377592548079015, 0.03332618578459512, 0.1247943344937843, 0.07196614653352185, 0.09440001974313039, 0.11761947728984579, 0.0674048351796368, 0.4558233640461298, 0.4332141975889122, 0.451670235085746, 0.417610482925048, 0.4508615919742116, 0.42044332107503835, 0.47201246778976025, 0.46545715406010235, 0.4821891051159991, 0.11889146838700271, 0.0891832486369667, 0.10722366503490888, 0.10223816041444256, 0.10916730547778075, 0.1029410062316336, 0.08278954815168438, 0.0779689744037978, 0.07557004192032069, 0.17048872027967432, 0.20488246752731554, 0.25500171883849565, 0.19406476142753848, 0.23596006418796878, 0.1404366715571036, 0.21984022853758212, 0.14519080697835818, 0.15185090427767822, 0.21273464872856362, 0.24106310752427662, 0.3266250558984395, 0.21661604667611611, 0.26014972082609344, 0.3347709158147544, 0.2395252287253966, 0.35674998163042415, 0.3024129079713368, 0.19109722870997226, 0.21438393243295628, 0.2525683015666328, 0.19557898260268436, 0.2506365620778732, 0.1647045360836753, 0.21452535207394963, 0.22670552777571185, 0.1800728305454844, 0.1894783510342165, 0.20820398495717518, 0.18070834007709113, 0.18061746748132768, 0.17893727004138216, 0.193990092990453, 0.171483583399905, 0.21768582322890295, 0.19159956125693223, 0.1704361813254085, 0.1596007244355998, 0.17736872536110915, 0.17652991319048983, 0.18016580958557793, 0.20093480651360596, 0.1886913343120571, 0.19832109425403965, 0.1641368536007174, 0.14579314972272017, 0.7117465987749445, 0.1749001858370346, 0.17065125090095334, 0.19263877781339145, 0.19371336384272186, 0.7167238254070021, 0.16608278536472332, 0.16937964598832822, 0.43860336765375263, 0.4219009335474896, 0.1901908244651478, 0.5706164355667791, 0.16099550208864055, 0.15100792923592743, 0.15085856545087373, 0.14868003196495794, 0.10250885465454207, 0.18272598089754577, 0.16979254644760766, 0.17029709407101434, 0.18703349515010648, 0.16961462739122313, 0.17424134701097482, 0.1888229074581813, 0.16754629397667453, 0.18030644987711875, 0.0753721753329335, 0.06641439570027485, 0.08093838204990678, 0.06065205296061993, 0.0717856607181575, 0.07842229446904969, 0.08561776874774296, 0.07444232616217339, 0.07956226878222228]}, "mutation_prompt": null}
{"id": "4cf4d2aa-73e6-4850-b933-d2d7d6309688", "solution": "import numpy as np\n\nclass Enhanced_Chaotic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Chaotic map mutation\n                chaotic_map = np.sin(pop[i]) * np.cos(pop[i])\n                mutant_chaotic = pop[i] + F * chaotic_map\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_Chaotic_DE_PSO_Optimizer", "description": "Improving exploration diversity by introducing chaotic maps for mutation to enhance population diversity and convergence speed.", "configspace": "", "generation": 47, "fitness": 0.22418335168283535, "feedback": "The algorithm Enhanced_Chaotic_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "e8aa5126-723d-4b16-9ccf-9062e1296150", "metadata": {"aucs": [0.5987598374789668, 0.6297601486975153, 0.6406664663370596, 0.6495326157368873, 0.6101070464678928, 0.6460390414721463, 0.6278667290224074, 0.624186565738106, 0.6300242381193769, 0.29352153401834746, 0.07033663319735173, 0.3483451366555089, 0.14495162083624402, 0.19516738939169576, 0.3404868540646626, 0.0763476894232139, 0.2374417752993494, 0.04275482118980778, 0.08392480588674078, 0.07944907471604123, 0.08199059133597397, 0.11208690436893953, 0.10627782532402619, 0.09171038183743008, 0.14593988064252794, 0.11913031131453578, 0.1046441282026479, 0.07941508306934031, 0.0817704317920166, 0.10647837507909974, 0.09816476133714602, 0.09134520233696908, 0.08201064092436372, 0.1029744287279809, 0.09169207165247828, 0.06842602226048855, 0.89005733062056, 0.7966717597252103, 0.9342542533300147, 0.8485700580849589, 0.9273399643315758, 0.7875904071066369, 0.8496075117359653, 0.8358638234814375, 0.8839786479825129, 0.2949299548917983, 0.28440637362103693, 0.26822814801866435, 0.3318593964841049, 0.24370839313850146, 0.21998986699018674, 0.3420404101699204, 0.22593142401245037, 0.34229737628136103, 0.3109942071811491, 0.1885700610879426, 0.30441395138906513, 0.26145376004260534, 0.24589323734007762, 0.24936396623745805, 0.1994860397039745, 0.2090717727735948, 0.19896308775510307, 0.08908263876437938, 0.12506414797919352, 0.11597445562430553, 0.11453759105083916, 0.11735862453535595, 0.10350628734873868, 0.10780048596474767, 0.13026852272903, 0.14625019603015732, 0.13997804608564857, 0.09674536733004391, 0.11293922906163412, 0.1467971652773905, 0.09107937093148144, 0.1173107002986502, 0.11344573087991616, 0.11232148801529906, 0.2529485207482516, 0.015235924990187777, 9.999999999998899e-05, 0.042907530244870595, 0.03777787491429041, 9.999999999998899e-05, 0.005861796619658133, 0.038021067691116905, 9.999999999998899e-05, 0.045749425346734096, 0.03231651374526168, 0.07341109501816023, 0.07741497757629934, 0.0697954833439084, 0.03355674346261861, 0.024117337009300188, 0.033572749395793244, 0.07550897552282476, 0.042486764171385194, 0.06442316773738987, 0.040084394885841146, 0.10459665271159246, 0.051795044661398615, 0.12144909360624367, 0.04879966045825457, 0.06268289997742416, 0.07239725132384578, 0.06496295635414862, 0.04043940969636495, 0.07191686041791312, 0.16315656718475602, 0.1416832875377777, 0.08019175837420411, 0.17136550202386824, 0.15542847339710242, 0.1054669510482239, 0.11011852235972197, 0.44448200056695664, 0.4192944058328595, 0.4765174287898477, 0.46637803801187405, 0.4450910931847185, 0.43463001050380246, 0.474817242848803, 0.45069929855337065, 0.5180398192598548, 0.10494823585482227, 0.08593033957894969, 0.08979436476307023, 0.10027084901046168, 0.10150369835795536, 0.09166594144726004, 0.0991966034076307, 0.10518735460961548, 0.08145984539768014, 0.2606217327854794, 0.1477738378444886, 0.1570976045957987, 0.16543014221453833, 0.16921870125261262, 0.1397983285083132, 0.13711400454499367, 0.1263063110848931, 0.24084118708109792, 0.2266683102991185, 0.2937405526746657, 0.23638893909346514, 0.22363267643479257, 0.23552627788800462, 0.2798547796768027, 0.3200718543933524, 0.26657630120677134, 0.2376741515893207, 0.2471183745462724, 0.22207325031415248, 0.24874665812471108, 0.22893464814347486, 0.17416314113588383, 0.2104959879818401, 0.23847769417058007, 0.25352595107353637, 0.2019671562297528, 0.20265318016644007, 0.19509408561120167, 0.1868596476845853, 0.19105517480826395, 0.1667734633841006, 0.19097647483479108, 0.20253468150980902, 0.20026201665616783, 0.20912324270378135, 0.1934990801951627, 0.19022487954146916, 0.17852767711258488, 0.17606665776471642, 0.18684944930811687, 0.1727287748481393, 0.19393185014669, 0.17171496810785214, 0.17365165922610215, 0.16469549305598807, 0.6907790411728432, 0.15017180411688225, 0.7520468898953805, 0.1938894886569782, 0.6659820979556679, 0.1433927287847906, 0.16427304469946635, 0.7147433102458121, 0.5570818022751072, 0.1504651766650883, 0.36268264679443407, 0.2394971711131525, 0.16276182997593647, 0.19134941785763981, 0.16390255268203602, 0.16602463429934977, 0.10334959250700215, 0.170613732699464, 0.16084353448300048, 0.1711972759384175, 0.19193808684178404, 0.18370245643168737, 0.16007733779104216, 0.1635315621868505, 0.16751536394374233, 0.1786828100428891, 0.06818364939517108, 0.07640008641255247, 0.07997287165219802, 0.07871769031843234, 0.08317007531289, 0.0724961449980086, 0.06516567996880873, 0.08987200402108098, 0.10049926088593908]}, "mutation_prompt": null}
{"id": "99c84f27-29c2-4da4-a700-c7dd14d9267a", "solution": "import numpy as np\n\nclass Enhanced_Opposition_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Levy flight mutation\n                levy = np.random.standard_cauchy(self.dim)\n                mutant_levy = pop[i] + F * levy\n                mutant_levy = np.clip(mutant_levy, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                # Opposition-based learning\n                opposition = 2 * gbest - pop[i]\n                mutant_opp = np.clip(opposition + F * levy, -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_Opposition_DE_PSO_Optimizer", "description": "Improving the exploration by adding a novel opposition-based learning mechanism to enhance diversity in the search space.", "configspace": "", "generation": 48, "fitness": 0.22940698383277858, "feedback": "The algorithm Enhanced_Opposition_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "e8aa5126-723d-4b16-9ccf-9062e1296150", "metadata": {"aucs": [0.6408305132141714, 0.6382143744508734, 0.6025075253171273, 0.6228504942702504, 0.5987744430745388, 0.6073743465193787, 0.6165461772072242, 0.6393505217714397, 0.6175505974894224, 0.34335562507534323, 0.3290835324817383, 0.08219892759736613, 0.1546946572220822, 0.052603074238664504, 0.2844225372615464, 0.2033831747586572, 0.08716735951076027, 0.29025303974787, 0.09431704414806519, 0.09416172372438925, 0.09037477397124238, 0.14771377206798209, 0.09647004241537016, 0.1267749896267093, 0.10047187097466825, 0.08129530510949057, 0.08240785694516362, 0.08764918149154477, 0.11708421706289895, 0.11102784304785618, 0.10833914923279031, 0.08906993940775842, 0.07488300136573567, 0.08761801185934093, 0.06554497115258362, 0.09545009148640116, 0.9119717734455911, 0.9089025254399304, 0.943639691026856, 0.8140686158493959, 0.9158603632393613, 0.9256276676067133, 0.9416192595362406, 0.9613692948508705, 0.9160927375852016, 0.31662975998269893, 0.21489471015117378, 0.32764265162153405, 0.34697163724877655, 0.28055452050105556, 0.30856390966926817, 0.3546566224356057, 0.2954151350456514, 0.36228095858061393, 0.6491813418896208, 0.28494177805396215, 0.2194943063097341, 0.2123585861379732, 0.6141065873302378, 0.2603855327237822, 0.1361295026239916, 0.21734822318078084, 0.21975840282985792, 0.1770778699231067, 0.1563664974223662, 0.11961679242791812, 0.11222038996499761, 0.11009078186850607, 0.10462063831272339, 0.1604540272377002, 0.1597500242241986, 0.17245198272861484, 0.143496324702431, 0.09546079189196788, 0.15043745080458304, 0.12497019857019931, 0.13953225021123794, 0.11856993970409546, 0.17296695810822005, 0.14442971761870882, 0.11997541557805047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011734816578798601, 9.999999999998899e-05, 0.02743174947470739, 0.00023013462392851292, 9.999999999998899e-05, 9.999999999998899e-05, 0.08027513375802808, 0.18772930614612726, 0.07265881379531436, 0.17079678024901968, 0.04161327309519092, 0.026033768108198463, 0.07599482856708328, 0.08320940177643898, 0.08622045359603103, 0.03309401619211183, 0.15235282147987927, 0.06560004314472168, 0.12035598957203997, 0.09793700273350403, 0.05675941281090602, 0.18072652558917857, 0.10329424867124204, 0.05185833264763828, 0.08855438997819365, 0.06542892616704865, 0.07377592548079015, 0.03332618578459512, 0.1247943344937843, 0.07196614653352185, 0.09440001974313039, 0.11761947728984579, 0.0674048351796368, 0.4558233640461298, 0.4332141975889122, 0.451670235085746, 0.417610482925048, 0.4508615919742116, 0.42044332107503835, 0.47201246778976025, 0.46545715406010235, 0.4821891051159991, 0.11889146838700271, 0.0891832486369667, 0.10722366503490888, 0.10223816041444256, 0.10916730547778075, 0.1029410062316336, 0.08278954815168438, 0.0779689744037978, 0.07557004192032069, 0.17048872027967432, 0.20488246752731554, 0.25500171883849565, 0.19406476142753848, 0.23596006418796878, 0.1404366715571036, 0.21984022853758212, 0.14519080697835818, 0.15185090427767822, 0.21273464872856362, 0.24106310752427662, 0.3266250558984395, 0.21661604667611611, 0.26014972082609344, 0.3347709158147544, 0.2395252287253966, 0.35674998163042415, 0.3024129079713368, 0.19109722870997226, 0.21438393243295628, 0.2525683015666328, 0.19557898260268436, 0.2506365620778732, 0.1647045360836753, 0.21452535207394963, 0.22670552777571185, 0.1800728305454844, 0.1894783510342165, 0.20820398495717518, 0.18070834007709113, 0.18061746748132768, 0.17893727004138216, 0.193990092990453, 0.171483583399905, 0.21768582322890295, 0.19159956125693223, 0.1704361813254085, 0.1596007244355998, 0.17736872536110915, 0.17652991319048983, 0.18016580958557793, 0.20093480651360596, 0.1886913343120571, 0.19832109425403965, 0.1641368536007174, 0.14579314972272017, 0.7117465987749445, 0.1749001858370346, 0.17065125090095334, 0.19263877781339145, 0.19371336384272186, 0.7167238254070021, 0.16608278536472332, 0.16937964598832822, 0.43860336765375263, 0.4219009335474896, 0.1901908244651478, 0.5706164355667791, 0.16099550208864055, 0.15100792923592743, 0.15085856545087373, 0.14868003196495794, 0.10250885465454207, 0.18272598089754577, 0.16979254644760766, 0.17029709407101434, 0.18703349515010648, 0.16961462739122313, 0.17424134701097482, 0.1888229074581813, 0.16754629397667453, 0.18030644987711875, 0.0753721753329335, 0.06641439570027485, 0.08093838204990678, 0.06065205296061993, 0.0717856607181575, 0.07842229446904969, 0.08561776874774296, 0.07444232616217339, 0.07956226878222228]}, "mutation_prompt": null}
{"id": "04c5ca53-008b-47d8-b2d1-9902f070adf0", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Levy flight mutation\n                levy = np.random.standard_cauchy(self.dim)\n                mutant_levy = pop[i] + F * levy\n                mutant_levy = np.clip(mutant_levy, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer", "description": "Enhancing the exploration phase by incorporating a novel mutation mechanism based on Levy flights to promote searching diverse regions of the search space.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e8aa5126-723d-4b16-9ccf-9062e1296150", "metadata": {"aucs": [0.6408305132141714, 0.6382143744508734, 0.6025075253171273, 0.6228504942702504, 0.5987744430745388, 0.6073743465193787, 0.6165461772072242, 0.6393505217714397, 0.6175505974894224, 0.34335562507534323, 0.3290835324817383, 0.08219892759736613, 0.1546946572220822, 0.052603074238664504, 0.2844225372615464, 0.2033831747586572, 0.08716735951076027, 0.29025303974787, 0.09431704414806519, 0.09416172372438925, 0.09037477397124238, 0.14771377206798209, 0.09647004241537016, 0.1267749896267093, 0.10047187097466825, 0.08129530510949057, 0.08240785694516362, 0.08764918149154477, 0.11708421706289895, 0.11102784304785618, 0.10833914923279031, 0.08906993940775842, 0.07488300136573567, 0.08761801185934093, 0.06554497115258362, 0.09545009148640116, 0.9119717734455911, 0.9089025254399304, 0.943639691026856, 0.8140686158493959, 0.9158603632393613, 0.9256276676067133, 0.9416192595362406, 0.9613692948508705, 0.9160927375852016, 0.31662975998269893, 0.21489471015117378, 0.32764265162153405, 0.34697163724877655, 0.28055452050105556, 0.30856390966926817, 0.3546566224356057, 0.2954151350456514, 0.36228095858061393, 0.6491813418896208, 0.28494177805396215, 0.2194943063097341, 0.2123585861379732, 0.6141065873302378, 0.2603855327237822, 0.1361295026239916, 0.21734822318078084, 0.21975840282985792, 0.1770778699231067, 0.1563664974223662, 0.11961679242791812, 0.11222038996499761, 0.11009078186850607, 0.10462063831272339, 0.1604540272377002, 0.1597500242241986, 0.17245198272861484, 0.143496324702431, 0.09546079189196788, 0.15043745080458304, 0.12497019857019931, 0.13953225021123794, 0.11856993970409546, 0.17296695810822005, 0.14442971761870882, 0.11997541557805047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011734816578798601, 9.999999999998899e-05, 0.02743174947470739, 0.00023013462392851292, 9.999999999998899e-05, 9.999999999998899e-05, 0.08027513375802808, 0.18772930614612726, 0.07265881379531436, 0.17079678024901968, 0.04161327309519092, 0.026033768108198463, 0.07599482856708328, 0.08320940177643898, 0.08622045359603103, 0.03309401619211183, 0.15235282147987927, 0.06560004314472168, 0.12035598957203997, 0.09793700273350403, 0.05675941281090602, 0.18072652558917857, 0.10329424867124204, 0.05185833264763828, 0.08855438997819365, 0.06542892616704865, 0.07377592548079015, 0.03332618578459512, 0.1247943344937843, 0.07196614653352185, 0.09440001974313039, 0.11761947728984579, 0.0674048351796368, 0.4558233640461298, 0.4332141975889122, 0.451670235085746, 0.417610482925048, 0.4508615919742116, 0.42044332107503835, 0.47201246778976025, 0.46545715406010235, 0.4821891051159991, 0.11889146838700271, 0.0891832486369667, 0.10722366503490888, 0.10223816041444256, 0.10916730547778075, 0.1029410062316336, 0.08278954815168438, 0.0779689744037978, 0.07557004192032069, 0.17048872027967432, 0.20488246752731554, 0.25500171883849565, 0.19406476142753848, 0.23596006418796878, 0.1404366715571036, 0.21984022853758212, 0.14519080697835818, 0.15185090427767822, 0.21273464872856362, 0.24106310752427662, 0.3266250558984395, 0.21661604667611611, 0.26014972082609344, 0.3347709158147544, 0.2395252287253966, 0.35674998163042415, 0.3024129079713368, 0.19109722870997226, 0.21438393243295628, 0.2525683015666328, 0.19557898260268436, 0.2506365620778732, 0.1647045360836753, 0.21452535207394963, 0.22670552777571185, 0.1800728305454844, 0.1894783510342165, 0.20820398495717518, 0.18070834007709113, 0.18061746748132768, 0.17893727004138216, 0.193990092990453, 0.171483583399905, 0.21768582322890295, 0.19159956125693223, 0.1704361813254085, 0.1596007244355998, 0.17736872536110915, 0.17652991319048983, 0.18016580958557793, 0.20093480651360596, 0.1886913343120571, 0.19832109425403965, 0.1641368536007174, 0.14579314972272017, 0.7117465987749445, 0.1749001858370346, 0.17065125090095334, 0.19263877781339145, 0.19371336384272186, 0.7167238254070021, 0.16608278536472332, 0.16937964598832822, 0.43860336765375263, 0.4219009335474896, 0.1901908244651478, 0.5706164355667791, 0.16099550208864055, 0.15100792923592743, 0.15085856545087373, 0.14868003196495794, 0.10250885465454207, 0.18272598089754577, 0.16979254644760766, 0.17029709407101434, 0.18703349515010648, 0.16961462739122313, 0.17424134701097482, 0.1888229074581813, 0.16754629397667453, 0.18030644987711875, 0.0753721753329335, 0.06641439570027485, 0.08093838204990678, 0.06065205296061993, 0.0717856607181575, 0.07842229446904969, 0.08561776874774296, 0.07444232616217339, 0.07956226878222228]}, "mutation_prompt": null}
{"id": "16db1466-9ad5-443a-a381-d50e7355f84a", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99, adapt_factor=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n        self.adapt_factor = adapt_factor\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Levy flight mutation\n                levy = np.random.standard_cauchy(self.dim)\n                mutant_levy = pop[i] + F * levy\n                mutant_levy = np.clip(mutant_levy, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            if np.random.rand() < self.adapt_factor:\n                self.F = np.clip(self.F + np.random.normal(0, 0.1), 0.1, 0.9)\n                self.CR = np.clip(self.CR + np.random.normal(0, 0.1), 0.1, 0.9)\n                self.w = np.clip(self.w + np.random.normal(0, 0.1), 0.1, 0.9)\n                self.c1 = np.clip(self.c1 + np.random.normal(0, 0.1), 0.1, 0.9)\n                self.c2 = np.clip(self.c2 + np.random.normal(0, 0.1), 0.1, 0.9)\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer", "description": "Improving convergence by dynamically adapting mutation and update mechanisms based on individual performance.", "configspace": "", "generation": 50, "fitness": 0.21930226948055898, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.19.", "error": "", "parent_id": "e8aa5126-723d-4b16-9ccf-9062e1296150", "metadata": {"aucs": [0.4603889192450743, 0.7030105956351539, 0.4493487194488014, 0.4500652671613615, 0.6775428852498896, 0.39404579569793197, 0.4701848812410553, 0.6994269082842788, 0.41760496064034536, 0.15946316296146346, 0.3804886292355182, 0.08953654455668514, 0.1358765994995067, 0.05263212277384843, 0.08656558372351497, 0.10725623455315525, 0.40381351319878755, 0.06465067752725118, 0.07027301911832529, 0.11045678961661631, 0.08028276698209724, 0.08537086230768942, 0.1264693292592981, 0.08019538045657826, 0.07638615872758892, 0.11058533779749635, 0.09080841423683195, 0.06579945467670245, 0.09607945418513286, 0.06436187561887818, 0.06520722986493088, 0.049317949679619555, 0.06833651170791621, 0.0623206691829844, 0.08966691162447948, 0.06591366501036477, 0.9125928862993564, 0.838022382377243, 0.8794389928328022, 0.8656462341304452, 0.37792695246577024, 0.7394536490278809, 0.928800484032314, 0.945573498513671, 0.8810506207769959, 0.20187710930993685, 0.4419635853128909, 0.22132853793736462, 0.19907358776740225, 0.39202760372526324, 0.18858280742221734, 0.22967700326202045, 0.39823018164602586, 0.1870702578782386, 0.48810098548126113, 0.16520518604690082, 0.2319385229410046, 0.4133296563263118, 0.2598810431985942, 0.2869901443381272, 0.44043653687924045, 0.22419320343560045, 0.4251993285897261, 0.124051363133317, 0.11617672310833405, 0.13460889751203287, 0.16304345474077708, 0.1261460809541053, 0.1097334331382801, 0.1211671066046276, 0.15042619307337446, 0.13442398800999034, 0.18915460511730942, 0.13491109773707943, 0.19735196716630377, 0.11653820362559075, 0.14546208889924417, 0.14258470678558277, 0.17728021326737198, 0.11834635540736294, 0.20104972077543115, 0.06598238530343736, 9.999999999998899e-05, 9.999999999998899e-05, 0.01860843263206713, 0.10297490402078913, 0.005862080984390561, 0.027425735142494134, 9.999999999998899e-05, 9.999999999998899e-05, 0.1585037702018509, 0.15016119124133598, 0.15592600969190895, 0.14867009867646452, 0.054862106597466154, 0.07487809799921619, 0.10067585102819665, 0.08725020588844312, 0.12235697072974472, 0.012292417571867387, 0.15740460609093265, 0.011955704623621055, 0.02861160629805004, 0.07510374051118374, 0.0027465433756697077, 0.03847306883053314, 0.07554686806386213, 0.0020988052001194024, 0.10349854113327206, 0.15569528909958041, 0.10528805146041087, 0.08216014863654109, 0.17588753679010682, 0.11913464908667737, 0.10567231781835129, 0.25442975549652924, 0.12511116481398588, 0.39810191106868387, 0.47348252247214706, 0.3981496575494785, 0.39306016035355396, 0.465604729181781, 0.37849736364024356, 0.4150705814831114, 0.5031282478191919, 0.38227475672406785, 0.08054575081466442, 0.12680568005766835, 0.06813550199646501, 0.11184720986414831, 0.13247184367423526, 0.07191353947818735, 0.0811425929822337, 0.08866103283864812, 0.0801047476978789, 0.16418971804798443, 0.15197954576416817, 0.14050624962148794, 0.14164188535972722, 0.17761775273653657, 0.11796183604272048, 0.11333753137180302, 0.1356216702985723, 0.12739739863802135, 0.2434837049624199, 0.39759178774566006, 0.2566387151516939, 0.2803807712031996, 0.3883494566011547, 0.2729106883269222, 0.24627743274985325, 0.3083301027095555, 0.23842725084738237, 0.13666925706145794, 0.2563285451714604, 0.20103331868523366, 0.1826709234843663, 0.22094478866570066, 0.14546763350903147, 0.19493419588700267, 0.22396348803400967, 0.18143960052720165, 0.17526784547732877, 0.19120414871743308, 0.17548217652702447, 0.19282445855065977, 0.2008917002030085, 0.1649377570376671, 0.1782143906800986, 0.20391791172067197, 0.19588001858989035, 0.1858350180255055, 0.20183846566737929, 0.17545994872892734, 0.1707153629047261, 0.18234041678651824, 0.18023075797933963, 0.16219149544445077, 0.2027099747982627, 0.16796458826531657, 0.5783592413239098, 0.1832107548516274, 0.18271151662865437, 0.4658595125086247, 0.19474329835030468, 0.16774716168164372, 0.14644186267172865, 0.16750168538163035, 0.20256370342038732, 0.45627846748212963, 0.7530940878922909, 0.07219273080870503, 0.1899799657702269, 0.7495549786429497, 0.44317833088877623, 0.32263082146385624, 0.15348087961314416, 0.16201160208263043, 0.18821674028510804, 0.17029943320209262, 0.1672595239023944, 0.17199833709523193, 0.17693586698684904, 0.16357086616913652, 0.2014999132858346, 0.16859599553708426, 0.17239838704963217, 0.07549192880399747, 0.07167194059977444, 0.058317317953066605, 0.07379198979064827, 0.0881737625930229, 0.06920215249414063, 0.08530721035075839, 0.06994712293666272, 0.07062198556018795]}, "mutation_prompt": null}
{"id": "d400f532-695f-4c99-b32a-f894cdc4fdde", "solution": "import numpy as np\n\nclass Enhanced_Adaptive_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Levy flight mutation\n                levy = np.random.standard_cauchy(self.dim)\n                mutant_levy = pop[i] + F * levy\n                mutant_levy = np.clip(mutant_levy, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            if np.random.rand() < self.adapt_rate:\n                self.F *= np.random.uniform(0.8, 1.2)\n                self.CR *= np.random.uniform(0.8, 1.2)\n                \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_Adaptive_DE_PSO_Optimizer", "description": "Improving the algorithm by introducing a dynamic adaptation of mutation and crossover rates to enhance exploration and exploitation capabilities.", "configspace": "", "generation": 51, "fitness": 0.21947697741813965, "feedback": "The algorithm Enhanced_Adaptive_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "e8aa5126-723d-4b16-9ccf-9062e1296150", "metadata": {"aucs": [0.6384863626383056, 0.6227494199787837, 0.6267050860710047, 0.6255118097380576, 0.6084163558899, 0.6287929527297724, 0.6178358271637359, 0.6268899410078226, 0.6358065925616052, 0.28671091897463274, 0.044133494720078104, 0.32662564711948994, 0.1769443044979978, 0.05109430497766354, 0.1720706766658333, 0.094777548397733, 0.13641844352161547, 0.07993609480838981, 0.11485941757770635, 0.0882193952730097, 0.09783501215335, 0.1258244167226651, 0.09883710808666979, 0.0626127741447583, 0.10992303028355144, 0.10954636685006336, 0.10910238993103283, 0.07752766958262203, 0.08835849362073933, 0.08904499341793448, 0.11145759525867727, 0.1104878320334779, 0.07699003961808526, 0.09656924941961786, 0.08831819932827734, 0.06518347475454245, 0.9106514229554535, 0.8840788869298434, 0.9350221573107154, 0.9185480732704893, 0.9175945374540196, 0.727735302149987, 0.879935978299881, 0.9604575885130648, 0.9421390309341117, 0.19962606955671314, 0.31530652553969063, 0.22265088745171902, 0.25778511771007073, 0.31524034935854095, 0.32726762639093543, 0.2733049599551648, 0.3215852704820813, 0.28906814071388987, 0.3330382527164204, 0.15830520439722984, 0.6579748153097253, 0.20425026647538114, 0.2483634479324739, 0.1961061813363585, 0.1462775685284936, 0.32596604512551086, 0.33185138239334944, 0.11143735805749255, 0.12393178780956149, 0.14576657831941153, 0.11264468254859328, 0.10756662942810069, 0.1056641429752957, 0.13172420530808648, 0.30218017272342, 0.2211532139954897, 0.12618677855546845, 0.11793542219818409, 0.12848757071502637, 0.17543569588787777, 0.10797337803061435, 0.226287114376156, 0.14175339490877037, 0.21684141567781368, 0.11832427765722009, 0.054992292984665236, 9.999999999998899e-05, 9.999999999998899e-05, 0.015625052541102247, 9.999999999998899e-05, 0.02740027918110577, 0.005108170425176306, 0.01266347047412908, 9.999999999998899e-05, 0.08897896449459053, 0.03140431731561688, 0.07247747204431765, 0.034146074017213146, 0.07586511669649665, 0.008712015184367927, 0.08134943876139256, 0.0929102236627557, 0.08091759327309833, 0.11825033704998966, 0.03991746132914431, 0.030405424793292335, 0.0632030522772733, 0.04811569547290362, 0.043934930788942284, 0.08168040400576648, 0.08077868604160343, 0.06765943760693005, 0.11096340245060798, 0.09925011326913935, 0.04585617643375006, 0.2103860028453287, 0.059911091704035746, 0.11556145810722862, 0.08706777888717898, 0.16901480817049397, 0.07904220915164695, 0.42723165898874726, 0.45383337649106426, 0.4632281269343115, 0.46797799390421535, 0.4110451209343198, 0.40932278434523583, 0.46006414664621154, 0.39624278082331743, 0.47900057972164756, 0.11484899320645914, 0.08618915676490191, 0.0890049787936239, 0.10964986696789569, 0.11660038995618083, 0.14856130794521727, 0.10340183248604795, 0.11614891615089729, 0.12118320737743449, 0.16026053452424383, 0.13564128447862345, 0.16063288418169508, 0.16522246279678787, 0.17768406275147586, 0.16130408811763008, 0.20440845505189775, 0.15264084732451333, 0.21070411693932822, 0.34253727611952345, 0.2686314778361367, 0.3029592425015528, 0.24232671103405345, 0.2614342563364913, 0.30849984092649974, 0.37106313883820086, 0.3311463921653822, 0.2983125192675823, 0.21742166998812662, 0.21057013421879933, 0.2254706789717541, 0.17957272776662792, 0.18816383067301257, 0.25329872738423664, 0.21489806843441916, 0.2132075827864509, 0.25211471418275755, 0.18308355148334532, 0.16779620264951844, 0.1775322920520701, 0.1697176595515375, 0.18322949693788237, 0.17996391823114277, 0.18784781886337765, 0.19280990022844957, 0.17553664417501402, 0.1788316403684399, 0.18238340274012632, 0.2008334557940581, 0.20171905993139538, 0.1791445908576016, 0.175088387977678, 0.21556302092413948, 0.20936412854925968, 0.1869877793462048, 0.11677837954594195, 0.15994994299561927, 0.14706971360409482, 0.1885642985300937, 0.1924660490397787, 0.19379306763425563, 0.09871545228316247, 0.1598660219209349, 0.1657082545894285, 0.49313075012577956, 0.2029131669986446, 0.32000657584689873, 0.18908953126099193, 0.16313194053102764, 0.518556053830988, 0.1031470273119407, 0.10165501855890358, 0.22245835653754875, 0.17815438771738767, 0.20565852871935542, 0.16934166379691562, 0.17458784595144827, 0.16746472087118658, 0.16512867256482455, 0.21012970594806502, 0.17253470507249602, 0.17115185490808038, 0.06839132508155221, 0.06422636428806561, 0.059137338266611716, 0.07354711536391301, 0.07845378556799587, 0.0774156117552004, 0.07289029114067558, 0.07164107810604603, 0.08309953203115406]}, "mutation_prompt": null}
{"id": "2823f6a4-3494-4ffd-8c9b-5148dc891be4", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Refined:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def calculate_crowding(pop):\n            crowding_distances = np.zeros(len(pop))\n            for i in range(self.dim):\n                sorted_indices = np.argsort(pop[:, i])\n                crowding_distances[sorted_indices[0]] = crowding_distances[sorted_indices[-1]] = np.inf\n                for j in range(1, len(pop) - 1):\n                    crowding_distances[sorted_indices[j]] += pop[sorted_indices[j + 1], i] - pop[sorted_indices[j - 1], i]\n            return crowding_distances\n\n        def mutate(pbest, gbest, pop, F, CR):\n            crowding_distances = calculate_crowding(pop)\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n\n                # Levy flight mutation\n                levy = np.random.standard_cauchy(self.dim)\n                mutant_levy = pop[i] + F * levy\n                mutant_levy = np.clip(mutant_levy, -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n\n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n\n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n\n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n\n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Refined", "description": "Improving the diversity maintenance by adding a crowding distance calculation to encourage solutions to spread out in the search space.", "configspace": "", "generation": 52, "fitness": 0.22940698383277858, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "e8aa5126-723d-4b16-9ccf-9062e1296150", "metadata": {"aucs": [0.6408305132141714, 0.6382143744508734, 0.6025075253171273, 0.6228504942702504, 0.5987744430745388, 0.6073743465193787, 0.6165461772072242, 0.6393505217714397, 0.6175505974894224, 0.34335562507534323, 0.3290835324817383, 0.08219892759736613, 0.1546946572220822, 0.052603074238664504, 0.2844225372615464, 0.2033831747586572, 0.08716735951076027, 0.29025303974787, 0.09431704414806519, 0.09416172372438925, 0.09037477397124238, 0.14771377206798209, 0.09647004241537016, 0.1267749896267093, 0.10047187097466825, 0.08129530510949057, 0.08240785694516362, 0.08764918149154477, 0.11708421706289895, 0.11102784304785618, 0.10833914923279031, 0.08906993940775842, 0.07488300136573567, 0.08761801185934093, 0.06554497115258362, 0.09545009148640116, 0.9119717734455911, 0.9089025254399304, 0.943639691026856, 0.8140686158493959, 0.9158603632393613, 0.9256276676067133, 0.9416192595362406, 0.9613692948508705, 0.9160927375852016, 0.31662975998269893, 0.21489471015117378, 0.32764265162153405, 0.34697163724877655, 0.28055452050105556, 0.30856390966926817, 0.3546566224356057, 0.2954151350456514, 0.36228095858061393, 0.6491813418896208, 0.28494177805396215, 0.2194943063097341, 0.2123585861379732, 0.6141065873302378, 0.2603855327237822, 0.1361295026239916, 0.21734822318078084, 0.21975840282985792, 0.1770778699231067, 0.1563664974223662, 0.11961679242791812, 0.11222038996499761, 0.11009078186850607, 0.10462063831272339, 0.1604540272377002, 0.1597500242241986, 0.17245198272861484, 0.143496324702431, 0.09546079189196788, 0.15043745080458304, 0.12497019857019931, 0.13953225021123794, 0.11856993970409546, 0.17296695810822005, 0.14442971761870882, 0.11997541557805047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011734816578798601, 9.999999999998899e-05, 0.02743174947470739, 0.00023013462392851292, 9.999999999998899e-05, 9.999999999998899e-05, 0.08027513375802808, 0.18772930614612726, 0.07265881379531436, 0.17079678024901968, 0.04161327309519092, 0.026033768108198463, 0.07599482856708328, 0.08320940177643898, 0.08622045359603103, 0.03309401619211183, 0.15235282147987927, 0.06560004314472168, 0.12035598957203997, 0.09793700273350403, 0.05675941281090602, 0.18072652558917857, 0.10329424867124204, 0.05185833264763828, 0.08855438997819365, 0.06542892616704865, 0.07377592548079015, 0.03332618578459512, 0.1247943344937843, 0.07196614653352185, 0.09440001974313039, 0.11761947728984579, 0.0674048351796368, 0.4558233640461298, 0.4332141975889122, 0.451670235085746, 0.417610482925048, 0.4508615919742116, 0.42044332107503835, 0.47201246778976025, 0.46545715406010235, 0.4821891051159991, 0.11889146838700271, 0.0891832486369667, 0.10722366503490888, 0.10223816041444256, 0.10916730547778075, 0.1029410062316336, 0.08278954815168438, 0.0779689744037978, 0.07557004192032069, 0.17048872027967432, 0.20488246752731554, 0.25500171883849565, 0.19406476142753848, 0.23596006418796878, 0.1404366715571036, 0.21984022853758212, 0.14519080697835818, 0.15185090427767822, 0.21273464872856362, 0.24106310752427662, 0.3266250558984395, 0.21661604667611611, 0.26014972082609344, 0.3347709158147544, 0.2395252287253966, 0.35674998163042415, 0.3024129079713368, 0.19109722870997226, 0.21438393243295628, 0.2525683015666328, 0.19557898260268436, 0.2506365620778732, 0.1647045360836753, 0.21452535207394963, 0.22670552777571185, 0.1800728305454844, 0.1894783510342165, 0.20820398495717518, 0.18070834007709113, 0.18061746748132768, 0.17893727004138216, 0.193990092990453, 0.171483583399905, 0.21768582322890295, 0.19159956125693223, 0.1704361813254085, 0.1596007244355998, 0.17736872536110915, 0.17652991319048983, 0.18016580958557793, 0.20093480651360596, 0.1886913343120571, 0.19832109425403965, 0.1641368536007174, 0.14579314972272017, 0.7117465987749445, 0.1749001858370346, 0.17065125090095334, 0.19263877781339145, 0.19371336384272186, 0.7167238254070021, 0.16608278536472332, 0.16937964598832822, 0.43860336765375263, 0.4219009335474896, 0.1901908244651478, 0.5706164355667791, 0.16099550208864055, 0.15100792923592743, 0.15085856545087373, 0.14868003196495794, 0.10250885465454207, 0.18272598089754577, 0.16979254644760766, 0.17029709407101434, 0.18703349515010648, 0.16961462739122313, 0.17424134701097482, 0.1888229074581813, 0.16754629397667453, 0.18030644987711875, 0.0753721753329335, 0.06641439570027485, 0.08093838204990678, 0.06065205296061993, 0.0717856607181575, 0.07842229446904969, 0.08561776874774296, 0.07444232616217339, 0.07956226878222228]}, "mutation_prompt": null}
{"id": "4533cbb1-2e70-47b4-8067-5a7218cae5c9", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Levy flight mutation\n                levy = np.random.standard_cauchy(self.dim)\n                mutant_levy = pop[i] + F * levy\n                mutant_levy = np.clip(mutant_levy, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = np.random.uniform(-5.0, 5.0, size=(self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer", "description": "Enhancing the exploration phase by incorporating a novel mutation mechanism based on Levy flights to promote searching diverse regions of the search space.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e8aa5126-723d-4b16-9ccf-9062e1296150", "metadata": {"aucs": [0.6408305132141714, 0.6382143744508734, 0.6025075253171273, 0.6228504942702504, 0.5987744430745388, 0.6073743465193787, 0.6165461772072242, 0.6393505217714397, 0.6175505974894224, 0.34335562507534323, 0.3290835324817383, 0.08219892759736613, 0.1546946572220822, 0.052603074238664504, 0.2844225372615464, 0.2033831747586572, 0.08716735951076027, 0.29025303974787, 0.09431704414806519, 0.09416172372438925, 0.09037477397124238, 0.14771377206798209, 0.09647004241537016, 0.1267749896267093, 0.10047187097466825, 0.08129530510949057, 0.08240785694516362, 0.08764918149154477, 0.11708421706289895, 0.11102784304785618, 0.10833914923279031, 0.08906993940775842, 0.07488300136573567, 0.08761801185934093, 0.06554497115258362, 0.09545009148640116, 0.9119717734455911, 0.9089025254399304, 0.943639691026856, 0.8140686158493959, 0.9158603632393613, 0.9256276676067133, 0.9416192595362406, 0.9613692948508705, 0.9160927375852016, 0.31662975998269893, 0.21489471015117378, 0.32764265162153405, 0.34697163724877655, 0.28055452050105556, 0.30856390966926817, 0.3546566224356057, 0.2954151350456514, 0.36228095858061393, 0.6491813418896208, 0.28494177805396215, 0.2194943063097341, 0.2123585861379732, 0.6141065873302378, 0.2603855327237822, 0.1361295026239916, 0.21734822318078084, 0.21975840282985792, 0.1770778699231067, 0.1563664974223662, 0.11961679242791812, 0.11222038996499761, 0.11009078186850607, 0.10462063831272339, 0.1604540272377002, 0.1597500242241986, 0.17245198272861484, 0.143496324702431, 0.09546079189196788, 0.15043745080458304, 0.12497019857019931, 0.13953225021123794, 0.11856993970409546, 0.17296695810822005, 0.14442971761870882, 0.11997541557805047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011734816578798601, 9.999999999998899e-05, 0.02743174947470739, 0.00023013462392851292, 9.999999999998899e-05, 9.999999999998899e-05, 0.08027513375802808, 0.18772930614612726, 0.07265881379531436, 0.17079678024901968, 0.04161327309519092, 0.026033768108198463, 0.07599482856708328, 0.08320940177643898, 0.08622045359603103, 0.03309401619211183, 0.15235282147987927, 0.06560004314472168, 0.12035598957203997, 0.09793700273350403, 0.05675941281090602, 0.18072652558917857, 0.10329424867124204, 0.05185833264763828, 0.08855438997819365, 0.06542892616704865, 0.07377592548079015, 0.03332618578459512, 0.1247943344937843, 0.07196614653352185, 0.09440001974313039, 0.11761947728984579, 0.0674048351796368, 0.4558233640461298, 0.4332141975889122, 0.451670235085746, 0.417610482925048, 0.4508615919742116, 0.42044332107503835, 0.47201246778976025, 0.46545715406010235, 0.4821891051159991, 0.11889146838700271, 0.0891832486369667, 0.10722366503490888, 0.10223816041444256, 0.10916730547778075, 0.1029410062316336, 0.08278954815168438, 0.0779689744037978, 0.07557004192032069, 0.17048872027967432, 0.20488246752731554, 0.25500171883849565, 0.19406476142753848, 0.23596006418796878, 0.1404366715571036, 0.21984022853758212, 0.14519080697835818, 0.15185090427767822, 0.21273464872856362, 0.24106310752427662, 0.3266250558984395, 0.21661604667611611, 0.26014972082609344, 0.3347709158147544, 0.2395252287253966, 0.35674998163042415, 0.3024129079713368, 0.19109722870997226, 0.21438393243295628, 0.2525683015666328, 0.19557898260268436, 0.2506365620778732, 0.1647045360836753, 0.21452535207394963, 0.22670552777571185, 0.1800728305454844, 0.1894783510342165, 0.20820398495717518, 0.18070834007709113, 0.18061746748132768, 0.17893727004138216, 0.193990092990453, 0.171483583399905, 0.21768582322890295, 0.19159956125693223, 0.1704361813254085, 0.1596007244355998, 0.17736872536110915, 0.17652991319048983, 0.18016580958557793, 0.20093480651360596, 0.1886913343120571, 0.19832109425403965, 0.1641368536007174, 0.14579314972272017, 0.7117465987749445, 0.1749001858370346, 0.17065125090095334, 0.19263877781339145, 0.19371336384272186, 0.7167238254070021, 0.16608278536472332, 0.16937964598832822, 0.43860336765375263, 0.4219009335474896, 0.1901908244651478, 0.5706164355667791, 0.16099550208864055, 0.15100792923592743, 0.15085856545087373, 0.14868003196495794, 0.10250885465454207, 0.18272598089754577, 0.16979254644760766, 0.17029709407101434, 0.18703349515010648, 0.16961462739122313, 0.17424134701097482, 0.1888229074581813, 0.16754629397667453, 0.18030644987711875, 0.0753721753329335, 0.06641439570027485, 0.08093838204990678, 0.06065205296061993, 0.0717856607181575, 0.07842229446904969, 0.08561776874774296, 0.07444232616217339, 0.07956226878222228]}, "mutation_prompt": null}
{"id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Chaotic map mutation\n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved", "description": "Improving the diversity and exploration capability by incorporating a chaotic map to enhance population initialization and mutation.", "configspace": "", "generation": 54, "fitness": 0.24298233284752316, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "e8aa5126-723d-4b16-9ccf-9062e1296150", "metadata": {"aucs": [0.5985905945981405, 0.6418528239427833, 0.6570889863489574, 0.6353921269474867, 0.6338449918771525, 0.6042417061176297, 0.6163728086519452, 0.575646372611454, 0.6464590804013055, 0.2232009576963434, 0.34397932449127433, 0.14420175404675206, 0.059806823707136525, 0.3082210710292538, 0.07344837567737306, 0.14408304230863667, 0.26936096546079646, 0.32922791630692705, 0.09619114933103334, 0.11596585884156829, 0.09946162895579713, 0.1037786134888724, 0.10857055778090285, 0.11277059764070052, 0.10507273837914233, 0.12194849081277792, 0.08711688823531605, 0.09173395431576481, 0.09492870114022534, 0.128280411142366, 0.10979032010573264, 0.07807082070344062, 0.09674000702860686, 0.11035476486537532, 0.07845389968075978, 0.12830682054568676, 0.9308524261822319, 0.9329473198789054, 0.8595397987773026, 0.9387275042401223, 0.9643825927576669, 0.9247713529494166, 0.9111981869655849, 0.9707917223320971, 0.7977798208508912, 0.2389365461465921, 0.31756920610218453, 0.38229528473536134, 0.32101015994509274, 0.35568838001649483, 0.22757218454099726, 0.23866581722622426, 0.33665671862741975, 0.3123005058576366, 0.6248564407239947, 0.34103012988596815, 0.33859527928949307, 0.24157999635742666, 0.6322283688191209, 0.335069677759928, 0.25989943116694547, 0.6639519454319931, 0.2374271224223562, 0.17924883055892538, 0.1500154215906292, 0.14638712818586896, 0.129570191340047, 0.10382024209285223, 0.1533687252746373, 0.10455141627464415, 0.13458357032178048, 0.12111122430063348, 0.1824721237186211, 0.1340776634011117, 0.12190726078103686, 0.09507741255803848, 0.12543625674509296, 0.12782125882869455, 0.16142857467638372, 0.11199116658566621, 0.11553898829569353, 0.027407056415422404, 0.008203505484840945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03318422347828509, 9.999999999998899e-05, 0.029269717227038416, 0.0396062241687658, 0.06377516339489009, 0.035397582296437746, 0.02558961656730485, 0.01947971271179172, 0.08063993157947225, 0.05093145931889176, 0.0986806069664442, 0.09279406763273257, 0.04686516063132928, 0.14069585501140014, 0.19283049032685307, 0.05834415910569024, 0.0702740576952321, 0.1345793069884874, 0.04413650041774053, 0.12150589661408051, 0.14822063018943465, 0.07396383478611879, 0.16693377537086473, 0.1503329536493746, 0.13758102992693766, 0.14553552139744375, 0.05116696708477253, 0.07735028612795014, 0.09562686187792513, 0.10253285420313207, 0.4083003456634795, 0.42655599155494406, 0.4342171386386007, 0.4325393898133556, 0.40588229323753144, 0.4599397181217444, 0.4845047372994069, 0.40677692430646717, 0.42611284815252215, 0.05993232797653314, 0.09977013582226768, 0.11121632037371743, 0.08308879893924148, 0.1195110614475472, 0.10837830293423745, 0.06668786887924738, 0.10105432906983947, 0.11606697652862008, 0.15407550159332206, 0.16554913086577527, 0.14278590933571467, 0.15348017719495222, 0.17631811151326315, 0.1713309271125767, 0.15075486896471813, 0.18772445163066398, 0.2287601534111503, 0.2754191704396808, 0.23328223906020973, 0.31072103768151993, 0.3018894052992438, 0.28274722359761273, 0.2673674505655156, 0.31351352880932415, 0.3064070492215085, 0.27853576062689567, 0.2933702678194928, 0.25166133533206414, 0.24863721085947033, 0.24207429628457877, 0.19147898154088572, 0.25599869590673985, 0.20371607575939665, 0.1812448021370584, 0.1730872958475428, 0.2117345911961237, 0.19533986473056697, 0.17667988154800895, 0.1702932235764223, 0.17857069421007232, 0.178893039393345, 0.17342025310555842, 0.19514458740706286, 0.20604436106645085, 0.18397428347751132, 0.19971088527317948, 0.20295113084663896, 0.1880078398531818, 0.19892657512586498, 0.17828210285968527, 0.19104411364134488, 0.1720987180848228, 0.18859066300600258, 0.6904284054291352, 0.1621636858976916, 0.16689677733684016, 0.7035663260180858, 0.6746563891328488, 0.16540110178050904, 0.545044330957604, 0.7468811816546959, 0.6957385647789247, 0.5523555953771957, 0.12293178214636025, 0.35176553038784175, 0.16329952672714176, 0.16187780957885012, 0.08995375257926685, 0.1242442934167649, 0.20589165791364683, 0.5901112081831372, 0.16475100012235766, 0.18024139026858954, 0.17817043005663713, 0.18386313508343033, 0.1720300354417693, 0.16935918313640708, 0.17877804597335967, 0.17810799174420977, 0.18361246234787276, 0.07974805747655356, 0.07880115241433105, 0.11929924228830346, 0.07436439395127614, 0.0754885503171765, 0.06874730089126058, 0.08464045586697411, 0.07931779789379145, 0.06825964553982888]}, "mutation_prompt": null}
{"id": "3083a432-9ed0-4543-b3e0-434582b2735b", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Hybrid:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Hybrid mutation strategy combining DE/rand/1 and DE/current-to-best/1 mutations\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_best, mutant_rand)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Hybrid", "description": "Incorporating a hybrid mutation strategy combining DE/rand/1 and DE/current-to-best/1 mutations for enhancing population diversity and exploitation.", "configspace": "", "generation": 55, "fitness": 0.22640944401120444, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer_Hybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.6236482746481402, 0.6920171325295064, 0.647273949000031, 0.6558832822506062, 0.638301310261022, 0.6669335019922951, 0.651475343261333, 0.6200205382560233, 0.6537044847239778, 0.036072492495223596, 0.13237692091269926, 0.06465671862725664, 0.3307846849002912, 0.015944125511046736, 0.06088857080492349, 0.019155564652544643, 0.3159644130251048, 0.06216753105607864, 0.15369331959353127, 0.14989095624363413, 0.10205616058019407, 0.1065032553701627, 0.11277298121653434, 0.10199023431580112, 0.09365751123486732, 0.09636459911778916, 0.07726157505956799, 0.10537377439439988, 0.07818846311443428, 0.09532768498924815, 0.07244830106997813, 0.08784875049582219, 0.0943135275657776, 0.0570700768832203, 0.10256774333029861, 0.11113391515436377, 0.9353507210778912, 0.9265751366306773, 0.9275562154273013, 0.9129487070967713, 0.9308737529711602, 0.8720064020568868, 0.8967506421654122, 0.9670362521768702, 0.8730473191626589, 0.34945125852112147, 0.3088794738456382, 0.32108056717067035, 0.21647939483591871, 0.39306266568953085, 0.2893839216643469, 0.2883899895664048, 0.31561433543869044, 0.12134613267559147, 0.16113909135825344, 0.3262427764286592, 0.6031192696387677, 0.32100652406428265, 0.21840839693244063, 0.7102019969593201, 0.23255829178122078, 0.14577419688237547, 0.15606710321143324, 0.09477943106370368, 0.11423931224347961, 0.15191767941925138, 0.1280139520804192, 0.13398462330430672, 0.12357854041618976, 0.1371281500914907, 0.12945727879802926, 0.11329043761159319, 0.1775424017456707, 0.15066026882290384, 0.16000050772648977, 0.23242956228109346, 0.12315125889713441, 0.10143043837642085, 0.12188854672244342, 0.1531879439494871, 0.11912366337704683, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012509609334476757, 0.04415702345060568, 0.0674260914992767, 0.02903861095401572, 0.03764814258718341, 0.008835316636585211, 0.06242129336645397, 0.02168885603953008, 0.034678321673821344, 0.035452307769165636, 0.08668233874136999, 0.05624814172301851, 0.09652567864737593, 0.03437994828616142, 0.0349865922748952, 0.1267333063459557, 0.18444444434385432, 0.12087099774922949, 0.049714231959522626, 0.05225498761620495, 0.04904493149814426, 0.13447034929278812, 0.10119909319043785, 0.13220008136395445, 0.08213971779640084, 0.03920718890835162, 0.08098661778707428, 0.10331968523314794, 0.0729950900708396, 0.1344715809007554, 0.41395058473492286, 0.4814614424718259, 0.4319378823864165, 0.440931663850046, 0.46522588567346246, 0.4685394315600342, 0.4217210251694059, 0.4802441127864012, 0.40580898902171425, 0.07538070652425977, 0.09499985636219377, 0.07965620223147996, 0.12435581918722216, 0.09822746207274702, 0.04478123959928748, 0.12117304225919157, 0.09733171897156134, 0.06336323009348255, 0.23059771863488343, 0.183973920776497, 0.21056659026911584, 0.14789992913787442, 0.2005854458918348, 0.2263288149578685, 0.209109950657678, 0.18328886263417687, 0.43707677486081586, 0.3363475100058686, 0.3246791178275896, 0.31685144176005564, 0.35203163753875555, 0.23804751072077712, 0.27270928785574255, 0.2579855241270341, 0.23140117861254872, 0.2397066320448027, 0.20115857310438157, 0.2135144589098239, 0.271773427613483, 0.18319998003371174, 0.22729808784708316, 0.18687451724414805, 0.17157404940058774, 0.2664758575668851, 0.19171557504299597, 0.198621807014578, 0.1515050324982461, 0.19291865260336727, 0.19478519875696987, 0.20024009772657292, 0.169701565366558, 0.20387829217315656, 0.1864796114848265, 0.183266848405774, 0.18506975821313776, 0.19166619553522668, 0.19389490206788884, 0.18938330568649397, 0.18829711533688764, 0.180460170827906, 0.19091273689073873, 0.1835971183792684, 0.18429323199964853, 0.10997944605142695, 0.12720205098686166, 0.17665749893633997, 0.1606300649079898, 0.14737871720774254, 0.16449656233698062, 0.6821929462903127, 0.735718827590919, 0.17151495301651143, 0.09133959845616613, 0.08896028278091017, 0.4906976856835201, 0.1652443679149801, 0.16533899030110277, 0.14758312413957797, 0.6529053841534951, 0.2086105340897969, 0.5072650954066222, 0.16986075144791646, 0.15648487540591172, 0.17412189401562594, 0.1948980743254337, 0.17658993494124786, 0.16844542398838835, 0.16501398572413073, 0.17495991347579942, 0.17493708790762486, 0.08923775268141965, 0.06632948583166487, 0.08001149927310902, 0.07375916770519142, 0.07769324435239977, 0.0743524359583726, 0.07048215809858316, 0.08288371188726218, 0.0618699385141559]}, "mutation_prompt": null}
{"id": "dd69bf0b-ec05-4b8c-8dde-41146146a0ee", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Adaptive mutation strategy\n                F_i = F + np.random.normal(0, 0.1)  # Adaptive F\n                CR_i = CR + np.random.normal(0, 0.1)  # Adaptive CR\n                \n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F_i * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F_i * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F_i * (gbest - pop[i]) + F_i * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR_i, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Adaptive_DE_PSO_Optimizer", "description": "Enhancing the mutation strategy by introducing a novel adaptive mechanism to dynamically adjust the mutation parameters based on the function landscape.", "configspace": "", "generation": 56, "fitness": 0.22498611333206178, "feedback": "The algorithm Adaptive_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.6375603825784373, 0.6227088792610946, 0.6147505706874341, 0.6070802902725316, 0.632821214385231, 0.6279115132513724, 0.6381569897929448, 0.6112792882736853, 0.6210835768304155, 0.04775882545964216, 0.3404575914702127, 0.08275144016837588, 0.10543459246884668, 0.3606378832613175, 0.06992718444991786, 0.04558161449842668, 0.11379735675108626, 0.10160295155065469, 0.0837041724163069, 0.0977812677017662, 0.1004702148649338, 0.0940732830546871, 0.101795160394619, 0.08200052709772176, 0.09846892974699017, 0.11068400161859804, 0.06786120242151972, 0.1156710657592197, 0.11116992524983982, 0.09026703779711187, 0.0839630903701516, 0.11481357443837115, 0.09667654610978516, 0.09031410626894942, 0.08000550903016901, 0.10249931328775619, 0.9366668455098904, 0.9133603354022023, 0.9472535577350191, 0.9473022889413413, 0.9433132779162011, 0.8753047738055807, 0.9208855764946258, 0.9268427283138307, 0.8961775268265345, 0.2685093912304568, 0.306967521673959, 0.28759710159132323, 0.2271504030087621, 0.2850834232707785, 0.3587625734116986, 0.3055037629220726, 0.33828301919886583, 0.2636504189138703, 0.31648005958926995, 0.6142745377091745, 0.6187743357694744, 0.19451024362821567, 0.7011408695397703, 0.26534171341054924, 0.229269524137088, 0.2150395138332678, 0.15398008215415648, 0.12977553135287967, 0.11913839587450725, 0.09752697398072885, 0.12029495362331877, 0.12268618609560566, 0.10229148872098726, 0.12015910984390343, 0.07923366505936902, 0.10997175151529959, 0.1405312994441814, 0.1652322562633708, 0.11489870209893438, 0.14519606699522558, 0.12218841474311415, 0.09611476223723037, 0.11408706089090792, 0.17293394718848298, 0.0935649932898781, 9.999999999998899e-05, 0.006457963081928031, 0.05897939919160344, 9.999999999998899e-05, 0.07505583896775647, 0.007237963836723482, 0.007335821040735935, 0.00012002760581819594, 0.001017628146682381, 0.026780011630745837, 0.06519265248372996, 0.06561039696082238, 0.14207231724202252, 0.10011546239675484, 0.019850055319014293, 0.1509769545188837, 0.06007821200730845, 0.06799155774954946, 0.043304152886509684, 0.1365283884416887, 0.1060397369611985, 0.050732214066411485, 0.0546717102604789, 0.1043144822470633, 0.050458251669369014, 0.05070260746767852, 0.04212039065787776, 0.06561311799292724, 0.10565493363882672, 0.061214269936982424, 0.08116851317326523, 0.1379767701169703, 0.06384651200104341, 0.11106482397614692, 0.2217773690446465, 0.06431950961152977, 0.4052680544155852, 0.42889695406998285, 0.39878469520855686, 0.47652878381322195, 0.45907161577083044, 0.4742981028758747, 0.46443676666503886, 0.41330650815407466, 0.4624498845164273, 0.09138271914309948, 0.09793269303916041, 0.08659722445789864, 0.1119505614782309, 0.08197341196922536, 0.12449743570597771, 0.04577136216737421, 0.10512441155652652, 0.06992716903122309, 0.1637711076917081, 0.15618254241965346, 0.1796759742612397, 0.19592277221951593, 0.15310712588893916, 0.12403999559004919, 0.14717788607712534, 0.1612972594356925, 0.1610364861466156, 0.3028138844381857, 0.2966007108372294, 0.27932830711424017, 0.2480316748789464, 0.16714179142173125, 0.2959629270587436, 0.2773159815902029, 0.3139887714568519, 0.2634923351810283, 0.2144979020141281, 0.21365737717048783, 0.24074150835635133, 0.263832449063782, 0.15762379984640607, 0.24640479856417297, 0.2683923112868819, 0.17684727620966678, 0.15228508077318514, 0.19373374401611232, 0.16076117238894583, 0.19255993653492354, 0.17887722085352475, 0.19232403786499186, 0.19017858434104928, 0.1852233591434973, 0.17717416568662592, 0.19206953346635414, 0.19299329073303884, 0.19970176488611724, 0.17674479880812177, 0.18373454153214375, 0.18492093730606407, 0.16350845467581732, 0.1777218028018861, 0.17846923557512506, 0.17370886728037038, 0.1836024164731227, 0.18883442992503596, 0.12248583685114467, 0.14434708924895878, 0.15823608206391127, 0.16349670797170657, 0.1385663809415537, 0.6672032757354426, 0.7338977602958292, 0.25066124645564847, 0.40255732854771353, 0.627634221488899, 0.5693856063691233, 0.16404259325619786, 0.16458327287405572, 0.13776405822747906, 0.2097523896035971, 0.06349378708383213, 0.16880155324662316, 0.1644688557129661, 0.1873414912741851, 0.1568432640550782, 0.16465163761617985, 0.16600272802314087, 0.16763538846479664, 0.17977908635890905, 0.17254657386120076, 0.07960085908430015, 0.06207935782736862, 0.07549391427395491, 0.07148728260459392, 0.07565984549925453, 0.06701654403134816, 0.06326676638934625, 0.06825675131170683, 0.06839820322464274]}, "mutation_prompt": null}
{"id": "a9e4cf8a-eac9-4a8e-ba72-6d92025f37ba", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Chaotic map mutation\n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved", "description": "Improving the diversity and exploration capability by incorporating a chaotic map to enhance population initialization and mutation.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.5985905945981405, 0.6418528239427833, 0.6570889863489574, 0.6353921269474867, 0.6338449918771525, 0.6042417061176297, 0.6163728086519452, 0.575646372611454, 0.6464590804013055, 0.2232009576963434, 0.34397932449127433, 0.14420175404675206, 0.059806823707136525, 0.3082210710292538, 0.07344837567737306, 0.14408304230863667, 0.26936096546079646, 0.32922791630692705, 0.09619114933103334, 0.11596585884156829, 0.09946162895579713, 0.1037786134888724, 0.10857055778090285, 0.11277059764070052, 0.10507273837914233, 0.12194849081277792, 0.08711688823531605, 0.09173395431576481, 0.09492870114022534, 0.128280411142366, 0.10979032010573264, 0.07807082070344062, 0.09674000702860686, 0.11035476486537532, 0.07845389968075978, 0.12830682054568676, 0.9308524261822319, 0.9329473198789054, 0.8595397987773026, 0.9387275042401223, 0.9643825927576669, 0.9247713529494166, 0.9111981869655849, 0.9707917223320971, 0.7977798208508912, 0.2389365461465921, 0.31756920610218453, 0.38229528473536134, 0.32101015994509274, 0.35568838001649483, 0.22757218454099726, 0.23866581722622426, 0.33665671862741975, 0.3123005058576366, 0.6248564407239947, 0.34103012988596815, 0.33859527928949307, 0.24157999635742666, 0.6322283688191209, 0.335069677759928, 0.25989943116694547, 0.6639519454319931, 0.2374271224223562, 0.17924883055892538, 0.1500154215906292, 0.14638712818586896, 0.129570191340047, 0.10382024209285223, 0.1533687252746373, 0.10455141627464415, 0.13458357032178048, 0.12111122430063348, 0.1824721237186211, 0.1340776634011117, 0.12190726078103686, 0.09507741255803848, 0.12543625674509296, 0.12782125882869455, 0.16142857467638372, 0.11199116658566621, 0.11553898829569353, 0.027407056415422404, 0.008203505484840945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03318422347828509, 9.999999999998899e-05, 0.029269717227038416, 0.0396062241687658, 0.06377516339489009, 0.035397582296437746, 0.02558961656730485, 0.01947971271179172, 0.08063993157947225, 0.05093145931889176, 0.0986806069664442, 0.09279406763273257, 0.04686516063132928, 0.14069585501140014, 0.19283049032685307, 0.05834415910569024, 0.0702740576952321, 0.1345793069884874, 0.04413650041774053, 0.12150589661408051, 0.14822063018943465, 0.07396383478611879, 0.16693377537086473, 0.1503329536493746, 0.13758102992693766, 0.14553552139744375, 0.05116696708477253, 0.07735028612795014, 0.09562686187792513, 0.10253285420313207, 0.4083003456634795, 0.42655599155494406, 0.4342171386386007, 0.4325393898133556, 0.40588229323753144, 0.4599397181217444, 0.4845047372994069, 0.40677692430646717, 0.42611284815252215, 0.05993232797653314, 0.09977013582226768, 0.11121632037371743, 0.08308879893924148, 0.1195110614475472, 0.10837830293423745, 0.06668786887924738, 0.10105432906983947, 0.11606697652862008, 0.15407550159332206, 0.16554913086577527, 0.14278590933571467, 0.15348017719495222, 0.17631811151326315, 0.1713309271125767, 0.15075486896471813, 0.18772445163066398, 0.2287601534111503, 0.2754191704396808, 0.23328223906020973, 0.31072103768151993, 0.3018894052992438, 0.28274722359761273, 0.2673674505655156, 0.31351352880932415, 0.3064070492215085, 0.27853576062689567, 0.2933702678194928, 0.25166133533206414, 0.24863721085947033, 0.24207429628457877, 0.19147898154088572, 0.25599869590673985, 0.20371607575939665, 0.1812448021370584, 0.1730872958475428, 0.2117345911961237, 0.19533986473056697, 0.17667988154800895, 0.1702932235764223, 0.17857069421007232, 0.178893039393345, 0.17342025310555842, 0.19514458740706286, 0.20604436106645085, 0.18397428347751132, 0.19971088527317948, 0.20295113084663896, 0.1880078398531818, 0.19892657512586498, 0.17828210285968527, 0.19104411364134488, 0.1720987180848228, 0.18859066300600258, 0.6904284054291352, 0.1621636858976916, 0.16689677733684016, 0.7035663260180858, 0.6746563891328488, 0.16540110178050904, 0.545044330957604, 0.7468811816546959, 0.6957385647789247, 0.5523555953771957, 0.12293178214636025, 0.35176553038784175, 0.16329952672714176, 0.16187780957885012, 0.08995375257926685, 0.1242442934167649, 0.20589165791364683, 0.5901112081831372, 0.16475100012235766, 0.18024139026858954, 0.17817043005663713, 0.18386313508343033, 0.1720300354417693, 0.16935918313640708, 0.17877804597335967, 0.17810799174420977, 0.18361246234787276, 0.07974805747655356, 0.07880115241433105, 0.11929924228830346, 0.07436439395127614, 0.0754885503171765, 0.06874730089126058, 0.08464045586697411, 0.07931779789379145, 0.06825964553982888]}, "mutation_prompt": null}
{"id": "df3abfee-a47e-488d-a9b6-cb404081a285", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Chaotic map mutation\n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved", "description": "Improving the diversity and exploration capability by incorporating a chaotic map to enhance population initialization and mutation.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.5985905945981405, 0.6418528239427833, 0.6570889863489574, 0.6353921269474867, 0.6338449918771525, 0.6042417061176297, 0.6163728086519452, 0.575646372611454, 0.6464590804013055, 0.2232009576963434, 0.34397932449127433, 0.14420175404675206, 0.059806823707136525, 0.3082210710292538, 0.07344837567737306, 0.14408304230863667, 0.26936096546079646, 0.32922791630692705, 0.09619114933103334, 0.11596585884156829, 0.09946162895579713, 0.1037786134888724, 0.10857055778090285, 0.11277059764070052, 0.10507273837914233, 0.12194849081277792, 0.08711688823531605, 0.09173395431576481, 0.09492870114022534, 0.128280411142366, 0.10979032010573264, 0.07807082070344062, 0.09674000702860686, 0.11035476486537532, 0.07845389968075978, 0.12830682054568676, 0.9308524261822319, 0.9329473198789054, 0.8595397987773026, 0.9387275042401223, 0.9643825927576669, 0.9247713529494166, 0.9111981869655849, 0.9707917223320971, 0.7977798208508912, 0.2389365461465921, 0.31756920610218453, 0.38229528473536134, 0.32101015994509274, 0.35568838001649483, 0.22757218454099726, 0.23866581722622426, 0.33665671862741975, 0.3123005058576366, 0.6248564407239947, 0.34103012988596815, 0.33859527928949307, 0.24157999635742666, 0.6322283688191209, 0.335069677759928, 0.25989943116694547, 0.6639519454319931, 0.2374271224223562, 0.17924883055892538, 0.1500154215906292, 0.14638712818586896, 0.129570191340047, 0.10382024209285223, 0.1533687252746373, 0.10455141627464415, 0.13458357032178048, 0.12111122430063348, 0.1824721237186211, 0.1340776634011117, 0.12190726078103686, 0.09507741255803848, 0.12543625674509296, 0.12782125882869455, 0.16142857467638372, 0.11199116658566621, 0.11553898829569353, 0.027407056415422404, 0.008203505484840945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03318422347828509, 9.999999999998899e-05, 0.029269717227038416, 0.0396062241687658, 0.06377516339489009, 0.035397582296437746, 0.02558961656730485, 0.01947971271179172, 0.08063993157947225, 0.05093145931889176, 0.0986806069664442, 0.09279406763273257, 0.04686516063132928, 0.14069585501140014, 0.19283049032685307, 0.05834415910569024, 0.0702740576952321, 0.1345793069884874, 0.04413650041774053, 0.12150589661408051, 0.14822063018943465, 0.07396383478611879, 0.16693377537086473, 0.1503329536493746, 0.13758102992693766, 0.14553552139744375, 0.05116696708477253, 0.07735028612795014, 0.09562686187792513, 0.10253285420313207, 0.4083003456634795, 0.42655599155494406, 0.4342171386386007, 0.4325393898133556, 0.40588229323753144, 0.4599397181217444, 0.4845047372994069, 0.40677692430646717, 0.42611284815252215, 0.05993232797653314, 0.09977013582226768, 0.11121632037371743, 0.08308879893924148, 0.1195110614475472, 0.10837830293423745, 0.06668786887924738, 0.10105432906983947, 0.11606697652862008, 0.15407550159332206, 0.16554913086577527, 0.14278590933571467, 0.15348017719495222, 0.17631811151326315, 0.1713309271125767, 0.15075486896471813, 0.18772445163066398, 0.2287601534111503, 0.2754191704396808, 0.23328223906020973, 0.31072103768151993, 0.3018894052992438, 0.28274722359761273, 0.2673674505655156, 0.31351352880932415, 0.3064070492215085, 0.27853576062689567, 0.2933702678194928, 0.25166133533206414, 0.24863721085947033, 0.24207429628457877, 0.19147898154088572, 0.25599869590673985, 0.20371607575939665, 0.1812448021370584, 0.1730872958475428, 0.2117345911961237, 0.19533986473056697, 0.17667988154800895, 0.1702932235764223, 0.17857069421007232, 0.178893039393345, 0.17342025310555842, 0.19514458740706286, 0.20604436106645085, 0.18397428347751132, 0.19971088527317948, 0.20295113084663896, 0.1880078398531818, 0.19892657512586498, 0.17828210285968527, 0.19104411364134488, 0.1720987180848228, 0.18859066300600258, 0.6904284054291352, 0.1621636858976916, 0.16689677733684016, 0.7035663260180858, 0.6746563891328488, 0.16540110178050904, 0.545044330957604, 0.7468811816546959, 0.6957385647789247, 0.5523555953771957, 0.12293178214636025, 0.35176553038784175, 0.16329952672714176, 0.16187780957885012, 0.08995375257926685, 0.1242442934167649, 0.20589165791364683, 0.5901112081831372, 0.16475100012235766, 0.18024139026858954, 0.17817043005663713, 0.18386313508343033, 0.1720300354417693, 0.16935918313640708, 0.17877804597335967, 0.17810799174420977, 0.18361246234787276, 0.07974805747655356, 0.07880115241433105, 0.11929924228830346, 0.07436439395127614, 0.0754885503171765, 0.06874730089126058, 0.08464045586697411, 0.07931779789379145, 0.06825964553982888]}, "mutation_prompt": null}
{"id": "9883cd5b-bb2a-43e0-93ee-76145f268fa1", "solution": "import numpy as np\n\nclass Enhanced_Opposition_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def opposition_based_mutation(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Opposition-based learning mutation\n                opp_pop = 2 * (gbest - pop[i])\n                opp_pbest = 2 * (pbest[i] - pop[i])\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = opposition_based_mutation(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_Opposition_DE_PSO_Optimizer", "description": "Enhancing the population diversity by introducing a novel opposition-based learning mechanism to guide the mutation and update processes effectively.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {}, "mutation_prompt": null}
{"id": "f84ec13a-3f08-40f0-99e6-7b32c2c050aa", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved_DynamicPop:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Chaotic map mutation\n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            # Dynamic population size based on fitness sharing\n            fitness_values = evaluate(pop)\n            fitness_sharing = np.zeros(self.npop)\n            for i in range(self.npop):\n                for j in range(self.npop):\n                    fitness_sharing[i] += 1 / (1 + np.linalg.norm(pop[i] - pop[j]))\n            fitness_sharing /= np.max(fitness_sharing)\n            self.npop = int(self.npop * (1 + np.mean(fitness_values) / np.sum(fitness_sharing)))\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved_DynamicPop", "description": "Enhancing the diversity by introducing a dynamic population size strategy based on fitness sharing.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 123 is out of bounds for axis 0 with size 30').", "error": "IndexError('index 123 is out of bounds for axis 0 with size 30')", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {}, "mutation_prompt": null}
{"id": "2f03565d-31f7-4a6a-b491-e3b9c123629b", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved_Refined:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                a, b, c, d = pop[np.random.choice(idxs, 4, replace=False)]\n                mutant_multi = np.clip(a + F * (b - c) + F * (pbest[i] - d), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_multi, pop[i])\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved_Refined", "description": "Enhancing the mutation strategy by incorporating a differential evolution variant with a multi-parent crossover approach instead of the current mutation strategy.", "configspace": "", "generation": 61, "fitness": 0.21519470091793214, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer_Improved_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.5871399403343662, 0.5824566864509586, 0.6243638070605813, 0.5563813259161967, 0.5606454037763426, 0.528231544389921, 0.5518893705972246, 0.5875456946004094, 0.5700370778524677, 0.2921636799082331, 0.22282384657899024, 0.1404301757244537, 0.13258687375640021, 0.21270220241705817, 0.04380001190524818, 0.15318018329168515, 0.07900821961595417, 0.10261248890703867, 0.11011764216710562, 0.09565160091825542, 0.11035410742975071, 0.13672151624055262, 0.09075663920280963, 0.11772001390211084, 0.1047547706142321, 0.12725888101064753, 0.08870942975922447, 0.07400299884455452, 0.08377762189682547, 0.08421911937770943, 0.08196736548346217, 0.0794108571571076, 0.08552212207639187, 0.08195861582783637, 0.08002020606261173, 0.0979246005830382, 0.8768883954778973, 0.8883480928352214, 0.8849558066183916, 0.8928682127887952, 0.9102325609355828, 0.8211175807666599, 0.8639348410824244, 0.9324110250978098, 0.8608898468054376, 0.25204213031034306, 0.24898364929911643, 0.23756225596805802, 0.23616467591028634, 0.22389354133845552, 0.22492290479992616, 0.28429736346801526, 0.2625699280537589, 0.25258187089557493, 0.26523900700763325, 0.5591044149604818, 0.21235496599454484, 0.20612280676126604, 0.2501788636717067, 0.5622161010029709, 0.22275834893444824, 0.2174217890500667, 0.2157423731825684, 0.10048708440770837, 0.11613282450016138, 0.11549121807870633, 0.12556944408623727, 0.0790623469971582, 0.10131850718368274, 0.16329313033973636, 0.13097302329101934, 0.10022086387749729, 0.11104737873719461, 0.12732467411456472, 0.11324439057296454, 0.08552727594823228, 0.23268254235745833, 0.11278934469150004, 0.1279470112867801, 0.12787260777966858, 0.10200439999959521, 9.999999999998899e-05, 0.012501974755030676, 9.999999999998899e-05, 9.999999999998899e-05, 0.00569396410714107, 0.006239472282457803, 0.023758427114430325, 0.031326673479810774, 0.025243433094560563, 0.02650306275343539, 0.04925310662063476, 0.016575056074645378, 0.0944135486071438, 0.0767796128944841, 0.14077170981103904, 0.05684580024363928, 0.12538015555319015, 0.08936265178117042, 0.07573989525933156, 0.04387382561062292, 0.11419118497604341, 0.11488185261985451, 0.03673121422618841, 0.08832379701125515, 0.052797940191031234, 0.041809110231442737, 0.03413659925693968, 0.03446893958624353, 0.09029213451196083, 0.058816531445080034, 0.0860672296456354, 0.1271360237270921, 0.11956464770247077, 0.18869130273009227, 0.1452992856561588, 0.05527238770073506, 0.4114428105493392, 0.4259576913959021, 0.39249240635576577, 0.40261807947263806, 0.39628348296360794, 0.43223747331718143, 0.37439475654090815, 0.4016042918827256, 0.435635165364464, 0.07085313269394844, 0.08371436150023492, 0.11472900855043222, 0.1293996227634212, 0.10687417511899089, 0.08414149769965551, 0.0974072698276075, 0.1475961364735513, 0.08940528072636156, 0.13939575378119573, 0.1480697208402364, 0.1668968878158883, 0.15318141431348198, 0.134158077671644, 0.14695491047452292, 0.12555324918318833, 0.17376664015134824, 0.17107693503683474, 0.32462661864265874, 0.2886882901825406, 0.30188586376535453, 0.2385118105908548, 0.2714608676515292, 0.22117559894269012, 0.24240819260277824, 0.3037219775334946, 0.2832529602538649, 0.21933089216300639, 0.1790133591610804, 0.2609349583554633, 0.2023085109833701, 0.1553704713152898, 0.21661516713680806, 0.21994868545564816, 0.23065925695315836, 0.161485140191181, 0.17688519553939164, 0.19033225316894586, 0.19364290412091423, 0.17496335464517343, 0.17548457376320925, 0.18766937572323605, 0.17990988928652918, 0.2021987984789655, 0.17707234380838077, 0.17394606151753722, 0.1618695851154962, 0.168795597001695, 0.16384966804464074, 0.1678914284687022, 0.16704423848220817, 0.18238123907281334, 0.1663997356580056, 0.17408462059738317, 0.18782168841344737, 0.17234822541080175, 0.17759715965964062, 0.1674421476391248, 0.6129453014703934, 0.5740809691140316, 0.1672661338264847, 0.6521764259685862, 0.13444681852202134, 0.4329801741792255, 0.44586786338256945, 0.3666371119506211, 0.15916346140730442, 0.16659490180852787, 0.16290961924279235, 0.12222316072358042, 0.35513709959066164, 0.1602511482242278, 0.18303518654257478, 0.16771140735430967, 0.18380888442185084, 0.16547603635734853, 0.1611207924165452, 0.17147784666960197, 0.17894925637118653, 0.18427964940861896, 0.1758940195618507, 0.07622876073908114, 0.07692822372453356, 0.06726784200862002, 0.06723511582925967, 0.08492061870994239, 0.061915297882215614, 0.06728477681157563, 0.06668942523049914, 0.07560251669455187]}, "mutation_prompt": null}
{"id": "67a8a3c8-efae-4624-98ab-d28da6c948bd", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved_Adaptive:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99, chaotic_factor=4.0):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n        self.chaotic_factor = chaotic_factor\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def adaptive_chaotic_map(x):\n            return self.chaotic_factor * x * (1.0 - x)\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Adaptive chaotic map mutation\n                chaotic_val = adaptive_chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved_Adaptive", "description": "Enhancing the population diversity by introducing a novel adaptive chaotic mapping mechanism for mutation to increase exploration and convergence speed.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {}, "mutation_prompt": null}
{"id": "8df55cec-6035-4210-883e-6219ff411d66", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved_Adapted:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Dynamic adaptation of mutation strategy\n                adapt_prob = min(1.0, self.adapt_rate * (1.0 - func(pop[i]) / func(gbest)))\n                if np.random.rand() < adapt_prob:\n                    F = np.clip(F + np.random.normal(0, 0.1), 0.4, 0.9)\n                    CR = np.clip(CR + np.random.normal(0, 0.1), 0.7, 0.99)\n                \n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved_Adapted", "description": "Enhancing the algorithm by incorporating a dynamic mechanism to adapt the mutation strategy based on individual performance.", "configspace": "", "generation": 63, "fitness": 0.1921099548805076, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer_Improved_Adapted got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.18.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.4958253567888038, 0.5072466611161845, 0.4883362780749586, 0.5339382777334877, 0.4912450090632523, 0.48071465826308146, 0.5076089187398454, 0.4821594962801091, 0.5011379953322024, 0.04214906751149561, 0.07204248807035785, 9.999999999998899e-05, 0.04291260719129475, 0.048045861259551015, 0.06815750250833841, 0.10494421147200772, 0.050377316902564195, 0.0892863947195045, 0.08616259165025564, 0.0841116535901405, 0.07394559192330452, 0.07926644598301613, 0.10425264135397994, 0.0804885780879605, 0.0932144103517798, 0.09698371332265576, 0.051079936491432054, 0.07369622698565437, 0.10103763992420933, 0.05755808622396419, 0.08203421135420408, 0.0861686923797681, 0.07330947090935247, 0.09587893541941228, 0.08041045642302502, 0.08814171900688128, 0.9335057737230644, 0.7446160486447655, 0.9509368424502636, 0.9192367908735104, 0.839840426020824, 0.7600374662854676, 0.7938817394126996, 0.7792241182879741, 0.5789100571218839, 0.2666006423189351, 0.29368701360561966, 0.26733800721479617, 0.2480091866309121, 0.24071449105656217, 0.2007712023366357, 0.22226973532307548, 0.1996747511344552, 0.1558654270272547, 0.22457134351447117, 0.2042437087399489, 0.20612882192568271, 0.1796434788520621, 0.15112618688914115, 0.559967503829874, 0.2192751159224713, 0.20792835506325924, 0.5272467984751423, 9.999999999998899e-05, 0.15347605869643577, 0.09167868553898295, 0.12439440706034788, 0.08397519937917386, 0.09871618607062504, 0.1265607544424756, 0.14831375646658984, 0.13862885699063587, 0.09660544969861806, 0.10651978934113626, 0.09107097768198014, 0.11502763062945998, 0.10398907870550789, 0.10822693149257046, 0.0951939598662257, 0.11966577770614129, 0.23998717981758244, 0.0013844273568087706, 0.011481565304511943, 0.007308337652232488, 9.999999999998899e-05, 0.00010678671318331556, 9.999999999998899e-05, 0.0009685831140230361, 9.999999999998899e-05, 9.999999999998899e-05, 0.05158475456539324, 0.029773459832417415, 0.011595315932577233, 0.05175134369775625, 0.028200793142541092, 0.04890402497066537, 0.07185985619728619, 0.07068895011674425, 0.033527440133225395, 0.026140377389213376, 0.02564841263318063, 0.03449026994704596, 0.034152818187770384, 0.035691920194097615, 0.04602997528418895, 0.02519457651240098, 0.04236272379997641, 0.03828967847528342, 0.12861114584377975, 0.04834985934822922, 0.05846142907782703, 0.06325896105226059, 0.1191303534047986, 0.07386610949068073, 0.05089864467330629, 0.07022121403825077, 0.052006552904732106, 0.3892865006622024, 0.3855125882621834, 0.38756544280485117, 0.42129463519736454, 0.40548694650630746, 0.3982515919903673, 0.39973600938084897, 0.3978089209777721, 0.39988432567107823, 0.0623716115776628, 0.08716961312206517, 0.08149795646402347, 0.07202217156774515, 0.07496170278239311, 0.10306918251703756, 0.08065677848500241, 0.07417084102329774, 0.043878481391208646, 0.1449401881454545, 0.13658099166637805, 0.13087298147631465, 0.14081993666491766, 0.16768595369277484, 0.1890432373256946, 0.17711206642025612, 0.20662923295455904, 0.14454928683980928, 0.2317916636547368, 0.26040905551045757, 0.22100777594653354, 0.23193208408127886, 0.1865214499073149, 0.27134469818437024, 0.20792370806324745, 0.2916753186897765, 0.25040239781216433, 0.21219710941465186, 0.18008829548735594, 0.17362421957055652, 0.17267592472326465, 0.1444856230039051, 0.20150816820171713, 0.18826805235921784, 0.19597752302021298, 0.18004523879545908, 0.1645420191606216, 0.19172277260941706, 0.17010414131947382, 0.17905515116916682, 0.17815392235351812, 0.1831286890691598, 0.1664356715855725, 0.18284089366494916, 0.19726942735350006, 0.17680784648744918, 0.18744000013327922, 0.17704523817391615, 0.17149339707853017, 0.17583420258072624, 0.17027878916787909, 0.17444429748900891, 0.16492371041831322, 0.17820317078375736, 0.17336931665206123, 0.08747254292291129, 0.14539092227742734, 0.16288198308157587, 0.5100882156333687, 0.16641211625339947, 0.16933887358213429, 0.5909685050943176, 0.13563479378702814, 0.3407685976367567, 0.38141764580314275, 0.4786900220388415, 0.16136249309475648, 0.15689297299935356, 0.1616983302128141, 0.48347114524558554, 0.20648211877839628, 0.3244698599059429, 0.1621041937204547, 0.1758781294789633, 0.17102681443332346, 0.16295040341051592, 0.16483649531079458, 0.1673174836206467, 0.17459323962874007, 0.1796083103156878, 0.1875525742795141, 0.06736991549033922, 0.07065632345530481, 0.0709131554643162, 0.0695295562767122, 0.07778419598125386, 0.06663742122899896, 0.07256990508102901, 0.05803141053232974, 0.061427973227207056]}, "mutation_prompt": null}
{"id": "cf1f6728-ccbd-4ecf-9915-75708fbea5f1", "solution": "import numpy as np\n\nclass DifferentialEvolution_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Differential Evolution Mutation Component\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_de = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # PSO Mutation Component with Chaotic Map\n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_de, mutant_chaotic)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "DifferentialEvolution_PSO_Optimizer", "description": "Enhancing the mutation strategy by incorporating a differential evolution component to improve exploration and exploitation.", "configspace": "", "generation": 64, "fitness": 0.17484476095458298, "feedback": "The algorithm DifferentialEvolution_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.18.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.37712436461475185, 0.3981415207883361, 0.36863398921665735, 0.3778892340406461, 0.36443293665008125, 0.44483446040370334, 0.3440295217871734, 0.4045280436727815, 0.3581230615059915, 9.999999999998899e-05, 0.0006739310419743294, 0.028410884834599526, 0.07041165073568934, 0.0018927104473961398, 9.999999999998899e-05, 0.004809703432410606, 0.015617167324111558, 0.016705321483490132, 0.11367854142866074, 0.08602747482042983, 0.09782497812129809, 0.10682126723729302, 0.08982831087233556, 0.1080449695823329, 0.10206876271350407, 0.08270865390984383, 0.06605253003217026, 0.104519262218841, 0.08931887403870353, 0.09574408819815983, 0.09357452480780981, 0.09703795765938372, 0.1248946910158324, 0.08162419840484325, 0.06969405914541693, 0.0726865932049191, 0.93233298676321, 0.9315875925482549, 0.9692272478041913, 0.9248105487172776, 0.9494967762295161, 0.8294926370005699, 0.9072397901109158, 0.19154985035871996, 0.8383201249849705, 0.20952181071932552, 0.26902614367481414, 0.17361233762234518, 0.15335256802611752, 0.2585690429882588, 0.21000735817896699, 0.21621517795257783, 0.2032209282454891, 0.15492534326507734, 0.20855600033515687, 0.2446119541691263, 0.20866216495415424, 0.17463722825292483, 0.2760713415383387, 0.2623893379107526, 0.32159646335397507, 0.20771909016313173, 0.2180965244353592, 0.10350739406897724, 0.1391196732791271, 0.17254558851157542, 0.09954497336901236, 0.06968525432521111, 0.06582956487177383, 0.1834865531227733, 0.08665888208703343, 0.0734471678296702, 0.13892367305968822, 0.09955593574116917, 0.10951419994640987, 0.11898945395781813, 0.09220118156055102, 0.10175379748086888, 0.12710501784326866, 0.10461148386669061, 0.10738344038450609, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004207386703916738, 0.055349015244644195, 0.04182475247260753, 0.07866352720122027, 0.02417534266984056, 0.022674300042990758, 0.04893540868619661, 0.027244940556506614, 0.09474824404864413, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011956005649178092, 0.04568255291799306, 0.08612297045963568, 0.04089297683681925, 0.05128477095137096, 0.07386366258325794, 0.06306747605683649, 0.09361620074147436, 0.04353664525848966, 0.3592141529395587, 0.31453839400402495, 0.3235012276615312, 0.34764805291712386, 0.3725205431700962, 0.34911485946905463, 0.32673753127863003, 0.34098607096460287, 0.3242534567168873, 0.07532080153322895, 0.0690252433069205, 0.09009197100052879, 0.08415447923080355, 0.09178622216207333, 0.06793322653323153, 0.08280781150199801, 0.07869347468112042, 0.0735675024814022, 0.17077969234701817, 0.12983991100702008, 0.15138394192261762, 0.16876212167019844, 0.17966266079666515, 0.15521948115431683, 0.1611263300772604, 0.17322516115937958, 0.1513711161071748, 0.23447724617359222, 0.25871387327230155, 0.226957605337761, 0.24859053859001667, 0.22883271150815276, 0.1498299017410989, 0.18751222635955278, 0.2526304422380248, 0.2685850632664919, 0.17130990403908275, 0.1853966126724974, 0.18318158235070747, 0.16512626783063766, 0.15484946536030397, 0.20072295129470608, 0.19641676057451418, 0.15637333090914418, 0.12407623180129446, 0.19720063953863953, 0.17494257322083318, 0.18466619876866586, 0.1972544667842382, 0.1670570773525737, 0.18305259910171667, 0.18002348433876836, 0.18492240306262686, 0.2051872176457168, 0.1781222136079348, 0.17272973063064934, 0.1993595170250736, 0.16669988759181564, 0.16804046578022225, 0.17610566698035424, 0.17392087123541733, 0.18212818873751213, 0.17360894054361253, 0.17158571103889475, 0.17478365591403566, 0.12168953314802222, 0.1763581946272852, 0.41180103998563855, 0.16383932455445316, 0.4368651505198311, 0.1772829940561902, 0.1797623168282878, 0.10058864100694032, 0.2444156742597876, 0.34055458483036505, 0.16312666695917066, 0.1663231013558195, 0.19162580931282014, 0.24656185861758095, 0.29883611016415423, 0.12356465770260527, 0.18459984213446978, 0.16702743782856688, 0.17614062323204183, 0.17864556962815026, 0.17894197533908685, 0.17694678404498887, 0.16593604255930527, 0.16137337077512948, 0.1673044550372551, 0.06904525473565959, 0.06913745677000993, 0.07231671798579409, 0.058975782989632575, 0.07290715845443552, 0.06224856078410812, 0.08941547089773849, 0.0811715683049462, 0.0659329506631684]}, "mutation_prompt": null}
{"id": "d4888868-61ca-42ca-bedb-969af2a0708d", "solution": "import numpy as np\n\nclass Dynamic_Inertia_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99, w_min=0.4, w_max=0.9, w_change=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n        self.w_min = w_min\n        self.w_max = w_max\n        self.w_change = w_change\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Chaotic map mutation\n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w = max(self.w_min, min(self.w_max, self.w * self.w_change))\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Dynamic_Inertia_DE_PSO_Optimizer", "description": "Enhancing algorithm convergence by utilizing a dynamic inertia weight adaptation strategy.", "configspace": "", "generation": 65, "fitness": 0.2189086166539547, "feedback": "The algorithm Dynamic_Inertia_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.5739397145075951, 0.7455957447471104, 0.7453713577232737, 0.7474336772946408, 0.7716716020980288, 0.7247915304803014, 0.7378635031625088, 0.7080335017499341, 0.7646327656897297, 0.09842464411131513, 0.12947765073440476, 9.999999999998899e-05, 0.11377948475439736, 0.03859355263676101, 0.07320270788252525, 0.10043799844128642, 0.0025275146500278733, 0.3189427878296961, 0.11239962482548393, 0.07949446730728449, 0.09405851983943647, 0.1449502555706167, 0.1313956736471007, 0.14177473976419674, 0.10273963249539975, 0.14239412428095033, 0.08172487574466614, 0.08158567249113768, 0.09752061924243405, 0.07889332665476045, 0.09830647783918989, 0.10368831717373905, 0.07845652699363503, 0.08746195911847376, 0.05593995993213119, 0.11249372361899546, 0.8881893709246822, 0.9035511337683116, 0.8668781787011736, 0.9256163127667036, 0.964392469220429, 0.891900657002036, 0.5508779710927513, 0.9707917223320971, 0.09999738357166443, 0.22994455517971712, 0.47522196779060055, 0.42168706192495353, 0.14834008694111311, 0.16073186010723162, 0.12378195291518046, 0.2555672939923188, 0.2906733291425698, 0.19659660080902797, 0.7676968185093939, 0.24878531312772356, 0.3640214984033938, 0.26532226050146046, 0.20763827469563279, 0.20938809859733343, 0.6637236221467335, 0.16172784800580742, 0.2393267592309397, 0.11806141538234172, 0.3441593894975694, 0.19803493543563333, 0.13222134290181398, 0.09645975428096387, 0.1207883916237632, 0.129836005097696, 9.999999999998899e-05, 0.1376254979565681, 0.11946434222312674, 0.11742081566004459, 0.25061989311753285, 0.12115581194672109, 0.13033179837796038, 0.176270604384284, 0.13128012587139093, 0.11884084914708914, 0.14303575365620003, 9.999999999998899e-05, 0.012463157540189562, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0041774315189110345, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01102530597047846, 0.046887460586483076, 0.01798518168439245, 0.04337457655001231, 0.023888728647840307, 0.09483018115062691, 0.07957478152452568, 0.09259240319310469, 0.07913643238336976, 0.021566818289646794, 0.09133240330056469, 0.08914722185355017, 0.12100669383347029, 0.06487035263596685, 0.06954741579978596, 0.06699936064746304, 0.11698140039517346, 0.10725285312834221, 0.1406290511649102, 0.1831304532515564, 0.16222698404189684, 0.1239868562129044, 0.06185826730438604, 0.12702031871969033, 0.07719550445232404, 0.06690293712205853, 0.09745880281314878, 0.4354215960951101, 0.46560836683918316, 0.47117365011861956, 0.4849172076499848, 0.4906271947231087, 0.4429489773364773, 0.38793551174765295, 0.44250968086161613, 0.4062495780550146, 0.06125622293134825, 0.09336777018506859, 0.09218085774099383, 0.11192028361598749, 0.07237229079805729, 0.05885124640181183, 0.060453488129182165, 0.09072852976999568, 0.1409031174257509, 0.22118050539796819, 0.16094247810353335, 0.21625043256269627, 0.18626400813556743, 0.1720273961124461, 0.14428387287347433, 0.15900507457553736, 0.1965069684091898, 0.17049703459094667, 0.35073627765846227, 0.29253787688314115, 0.317122453537639, 0.2641470134070144, 0.2965913115226524, 0.3076970942676962, 0.2254051771180745, 0.25860963401919757, 0.21793274591058542, 0.2765901860910558, 0.2509144584121573, 0.23963467334468047, 0.27496796564485126, 0.20673074004408276, 0.18760923163216525, 0.1822572206060975, 0.24282836690485132, 0.16613734070926423, 0.1906207415610517, 0.18328101311320522, 0.16851110344144604, 0.19418507262441342, 0.186515788196858, 0.18751816268062704, 0.18493182397641872, 0.18554737725448134, 0.18641878844454518, 0.18089554878841962, 0.16758486567130293, 0.18831821864508114, 0.18508730875574553, 0.180729293559182, 0.16744342759723296, 0.2085367250093153, 0.1697357090270265, 0.16836067469790228, 0.11288361181885043, 0.1615167972671021, 0.1672905081634808, 0.1613403683054434, 0.15587248133430565, 0.16723232391409892, 0.16973500186498602, 0.863380469204131, 0.20281410096079688, 0.24921364228904408, 0.12351437269418475, 0.29933159770763174, 0.16503519696641433, 0.1655622491037373, 0.16246946241707705, 0.12594259118344253, 0.20844249065041287, 0.4244185088447022, 0.18027383042659129, 0.1693221005051786, 0.16980971325887673, 0.18001333725929325, 0.1923436442979629, 0.18119845535030132, 0.17266868146570835, 0.17220795027734004, 0.18879766003587628, 0.076536501828256, 0.08714089403837788, 0.09112256043855904, 0.06998002387404545, 0.07134566766826467, 0.07512394388913746, 0.08013285505255685, 0.08559052481088114, 0.08167762743130402]}, "mutation_prompt": null}
{"id": "64b9157e-1fd5-4207-bb66-aa94d3512e9a", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved_Refined:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_de = np.clip(a + F * (b - c), -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_de, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved_Refined", "description": "Enhancing the mutation strategy by incorporating a differential evolution crossover with a dynamic control parameter.", "configspace": "", "generation": 66, "fitness": 0.2192630939228941, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer_Improved_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.6390578148376589, 0.6407510333013562, 0.6583521683240157, 0.6179830475094941, 0.6244005357917998, 0.6209759525138572, 0.6393235700827853, 0.6151914894404007, 0.6598334971466453, 0.06045197654516887, 0.08717380175430955, 0.24502952884213236, 9.999999999998899e-05, 0.09732040807297382, 0.0821994191133062, 0.35368670021246906, 0.043005238731987805, 0.11497138468144186, 0.11833096459244075, 0.09606036478612046, 0.09651338463504744, 0.1242265974634087, 0.09492010375377524, 0.13121617520546935, 0.07464493023669061, 0.09821808721300973, 0.06585005155774193, 0.09720791769422377, 0.08695644424497384, 0.08126644611512124, 0.08697137695971091, 0.08849764019945139, 0.1406377468542399, 0.10968854845159437, 0.03880662762100606, 0.07370681862525086, 0.9463927082936405, 0.8976702374048359, 0.9645586712891618, 0.9452951321831259, 0.9458421365606392, 0.8063151989475247, 0.9484560459378416, 0.7686633131420879, 0.12616856472231974, 0.2632861633288748, 0.2942695979814305, 0.24922542883086785, 0.25363783438903054, 0.3097564293198216, 0.3732188124291702, 0.20963274724649794, 0.3020316044073197, 0.33493752280634104, 0.33505960382174893, 0.43815755886688135, 0.2118281072761331, 0.20360867569485563, 0.19445158039565713, 0.20751670615669449, 0.23132870158690777, 0.6412723743318917, 0.1829868791860697, 0.10025664564679848, 0.1086609242706027, 0.10719566632551691, 0.17779987068812375, 0.10901851371239868, 0.11718208334059455, 0.20721471760069177, 0.1596473108837646, 0.1074002842784203, 0.12203920573796145, 0.14690830068911653, 0.12904213969091738, 0.12909905329296412, 0.109119335062004, 0.10758852000151642, 0.11668477512612607, 0.12366215352959897, 0.11711057228309552, 9.999999999998899e-05, 9.999999999998899e-05, 0.06946274133975017, 9.999999999998899e-05, 0.009980828400043329, 9.999999999998899e-05, 9.999999999998899e-05, 0.02160548403192275, 0.07088415806870141, 0.02197963531482694, 0.017961127159983103, 0.03146635227974437, 0.04494822114535779, 0.04111829217832497, 0.059268313128418626, 0.05421993250689505, 0.027559473131583023, 0.07875688295019156, 0.09603054772792241, 0.07460931300280149, 0.1258645765373887, 0.14042796953902237, 0.07331080371739351, 0.16477107880526332, 0.041400557610479116, 0.06493205067286378, 0.11333785698029275, 0.03381632883906982, 0.03807207224465914, 0.13106338993548217, 0.07172591118213678, 0.11515027479658801, 0.048897727068566876, 0.09524069080042841, 0.04732355245348008, 0.08539460448158753, 0.42708392655070615, 0.44041354823388834, 0.43851958354577414, 0.4431019766798935, 0.461158970473202, 0.4476474618762454, 0.4380090432283743, 0.4869321157036256, 0.41180995386325414, 0.08193968784719796, 0.08696983323259011, 0.10494497117469104, 0.05899626205496966, 0.11236968642448553, 0.08846191982229434, 0.14699755174443763, 0.1068024452085119, 0.07897103899167868, 0.18215762286622883, 0.13977876350109186, 0.19099254187173886, 0.15763507822041867, 0.23350998213361895, 0.16109257098368923, 0.19604508637665863, 0.22143600659673712, 0.13465633453151493, 0.25188779486936086, 0.28311546490023143, 0.2931279441219705, 0.3736530969212588, 0.27458369074959965, 0.25838429710890654, 0.31966930634332724, 0.27054349165342795, 0.3231448889415226, 0.16778459713325677, 0.21721814249336413, 0.25167507335170514, 0.16463971712989756, 0.248385932106566, 0.24678981036901182, 0.22813505244326315, 0.27641662088391017, 0.14375669682307757, 0.19957003067596468, 0.19588640809543134, 0.1897761453234924, 0.16932791965913707, 0.2003752946717995, 0.18591660934786558, 0.2075513280501261, 0.1779806342917578, 0.20497992821332311, 0.18673589464697204, 0.18644024142915872, 0.17088545406071387, 0.19646437808103212, 0.17471545781784703, 0.1637374362779065, 0.21458753174724954, 0.17354768727936176, 0.18329019642108202, 0.11001346980738869, 0.17057859123104713, 0.16470928256911188, 0.17660650014455082, 0.7412466139026708, 0.16467181637638728, 0.1663987431286219, 0.717941491721247, 0.18241959966487453, 0.11178320506271977, 0.544030558026705, 0.6237158628673931, 0.1618484485659989, 0.16405948151616134, 0.16244358181744667, 0.12404050890122342, 0.20637959878129775, 0.4445336280877221, 0.17222330321964796, 0.18485896212300312, 0.16552226529296699, 0.185712693589556, 0.1713848924307545, 0.1794829163025865, 0.17407384862924113, 0.17864710972459963, 0.1694523060580594, 0.07701471021204032, 0.07588126574963283, 0.08506571693960574, 0.08283688527602184, 0.07875860347537889, 0.08077132947141286, 0.05560127426620565, 0.08153811236913555, 0.07566000203147838]}, "mutation_prompt": null}
{"id": "166ff49b-efe9-475d-a2fd-0fd4cf0cbe0e", "solution": "import numpy as np\n\nclass Dynamic_Adaptive_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Dynamic adaptation of mutation parameters\n                F_current = F + 0.2 * np.random.randn()\n                CR_current = CR + 0.1 * np.random.randn()\n                \n                # Chaotic map mutation\n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F_current * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F_current * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F_current * (gbest - pop[i]) + F_current * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR_current, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Dynamic_Adaptive_DE_PSO_Optimizer", "description": "Introducing a dynamic adaptive adjustment of mutation parameters to enhance exploration and exploitation balance in the optimization process.", "configspace": "", "generation": 67, "fitness": 0.21513171191793792, "feedback": "The algorithm Dynamic_Adaptive_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.591450377971784, 0.6136583837385607, 0.6106946864162268, 0.6159971422034259, 0.6064795161219452, 0.5834741838518469, 0.6149718617511369, 0.612202318575883, 0.5976581110641035, 0.30237351043889704, 0.17035161205417793, 0.3138168513939156, 0.03781023595434929, 0.31060717361576573, 0.04903032250317685, 0.07275665837566381, 0.050280860887434775, 0.2997986555623553, 0.10213301660741947, 0.1032274697305895, 0.09490827196936957, 0.12435989556368965, 0.12695548745273122, 0.11387330853722488, 0.08937341673140309, 0.08539349526080242, 0.0670765776351614, 0.09138980127599938, 0.10225184088150252, 0.11049610661447518, 0.11828850752780706, 0.10293833284093834, 0.07900008716024054, 0.0885513281399779, 0.08450443046410216, 0.08697821892527557, 0.9424099004323835, 0.8980064825003198, 0.9610475808862692, 0.9398568179789794, 0.9471194603103508, 0.8746143053545274, 0.8586635356172334, 0.9369165896254662, 0.8990357884320442, 0.3234436191632024, 0.17594132259065687, 0.17558223284731755, 0.25776357628712054, 0.3790914150083309, 0.17595606450068813, 0.26522538388801087, 0.2636384787576802, 0.3274525573174546, 0.21007298339043612, 0.21423528851856455, 0.2169671193383811, 0.24002609683782683, 0.2526277463288755, 0.2584914128343714, 0.3322499967496365, 0.22209408055684177, 0.20681084023867835, 0.13104682903516807, 0.24845229430429705, 0.14340143229681812, 0.12999748990519389, 0.22179147747779537, 0.12373357303515076, 0.10302985424697908, 0.10100283556033685, 0.30852425048584387, 0.11261260479182478, 0.11626739206943182, 9.999999999998899e-05, 0.1555793273846724, 0.1392416104614007, 0.11262757719277361, 0.16584602282505567, 0.11226087433304877, 0.006723750511825499, 9.999999999998899e-05, 0.0565237834964879, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026720096378413327, 0.016894778192342308, 0.06202374254501597, 0.03685721845407064, 0.019169659997520516, 0.02825591836943475, 0.011076201184545775, 0.09270018249220557, 0.0869771749374284, 0.0791142165519948, 0.028233079578592002, 0.13202394223330827, 0.13442440431546732, 0.047250317548476084, 0.022536242864187095, 0.10916131343099245, 0.048950591587832215, 0.0875510615937739, 0.07664283951648321, 0.0391335078357512, 0.050030006221968515, 0.04260898454040585, 0.03557178253350535, 0.04152854122939209, 0.12184501512510981, 0.045628126500404376, 0.15516900432064262, 0.09246443059471021, 0.06689144600156272, 0.06566859815572279, 0.05082017078332868, 0.40312129208388225, 0.43489036024745453, 0.4915423515306281, 0.4730763664891964, 0.5217213720104118, 0.43919541035521226, 0.41298723289087935, 0.3966282841358203, 0.4393534755908266, 0.09356848058791567, 0.098314427868468, 0.10190385319575546, 0.10791512136162418, 0.07994345133384173, 0.1104494529738953, 0.0961706228859961, 0.07969859248682964, 0.016561643201011833, 0.16060986135999067, 0.17439608433050957, 0.1795901570704327, 0.14269596515410354, 0.18609039129671323, 0.13872294387495454, 0.2026954780219924, 0.17770432890746035, 0.16310540580330757, 0.2714037928147499, 0.30729714147081877, 0.2916136863663803, 0.33461438369481844, 0.1685509387545937, 0.2898850241933474, 0.33675359915973735, 0.3453366818192377, 0.29086853695866655, 0.19902323635357555, 0.22500759431944384, 0.25480827722600896, 0.2136612581910151, 0.1947175455475617, 0.22917976312733424, 0.13291115828170785, 0.2138732269263358, 0.1867390478432236, 0.18953769436589496, 0.18429490378484992, 0.1937632297639228, 0.14645647757246372, 0.15765568470707714, 0.18890975823376566, 0.1997328076308632, 0.18732263066674226, 0.1693967826666818, 0.20096478099436432, 0.19052712053946297, 0.19516643695280722, 0.19609183051633772, 0.1650229943224113, 0.15980347617499413, 0.20695835250252725, 0.1916247723120056, 0.16848551082859653, 0.18081277636295268, 0.14422465139214002, 0.12194816942304731, 0.14619545446962878, 0.1591548156289524, 0.1643172075364917, 0.16432441567577605, 0.1800323161240125, 0.12871464344532146, 0.6086692492958561, 0.516397059924021, 0.2758233509773955, 0.14760460900168915, 0.16256877483291532, 0.15965123716818574, 0.12272288467363957, 0.2110344934598597, 0.49477060725822897, 0.16937964043514198, 0.1659507619561429, 0.16803857667216782, 0.1743870357241598, 0.17724797901213496, 0.16998884771398903, 0.20168894205235133, 0.1784116189853885, 0.18104392100606048, 0.08050322604270277, 0.08825122545722064, 0.05321419430092156, 0.06974006641465835, 0.07206489681473827, 0.07082215736763797, 0.07220658372372768, 0.08389204788340554, 0.07850048430878309]}, "mutation_prompt": null}
{"id": "200ad4aa-954e-41c7-9b1d-c60264d8a3b3", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def opposition_based_init(dim):\n            return np.array([[np.random.uniform(-5.0, 5.0) * np.sign(np.random.uniform(-5.0, 5.0)) for _ in range(dim)] for _ in range(self.npop)])\n\n        def opposition_based_mutation(pop, pbest, gbest, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Opposition-based mutation\n                opp_pop = pop * -1\n                mutant_opp = opp_pop[i] + F * (opp_pop[i] - np.mean(opp_pop, axis=0)) * np.random.uniform(0.5, 1.0)\n                mutant_opp = np.clip(mutant_opp, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = opposition_based_init(self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = opposition_based_mutation(pop, pbest, gbest, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved", "description": "Enhancing exploration by incorporating opposition-based learning for population initialization and mutation.", "configspace": "", "generation": 68, "fitness": 0.22684282734954614, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.6306133901873394, 0.6414087908951452, 0.6522821389702287, 0.6320998171618109, 0.6269436720836528, 0.6319743714765446, 0.6192757967009468, 0.6204215109184203, 0.6356456408182836, 0.1506781319816306, 0.13843295902311825, 0.10053013117483478, 0.3489767149336007, 0.06857464439080574, 0.35345895666799476, 0.17858619291499067, 0.15672198397285486, 0.10258628445419382, 0.10098507748337449, 0.09333663364011502, 0.09340851256119853, 0.10540222679243816, 0.08952525576000969, 0.12259407439528258, 0.09726512414271526, 0.11028947248490262, 0.09180702383021222, 0.10617958118632664, 0.08197849147798919, 0.10178205440993637, 0.08221541261622756, 0.08925562485484317, 0.0816734757259826, 0.08631110622330884, 0.11670241479318333, 0.08587939247053777, 0.8515592305313575, 0.9352489139087471, 0.8906889303141293, 0.9490195010200195, 0.8808765492595908, 0.907381954647111, 0.8924023784199558, 0.9135462300117512, 0.9173453459976543, 0.32894288021427576, 0.2991389412739426, 0.289968511897173, 0.3323619045132691, 0.25380297762944803, 0.28105132440498515, 0.3091642067965398, 0.2334856183791456, 0.3038306269639858, 0.19250686083057333, 0.33614255483631883, 0.24527288857591434, 0.20216877102028596, 0.18943257695111793, 0.2965158972725993, 0.6070010671341826, 0.3339642509926193, 0.16726636762524283, 0.1365312063063664, 0.106086241911304, 0.12634824385569177, 0.09812812461673237, 0.11365654537212033, 0.11312648899350475, 0.10638754618121748, 0.1472175533978065, 0.11534536779570481, 0.11078735480929569, 0.14559218494147552, 0.11050231929133858, 0.32551449165975077, 0.11615890879456914, 0.13509642951360856, 0.1196828311905127, 0.11213983320597176, 0.11790513726241081, 0.035763941974352176, 9.999999999998899e-05, 0.12441141538667833, 9.999999999998899e-05, 0.022747073904663018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05151582796313947, 0.06905117563492313, 0.044426933122486134, 0.08667988502523971, 0.02501388931154902, 0.09816868132541201, 0.16372989473436683, 0.05939388960897418, 0.12783805457343556, 0.08105182695243185, 0.02285294078956246, 0.02459764993402913, 0.03010181200881712, 0.04935161635252838, 0.055205078650718886, 0.07299756416491598, 0.06968752215269303, 0.06293923851345584, 0.06465179405661625, 0.10426001655202222, 0.08239433455774703, 0.0500105240897899, 0.05596433371676501, 0.22309853457277562, 0.10132416223422225, 0.17420515332244557, 0.0496203283965122, 0.09151220174812713, 0.4462136681979123, 0.3890463781759361, 0.40073938580702895, 0.45179579098079425, 0.4153515243200483, 0.44307063468089525, 0.44348485323785014, 0.47765711544852096, 0.4946969725951911, 0.10429192534907139, 0.11221922241582194, 0.11489967875040852, 0.08623066131164592, 0.06814644243780399, 0.11024314193886531, 0.0923553459907438, 0.0998092012518047, 0.08982461259831909, 0.1853616706545672, 0.1452964407024261, 0.15011213839099713, 0.1509220619017766, 0.17983837761957588, 0.17605463928070209, 0.16530210896512276, 0.1626102480471061, 0.18576275647229756, 0.3359084017648536, 0.23919712182244635, 0.32830240352878615, 0.33021685296708725, 0.34354592580827914, 0.2846491126991195, 0.2558843827853218, 0.307565127913218, 0.3146810375993273, 0.19881263463566967, 0.31336469950293033, 0.1489192658481232, 0.2897054175274032, 0.27274337327510867, 0.18787305471030624, 0.23894779054767268, 0.19815952304620044, 0.2562459801701241, 0.2042742976058678, 0.17468317192100036, 0.1927600291607452, 0.19213668175605048, 0.18971683344248313, 0.1945114166058859, 0.18438392573022033, 0.19323534737785764, 0.2107599727654932, 0.1916173257165369, 0.17193730430919418, 0.16855182141402913, 0.20703868691150207, 0.1700367414748042, 0.18985986453955284, 0.1764289739534599, 0.20436146806629663, 0.17493846043446193, 0.1610963035802463, 0.1920324286253111, 0.14578070752599293, 0.6286387623554466, 0.0956639006775516, 0.7072087342818989, 0.15878188807910187, 0.1897000093855632, 0.16083322522106702, 0.6466331800722545, 0.12485379442531885, 0.7158531742550314, 0.4351193904450834, 0.1290525186588597, 0.1526257680486358, 0.22422775901655545, 0.10918517932512495, 0.1541546954216888, 0.1672486003732967, 0.18411056648199264, 0.1762101931864234, 0.17042667365787234, 0.17450938058264442, 0.16000419530929644, 0.17061092781420362, 0.17058040795585439, 0.1742418745348765, 0.07867751787486232, 0.07388821706901638, 0.07849455887638956, 0.07104980046174425, 0.05522900937894959, 0.08144304438550809, 0.06119892651652914, 0.073852845502687, 0.07037767185074428]}, "mutation_prompt": null}
{"id": "52f2d5c1-1de4-4833-a2cd-7e2b99bd2b0f", "solution": "import numpy as np\n\nclass Enhanced_Opposition_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def opposition_based_init(npop, dim):\n            pop = []\n            for _ in range(npop):\n                rand_sol = np.random.rand(dim) * 10.0 - 5.0\n                opp_sol = 5.0 - rand_sol\n                pop.append(np.where(np.random.rand(dim) < 0.5, opp_sol, rand_sol))\n            return np.array(pop)\n\n        def opposition_based_mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = opposition_based_init(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = opposition_based_mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_Opposition_DE_PSO_Optimizer", "description": "Enhancing diversity and convergence speed by introducing a novel opposition-based learning mechanism for population initialization and mutation.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'chaotic_map' is not defined\").", "error": "NameError(\"name 'chaotic_map' is not defined\")", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {}, "mutation_prompt": null}
{"id": "765a89d2-6e58-4b65-a1e3-84a3bb5adfdf", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Dynamic F and CR adaptation\n                F_i = F + np.random.normal(0, 0.1)\n                CR_i = CR + np.random.normal(0, 0.1)\n\n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F_i * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F_i * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F_i * (gbest - pop[i]) + F_i * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR_i, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Dynamic_DE_PSO_Optimizer", "description": "Enhancing the mutation strategy by incorporating a dynamic differential weight and crossover probability adaptation to improve population diversity and convergence speed.", "configspace": "", "generation": 70, "fitness": 0.22498611333206178, "feedback": "The algorithm Dynamic_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.6375603825784373, 0.6227088792610946, 0.6147505706874341, 0.6070802902725316, 0.632821214385231, 0.6279115132513724, 0.6381569897929448, 0.6112792882736853, 0.6210835768304155, 0.04775882545964216, 0.3404575914702127, 0.08275144016837588, 0.10543459246884668, 0.3606378832613175, 0.06992718444991786, 0.04558161449842668, 0.11379735675108626, 0.10160295155065469, 0.0837041724163069, 0.0977812677017662, 0.1004702148649338, 0.0940732830546871, 0.101795160394619, 0.08200052709772176, 0.09846892974699017, 0.11068400161859804, 0.06786120242151972, 0.1156710657592197, 0.11116992524983982, 0.09026703779711187, 0.0839630903701516, 0.11481357443837115, 0.09667654610978516, 0.09031410626894942, 0.08000550903016901, 0.10249931328775619, 0.9366668455098904, 0.9133603354022023, 0.9472535577350191, 0.9473022889413413, 0.9433132779162011, 0.8753047738055807, 0.9208855764946258, 0.9268427283138307, 0.8961775268265345, 0.2685093912304568, 0.306967521673959, 0.28759710159132323, 0.2271504030087621, 0.2850834232707785, 0.3587625734116986, 0.3055037629220726, 0.33828301919886583, 0.2636504189138703, 0.31648005958926995, 0.6142745377091745, 0.6187743357694744, 0.19451024362821567, 0.7011408695397703, 0.26534171341054924, 0.229269524137088, 0.2150395138332678, 0.15398008215415648, 0.12977553135287967, 0.11913839587450725, 0.09752697398072885, 0.12029495362331877, 0.12268618609560566, 0.10229148872098726, 0.12015910984390343, 0.07923366505936902, 0.10997175151529959, 0.1405312994441814, 0.1652322562633708, 0.11489870209893438, 0.14519606699522558, 0.12218841474311415, 0.09611476223723037, 0.11408706089090792, 0.17293394718848298, 0.0935649932898781, 9.999999999998899e-05, 0.006457963081928031, 0.05897939919160344, 9.999999999998899e-05, 0.07505583896775647, 0.007237963836723482, 0.007335821040735935, 0.00012002760581819594, 0.001017628146682381, 0.026780011630745837, 0.06519265248372996, 0.06561039696082238, 0.14207231724202252, 0.10011546239675484, 0.019850055319014293, 0.1509769545188837, 0.06007821200730845, 0.06799155774954946, 0.043304152886509684, 0.1365283884416887, 0.1060397369611985, 0.050732214066411485, 0.0546717102604789, 0.1043144822470633, 0.050458251669369014, 0.05070260746767852, 0.04212039065787776, 0.06561311799292724, 0.10565493363882672, 0.061214269936982424, 0.08116851317326523, 0.1379767701169703, 0.06384651200104341, 0.11106482397614692, 0.2217773690446465, 0.06431950961152977, 0.4052680544155852, 0.42889695406998285, 0.39878469520855686, 0.47652878381322195, 0.45907161577083044, 0.4742981028758747, 0.46443676666503886, 0.41330650815407466, 0.4624498845164273, 0.09138271914309948, 0.09793269303916041, 0.08659722445789864, 0.1119505614782309, 0.08197341196922536, 0.12449743570597771, 0.04577136216737421, 0.10512441155652652, 0.06992716903122309, 0.1637711076917081, 0.15618254241965346, 0.1796759742612397, 0.19592277221951593, 0.15310712588893916, 0.12403999559004919, 0.14717788607712534, 0.1612972594356925, 0.1610364861466156, 0.3028138844381857, 0.2966007108372294, 0.27932830711424017, 0.2480316748789464, 0.16714179142173125, 0.2959629270587436, 0.2773159815902029, 0.3139887714568519, 0.2634923351810283, 0.2144979020141281, 0.21365737717048783, 0.24074150835635133, 0.263832449063782, 0.15762379984640607, 0.24640479856417297, 0.2683923112868819, 0.17684727620966678, 0.15228508077318514, 0.19373374401611232, 0.16076117238894583, 0.19255993653492354, 0.17887722085352475, 0.19232403786499186, 0.19017858434104928, 0.1852233591434973, 0.17717416568662592, 0.19206953346635414, 0.19299329073303884, 0.19970176488611724, 0.17674479880812177, 0.18373454153214375, 0.18492093730606407, 0.16350845467581732, 0.1777218028018861, 0.17846923557512506, 0.17370886728037038, 0.1836024164731227, 0.18883442992503596, 0.12248583685114467, 0.14434708924895878, 0.15823608206391127, 0.16349670797170657, 0.1385663809415537, 0.6672032757354426, 0.7338977602958292, 0.25066124645564847, 0.40255732854771353, 0.627634221488899, 0.5693856063691233, 0.16404259325619786, 0.16458327287405572, 0.13776405822747906, 0.2097523896035971, 0.06349378708383213, 0.16880155324662316, 0.1644688557129661, 0.1873414912741851, 0.1568432640550782, 0.16465163761617985, 0.16600272802314087, 0.16763538846479664, 0.17977908635890905, 0.17254657386120076, 0.07960085908430015, 0.06207935782736862, 0.07549391427395491, 0.07148728260459392, 0.07565984549925453, 0.06701654403134816, 0.06326676638934625, 0.06825675131170683, 0.06839820322464274]}, "mutation_prompt": null}
{"id": "801bc94a-1c2b-4fd3-b22f-2c03d60246f1", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved_Dynamic:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Dynamic mutation strategy\n                fitness_vals = [func(ind) for ind in pop]\n                fitness_mean = np.mean(fitness_vals)\n                fitness_std = np.std(fitness_vals)\n                scale_factor = 0.1 + 0.9 * (fitness_std / fitness_mean)\n                F_mut = F * np.random.normal(loc=1.0, scale=scale_factor)\n                CR_mut = np.clip(CR + np.random.normal(loc=0, scale=0.1), 0, 1)\n                \n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F_mut * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F_mut * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F_mut * (gbest - pop[i]) + F_mut * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR_mut, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved_Dynamic", "description": "Enhancing the algorithm by incorporating a dynamic mutation strategy based on the population's fitness diversity to improve convergence speed and solution quality.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('scale < 0').", "error": "ValueError('scale < 0')", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {}, "mutation_prompt": null}
{"id": "d613a665-2cc6-4894-8c1a-69df5cd3893d", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99, F_min=0.2, F_max=0.8, CR_min=0.1, CR_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n        self.F_min = F_min\n        self.F_max = F_max\n        self.CR_min = CR_min\n        self.CR_max = CR_max\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_de = a + F * (b - c)\n                mutant_de = np.clip(mutant_de, -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = pop[i] + F * (gbest - pop[i]) + F * (a - b)\n                mutant_best = np.clip(mutant_best, -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_de, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            self.F = max(self.F_min, min(self.F, self.F_max))\n            self.CR = max(self.CR_min, min(self.CR, self.CR_max))\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved", "description": "Enhancing the mutation strategy by incorporating a differential evolution crossover mechanism with adaptive control over mutation scale factor.", "configspace": "", "generation": 72, "fitness": 0.21806224791475126, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.6557581126357102, 0.6347712973659119, 0.5694983486241372, 0.6448877541775997, 0.6323785762237848, 0.622867889938703, 0.640275641197209, 0.6213380512118587, 0.6580778883980696, 0.06442953557962028, 0.07576296463659804, 0.129823499735379, 9.999999999998899e-05, 0.1773054524140214, 0.11346289627803086, 0.18533264489351609, 0.040879457821157095, 0.06363797201710475, 0.11662559438247122, 0.09581657130846855, 0.09205448354686308, 0.12624458605950217, 0.11692167768642325, 0.23111575647264704, 0.07327641066190604, 0.09447575642965733, 0.06578569667951384, 0.09346539381962793, 0.08180944212540331, 0.0808688885814014, 0.07608539598930131, 0.08666330781478226, 0.13700627621211203, 0.1326554452895249, 0.04196081512649874, 0.0767336122631539, 0.9463927082936405, 0.8976702374048359, 0.9645586712891618, 0.9452951321831259, 0.9458421365606392, 0.8063151989475247, 0.9484560459378416, 0.7686633131420879, 0.12509212353713484, 0.33708600458588645, 0.31470902548143564, 0.3033733372653875, 0.31925664386233243, 0.3668640966313328, 0.3403451043199217, 0.25477069071155567, 0.3278559367372973, 0.3049769519112687, 0.3232697566893622, 0.23122825592908525, 0.21128607219898599, 0.20360867569485563, 0.19445158039565713, 0.20751670615669449, 0.24932415928327345, 0.6243628899829047, 0.1829868791860697, 0.09604500910247882, 0.11149391248871776, 0.0974164962884928, 0.16056612272785475, 0.1093727362125726, 0.11883359407596639, 0.19920960747315464, 0.15515095453911976, 0.10766376780268527, 0.1240721702129195, 0.15084238577934483, 0.13611301735901693, 0.1361559733931148, 0.11197517570956206, 0.107546700831322, 0.11669295319811646, 0.11349165685494778, 0.11742858154185565, 9.999999999998899e-05, 9.999999999998899e-05, 0.10197028561671229, 9.999999999998899e-05, 0.003249727330906116, 9.999999999998899e-05, 9.999999999998899e-05, 0.020439711337588595, 0.07942186649886718, 0.020600405020535062, 0.018155125865193078, 0.04291303302499183, 0.0469020936154817, 0.02861773714698157, 0.06334976952126203, 0.038389109100370855, 0.022722420278369793, 0.07791012559395094, 0.08060058962699079, 0.1185229829911616, 0.11735586225465633, 0.1083095796924326, 0.06258432916909862, 0.16715263318203122, 0.04091925916048511, 0.06189260423182952, 0.11365566200346056, 0.037943409673904305, 0.037434136614402425, 0.12857270512381658, 0.06808694347516231, 0.11323261524372485, 0.043801598919520845, 0.08767265369203492, 0.04779233361833779, 0.08378302250260639, 0.4212647872513622, 0.4879525148246462, 0.43114257726624106, 0.4499293854419476, 0.4505932108397922, 0.4379211489713092, 0.4165415787709542, 0.5041545653844297, 0.43047377416657284, 0.08212021052183915, 0.09052799679702872, 0.10543715481695415, 0.06361263642905146, 0.11142952843853349, 0.08749835054133892, 0.14666673820574394, 0.09661739852379447, 0.0782884339993436, 0.1591316519788768, 0.13223306102893728, 0.1859080191668644, 0.1500544955974652, 0.23206049249743954, 0.16613768012911856, 0.20754945906133015, 0.2191480729642491, 0.12457913527949716, 0.26236079840085735, 0.3064346262769606, 0.3158030277744759, 0.24664363410497359, 0.29545247130270014, 0.27432173519468583, 0.33238286704671005, 0.3185892363657178, 0.2418508808416968, 0.16778459713325677, 0.22180147471665357, 0.26499685480016844, 0.17214028113619007, 0.23301463387410914, 0.23631413503284426, 0.2506255701144432, 0.2565384006320841, 0.14989143125063786, 0.18799815939588504, 0.1950561322374279, 0.19664509508448824, 0.1666285118485039, 0.20441638381455818, 0.1738259169044324, 0.18810304514028053, 0.17767215132730996, 0.20497992821332311, 0.1850633052896904, 0.18632582195209668, 0.1745403020138825, 0.1871660726746721, 0.17925903131193932, 0.1578322017847822, 0.21178926562446332, 0.17313305846984717, 0.1737063423565074, 0.11001346980738869, 0.17057714221813802, 0.16472356148377343, 0.1766078500233984, 0.7396661346106987, 0.164671628032099, 0.16639769718900166, 0.7262598526923558, 0.18241731551383567, 0.11220202554989245, 0.42766732218498815, 0.6337549437834307, 0.16184781882026378, 0.1640599658036932, 0.16244345083869194, 0.1240399451639711, 0.2063812818571611, 0.527625962758888, 0.16470041655991063, 0.18485262646556122, 0.18510945913297172, 0.18507898509184906, 0.17425041603257374, 0.17968451649764228, 0.17323783291232142, 0.19342581294523442, 0.17451925917731592, 0.07371355538575297, 0.07579156747322557, 0.08462565317431348, 0.07435781569234967, 0.08083062241902972, 0.07186046668220747, 0.06516775813889686, 0.0716766300186038, 0.07690677248183997]}, "mutation_prompt": null}
{"id": "bea768e2-a910-4613-9e88-afc680b94cc2", "solution": "import numpy as np\n\nclass Hybrid_DE_PSO_Optimizer_Enhanced:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c, d, e = pop[np.random.choice(idxs, 5, replace=False)]\n                mutant_comb = np.clip(a + F * (b - c) + F * (d - e), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_comb, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Hybrid_DE_PSO_Optimizer_Enhanced", "description": "Enhancing the mutation strategy by introducing a new differential evolution variant combined with particle swarm optimization for improved exploration and exploitation balance.", "configspace": "", "generation": 73, "fitness": 0.2194830252381946, "feedback": "The algorithm Hybrid_DE_PSO_Optimizer_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.5740362684405248, 0.6163251488691821, 0.618157957510245, 0.61876001123488, 0.6080803750582362, 0.6167053598974817, 0.6064865838947628, 0.5979406022180096, 0.5868106805795164, 0.1448534691156831, 0.06896629390436826, 0.339314245546794, 9.999999999998899e-05, 0.0875513456351169, 0.06789853212993746, 0.08172572232996611, 0.13594301432306166, 0.041828645125014385, 0.09991529956438316, 0.09726289555111212, 0.07609919587031688, 0.1147530679406571, 0.11999825980833989, 0.11391914581423446, 0.0873432114435565, 0.10695365046444494, 0.11911076344488025, 0.08986094485838836, 0.08046765916716792, 0.09709054565715136, 0.08562860773038594, 0.10806872481749796, 0.09503371441341424, 0.0686162586689203, 0.09078638097029379, 0.10523174460205742, 0.9331216177853235, 0.960528119396372, 0.8824340673437954, 0.9427643187525397, 0.9650630521449075, 0.9305804302765974, 0.8540472177767177, 0.9490469957598688, 0.851160129991027, 0.23251919435554924, 0.3194011304716394, 0.3240512143485236, 0.2274679854441608, 0.2290599437146731, 0.24066010010882732, 0.2936571433871136, 0.2638606957237194, 0.17788275565826295, 0.21911424434478755, 0.2155275310629613, 0.5444325716796037, 0.18829160008796864, 0.23848216991692905, 0.6129995868353346, 0.33097417055192435, 0.1709121671727839, 0.1573744729083132, 0.10190713022206876, 0.17864372929869665, 0.10171478075875096, 0.12738349214402478, 0.07666758586270972, 0.13523705664143348, 0.13066146860346284, 0.12978748442293253, 0.13650596306879048, 0.11839634372710339, 0.10745444942224092, 0.0832124595230711, 0.2402199970408665, 0.13025630373300323, 0.10215308796304057, 0.11021955602430955, 0.11499578860951076, 0.13445952889399104, 0.0012337397393217264, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01261513256232849, 0.010272453917218427, 9.999999999998899e-05, 9.999999999998899e-05, 0.00022178034441699968, 0.0647280453344089, 0.05760571080830701, 0.023704952281155434, 0.1079742828021868, 0.061690868250997344, 0.06942304533994736, 0.093372551105393, 0.09113682674544965, 0.045896500591001366, 0.03666860843351938, 0.11403937083927829, 0.03800102769600866, 0.044575013737805036, 0.09404725249346646, 0.057369391867624686, 0.05615242209447591, 0.09249760732303058, 0.038981584152624205, 0.1544977683751546, 0.05690445165502933, 0.15392887406442313, 0.10468641142622714, 0.17764669406441225, 0.07643485637607539, 0.0513698984766634, 0.07370016359394338, 0.06939999105871908, 0.4654697014507073, 0.4208910176228394, 0.47967470759414277, 0.4758322972106688, 0.4998549043818553, 0.3834625813760467, 0.4500304693202626, 0.42934218254642775, 0.3960364747111774, 0.10689707387856628, 0.08496826972489147, 0.11643880742736856, 0.09473621801850352, 0.08817064935726726, 0.08809067853435915, 0.08373904760040218, 0.08610701990688963, 0.08744762917427984, 0.21228549504120697, 0.1334017519432631, 0.1711018234693633, 0.20452782854925966, 0.1447165539279296, 0.13779894552428618, 0.20776137955171226, 0.15708497041078662, 0.17236328165479264, 0.26519371443584583, 0.3088457982754599, 0.290516333635933, 0.309964951506583, 0.32016449836679783, 0.26519978558310076, 0.31967878283405526, 0.3204414723057327, 0.35478433722579716, 0.20224690087420405, 0.17716492488748314, 0.25493627286878917, 0.1732776072784834, 0.1805022695709938, 0.22330883379401223, 0.1479963307271671, 0.24418312168007572, 0.17530651562311506, 0.18745870423078181, 0.19935378168600826, 0.20274715587409753, 0.19427068574092476, 0.17844060089627656, 0.19017873107468763, 0.212021627762092, 0.19380261014689082, 0.20353223848160362, 0.17263669407965354, 0.1965256359486901, 0.1728558972017652, 0.17230596177907131, 0.17649505496045526, 0.19013536067741033, 0.19112938676641866, 0.19153771549684329, 0.17468460211513703, 0.1251585227559282, 0.15583238146420864, 0.17765051644184293, 0.16208830572969712, 0.1844659425630618, 0.16450951631018307, 0.6769409665239721, 0.19672702483077498, 0.6909328024445355, 0.11768129755267875, 0.2642298858309209, 0.4485842518108799, 0.15870791302364118, 0.16352010644539006, 0.1588200068577006, 0.41716240519246395, 0.2057093684651271, 0.5571065117902658, 0.16417007897783475, 0.16682448137284422, 0.17407159401149053, 0.17014686331879225, 0.1758675484438481, 0.1614224958707069, 0.19366978455438144, 0.166128975853858, 0.16927915719676112, 0.06257751077537954, 0.07904723304553385, 0.07067368900074578, 0.08102060972209779, 0.07731441480113499, 0.06761063308482584, 0.0752522200082858, 0.1048481462206099, 0.09633119574511162]}, "mutation_prompt": null}
{"id": "5b53d0bb-5225-45b4-b3d6-ecd47c8810b3", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Chaotic map mutation\n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved", "description": "Improving the diversity and exploration capability by incorporating a chaotic map to enhance population initialization and mutation.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.5985905945981405, 0.6418528239427833, 0.6570889863489574, 0.6353921269474867, 0.6338449918771525, 0.6042417061176297, 0.6163728086519452, 0.575646372611454, 0.6464590804013055, 0.2232009576963434, 0.34397932449127433, 0.14420175404675206, 0.059806823707136525, 0.3082210710292538, 0.07344837567737306, 0.14408304230863667, 0.26936096546079646, 0.32922791630692705, 0.09619114933103334, 0.11596585884156829, 0.09946162895579713, 0.1037786134888724, 0.10857055778090285, 0.11277059764070052, 0.10507273837914233, 0.12194849081277792, 0.08711688823531605, 0.09173395431576481, 0.09492870114022534, 0.128280411142366, 0.10979032010573264, 0.07807082070344062, 0.09674000702860686, 0.11035476486537532, 0.07845389968075978, 0.12830682054568676, 0.9308524261822319, 0.9329473198789054, 0.8595397987773026, 0.9387275042401223, 0.9643825927576669, 0.9247713529494166, 0.9111981869655849, 0.9707917223320971, 0.7977798208508912, 0.2389365461465921, 0.31756920610218453, 0.38229528473536134, 0.32101015994509274, 0.35568838001649483, 0.22757218454099726, 0.23866581722622426, 0.33665671862741975, 0.3123005058576366, 0.6248564407239947, 0.34103012988596815, 0.33859527928949307, 0.24157999635742666, 0.6322283688191209, 0.335069677759928, 0.25989943116694547, 0.6639519454319931, 0.2374271224223562, 0.17924883055892538, 0.1500154215906292, 0.14638712818586896, 0.129570191340047, 0.10382024209285223, 0.1533687252746373, 0.10455141627464415, 0.13458357032178048, 0.12111122430063348, 0.1824721237186211, 0.1340776634011117, 0.12190726078103686, 0.09507741255803848, 0.12543625674509296, 0.12782125882869455, 0.16142857467638372, 0.11199116658566621, 0.11553898829569353, 0.027407056415422404, 0.008203505484840945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03318422347828509, 9.999999999998899e-05, 0.029269717227038416, 0.0396062241687658, 0.06377516339489009, 0.035397582296437746, 0.02558961656730485, 0.01947971271179172, 0.08063993157947225, 0.05093145931889176, 0.0986806069664442, 0.09279406763273257, 0.04686516063132928, 0.14069585501140014, 0.19283049032685307, 0.05834415910569024, 0.0702740576952321, 0.1345793069884874, 0.04413650041774053, 0.12150589661408051, 0.14822063018943465, 0.07396383478611879, 0.16693377537086473, 0.1503329536493746, 0.13758102992693766, 0.14553552139744375, 0.05116696708477253, 0.07735028612795014, 0.09562686187792513, 0.10253285420313207, 0.4083003456634795, 0.42655599155494406, 0.4342171386386007, 0.4325393898133556, 0.40588229323753144, 0.4599397181217444, 0.4845047372994069, 0.40677692430646717, 0.42611284815252215, 0.05993232797653314, 0.09977013582226768, 0.11121632037371743, 0.08308879893924148, 0.1195110614475472, 0.10837830293423745, 0.06668786887924738, 0.10105432906983947, 0.11606697652862008, 0.15407550159332206, 0.16554913086577527, 0.14278590933571467, 0.15348017719495222, 0.17631811151326315, 0.1713309271125767, 0.15075486896471813, 0.18772445163066398, 0.2287601534111503, 0.2754191704396808, 0.23328223906020973, 0.31072103768151993, 0.3018894052992438, 0.28274722359761273, 0.2673674505655156, 0.31351352880932415, 0.3064070492215085, 0.27853576062689567, 0.2933702678194928, 0.25166133533206414, 0.24863721085947033, 0.24207429628457877, 0.19147898154088572, 0.25599869590673985, 0.20371607575939665, 0.1812448021370584, 0.1730872958475428, 0.2117345911961237, 0.19533986473056697, 0.17667988154800895, 0.1702932235764223, 0.17857069421007232, 0.178893039393345, 0.17342025310555842, 0.19514458740706286, 0.20604436106645085, 0.18397428347751132, 0.19971088527317948, 0.20295113084663896, 0.1880078398531818, 0.19892657512586498, 0.17828210285968527, 0.19104411364134488, 0.1720987180848228, 0.18859066300600258, 0.6904284054291352, 0.1621636858976916, 0.16689677733684016, 0.7035663260180858, 0.6746563891328488, 0.16540110178050904, 0.545044330957604, 0.7468811816546959, 0.6957385647789247, 0.5523555953771957, 0.12293178214636025, 0.35176553038784175, 0.16329952672714176, 0.16187780957885012, 0.08995375257926685, 0.1242442934167649, 0.20589165791364683, 0.5901112081831372, 0.16475100012235766, 0.18024139026858954, 0.17817043005663713, 0.18386313508343033, 0.1720300354417693, 0.16935918313640708, 0.17877804597335967, 0.17810799174420977, 0.18361246234787276, 0.07974805747655356, 0.07880115241433105, 0.11929924228830346, 0.07436439395127614, 0.0754885503171765, 0.06874730089126058, 0.08464045586697411, 0.07931779789379145, 0.06825964553982888]}, "mutation_prompt": null}
{"id": "66b74e69-b92a-46b4-8dca-b2a5759343db", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved_Refined:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def differential_mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_de = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_de, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = differential_mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved_Refined", "description": "Enhancing the mutation strategy by incorporating a differential evolution approach to improve local search capabilities.", "configspace": "", "generation": 75, "fitness": 0.2192630939228941, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer_Improved_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.6390578148376589, 0.6407510333013562, 0.6583521683240157, 0.6179830475094941, 0.6244005357917998, 0.6209759525138572, 0.6393235700827853, 0.6151914894404007, 0.6598334971466453, 0.06045197654516887, 0.08717380175430955, 0.24502952884213236, 9.999999999998899e-05, 0.09732040807297382, 0.0821994191133062, 0.35368670021246906, 0.043005238731987805, 0.11497138468144186, 0.11833096459244075, 0.09606036478612046, 0.09651338463504744, 0.1242265974634087, 0.09492010375377524, 0.13121617520546935, 0.07464493023669061, 0.09821808721300973, 0.06585005155774193, 0.09720791769422377, 0.08695644424497384, 0.08126644611512124, 0.08697137695971091, 0.08849764019945139, 0.1406377468542399, 0.10968854845159437, 0.03880662762100606, 0.07370681862525086, 0.9463927082936405, 0.8976702374048359, 0.9645586712891618, 0.9452951321831259, 0.9458421365606392, 0.8063151989475247, 0.9484560459378416, 0.7686633131420879, 0.12616856472231974, 0.2632861633288748, 0.2942695979814305, 0.24922542883086785, 0.25363783438903054, 0.3097564293198216, 0.3732188124291702, 0.20963274724649794, 0.3020316044073197, 0.33493752280634104, 0.33505960382174893, 0.43815755886688135, 0.2118281072761331, 0.20360867569485563, 0.19445158039565713, 0.20751670615669449, 0.23132870158690777, 0.6412723743318917, 0.1829868791860697, 0.10025664564679848, 0.1086609242706027, 0.10719566632551691, 0.17779987068812375, 0.10901851371239868, 0.11718208334059455, 0.20721471760069177, 0.1596473108837646, 0.1074002842784203, 0.12203920573796145, 0.14690830068911653, 0.12904213969091738, 0.12909905329296412, 0.109119335062004, 0.10758852000151642, 0.11668477512612607, 0.12366215352959897, 0.11711057228309552, 9.999999999998899e-05, 9.999999999998899e-05, 0.06946274133975017, 9.999999999998899e-05, 0.009980828400043329, 9.999999999998899e-05, 9.999999999998899e-05, 0.02160548403192275, 0.07088415806870141, 0.02197963531482694, 0.017961127159983103, 0.03146635227974437, 0.04494822114535779, 0.04111829217832497, 0.059268313128418626, 0.05421993250689505, 0.027559473131583023, 0.07875688295019156, 0.09603054772792241, 0.07460931300280149, 0.1258645765373887, 0.14042796953902237, 0.07331080371739351, 0.16477107880526332, 0.041400557610479116, 0.06493205067286378, 0.11333785698029275, 0.03381632883906982, 0.03807207224465914, 0.13106338993548217, 0.07172591118213678, 0.11515027479658801, 0.048897727068566876, 0.09524069080042841, 0.04732355245348008, 0.08539460448158753, 0.42708392655070615, 0.44041354823388834, 0.43851958354577414, 0.4431019766798935, 0.461158970473202, 0.4476474618762454, 0.4380090432283743, 0.4869321157036256, 0.41180995386325414, 0.08193968784719796, 0.08696983323259011, 0.10494497117469104, 0.05899626205496966, 0.11236968642448553, 0.08846191982229434, 0.14699755174443763, 0.1068024452085119, 0.07897103899167868, 0.18215762286622883, 0.13977876350109186, 0.19099254187173886, 0.15763507822041867, 0.23350998213361895, 0.16109257098368923, 0.19604508637665863, 0.22143600659673712, 0.13465633453151493, 0.25188779486936086, 0.28311546490023143, 0.2931279441219705, 0.3736530969212588, 0.27458369074959965, 0.25838429710890654, 0.31966930634332724, 0.27054349165342795, 0.3231448889415226, 0.16778459713325677, 0.21721814249336413, 0.25167507335170514, 0.16463971712989756, 0.248385932106566, 0.24678981036901182, 0.22813505244326315, 0.27641662088391017, 0.14375669682307757, 0.19957003067596468, 0.19588640809543134, 0.1897761453234924, 0.16932791965913707, 0.2003752946717995, 0.18591660934786558, 0.2075513280501261, 0.1779806342917578, 0.20497992821332311, 0.18673589464697204, 0.18644024142915872, 0.17088545406071387, 0.19646437808103212, 0.17471545781784703, 0.1637374362779065, 0.21458753174724954, 0.17354768727936176, 0.18329019642108202, 0.11001346980738869, 0.17057859123104713, 0.16470928256911188, 0.17660650014455082, 0.7412466139026708, 0.16467181637638728, 0.1663987431286219, 0.717941491721247, 0.18241959966487453, 0.11178320506271977, 0.544030558026705, 0.6237158628673931, 0.1618484485659989, 0.16405948151616134, 0.16244358181744667, 0.12404050890122342, 0.20637959878129775, 0.4445336280877221, 0.17222330321964796, 0.18485896212300312, 0.16552226529296699, 0.185712693589556, 0.1713848924307545, 0.1794829163025865, 0.17407384862924113, 0.17864710972459963, 0.1694523060580594, 0.07701471021204032, 0.07588126574963283, 0.08506571693960574, 0.08283688527602184, 0.07875860347537889, 0.08077132947141286, 0.05560127426620565, 0.08153811236913555, 0.07566000203147838]}, "mutation_prompt": null}
{"id": "0da6ad15-5fce-4185-8428-6b0cb40beb12", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Adaptive:\n    def __init__(self, budget, dim, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = 30\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Chaotic map mutation\n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n\n            # Adaptive population size\n            if _ % 100 == 0:  # Adjust population size every 100 iterations\n                if np.random.rand() > 0.5:  # Randomly increase or decrease population by 10%\n                    self.npop = int(min(100, self.npop * 1.1))\n                else:\n                    self.npop = int(max(10, self.npop * 0.9))\n                pop = np.vstack((pop, initialize_population(self.npop - pop.shape[0], self.dim)))\n                pbest = np.vstack((pbest, initialize_population(self.npop - pbest.shape[0], self.dim)))\n                velocity = np.vstack((velocity, np.zeros((self.npop - velocity.shape[0], self.dim))))\n\n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Adaptive", "description": "Enhancing diversity and convergence by incorporating a dynamic population size that adapts with the optimization process.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('all the input array dimensions except for the concatenation axis must match exactly, but along dimension 1, the array at index 0 has size 5 and the array at index 1 has size 0').", "error": "ValueError('all the input array dimensions except for the concatenation axis must match exactly, but along dimension 1, the array at index 0 has size 5 and the array at index 1 has size 0')", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {}, "mutation_prompt": null}
{"id": "09f45d05-6a81-4c89-b113-bc75db1b5a54", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer(Enhanced_DE_PSO_Optimizer_Improved):\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99, F_min=0.2, F_max=0.8, CR_min=0.1, CR_max=0.9):\n        super().__init__(budget, dim, npop, F, CR, w, c1, c2, F_decay, CR_decay, w_decay, c1_decay, c2_decay)\n        self.F_min = F_min\n        self.F_max = F_max\n        self.CR_min = CR_min\n        self.CR_max = CR_max\n\n    def __call__(self, func):\n        def mutate(pbest, gbest, pop, F, CR):\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Dynamic mutation strategy\n                fitness_values = [func(ind) for ind in pop]\n                mean_fitness = np.mean(fitness_values)\n                std_fitness = np.std(fitness_values)\n                if std_fitness > 0:\n                    F = np.clip(np.abs(np.random.normal(F, 0.1)), self.F_min, self.F_max)\n                    CR = np.clip(np.abs(np.random.normal(CR, 0.1)), self.CR_min, self.CR_max)\n\n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest", "name": "Dynamic_DE_PSO_Optimizer", "description": "Increasing the diversity and convergence speed by implementing a dynamic mutation strategy that adapts F and CR parameters based on the population fitness.", "configspace": "", "generation": 77, "fitness": 0.0, "feedback": "The algorithm Dynamic_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "4b4ea0f0-9b63-4562-8e6a-6893d117c836", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Opposition:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def opposition_based(x, lower, upper):\n            return lower + upper - x\n\n        def initialize_population(npop, dim):\n            pop = np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n            return np.where(np.random.rand(npop, dim) < 0.5, pop, opposition_based(pop, -5.0, 5.0))\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Opposition", "description": "Enhancing the diversity and convergence speed by incorporating opposition-based learning to explore both the objective function landscape and its counterpart.", "configspace": "", "generation": 78, "fitness": 0.2239513093781081, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer_Opposition got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.6123315266177198, 0.6278113870391435, 0.6391877193769586, 0.6435321279632049, 0.6314268614235357, 0.612753628538014, 0.6209992857212883, 0.6206887304452768, 0.6480402333593482, 0.11874144411152465, 0.21561855492131377, 0.28728028869460576, 0.18347424125678358, 0.3532433499489299, 0.1719756327202383, 0.126267138489341, 0.1458310380186587, 0.11838245354038512, 0.09113413300970263, 0.10631736167417671, 0.11063525097959159, 0.11370394458409938, 0.09254751026083063, 0.11914421726219893, 0.11778127745142197, 0.10185208132328027, 0.09993329388411143, 0.09472428580135661, 0.11891824043452215, 0.08962385880211099, 0.08461476589588923, 0.09357036339219504, 0.0979460467430665, 0.07229462326979152, 0.10861227566680043, 0.08202054364371503, 0.9284588704042206, 0.9492059309313585, 0.8970708296991639, 0.9548513560279913, 0.8657466135469004, 0.9605074959869395, 0.9023456873883792, 0.8768300292373388, 0.9615619325237434, 0.2987670364459034, 0.29135240848185917, 0.2834852845307906, 0.32377692434017813, 0.25812929491550474, 0.32120467752661774, 0.34818082253505467, 0.3781692435130469, 0.30806830385563133, 0.20320404359715905, 0.21494701067463107, 0.19369800767327505, 0.6595184630727603, 0.26876911817674354, 0.20624366805966732, 0.7347527523449315, 0.14365088156332817, 0.5188242505721075, 0.2509078805463666, 0.09534896607666143, 0.1019411508258119, 0.12745982275535805, 0.11359661812809685, 0.11879472831653037, 0.1330706027174432, 0.11472395404547786, 0.12573484705479954, 0.10511417748843199, 0.14539443073405223, 0.09955944982439269, 0.1328761407661766, 0.11657894159146986, 0.11379575592785329, 0.14024047218082292, 0.17802334399972208, 0.2110810826577627, 0.006969455423753823, 0.04326928543048092, 9.999999999998899e-05, 0.10647571851304005, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002455568015171661, 9.999999999998899e-05, 9.999999999998899e-05, 0.10131710538386274, 0.027160674706280585, 0.08214340450668622, 0.013903517477512839, 0.024792870372628895, 0.10869901032446505, 0.03219850787643186, 0.15538467790493782, 0.10547063764758258, 0.023374842976306764, 0.027220844771955632, 0.05629541944745631, 0.08532196325628505, 0.0625781806224811, 0.10168921462822289, 0.09568880747165986, 0.05112892569200378, 0.06412266054713922, 0.09849958558631611, 0.11648639242631798, 0.06635794937226347, 0.05147782262589495, 0.08673203939442009, 0.1331711682890987, 0.10589005559617348, 0.06283543599136587, 0.06886054616780979, 0.4212064103152926, 0.413608853611075, 0.4450094669146756, 0.4434739367221525, 0.4371259023158567, 0.42186950727013894, 0.43025305126226654, 0.49016864355035095, 0.4600887133496171, 0.11003273758570709, 0.09085371622795901, 0.07581233029118628, 0.10246381025545492, 0.08434232488272142, 0.0723621401896617, 0.10408370126852606, 0.0919648681148687, 0.0786041684983898, 0.2067298973791568, 0.13513213352653908, 0.13807630848431696, 0.20887636223775619, 0.13598405427276306, 0.23811725966356023, 0.2366083985930214, 0.1627462786737478, 0.14877398892501037, 0.224270977260142, 0.2951094833996646, 0.31805030449437877, 0.341390821757791, 0.2729618047136523, 0.24138460571879283, 0.31112426220982503, 0.27547566452828864, 0.3299385209725846, 0.1945436753768135, 0.256341138377827, 0.21320722485203247, 0.24454411765049466, 0.1966362113503014, 0.2396367894547562, 0.21850928889429289, 0.23772556350658047, 0.2198908188166686, 0.19438115228165387, 0.1807755660117102, 0.1869706243309316, 0.18963855634797933, 0.19615670278968977, 0.17539074083429151, 0.17604857651737404, 0.15370542059016878, 0.2076583574721932, 0.179022899628415, 0.1821291461557385, 0.19397816613913121, 0.18402261874162062, 0.18363939538717056, 0.18434793717743747, 0.18873814319334214, 0.18563414501762499, 0.19667699097255875, 0.13911782566853503, 0.17208785197131315, 0.14758916233755737, 0.08293370783890419, 0.171453251315699, 0.6628423434628508, 0.1663663033686591, 0.1537811985811557, 0.15270698333907895, 0.122527331442705, 0.19271307301605556, 0.1987685600204646, 0.1610648011735002, 0.16492699351190154, 0.15523758894820316, 0.5800049412238133, 0.1108814900470334, 0.14801367663969012, 0.18278688485325134, 0.1754738022077208, 0.1667561354617494, 0.17332994388489475, 0.1950877385745441, 0.18760907713994135, 0.1905048251223589, 0.1862742092071933, 0.20093727560784425, 0.08993545837322414, 0.06218497031868886, 0.06474033642854504, 0.07439615051720716, 0.07669999862621424, 0.0723987550751981, 0.07214954000314644, 0.0734284995718344, 0.07696146672503801]}, "mutation_prompt": null}
{"id": "736dc012-fe04-4ec8-b423-b5b421ef14c6", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Chaotic map mutation\n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved", "description": "Improving the diversity and exploration capability by incorporating a chaotic map to enhance population initialization and mutation.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.5985905945981405, 0.6418528239427833, 0.6570889863489574, 0.6353921269474867, 0.6338449918771525, 0.6042417061176297, 0.6163728086519452, 0.575646372611454, 0.6464590804013055, 0.2232009576963434, 0.34397932449127433, 0.14420175404675206, 0.059806823707136525, 0.3082210710292538, 0.07344837567737306, 0.14408304230863667, 0.26936096546079646, 0.32922791630692705, 0.09619114933103334, 0.11596585884156829, 0.09946162895579713, 0.1037786134888724, 0.10857055778090285, 0.11277059764070052, 0.10507273837914233, 0.12194849081277792, 0.08711688823531605, 0.09173395431576481, 0.09492870114022534, 0.128280411142366, 0.10979032010573264, 0.07807082070344062, 0.09674000702860686, 0.11035476486537532, 0.07845389968075978, 0.12830682054568676, 0.9308524261822319, 0.9329473198789054, 0.8595397987773026, 0.9387275042401223, 0.9643825927576669, 0.9247713529494166, 0.9111981869655849, 0.9707917223320971, 0.7977798208508912, 0.2389365461465921, 0.31756920610218453, 0.38229528473536134, 0.32101015994509274, 0.35568838001649483, 0.22757218454099726, 0.23866581722622426, 0.33665671862741975, 0.3123005058576366, 0.6248564407239947, 0.34103012988596815, 0.33859527928949307, 0.24157999635742666, 0.6322283688191209, 0.335069677759928, 0.25989943116694547, 0.6639519454319931, 0.2374271224223562, 0.17924883055892538, 0.1500154215906292, 0.14638712818586896, 0.129570191340047, 0.10382024209285223, 0.1533687252746373, 0.10455141627464415, 0.13458357032178048, 0.12111122430063348, 0.1824721237186211, 0.1340776634011117, 0.12190726078103686, 0.09507741255803848, 0.12543625674509296, 0.12782125882869455, 0.16142857467638372, 0.11199116658566621, 0.11553898829569353, 0.027407056415422404, 0.008203505484840945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03318422347828509, 9.999999999998899e-05, 0.029269717227038416, 0.0396062241687658, 0.06377516339489009, 0.035397582296437746, 0.02558961656730485, 0.01947971271179172, 0.08063993157947225, 0.05093145931889176, 0.0986806069664442, 0.09279406763273257, 0.04686516063132928, 0.14069585501140014, 0.19283049032685307, 0.05834415910569024, 0.0702740576952321, 0.1345793069884874, 0.04413650041774053, 0.12150589661408051, 0.14822063018943465, 0.07396383478611879, 0.16693377537086473, 0.1503329536493746, 0.13758102992693766, 0.14553552139744375, 0.05116696708477253, 0.07735028612795014, 0.09562686187792513, 0.10253285420313207, 0.4083003456634795, 0.42655599155494406, 0.4342171386386007, 0.4325393898133556, 0.40588229323753144, 0.4599397181217444, 0.4845047372994069, 0.40677692430646717, 0.42611284815252215, 0.05993232797653314, 0.09977013582226768, 0.11121632037371743, 0.08308879893924148, 0.1195110614475472, 0.10837830293423745, 0.06668786887924738, 0.10105432906983947, 0.11606697652862008, 0.15407550159332206, 0.16554913086577527, 0.14278590933571467, 0.15348017719495222, 0.17631811151326315, 0.1713309271125767, 0.15075486896471813, 0.18772445163066398, 0.2287601534111503, 0.2754191704396808, 0.23328223906020973, 0.31072103768151993, 0.3018894052992438, 0.28274722359761273, 0.2673674505655156, 0.31351352880932415, 0.3064070492215085, 0.27853576062689567, 0.2933702678194928, 0.25166133533206414, 0.24863721085947033, 0.24207429628457877, 0.19147898154088572, 0.25599869590673985, 0.20371607575939665, 0.1812448021370584, 0.1730872958475428, 0.2117345911961237, 0.19533986473056697, 0.17667988154800895, 0.1702932235764223, 0.17857069421007232, 0.178893039393345, 0.17342025310555842, 0.19514458740706286, 0.20604436106645085, 0.18397428347751132, 0.19971088527317948, 0.20295113084663896, 0.1880078398531818, 0.19892657512586498, 0.17828210285968527, 0.19104411364134488, 0.1720987180848228, 0.18859066300600258, 0.6904284054291352, 0.1621636858976916, 0.16689677733684016, 0.7035663260180858, 0.6746563891328488, 0.16540110178050904, 0.545044330957604, 0.7468811816546959, 0.6957385647789247, 0.5523555953771957, 0.12293178214636025, 0.35176553038784175, 0.16329952672714176, 0.16187780957885012, 0.08995375257926685, 0.1242442934167649, 0.20589165791364683, 0.5901112081831372, 0.16475100012235766, 0.18024139026858954, 0.17817043005663713, 0.18386313508343033, 0.1720300354417693, 0.16935918313640708, 0.17877804597335967, 0.17810799174420977, 0.18361246234787276, 0.07974805747655356, 0.07880115241433105, 0.11929924228830346, 0.07436439395127614, 0.0754885503171765, 0.06874730089126058, 0.08464045586697411, 0.07931779789379145, 0.06825964553982888]}, "mutation_prompt": null}
{"id": "ff276c5d-c348-4a8b-a74d-28dee80866db", "solution": "import numpy as np\n\nclass Hybrid_DE_PSO_Optimizer_Enhanced:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def blend_mutate(pbest, gbest, pop, F, CR, w, c1, c2):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Differential Evolution Component\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_de = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # Particle Swarm Optimization Component\n                velocity_i = w * pop[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity_i = np.clip(velocity_i, -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_de, velocity_i)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        pop = np.random.uniform(-5.0, 5.0, (self.npop, self.dim))\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = blend_mutate(pbest, gbest, pop, self.F, self.CR, self.w, self.c1, self.c2)\n        \n        return gbest", "name": "Hybrid_DE_PSO_Optimizer_Enhanced", "description": "Enhancing the mutation strategy by incorporating a blend of differential evolution and particle swarm optimization components to improve exploration and exploitation balance.", "configspace": "", "generation": 80, "fitness": 0.10617115578582001, "feedback": "The algorithm Hybrid_DE_PSO_Optimizer_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.07.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.24059687266503715, 0.23722180729846076, 0.2201728067478097, 0.18289761511346003, 0.18779227156182599, 0.17243051382104913, 0.20645205562692504, 0.1604386475489189, 0.23061181665349095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011165597371278757, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04946969505268917, 0.048303800000260355, 0.07033947808802732, 0.053152598319746946, 0.055848566751235396, 0.07552359357228255, 0.05670134149408479, 0.07233971367274206, 0.06173782725003496, 0.0642664360205143, 0.05054487597166224, 0.04015431337153552, 0.05099359891970401, 0.048387989586104796, 0.035892631599000246, 0.04996041712325183, 0.05531096122790036, 0.058006468243421816, 0.09834845846058582, 0.08216106793881739, 0.12768629773666995, 0.0756570286599153, 0.08555554690362155, 0.0992014903649151, 0.09492541956862932, 0.09482413501283105, 0.13883288471387745, 0.11137206921405218, 0.08522359060473295, 0.08409220995172928, 0.06474038756263722, 0.10331617435415175, 0.08238244197148559, 0.13094607035112837, 0.06469817574620573, 0.054614553933437504, 0.1776398057194679, 0.15983284455971647, 0.16472766551961482, 0.150352322156469, 0.1969512988894493, 0.15449485781355377, 0.13210710744606458, 0.16652923969899625, 0.14442902114100342, 0.12923475573968612, 0.10045073325696663, 0.05816815384318885, 0.04246606684161869, 0.04820888551181324, 0.027383020802703495, 0.01697751159934957, 0.02613566289146474, 0.05367770914943759, 0.10495108593114577, 0.1333658669259148, 0.1243251842778842, 0.16079711714163136, 0.13120719912551682, 0.14800255899357584, 0.1460854334166536, 0.11946116526769002, 0.20863493642616782, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03459756411397319, 0.0485645351655668, 0.04292043156955938, 0.05494328371374868, 0.06527552419973326, 0.03577196982611475, 0.08627838874741522, 0.054994917720769254, 0.017463804124943305, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007590279952905621, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012741535283996241, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.21327909892722619, 0.283885486295549, 0.23408634079607304, 0.19596793025696757, 0.21987401996011635, 0.17830573623751877, 0.2751055718900033, 0.21621273556493137, 0.22239327233558537, 0.045196283796117176, 0.04026083568498939, 0.03398448921258901, 0.06924499457435052, 0.06311907662084137, 0.04941530206670164, 0.08104863885109681, 0.07207905448402341, 0.06522652522557659, 0.131120137626633, 0.11515411268402842, 0.10534756095840636, 0.10526912086555695, 0.14144494953406606, 0.11707223808610578, 0.129014059225539, 0.1035404032583972, 0.10941740746002249, 0.17238094813021798, 0.16787265122336015, 0.16436613534899003, 0.2074563914287394, 0.20521335787265726, 0.21516525669078934, 0.18305056007471543, 0.1920095602245645, 0.17385423066844163, 0.12254897611222804, 0.13299078335935577, 0.1380500747172615, 0.13039883653419415, 0.16024463842660175, 0.14846575430665254, 0.14423646426951386, 0.13033472493387877, 0.11813163562536833, 0.1912650410927641, 0.19099407703034554, 0.23111886887612898, 0.20167053454064388, 0.20110799220231257, 0.1860078038429983, 0.19779406589068038, 0.1911128164385163, 0.20599254846956006, 0.15816384554038798, 0.1553544306072694, 0.1555020958503086, 0.15935694957152158, 0.15040368097076007, 0.15133019344911536, 0.16097837217953948, 0.1672028971692986, 0.16494341875585683, 0.16949734199582434, 0.15901365798873635, 0.10833063292226652, 0.21145689783399024, 0.1614983277671863, 0.15028319691673298, 0.14071634248223075, 0.11910536721868992, 0.16539350661138974, 0.21122474605725072, 0.1692954276902392, 0.2540746702201635, 0.1394729416162791, 0.12462630720063594, 0.1314710934090113, 0.12083246917446466, 0.1450935919451053, 0.1646681341982218, 0.17419755236169565, 0.1728735386795477, 0.18692684316399033, 0.1663307006520256, 0.18180844024745868, 0.16668806062118924, 0.19481590659822212, 0.1730448674909736, 0.1692458709591228, 0.058767699395535944, 0.05853104934331532, 0.057197576582865284, 0.05220518456714085, 0.06813036976500075, 0.08341074760543288, 0.06220213298306676, 0.05400657759865646, 0.057113162375714066]}, "mutation_prompt": null}
{"id": "70b42d9a-d699-427e-8c03-2f7e7757993f", "solution": "class Enhanced_DE_PSO_Optimizer_Improved_Refined(Enhanced_DE_PSO_Optimizer_Improved):\n    ...\n    def mutate(pbest, gbest, pop, F, CR):\n        mutant_pop = []\n        for i in range(self.npop):\n            idxs = [idx for idx in range(self.npop) if idx != i]\n            \n            # Opposition-based learning mutation\n            opp_pop = 2.0 * gbest - pop[i]\n            mutant_opp = np.clip(opp_pop + F * (opp_pop - pop[i]), -5.0, 5.0)\n            \n            a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n            mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n            a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n            mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n            \n            mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n            \n            if func(mutant) < func(pop[i]):\n                pop[i] = mutant\n            if func(mutant) < func(pbest[i]):\n                pbest[i] = mutant\n            if func(mutant) < func(gbest):\n                gbest = mutant\n        return pop, pbest, gbest\n    ...", "name": "Enhanced_DE_PSO_Optimizer_Improved_Refined", "description": "Enhancing the population diversity by introducing a novel mutation strategy based on opposition-based learning to improve convergence performance.", "configspace": "", "generation": 81, "fitness": 0.21806224791475126, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer_Improved_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.6557581126357102, 0.6347712973659119, 0.5694983486241372, 0.6448877541775997, 0.6323785762237848, 0.622867889938703, 0.640275641197209, 0.6213380512118587, 0.6580778883980696, 0.06442953557962028, 0.07576296463659804, 0.129823499735379, 9.999999999998899e-05, 0.1773054524140214, 0.11346289627803086, 0.18533264489351609, 0.040879457821157095, 0.06363797201710475, 0.11662559438247122, 0.09581657130846855, 0.09205448354686308, 0.12624458605950217, 0.11692167768642325, 0.23111575647264704, 0.07327641066190604, 0.09447575642965733, 0.06578569667951384, 0.09346539381962793, 0.08180944212540331, 0.0808688885814014, 0.07608539598930131, 0.08666330781478226, 0.13700627621211203, 0.1326554452895249, 0.04196081512649874, 0.0767336122631539, 0.9463927082936405, 0.8976702374048359, 0.9645586712891618, 0.9452951321831259, 0.9458421365606392, 0.8063151989475247, 0.9484560459378416, 0.7686633131420879, 0.12509212353713484, 0.33708600458588645, 0.31470902548143564, 0.3033733372653875, 0.31925664386233243, 0.3668640966313328, 0.3403451043199217, 0.25477069071155567, 0.3278559367372973, 0.3049769519112687, 0.3232697566893622, 0.23122825592908525, 0.21128607219898599, 0.20360867569485563, 0.19445158039565713, 0.20751670615669449, 0.24932415928327345, 0.6243628899829047, 0.1829868791860697, 0.09604500910247882, 0.11149391248871776, 0.0974164962884928, 0.16056612272785475, 0.1093727362125726, 0.11883359407596639, 0.19920960747315464, 0.15515095453911976, 0.10766376780268527, 0.1240721702129195, 0.15084238577934483, 0.13611301735901693, 0.1361559733931148, 0.11197517570956206, 0.107546700831322, 0.11669295319811646, 0.11349165685494778, 0.11742858154185565, 9.999999999998899e-05, 9.999999999998899e-05, 0.10197028561671229, 9.999999999998899e-05, 0.003249727330906116, 9.999999999998899e-05, 9.999999999998899e-05, 0.020439711337588595, 0.07942186649886718, 0.020600405020535062, 0.018155125865193078, 0.04291303302499183, 0.0469020936154817, 0.02861773714698157, 0.06334976952126203, 0.038389109100370855, 0.022722420278369793, 0.07791012559395094, 0.08060058962699079, 0.1185229829911616, 0.11735586225465633, 0.1083095796924326, 0.06258432916909862, 0.16715263318203122, 0.04091925916048511, 0.06189260423182952, 0.11365566200346056, 0.037943409673904305, 0.037434136614402425, 0.12857270512381658, 0.06808694347516231, 0.11323261524372485, 0.043801598919520845, 0.08767265369203492, 0.04779233361833779, 0.08378302250260639, 0.4212647872513622, 0.4879525148246462, 0.43114257726624106, 0.4499293854419476, 0.4505932108397922, 0.4379211489713092, 0.4165415787709542, 0.5041545653844297, 0.43047377416657284, 0.08212021052183915, 0.09052799679702872, 0.10543715481695415, 0.06361263642905146, 0.11142952843853349, 0.08749835054133892, 0.14666673820574394, 0.09661739852379447, 0.0782884339993436, 0.1591316519788768, 0.13223306102893728, 0.1859080191668644, 0.1500544955974652, 0.23206049249743954, 0.16613768012911856, 0.20754945906133015, 0.2191480729642491, 0.12457913527949716, 0.26236079840085735, 0.3064346262769606, 0.3158030277744759, 0.24664363410497359, 0.29545247130270014, 0.27432173519468583, 0.33238286704671005, 0.3185892363657178, 0.2418508808416968, 0.16778459713325677, 0.22180147471665357, 0.26499685480016844, 0.17214028113619007, 0.23301463387410914, 0.23631413503284426, 0.2506255701144432, 0.2565384006320841, 0.14989143125063786, 0.18799815939588504, 0.1950561322374279, 0.19664509508448824, 0.1666285118485039, 0.20441638381455818, 0.1738259169044324, 0.18810304514028053, 0.17767215132730996, 0.20497992821332311, 0.1850633052896904, 0.18632582195209668, 0.1745403020138825, 0.1871660726746721, 0.17925903131193932, 0.1578322017847822, 0.21178926562446332, 0.17313305846984717, 0.1737063423565074, 0.11001346980738869, 0.17057714221813802, 0.16472356148377343, 0.1766078500233984, 0.7396661346106987, 0.164671628032099, 0.16639769718900166, 0.7262598526923558, 0.18241731551383567, 0.11220202554989245, 0.42766732218498815, 0.6337549437834307, 0.16184781882026378, 0.1640599658036932, 0.16244345083869194, 0.1240399451639711, 0.2063812818571611, 0.527625962758888, 0.16470041655991063, 0.18485262646556122, 0.18510945913297172, 0.18507898509184906, 0.17425041603257374, 0.17968451649764228, 0.17323783291232142, 0.19342581294523442, 0.17451925917731592, 0.07371355538575297, 0.07579156747322557, 0.08462565317431348, 0.07435781569234967, 0.08083062241902972, 0.07186046668220747, 0.06516775813889686, 0.0716766300186038, 0.07690677248183997]}, "mutation_prompt": null}
{"id": "932a5a6f-3776-4aba-9734-b02af6a11fcd", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved_Refined:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def dynamic_mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_best, pop[i])\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = dynamic_mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved_Refined", "description": "Enhancing the mutation strategy by incorporating a differential evolution with a dynamic mutation strategy to balance exploration and exploitation.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {}, "mutation_prompt": null}
{"id": "e6e3a9b4-23ee-4522-a7e4-c108c9fc43c2", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Adaptive:\n    def __init__(self, budget, dim, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(len(pop)):\n                idxs = [idx for idx in range(len(pop)) if idx != i]\n                \n                # Chaotic map mutation\n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(len(pop)):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(len(pop), self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Adaptive", "description": "Enhancing the diversity and exploration of the optimization algorithm by introducing a dynamic population size that adapts to the problem landscape during the optimization process.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'pop' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'pop' referenced before assignment\")", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {}, "mutation_prompt": null}
{"id": "017fba92-54d4-4154-a50a-c1c26e32d508", "solution": "class Adaptive_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def adapt_parameters(iter, max_iter):\n            self.F = self.F * self.F_decay ** (iter / max_iter)\n            self.CR = self.CR * self.CR_decay ** (iter / max_iter)\n            self.w = self.w * self.w_decay ** (iter / max_iter)\n            self.c1 = self.c1 * self.c1_decay ** (iter / max_iter)\n            self.c2 = self.c2 * self.c2_decay ** (iter / max_iter)\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for i in range(self.budget):\n            adapt_parameters(i, self.budget)\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Adaptive_DE_PSO_Optimizer", "description": "Enhancing the algorithm by introducing adaptive parameter control for F, CR, w, c1, and c2 during the optimization process.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'chaotic_map' is not defined\").", "error": "NameError(\"name 'chaotic_map' is not defined\")", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {}, "mutation_prompt": null}
{"id": "5bd05570-2ead-4d1f-a9a0-191acfde236f", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Hybrid:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99, F_scaling=0.1, CR_scaling=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n        self.F_scaling = F_scaling\n        self.CR_scaling = CR_scaling\n\n    def __call__(self, func):\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n\n                # Hybrid mutation strategy\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n\n                # Adaptive scaling factors\n                F_mutant = F + np.random.normal(0, self.F_scaling)\n                CR_mutant = CR + np.random.normal(0, self.CR_scaling)\n\n                mutant = np.where(np.random.rand(self.dim) < CR_mutant, mutant_rand, mutant_best)\n\n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n\n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n\n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n\n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Hybrid", "description": "Enhancing the mutation strategy by incorporating a hybrid approach of DE/rand/1 and DE/current-to-best/2 along with adaptive scaling factors.", "configspace": "", "generation": 85, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {}, "mutation_prompt": null}
{"id": "6d9f8321-d675-4f2c-9b03-5f66df4c9164", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99, F_min=0.2, CR_min=0.1, w_min=0.4, c1_min=0.1, c2_min=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n        self.F_min = F_min\n        self.CR_min = CR_min\n        self.w_min = w_min\n        self.c1_min = c1_min\n        self.c2_min = c2_min\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            if np.random.rand() < 0.4:  # 40% chance for adaptive adjustment\n                if np.mean(evaluate(pop)) < np.mean(evaluate(pbest)):\n                    self.F = max(self.F * 1.1, self.F_min)\n                    self.CR = min(self.CR * 0.9, self.CR_min)\n                    self.w = max(self.w * 1.1, self.w_min)\n                    self.c1 = max(self.c1 * 1.1, self.c1_min)\n                    self.c2 = max(self.c2 * 1.1, self.c2_min)\n                else:\n                    self.F = min(self.F * 0.9, self.F_min)\n                    self.CR = max(self.CR * 1.1, self.CR_min)\n                    self.w = min(self.w * 0.9, self.w_min)\n                    self.c1 = min(self.c1 * 0.9, self.c1_min)\n                    self.c2 = min(self.c2 * 0.9, self.c2_min)\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Adaptive_DE_PSO_Optimizer", "description": "Enhancing the algorithm by introducing adaptive parameter control to dynamically adjust the mutation and velocity update strategies based on the population's performance.", "configspace": "", "generation": 86, "fitness": 0.12522443135421632, "feedback": "The algorithm Adaptive_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.09.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.5951699020593431, 0.2669965080590858, 0.3451768073092393, 0.22715370090144893, 0.20340846035029858, 0.26313825784357336, 0.11729551827044327, 0.08019433087115269, 0.4465507128874415, 9.999999999998899e-05, 0.022437136791896628, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024888151629293143, 0.06988410071702855, 0.06452759601541946, 0.07665089887438603, 0.10248460863277742, 0.09038384390623322, 0.08204790517665861, 0.09401811012635886, 0.11764782838207033, 0.09566033662203377, 0.08644673197800201, 0.03234104097605428, 0.053896746558601216, 0.10275291786312968, 0.03412939048414032, 0.10127978702177187, 0.04014408511848688, 0.07670890185886237, 0.038869052438831986, 0.21275175673063973, 0.09430316770017177, 0.26908328557236305, 0.09429376385252031, 0.13260334443860555, 0.1791487445081782, 0.07338547929060601, 0.09527556224575451, 0.27132121504311657, 0.12080966637049984, 0.06680290067835426, 0.11824364851902558, 0.08856650871674465, 0.0785008702903115, 0.04988345990933796, 0.07390584679018408, 0.12347186431385015, 9.999999999998899e-05, 0.23919540408783202, 0.1960002521542189, 0.2114751410942668, 0.16064253844885157, 0.18393766814153023, 0.3412813116244573, 0.13609222140039634, 0.16644256137707436, 0.09868287992824132, 0.05254821453304925, 0.11906604721339176, 0.18846615647983977, 0.12802910905160791, 9.999999999998899e-05, 0.15113243124774456, 9.999999999998899e-05, 0.0746026168373437, 0.19464699020388954, 0.11294518355249639, 0.12676879917698913, 0.22340193390707463, 0.09976412947489077, 0.113091022814505, 9.999999999998899e-05, 0.12419541084545349, 0.10270952984379678, 0.11919421755991244, 9.999999999998899e-05, 0.07245803054594957, 9.999999999998899e-05, 9.999999999998899e-05, 0.0066685489562674505, 9.999999999998899e-05, 0.004387352380109788, 0.004092736505074246, 9.999999999998899e-05, 0.013612852978541978, 0.050092438926312544, 0.03882312068165916, 0.048563309080131845, 0.04267418205886864, 0.060250093306967956, 0.038127618271423636, 0.05482971759248645, 0.17380993340271833, 9.999999999998899e-05, 9.999999999998899e-05, 0.07538890548839206, 0.04459330032714803, 0.0722123221102775, 0.06136144501765006, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0060233844311320395, 0.034761150676291486, 9.999999999998899e-05, 0.04130655558468266, 0.007423156965104094, 9.999999999998899e-05, 0.014587304710616977, 0.2850933332531238, 0.2848101722723053, 0.29137514592482194, 0.29271570789530565, 0.37283799968809683, 0.24674758891455217, 0.18308874054706115, 0.21592998841557454, 0.22516088344118024, 0.07678605978796638, 0.09027519600969391, 0.07145488195824057, 0.056899488649540975, 0.04630675297655473, 0.04917311716359507, 0.035924824713777004, 0.06629315901457322, 0.052104992013668916, 0.203841302426938, 0.19930675810448784, 0.2155930926082752, 0.21779613116660723, 0.17388518715149426, 0.17416886749479932, 0.16965675999016516, 0.18490877423478358, 0.1526126962055112, 0.18937625518184353, 0.21328896856773605, 0.21184452920749874, 0.16977707517217044, 0.17894670596785267, 0.16233108581203126, 0.21676915077868786, 0.18562511430049466, 0.24407167319531486, 0.1161964232185434, 0.21514781673756977, 0.10718864053976718, 0.13352741132373436, 0.1606128095152517, 0.14519282191024108, 0.11039896956549455, 0.13145491408133947, 0.1256052628826232, 0.17703418178350094, 0.2183209121712567, 0.20082885494175406, 0.19519829617982798, 0.17717568663984784, 0.17614013476767665, 0.2005627641735348, 0.17020209445919154, 0.19474175569450702, 0.1621189680345535, 0.17242761408501805, 0.18453714186305337, 0.14335160169178163, 0.15570146098924764, 0.1578120676695095, 0.15956369119514435, 0.17360716068961424, 0.16866405137783425, 0.11794336663487115, 0.16210207074373395, 0.16477752504309606, 0.13718979308789692, 0.1449918201276238, 0.16017792861786162, 0.16444610275981264, 0.1544077885612405, 0.1369246735380386, 0.23186510447630015, 0.054679420424813885, 0.48071207707848684, 0.1524325647288569, 0.11462176633592003, 0.1581215286173394, 0.265309930608694, 0.18726688384418444, 0.17212607658203016, 0.18589159071616468, 0.19424686033950067, 0.17038182624910136, 0.17186072154900833, 0.17435291504292705, 0.16803120919321302, 0.175994589974659, 0.178627189892694, 0.18999041611851564, 0.08162284850449619, 0.08523269271113532, 0.06565821241108083, 0.0778737440629933, 0.07313366924623421, 0.07024548597472458, 0.08291552748769138, 0.08659534467007857, 0.08814055247697017]}, "mutation_prompt": null}
{"id": "09d7d0cd-5b5e-4e14-a235-c512cd110d43", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def opposition_based_learning(individual, lower_bound, upper_bound):\n            return lower_bound + upper_bound - individual\n\n        def initialize_population(npop, dim):\n            pop = np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)]\n            return np.where(np.random.rand(npop, dim) < 0.4, opposition_based_learning(pop, -5.0, 5.0), pop)\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved", "description": "Enhancing the population diversity by introducing a novel opposition-based learning mechanism to improve exploration and convergence.", "configspace": "", "generation": 87, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 31, 13, '            return np.where(np.random.rand(npop, dim) < 0.4, opposition_based_learning(pop, -5.0, 5.0), pop)\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 31, 13, '            return np.where(np.random.rand(npop, dim) < 0.4, opposition_based_learning(pop, -5.0, 5.0), pop)\\n'))", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {}, "mutation_prompt": null}
{"id": "8caae776-dfdb-4fb6-aca1-ce1d19fb9da6", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Chaotic map mutation\n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved", "description": "Improving the diversity and exploration capability by incorporating a chaotic map to enhance population initialization and mutation.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.5985905945981405, 0.6418528239427833, 0.6570889863489574, 0.6353921269474867, 0.6338449918771525, 0.6042417061176297, 0.6163728086519452, 0.575646372611454, 0.6464590804013055, 0.2232009576963434, 0.34397932449127433, 0.14420175404675206, 0.059806823707136525, 0.3082210710292538, 0.07344837567737306, 0.14408304230863667, 0.26936096546079646, 0.32922791630692705, 0.09619114933103334, 0.11596585884156829, 0.09946162895579713, 0.1037786134888724, 0.10857055778090285, 0.11277059764070052, 0.10507273837914233, 0.12194849081277792, 0.08711688823531605, 0.09173395431576481, 0.09492870114022534, 0.128280411142366, 0.10979032010573264, 0.07807082070344062, 0.09674000702860686, 0.11035476486537532, 0.07845389968075978, 0.12830682054568676, 0.9308524261822319, 0.9329473198789054, 0.8595397987773026, 0.9387275042401223, 0.9643825927576669, 0.9247713529494166, 0.9111981869655849, 0.9707917223320971, 0.7977798208508912, 0.2389365461465921, 0.31756920610218453, 0.38229528473536134, 0.32101015994509274, 0.35568838001649483, 0.22757218454099726, 0.23866581722622426, 0.33665671862741975, 0.3123005058576366, 0.6248564407239947, 0.34103012988596815, 0.33859527928949307, 0.24157999635742666, 0.6322283688191209, 0.335069677759928, 0.25989943116694547, 0.6639519454319931, 0.2374271224223562, 0.17924883055892538, 0.1500154215906292, 0.14638712818586896, 0.129570191340047, 0.10382024209285223, 0.1533687252746373, 0.10455141627464415, 0.13458357032178048, 0.12111122430063348, 0.1824721237186211, 0.1340776634011117, 0.12190726078103686, 0.09507741255803848, 0.12543625674509296, 0.12782125882869455, 0.16142857467638372, 0.11199116658566621, 0.11553898829569353, 0.027407056415422404, 0.008203505484840945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03318422347828509, 9.999999999998899e-05, 0.029269717227038416, 0.0396062241687658, 0.06377516339489009, 0.035397582296437746, 0.02558961656730485, 0.01947971271179172, 0.08063993157947225, 0.05093145931889176, 0.0986806069664442, 0.09279406763273257, 0.04686516063132928, 0.14069585501140014, 0.19283049032685307, 0.05834415910569024, 0.0702740576952321, 0.1345793069884874, 0.04413650041774053, 0.12150589661408051, 0.14822063018943465, 0.07396383478611879, 0.16693377537086473, 0.1503329536493746, 0.13758102992693766, 0.14553552139744375, 0.05116696708477253, 0.07735028612795014, 0.09562686187792513, 0.10253285420313207, 0.4083003456634795, 0.42655599155494406, 0.4342171386386007, 0.4325393898133556, 0.40588229323753144, 0.4599397181217444, 0.4845047372994069, 0.40677692430646717, 0.42611284815252215, 0.05993232797653314, 0.09977013582226768, 0.11121632037371743, 0.08308879893924148, 0.1195110614475472, 0.10837830293423745, 0.06668786887924738, 0.10105432906983947, 0.11606697652862008, 0.15407550159332206, 0.16554913086577527, 0.14278590933571467, 0.15348017719495222, 0.17631811151326315, 0.1713309271125767, 0.15075486896471813, 0.18772445163066398, 0.2287601534111503, 0.2754191704396808, 0.23328223906020973, 0.31072103768151993, 0.3018894052992438, 0.28274722359761273, 0.2673674505655156, 0.31351352880932415, 0.3064070492215085, 0.27853576062689567, 0.2933702678194928, 0.25166133533206414, 0.24863721085947033, 0.24207429628457877, 0.19147898154088572, 0.25599869590673985, 0.20371607575939665, 0.1812448021370584, 0.1730872958475428, 0.2117345911961237, 0.19533986473056697, 0.17667988154800895, 0.1702932235764223, 0.17857069421007232, 0.178893039393345, 0.17342025310555842, 0.19514458740706286, 0.20604436106645085, 0.18397428347751132, 0.19971088527317948, 0.20295113084663896, 0.1880078398531818, 0.19892657512586498, 0.17828210285968527, 0.19104411364134488, 0.1720987180848228, 0.18859066300600258, 0.6904284054291352, 0.1621636858976916, 0.16689677733684016, 0.7035663260180858, 0.6746563891328488, 0.16540110178050904, 0.545044330957604, 0.7468811816546959, 0.6957385647789247, 0.5523555953771957, 0.12293178214636025, 0.35176553038784175, 0.16329952672714176, 0.16187780957885012, 0.08995375257926685, 0.1242442934167649, 0.20589165791364683, 0.5901112081831372, 0.16475100012235766, 0.18024139026858954, 0.17817043005663713, 0.18386313508343033, 0.1720300354417693, 0.16935918313640708, 0.17877804597335967, 0.17810799174420977, 0.18361246234787276, 0.07974805747655356, 0.07880115241433105, 0.11929924228830346, 0.07436439395127614, 0.0754885503171765, 0.06874730089126058, 0.08464045586697411, 0.07931779789379145, 0.06825964553982888]}, "mutation_prompt": null}
{"id": "68a32d64-d787-48e4-a9bc-1df6daf7d406", "solution": "import numpy as np\n\nclass Refined_DE_PSO_Optimizer_Improved:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Differential Evolution Mutation Component\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_diff = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                # PSO Mutation Component with Chaotic Map\n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n\n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_diff, mutant_chaotic)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Refined_DE_PSO_Optimizer_Improved", "description": "Enhancing the mutation strategy by incorporating a differential evolution component to improve exploration and exploitation balance.", "configspace": "", "generation": 89, "fitness": 0.1785728857399211, "feedback": "The algorithm Refined_DE_PSO_Optimizer_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.36270610881558973, 0.3653363318867754, 0.3500629471210889, 0.37410986311060224, 0.36292875197394214, 0.41194922766699205, 0.3576836535369694, 0.3848351662370225, 0.3156089776899166, 9.999999999998899e-05, 9.999999999998899e-05, 0.040299258626718126, 0.06569008066551829, 9.999999999998899e-05, 0.037454827186248485, 0.005573576028727434, 0.0026226911874212, 0.05188262636978669, 0.06537348841047419, 0.1035331309500167, 0.08749587815760629, 0.1135932406092165, 0.13039118714091258, 0.10124704774391324, 0.06997506538976594, 0.08760836202688482, 0.05979600450967659, 0.0942487910374703, 0.07844547251337097, 0.08712750283087478, 0.10680438813855342, 0.08550892345970695, 0.09925339919686316, 0.08324673298981888, 0.0946327583737151, 0.08295684488971022, 0.9355262610938926, 0.9411599392704518, 0.9446562569313709, 0.9318327092538938, 0.9443085251077801, 0.9280880456832258, 0.7109399079963592, 0.8915420346087253, 0.21855487313674837, 0.18090240925302192, 0.24109620213823835, 0.1678143159954414, 0.23417833233467, 0.20957594504171217, 0.20304900960539662, 0.22803816943504107, 0.20341850717282672, 0.19507928324872437, 0.2632101895292468, 0.20937854067705608, 0.29141162343447835, 0.2219447317267531, 0.1699686499296087, 0.3396101230333728, 0.5753089342314998, 0.22734512017615793, 0.25745798655107743, 0.13766018669187652, 0.10437283018763643, 0.10943380228493516, 0.18056116427884694, 0.10416466015613246, 0.07965558516965521, 0.11134147263618055, 0.12173782108399933, 0.18232963427903137, 0.16087430174261896, 0.10241695428181541, 0.1020576469352733, 9.999999999998899e-05, 0.12456031474974438, 9.999999999998899e-05, 0.12907555482527955, 0.17024587118007062, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006605815026959894, 0.008182096753819534, 9.999999999998899e-05, 0.03143083360931398, 0.008741491040803573, 0.049314199229399724, 0.06182313535673889, 0.07045822215508835, 0.053220814919218706, 0.0409595980622689, 0.056820698328597596, 0.046362906825561545, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0036086447816382483, 9.999999999998899e-05, 0.039214801925635756, 9.999999999998899e-05, 0.04521659348718554, 0.061258127489228764, 0.07300029938000152, 0.020997414483142518, 0.05369573797498761, 0.04777117606414161, 0.07599734610123487, 0.06583333804406266, 0.09325668090731398, 0.3615863793325178, 0.3219105642507334, 0.3695382708073588, 0.38253250726459, 0.3815160216567415, 0.32170143546767704, 0.349855853097759, 0.3725198552627096, 0.353604982998437, 0.07873598581802022, 0.08865521268884369, 0.09533391710596117, 0.10033135436659746, 0.09037671497793398, 0.07269864580738394, 0.07430023060561164, 0.07588082780601435, 0.10443906673580983, 0.16440496902578472, 0.15114715883060637, 0.11121634930314817, 0.2299950147345522, 0.20256335616489607, 0.1836604818617017, 0.14836997164190946, 0.18022049580401567, 0.13784167639076073, 0.2366931657895328, 0.29027386446739056, 0.23870608514912606, 0.2594747576577492, 0.18258918164333982, 0.2689010324960932, 0.26704240743261776, 0.21911119649692035, 0.26201087550684865, 0.1523245510444704, 0.2034636900526252, 0.204689134275442, 0.1799481821615977, 0.16215339477344803, 0.19893726756628038, 0.1474636100569081, 0.14076691678165876, 0.13715432211053502, 0.18873319460077687, 0.1762784518820708, 0.18830918673426789, 0.1841986044645938, 0.1729615859902699, 0.19270034443354112, 0.1763984909957037, 0.19175161964242193, 0.188567472578813, 0.16722682678182121, 0.1933570268314413, 0.17753594403542228, 0.16670884204198444, 0.18701055673055855, 0.15620449330305564, 0.1836574073716878, 0.17517824329839238, 0.20065174807141217, 0.17704638638239267, 0.14171884412257663, 0.16490396969789378, 0.16216885308879447, 0.1539001489206263, 0.511818962439921, 0.16456324534109956, 0.457029578137803, 0.17229518395082144, 0.19677743890527277, 0.2577455031052588, 0.18137501796574607, 0.16163412871458005, 0.1593550882018664, 0.16416652375245633, 0.28173491721185895, 0.20902258352595326, 0.2022582600801166, 0.16952713847197176, 0.1766245895709757, 0.17347847288370866, 0.16461576535246547, 0.17404775010398932, 0.18214557964955147, 0.17422597593282263, 0.1644738968195768, 0.1745417264778757, 0.06726327693393264, 0.06345181767178076, 0.0716647204291272, 0.0710461205630083, 0.06441640450499342, 0.07066855322047072, 0.09059976922791702, 0.06603677175390998, 0.09363790967713648]}, "mutation_prompt": null}
{"id": "5df7f4dc-25b2-4092-8d51-6a4a6833df35", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved_Enhanced:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def enhance_population(pop):\n            for i in range(self.npop):\n                pop[i] = np.clip(pop[i] + np.random.normal(0, 0.5, self.dim), -5.0, 5.0)\n            return pop\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Chaotic map mutation\n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            pop = enhance_population(pop)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved_Enhanced", "description": "Enhancing population diversity through a novel search space exploration strategy while maintaining the existing chaotic map mutation.", "configspace": "", "generation": 90, "fitness": 0.16553277933442398, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer_Improved_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.29376885772579864, 0.3172796463435479, 0.30149979051772224, 0.2941067077202697, 0.3158884240089689, 0.306210693321344, 0.2996241545857372, 0.32873564266997224, 0.30709493368300134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022914119165192814, 0.0026537605006750065, 9.999999999998899e-05, 0.08267795073248085, 0.09259898993039639, 0.06103923462382932, 0.07445290906077806, 0.08800352218879803, 0.0634073715836394, 0.09779376478277213, 0.07219159172833733, 0.08499236428643142, 0.051881263155363566, 0.06896330961252528, 0.08418433235909883, 0.06441538866187546, 0.07572327275596946, 0.06493592311909491, 0.061814638460747084, 0.0656129244143383, 0.06941771181649115, 0.9513360869043898, 0.9169421464819857, 0.9399116005361369, 0.9476255637678277, 0.9619916949547934, 0.9318991223837181, 0.9154245229471755, 0.9696521235326012, 0.9289866234260995, 0.19772802592617023, 0.17000003027133626, 0.16711011565883782, 0.16941728951266033, 0.18524281902912132, 0.16307935750620495, 0.1809184759260627, 0.18950211288885543, 0.13375517739141396, 0.23952829442989687, 0.22044026023460184, 0.2240394846698699, 0.2116666863201514, 0.24609264283023835, 0.175717465540283, 0.20725651787242605, 0.14269308529647973, 0.22361626275024316, 0.056089866193470894, 0.1092033856390866, 0.09490132006747831, 0.09305957032277623, 0.09861311112523075, 0.09607187243589654, 0.10005770798336455, 0.06417618602721653, 0.10052157062061418, 0.10096225594913799, 0.11174782475181311, 0.08539216124178561, 0.11215312613364914, 9.999999999998899e-05, 0.09333935859917564, 0.09146875762112194, 0.09138900470043321, 0.10801071366854886, 9.999999999998899e-05, 0.0017116748816621286, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03839619074664258, 0.039632225566278434, 0.02895975436462117, 0.006162368010909636, 0.02929024340007036, 0.03962684426244545, 0.0018096832293517107, 0.03596132580200828, 0.05682486516004026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04074084306463788, 0.021267842726918396, 0.01574154977405451, 0.03223292787608989, 0.043192183113442306, 0.04165123346029509, 0.03966688665966178, 0.03114378283982444, 0.043737261016237095, 0.30401034004732497, 0.30223523645659767, 0.3055764378352691, 0.30873667177285447, 0.32256431350285675, 0.3039575490732157, 0.29625270157615435, 0.3045842378487238, 0.31801577761721156, 0.06213942743449552, 0.09147397080563202, 0.07482671495662285, 0.06971176545757685, 0.07569645647471879, 0.08726260690786292, 0.08326028929788354, 0.08235609802032995, 0.06853889911897149, 0.13000311566296985, 0.17237283550707616, 0.12054085239179002, 0.1325138880810931, 0.14552298964484578, 0.1882142691997064, 0.1266768764223638, 0.1418150865583513, 0.15144350734345846, 0.23043580231029315, 0.2240923220284442, 0.22592992956016866, 0.2163895113343266, 0.20715025335111836, 0.22414882830928307, 0.22420786872212406, 0.22871681766346996, 0.22140143697525527, 0.16180697750925244, 0.17351716325563626, 0.15912916949610334, 0.17136013022844654, 0.14677821519161693, 0.17458100054032344, 0.1913600195045263, 0.16344141059149353, 0.14260698968515095, 0.1879091901378711, 0.19321628338401675, 0.22185377658438366, 0.17777418928646072, 0.16981359826017883, 0.18073100090497807, 0.20437335601410478, 0.2087750552002996, 0.18573689140153682, 0.18969044958692738, 0.15858922396762287, 0.17464871812057625, 0.16614723308951418, 0.17848686986321716, 0.16615092233734519, 0.1714800619925798, 0.16735803994322973, 0.17192761482529262, 0.17170495800858665, 0.16110129253270533, 0.14434217016257267, 0.15978680025738667, 0.15466862297054418, 0.16384008819969076, 0.16409711538839178, 0.4636817709092811, 0.36840715476780295, 0.23267736333625377, 0.08134521125618688, 0.34149086922933325, 0.16098810052212176, 0.16690855026688534, 0.13250260352766396, 0.11928788714392757, 0.20018664453633928, 0.34642813939670036, 0.1682629987079659, 0.18298986403380246, 0.16679671761554726, 0.18267484154638913, 0.1803107033604192, 0.17815224184194378, 0.18455184877859676, 0.17692262571320838, 0.19828320757625106, 0.08296361660828366, 0.0767058998506569, 0.06990638922813819, 0.07485470044137732, 0.06751610075920611, 0.06950192989701898, 0.06811977277162773, 0.07598531942249798, 0.06225271795637688]}, "mutation_prompt": null}
{"id": "fc0e79ff-b435-4c18-9dbc-63e22b939fe1", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Chaotic map mutation\n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved", "description": "Improving the diversity and exploration capability by incorporating a chaotic map to enhance population initialization and mutation.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.5985905945981405, 0.6418528239427833, 0.6570889863489574, 0.6353921269474867, 0.6338449918771525, 0.6042417061176297, 0.6163728086519452, 0.575646372611454, 0.6464590804013055, 0.2232009576963434, 0.34397932449127433, 0.14420175404675206, 0.059806823707136525, 0.3082210710292538, 0.07344837567737306, 0.14408304230863667, 0.26936096546079646, 0.32922791630692705, 0.09619114933103334, 0.11596585884156829, 0.09946162895579713, 0.1037786134888724, 0.10857055778090285, 0.11277059764070052, 0.10507273837914233, 0.12194849081277792, 0.08711688823531605, 0.09173395431576481, 0.09492870114022534, 0.128280411142366, 0.10979032010573264, 0.07807082070344062, 0.09674000702860686, 0.11035476486537532, 0.07845389968075978, 0.12830682054568676, 0.9308524261822319, 0.9329473198789054, 0.8595397987773026, 0.9387275042401223, 0.9643825927576669, 0.9247713529494166, 0.9111981869655849, 0.9707917223320971, 0.7977798208508912, 0.2389365461465921, 0.31756920610218453, 0.38229528473536134, 0.32101015994509274, 0.35568838001649483, 0.22757218454099726, 0.23866581722622426, 0.33665671862741975, 0.3123005058576366, 0.6248564407239947, 0.34103012988596815, 0.33859527928949307, 0.24157999635742666, 0.6322283688191209, 0.335069677759928, 0.25989943116694547, 0.6639519454319931, 0.2374271224223562, 0.17924883055892538, 0.1500154215906292, 0.14638712818586896, 0.129570191340047, 0.10382024209285223, 0.1533687252746373, 0.10455141627464415, 0.13458357032178048, 0.12111122430063348, 0.1824721237186211, 0.1340776634011117, 0.12190726078103686, 0.09507741255803848, 0.12543625674509296, 0.12782125882869455, 0.16142857467638372, 0.11199116658566621, 0.11553898829569353, 0.027407056415422404, 0.008203505484840945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03318422347828509, 9.999999999998899e-05, 0.029269717227038416, 0.0396062241687658, 0.06377516339489009, 0.035397582296437746, 0.02558961656730485, 0.01947971271179172, 0.08063993157947225, 0.05093145931889176, 0.0986806069664442, 0.09279406763273257, 0.04686516063132928, 0.14069585501140014, 0.19283049032685307, 0.05834415910569024, 0.0702740576952321, 0.1345793069884874, 0.04413650041774053, 0.12150589661408051, 0.14822063018943465, 0.07396383478611879, 0.16693377537086473, 0.1503329536493746, 0.13758102992693766, 0.14553552139744375, 0.05116696708477253, 0.07735028612795014, 0.09562686187792513, 0.10253285420313207, 0.4083003456634795, 0.42655599155494406, 0.4342171386386007, 0.4325393898133556, 0.40588229323753144, 0.4599397181217444, 0.4845047372994069, 0.40677692430646717, 0.42611284815252215, 0.05993232797653314, 0.09977013582226768, 0.11121632037371743, 0.08308879893924148, 0.1195110614475472, 0.10837830293423745, 0.06668786887924738, 0.10105432906983947, 0.11606697652862008, 0.15407550159332206, 0.16554913086577527, 0.14278590933571467, 0.15348017719495222, 0.17631811151326315, 0.1713309271125767, 0.15075486896471813, 0.18772445163066398, 0.2287601534111503, 0.2754191704396808, 0.23328223906020973, 0.31072103768151993, 0.3018894052992438, 0.28274722359761273, 0.2673674505655156, 0.31351352880932415, 0.3064070492215085, 0.27853576062689567, 0.2933702678194928, 0.25166133533206414, 0.24863721085947033, 0.24207429628457877, 0.19147898154088572, 0.25599869590673985, 0.20371607575939665, 0.1812448021370584, 0.1730872958475428, 0.2117345911961237, 0.19533986473056697, 0.17667988154800895, 0.1702932235764223, 0.17857069421007232, 0.178893039393345, 0.17342025310555842, 0.19514458740706286, 0.20604436106645085, 0.18397428347751132, 0.19971088527317948, 0.20295113084663896, 0.1880078398531818, 0.19892657512586498, 0.17828210285968527, 0.19104411364134488, 0.1720987180848228, 0.18859066300600258, 0.6904284054291352, 0.1621636858976916, 0.16689677733684016, 0.7035663260180858, 0.6746563891328488, 0.16540110178050904, 0.545044330957604, 0.7468811816546959, 0.6957385647789247, 0.5523555953771957, 0.12293178214636025, 0.35176553038784175, 0.16329952672714176, 0.16187780957885012, 0.08995375257926685, 0.1242442934167649, 0.20589165791364683, 0.5901112081831372, 0.16475100012235766, 0.18024139026858954, 0.17817043005663713, 0.18386313508343033, 0.1720300354417693, 0.16935918313640708, 0.17877804597335967, 0.17810799174420977, 0.18361246234787276, 0.07974805747655356, 0.07880115241433105, 0.11929924228830346, 0.07436439395127614, 0.0754885503171765, 0.06874730089126058, 0.08464045586697411, 0.07931779789379145, 0.06825964553982888]}, "mutation_prompt": null}
{"id": "339422bb-e0c4-4565-aef5-f257c65548bf", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Chaotic map mutation\n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            if np.random.rand() < 0.4:  # 40% chance\n                self.npop = max(10, self.npop - 1)  # Decrease population size by 1\n                \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved", "description": "Enhancing the diversity and convergence speed by introducing a dynamic population size and adaptive control parameters.", "configspace": "", "generation": 92, "fitness": 0.21662026566688797, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.7359882662337702, 0.6290541270096884, 0.6912177194031464, 0.5574513721459212, 0.5773674493695352, 0.6928714796476289, 0.7004684392399994, 0.5242405320643919, 0.697664917741657, 0.10416396778322756, 0.10586200719411698, 0.17912554399954284, 0.2733634835747214, 0.1076339543368926, 0.06543857631702232, 0.08887318133788502, 0.01848232886312584, 0.062399243895989054, 0.0973096214197593, 0.13487124642910586, 0.05783409248601279, 0.08122351643347081, 0.1279504556586939, 0.12444587106938143, 0.0906556587891495, 0.13922195877246923, 0.07917043086093256, 0.10395570471120008, 0.0843124553734006, 0.0735351079527119, 0.09630502045649503, 0.08182503394456908, 0.09764084663879535, 0.13043360612053345, 0.11469299983242032, 0.09620344615593424, 0.9349189047704851, 0.8759307905870541, 0.958044609426156, 0.9470037811327704, 0.9088057908093082, 0.9297683014195772, 0.1683474646783385, 0.90875684180852, 0.9038497072960147, 0.18614244662739288, 0.2232049247260398, 0.31135774088777723, 0.26745487337085494, 0.3135253749685911, 0.37623703004817377, 0.4102001367542203, 0.2463977193325816, 0.29283703988898957, 0.20270150095521877, 0.21739202471964458, 0.2113979085924692, 0.19745780478151675, 0.20590217439946534, 0.2189441015760425, 0.7111586314828252, 0.3226709358966665, 0.3151538267770093, 0.15109700897523692, 0.13443452409889234, 0.2763148329605082, 0.10905597838032444, 0.11230677086414342, 0.2009000710897565, 0.22317846285289056, 0.14956542787307114, 0.11623328872446925, 0.15191714931767908, 0.1119481904621864, 0.1438521670559234, 0.13331996312869743, 0.11069783904043284, 0.1305210515178733, 0.11351150866045134, 0.16850579403957655, 0.15546884221448676, 0.026111991878996932, 9.999999999998899e-05, 0.02576354224657096, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011452633070120677, 0.017276643037126616, 9.999999999998899e-05, 0.048290968224306896, 0.031061088593231423, 0.02109454313078296, 0.05856289172709517, 0.059534106076356896, 0.04768620967751536, 0.1610747880813378, 0.04359301972891083, 0.05466717961510459, 0.14590606376228166, 0.049423710634786566, 0.07060101351544434, 0.10070031666129797, 0.12730464705412192, 0.09177172222302321, 0.06941559178446699, 0.051299266055273796, 0.05242016532045912, 0.06103116929505592, 0.18707459471347498, 0.04731033108224092, 0.05952935088390188, 0.09878181169189248, 0.07080744703427988, 0.06931130788358364, 0.06416674049468407, 0.1704292627847106, 0.44803581476885834, 0.38598621652593323, 0.38984561857493627, 0.5127963635005216, 0.43036777779079305, 0.4989545311118697, 0.4397367854219565, 0.42057900007297244, 0.4698751777190533, 0.125185962813133, 0.11374324972654848, 0.09145824664548596, 0.10996174618853038, 0.1282234356608033, 0.09584702269496992, 0.06351504478039227, 0.09012066728231771, 0.07769398662656135, 0.3018344296395292, 0.14391818860153582, 0.15381746683002018, 0.18387153534768352, 0.14530603303354706, 0.16131399772864663, 0.1507375276750781, 0.1743149011070687, 0.16929547868432326, 0.2928285516824488, 0.2666950551790437, 0.2918649917396159, 0.26033377368752364, 0.28361574621454544, 0.21873826426730947, 0.22831304376261974, 0.3172629405797516, 0.1915324720778483, 0.21254656423496388, 0.22581948584828893, 0.17701206622199006, 0.1915459190978559, 0.18821827662216306, 0.2435870484136341, 0.27286350753977406, 0.23730680191303555, 0.16083719387279538, 0.19194898004358485, 0.2012271771189439, 0.19988528606108558, 0.18420066581304806, 0.1748283989322339, 0.18688457822204907, 0.19140516338591018, 0.19854868583528407, 0.20153541024673294, 0.1882507755046613, 0.1756761305913751, 0.19318450104143103, 0.1839424283700537, 0.17945512646844874, 0.2230049056513458, 0.1850675149036295, 0.19674602786499162, 0.17629290517286011, 0.11295188943915035, 0.08774619925724148, 0.1564539653900443, 0.1625428900227649, 0.18825755321433346, 0.16291121982347145, 0.13559125299114816, 0.1296386031328186, 0.18470348471403608, 0.20190189060243247, 0.208701502751786, 0.5864790399278295, 0.16404374675425604, 0.1669359418089289, 0.31885304699120864, 0.1247379117510975, 0.20712362650889904, 0.6991961694191817, 0.1613936999959933, 0.16658392310411818, 0.18191564095095325, 0.18267617571220107, 0.16876396507294666, 0.16117823819716615, 0.19213283350916432, 0.16078874881333172, 0.18602609369833434, 0.07661782090571068, 0.08142823733857674, 0.09071341450760517, 0.0991292670787165, 0.09155021719330836, 0.06833016446244489, 0.11489393933626357, 0.07162529394945127, 0.0905181647889034]}, "mutation_prompt": null}
{"id": "f69d4373-64ac-436e-94b5-331cf4d4761f", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Chaotic map mutation\n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved", "description": "Improving the diversity and exploration capability by incorporating a chaotic map to enhance population initialization and mutation.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.5985905945981405, 0.6418528239427833, 0.6570889863489574, 0.6353921269474867, 0.6338449918771525, 0.6042417061176297, 0.6163728086519452, 0.575646372611454, 0.6464590804013055, 0.2232009576963434, 0.34397932449127433, 0.14420175404675206, 0.059806823707136525, 0.3082210710292538, 0.07344837567737306, 0.14408304230863667, 0.26936096546079646, 0.32922791630692705, 0.09619114933103334, 0.11596585884156829, 0.09946162895579713, 0.1037786134888724, 0.10857055778090285, 0.11277059764070052, 0.10507273837914233, 0.12194849081277792, 0.08711688823531605, 0.09173395431576481, 0.09492870114022534, 0.128280411142366, 0.10979032010573264, 0.07807082070344062, 0.09674000702860686, 0.11035476486537532, 0.07845389968075978, 0.12830682054568676, 0.9308524261822319, 0.9329473198789054, 0.8595397987773026, 0.9387275042401223, 0.9643825927576669, 0.9247713529494166, 0.9111981869655849, 0.9707917223320971, 0.7977798208508912, 0.2389365461465921, 0.31756920610218453, 0.38229528473536134, 0.32101015994509274, 0.35568838001649483, 0.22757218454099726, 0.23866581722622426, 0.33665671862741975, 0.3123005058576366, 0.6248564407239947, 0.34103012988596815, 0.33859527928949307, 0.24157999635742666, 0.6322283688191209, 0.335069677759928, 0.25989943116694547, 0.6639519454319931, 0.2374271224223562, 0.17924883055892538, 0.1500154215906292, 0.14638712818586896, 0.129570191340047, 0.10382024209285223, 0.1533687252746373, 0.10455141627464415, 0.13458357032178048, 0.12111122430063348, 0.1824721237186211, 0.1340776634011117, 0.12190726078103686, 0.09507741255803848, 0.12543625674509296, 0.12782125882869455, 0.16142857467638372, 0.11199116658566621, 0.11553898829569353, 0.027407056415422404, 0.008203505484840945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03318422347828509, 9.999999999998899e-05, 0.029269717227038416, 0.0396062241687658, 0.06377516339489009, 0.035397582296437746, 0.02558961656730485, 0.01947971271179172, 0.08063993157947225, 0.05093145931889176, 0.0986806069664442, 0.09279406763273257, 0.04686516063132928, 0.14069585501140014, 0.19283049032685307, 0.05834415910569024, 0.0702740576952321, 0.1345793069884874, 0.04413650041774053, 0.12150589661408051, 0.14822063018943465, 0.07396383478611879, 0.16693377537086473, 0.1503329536493746, 0.13758102992693766, 0.14553552139744375, 0.05116696708477253, 0.07735028612795014, 0.09562686187792513, 0.10253285420313207, 0.4083003456634795, 0.42655599155494406, 0.4342171386386007, 0.4325393898133556, 0.40588229323753144, 0.4599397181217444, 0.4845047372994069, 0.40677692430646717, 0.42611284815252215, 0.05993232797653314, 0.09977013582226768, 0.11121632037371743, 0.08308879893924148, 0.1195110614475472, 0.10837830293423745, 0.06668786887924738, 0.10105432906983947, 0.11606697652862008, 0.15407550159332206, 0.16554913086577527, 0.14278590933571467, 0.15348017719495222, 0.17631811151326315, 0.1713309271125767, 0.15075486896471813, 0.18772445163066398, 0.2287601534111503, 0.2754191704396808, 0.23328223906020973, 0.31072103768151993, 0.3018894052992438, 0.28274722359761273, 0.2673674505655156, 0.31351352880932415, 0.3064070492215085, 0.27853576062689567, 0.2933702678194928, 0.25166133533206414, 0.24863721085947033, 0.24207429628457877, 0.19147898154088572, 0.25599869590673985, 0.20371607575939665, 0.1812448021370584, 0.1730872958475428, 0.2117345911961237, 0.19533986473056697, 0.17667988154800895, 0.1702932235764223, 0.17857069421007232, 0.178893039393345, 0.17342025310555842, 0.19514458740706286, 0.20604436106645085, 0.18397428347751132, 0.19971088527317948, 0.20295113084663896, 0.1880078398531818, 0.19892657512586498, 0.17828210285968527, 0.19104411364134488, 0.1720987180848228, 0.18859066300600258, 0.6904284054291352, 0.1621636858976916, 0.16689677733684016, 0.7035663260180858, 0.6746563891328488, 0.16540110178050904, 0.545044330957604, 0.7468811816546959, 0.6957385647789247, 0.5523555953771957, 0.12293178214636025, 0.35176553038784175, 0.16329952672714176, 0.16187780957885012, 0.08995375257926685, 0.1242442934167649, 0.20589165791364683, 0.5901112081831372, 0.16475100012235766, 0.18024139026858954, 0.17817043005663713, 0.18386313508343033, 0.1720300354417693, 0.16935918313640708, 0.17877804597335967, 0.17810799174420977, 0.18361246234787276, 0.07974805747655356, 0.07880115241433105, 0.11929924228830346, 0.07436439395127614, 0.0754885503171765, 0.06874730089126058, 0.08464045586697411, 0.07931779789379145, 0.06825964553982888]}, "mutation_prompt": null}
{"id": "9b3ed85a-5515-4875-b2e8-c7e676815190", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved_Adaptive:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99, F_min=0.1, F_max=0.9, CR_min=0.1, CR_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n        self.F_min = F_min\n        self.F_max = F_max\n        self.CR_min = CR_min\n        self.CR_max = CR_max\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def adapt_mutation_step(mut_step, success_rate):\n            if success_rate > 0.2:\n                mut_step *= 1.2\n            else:\n                mut_step *= 0.8\n            return np.clip(mut_step, self.F_min, self.F_max)\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Chaotic map mutation\n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            success_rate = sum([func(mut) < func(ind) for ind, mut in zip(pop, mutate(pbest, gbest, pop, self.F, self.CR)[0])]) / self.npop\n            self.F = adapt_mutation_step(self.F, success_rate)\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved_Adaptive", "description": "Enhancing the mutation strategy by introducing a novel adaptive mechanism to adjust the mutation step size based on the individual performance.", "configspace": "", "generation": 94, "fitness": 0.17248144867592302, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer_Improved_Adaptive got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.18.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.39436476869252235, 0.409400861891851, 0.3923652077797256, 0.38496412643268374, 0.4130316842416668, 0.3447669845926111, 0.38734472071193216, 0.3581148755664394, 0.41010211179542666, 0.12645794229021923, 0.10762606474478165, 0.06478778464141144, 0.04696270149698467, 0.09495830231985525, 0.027179963206225843, 0.03783862602258492, 0.03298144574083339, 0.0411077446916035, 0.06132938306510427, 0.08633150401009604, 0.05726859280922347, 0.07541420970582136, 0.11212710861028741, 0.08603056615849214, 0.09525099319042907, 0.07929692522903364, 0.03400566577044373, 0.07427588722494205, 0.06793813300724927, 0.07685629153774864, 0.059329834425087435, 0.05901609735987512, 0.07060201532245192, 0.06869371372316779, 0.05964107227687021, 0.06418989611237158, 0.9245458693998764, 0.8478871494373743, 0.9186832786899995, 0.8562838519256564, 0.9197684055569402, 0.7380887325060685, 0.8389496956757718, 0.928606813138895, 0.6228666595665344, 0.14349645738098948, 0.20302331139530272, 0.17546680526911473, 0.21862834915748908, 0.19552762663913503, 0.1895846486677949, 0.14192388354268826, 0.17885733592198172, 0.17397333067140974, 0.2047116450464076, 0.4636097090581174, 0.20099801067297507, 0.19073095563850972, 0.20149596565094174, 0.2433936482515242, 0.3326016137375959, 0.20227213616209605, 0.36793065524200985, 0.12651001428773812, 0.11382711357472186, 0.0865294323677761, 0.10402288109179758, 0.11869701187374937, 0.07422551993846482, 0.11363256550401313, 0.08784936051644987, 0.09869957960845044, 0.12890952336060546, 0.08008141929891321, 0.09763410337905354, 0.0984109419350756, 0.130884108879594, 0.09682833655261569, 0.08851900464931839, 0.11000974092078908, 0.07587292264746814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015610632092515675, 0.03752855035724223, 0.02545573579826066, 0.04327272188024944, 0.03315319849114895, 0.0390029117457481, 0.028202813304512353, 0.07564980977235614, 0.025763346214688676, 0.009614792035110953, 0.008428337364811744, 0.00862499727915178, 0.008333113334714315, 0.0005298952932074608, 0.00745363871386906, 0.0006334568852964795, 0.011019172581268721, 0.015227732008683548, 0.04625077373486419, 0.09723833618404476, 0.01077671054410434, 0.0132369194443831, 0.04501558828362795, 0.03907128685526895, 0.05934630591371348, 0.052736535340604296, 0.046170943432514266, 0.3673561653084124, 0.332241554326416, 0.3276717236494753, 0.365067311263121, 0.36725521373275116, 0.3867613896621409, 0.3757133442205549, 0.3660392807395424, 0.38405909805020133, 0.06441658529906913, 0.10204484905955269, 0.06713141682171186, 0.07485433422427978, 0.07734204887144513, 0.07482525955175989, 0.05498041763791228, 0.06436242166632578, 0.07564835193691355, 0.1295683103151477, 0.12915859044676126, 0.10732996337601486, 0.15091706926703718, 0.13819585661028344, 0.14617988146287209, 0.12326817140659807, 0.17182402119438334, 0.14047804070889813, 0.2492046113598857, 0.21117636372793935, 0.2554629792900184, 0.2582146799090289, 0.2362720087061455, 0.2734021076619976, 0.2620349872393981, 0.24379375490299038, 0.20649907751073204, 0.1726653482206133, 0.15781135752774533, 0.1975810111777596, 0.16027247551808632, 0.1595577194700596, 0.1274843172585748, 0.18096788457870094, 0.19315070060968975, 0.1327614041531886, 0.1849526173072007, 0.174238366303492, 0.19202761866510176, 0.15087743537969056, 0.1717368364249796, 0.18100538016277234, 0.22311488511015376, 0.2146981882890303, 0.1752915645765264, 0.16992558516885659, 0.16961497982543738, 0.1715185786467186, 0.1669991753134794, 0.16865186535653065, 0.1600961265681573, 0.16549532630926111, 0.17920728550786225, 0.17638262522798964, 0.11682572900270638, 0.11764108821993435, 0.18017979198767953, 0.1326532149666917, 0.16277114279687976, 0.1611765899155373, 0.16308819106663164, 0.29515977688667017, 0.5043794032054814, 0.0892843457299386, 0.08117136356261112, 0.311404914149895, 0.14819097690323357, 0.1611401539173416, 0.18526976644214277, 0.28360064277447805, 0.20187447637493483, 0.12107615985900044, 0.16173674884196643, 0.185320103530354, 0.1744368501196486, 0.16488981052033092, 0.1666019615070261, 0.16530660530151997, 0.18583995614081916, 0.18477070223322045, 0.16422797385607535, 0.07727283931135176, 0.0713936903463468, 0.05306982264709492, 0.07045497203484175, 0.06329970201620527, 0.06702992549710074, 0.06642346604004579, 0.07541285371977846, 0.08152711712467409]}, "mutation_prompt": null}
{"id": "56819030-d096-48c9-afbf-b87e6888a770", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved_Enhanced:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Opposition-based learning\n                opp_pop = -pop\n                opp_pbest = -pbest\n                opp_gbest = -gbest\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                opp_a, opp_b, opp_c = opp_pop[np.random.choice(idxs, 3, replace=False)]\n\n                mutant_rand = np.clip(a + F * (b - c) + opp_a + F * (opp_b - opp_c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                opp_a, opp_b, opp_c = opp_pop[np.random.choice(idxs, 3, replace=False)]\n\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b) + F * (opp_gbest - pop[i]) + F * (opp_a - opp_b), -5.0, 5.0)\n\n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved_Enhanced", "description": "Enhancing the algorithm by introducing a novel opposition-based learning mechanism to diversify the search process and improve exploration-exploitation balance.", "configspace": "", "generation": 95, "fitness": 0.11576156486006699, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer_Improved_Enhanced got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.08.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.2504069567014695, 0.2508304936306517, 0.29554053921531875, 0.19575025839556714, 0.28323853372204044, 0.14166550118140653, 0.17633539762972528, 0.23183410645495173, 0.24187066561747872, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02815890611441263, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.053139512314308024, 0.05696642413128705, 0.05550915131819034, 0.08374326043507607, 0.06453443235009904, 0.058493754477154436, 0.04546655829686208, 0.04500222523021624, 0.05041467134169342, 0.056575519728345514, 0.06572045038477103, 0.054127642085127214, 0.043563045319647276, 0.06591126034112327, 0.07628036133401006, 0.041622800934955184, 0.03976764255445209, 0.06841822720408341, 0.1531441762958089, 0.10480381841253528, 0.12717908180695026, 0.10786231882388242, 0.10418639482055059, 0.12264574267591011, 0.06831970565743539, 0.13281758860583448, 0.09617844186307012, 0.10510012194116714, 0.1039194749665614, 0.11308908215239666, 0.0883774966496973, 0.08519806384777207, 0.07979158393423602, 0.11765012490445848, 0.11385668948652039, 0.11659573355371322, 0.20761628901941698, 0.1905244259152702, 0.185727921010715, 0.10345074993931125, 0.18152874334156754, 0.1615771856125452, 0.1443810025764769, 0.14687057346476107, 0.12995784888998985, 0.08936368401493022, 0.08742152290073846, 0.06176167002782529, 0.014407744428031388, 0.11334569884929735, 0.053225261227612286, 0.06425192052964335, 0.02733485202958308, 0.021560425088220092, 0.13347670909585063, 0.12305525047806642, 0.15495359167985512, 0.14211674081086856, 0.12089291314975048, 0.13088137342549067, 0.17283445823183918, 0.14818799194649968, 0.12986820598043392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020733736145066572, 0.0019299733952226061, 0.02973473448607422, 0.06650957308145766, 0.09400879512868465, 0.04507319897834128, 0.11088105269612791, 0.09036855597940652, 0.056772884135678936, 0.06589780001698231, 0.0501485500633051, 0.08012148587772461, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014732228265029512, 9.999999999998899e-05, 0.0024872748192090732, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2059684024587789, 0.2380935903305169, 0.2680916229377712, 0.2473406860612648, 0.19916524240328504, 0.21096383594575596, 0.27608512800372254, 0.31566317734518556, 0.26393717132909655, 0.04832447565040421, 0.0680106200714421, 0.04051493802215533, 0.069524397171011, 0.058300201558230236, 0.05892509922529532, 0.05634399857321859, 0.057125696501586054, 0.06810010766497432, 0.11528281097937287, 0.11958101231578788, 0.1957387559348438, 0.1273038672602097, 0.12696452397925295, 0.1927425013834123, 0.12726516482527295, 0.14780932924870704, 0.13497599255137538, 0.21946310601505314, 0.1940992526981854, 0.1807845347549295, 0.20470631063409417, 0.24071473663583087, 0.19793470895393417, 0.1773432301457275, 0.18786767110000924, 0.17663576632035616, 0.14064854290961115, 0.11907731808160937, 0.13602444470206343, 0.17728699157158334, 0.1666771345740794, 0.1585524610577952, 0.1321804076910872, 0.14064563099703553, 0.11479011285128526, 0.19232534949242674, 0.19949012795936027, 0.21161462451473112, 0.19929342702151331, 0.2009631912818044, 0.21494228930167292, 0.18509337585710317, 0.21414455010404065, 0.2066551665802403, 0.15121685998022405, 0.16419894768870058, 0.17462401285739437, 0.16003050671371288, 0.1557528934270045, 0.15190476598549252, 0.165379271443871, 0.15533433132400898, 0.17135721331314602, 0.1641819034908376, 0.15724013747519716, 0.1684883835612878, 0.18166585370728938, 0.2045196891827561, 0.1928200209844413, 0.1454655722467333, 0.14363457007848446, 0.2217259492404876, 0.29623621805934874, 0.24352107287212377, 0.2597225668585551, 0.14980867167134637, 0.1569326043632462, 0.20231316786920217, 0.17785666092023233, 0.20436651222316704, 0.16070938232727416, 0.1747514563689121, 0.16614417043145824, 0.16468573248503648, 0.17005168543345772, 0.16332292785515767, 0.16493466851189442, 0.18019980831032956, 0.1799212669032595, 0.18319944629557394, 0.07489234147012303, 0.05762158884555213, 0.07200449967284095, 0.0705025572007908, 0.07276756942403317, 0.0687753275318882, 0.061928773132682524, 0.06671732657457119, 0.06839377434642557]}, "mutation_prompt": null}
{"id": "acc9a6e2-425c-48ef-8ec2-44d9d0ad8b93", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / (math.gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.power(np.abs(v), 1 / beta)\n            return step\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Levy Flight mutation\n                levy_step = levy_flight(self.dim)\n                mutant_levy = pop[i] + F * levy_step\n                mutant_levy = np.clip(mutant_levy, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved", "description": "Enhancing exploration by incorporating Levy Flight behavior for population diversity.", "configspace": "", "generation": 96, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'math' is not defined\").", "error": "NameError(\"name 'math' is not defined\")", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {}, "mutation_prompt": null}
{"id": "afc232e9-bf78-442e-84ce-4e3d13fd35b6", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Chaotic map mutation\n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved", "description": "Improving the diversity and exploration capability by incorporating a chaotic map to enhance population initialization and mutation.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.5985905945981405, 0.6418528239427833, 0.6570889863489574, 0.6353921269474867, 0.6338449918771525, 0.6042417061176297, 0.6163728086519452, 0.575646372611454, 0.6464590804013055, 0.2232009576963434, 0.34397932449127433, 0.14420175404675206, 0.059806823707136525, 0.3082210710292538, 0.07344837567737306, 0.14408304230863667, 0.26936096546079646, 0.32922791630692705, 0.09619114933103334, 0.11596585884156829, 0.09946162895579713, 0.1037786134888724, 0.10857055778090285, 0.11277059764070052, 0.10507273837914233, 0.12194849081277792, 0.08711688823531605, 0.09173395431576481, 0.09492870114022534, 0.128280411142366, 0.10979032010573264, 0.07807082070344062, 0.09674000702860686, 0.11035476486537532, 0.07845389968075978, 0.12830682054568676, 0.9308524261822319, 0.9329473198789054, 0.8595397987773026, 0.9387275042401223, 0.9643825927576669, 0.9247713529494166, 0.9111981869655849, 0.9707917223320971, 0.7977798208508912, 0.2389365461465921, 0.31756920610218453, 0.38229528473536134, 0.32101015994509274, 0.35568838001649483, 0.22757218454099726, 0.23866581722622426, 0.33665671862741975, 0.3123005058576366, 0.6248564407239947, 0.34103012988596815, 0.33859527928949307, 0.24157999635742666, 0.6322283688191209, 0.335069677759928, 0.25989943116694547, 0.6639519454319931, 0.2374271224223562, 0.17924883055892538, 0.1500154215906292, 0.14638712818586896, 0.129570191340047, 0.10382024209285223, 0.1533687252746373, 0.10455141627464415, 0.13458357032178048, 0.12111122430063348, 0.1824721237186211, 0.1340776634011117, 0.12190726078103686, 0.09507741255803848, 0.12543625674509296, 0.12782125882869455, 0.16142857467638372, 0.11199116658566621, 0.11553898829569353, 0.027407056415422404, 0.008203505484840945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03318422347828509, 9.999999999998899e-05, 0.029269717227038416, 0.0396062241687658, 0.06377516339489009, 0.035397582296437746, 0.02558961656730485, 0.01947971271179172, 0.08063993157947225, 0.05093145931889176, 0.0986806069664442, 0.09279406763273257, 0.04686516063132928, 0.14069585501140014, 0.19283049032685307, 0.05834415910569024, 0.0702740576952321, 0.1345793069884874, 0.04413650041774053, 0.12150589661408051, 0.14822063018943465, 0.07396383478611879, 0.16693377537086473, 0.1503329536493746, 0.13758102992693766, 0.14553552139744375, 0.05116696708477253, 0.07735028612795014, 0.09562686187792513, 0.10253285420313207, 0.4083003456634795, 0.42655599155494406, 0.4342171386386007, 0.4325393898133556, 0.40588229323753144, 0.4599397181217444, 0.4845047372994069, 0.40677692430646717, 0.42611284815252215, 0.05993232797653314, 0.09977013582226768, 0.11121632037371743, 0.08308879893924148, 0.1195110614475472, 0.10837830293423745, 0.06668786887924738, 0.10105432906983947, 0.11606697652862008, 0.15407550159332206, 0.16554913086577527, 0.14278590933571467, 0.15348017719495222, 0.17631811151326315, 0.1713309271125767, 0.15075486896471813, 0.18772445163066398, 0.2287601534111503, 0.2754191704396808, 0.23328223906020973, 0.31072103768151993, 0.3018894052992438, 0.28274722359761273, 0.2673674505655156, 0.31351352880932415, 0.3064070492215085, 0.27853576062689567, 0.2933702678194928, 0.25166133533206414, 0.24863721085947033, 0.24207429628457877, 0.19147898154088572, 0.25599869590673985, 0.20371607575939665, 0.1812448021370584, 0.1730872958475428, 0.2117345911961237, 0.19533986473056697, 0.17667988154800895, 0.1702932235764223, 0.17857069421007232, 0.178893039393345, 0.17342025310555842, 0.19514458740706286, 0.20604436106645085, 0.18397428347751132, 0.19971088527317948, 0.20295113084663896, 0.1880078398531818, 0.19892657512586498, 0.17828210285968527, 0.19104411364134488, 0.1720987180848228, 0.18859066300600258, 0.6904284054291352, 0.1621636858976916, 0.16689677733684016, 0.7035663260180858, 0.6746563891328488, 0.16540110178050904, 0.545044330957604, 0.7468811816546959, 0.6957385647789247, 0.5523555953771957, 0.12293178214636025, 0.35176553038784175, 0.16329952672714176, 0.16187780957885012, 0.08995375257926685, 0.1242442934167649, 0.20589165791364683, 0.5901112081831372, 0.16475100012235766, 0.18024139026858954, 0.17817043005663713, 0.18386313508343033, 0.1720300354417693, 0.16935918313640708, 0.17877804597335967, 0.17810799174420977, 0.18361246234787276, 0.07974805747655356, 0.07880115241433105, 0.11929924228830346, 0.07436439395127614, 0.0754885503171765, 0.06874730089126058, 0.08464045586697411, 0.07931779789379145, 0.06825964553982888]}, "mutation_prompt": null}
{"id": "cd2546e1-d29f-4ee1-b570-ac23e19fa162", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved_Adaptive:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 4.0 * x * (1.0 - x)\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Adaptive mutation with dynamic F and CR\n                F_i = np.random.normal(F, 0.1)  # Adaptive F with small perturbation\n                CR_i = np.random.normal(CR, 0.1)  # Adaptive CR with small perturbation\n                \n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F_i * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F_i * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F_i * (gbest - pop[i]) + F_i * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR_i, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved_Adaptive", "description": "Enhancing population diversity by introducing a novel adaptive mutation strategy based on dynamic F and CR values.", "configspace": "", "generation": 98, "fitness": 0.22498611333206178, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer_Improved_Adaptive got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.6375603825784373, 0.6227088792610946, 0.6147505706874341, 0.6070802902725316, 0.632821214385231, 0.6279115132513724, 0.6381569897929448, 0.6112792882736853, 0.6210835768304155, 0.04775882545964216, 0.3404575914702127, 0.08275144016837588, 0.10543459246884668, 0.3606378832613175, 0.06992718444991786, 0.04558161449842668, 0.11379735675108626, 0.10160295155065469, 0.0837041724163069, 0.0977812677017662, 0.1004702148649338, 0.0940732830546871, 0.101795160394619, 0.08200052709772176, 0.09846892974699017, 0.11068400161859804, 0.06786120242151972, 0.1156710657592197, 0.11116992524983982, 0.09026703779711187, 0.0839630903701516, 0.11481357443837115, 0.09667654610978516, 0.09031410626894942, 0.08000550903016901, 0.10249931328775619, 0.9366668455098904, 0.9133603354022023, 0.9472535577350191, 0.9473022889413413, 0.9433132779162011, 0.8753047738055807, 0.9208855764946258, 0.9268427283138307, 0.8961775268265345, 0.2685093912304568, 0.306967521673959, 0.28759710159132323, 0.2271504030087621, 0.2850834232707785, 0.3587625734116986, 0.3055037629220726, 0.33828301919886583, 0.2636504189138703, 0.31648005958926995, 0.6142745377091745, 0.6187743357694744, 0.19451024362821567, 0.7011408695397703, 0.26534171341054924, 0.229269524137088, 0.2150395138332678, 0.15398008215415648, 0.12977553135287967, 0.11913839587450725, 0.09752697398072885, 0.12029495362331877, 0.12268618609560566, 0.10229148872098726, 0.12015910984390343, 0.07923366505936902, 0.10997175151529959, 0.1405312994441814, 0.1652322562633708, 0.11489870209893438, 0.14519606699522558, 0.12218841474311415, 0.09611476223723037, 0.11408706089090792, 0.17293394718848298, 0.0935649932898781, 9.999999999998899e-05, 0.006457963081928031, 0.05897939919160344, 9.999999999998899e-05, 0.07505583896775647, 0.007237963836723482, 0.007335821040735935, 0.00012002760581819594, 0.001017628146682381, 0.026780011630745837, 0.06519265248372996, 0.06561039696082238, 0.14207231724202252, 0.10011546239675484, 0.019850055319014293, 0.1509769545188837, 0.06007821200730845, 0.06799155774954946, 0.043304152886509684, 0.1365283884416887, 0.1060397369611985, 0.050732214066411485, 0.0546717102604789, 0.1043144822470633, 0.050458251669369014, 0.05070260746767852, 0.04212039065787776, 0.06561311799292724, 0.10565493363882672, 0.061214269936982424, 0.08116851317326523, 0.1379767701169703, 0.06384651200104341, 0.11106482397614692, 0.2217773690446465, 0.06431950961152977, 0.4052680544155852, 0.42889695406998285, 0.39878469520855686, 0.47652878381322195, 0.45907161577083044, 0.4742981028758747, 0.46443676666503886, 0.41330650815407466, 0.4624498845164273, 0.09138271914309948, 0.09793269303916041, 0.08659722445789864, 0.1119505614782309, 0.08197341196922536, 0.12449743570597771, 0.04577136216737421, 0.10512441155652652, 0.06992716903122309, 0.1637711076917081, 0.15618254241965346, 0.1796759742612397, 0.19592277221951593, 0.15310712588893916, 0.12403999559004919, 0.14717788607712534, 0.1612972594356925, 0.1610364861466156, 0.3028138844381857, 0.2966007108372294, 0.27932830711424017, 0.2480316748789464, 0.16714179142173125, 0.2959629270587436, 0.2773159815902029, 0.3139887714568519, 0.2634923351810283, 0.2144979020141281, 0.21365737717048783, 0.24074150835635133, 0.263832449063782, 0.15762379984640607, 0.24640479856417297, 0.2683923112868819, 0.17684727620966678, 0.15228508077318514, 0.19373374401611232, 0.16076117238894583, 0.19255993653492354, 0.17887722085352475, 0.19232403786499186, 0.19017858434104928, 0.1852233591434973, 0.17717416568662592, 0.19206953346635414, 0.19299329073303884, 0.19970176488611724, 0.17674479880812177, 0.18373454153214375, 0.18492093730606407, 0.16350845467581732, 0.1777218028018861, 0.17846923557512506, 0.17370886728037038, 0.1836024164731227, 0.18883442992503596, 0.12248583685114467, 0.14434708924895878, 0.15823608206391127, 0.16349670797170657, 0.1385663809415537, 0.6672032757354426, 0.7338977602958292, 0.25066124645564847, 0.40255732854771353, 0.627634221488899, 0.5693856063691233, 0.16404259325619786, 0.16458327287405572, 0.13776405822747906, 0.2097523896035971, 0.06349378708383213, 0.16880155324662316, 0.1644688557129661, 0.1873414912741851, 0.1568432640550782, 0.16465163761617985, 0.16600272802314087, 0.16763538846479664, 0.17977908635890905, 0.17254657386120076, 0.07960085908430015, 0.06207935782736862, 0.07549391427395491, 0.07148728260459392, 0.07565984549925453, 0.06701654403134816, 0.06326676638934625, 0.06825675131170683, 0.06839820322464274]}, "mutation_prompt": null}
{"id": "89fb226d-bd11-4495-8048-00d164325e9c", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer_Improved_Refined:\n    def __init__(self, budget, dim, npop=30, F=0.5, CR=0.9, w=0.7, c1=1.5, c2=1.5, F_decay=0.95, CR_decay=0.95, w_decay=0.99, c1_decay=0.99, c2_decay=0.99):\n        self.budget = budget\n        self.dim = dim\n        self.npop = npop\n        self.F = F\n        self.CR = CR\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.F_decay = F_decay\n        self.CR_decay = CR_decay\n        self.w_decay = w_decay\n        self.c1_decay = c1_decay\n        self.c2_decay = c2_decay\n\n    def __call__(self, func):\n        def evaluate(pop):\n            return np.array([func(ind) for ind in pop])\n\n        def chaotic_map(x):\n            return 3.6 * x * (1.0 - x)  # Modified chaotic map function\n\n        def initialize_population(npop, dim):\n            return np.array([[chaotic_map(np.random.rand()) * 10.0 - 5.0 for _ in range(dim)] for _ in range(npop)])\n\n        def mutate(pbest, gbest, pop, F, CR):\n            mutant_pop = []\n            for i in range(self.npop):\n                idxs = [idx for idx in range(self.npop) if idx != i]\n                \n                # Modified chaotic map mutation strategy\n                chaotic_val = chaotic_map(np.random.rand())\n                mutant_chaotic = pop[i] + F * chaotic_val\n                mutant_chaotic = np.clip(mutant_chaotic, -5.0, 5.0)\n                \n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_rand = np.clip(a + F * (b - c), -5.0, 5.0)\n\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant_best = np.clip(pop[i] + F * (gbest - pop[i]) + F * (a - b), -5.0, 5.0)\n                \n                mutant = np.where(np.random.rand(self.dim) < CR, mutant_rand, mutant_best)\n                \n                if func(mutant) < func(pop[i]):\n                    pop[i] = mutant\n                if func(mutant) < func(pbest[i]):\n                    pbest[i] = mutant\n                if func(mutant) < func(gbest):\n                    gbest = mutant\n            return pop, pbest, gbest\n\n        def update_velocity(pbest, pop, velocity, gbest, w, c1, c2):\n            for i in range(self.npop):\n                velocity[i] = w * velocity[i] + c1 * np.random.rand() * (pbest[i] - pop[i]) + c2 * np.random.rand() * (gbest - pop[i])\n                velocity[i] = np.clip(velocity[i], -5.0, 5.0)\n            return velocity\n\n        pop = initialize_population(self.npop, self.dim)\n        pbest = np.copy(pop)\n        gbest = pop[np.argmin(evaluate(pop))]\n        velocity = np.zeros_like(pop)\n        \n        for _ in range(self.budget):\n            self.F *= self.F_decay\n            self.CR *= self.CR_decay\n            self.w *= self.w_decay\n            self.c1 *= self.c1_decay\n            self.c2 *= self.c2_decay\n            \n            pop, pbest, gbest = mutate(pbest, gbest, pop, self.F, self.CR)\n            velocity = update_velocity(pbest, pop, velocity, gbest, self.w, self.c1, self.c2)\n            pop += velocity\n        \n        return gbest", "name": "Enhanced_DE_PSO_Optimizer_Improved_Refined", "description": "Incorporating a novel chaotic mutation strategy based on a 1D chaotic map to enhance population exploration.", "configspace": "", "generation": 99, "fitness": 0.2340389022481746, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer_Improved_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "45a05c63-11f8-4003-ba57-34ec8476c9de", "metadata": {"aucs": [0.6423648829870467, 0.6361550395273701, 0.6381120891063508, 0.6304789248027824, 0.6167385789832458, 0.6131877010080553, 0.6444935600760224, 0.5968551126612441, 0.6471390284649097, 0.34319021014741635, 0.07685885743542409, 0.1578964383104854, 0.052829696390541137, 0.19213302453317416, 0.10729422240884412, 0.06320254946302561, 0.11729664242905635, 0.16592736451217438, 0.09202962890329514, 0.10446666627346146, 0.07812356228013284, 0.11314926101982381, 0.11102595380591906, 0.12065893061855382, 0.0806265165402772, 0.1194506570224323, 0.10590764005395759, 0.07772252001426583, 0.09738483275479537, 0.07666764433982953, 0.07051890750028433, 0.08340780223341082, 0.08515956039065753, 0.10839115975496694, 0.08539493550708266, 0.09228612256822966, 0.9298063869192877, 0.9313727485241111, 0.8856961296600346, 0.926336079457246, 0.9484374989659368, 0.8782935900252865, 0.8482870761948358, 0.9707915208760522, 0.8326562523316157, 0.2945083933294742, 0.24582981538545168, 0.36397571282438435, 0.3441321552125437, 0.3525743714331968, 0.33520456232788887, 0.3358793167611308, 0.3336986152576751, 0.2507498636091534, 0.1941655177701418, 0.3319003645856441, 0.3483217151153657, 0.7355823157265908, 0.5404881150835045, 0.3277113245480088, 0.670380599716773, 0.20817483662219727, 0.19315833136265015, 0.14367266308355742, 0.12348528573177586, 0.14009540475821647, 0.13243384160959226, 0.15932288442396858, 0.13160304607299822, 0.16246949694832435, 0.11720058299688463, 0.1304199226862327, 0.11589913088990811, 0.1777241944364376, 0.1244507968224492, 0.11279046840393803, 0.11208202916346943, 0.0784081555952254, 0.1219368592423018, 0.20200899707540587, 0.12223729815134388, 9.999999999998899e-05, 0.05657516168694887, 9.999999999998899e-05, 0.15988088650746946, 0.04091616899545292, 9.999999999998899e-05, 9.999999999998899e-05, 0.06742100871309464, 9.999999999998899e-05, 0.02718897148844679, 0.060753808137642085, 0.033238504636012856, 0.11580829385040148, 0.10038781339524849, 0.055389589988258936, 0.06449993049326552, 0.17308493195071573, 0.13234404311398906, 0.06405557624908598, 0.1116926368743274, 0.08153353720000345, 0.0637491626898069, 0.05342236956496704, 0.05325828933635457, 0.06447188690814087, 0.13705029207497899, 0.09493505876611674, 0.09359994805870198, 0.027128627071914657, 0.11147276082005952, 0.1033789615098063, 0.14670835654846492, 0.12490127879851987, 0.15582642226548105, 0.22631109170691843, 0.09494177609649901, 0.470836881255161, 0.4347071216143823, 0.469616609256745, 0.45587385342663655, 0.4330540754364305, 0.4286907746739791, 0.42747608488226285, 0.47875844355707, 0.4620335003203162, 0.10093497120093764, 0.07797308269775427, 0.10774750998980909, 0.2231251052112554, 0.069283391665666, 0.10991135507521244, 0.09810103622392685, 0.2507409686584642, 0.09141671108734428, 0.1456472287582501, 0.1652452234394587, 0.13618625753584768, 0.19922162429882406, 0.19619516792208413, 0.1536604626971173, 0.20871643220875225, 0.15271638064375626, 0.15652503117218164, 0.3001749896209127, 0.29037671966641443, 0.3229462037340719, 0.3170216661235623, 0.2921937732639742, 0.3306987380358848, 0.2758016224822152, 0.3044523441473147, 0.3096795202280348, 0.22954049782774255, 0.21732383867859717, 0.279439094213101, 0.183906106071841, 0.17645594009714916, 0.2915453568962505, 0.1916122385542144, 0.21144463005316416, 0.22566054851305106, 0.20265872140434416, 0.1797529029944268, 0.20466401559068093, 0.1896642644351323, 0.19925435452988294, 0.19059571921700136, 0.178401508667406, 0.1855751047624724, 0.20698169015053858, 0.19332614738173692, 0.16192885171007476, 0.19879559743071618, 0.1702274565694255, 0.17966298066877318, 0.1912749785433322, 0.19586477491155885, 0.18034684253268407, 0.17756779460565886, 0.14511230792938368, 0.16334700905245958, 0.1554900335440057, 0.14347946914822174, 0.15675954267132441, 0.17211093112093423, 0.1639083521480228, 0.1296880899645525, 0.7637674018864845, 0.3329808259533418, 0.31684428423772515, 0.39549709127595745, 0.16290648204264524, 0.4635273087504339, 0.16269656484692696, 0.144986798174915, 0.20717994834395526, 0.6743268667161928, 0.1917011162615092, 0.1693495569298189, 0.2085011654125808, 0.17550253145020178, 0.17875617375745767, 0.1722235643476988, 0.17450478285688353, 0.17321900880930974, 0.18856116939447143, 0.0778711369398668, 0.08606752242967264, 0.08856455668320873, 0.07849939606709855, 0.06754265017397265, 0.0653769555322522, 0.07531367930932042, 0.07192375028323805, 0.10579440389284611]}, "mutation_prompt": null}
