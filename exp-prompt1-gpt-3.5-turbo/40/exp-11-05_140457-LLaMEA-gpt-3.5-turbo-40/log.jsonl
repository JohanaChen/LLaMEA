{"id": "39fa3997-4ee6-4409-8a91-2552fa293ec6", "solution": "import numpy as np\n\nclass DynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.9 - 0.5 * _ / self.budget\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n        return self.global_best", "name": "DynamicMutationPSO", "description": "An innovative algorithm that combines Particle Swarm Optimization (PSO) with a dynamic mutation strategy to efficiently optimize black-box functions in a constrained budget.", "configspace": "", "generation": 0, "fitness": 0.2031671795975178, "feedback": "The algorithm DynamicMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": null, "metadata": {"aucs": [0.40919415557479766, 0.4310731301586347, 0.4442273450456501, 0.4626111215470895, 0.43970133590029936, 0.41216604187175476, 0.40240586498874875, 0.4315004307602909, 0.4148300770926515, 0.047747667910522096, 0.03382590291839027, 0.06602113729866887, 0.06664667796942247, 0.04119879846013974, 0.02898635256459836, 0.01646009565373463, 0.02095725016509964, 0.0575446507219618, 0.05804648877454677, 0.10800588624290886, 0.09181690374874363, 0.07414530204866876, 0.11505519395601893, 0.10578865617584032, 0.09432746940773817, 0.09404860402165827, 0.15056491012178963, 0.09076482142681219, 0.09094127391878537, 0.09087697514596182, 0.0854740131128714, 0.09510869801008393, 0.07944587470842013, 0.11949482532575417, 0.05615195410656948, 0.10345781186232816, 0.8976967579295899, 0.8825578564276982, 0.9138944991633543, 0.8933683147311051, 0.9146089771080127, 0.8815251740298418, 0.9135691353741913, 0.9114450699449761, 0.9148490669730744, 0.2794406694025676, 0.2764853893489819, 0.28385077730193475, 0.28009950891740243, 0.2838332211447615, 0.2937133795083152, 0.29314282922355395, 0.28444287164555326, 0.299742261387028, 0.32512841612136456, 0.13811941407434647, 0.13735979186295066, 0.19308902596170996, 0.19028406817270815, 0.2642678061617123, 0.2242849818762429, 0.16400855384069668, 0.23419712878042187, 0.1225062215044378, 0.17370719858422856, 0.16943694956081268, 0.16568080726992518, 0.09459730108519648, 0.2064680541342918, 0.18615467418657594, 0.1753983156677721, 0.1594412181445659, 0.12339425138626281, 0.15744345384337866, 0.11422347477797101, 0.17172658002814423, 0.1301270836544851, 0.15217750898020932, 0.12703639481463902, 0.16956189379174502, 0.15763487488342487, 9.999999999998899e-05, 0.04464635465342348, 0.039277700032963936, 0.04186482090322474, 0.0005055338307147217, 0.004091095719565785, 9.999999999998899e-05, 0.0001021784597911024, 0.012433354675693065, 0.09057206748844149, 0.049236724980225355, 0.06352808974214408, 0.08160753274186427, 0.009787634309749271, 0.01327910101330998, 0.12263633955295605, 0.07453851125505373, 0.06761409472111501, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004034582961832123, 0.08528922283503504, 0.0751366799623997, 0.0912972367680821, 0.06824280538544858, 0.10848106456080409, 0.07992399882667656, 0.06223336220147302, 0.09782855784831501, 0.07018987549446942, 0.4113002798497811, 0.4347582150636796, 0.40858082408498053, 0.39572734115656893, 0.3771034009370171, 0.37224813668345647, 0.3898504425327899, 0.40186515765079855, 0.42732353205844587, 0.04412412164585788, 0.07336843738470611, 0.06653115682507449, 0.06632711166221084, 0.056555075958657275, 0.10994701580423594, 0.1095534951045476, 0.08325137805160399, 0.1060216340182053, 0.16524891366508432, 0.2095658317811262, 0.3303629137527728, 0.148058729447905, 0.26036541653405343, 0.1491915830328575, 0.1568840420416755, 0.24305151806471337, 0.24962586045223034, 0.2816838033651057, 0.2568273200188067, 0.14067664755938092, 0.2597515189636649, 0.21215482425430643, 0.27133086597712663, 0.23629424301856994, 0.2918254836637587, 0.15641337968816638, 0.18205436655052676, 0.20765427252726387, 0.14126500105193118, 0.1826338138768424, 0.124743985831825, 0.20893105425901448, 0.1851623651701535, 0.18878874635512366, 0.10594736256352077, 0.2330593994841451, 0.20448514664058826, 0.22391804763679313, 0.1795878830578671, 0.23969175757053263, 0.20146490695665276, 0.18419387905202078, 0.20456294838488098, 0.23944207041567456, 0.18422995507179885, 0.19122337903694753, 0.20738483639950533, 0.1897832828720858, 0.18471497042845764, 0.19637124417394147, 0.17651581908600478, 0.1733548879298651, 0.19088049780354754, 0.12504882146351792, 0.12413682707919815, 0.13299755968377325, 0.17136535741078207, 0.19702081969638385, 0.6477563156374353, 0.09912842686588319, 0.16796737955962016, 0.17391534968401134, 0.5406594315747664, 0.20870274297271363, 0.5111209541147237, 0.207078294742714, 0.5139671523922587, 0.5683857824407816, 0.10363697565985619, 0.36717405010342685, 0.4349270332678925, 0.17979970149436408, 0.18748476923540158, 0.17447936182357804, 0.197684949877453, 0.18212681213120796, 0.17506435144049937, 0.1796559647712609, 0.19499464481991924, 0.20848969080490187, 0.09109675769427772, 0.06704481193962242, 0.07210394580969148, 0.07874780784170365, 0.08301358427868177, 0.07713641172611607, 0.07970943654346829, 0.08463368043006159, 0.07434588175557288]}, "mutation_prompt": null}
{"id": "333b900c-6172-4b4f-8945-93137ab837ed", "solution": "import numpy as np\n\nclass DynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.9 - 0.5 * _ / self.budget\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n        return self.global_best", "name": "DynamicMutationPSO", "description": "An innovative algorithm that combines Particle Swarm Optimization (PSO) with a dynamic mutation strategy to efficiently optimize black-box functions in a constrained budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "39fa3997-4ee6-4409-8a91-2552fa293ec6", "metadata": {"aucs": [0.40919415557479766, 0.4310731301586347, 0.4442273450456501, 0.4626111215470895, 0.43970133590029936, 0.41216604187175476, 0.40240586498874875, 0.4315004307602909, 0.4148300770926515, 0.047747667910522096, 0.03382590291839027, 0.06602113729866887, 0.06664667796942247, 0.04119879846013974, 0.02898635256459836, 0.01646009565373463, 0.02095725016509964, 0.0575446507219618, 0.05804648877454677, 0.10800588624290886, 0.09181690374874363, 0.07414530204866876, 0.11505519395601893, 0.10578865617584032, 0.09432746940773817, 0.09404860402165827, 0.15056491012178963, 0.09076482142681219, 0.09094127391878537, 0.09087697514596182, 0.0854740131128714, 0.09510869801008393, 0.07944587470842013, 0.11949482532575417, 0.05615195410656948, 0.10345781186232816, 0.8976967579295899, 0.8825578564276982, 0.9138944991633543, 0.8933683147311051, 0.9146089771080127, 0.8815251740298418, 0.9135691353741913, 0.9114450699449761, 0.9148490669730744, 0.2794406694025676, 0.2764853893489819, 0.28385077730193475, 0.28009950891740243, 0.2838332211447615, 0.2937133795083152, 0.29314282922355395, 0.28444287164555326, 0.299742261387028, 0.32512841612136456, 0.13811941407434647, 0.13735979186295066, 0.19308902596170996, 0.19028406817270815, 0.2642678061617123, 0.2242849818762429, 0.16400855384069668, 0.23419712878042187, 0.1225062215044378, 0.17370719858422856, 0.16943694956081268, 0.16568080726992518, 0.09459730108519648, 0.2064680541342918, 0.18615467418657594, 0.1753983156677721, 0.1594412181445659, 0.12339425138626281, 0.15744345384337866, 0.11422347477797101, 0.17172658002814423, 0.1301270836544851, 0.15217750898020932, 0.12703639481463902, 0.16956189379174502, 0.15763487488342487, 9.999999999998899e-05, 0.04464635465342348, 0.039277700032963936, 0.04186482090322474, 0.0005055338307147217, 0.004091095719565785, 9.999999999998899e-05, 0.0001021784597911024, 0.012433354675693065, 0.09057206748844149, 0.049236724980225355, 0.06352808974214408, 0.08160753274186427, 0.009787634309749271, 0.01327910101330998, 0.12263633955295605, 0.07453851125505373, 0.06761409472111501, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004034582961832123, 0.08528922283503504, 0.0751366799623997, 0.0912972367680821, 0.06824280538544858, 0.10848106456080409, 0.07992399882667656, 0.06223336220147302, 0.09782855784831501, 0.07018987549446942, 0.4113002798497811, 0.4347582150636796, 0.40858082408498053, 0.39572734115656893, 0.3771034009370171, 0.37224813668345647, 0.3898504425327899, 0.40186515765079855, 0.42732353205844587, 0.04412412164585788, 0.07336843738470611, 0.06653115682507449, 0.06632711166221084, 0.056555075958657275, 0.10994701580423594, 0.1095534951045476, 0.08325137805160399, 0.1060216340182053, 0.16524891366508432, 0.2095658317811262, 0.3303629137527728, 0.148058729447905, 0.26036541653405343, 0.1491915830328575, 0.1568840420416755, 0.24305151806471337, 0.24962586045223034, 0.2816838033651057, 0.2568273200188067, 0.14067664755938092, 0.2597515189636649, 0.21215482425430643, 0.27133086597712663, 0.23629424301856994, 0.2918254836637587, 0.15641337968816638, 0.18205436655052676, 0.20765427252726387, 0.14126500105193118, 0.1826338138768424, 0.124743985831825, 0.20893105425901448, 0.1851623651701535, 0.18878874635512366, 0.10594736256352077, 0.2330593994841451, 0.20448514664058826, 0.22391804763679313, 0.1795878830578671, 0.23969175757053263, 0.20146490695665276, 0.18419387905202078, 0.20456294838488098, 0.23944207041567456, 0.18422995507179885, 0.19122337903694753, 0.20738483639950533, 0.1897832828720858, 0.18471497042845764, 0.19637124417394147, 0.17651581908600478, 0.1733548879298651, 0.19088049780354754, 0.12504882146351792, 0.12413682707919815, 0.13299755968377325, 0.17136535741078207, 0.19702081969638385, 0.6477563156374353, 0.09912842686588319, 0.16796737955962016, 0.17391534968401134, 0.5406594315747664, 0.20870274297271363, 0.5111209541147237, 0.207078294742714, 0.5139671523922587, 0.5683857824407816, 0.10363697565985619, 0.36717405010342685, 0.4349270332678925, 0.17979970149436408, 0.18748476923540158, 0.17447936182357804, 0.197684949877453, 0.18212681213120796, 0.17506435144049937, 0.1796559647712609, 0.19499464481991924, 0.20848969080490187, 0.09109675769427772, 0.06704481193962242, 0.07210394580969148, 0.07874780784170365, 0.08301358427868177, 0.07713641172611607, 0.07970943654346829, 0.08463368043006159, 0.07434588175557288]}, "mutation_prompt": null}
{"id": "40438c6b-a7a0-4d26-8bd7-43342d32b2bf", "solution": "import numpy as np\n\nclass EnhancedMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n        self.mutation_rate = 0.2\n\n    def mutate(self, particle):\n        return particle + np.random.uniform(-self.mutation_rate, self.mutation_rate, self.dim)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.9 - 0.5 * _ / self.budget\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                self.particles[i] = np.clip(self.mutate(self.particles[i]), -5.0, 5.0)\n        return self.global_best", "name": "EnhancedMutationPSO", "description": "Enhancing DynamicMutationPSO by incorporating a mutation operator to promote exploration and diversity in the search space.", "configspace": "", "generation": 2, "fitness": 0.1941775338987829, "feedback": "The algorithm EnhancedMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "39fa3997-4ee6-4409-8a91-2552fa293ec6", "metadata": {"aucs": [0.35494681613610424, 0.3838579751499216, 0.37081675960588356, 0.34484167226042295, 0.34992097958023316, 0.3704029343474038, 0.3591370229815657, 0.39047530517692364, 0.3573846973166178, 9.999999999998899e-05, 0.00024834962543462957, 0.02114530385937563, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09726900655842796, 0.1156957816741706, 0.0744510490268212, 0.09924708446364239, 0.08988509655104304, 0.08303055937132153, 0.07707600894005429, 0.09653146090473619, 0.07028054519920879, 0.08169338896232148, 0.07027347633937842, 0.07711691392166231, 0.10611626301710353, 0.08033173103894209, 0.06901813738336782, 0.0877104782790924, 0.07208117427689553, 0.061891878189361926, 0.918863860962492, 0.8795372161846822, 0.9158713496023645, 0.8823816735667858, 0.9194319432803915, 0.9118041813012624, 0.89193286059087, 0.8948772296328315, 0.889742416278364, 0.23109958946936116, 0.22269338383875636, 0.2471639135368945, 0.24148883590458237, 0.24012890547484178, 0.23151308091012934, 0.24875995956883767, 0.22553989015494424, 0.22381170417248308, 0.2350578412754708, 0.24456534546232156, 0.20514423866698672, 0.2746653485930102, 0.24527921944786624, 0.30825803250003314, 0.17463872639222133, 0.2771363335788102, 0.22657064994211973, 0.12937269501783522, 0.1358070413617628, 0.13333301378066242, 0.1367658711075046, 0.12138881037108773, 0.07120962530814834, 0.14116484712709065, 0.12110149186146923, 0.11965608601323252, 0.14873041514977703, 0.15537749242766186, 0.16262050696260466, 0.150938156205367, 0.1112363818345018, 0.13093343047235084, 0.1449201754425561, 0.12118721516864028, 0.14111719379715737, 0.01836763028763344, 9.999999999998899e-05, 0.007609425509498169, 0.0008082145618555359, 0.026048657894347182, 9.999999999998899e-05, 0.01737150459496606, 0.0009283862437183821, 0.007575365194467665, 0.07653733523155537, 0.09060005639806312, 0.0995318978593367, 0.08096186427184826, 0.043638213226398825, 0.06069196023616519, 0.0988166201788766, 0.054204033098379845, 0.05113088202336313, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07356593885264306, 0.08145763834009123, 0.06455237824269389, 0.06579887856098043, 0.04905640246871479, 0.058459937288098285, 0.07306805010108475, 0.06268248263487353, 0.07312052613493447, 0.35805852448155884, 0.36613679263452636, 0.3731594871237992, 0.3698104120557065, 0.3524786899361262, 0.345436022175985, 0.3689659641008708, 0.34219400898565033, 0.3491364304086738, 0.07019270698228453, 0.07177785592756192, 0.10311300928090017, 0.07772714705937578, 0.08068846095921012, 0.09910329252850147, 0.10736824709629877, 0.11235771766650726, 0.07174171992879763, 0.15205966993403963, 0.2005914476112466, 0.1577059830384362, 0.21975363936547687, 0.20978594504238757, 0.1613633646576358, 0.20524801584115215, 0.18642712405677708, 0.2025890226263577, 0.22996123845398475, 0.2592140800288735, 0.22519484386580257, 0.2550002857348188, 0.24335081708222128, 0.26326052839310754, 0.24415905804157645, 0.26452324328141774, 0.15198631044108335, 0.14707336651466307, 0.21815976916874125, 0.20736592251870478, 0.1725373118960215, 0.18730230919938873, 0.21202375829479403, 0.17509187040330687, 0.20243385805340208, 0.17861518453756198, 0.19726557266266043, 0.19008190798159308, 0.19126781762858636, 0.19979159768347066, 0.209827498794798, 0.20026888751352234, 0.1967257715440106, 0.16853715291814164, 0.22512275106198165, 0.1685347539900749, 0.1966208517830078, 0.1924116911759738, 0.17682597856959092, 0.17175956194000064, 0.1758106724120475, 0.21751933827789072, 0.19239462968366716, 0.17442773270516987, 0.12536992459854923, 0.12551824623535446, 0.15210637468398125, 0.48456733501219573, 0.19536332189222538, 0.6341577320723992, 0.12118675530697331, 0.1681974365633334, 0.1730337058876832, 0.5029480193638678, 0.20682388483703584, 0.42647934618882777, 0.50061500877924, 0.20567603651393662, 0.513222687850655, 0.10391577113161454, 0.5343896787609426, 0.4313096608683713, 0.19026038268536571, 0.1824262434166255, 0.17446280730468333, 0.1672907890260492, 0.17224067758831152, 0.1821811513929098, 0.1810338930621107, 0.18141068125085813, 0.21601389833884188, 0.08429431494572925, 0.09064208234250659, 0.07853310738474628, 0.08283821513740208, 0.08848352120530367, 0.11227873224302243, 0.08994868124172062, 0.06319375295700191, 0.0664345290540741]}, "mutation_prompt": null}
{"id": "f17aa233-a454-4d0c-9e0b-4db8e522b9eb", "solution": "import numpy as np\nfrom scipy.stats import levy\n\nclass EnhancedDynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.9 - 0.5 * _ / self.budget\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                levy_flight = levy.rvs(size=self.dim)  # Levy flight for global exploration\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component + levy_flight\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n        return self.global_best", "name": "EnhancedDynamicMutationPSO", "description": "Enhancing DynamicMutationPSO by incorporating Levy flight for global exploration.", "configspace": "", "generation": 3, "fitness": 0.05844332000079203, "feedback": "The algorithm EnhancedDynamicMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "39fa3997-4ee6-4409-8a91-2552fa293ec6", "metadata": {"aucs": [0.09764703268995745, 0.08104147663517636, 0.10232296281720521, 0.08941166170853654, 0.06343574052599665, 0.08043763529989356, 0.08754696697776732, 0.0742884758450515, 0.06710781959496204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026045038897015593, 0.03442448131739295, 0.011216755484090624, 0.012608725060755388, 0.018074767007688064, 0.010888300424583774, 0.018244632740415323, 0.01480240951197831, 0.01252396316401283, 0.002581704219515424, 0.0031567058741491794, 0.006387640477901968, 0.019586060842702313, 0.0066920024609095075, 0.020746294211634653, 0.012555644951746214, 0.009230379270576683, 0.01695047921872006, 0.062335110677196326, 0.053184103061823196, 0.048972864994411114, 0.05691285506894406, 0.0516799155856732, 0.03741046220055777, 0.06382586091920006, 0.050241704640266116, 0.03917414170812028, 0.0883037925754665, 0.0267508628641403, 9.999999999998899e-05, 0.0797706633798112, 0.07321859831366018, 9.999999999998899e-05, 9.999999999998899e-05, 0.01128661298981437, 9.999999999998899e-05, 0.10022929771034561, 0.13512399324798074, 0.09460958525239005, 0.11705149702560613, 0.05323846603717719, 0.04436093622181958, 0.08991796345747916, 0.05920972515916978, 0.11018322392387758, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006494351447350666, 0.015561082102570234, 0.016360147607938247, 0.03323171898553556, 9.999999999998899e-05, 0.046159135551327335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18335581232881049, 0.1237712147293405, 0.1811406202837278, 0.15393231647098504, 0.10852402480987444, 0.16877526984716373, 0.15077143117492575, 0.1285052538047925, 0.15294151909690934, 0.019059539452614405, 0.03901101471476609, 0.0020111880341613375, 0.03082755514743407, 9.999999999998899e-05, 0.017591177527858215, 0.020369778163361274, 0.000614898798050878, 0.026760334164489863, 0.12494997616388459, 0.11504399635728679, 0.10560751303784022, 0.10214106755623542, 0.11115872750404465, 0.09433301725498144, 0.10829346192151246, 0.08426655327188204, 0.12648253242573915, 0.1363559563245097, 0.13130247735176925, 0.14306848025447194, 0.17659464531766678, 0.1415840096048958, 0.1314816120710215, 0.14687725662893447, 0.17365418936972254, 0.11609543973958913, 0.07417681206476168, 0.0984667657916698, 0.08493813192552935, 0.09469432521893117, 0.08505622897106746, 0.07890439256240878, 0.09161063397922042, 0.10186713155863403, 0.07478385897607476, 0.13471858085017852, 0.11348059248280695, 0.13347114462468124, 0.12505096621409229, 0.12459392901076738, 0.14275348885668193, 0.13427260469845603, 0.1480535179193847, 0.13259199914332798, 9.999999999998899e-05, 9.999999999998899e-05, 0.12168129942520467, 0.0001300328118132299, 9.999999999998899e-05, 9.999999999998899e-05, 0.11351523142033215, 0.14136399956794632, 9.999999999998899e-05, 0.14627594379171371, 0.11900653515657089, 0.11594570336827692, 0.1101704246586569, 0.1570395268083561, 0.12522823223341462, 0.08215180303785874, 0.10962938601386563, 0.16542524009728599, 0.11047495283945119, 0.0653094068408695, 0.1501944741624297, 0.09188043294668768, 0.06662715209794112, 0.07164554212832919, 0.09962599535662975, 0.05149828420287794, 0.14690634951272563, 0.15782054628477804, 0.17347534856198765, 0.16562754641529154, 0.1661713254386754, 0.16715437322612192, 0.15726600675278735, 0.15973348496752804, 0.1659168535840223, 0.18219006064290955, 0.02009946494788928, 0.03260705261950514, 0.04226786382416525, 0.05313772477833867, 0.034995374824476344, 0.07600697415798818, 0.03246980932273147, 0.024893373304679667, 0.02790459254405142]}, "mutation_prompt": null}
{"id": "2464d9ac-4d41-47f6-b04f-c5f995194110", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n        self.inertia_weights = np.ones(self.population_size) * 0.9\n    \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                \n                diversity = np.sum(np.linalg.norm(self.particles - self.particles[i], axis=1))\n                self.inertia_weights[i] = 0.5 + 0.4 * (diversity / np.max(diversity))\n                \n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                \n                self.velocities[i] = self.inertia_weights[i] * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n        return self.global_best", "name": "EnhancedDynamicMutationPSO", "description": "Enhancing DynamicMutationPSO by incorporating a novel adaptive inertia weight update mechanism based on population diversity to improve exploration-exploitation balance.", "configspace": "", "generation": 4, "fitness": 0.20137090818319636, "feedback": "The algorithm EnhancedDynamicMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "39fa3997-4ee6-4409-8a91-2552fa293ec6", "metadata": {"aucs": [0.41019537160477104, 0.3965846253008978, 0.43097764968116903, 0.40526693079034226, 0.42975791146202214, 0.41764791213707697, 0.4113533573191914, 0.42384522678945236, 0.4568126758403439, 0.0360738319235443, 0.030998676515750057, 0.1115222849547608, 0.004896918636912995, 0.00017546353765796052, 0.049651341936662874, 0.03409392183858562, 0.023113383558189926, 0.02262822032836742, 0.05679049912183942, 0.12685658390419607, 0.08506826954675073, 0.07606486627165887, 0.13005415118506192, 0.11565816265803408, 0.08612968619537265, 0.10417586676706436, 0.13294434170980274, 0.09701715149134238, 0.09474000249767633, 0.08760255883820989, 0.08223796679728745, 0.09067933272858664, 0.08150130995981797, 0.11566206700680592, 0.06483630359629655, 0.10181134347674448, 0.8977091962032092, 0.8825732505868378, 0.9138683740036756, 0.8932295582321287, 0.9146490957862208, 0.881597152101342, 0.9135756279125917, 0.9116051448711927, 0.9155594766855594, 0.2833034283612258, 0.23850240065199546, 0.27518926847441805, 0.2612421259788812, 0.2797245298774579, 0.26944660680450283, 0.24692184229525738, 0.2695653962799739, 0.29361999945547934, 0.3003392518256853, 0.13811941407434647, 0.13735979186295066, 0.18632243045712993, 0.19023855798754197, 0.31211518968136875, 0.22043772771043546, 0.16400400449933983, 0.23419712878042187, 0.12029370491097091, 0.15692230831359122, 0.15741763094830075, 0.17058428442431994, 0.09341645861859271, 0.2232610546410838, 0.1949002181281413, 0.14788268393352022, 0.14692581710930885, 0.12476383529424895, 0.16096605939352615, 0.11678945923360784, 0.1710953484802944, 0.12732829034011828, 0.1488550665027364, 0.12690311340065086, 0.17271860397428718, 0.17245089510198774, 9.999999999998899e-05, 0.059051504092561435, 0.05903485171450107, 0.04387787401912824, 0.05211568921143461, 0.032506573750702206, 9.999999999998899e-05, 0.0032353407250786947, 9.999999999998899e-05, 0.10330724582878936, 0.058424260215244384, 0.05200651217483754, 0.09605611938135084, 0.011093976613639422, 0.029464277560582786, 0.0863406553484325, 0.10948880479912837, 0.08590182817225211, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08000731122728011, 0.0689618125869369, 0.07699472740097113, 0.049505122967374304, 0.08608251013529511, 0.08196279651718108, 0.062387653421924205, 0.10442147605991337, 0.0732867698354065, 0.4324891783473377, 0.3783617731482737, 0.42065886154149434, 0.4035310586457511, 0.4139792386172355, 0.3968599418940545, 0.40182964060832305, 0.3958405000189933, 0.3801890172462188, 0.043955779424123986, 0.0727907054828032, 0.06962498641404768, 0.05548773717238509, 0.053095223397235936, 0.11054417537735317, 0.09350695879392479, 0.08293688373158226, 0.07536321667813883, 0.1546555163422656, 0.22744953783828536, 0.25167193061291404, 0.1369432898731684, 0.30565493075240846, 0.15107118692266763, 0.23942227099448776, 0.21757991094700924, 0.2126441649276265, 0.2812415184295365, 0.2841991489830308, 0.14258498611987502, 0.25659608834678493, 0.21976144992343505, 0.25636516897448536, 0.23565552453310679, 0.28385742340372877, 0.1567386236328845, 0.21548441054818734, 0.22622180715947326, 0.13068402407576918, 0.15929368502992425, 0.13091325877921267, 0.21300775424418905, 0.18248361062219465, 0.19650979797089285, 0.10616047670908668, 0.2007498612966062, 0.2073135913059554, 0.23115583782370108, 0.2077814838315638, 0.21089348689537724, 0.1946216884750387, 0.17893681415359264, 0.194669282905936, 0.21885102620886943, 0.1845202958705957, 0.1881653800160703, 0.21002059639957593, 0.18201777861334067, 0.18557374552515404, 0.19567164275589954, 0.1706851518747482, 0.17298568443052642, 0.18812279464581605, 0.12528270347189496, 0.12409777322955196, 0.13275503204309913, 0.17138659927325184, 0.19697339687544468, 0.598421829703821, 0.09912139187835123, 0.16796933244611423, 0.17431720927777383, 0.492386937195774, 0.20856681594542137, 0.5503380541036835, 0.20678499827189167, 0.4836529599728858, 0.5552690814072687, 0.10361141669471641, 0.4663743599092841, 0.4041182470295961, 0.16809020105458294, 0.18066750179389235, 0.17333740191829716, 0.17571608954905027, 0.18284422461492755, 0.18172344863299916, 0.17955426910999084, 0.182123299977211, 0.20848969080490187, 0.08810497960612995, 0.06954093262009842, 0.06717086122942906, 0.08232786871402509, 0.08223826338887397, 0.07518024050094319, 0.07572790083486836, 0.07246171844260896, 0.06012395392482617]}, "mutation_prompt": null}
{"id": "d66248c5-8a7c-45dc-9a39-059c04849ce1", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n        self.mutation_rate = 0.2\n    \n    def adaptive_mutation(self, particle, velocity):\n        mutation_vector = np.random.uniform(-self.mutation_rate, self.mutation_rate, self.dim)\n        return particle + velocity + mutation_vector\n    \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.9 - 0.5 * _ / self.budget\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.adaptive_mutation(self.particles[i], self.velocities[i]), -5.0, 5.0)\n        return self.global_best", "name": "EnhancedDynamicMutationPSO", "description": "Enhancing the diversity exploration by introducing a adaptive mutation mechanism based on individual particle behavior.", "configspace": "", "generation": 5, "fitness": 0.1936534697865279, "feedback": "The algorithm EnhancedDynamicMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "39fa3997-4ee6-4409-8a91-2552fa293ec6", "metadata": {"aucs": [0.35494681613610424, 0.3838224823906413, 0.37081675960588356, 0.34484167226042295, 0.34496022562354445, 0.3645617870502431, 0.3591370229815657, 0.3503031874854855, 0.3573846973166178, 9.999999999998899e-05, 0.00024834962543462957, 0.02114530385937563, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09726900655842796, 0.11578504976466597, 0.0744510490268212, 0.09924708446364239, 0.08988509655104304, 0.08303055937132153, 0.07721058164318018, 0.08899993795656869, 0.07028054519920879, 0.08169338896232148, 0.07027347633937842, 0.07711691392166231, 0.08101090845141223, 0.08033173103894209, 0.06901813738336782, 0.0877104782790924, 0.07208117427689553, 0.061891878189361926, 0.9330671420298656, 0.8856131367202457, 0.9178492060417849, 0.8831642055984268, 0.923635733983784, 0.9140962058472109, 0.9149299244899877, 0.8895700272193132, 0.9117956260966016, 0.23109958946936116, 0.2534841936160075, 0.2471639135368945, 0.24148883590458237, 0.22870411712043215, 0.23151308091012934, 0.24965945581426874, 0.2331880694265973, 0.22381170417248308, 0.2350578412754708, 0.24456534546232156, 0.20514423866698672, 0.2746653485930102, 0.20906981227186128, 0.30825803250003314, 0.1749690789305467, 0.26391022136487896, 0.22657064994211973, 0.12928333623404065, 0.1358070413617628, 0.13333301378066242, 0.1367658711075046, 0.12138881037108773, 0.07120962530814834, 0.12469176921160796, 0.12110149186146923, 0.11965608601323252, 0.14873041514977703, 0.15537749242766186, 0.16262050696260466, 0.150938156205367, 0.1112363818345018, 0.13093343047235084, 0.1449201754425561, 0.12858777660048148, 0.14111719379715737, 0.01836763028763344, 9.999999999998899e-05, 0.019436902287988, 0.004044559788734303, 0.012958553764602754, 9.999999999998899e-05, 0.01737150459496606, 0.0009283862437183821, 0.007575365194467665, 0.07653733523155537, 0.09060005639806312, 0.0995318978593367, 0.08096186427184826, 0.026207521886124185, 0.06069196023616519, 0.0988166201788766, 0.054205763045508504, 0.0582980937472084, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07356593885264306, 0.07303815411504655, 0.06455237824269389, 0.044875722718947464, 0.043349101239249066, 0.050857785250140064, 0.07303829448686006, 0.07271252653580063, 0.06442496789024221, 0.35805852448155884, 0.36613679263452636, 0.3731594871237992, 0.3698104120557065, 0.3524786899361262, 0.345436022175985, 0.3689659641008708, 0.34357508614223686, 0.3491364304086738, 0.0684113764353722, 0.0697560151120189, 0.07605466270058314, 0.07917938128925694, 0.08068846095921012, 0.09910329252850147, 0.10736824709629877, 0.11235771766650726, 0.07174171992879763, 0.15205966993403963, 0.23374079239215773, 0.14855275290138836, 0.21975363936547687, 0.1604830048204694, 0.184905769159734, 0.2250011741170318, 0.18642712405677708, 0.2025890226263577, 0.22996123845398475, 0.2592140800288735, 0.22519484386580257, 0.2550002857348188, 0.24335081708222128, 0.26326052839310754, 0.24415905804157645, 0.26452324328141774, 0.15198631044108335, 0.14707336651466307, 0.21815976916874125, 0.20736592251870478, 0.1725373118960215, 0.18730230919938873, 0.21202375829479403, 0.17509187040330687, 0.20243385805340208, 0.17861518453756198, 0.19726557266266043, 0.19008190798159308, 0.19126781762858636, 0.19979159768347066, 0.209827498794798, 0.20026888751352234, 0.1967257715440106, 0.16853715291814164, 0.22512275106198165, 0.16853420902077632, 0.1966208517830078, 0.1924116911759738, 0.17682597856959092, 0.17175956194000064, 0.1758106724120475, 0.21751933827789072, 0.19239462968366716, 0.17442773270516987, 0.12536138371579586, 0.12536343535231687, 0.15241059064348939, 0.4751005135392402, 0.19536332189222538, 0.6341577320723992, 0.12117535636505561, 0.16845347627908636, 0.17301400981810766, 0.5029480193638678, 0.20798493452035582, 0.42647934618882777, 0.50061500877924, 0.20567603651393662, 0.513222687850655, 0.10386081794509605, 0.5343896787609426, 0.4313096608683713, 0.19116787734819407, 0.1824262434166255, 0.17446280730468333, 0.1672907890260492, 0.17224067758831152, 0.18604432071728694, 0.1810338930621107, 0.18141068125085813, 0.21601389833884188, 0.07849354517822249, 0.09064208234250659, 0.07853310738474628, 0.08283821513740208, 0.08848352120530367, 0.11227873224302243, 0.08994868124172062, 0.06319375295700191, 0.0664345290540741]}, "mutation_prompt": null}
{"id": "725a9279-f29d-4d85-b670-1ce7b4145e02", "solution": "import numpy as np\n\nclass DynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.9 - 0.5 * _ / self.budget\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n        return self.global_best", "name": "DynamicMutationPSO", "description": "An innovative algorithm that combines Particle Swarm Optimization (PSO) with a dynamic mutation strategy to efficiently optimize black-box functions in a constrained budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "39fa3997-4ee6-4409-8a91-2552fa293ec6", "metadata": {"aucs": [0.40919415557479766, 0.4310731301586347, 0.4442273450456501, 0.4626111215470895, 0.43970133590029936, 0.41216604187175476, 0.40240586498874875, 0.4315004307602909, 0.4148300770926515, 0.047747667910522096, 0.03382590291839027, 0.06602113729866887, 0.06664667796942247, 0.04119879846013974, 0.02898635256459836, 0.01646009565373463, 0.02095725016509964, 0.0575446507219618, 0.05804648877454677, 0.10800588624290886, 0.09181690374874363, 0.07414530204866876, 0.11505519395601893, 0.10578865617584032, 0.09432746940773817, 0.09404860402165827, 0.15056491012178963, 0.09076482142681219, 0.09094127391878537, 0.09087697514596182, 0.0854740131128714, 0.09510869801008393, 0.07944587470842013, 0.11949482532575417, 0.05615195410656948, 0.10345781186232816, 0.8976967579295899, 0.8825578564276982, 0.9138944991633543, 0.8933683147311051, 0.9146089771080127, 0.8815251740298418, 0.9135691353741913, 0.9114450699449761, 0.9148490669730744, 0.2794406694025676, 0.2764853893489819, 0.28385077730193475, 0.28009950891740243, 0.2838332211447615, 0.2937133795083152, 0.29314282922355395, 0.28444287164555326, 0.299742261387028, 0.32512841612136456, 0.13811941407434647, 0.13735979186295066, 0.19308902596170996, 0.19028406817270815, 0.2642678061617123, 0.2242849818762429, 0.16400855384069668, 0.23419712878042187, 0.1225062215044378, 0.17370719858422856, 0.16943694956081268, 0.16568080726992518, 0.09459730108519648, 0.2064680541342918, 0.18615467418657594, 0.1753983156677721, 0.1594412181445659, 0.12339425138626281, 0.15744345384337866, 0.11422347477797101, 0.17172658002814423, 0.1301270836544851, 0.15217750898020932, 0.12703639481463902, 0.16956189379174502, 0.15763487488342487, 9.999999999998899e-05, 0.04464635465342348, 0.039277700032963936, 0.04186482090322474, 0.0005055338307147217, 0.004091095719565785, 9.999999999998899e-05, 0.0001021784597911024, 0.012433354675693065, 0.09057206748844149, 0.049236724980225355, 0.06352808974214408, 0.08160753274186427, 0.009787634309749271, 0.01327910101330998, 0.12263633955295605, 0.07453851125505373, 0.06761409472111501, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004034582961832123, 0.08528922283503504, 0.0751366799623997, 0.0912972367680821, 0.06824280538544858, 0.10848106456080409, 0.07992399882667656, 0.06223336220147302, 0.09782855784831501, 0.07018987549446942, 0.4113002798497811, 0.4347582150636796, 0.40858082408498053, 0.39572734115656893, 0.3771034009370171, 0.37224813668345647, 0.3898504425327899, 0.40186515765079855, 0.42732353205844587, 0.04412412164585788, 0.07336843738470611, 0.06653115682507449, 0.06632711166221084, 0.056555075958657275, 0.10994701580423594, 0.1095534951045476, 0.08325137805160399, 0.1060216340182053, 0.16524891366508432, 0.2095658317811262, 0.3303629137527728, 0.148058729447905, 0.26036541653405343, 0.1491915830328575, 0.1568840420416755, 0.24305151806471337, 0.24962586045223034, 0.2816838033651057, 0.2568273200188067, 0.14067664755938092, 0.2597515189636649, 0.21215482425430643, 0.27133086597712663, 0.23629424301856994, 0.2918254836637587, 0.15641337968816638, 0.18205436655052676, 0.20765427252726387, 0.14126500105193118, 0.1826338138768424, 0.124743985831825, 0.20893105425901448, 0.1851623651701535, 0.18878874635512366, 0.10594736256352077, 0.2330593994841451, 0.20448514664058826, 0.22391804763679313, 0.1795878830578671, 0.23969175757053263, 0.20146490695665276, 0.18419387905202078, 0.20456294838488098, 0.23944207041567456, 0.18422995507179885, 0.19122337903694753, 0.20738483639950533, 0.1897832828720858, 0.18471497042845764, 0.19637124417394147, 0.17651581908600478, 0.1733548879298651, 0.19088049780354754, 0.12504882146351792, 0.12413682707919815, 0.13299755968377325, 0.17136535741078207, 0.19702081969638385, 0.6477563156374353, 0.09912842686588319, 0.16796737955962016, 0.17391534968401134, 0.5406594315747664, 0.20870274297271363, 0.5111209541147237, 0.207078294742714, 0.5139671523922587, 0.5683857824407816, 0.10363697565985619, 0.36717405010342685, 0.4349270332678925, 0.17979970149436408, 0.18748476923540158, 0.17447936182357804, 0.197684949877453, 0.18212681213120796, 0.17506435144049937, 0.1796559647712609, 0.19499464481991924, 0.20848969080490187, 0.09109675769427772, 0.06704481193962242, 0.07210394580969148, 0.07874780784170365, 0.08301358427868177, 0.07713641172611607, 0.07970943654346829, 0.08463368043006159, 0.07434588175557288]}, "mutation_prompt": null}
{"id": "1570bf0a-acca-49c4-bda7-671f2fa764f1", "solution": "import numpy as np\n\nclass DynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.9 - 0.5 * _ / self.budget\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n        return self.global_best", "name": "DynamicMutationPSO", "description": "An innovative algorithm that combines Particle Swarm Optimization (PSO) with a dynamic mutation strategy to efficiently optimize black-box functions in a constrained budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "39fa3997-4ee6-4409-8a91-2552fa293ec6", "metadata": {"aucs": [0.40919415557479766, 0.4310731301586347, 0.4442273450456501, 0.4626111215470895, 0.43970133590029936, 0.41216604187175476, 0.40240586498874875, 0.4315004307602909, 0.4148300770926515, 0.047747667910522096, 0.03382590291839027, 0.06602113729866887, 0.06664667796942247, 0.04119879846013974, 0.02898635256459836, 0.01646009565373463, 0.02095725016509964, 0.0575446507219618, 0.05804648877454677, 0.10800588624290886, 0.09181690374874363, 0.07414530204866876, 0.11505519395601893, 0.10578865617584032, 0.09432746940773817, 0.09404860402165827, 0.15056491012178963, 0.09076482142681219, 0.09094127391878537, 0.09087697514596182, 0.0854740131128714, 0.09510869801008393, 0.07944587470842013, 0.11949482532575417, 0.05615195410656948, 0.10345781186232816, 0.8976967579295899, 0.8825578564276982, 0.9138944991633543, 0.8933683147311051, 0.9146089771080127, 0.8815251740298418, 0.9135691353741913, 0.9114450699449761, 0.9148490669730744, 0.2794406694025676, 0.2764853893489819, 0.28385077730193475, 0.28009950891740243, 0.2838332211447615, 0.2937133795083152, 0.29314282922355395, 0.28444287164555326, 0.299742261387028, 0.32512841612136456, 0.13811941407434647, 0.13735979186295066, 0.19308902596170996, 0.19028406817270815, 0.2642678061617123, 0.2242849818762429, 0.16400855384069668, 0.23419712878042187, 0.1225062215044378, 0.17370719858422856, 0.16943694956081268, 0.16568080726992518, 0.09459730108519648, 0.2064680541342918, 0.18615467418657594, 0.1753983156677721, 0.1594412181445659, 0.12339425138626281, 0.15744345384337866, 0.11422347477797101, 0.17172658002814423, 0.1301270836544851, 0.15217750898020932, 0.12703639481463902, 0.16956189379174502, 0.15763487488342487, 9.999999999998899e-05, 0.04464635465342348, 0.039277700032963936, 0.04186482090322474, 0.0005055338307147217, 0.004091095719565785, 9.999999999998899e-05, 0.0001021784597911024, 0.012433354675693065, 0.09057206748844149, 0.049236724980225355, 0.06352808974214408, 0.08160753274186427, 0.009787634309749271, 0.01327910101330998, 0.12263633955295605, 0.07453851125505373, 0.06761409472111501, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004034582961832123, 0.08528922283503504, 0.0751366799623997, 0.0912972367680821, 0.06824280538544858, 0.10848106456080409, 0.07992399882667656, 0.06223336220147302, 0.09782855784831501, 0.07018987549446942, 0.4113002798497811, 0.4347582150636796, 0.40858082408498053, 0.39572734115656893, 0.3771034009370171, 0.37224813668345647, 0.3898504425327899, 0.40186515765079855, 0.42732353205844587, 0.04412412164585788, 0.07336843738470611, 0.06653115682507449, 0.06632711166221084, 0.056555075958657275, 0.10994701580423594, 0.1095534951045476, 0.08325137805160399, 0.1060216340182053, 0.16524891366508432, 0.2095658317811262, 0.3303629137527728, 0.148058729447905, 0.26036541653405343, 0.1491915830328575, 0.1568840420416755, 0.24305151806471337, 0.24962586045223034, 0.2816838033651057, 0.2568273200188067, 0.14067664755938092, 0.2597515189636649, 0.21215482425430643, 0.27133086597712663, 0.23629424301856994, 0.2918254836637587, 0.15641337968816638, 0.18205436655052676, 0.20765427252726387, 0.14126500105193118, 0.1826338138768424, 0.124743985831825, 0.20893105425901448, 0.1851623651701535, 0.18878874635512366, 0.10594736256352077, 0.2330593994841451, 0.20448514664058826, 0.22391804763679313, 0.1795878830578671, 0.23969175757053263, 0.20146490695665276, 0.18419387905202078, 0.20456294838488098, 0.23944207041567456, 0.18422995507179885, 0.19122337903694753, 0.20738483639950533, 0.1897832828720858, 0.18471497042845764, 0.19637124417394147, 0.17651581908600478, 0.1733548879298651, 0.19088049780354754, 0.12504882146351792, 0.12413682707919815, 0.13299755968377325, 0.17136535741078207, 0.19702081969638385, 0.6477563156374353, 0.09912842686588319, 0.16796737955962016, 0.17391534968401134, 0.5406594315747664, 0.20870274297271363, 0.5111209541147237, 0.207078294742714, 0.5139671523922587, 0.5683857824407816, 0.10363697565985619, 0.36717405010342685, 0.4349270332678925, 0.17979970149436408, 0.18748476923540158, 0.17447936182357804, 0.197684949877453, 0.18212681213120796, 0.17506435144049937, 0.1796559647712609, 0.19499464481991924, 0.20848969080490187, 0.09109675769427772, 0.06704481193962242, 0.07210394580969148, 0.07874780784170365, 0.08301358427868177, 0.07713641172611607, 0.07970943654346829, 0.08463368043006159, 0.07434588175557288]}, "mutation_prompt": null}
{"id": "e1beb2e2-6452-453e-8686-633af59e6068", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.9 - 0.5 * _ / self.budget\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                levy_flight = 0.01 * np.random.standard_cauchy(self.dim)\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component + levy_flight\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n        return self.global_best", "name": "EnhancedDynamicMutationPSO", "description": "Introducing Levy flights to enhance exploration capability in DynamicMutationPSO.", "configspace": "", "generation": 8, "fitness": 0.19612332825857973, "feedback": "The algorithm EnhancedDynamicMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "39fa3997-4ee6-4409-8a91-2552fa293ec6", "metadata": {"aucs": [0.378607709692907, 0.3963268014106054, 0.38862095442930145, 0.3704454585724576, 0.3597443200127579, 0.3860029817267959, 0.3660688484694531, 0.3886343064529477, 0.3658759638052508, 0.0064273546808688575, 0.022843396862223697, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06359179178587804, 0.09342222318598847, 0.06996776638283664, 0.10575306886548896, 0.1043803350699527, 0.07584833772035071, 0.07885920202014463, 0.10073955985057603, 0.09112242861791187, 0.06562373470157468, 0.10677997504803993, 0.06957131239985848, 0.0947100877503646, 0.07346790531316405, 0.0836410450830426, 0.08645677922226536, 0.07510170287576112, 0.08216100885249233, 0.9171153996145687, 0.9037133378746255, 0.8942568167820663, 0.9014835756607621, 0.9143114740016018, 0.8868978238554802, 0.9030800046293844, 0.8882095859403734, 0.9172172820972474, 0.2518218787868778, 0.23095604808814885, 0.23466344495637526, 0.25057829598305237, 0.2345285273355614, 0.27396062519249653, 0.23788728290103445, 0.25799925661007805, 0.2606458574002163, 0.3089113863435493, 0.15678965548363633, 0.21874959858707033, 0.2292508641132215, 0.31673306194587736, 0.3158313561081626, 0.17364022399283663, 0.2901286566344071, 0.25148405635889215, 0.1260685433628872, 0.12347425728478179, 0.12511855497133328, 0.137401752855551, 0.1383582147043284, 0.10189773241377187, 0.1451035171805488, 0.15236855856925957, 0.14717777716134695, 0.1419529414093369, 0.1601566232422631, 0.121946262350208, 0.1330217501604335, 0.16245044117462626, 0.1444054833096141, 0.1543978377670151, 0.12309786034645509, 0.11995721853449426, 0.040427736894433464, 0.032220012513031526, 0.0012587256249196876, 0.0008337859864506747, 9.999999999998899e-05, 0.009405580971610816, 0.05496774291252837, 9.999999999998899e-05, 0.042490635518939834, 0.11480148460182549, 0.05177309006988384, 0.04957064603119821, 0.06592323380505039, 0.03681210485498321, 0.005947203242432808, 0.07754189198151884, 0.06895548057932555, 0.05361932972287664, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06872273205296697, 0.05920551856126843, 0.06711634988187776, 0.06855586448314621, 0.02877342490593604, 0.06831549445373875, 0.08231373036346434, 0.06100173580935009, 0.061563491669661574, 0.3619180358577868, 0.3902634843041378, 0.3678666271042984, 0.351263429842684, 0.3506139531068796, 0.3659953646349635, 0.3491741833045261, 0.3506046563393641, 0.3401102623203074, 0.07767382646043375, 0.0824395962850556, 0.06340181273399792, 0.08625961547740613, 0.06423062406035551, 0.10109159503311582, 0.08782499264100319, 0.1134363802159698, 0.07703675767822338, 0.2047707759594608, 0.15534591662626407, 0.1834678912600779, 0.21082910610354877, 0.2305776153190605, 0.2507993195915378, 0.21728881625222662, 0.22233728241799733, 0.2159134350242019, 0.26470557945371276, 0.25773746211622606, 0.19524768530882575, 0.19069263748348497, 0.2557144806100755, 0.27238183953562534, 0.16181699571568586, 0.27097625469746023, 0.14645870614865708, 0.168598941410115, 0.21626818984551388, 0.18850818949380654, 0.17213527894822112, 0.19809943768684957, 0.20795824960858855, 0.17986106236285393, 0.19434850619912358, 0.1168577088218341, 0.20301234585755268, 0.2312035000717264, 0.196641325927143, 0.22095169294778694, 0.18383142216860626, 0.18088899993156682, 0.21569573181770996, 0.21720355410373282, 0.21307448249794603, 0.1955949172363628, 0.18499860778443944, 0.1824245762286969, 0.1730526984997217, 0.18421837360799387, 0.18763245614579604, 0.18430123910044516, 0.1740856450952677, 0.1741290880018922, 0.5753912235348735, 0.12526309759941, 0.18522133843006183, 0.1701700410870569, 0.19820155643196247, 0.16946910451781927, 0.12087577090857049, 0.1686391123118972, 0.17487425984881155, 0.49730387495361883, 0.20591660223769126, 0.49959257106642985, 0.4541718393294839, 0.4301091296133309, 0.6215014882623848, 0.38189953457390824, 0.3768903953696997, 0.34942500636491514, 0.1720649882049795, 0.1760642882405693, 0.17839800334104317, 0.17068106571204045, 0.1975636737329709, 0.16336903302341632, 0.17287730916260913, 0.1831079288296924, 0.20850021036798638, 0.0907169316080555, 0.08895810206741206, 0.07010685801005079, 0.06916572554512113, 0.08473545194575038, 0.08104548567344194, 0.06453399181111164, 0.07755177796331714, 0.0705248213162607]}, "mutation_prompt": null}
{"id": "38d30874-fc75-46a3-a2e1-14ea217f1f75", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20  # Initial population size\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.9 - 0.5 * _ / self.budget\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n            # Dynamically adjust population size and mutation rate based on individual performance\n            if np.random.rand() < 0.4:\n                self.population_size = max(5, min(40, int(1.2 * np.sum([func(p) for p in self.particles]))))\n                self.c1 = max(0.5, min(5.0, np.mean([func(p) for p in self.particles])))\n                self.c2 = max(0.5, min(5.0, np.mean([func(p) for p in self.particles])))\n        return self.global_best", "name": "ImprovedDynamicMutationPSO", "description": "Improving convergence by dynamically adjusting population size and mutation rate based on individual performance.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 20 is out of bounds for axis 0 with size 20').", "error": "IndexError('index 20 is out of bounds for axis 0 with size 20')", "parent_id": "39fa3997-4ee6-4409-8a91-2552fa293ec6", "metadata": {}, "mutation_prompt": null}
{"id": "0d0c9781-f1bc-4cf1-871f-2067b189a9b5", "solution": "import numpy as np\n\nclass HybridMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for _ in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.9 - 0.5 * _ / self.budget\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                \n                # Hybrid Mutation\n                cauchy_mutation = np.random.standard_cauchy(self.dim)\n                gaussian_mutation = np.random.normal(0, 1, self.dim)\n                mutation_vector = 0.5 * cauchy_mutation + 0.5 * gaussian_mutation\n                \n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component + mutation_vector\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n        return self.global_best", "name": "HybridMutationPSO", "description": "Enhancing DynamicMutationPSO by incorporating a hybrid mutation strategy involving Cauchy and Gaussian distributions for better exploration-exploitation balance.", "configspace": "", "generation": 10, "fitness": 0.1691494321225498, "feedback": "The algorithm HybridMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.16.", "error": "", "parent_id": "39fa3997-4ee6-4409-8a91-2552fa293ec6", "metadata": {"aucs": [0.3283760774265251, 0.34267364032447634, 0.2939115875736278, 0.3028475692301401, 0.29615395730560157, 0.2857404368555383, 0.33674169321731906, 0.30220330860139866, 0.28859150948867696, 9.999999999998899e-05, 0.010398339731223283, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08625198943024537, 0.09912469932723833, 0.07636470289687591, 0.07549580729357308, 0.09111076011655206, 0.08903136316195581, 0.07977077801242882, 0.0789105532283444, 0.07834794190541039, 0.07941126413615873, 0.08329003617300934, 0.07867971095534032, 0.08268139864137392, 0.07205784198001053, 0.07499801268733242, 0.0729058412922855, 0.07341307462061741, 0.07591224798386242, 0.8528448103422092, 0.8041426642200525, 0.8304464932147051, 0.7308666333797694, 0.8001061178770057, 0.7495200124299003, 0.8548502632079048, 0.8076230420100959, 0.8277721430639337, 0.17414637691330404, 0.17484571231729729, 0.18506707574548886, 0.22499466983548344, 0.18652670533285987, 0.19211447321213715, 0.22780224111667957, 0.2044962631206284, 0.1985742486023513, 0.27930038849839034, 0.22075304990091138, 0.22444885882741605, 0.2306854071774065, 0.19933089816749094, 0.20289978009357823, 0.21610791122973783, 0.2382317556160395, 0.20649164241422058, 0.06658789103658402, 0.09150555474941502, 0.09367260844773373, 0.11867257630347372, 0.10981602944306745, 0.10294147388164676, 0.11604702250280297, 0.10175780500561848, 0.11566389231129692, 0.11163989194302337, 0.10187768191244428, 0.09480143947619091, 0.11965639092946478, 0.10570883822339305, 0.12073552785423147, 0.1330169699351389, 0.05108163721438108, 0.07274878728969325, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003951294815640161, 9.999999999998899e-05, 0.0006546254409910413, 9.999999999998899e-05, 9.999999999998899e-05, 0.07793169663939226, 0.054520424332964335, 0.07790261532998177, 0.06145350176302711, 0.007884231626681726, 0.05042099338127792, 0.08660462731911611, 0.09556542428198578, 0.04475249618693666, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044323897447889116, 0.05229162686157618, 0.02914771804674965, 0.06292757720696152, 0.03618403107721535, 0.033763893193589634, 0.03737794770187808, 0.03934390418469014, 0.03989270975586845, 0.296160934660207, 0.29502712128608244, 0.29707735921965717, 0.29762052137645234, 0.30898637345234314, 0.29924920867463056, 0.29201853142644585, 0.3045152347834984, 0.29547999325161145, 0.07581377490855268, 0.09072253109094741, 0.07997271350166635, 0.09275978249512407, 0.10534960759079115, 0.08163952236865879, 0.11212817973252864, 0.07683950438466292, 0.11824995004932448, 0.11918753618440148, 0.14926358659917183, 0.1772189413731805, 0.1417745181080018, 0.17552757426933607, 0.14356439624233697, 0.15264013569312662, 0.16619981647597837, 0.14789432284331883, 0.20680628154320513, 0.24944690283156068, 0.2126967913116743, 0.23833970006777605, 0.2194943356443413, 0.2186283750526753, 0.18608525640380014, 0.24512949121219907, 0.2092456989783229, 0.16280580950809875, 0.1664484465366438, 0.13236714819636086, 0.16348545336150766, 0.17033984834955118, 0.1485164129845865, 0.13725037882709112, 0.17349352266254192, 0.16154425800579897, 0.2074151591240989, 0.19558452700662288, 0.18767896970827813, 0.20276052250219812, 0.2185221152290423, 0.20715720257637782, 0.1879967373199385, 0.19384458647917968, 0.21033509316632082, 0.19393399111829668, 0.1658963031073939, 0.16953636529650762, 0.17872835667589393, 0.16287923303239782, 0.16891790308510257, 0.1683243111006384, 0.16752009596611894, 0.16221121024459484, 0.3918236831180326, 0.1715255274460724, 0.11665155361599411, 0.42924989377631095, 0.18772553447808982, 0.12752181252629502, 0.11905070835744902, 0.1675277270627119, 0.170828596395734, 0.46557310916476413, 0.204232611867188, 0.3555764682532948, 0.4528720075656759, 0.16308620693278175, 0.194994911701316, 0.10290654257520016, 0.36012426148060217, 0.32119977713983194, 0.17729614916516345, 0.19434095978275923, 0.172944426244814, 0.17617918145789258, 0.18821820713635107, 0.1775342848711351, 0.18152675403943197, 0.176438332078368, 0.1702507461692654, 0.060131805189219456, 0.1262589231480511, 0.07348515013953216, 0.07780005845108151, 0.08701375487368934, 0.07248316166589885, 0.07247507199602843, 0.07881952929788016, 0.07874840652992243]}, "mutation_prompt": null}
{"id": "263cc382-00a3-4b21-ab72-9bc1294420af", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(1, self.budget + 1):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.5 + 0.4 * np.cos(0.5 * np.pi * t / self.budget)\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n        return self.global_best", "name": "EnhancedDynamicMutationPSO", "description": "Enhancing DynamicMutationPSO with a novel adaptive inertia weight mechanism for improved convergence and exploration.", "configspace": "", "generation": 11, "fitness": 0.20184176090322908, "feedback": "The algorithm EnhancedDynamicMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "39fa3997-4ee6-4409-8a91-2552fa293ec6", "metadata": {"aucs": [0.41040213867378994, 0.39733575859876324, 0.4315570812813644, 0.40516144200794957, 0.42979271858596746, 0.4328521231089756, 0.4110651670542016, 0.42332751599249707, 0.4569884631196619, 0.03286503378719152, 0.030978880022046518, 0.11141848995205295, 0.007495433628970982, 0.00023117814484663324, 0.04984870159396271, 0.03247266136951732, 0.02317706102684569, 0.023769391604939627, 0.0554078658295013, 0.1271199341560375, 0.08502658287986486, 0.07634587900160095, 0.12878871514494472, 0.11550177782349602, 0.08631671296839905, 0.104194131096501, 0.13274491040302405, 0.08816058434870666, 0.09510119791132587, 0.08725966833429433, 0.08205912775370383, 0.0909035698663303, 0.07958523316660482, 0.11572088734739772, 0.06493074552103806, 0.10030265455015452, 0.8977091678956886, 0.8825732029573797, 0.9138683626109105, 0.8932295065560416, 0.9146490667764966, 0.8815966548891155, 0.9135756163242474, 0.9116051308000198, 0.915559463856588, 0.2994769922626864, 0.23921208750026668, 0.26629339702145416, 0.2612065487442017, 0.2795932887831627, 0.27615017817690035, 0.24684881624823618, 0.2693346584752029, 0.2776709450532332, 0.2925805045962153, 0.13811941407434647, 0.13735979186295066, 0.18632243045712993, 0.19023855798754197, 0.31460696577677094, 0.22047981810431516, 0.16400400449933983, 0.23419712878042187, 0.1205198113631537, 0.156918940183707, 0.1637566281781777, 0.1705588385987803, 0.09375434610502231, 0.2504612944081823, 0.19487569795467075, 0.14792729716884456, 0.14689771960800646, 0.12476336135767596, 0.16124962559673928, 0.11754629018546603, 0.17116711554651642, 0.12733414250203912, 0.1500230664205101, 0.1269027071795883, 0.17250783428955252, 0.16965272041470525, 9.999999999998899e-05, 0.059869283272443674, 0.043400827848346646, 0.04319757967393467, 0.06665575524510492, 0.03249421364860139, 0.0011330704585456042, 0.003829035953304305, 9.999999999998899e-05, 0.09900116749943977, 0.0725140083779987, 0.09687913732242692, 0.09394825260682305, 0.00826533068694002, 0.02046609702030433, 0.09050128851510075, 0.1281473439462194, 0.10930887968519876, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08002523770010284, 0.06964877786801993, 0.07898491538935049, 0.04937019627156147, 0.08591033498130529, 0.08476714625168247, 0.062336591320805934, 0.10423201453917663, 0.07330171529875229, 0.43275672110301844, 0.379391735482404, 0.42038330515064815, 0.4033307439968491, 0.4142082663921447, 0.395640290631999, 0.4018017620537965, 0.3906638180400178, 0.3784622217151308, 0.044058550835474275, 0.07278005449558556, 0.0696501831119527, 0.05548857268097651, 0.05309433069817171, 0.11057721359612083, 0.09349684287961813, 0.08581399639041043, 0.07463598732681054, 0.15777008074470633, 0.22899764274064172, 0.2493353606696882, 0.13700134017904364, 0.3068512288495252, 0.1653202508430791, 0.23764898952158897, 0.21857347586676756, 0.21186874627718866, 0.2824377866268173, 0.2842938170970474, 0.1416550972445506, 0.2568350294730867, 0.20841439614275747, 0.2553831455946466, 0.23618880888245686, 0.2872984019512519, 0.15684506502021378, 0.21015876047143278, 0.2265106513398788, 0.13161473617098451, 0.15874684540063877, 0.13100925090759008, 0.20996117820727744, 0.18018367266715618, 0.19647051312844588, 0.10620199909347905, 0.20083192833754382, 0.20835331709959626, 0.230716015160759, 0.2022913044394924, 0.2107969896869032, 0.1934216927168807, 0.17624871475546333, 0.1972503485079371, 0.2217610693208788, 0.18451695322928907, 0.18817439755614573, 0.21004183542705734, 0.18013745749781396, 0.1855608144295866, 0.19569468701688297, 0.17072714867889227, 0.17304980897076916, 0.18806583209191852, 0.1253291398472235, 0.12407833703781757, 0.1327159927951267, 0.17138538557590577, 0.19698422220443312, 0.607959937604372, 0.09912110136682895, 0.1679604662957498, 0.174324998091276, 0.49365119815024305, 0.20854751367131408, 0.5517212254427096, 0.20678582677150292, 0.4896925992810368, 0.5422346018633653, 0.10361256829189913, 0.4644587830289476, 0.3867639937747872, 0.1659156058685829, 0.1786871634503141, 0.17460621074576788, 0.17766205103232402, 0.1911052938690786, 0.18165697700940386, 0.17954225712346228, 0.1797466304084443, 0.20848969080490187, 0.08830695418611323, 0.07024035709345389, 0.06725768318248793, 0.08242978789196809, 0.08214224090355948, 0.07561324870437236, 0.07675292183753468, 0.07239561343842293, 0.06011383666571257]}, "mutation_prompt": null}
{"id": "6c547bfe-4d4b-4a74-a02d-0b4fbb211d3a", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                \n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "EnhancedDynamicMutationPSO", "description": "Enhancing DynamicMutationPSO by incorporating adaptive inertia weight and a diversity maintenance mechanism to improve convergence speed and exploration ability.", "configspace": "", "generation": 12, "fitness": 0.21025691025516233, "feedback": "The algorithm EnhancedDynamicMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "39fa3997-4ee6-4409-8a91-2552fa293ec6", "metadata": {"aucs": [0.4405907372471012, 0.4383170105407901, 0.47382501113322384, 0.5342938286553625, 0.44260436652887925, 0.4474372048395465, 0.4141750581800404, 0.49613543951848227, 0.46876571766566955, 0.021292956273607833, 0.05661398729391709, 0.05886186413411543, 9.999999999998899e-05, 0.00822887337198841, 0.044454598486514785, 0.03627816976267095, 0.07596807626840851, 0.06692601167688239, 0.06052562646261117, 0.13853411546485528, 0.10204118198229284, 0.1164332247205877, 0.14922217668781945, 0.10827601866408154, 0.08736811580466841, 0.13427746693819154, 0.10357949201953653, 0.08680383680106041, 0.10553302112028651, 0.06531768544280314, 0.09526623515812005, 0.1054727623095012, 0.08869463876188277, 0.10405904740048866, 0.10783880727195305, 0.11290751223498041, 0.8947959073708521, 0.8941741470562196, 0.9025126753588415, 0.8898889356412045, 0.9232984442046038, 0.9045469439474693, 0.9201013550524708, 0.8977622347210468, 0.8882084874547086, 0.28596049579439253, 0.3056851380715784, 0.33243448253077035, 0.3346249213709208, 0.3570126760005362, 0.31259054127442976, 0.30879088006262656, 0.3028161873514509, 0.30921733281824504, 0.22546914319999622, 0.11785037725511083, 0.13803994935656827, 0.45485525842257546, 0.5846382021433699, 0.3887753225350441, 0.1260964428781841, 0.1757401167376751, 0.23558080656054026, 0.15623731481568848, 0.15782728809220625, 0.16213128701884727, 0.150663033723059, 0.17971177241083747, 0.10712176641488691, 0.17961241730518485, 0.16883159862195174, 0.17033447317340122, 0.1699001634667544, 0.14318201280947052, 0.10938962133317887, 0.16905526217393307, 0.11960735260417421, 0.15991657054880903, 0.19741332292415503, 0.09620330491446605, 0.15880567038118365, 9.999999999998899e-05, 0.03726833581264477, 0.031217923199649333, 0.0446695365882237, 0.00738971944056066, 9.999999999998899e-05, 0.0047653432810200735, 9.999999999998899e-05, 0.04134065636692119, 0.1354482847056908, 0.024987736650489256, 0.048387868374044074, 0.06717345741886072, 0.008113026111441601, 0.008347783642712603, 0.08913079142357638, 0.07441053281742083, 0.03581283954841097, 9.999999999998899e-05, 0.031849987952743186, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028786005972353257, 0.01746061842496016, 9.999999999998899e-05, 0.0026654507660519577, 9.999999999998899e-05, 0.10955413382449497, 0.08366339983356541, 0.116947709705574, 0.08094756609851006, 0.09454002382886995, 0.12334459552253452, 0.069104074122601, 0.11865758989183939, 0.07564833630789836, 0.39768458600266254, 0.399974584599716, 0.39925481624768644, 0.4320082449644258, 0.39924291809874624, 0.38824310892841596, 0.40758982654257125, 0.4146150681456421, 0.39174357489140066, 0.08920564942910092, 0.0740187148697865, 0.05973757634707966, 0.070295326425597, 0.07159768850843973, 0.1020310320951936, 0.14239748448669143, 0.09733241369118917, 0.0732622744820246, 0.17102851514940143, 0.18887109532640478, 0.2887466964616032, 0.2290706112914238, 0.2596160942660445, 0.20632481806888137, 0.2362171112582515, 0.2877495145030635, 0.26575675549302247, 0.2652395593614252, 0.29505650714909193, 0.17559157761626343, 0.3018375076311369, 0.24708854326661367, 0.2947152023196419, 0.20273147849835416, 0.29596113670365976, 0.14846469925564976, 0.14623360698567178, 0.22598098686752055, 0.1429039775054216, 0.1759400104547929, 0.18723391573012527, 0.18633367558598024, 0.20375324983016385, 0.22572144484395618, 0.16064966172942385, 0.18263691248715253, 0.19133569797177485, 0.2642398836879273, 0.19609276739456039, 0.21209761453757314, 0.2251796954939027, 0.1600116316011876, 0.20511263310639627, 0.2079359893133148, 0.19686393799829405, 0.17250718089573458, 0.18936485714316298, 0.1816934012027449, 0.19507007246870467, 0.1902869073200565, 0.18554075158668726, 0.19146861977222152, 0.19078089395140296, 0.1259016072221839, 0.185250609925809, 0.18531948242136742, 0.1719373053043931, 0.1982833508219578, 0.14699885939673696, 0.15176495197401185, 0.1684472024711775, 0.16628470379366644, 0.6386805548527816, 0.20843487311193976, 0.5153398175040909, 0.2072572531638187, 0.20614406534662044, 0.6327383215784244, 0.10402406744815507, 0.4575884115938941, 0.5719202562890133, 0.18633973182137642, 0.17386025425583085, 0.1806010723396264, 0.1830257086241096, 0.17914628889076845, 0.16751710340052706, 0.17662067305628426, 0.17827860288246689, 0.17177761465597885, 0.05175686604515506, 0.07332509242885465, 0.0595311289496, 0.07448804366655803, 0.09033020719072848, 0.0860770465342382, 0.07289651477870629, 0.06857949854483036, 0.0847957460021389]}, "mutation_prompt": null}
{"id": "8b22a0da-7f79-4183-a83e-348e5c2ed634", "solution": "import numpy as np\n\nclass DynamicPopulationSizePSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.population_size = 20\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            # Dynamic population size adaptation based on fitness diversity\n            self.population_size = int(5 + 15 * np.exp(-0.5*t/self.budget))\n            self.particles = np.vstack([self.particles, np.random.uniform(-5.0, 5.0, (self.population_size-self.particles.shape[0], self.dim))])\n            self.velocities = np.vstack([self.velocities, np.zeros((self.population_size-self.velocities.shape[0], self.dim))])\n\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                \n            # Diversity Maintenance\n            centroid = np.mean(self.particles[:self.population_size], axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "DynamicPopulationSizePSO", "description": "Introducing a dynamic population size adaptation mechanism based on fitness diversity to enhance exploration and convergence speed.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('negative dimensions are not allowed').", "error": "ValueError('negative dimensions are not allowed')", "parent_id": "6c547bfe-4d4b-4a74-a02d-0b4fbb211d3a", "metadata": {}, "mutation_prompt": null}
{"id": "b290b421-8a1e-4c9f-8e65-e97c34bd5f4e", "solution": "import numpy as np\n\nclass ImprovedDynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                \n            # Novel Mutation Strategy\n            for i in range(self.population_size):\n                mutation_rate = 0.1 + 0.2 * np.exp(-0.5*t/self.budget)\n                mutation_vector = np.random.uniform(-1.0, 1.0, self.dim)\n                self.particles[i] = np.clip(self.particles[i] + mutation_rate * mutation_vector, -5.0, 5.0)\n                \n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "ImprovedDynamicMutationPSO", "description": "Improving EnhancedDynamicMutationPSO by introducing a novel mutation strategy to enhance exploration capability and balance local and global search.", "configspace": "", "generation": 14, "fitness": 0.16355033148990006, "feedback": "The algorithm ImprovedDynamicMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.11.", "error": "", "parent_id": "6c547bfe-4d4b-4a74-a02d-0b4fbb211d3a", "metadata": {"aucs": [0.3517451898683521, 0.3509438389613778, 0.3504997119079051, 0.3537516180979564, 0.34691258342872155, 0.34311797820014345, 0.34291507377639174, 0.3469413469589464, 0.3600814921862344, 0.008324234146331988, 0.0014271282520461614, 9.999999999998899e-05, 9.999999999998899e-05, 0.005745643413356483, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09979694762933489, 0.0837699853720425, 0.05645578379536342, 0.07524159104149364, 0.06714665089638439, 0.09583157956328814, 0.07538465208783929, 0.0802708183828369, 0.07305448109863899, 0.07214287531676256, 0.08392950698316615, 0.0557114601450327, 0.07352478527615458, 0.06372635305173391, 0.06822527153292302, 0.08742102332475044, 0.08271776099449868, 0.043716371856657, 0.3350826329841432, 0.31302899034431686, 0.32501864905045563, 0.32122260809689007, 0.3270038172046792, 0.3180282918667554, 0.3244583626066707, 0.3262955679297066, 0.32212229197400255, 0.24656263137984868, 0.25701267981272635, 0.23168299548869964, 0.23846635189633947, 0.2410204121138947, 0.2448930330983602, 0.22826959177768336, 0.22862236216819987, 0.23587877319226536, 0.22259370966872716, 0.20231069152168635, 0.16875953423730972, 0.23206815404364023, 0.2546435682187097, 0.2845919865028613, 0.2283142870403564, 0.19843146901424857, 0.2829347469585689, 0.12806297578029402, 0.1644671322935075, 0.1349483102382899, 0.13855501478201804, 0.14926538564955194, 0.03305199147088844, 0.15282355482475574, 0.1189557264818355, 0.13862771927339468, 0.12851079212407168, 0.1176760155662041, 0.15144206357514556, 0.13208117418692977, 0.12860267691229, 0.1371104693694506, 0.15347772210073418, 0.07987992420716383, 0.12589796988439483, 9.999999999998899e-05, 9.999999999998899e-05, 0.010536614801228694, 0.004093816509242232, 9.999999999998899e-05, 0.008374070369796982, 0.01512032542745112, 9.999999999998899e-05, 0.01731727790044446, 0.046376432728116423, 0.1151046389114706, 0.08844437981414066, 0.07029480337965943, 0.0166358650970978, 0.04311863131968585, 0.09117220763646783, 0.13489404147658046, 0.09249401483813968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07144311896662969, 0.04892082405959042, 0.07065963253884455, 0.06757594701872971, 0.06608639587149501, 0.04228366870523337, 0.06857819127093867, 0.06466525145715218, 0.08106286849359878, 0.340493483015202, 0.3526407818595212, 0.3491595774218176, 0.35064843598156625, 0.34723872559028, 0.3481428426067882, 0.35265719265545936, 0.3471645169511478, 0.3580552593101687, 0.07043879614370108, 0.10375121434930001, 0.10440091538779561, 0.10365021194627955, 0.07802403492991694, 0.08656533112341736, 0.0964141293905828, 0.09989870918776722, 0.07493693794290035, 0.18333058477306363, 0.1821455430721346, 0.1968029810669749, 0.2352908762707534, 0.22089116870057335, 0.15328219751821448, 0.20789157968494, 0.1693987446015206, 0.19756310316853232, 0.2530673244354992, 0.2576561890888376, 0.22507646843578077, 0.2525914432668884, 0.21081802596743648, 0.26496025829915726, 0.24184512846674677, 0.26001516535758706, 0.1607772895026086, 0.19286530431378113, 0.18988505411691114, 0.14110243158375013, 0.19812410414334258, 0.1880859792047731, 0.16533343118501076, 0.1717733695848288, 0.17754251059270332, 0.13599903499599209, 0.2169426157426536, 0.2577518480633898, 0.23880578023672994, 0.2452614589366201, 0.23435297581637426, 0.21545164275631568, 0.19221724396185458, 0.19959009356931967, 0.22113838914049533, 0.18309272836913348, 0.1767897356076783, 0.17231427724033888, 0.18273551647717057, 0.17159211158613308, 0.17169135255117196, 0.17145327605517324, 0.18702702364784662, 0.18466629404868595, 0.12360454224221573, 0.12580948125189206, 0.1833671890625166, 0.49973241581303385, 0.19705282692598436, 0.44735896967179156, 0.09921614640392651, 0.16905830064648786, 0.17320934391123555, 0.4555765593102967, 0.20722936566597105, 0.4543284459581608, 0.20428228262096293, 0.1491870849654875, 0.20578245067301082, 0.10358254315979598, 0.46318709480165066, 0.3917951664921636, 0.17133878843902317, 0.16865557824248278, 0.169533048000453, 0.1750184768958929, 0.1843447176071099, 0.1796981648439423, 0.17841019311022188, 0.1830076959939495, 0.1927467040749561, 0.07903061815917467, 0.10209078210289624, 0.07492853712914915, 0.08230334786816218, 0.0740461319628759, 0.10898641344439275, 0.0810965146131386, 0.07737426625567623, 0.0792490974482245]}, "mutation_prompt": null}
{"id": "b68f0512-a253-4672-a2a7-43561d715d9a", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                \n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "EnhancedDynamicMutationPSO", "description": "Enhancing DynamicMutationPSO by incorporating adaptive inertia weight and a diversity maintenance mechanism to improve convergence speed and exploration ability.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c547bfe-4d4b-4a74-a02d-0b4fbb211d3a", "metadata": {"aucs": [0.4405907372471012, 0.4383170105407901, 0.47382501113322384, 0.5342938286553625, 0.44260436652887925, 0.4474372048395465, 0.4141750581800404, 0.49613543951848227, 0.46876571766566955, 0.021292956273607833, 0.05661398729391709, 0.05886186413411543, 9.999999999998899e-05, 0.00822887337198841, 0.044454598486514785, 0.03627816976267095, 0.07596807626840851, 0.06692601167688239, 0.06052562646261117, 0.13853411546485528, 0.10204118198229284, 0.1164332247205877, 0.14922217668781945, 0.10827601866408154, 0.08736811580466841, 0.13427746693819154, 0.10357949201953653, 0.08680383680106041, 0.10553302112028651, 0.06531768544280314, 0.09526623515812005, 0.1054727623095012, 0.08869463876188277, 0.10405904740048866, 0.10783880727195305, 0.11290751223498041, 0.8947959073708521, 0.8941741470562196, 0.9025126753588415, 0.8898889356412045, 0.9232984442046038, 0.9045469439474693, 0.9201013550524708, 0.8977622347210468, 0.8882084874547086, 0.28596049579439253, 0.3056851380715784, 0.33243448253077035, 0.3346249213709208, 0.3570126760005362, 0.31259054127442976, 0.30879088006262656, 0.3028161873514509, 0.30921733281824504, 0.22546914319999622, 0.11785037725511083, 0.13803994935656827, 0.45485525842257546, 0.5846382021433699, 0.3887753225350441, 0.1260964428781841, 0.1757401167376751, 0.23558080656054026, 0.15623731481568848, 0.15782728809220625, 0.16213128701884727, 0.150663033723059, 0.17971177241083747, 0.10712176641488691, 0.17961241730518485, 0.16883159862195174, 0.17033447317340122, 0.1699001634667544, 0.14318201280947052, 0.10938962133317887, 0.16905526217393307, 0.11960735260417421, 0.15991657054880903, 0.19741332292415503, 0.09620330491446605, 0.15880567038118365, 9.999999999998899e-05, 0.03726833581264477, 0.031217923199649333, 0.0446695365882237, 0.00738971944056066, 9.999999999998899e-05, 0.0047653432810200735, 9.999999999998899e-05, 0.04134065636692119, 0.1354482847056908, 0.024987736650489256, 0.048387868374044074, 0.06717345741886072, 0.008113026111441601, 0.008347783642712603, 0.08913079142357638, 0.07441053281742083, 0.03581283954841097, 9.999999999998899e-05, 0.031849987952743186, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028786005972353257, 0.01746061842496016, 9.999999999998899e-05, 0.0026654507660519577, 9.999999999998899e-05, 0.10955413382449497, 0.08366339983356541, 0.116947709705574, 0.08094756609851006, 0.09454002382886995, 0.12334459552253452, 0.069104074122601, 0.11865758989183939, 0.07564833630789836, 0.39768458600266254, 0.399974584599716, 0.39925481624768644, 0.4320082449644258, 0.39924291809874624, 0.38824310892841596, 0.40758982654257125, 0.4146150681456421, 0.39174357489140066, 0.08920564942910092, 0.0740187148697865, 0.05973757634707966, 0.070295326425597, 0.07159768850843973, 0.1020310320951936, 0.14239748448669143, 0.09733241369118917, 0.0732622744820246, 0.17102851514940143, 0.18887109532640478, 0.2887466964616032, 0.2290706112914238, 0.2596160942660445, 0.20632481806888137, 0.2362171112582515, 0.2877495145030635, 0.26575675549302247, 0.2652395593614252, 0.29505650714909193, 0.17559157761626343, 0.3018375076311369, 0.24708854326661367, 0.2947152023196419, 0.20273147849835416, 0.29596113670365976, 0.14846469925564976, 0.14623360698567178, 0.22598098686752055, 0.1429039775054216, 0.1759400104547929, 0.18723391573012527, 0.18633367558598024, 0.20375324983016385, 0.22572144484395618, 0.16064966172942385, 0.18263691248715253, 0.19133569797177485, 0.2642398836879273, 0.19609276739456039, 0.21209761453757314, 0.2251796954939027, 0.1600116316011876, 0.20511263310639627, 0.2079359893133148, 0.19686393799829405, 0.17250718089573458, 0.18936485714316298, 0.1816934012027449, 0.19507007246870467, 0.1902869073200565, 0.18554075158668726, 0.19146861977222152, 0.19078089395140296, 0.1259016072221839, 0.185250609925809, 0.18531948242136742, 0.1719373053043931, 0.1982833508219578, 0.14699885939673696, 0.15176495197401185, 0.1684472024711775, 0.16628470379366644, 0.6386805548527816, 0.20843487311193976, 0.5153398175040909, 0.2072572531638187, 0.20614406534662044, 0.6327383215784244, 0.10402406744815507, 0.4575884115938941, 0.5719202562890133, 0.18633973182137642, 0.17386025425583085, 0.1806010723396264, 0.1830257086241096, 0.17914628889076845, 0.16751710340052706, 0.17662067305628426, 0.17827860288246689, 0.17177761465597885, 0.05175686604515506, 0.07332509242885465, 0.0595311289496, 0.07448804366655803, 0.09033020719072848, 0.0860770465342382, 0.07289651477870629, 0.06857949854483036, 0.0847957460021389]}, "mutation_prompt": null}
{"id": "a5a35764-f1df-4875-9d29-984734e8bdb7", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                \n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "EnhancedDynamicMutationPSO", "description": "Enhancing DynamicMutationPSO by incorporating adaptive inertia weight and a diversity maintenance mechanism to improve convergence speed and exploration ability.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c547bfe-4d4b-4a74-a02d-0b4fbb211d3a", "metadata": {"aucs": [0.4405907372471012, 0.4383170105407901, 0.47382501113322384, 0.5342938286553625, 0.44260436652887925, 0.4474372048395465, 0.4141750581800404, 0.49613543951848227, 0.46876571766566955, 0.021292956273607833, 0.05661398729391709, 0.05886186413411543, 9.999999999998899e-05, 0.00822887337198841, 0.044454598486514785, 0.03627816976267095, 0.07596807626840851, 0.06692601167688239, 0.06052562646261117, 0.13853411546485528, 0.10204118198229284, 0.1164332247205877, 0.14922217668781945, 0.10827601866408154, 0.08736811580466841, 0.13427746693819154, 0.10357949201953653, 0.08680383680106041, 0.10553302112028651, 0.06531768544280314, 0.09526623515812005, 0.1054727623095012, 0.08869463876188277, 0.10405904740048866, 0.10783880727195305, 0.11290751223498041, 0.8947959073708521, 0.8941741470562196, 0.9025126753588415, 0.8898889356412045, 0.9232984442046038, 0.9045469439474693, 0.9201013550524708, 0.8977622347210468, 0.8882084874547086, 0.28596049579439253, 0.3056851380715784, 0.33243448253077035, 0.3346249213709208, 0.3570126760005362, 0.31259054127442976, 0.30879088006262656, 0.3028161873514509, 0.30921733281824504, 0.22546914319999622, 0.11785037725511083, 0.13803994935656827, 0.45485525842257546, 0.5846382021433699, 0.3887753225350441, 0.1260964428781841, 0.1757401167376751, 0.23558080656054026, 0.15623731481568848, 0.15782728809220625, 0.16213128701884727, 0.150663033723059, 0.17971177241083747, 0.10712176641488691, 0.17961241730518485, 0.16883159862195174, 0.17033447317340122, 0.1699001634667544, 0.14318201280947052, 0.10938962133317887, 0.16905526217393307, 0.11960735260417421, 0.15991657054880903, 0.19741332292415503, 0.09620330491446605, 0.15880567038118365, 9.999999999998899e-05, 0.03726833581264477, 0.031217923199649333, 0.0446695365882237, 0.00738971944056066, 9.999999999998899e-05, 0.0047653432810200735, 9.999999999998899e-05, 0.04134065636692119, 0.1354482847056908, 0.024987736650489256, 0.048387868374044074, 0.06717345741886072, 0.008113026111441601, 0.008347783642712603, 0.08913079142357638, 0.07441053281742083, 0.03581283954841097, 9.999999999998899e-05, 0.031849987952743186, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028786005972353257, 0.01746061842496016, 9.999999999998899e-05, 0.0026654507660519577, 9.999999999998899e-05, 0.10955413382449497, 0.08366339983356541, 0.116947709705574, 0.08094756609851006, 0.09454002382886995, 0.12334459552253452, 0.069104074122601, 0.11865758989183939, 0.07564833630789836, 0.39768458600266254, 0.399974584599716, 0.39925481624768644, 0.4320082449644258, 0.39924291809874624, 0.38824310892841596, 0.40758982654257125, 0.4146150681456421, 0.39174357489140066, 0.08920564942910092, 0.0740187148697865, 0.05973757634707966, 0.070295326425597, 0.07159768850843973, 0.1020310320951936, 0.14239748448669143, 0.09733241369118917, 0.0732622744820246, 0.17102851514940143, 0.18887109532640478, 0.2887466964616032, 0.2290706112914238, 0.2596160942660445, 0.20632481806888137, 0.2362171112582515, 0.2877495145030635, 0.26575675549302247, 0.2652395593614252, 0.29505650714909193, 0.17559157761626343, 0.3018375076311369, 0.24708854326661367, 0.2947152023196419, 0.20273147849835416, 0.29596113670365976, 0.14846469925564976, 0.14623360698567178, 0.22598098686752055, 0.1429039775054216, 0.1759400104547929, 0.18723391573012527, 0.18633367558598024, 0.20375324983016385, 0.22572144484395618, 0.16064966172942385, 0.18263691248715253, 0.19133569797177485, 0.2642398836879273, 0.19609276739456039, 0.21209761453757314, 0.2251796954939027, 0.1600116316011876, 0.20511263310639627, 0.2079359893133148, 0.19686393799829405, 0.17250718089573458, 0.18936485714316298, 0.1816934012027449, 0.19507007246870467, 0.1902869073200565, 0.18554075158668726, 0.19146861977222152, 0.19078089395140296, 0.1259016072221839, 0.185250609925809, 0.18531948242136742, 0.1719373053043931, 0.1982833508219578, 0.14699885939673696, 0.15176495197401185, 0.1684472024711775, 0.16628470379366644, 0.6386805548527816, 0.20843487311193976, 0.5153398175040909, 0.2072572531638187, 0.20614406534662044, 0.6327383215784244, 0.10402406744815507, 0.4575884115938941, 0.5719202562890133, 0.18633973182137642, 0.17386025425583085, 0.1806010723396264, 0.1830257086241096, 0.17914628889076845, 0.16751710340052706, 0.17662067305628426, 0.17827860288246689, 0.17177761465597885, 0.05175686604515506, 0.07332509242885465, 0.0595311289496, 0.07448804366655803, 0.09033020719072848, 0.0860770465342382, 0.07289651477870629, 0.06857949854483036, 0.0847957460021389]}, "mutation_prompt": null}
{"id": "32270dff-e292-4916-a0a9-94144dd3cdf0", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationPSO_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n        self.mutation_rate = 0.1\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                \n            # Adaptive Mutation\n            mutation_vector = np.random.uniform(-self.mutation_rate, self.mutation_rate, self.dim)\n            self.particles += mutation_vector\n            \n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "EnhancedDynamicMutationPSO_Improved", "description": "Improving convergence speed and diversity maintenance by enhancing velocity update mechanism and adding adaptive mutation.", "configspace": "", "generation": 17, "fitness": 0.1892260878857702, "feedback": "The algorithm EnhancedDynamicMutationPSO_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.18.", "error": "", "parent_id": "6c547bfe-4d4b-4a74-a02d-0b4fbb211d3a", "metadata": {"aucs": [0.3776543138131109, 0.38618368157243965, 0.3719251813553549, 0.378643371045273, 0.3750572800407108, 0.3794246392828873, 0.37008477506337756, 0.4059039482550464, 0.3832664877231302, 0.0011098429916053254, 0.007706553727254817, 9.999999999998899e-05, 0.0010119247730997483, 0.024507292637388822, 9.999999999998899e-05, 0.0007151939055333179, 9.999999999998899e-05, 9.999999999998899e-05, 0.07205903559769888, 0.08389985025610636, 0.06599059461332835, 0.09076513051895163, 0.09691034375943242, 0.09890389807113553, 0.08275489576173001, 0.08465569569664844, 0.10024107137269989, 0.09085032395641357, 0.05148501320279464, 0.061033072553414947, 0.09279446685977932, 0.08185239795695776, 0.05124658768775148, 0.07163570320552748, 0.08192906286870161, 0.06405689535708792, 0.8433470565048229, 0.8822847235534769, 0.8974698402839717, 0.8721857718333033, 0.8998497531542156, 0.8819846892983114, 0.7431056365992037, 0.8022058688718721, 0.9057675856275306, 0.25655644311550874, 0.2597643329487458, 0.2689287828891658, 0.24044894299952024, 0.2503957088011123, 0.255641243510379, 0.26555634433673125, 0.2614828106896714, 0.23961126756543272, 0.34249009673679864, 0.1685354061928248, 0.2211563507265838, 0.2848913714148955, 0.4119119870434229, 0.2546843238095846, 0.22301994807753078, 0.1582839522718954, 0.27153607105515265, 0.15724603524467806, 0.1511916728156686, 0.1194827139629755, 0.1428693916099959, 0.13690980883739468, 0.12490350072551415, 0.12228367104487803, 0.11465776480549217, 0.1317100706904506, 0.14205649846715873, 0.15817927502411622, 0.152624986416649, 0.16439574428094916, 0.1282019248644658, 0.1590597607403179, 0.16025430597456647, 0.15004984981718428, 0.1310194176330708, 0.0033750270958869955, 0.006188765243081429, 0.057496454183859735, 0.003833239868962335, 0.0029980255832682268, 0.029375061791209522, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016826702533285776, 0.073136098065397, 0.088602979415485, 0.09365591302688192, 0.059392859881114424, 0.033617267222353586, 0.019290851199331494, 0.11746402811206191, 0.08721178376299454, 0.04352351784931674, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07039871497390526, 0.07609748003386607, 0.08285946262582944, 0.07841375366366288, 0.07386572085395238, 0.07489122814843319, 0.07631098497456001, 0.06983511464626868, 0.06484597571135087, 0.3666967480749187, 0.3949331964239299, 0.3656593423499581, 0.3717393751343242, 0.3726631588235677, 0.37851696978937266, 0.3594644264225594, 0.36769191189092854, 0.37505443820589945, 0.053458931099085394, 0.07764346787553256, 0.07092448942069518, 0.10330808032429883, 0.0751661209125557, 0.113435127636063, 0.09165400878336205, 0.0998011493038039, 0.07317441228890564, 0.19043527515879433, 0.22248468287715029, 0.189185573247851, 0.21975840508243327, 0.21344129396791234, 0.2108619405914739, 0.2447805849745055, 0.23843555792345938, 0.2140634803723137, 0.15285644098471418, 0.27128467684261204, 0.1979610051366879, 0.2146112654952983, 0.20770624418469164, 0.2545514657374952, 0.21007826915937655, 0.27291090893244685, 0.14831762353731048, 0.21379925443184622, 0.21459975690577293, 0.15117715178540025, 0.22232706651560252, 0.18576756414177553, 0.19109360125878105, 0.18260773865763325, 0.22039459628167446, 0.05595334075502856, 0.19049096361509044, 0.1909552912396264, 0.21144198205478626, 0.19556960232095344, 0.19818352373359072, 0.22976795390898552, 0.20106036660706217, 0.16886084451264338, 0.22044532894223579, 0.18051321701467515, 0.1963753486452262, 0.1739255555002014, 0.19572544555780125, 0.20074113472660926, 0.19839256021406937, 0.18313044336712114, 0.17679956535881247, 0.17550980822662965, 0.12513304886491328, 0.12550320030854067, 0.18361494787606958, 0.17153855800784423, 0.19779652335758924, 0.1971629651019252, 0.15177156594681507, 0.16942393236446585, 0.17462462840484572, 0.5106074222000119, 0.20988193625062845, 0.491359506906792, 0.20615300627025168, 0.20462114014231048, 0.20618132064937222, 0.1035859029863333, 0.4733267001183049, 0.32236583477436176, 0.1832659313617676, 0.18413358712977734, 0.1723598510468246, 0.17170156397566494, 0.17859523330265348, 0.18381794575572252, 0.1620140561445712, 0.18613376481848376, 0.1964134262295293, 0.06934798762110295, 0.0740179822207534, 0.07546450022879869, 0.07873510686254681, 0.08403660614588904, 0.09085778407413325, 0.06875884998634907, 0.07149830135317048, 0.12039710275540527]}, "mutation_prompt": null}
{"id": "e21881d1-bf43-4439-8474-3587a867cd39", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                \n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "EnhancedDynamicMutationPSO", "description": "Enhancing DynamicMutationPSO by incorporating adaptive inertia weight and a diversity maintenance mechanism to improve convergence speed and exploration ability.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c547bfe-4d4b-4a74-a02d-0b4fbb211d3a", "metadata": {"aucs": [0.4405907372471012, 0.4383170105407901, 0.47382501113322384, 0.5342938286553625, 0.44260436652887925, 0.4474372048395465, 0.4141750581800404, 0.49613543951848227, 0.46876571766566955, 0.021292956273607833, 0.05661398729391709, 0.05886186413411543, 9.999999999998899e-05, 0.00822887337198841, 0.044454598486514785, 0.03627816976267095, 0.07596807626840851, 0.06692601167688239, 0.06052562646261117, 0.13853411546485528, 0.10204118198229284, 0.1164332247205877, 0.14922217668781945, 0.10827601866408154, 0.08736811580466841, 0.13427746693819154, 0.10357949201953653, 0.08680383680106041, 0.10553302112028651, 0.06531768544280314, 0.09526623515812005, 0.1054727623095012, 0.08869463876188277, 0.10405904740048866, 0.10783880727195305, 0.11290751223498041, 0.8947959073708521, 0.8941741470562196, 0.9025126753588415, 0.8898889356412045, 0.9232984442046038, 0.9045469439474693, 0.9201013550524708, 0.8977622347210468, 0.8882084874547086, 0.28596049579439253, 0.3056851380715784, 0.33243448253077035, 0.3346249213709208, 0.3570126760005362, 0.31259054127442976, 0.30879088006262656, 0.3028161873514509, 0.30921733281824504, 0.22546914319999622, 0.11785037725511083, 0.13803994935656827, 0.45485525842257546, 0.5846382021433699, 0.3887753225350441, 0.1260964428781841, 0.1757401167376751, 0.23558080656054026, 0.15623731481568848, 0.15782728809220625, 0.16213128701884727, 0.150663033723059, 0.17971177241083747, 0.10712176641488691, 0.17961241730518485, 0.16883159862195174, 0.17033447317340122, 0.1699001634667544, 0.14318201280947052, 0.10938962133317887, 0.16905526217393307, 0.11960735260417421, 0.15991657054880903, 0.19741332292415503, 0.09620330491446605, 0.15880567038118365, 9.999999999998899e-05, 0.03726833581264477, 0.031217923199649333, 0.0446695365882237, 0.00738971944056066, 9.999999999998899e-05, 0.0047653432810200735, 9.999999999998899e-05, 0.04134065636692119, 0.1354482847056908, 0.024987736650489256, 0.048387868374044074, 0.06717345741886072, 0.008113026111441601, 0.008347783642712603, 0.08913079142357638, 0.07441053281742083, 0.03581283954841097, 9.999999999998899e-05, 0.031849987952743186, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028786005972353257, 0.01746061842496016, 9.999999999998899e-05, 0.0026654507660519577, 9.999999999998899e-05, 0.10955413382449497, 0.08366339983356541, 0.116947709705574, 0.08094756609851006, 0.09454002382886995, 0.12334459552253452, 0.069104074122601, 0.11865758989183939, 0.07564833630789836, 0.39768458600266254, 0.399974584599716, 0.39925481624768644, 0.4320082449644258, 0.39924291809874624, 0.38824310892841596, 0.40758982654257125, 0.4146150681456421, 0.39174357489140066, 0.08920564942910092, 0.0740187148697865, 0.05973757634707966, 0.070295326425597, 0.07159768850843973, 0.1020310320951936, 0.14239748448669143, 0.09733241369118917, 0.0732622744820246, 0.17102851514940143, 0.18887109532640478, 0.2887466964616032, 0.2290706112914238, 0.2596160942660445, 0.20632481806888137, 0.2362171112582515, 0.2877495145030635, 0.26575675549302247, 0.2652395593614252, 0.29505650714909193, 0.17559157761626343, 0.3018375076311369, 0.24708854326661367, 0.2947152023196419, 0.20273147849835416, 0.29596113670365976, 0.14846469925564976, 0.14623360698567178, 0.22598098686752055, 0.1429039775054216, 0.1759400104547929, 0.18723391573012527, 0.18633367558598024, 0.20375324983016385, 0.22572144484395618, 0.16064966172942385, 0.18263691248715253, 0.19133569797177485, 0.2642398836879273, 0.19609276739456039, 0.21209761453757314, 0.2251796954939027, 0.1600116316011876, 0.20511263310639627, 0.2079359893133148, 0.19686393799829405, 0.17250718089573458, 0.18936485714316298, 0.1816934012027449, 0.19507007246870467, 0.1902869073200565, 0.18554075158668726, 0.19146861977222152, 0.19078089395140296, 0.1259016072221839, 0.185250609925809, 0.18531948242136742, 0.1719373053043931, 0.1982833508219578, 0.14699885939673696, 0.15176495197401185, 0.1684472024711775, 0.16628470379366644, 0.6386805548527816, 0.20843487311193976, 0.5153398175040909, 0.2072572531638187, 0.20614406534662044, 0.6327383215784244, 0.10402406744815507, 0.4575884115938941, 0.5719202562890133, 0.18633973182137642, 0.17386025425583085, 0.1806010723396264, 0.1830257086241096, 0.17914628889076845, 0.16751710340052706, 0.17662067305628426, 0.17827860288246689, 0.17177761465597885, 0.05175686604515506, 0.07332509242885465, 0.0595311289496, 0.07448804366655803, 0.09033020719072848, 0.0860770465342382, 0.07289651477870629, 0.06857949854483036, 0.0847957460021389]}, "mutation_prompt": null}
{"id": "96a6474d-d0e5-4a26-be8d-1dc74ffd38b4", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                \n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "EnhancedDynamicMutationPSO", "description": "Enhancing DynamicMutationPSO by incorporating adaptive inertia weight and a diversity maintenance mechanism to improve convergence speed and exploration ability.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c547bfe-4d4b-4a74-a02d-0b4fbb211d3a", "metadata": {"aucs": [0.4405907372471012, 0.4383170105407901, 0.47382501113322384, 0.5342938286553625, 0.44260436652887925, 0.4474372048395465, 0.4141750581800404, 0.49613543951848227, 0.46876571766566955, 0.021292956273607833, 0.05661398729391709, 0.05886186413411543, 9.999999999998899e-05, 0.00822887337198841, 0.044454598486514785, 0.03627816976267095, 0.07596807626840851, 0.06692601167688239, 0.06052562646261117, 0.13853411546485528, 0.10204118198229284, 0.1164332247205877, 0.14922217668781945, 0.10827601866408154, 0.08736811580466841, 0.13427746693819154, 0.10357949201953653, 0.08680383680106041, 0.10553302112028651, 0.06531768544280314, 0.09526623515812005, 0.1054727623095012, 0.08869463876188277, 0.10405904740048866, 0.10783880727195305, 0.11290751223498041, 0.8947959073708521, 0.8941741470562196, 0.9025126753588415, 0.8898889356412045, 0.9232984442046038, 0.9045469439474693, 0.9201013550524708, 0.8977622347210468, 0.8882084874547086, 0.28596049579439253, 0.3056851380715784, 0.33243448253077035, 0.3346249213709208, 0.3570126760005362, 0.31259054127442976, 0.30879088006262656, 0.3028161873514509, 0.30921733281824504, 0.22546914319999622, 0.11785037725511083, 0.13803994935656827, 0.45485525842257546, 0.5846382021433699, 0.3887753225350441, 0.1260964428781841, 0.1757401167376751, 0.23558080656054026, 0.15623731481568848, 0.15782728809220625, 0.16213128701884727, 0.150663033723059, 0.17971177241083747, 0.10712176641488691, 0.17961241730518485, 0.16883159862195174, 0.17033447317340122, 0.1699001634667544, 0.14318201280947052, 0.10938962133317887, 0.16905526217393307, 0.11960735260417421, 0.15991657054880903, 0.19741332292415503, 0.09620330491446605, 0.15880567038118365, 9.999999999998899e-05, 0.03726833581264477, 0.031217923199649333, 0.0446695365882237, 0.00738971944056066, 9.999999999998899e-05, 0.0047653432810200735, 9.999999999998899e-05, 0.04134065636692119, 0.1354482847056908, 0.024987736650489256, 0.048387868374044074, 0.06717345741886072, 0.008113026111441601, 0.008347783642712603, 0.08913079142357638, 0.07441053281742083, 0.03581283954841097, 9.999999999998899e-05, 0.031849987952743186, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028786005972353257, 0.01746061842496016, 9.999999999998899e-05, 0.0026654507660519577, 9.999999999998899e-05, 0.10955413382449497, 0.08366339983356541, 0.116947709705574, 0.08094756609851006, 0.09454002382886995, 0.12334459552253452, 0.069104074122601, 0.11865758989183939, 0.07564833630789836, 0.39768458600266254, 0.399974584599716, 0.39925481624768644, 0.4320082449644258, 0.39924291809874624, 0.38824310892841596, 0.40758982654257125, 0.4146150681456421, 0.39174357489140066, 0.08920564942910092, 0.0740187148697865, 0.05973757634707966, 0.070295326425597, 0.07159768850843973, 0.1020310320951936, 0.14239748448669143, 0.09733241369118917, 0.0732622744820246, 0.17102851514940143, 0.18887109532640478, 0.2887466964616032, 0.2290706112914238, 0.2596160942660445, 0.20632481806888137, 0.2362171112582515, 0.2877495145030635, 0.26575675549302247, 0.2652395593614252, 0.29505650714909193, 0.17559157761626343, 0.3018375076311369, 0.24708854326661367, 0.2947152023196419, 0.20273147849835416, 0.29596113670365976, 0.14846469925564976, 0.14623360698567178, 0.22598098686752055, 0.1429039775054216, 0.1759400104547929, 0.18723391573012527, 0.18633367558598024, 0.20375324983016385, 0.22572144484395618, 0.16064966172942385, 0.18263691248715253, 0.19133569797177485, 0.2642398836879273, 0.19609276739456039, 0.21209761453757314, 0.2251796954939027, 0.1600116316011876, 0.20511263310639627, 0.2079359893133148, 0.19686393799829405, 0.17250718089573458, 0.18936485714316298, 0.1816934012027449, 0.19507007246870467, 0.1902869073200565, 0.18554075158668726, 0.19146861977222152, 0.19078089395140296, 0.1259016072221839, 0.185250609925809, 0.18531948242136742, 0.1719373053043931, 0.1982833508219578, 0.14699885939673696, 0.15176495197401185, 0.1684472024711775, 0.16628470379366644, 0.6386805548527816, 0.20843487311193976, 0.5153398175040909, 0.2072572531638187, 0.20614406534662044, 0.6327383215784244, 0.10402406744815507, 0.4575884115938941, 0.5719202562890133, 0.18633973182137642, 0.17386025425583085, 0.1806010723396264, 0.1830257086241096, 0.17914628889076845, 0.16751710340052706, 0.17662067305628426, 0.17827860288246689, 0.17177761465597885, 0.05175686604515506, 0.07332509242885465, 0.0595311289496, 0.07448804366655803, 0.09033020719072848, 0.0860770465342382, 0.07289651477870629, 0.06857949854483036, 0.0847957460021389]}, "mutation_prompt": null}
{"id": "a03c7f4c-c278-4d5a-a4bb-9fc64f2ac68f", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                \n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "EnhancedDynamicMutationPSO", "description": "Enhancing DynamicMutationPSO by incorporating adaptive inertia weight and a diversity maintenance mechanism to improve convergence speed and exploration ability.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c547bfe-4d4b-4a74-a02d-0b4fbb211d3a", "metadata": {"aucs": [0.4405907372471012, 0.4383170105407901, 0.47382501113322384, 0.5342938286553625, 0.44260436652887925, 0.4474372048395465, 0.4141750581800404, 0.49613543951848227, 0.46876571766566955, 0.021292956273607833, 0.05661398729391709, 0.05886186413411543, 9.999999999998899e-05, 0.00822887337198841, 0.044454598486514785, 0.03627816976267095, 0.07596807626840851, 0.06692601167688239, 0.06052562646261117, 0.13853411546485528, 0.10204118198229284, 0.1164332247205877, 0.14922217668781945, 0.10827601866408154, 0.08736811580466841, 0.13427746693819154, 0.10357949201953653, 0.08680383680106041, 0.10553302112028651, 0.06531768544280314, 0.09526623515812005, 0.1054727623095012, 0.08869463876188277, 0.10405904740048866, 0.10783880727195305, 0.11290751223498041, 0.8947959073708521, 0.8941741470562196, 0.9025126753588415, 0.8898889356412045, 0.9232984442046038, 0.9045469439474693, 0.9201013550524708, 0.8977622347210468, 0.8882084874547086, 0.28596049579439253, 0.3056851380715784, 0.33243448253077035, 0.3346249213709208, 0.3570126760005362, 0.31259054127442976, 0.30879088006262656, 0.3028161873514509, 0.30921733281824504, 0.22546914319999622, 0.11785037725511083, 0.13803994935656827, 0.45485525842257546, 0.5846382021433699, 0.3887753225350441, 0.1260964428781841, 0.1757401167376751, 0.23558080656054026, 0.15623731481568848, 0.15782728809220625, 0.16213128701884727, 0.150663033723059, 0.17971177241083747, 0.10712176641488691, 0.17961241730518485, 0.16883159862195174, 0.17033447317340122, 0.1699001634667544, 0.14318201280947052, 0.10938962133317887, 0.16905526217393307, 0.11960735260417421, 0.15991657054880903, 0.19741332292415503, 0.09620330491446605, 0.15880567038118365, 9.999999999998899e-05, 0.03726833581264477, 0.031217923199649333, 0.0446695365882237, 0.00738971944056066, 9.999999999998899e-05, 0.0047653432810200735, 9.999999999998899e-05, 0.04134065636692119, 0.1354482847056908, 0.024987736650489256, 0.048387868374044074, 0.06717345741886072, 0.008113026111441601, 0.008347783642712603, 0.08913079142357638, 0.07441053281742083, 0.03581283954841097, 9.999999999998899e-05, 0.031849987952743186, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028786005972353257, 0.01746061842496016, 9.999999999998899e-05, 0.0026654507660519577, 9.999999999998899e-05, 0.10955413382449497, 0.08366339983356541, 0.116947709705574, 0.08094756609851006, 0.09454002382886995, 0.12334459552253452, 0.069104074122601, 0.11865758989183939, 0.07564833630789836, 0.39768458600266254, 0.399974584599716, 0.39925481624768644, 0.4320082449644258, 0.39924291809874624, 0.38824310892841596, 0.40758982654257125, 0.4146150681456421, 0.39174357489140066, 0.08920564942910092, 0.0740187148697865, 0.05973757634707966, 0.070295326425597, 0.07159768850843973, 0.1020310320951936, 0.14239748448669143, 0.09733241369118917, 0.0732622744820246, 0.17102851514940143, 0.18887109532640478, 0.2887466964616032, 0.2290706112914238, 0.2596160942660445, 0.20632481806888137, 0.2362171112582515, 0.2877495145030635, 0.26575675549302247, 0.2652395593614252, 0.29505650714909193, 0.17559157761626343, 0.3018375076311369, 0.24708854326661367, 0.2947152023196419, 0.20273147849835416, 0.29596113670365976, 0.14846469925564976, 0.14623360698567178, 0.22598098686752055, 0.1429039775054216, 0.1759400104547929, 0.18723391573012527, 0.18633367558598024, 0.20375324983016385, 0.22572144484395618, 0.16064966172942385, 0.18263691248715253, 0.19133569797177485, 0.2642398836879273, 0.19609276739456039, 0.21209761453757314, 0.2251796954939027, 0.1600116316011876, 0.20511263310639627, 0.2079359893133148, 0.19686393799829405, 0.17250718089573458, 0.18936485714316298, 0.1816934012027449, 0.19507007246870467, 0.1902869073200565, 0.18554075158668726, 0.19146861977222152, 0.19078089395140296, 0.1259016072221839, 0.185250609925809, 0.18531948242136742, 0.1719373053043931, 0.1982833508219578, 0.14699885939673696, 0.15176495197401185, 0.1684472024711775, 0.16628470379366644, 0.6386805548527816, 0.20843487311193976, 0.5153398175040909, 0.2072572531638187, 0.20614406534662044, 0.6327383215784244, 0.10402406744815507, 0.4575884115938941, 0.5719202562890133, 0.18633973182137642, 0.17386025425583085, 0.1806010723396264, 0.1830257086241096, 0.17914628889076845, 0.16751710340052706, 0.17662067305628426, 0.17827860288246689, 0.17177761465597885, 0.05175686604515506, 0.07332509242885465, 0.0595311289496, 0.07448804366655803, 0.09033020719072848, 0.0860770465342382, 0.07289651477870629, 0.06857949854483036, 0.0847957460021389]}, "mutation_prompt": null}
{"id": "7ab41140-fb8e-499a-b688-6caaa70d5f77", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                \n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "EnhancedDynamicMutationPSO", "description": "Enhancing DynamicMutationPSO by incorporating adaptive inertia weight and a diversity maintenance mechanism to improve convergence speed and exploration ability.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c547bfe-4d4b-4a74-a02d-0b4fbb211d3a", "metadata": {"aucs": [0.4405907372471012, 0.4383170105407901, 0.47382501113322384, 0.5342938286553625, 0.44260436652887925, 0.4474372048395465, 0.4141750581800404, 0.49613543951848227, 0.46876571766566955, 0.021292956273607833, 0.05661398729391709, 0.05886186413411543, 9.999999999998899e-05, 0.00822887337198841, 0.044454598486514785, 0.03627816976267095, 0.07596807626840851, 0.06692601167688239, 0.06052562646261117, 0.13853411546485528, 0.10204118198229284, 0.1164332247205877, 0.14922217668781945, 0.10827601866408154, 0.08736811580466841, 0.13427746693819154, 0.10357949201953653, 0.08680383680106041, 0.10553302112028651, 0.06531768544280314, 0.09526623515812005, 0.1054727623095012, 0.08869463876188277, 0.10405904740048866, 0.10783880727195305, 0.11290751223498041, 0.8947959073708521, 0.8941741470562196, 0.9025126753588415, 0.8898889356412045, 0.9232984442046038, 0.9045469439474693, 0.9201013550524708, 0.8977622347210468, 0.8882084874547086, 0.28596049579439253, 0.3056851380715784, 0.33243448253077035, 0.3346249213709208, 0.3570126760005362, 0.31259054127442976, 0.30879088006262656, 0.3028161873514509, 0.30921733281824504, 0.22546914319999622, 0.11785037725511083, 0.13803994935656827, 0.45485525842257546, 0.5846382021433699, 0.3887753225350441, 0.1260964428781841, 0.1757401167376751, 0.23558080656054026, 0.15623731481568848, 0.15782728809220625, 0.16213128701884727, 0.150663033723059, 0.17971177241083747, 0.10712176641488691, 0.17961241730518485, 0.16883159862195174, 0.17033447317340122, 0.1699001634667544, 0.14318201280947052, 0.10938962133317887, 0.16905526217393307, 0.11960735260417421, 0.15991657054880903, 0.19741332292415503, 0.09620330491446605, 0.15880567038118365, 9.999999999998899e-05, 0.03726833581264477, 0.031217923199649333, 0.0446695365882237, 0.00738971944056066, 9.999999999998899e-05, 0.0047653432810200735, 9.999999999998899e-05, 0.04134065636692119, 0.1354482847056908, 0.024987736650489256, 0.048387868374044074, 0.06717345741886072, 0.008113026111441601, 0.008347783642712603, 0.08913079142357638, 0.07441053281742083, 0.03581283954841097, 9.999999999998899e-05, 0.031849987952743186, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028786005972353257, 0.01746061842496016, 9.999999999998899e-05, 0.0026654507660519577, 9.999999999998899e-05, 0.10955413382449497, 0.08366339983356541, 0.116947709705574, 0.08094756609851006, 0.09454002382886995, 0.12334459552253452, 0.069104074122601, 0.11865758989183939, 0.07564833630789836, 0.39768458600266254, 0.399974584599716, 0.39925481624768644, 0.4320082449644258, 0.39924291809874624, 0.38824310892841596, 0.40758982654257125, 0.4146150681456421, 0.39174357489140066, 0.08920564942910092, 0.0740187148697865, 0.05973757634707966, 0.070295326425597, 0.07159768850843973, 0.1020310320951936, 0.14239748448669143, 0.09733241369118917, 0.0732622744820246, 0.17102851514940143, 0.18887109532640478, 0.2887466964616032, 0.2290706112914238, 0.2596160942660445, 0.20632481806888137, 0.2362171112582515, 0.2877495145030635, 0.26575675549302247, 0.2652395593614252, 0.29505650714909193, 0.17559157761626343, 0.3018375076311369, 0.24708854326661367, 0.2947152023196419, 0.20273147849835416, 0.29596113670365976, 0.14846469925564976, 0.14623360698567178, 0.22598098686752055, 0.1429039775054216, 0.1759400104547929, 0.18723391573012527, 0.18633367558598024, 0.20375324983016385, 0.22572144484395618, 0.16064966172942385, 0.18263691248715253, 0.19133569797177485, 0.2642398836879273, 0.19609276739456039, 0.21209761453757314, 0.2251796954939027, 0.1600116316011876, 0.20511263310639627, 0.2079359893133148, 0.19686393799829405, 0.17250718089573458, 0.18936485714316298, 0.1816934012027449, 0.19507007246870467, 0.1902869073200565, 0.18554075158668726, 0.19146861977222152, 0.19078089395140296, 0.1259016072221839, 0.185250609925809, 0.18531948242136742, 0.1719373053043931, 0.1982833508219578, 0.14699885939673696, 0.15176495197401185, 0.1684472024711775, 0.16628470379366644, 0.6386805548527816, 0.20843487311193976, 0.5153398175040909, 0.2072572531638187, 0.20614406534662044, 0.6327383215784244, 0.10402406744815507, 0.4575884115938941, 0.5719202562890133, 0.18633973182137642, 0.17386025425583085, 0.1806010723396264, 0.1830257086241096, 0.17914628889076845, 0.16751710340052706, 0.17662067305628426, 0.17827860288246689, 0.17177761465597885, 0.05175686604515506, 0.07332509242885465, 0.0595311289496, 0.07448804366655803, 0.09033020719072848, 0.0860770465342382, 0.07289651477870629, 0.06857949854483036, 0.0847957460021389]}, "mutation_prompt": null}
{"id": "eb0f74e9-d27d-4e0c-b1e1-38bba31d3eeb", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                \n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "EnhancedDynamicMutationPSO", "description": "Enhancing DynamicMutationPSO by incorporating adaptive inertia weight and a diversity maintenance mechanism to improve convergence speed and exploration ability.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c547bfe-4d4b-4a74-a02d-0b4fbb211d3a", "metadata": {"aucs": [0.4405907372471012, 0.4383170105407901, 0.47382501113322384, 0.5342938286553625, 0.44260436652887925, 0.4474372048395465, 0.4141750581800404, 0.49613543951848227, 0.46876571766566955, 0.021292956273607833, 0.05661398729391709, 0.05886186413411543, 9.999999999998899e-05, 0.00822887337198841, 0.044454598486514785, 0.03627816976267095, 0.07596807626840851, 0.06692601167688239, 0.06052562646261117, 0.13853411546485528, 0.10204118198229284, 0.1164332247205877, 0.14922217668781945, 0.10827601866408154, 0.08736811580466841, 0.13427746693819154, 0.10357949201953653, 0.08680383680106041, 0.10553302112028651, 0.06531768544280314, 0.09526623515812005, 0.1054727623095012, 0.08869463876188277, 0.10405904740048866, 0.10783880727195305, 0.11290751223498041, 0.8947959073708521, 0.8941741470562196, 0.9025126753588415, 0.8898889356412045, 0.9232984442046038, 0.9045469439474693, 0.9201013550524708, 0.8977622347210468, 0.8882084874547086, 0.28596049579439253, 0.3056851380715784, 0.33243448253077035, 0.3346249213709208, 0.3570126760005362, 0.31259054127442976, 0.30879088006262656, 0.3028161873514509, 0.30921733281824504, 0.22546914319999622, 0.11785037725511083, 0.13803994935656827, 0.45485525842257546, 0.5846382021433699, 0.3887753225350441, 0.1260964428781841, 0.1757401167376751, 0.23558080656054026, 0.15623731481568848, 0.15782728809220625, 0.16213128701884727, 0.150663033723059, 0.17971177241083747, 0.10712176641488691, 0.17961241730518485, 0.16883159862195174, 0.17033447317340122, 0.1699001634667544, 0.14318201280947052, 0.10938962133317887, 0.16905526217393307, 0.11960735260417421, 0.15991657054880903, 0.19741332292415503, 0.09620330491446605, 0.15880567038118365, 9.999999999998899e-05, 0.03726833581264477, 0.031217923199649333, 0.0446695365882237, 0.00738971944056066, 9.999999999998899e-05, 0.0047653432810200735, 9.999999999998899e-05, 0.04134065636692119, 0.1354482847056908, 0.024987736650489256, 0.048387868374044074, 0.06717345741886072, 0.008113026111441601, 0.008347783642712603, 0.08913079142357638, 0.07441053281742083, 0.03581283954841097, 9.999999999998899e-05, 0.031849987952743186, 9.999999999998899e-05, 9.999999999998899e-05, 0.0028786005972353257, 0.01746061842496016, 9.999999999998899e-05, 0.0026654507660519577, 9.999999999998899e-05, 0.10955413382449497, 0.08366339983356541, 0.116947709705574, 0.08094756609851006, 0.09454002382886995, 0.12334459552253452, 0.069104074122601, 0.11865758989183939, 0.07564833630789836, 0.39768458600266254, 0.399974584599716, 0.39925481624768644, 0.4320082449644258, 0.39924291809874624, 0.38824310892841596, 0.40758982654257125, 0.4146150681456421, 0.39174357489140066, 0.08920564942910092, 0.0740187148697865, 0.05973757634707966, 0.070295326425597, 0.07159768850843973, 0.1020310320951936, 0.14239748448669143, 0.09733241369118917, 0.0732622744820246, 0.17102851514940143, 0.18887109532640478, 0.2887466964616032, 0.2290706112914238, 0.2596160942660445, 0.20632481806888137, 0.2362171112582515, 0.2877495145030635, 0.26575675549302247, 0.2652395593614252, 0.29505650714909193, 0.17559157761626343, 0.3018375076311369, 0.24708854326661367, 0.2947152023196419, 0.20273147849835416, 0.29596113670365976, 0.14846469925564976, 0.14623360698567178, 0.22598098686752055, 0.1429039775054216, 0.1759400104547929, 0.18723391573012527, 0.18633367558598024, 0.20375324983016385, 0.22572144484395618, 0.16064966172942385, 0.18263691248715253, 0.19133569797177485, 0.2642398836879273, 0.19609276739456039, 0.21209761453757314, 0.2251796954939027, 0.1600116316011876, 0.20511263310639627, 0.2079359893133148, 0.19686393799829405, 0.17250718089573458, 0.18936485714316298, 0.1816934012027449, 0.19507007246870467, 0.1902869073200565, 0.18554075158668726, 0.19146861977222152, 0.19078089395140296, 0.1259016072221839, 0.185250609925809, 0.18531948242136742, 0.1719373053043931, 0.1982833508219578, 0.14699885939673696, 0.15176495197401185, 0.1684472024711775, 0.16628470379366644, 0.6386805548527816, 0.20843487311193976, 0.5153398175040909, 0.2072572531638187, 0.20614406534662044, 0.6327383215784244, 0.10402406744815507, 0.4575884115938941, 0.5719202562890133, 0.18633973182137642, 0.17386025425583085, 0.1806010723396264, 0.1830257086241096, 0.17914628889076845, 0.16751710340052706, 0.17662067305628426, 0.17827860288246689, 0.17177761465597885, 0.05175686604515506, 0.07332509242885465, 0.0595311289496, 0.07448804366655803, 0.09033020719072848, 0.0860770465342382, 0.07289651477870629, 0.06857949854483036, 0.0847957460021389]}, "mutation_prompt": null}
{"id": "0db3fb4f-59e2-4c59-acb0-826ac279d864", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationPSO_Opposition:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                \n                # Opposition-based Learning\n                opposite_particle = 2 * np.mean(self.particles) - self.particles[i]\n                opposite_fitness = func(opposite_particle)\n                if opposite_fitness < fitness:\n                    self.particles[i] = opposite_particle\n                    fitness = opposite_fitness\n                \n                self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                \n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "EnhancedDynamicMutationPSO_Opposition", "description": "Enhancing DynamicMutationPSO by incorporating opposition-based learning to improve exploration and exploitation capabilities.", "configspace": "", "generation": 23, "fitness": 0.19904471590709907, "feedback": "The algorithm EnhancedDynamicMutationPSO_Opposition got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "6c547bfe-4d4b-4a74-a02d-0b4fbb211d3a", "metadata": {"aucs": [0.42669026555341705, 0.4971465380057071, 0.4081917322034676, 0.3993248860489117, 0.42635168937604717, 0.41059442533424995, 0.42709911759838537, 0.43066940401596654, 0.45466052704822346, 0.07305122449154966, 0.08127243723965771, 0.07400415398388482, 0.05068593201759264, 0.016564528552816427, 0.004885943115480629, 0.025068841468879333, 0.0017928577546350022, 0.024360925510534925, 0.09303967288058879, 0.0722312923931957, 0.10654623906399341, 0.09550028774640473, 0.10233150992699902, 0.06053666221268361, 0.09629149626169342, 0.0755519491311406, 0.06050649909359784, 0.05626814303658245, 0.06773460479170335, 0.07007021139923597, 0.09299092160376754, 0.05889579111185961, 0.08894427380636938, 0.0570285616586349, 0.0821709736106695, 0.04813874026488463, 0.8505579265513565, 0.8355620358458009, 0.8778827954480856, 0.836297948419654, 0.9025988427730226, 0.865862401938201, 0.8793455137821578, 0.8442239167198591, 0.8845721104791211, 0.26604118841157276, 0.2775736072992858, 0.27633813877809166, 0.25747598918454473, 0.14449467165945185, 0.14804387166142496, 0.26628635779253274, 0.30069100785170366, 0.24986387276675326, 0.32698559910779024, 0.16851123737801832, 0.16918945852936762, 0.29819162320140336, 0.15221266716710746, 0.3221875209105799, 0.12717603160501567, 0.12959851104666142, 0.2458083332217228, 0.16302509200922033, 0.16408099607598103, 0.14952295461535992, 0.11088226064253881, 0.09827632310349377, 0.12969823195771257, 0.14617922526119798, 0.11130916852364103, 0.16587486125181528, 0.16757985035371492, 0.14141913707436493, 0.14757860197720674, 0.13590282531696862, 0.15349128658328814, 0.14262006885701017, 0.11749383574037053, 0.12959385350446995, 0.15914171586723258, 9.999999999998899e-05, 0.037719807570956054, 0.014337442224013452, 0.0268961226133122, 0.003504330931895505, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002322431320005869, 0.1339919132647941, 0.058832504206281167, 0.10648415591140259, 0.09059778006434371, 9.999999999998899e-05, 0.04000756114406645, 0.07669196903044062, 0.09971470867949794, 0.07007589121304969, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003971926914863033, 9.999999999998899e-05, 9.999999999998899e-05, 0.09421953655734128, 0.07048907693678519, 0.10938128929811952, 0.06305471329865975, 0.06391675008702535, 0.08681869077380266, 0.07310241659906458, 0.06407363507331187, 0.08078963302302966, 0.36655595361706583, 0.3987997587105794, 0.41760683856268754, 0.3841357111570266, 0.4118198889745559, 0.3797663581054117, 0.39315261338568397, 0.36793521966063847, 0.38143686207278504, 0.10967153173112387, 0.08536730082505162, 0.05688209081277018, 0.07108880670528028, 0.11029445637523172, 0.1196065029483876, 0.11381905230116895, 0.10084288824617071, 0.0763887360684854, 0.13056801205740864, 0.16410188526518832, 0.16892420735966263, 0.14002107497095095, 0.20581202097116125, 0.1569592523322224, 0.21804425274685446, 0.21526757316921985, 0.1691697935916241, 0.2611718347713311, 0.27654379375499627, 0.24857431360664017, 0.2835683439926403, 0.2712751215071486, 0.2735296781078771, 0.20783557110031148, 0.2932833936830057, 0.21621668697656937, 0.18045145522187012, 0.1947617094195908, 0.20144238049751428, 0.19458728052703278, 0.1736980309783721, 0.238100974668918, 0.17433041348489042, 0.17794822122146148, 0.18383502140465724, 0.2108806359695301, 0.2233003985884533, 0.22225922912648577, 0.19013892407182853, 0.19535198767367423, 0.21302193680704673, 0.19846962703096716, 0.239092222689124, 0.1991809817942618, 0.17217432107516784, 0.2122463526962911, 0.19214222087127697, 0.18121004087928916, 0.1936934113658515, 0.20157894808224597, 0.16791816708449736, 0.17488864958888717, 0.18125825066175227, 0.12439412873212552, 0.5896275281285843, 0.18353088273739282, 0.17020997430653895, 0.1953038514997898, 0.5698353444519082, 0.15974154751351666, 0.16625284932586204, 0.5925387017030855, 0.5207439606048843, 0.4804586558688785, 0.5068543837599869, 0.16709805175364068, 0.2038576956756587, 0.31649952510293344, 0.13005479975542789, 0.16325559086665375, 0.3025196052214354, 0.17821906752023475, 0.18895843492011777, 0.2058769141934499, 0.171477228547809, 0.1807377186232929, 0.19912166385976493, 0.19614880942129997, 0.1919829508315638, 0.1744056303700543, 0.08296417341487505, 0.06993737902670694, 0.07248039405500117, 0.08441584333334173, 0.08477615333849897, 0.08130696689548822, 0.07914241593710558, 0.07781770121961895, 0.07395665963904763]}, "mutation_prompt": null}
{"id": "d8e61447-30b6-4633-a362-150ad387bb4f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n       \n            if np.random.rand() < 0.5:  # PSO update\n                for i in range(self.population_size):\n                    fitness = func(self.particles[i])\n                    if fitness < self.global_best_fitness:\n                        self.global_best = self.particles[i].copy()\n                        self.global_best_fitness = fitness\n                    pbest = self.particles[i].copy()\n                    if fitness < func(pbest):\n                        pbest = self.particles[i].copy()\n                    inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                    cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                    social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                    self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                    self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                    self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                    \n            else:  # DE update\n                for i in range(self.population_size):\n                    idxs = np.random.choice(list(range(self.population_size)), 3, replace=False)\n                    mutant = self.particles[idxs[0]] + 0.5 * (self.particles[idxs[1]] - self.particles[idxs[2]])\n                    crossover = np.random.rand(self.dim) < 0.9\n                    trial = mutant * crossover + self.particles[i] * ~crossover\n                    if func(trial) < func(self.particles[i]):\n                        self.particles[i] = trial.copy()\n\n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "HybridPSODE", "description": "Improving convergence speed and exploration ability by introducing a novel hybrid strategy combining Particle Swarm Optimization (PSO) with Differential Evolution (DE).", "configspace": "", "generation": 24, "fitness": 0.23089291740496842, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "6c547bfe-4d4b-4a74-a02d-0b4fbb211d3a", "metadata": {"aucs": [0.4675196307600147, 0.4862426057921898, 0.5371285878113784, 0.5133494413327593, 0.5202085773264572, 0.5185215712606559, 0.5365159638675958, 0.4841101286535593, 0.4738618357693488, 0.1639782742602962, 0.19276746282970758, 0.19145253060981504, 0.13871591283690343, 0.216503550660474, 0.1661163509738801, 0.06083096399456012, 0.20018575303153574, 0.19139854780036114, 0.10870784298388914, 0.12747591301789996, 0.1418947903842258, 0.11781882549054423, 0.09046294369603525, 0.10118980801193067, 0.08880371305155876, 0.08189093820254278, 0.13412557134205783, 0.08770232699007263, 0.09039081341374189, 0.0636713383275701, 0.11549194844262378, 0.10737647403937278, 0.07977988565660199, 0.09576780849481326, 0.09414459356662119, 0.10158895406845714, 0.9163001294018103, 0.8828630350700714, 0.9107076664359371, 0.9060756519537913, 0.8823011691200592, 0.8969825732918569, 0.8945919547508163, 0.9283988363492737, 0.878391946266721, 0.28638981779382433, 0.24010009000146337, 0.2924554140790777, 0.29025586309176865, 0.15132753733071092, 0.27788830954013233, 0.2575483753323037, 0.2971437864607712, 0.2926341674839621, 0.3152766142289841, 0.20520930228778134, 0.6803543420466895, 0.27172368046433426, 0.5285867859702967, 0.310270503807468, 0.26584810898300126, 0.4762025011655172, 0.3140014094200785, 0.19828010719961642, 0.17519638584716068, 0.22617407892192332, 0.16400342603906104, 0.24090293444939148, 0.13901541054686006, 0.16705870205518458, 0.1197187846895118, 0.20366447634634688, 0.1623950794950133, 0.1724592236192115, 0.18834726481491715, 0.21055245189844274, 0.17647684850711298, 0.12714236518035504, 0.18119277378700693, 0.2062397325433769, 0.2141996472086033, 0.005164250483408406, 0.03518162796783875, 0.03309604238219177, 0.005755913820709058, 0.02339566471267085, 0.020940570198288655, 0.026970939800211258, 0.05421378080229866, 0.002892058064652314, 0.12479513932750619, 0.09895900362430188, 0.11060576943243994, 0.03385835115225522, 0.041372130620748626, 0.04292425788291654, 0.150570849294568, 0.12708758437081602, 0.12801692269668985, 0.0034506526491919765, 0.0041735837713317014, 0.021158579834684832, 0.009903508332845923, 0.017051346185882332, 9.999999999998899e-05, 9.999999999998899e-05, 0.010605576747952927, 0.05320942294652964, 0.10436709893556328, 0.09862943205496322, 0.1187122693747853, 0.07999051790801437, 0.1006062236754528, 0.06715380877442689, 0.12552115622479454, 0.12272915930069284, 0.0759775899530366, 0.440716300474687, 0.4153302777006138, 0.4125267943153498, 0.38636211796095277, 0.42107864172186493, 0.431366662140826, 0.4145911801639275, 0.4208357367884491, 0.4773944771387182, 0.10030097025156315, 0.10949686291952732, 0.08374469382879002, 0.09064622190869998, 0.10423391830579531, 0.08519136901236357, 0.10863010897144543, 0.10042140606222671, 0.11260021063204617, 0.1821470361602222, 0.23997004786447218, 0.2510961989174464, 0.20790830223297319, 0.2626536850632111, 0.24454582991924922, 0.28500398229452695, 0.29285130135306003, 0.2438199050640425, 0.24178090675384578, 0.29552326317322786, 0.28067294451055236, 0.28648490273991234, 0.2867599352662714, 0.2934663833864919, 0.22108620254304, 0.3089575212420762, 0.2325838504281964, 0.2071155528735925, 0.18197406892741985, 0.16336565939920877, 0.21161410479386644, 0.21458980846466225, 0.1397515809315777, 0.17292798059833803, 0.2500627730730395, 0.0879070205946757, 0.2465508792286678, 0.2874008271810927, 0.19990094388884183, 0.22514960729673728, 0.23698476224764742, 0.19252372212873714, 0.21820482168626032, 0.19748887941565652, 0.23299438516376025, 0.1823103252299928, 0.20957501447919846, 0.19350054245052584, 0.18888231412403267, 0.18679412142201102, 0.20598783256610853, 0.20947495472983624, 0.19567045971020935, 0.2115152160965108, 0.18490655635242614, 0.18653532497982495, 0.15207431032957452, 0.6514781298465093, 0.19715343864065493, 0.19633518714568632, 0.15620689740462845, 0.2095115192477297, 0.1767396038694149, 0.507377181124353, 0.20638635020174667, 0.5950753840481402, 0.5862991223446492, 0.5780127097930619, 0.5350611668330107, 0.09361798986764314, 0.15450016857516824, 0.10373160695767691, 0.19023964380184022, 0.1984977890422368, 0.18754244701764178, 0.18895045739864136, 0.1846128125826716, 0.18590527445878013, 0.1929575334115825, 0.19940108982604987, 0.1849543073500004, 0.08286313620401875, 0.09705094178360485, 0.08560300465543791, 0.07315077262946379, 0.0901984100698906, 0.09347656318960362, 0.08460768509051286, 0.09384095146140958, 0.07523415669070654]}, "mutation_prompt": null}
{"id": "343ca206-64ec-4d49-a92a-51676342f07a", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n        self.mutation_scaling = 0.5\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < 0.5:  # PSO update\n                for i in range(self.population_size):\n                    fitness = func(self.particles[i])\n                    if fitness < self.global_best_fitness:\n                        self.global_best = self.particles[i].copy()\n                        self.global_best_fitness = fitness\n                    pbest = self.particles[i].copy()\n                    if fitness < func(pbest):\n                        pbest = self.particles[i].copy()\n                    inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                    cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                    social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                    self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                    self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                    self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n            else:  # DE update\n                for i in range(self.population_size):\n                    idxs = np.random.choice(list(range(self.population_size)), 3, replace=False)\n                    mutant = self.particles[idxs[0]] + self.mutation_scaling * (self.particles[idxs[1]] - self.particles[idxs[2]])\n                    crossover = np.random.rand(self.dim) < 0.9\n                    trial = mutant * crossover + self.particles[i] * ~crossover\n                    if func(trial) < func(self.particles[i]):\n                        self.particles[i] = trial.copy()\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n        return self.global_best", "name": "ImprovedHybridPSODE", "description": "Enhancing exploration in Differential Evolution by incorporating a novel mutation mechanism that adapts the scaling factor based on population diversity.", "configspace": "", "generation": 25, "fitness": 0.23089291740496842, "feedback": "The algorithm ImprovedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "d8e61447-30b6-4633-a362-150ad387bb4f", "metadata": {"aucs": [0.4675196307600147, 0.4862426057921898, 0.5371285878113784, 0.5133494413327593, 0.5202085773264572, 0.5185215712606559, 0.5365159638675958, 0.4841101286535593, 0.4738618357693488, 0.1639782742602962, 0.19276746282970758, 0.19145253060981504, 0.13871591283690343, 0.216503550660474, 0.1661163509738801, 0.06083096399456012, 0.20018575303153574, 0.19139854780036114, 0.10870784298388914, 0.12747591301789996, 0.1418947903842258, 0.11781882549054423, 0.09046294369603525, 0.10118980801193067, 0.08880371305155876, 0.08189093820254278, 0.13412557134205783, 0.08770232699007263, 0.09039081341374189, 0.0636713383275701, 0.11549194844262378, 0.10737647403937278, 0.07977988565660199, 0.09576780849481326, 0.09414459356662119, 0.10158895406845714, 0.9163001294018103, 0.8828630350700714, 0.9107076664359371, 0.9060756519537913, 0.8823011691200592, 0.8969825732918569, 0.8945919547508163, 0.9283988363492737, 0.878391946266721, 0.28638981779382433, 0.24010009000146337, 0.2924554140790777, 0.29025586309176865, 0.15132753733071092, 0.27788830954013233, 0.2575483753323037, 0.2971437864607712, 0.2926341674839621, 0.3152766142289841, 0.20520930228778134, 0.6803543420466895, 0.27172368046433426, 0.5285867859702967, 0.310270503807468, 0.26584810898300126, 0.4762025011655172, 0.3140014094200785, 0.19828010719961642, 0.17519638584716068, 0.22617407892192332, 0.16400342603906104, 0.24090293444939148, 0.13901541054686006, 0.16705870205518458, 0.1197187846895118, 0.20366447634634688, 0.1623950794950133, 0.1724592236192115, 0.18834726481491715, 0.21055245189844274, 0.17647684850711298, 0.12714236518035504, 0.18119277378700693, 0.2062397325433769, 0.2141996472086033, 0.005164250483408406, 0.03518162796783875, 0.03309604238219177, 0.005755913820709058, 0.02339566471267085, 0.020940570198288655, 0.026970939800211258, 0.05421378080229866, 0.002892058064652314, 0.12479513932750619, 0.09895900362430188, 0.11060576943243994, 0.03385835115225522, 0.041372130620748626, 0.04292425788291654, 0.150570849294568, 0.12708758437081602, 0.12801692269668985, 0.0034506526491919765, 0.0041735837713317014, 0.021158579834684832, 0.009903508332845923, 0.017051346185882332, 9.999999999998899e-05, 9.999999999998899e-05, 0.010605576747952927, 0.05320942294652964, 0.10436709893556328, 0.09862943205496322, 0.1187122693747853, 0.07999051790801437, 0.1006062236754528, 0.06715380877442689, 0.12552115622479454, 0.12272915930069284, 0.0759775899530366, 0.440716300474687, 0.4153302777006138, 0.4125267943153498, 0.38636211796095277, 0.42107864172186493, 0.431366662140826, 0.4145911801639275, 0.4208357367884491, 0.4773944771387182, 0.10030097025156315, 0.10949686291952732, 0.08374469382879002, 0.09064622190869998, 0.10423391830579531, 0.08519136901236357, 0.10863010897144543, 0.10042140606222671, 0.11260021063204617, 0.1821470361602222, 0.23997004786447218, 0.2510961989174464, 0.20790830223297319, 0.2626536850632111, 0.24454582991924922, 0.28500398229452695, 0.29285130135306003, 0.2438199050640425, 0.24178090675384578, 0.29552326317322786, 0.28067294451055236, 0.28648490273991234, 0.2867599352662714, 0.2934663833864919, 0.22108620254304, 0.3089575212420762, 0.2325838504281964, 0.2071155528735925, 0.18197406892741985, 0.16336565939920877, 0.21161410479386644, 0.21458980846466225, 0.1397515809315777, 0.17292798059833803, 0.2500627730730395, 0.0879070205946757, 0.2465508792286678, 0.2874008271810927, 0.19990094388884183, 0.22514960729673728, 0.23698476224764742, 0.19252372212873714, 0.21820482168626032, 0.19748887941565652, 0.23299438516376025, 0.1823103252299928, 0.20957501447919846, 0.19350054245052584, 0.18888231412403267, 0.18679412142201102, 0.20598783256610853, 0.20947495472983624, 0.19567045971020935, 0.2115152160965108, 0.18490655635242614, 0.18653532497982495, 0.15207431032957452, 0.6514781298465093, 0.19715343864065493, 0.19633518714568632, 0.15620689740462845, 0.2095115192477297, 0.1767396038694149, 0.507377181124353, 0.20638635020174667, 0.5950753840481402, 0.5862991223446492, 0.5780127097930619, 0.5350611668330107, 0.09361798986764314, 0.15450016857516824, 0.10373160695767691, 0.19023964380184022, 0.1984977890422368, 0.18754244701764178, 0.18895045739864136, 0.1846128125826716, 0.18590527445878013, 0.1929575334115825, 0.19940108982604987, 0.1849543073500004, 0.08286313620401875, 0.09705094178360485, 0.08560300465543791, 0.07315077262946379, 0.0901984100698906, 0.09347656318960362, 0.08460768509051286, 0.09384095146140958, 0.07523415669070654]}, "mutation_prompt": null}
{"id": "23f08cd9-f184-4e6d-b4e5-0b382b6137b3", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n       \n            if np.random.rand() < 0.5:  # PSO update\n                for i in range(self.population_size):\n                    fitness = func(self.particles[i])\n                    if fitness < self.global_best_fitness:\n                        self.global_best = self.particles[i].copy()\n                        self.global_best_fitness = fitness\n                    pbest = self.particles[i].copy()\n                    if fitness < func(pbest):\n                        pbest = self.particles[i].copy()\n                    inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                    cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                    social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                    self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                    self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                    self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                    \n            else:  # DE update\n                for i in range(self.population_size):\n                    idxs = np.random.choice(list(range(self.population_size)), 3, replace=False)\n                    mutant = self.particles[idxs[0]] + (np.random.rand(self.dim) * 2 - 1) * (self.particles[idxs[1]] - self.particles[idxs[2]])\n                    crossover = np.random.rand(self.dim) < 0.8\n                    trial = mutant * crossover + self.particles[i] * ~crossover\n                    if func(trial) < func(self.particles[i]):\n                        self.particles[i] = trial.copy()\n\n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing global exploration and exploitation by dynamically adjusting the population size and mutation probability in Differential Evolution.", "configspace": "", "generation": 26, "fitness": 0.21386868798299286, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.18.", "error": "", "parent_id": "d8e61447-30b6-4633-a362-150ad387bb4f", "metadata": {"aucs": [0.4397822896529021, 0.4178821489292114, 0.4463134647535635, 0.4032680280939619, 0.4190779884820883, 0.4351366784221541, 0.4513996941176618, 0.4313259937111754, 0.4192175511882369, 0.12674494572671935, 0.0847129220347993, 0.0809946630025985, 0.07800969135825742, 0.05153364384445125, 0.09213684036713188, 0.0903097898496773, 0.09139308044410277, 0.05792012798559665, 0.10844312928121491, 0.10074108045906993, 0.09726636777976183, 0.09953644409104379, 0.10829076835517715, 0.09953578454861522, 0.1252569084013334, 0.09947766295221205, 0.09593082695303234, 0.07595606009595324, 0.08537640733116314, 0.09351006917639293, 0.09682399740560033, 0.09640229004704215, 0.10096432168593406, 0.10290174936357832, 0.09876242569763638, 0.0984100186501593, 0.8296233633354297, 0.9004409523433559, 0.8611413445854758, 0.8397713638868604, 0.8787505776764413, 0.8583648398362926, 0.8492084111198891, 0.8863926100153651, 0.8589379877911484, 0.25799405562875277, 0.28148905744314767, 0.25704729087101297, 0.28411711078875956, 0.25160533046141675, 0.25162848956968287, 0.23111086750253418, 0.24589599696179187, 0.26571116897289826, 0.29066795411151314, 0.21211089498314173, 0.3002404052948101, 0.36713723845746193, 0.27660318747046364, 0.31736171556883985, 0.21265192524011023, 0.3210705960254978, 0.29592296026427134, 0.191477254711506, 0.17585017997559094, 0.13650313422561322, 0.1860445248791952, 0.14222670988028185, 0.25273320363288587, 0.15677629562069018, 0.1473694539404351, 0.1464465709401377, 0.16234667079159748, 0.11726756953609352, 0.11802848940193855, 0.1646066072405652, 0.16424837455269592, 0.1558865712198496, 0.09630401093343077, 0.11611760174043739, 0.11994952548154014, 0.02168737204596749, 9.999999999998899e-05, 0.033227720686073714, 0.05344611186791226, 9.999999999998899e-05, 0.01551958134807574, 0.00024316975316485134, 9.999999999998899e-05, 0.021823496990887592, 0.144594573716199, 0.15666152601864358, 0.12077939984185992, 0.06725024494086607, 0.011526078906007542, 0.06553486401733122, 0.15553939518836246, 0.07631770441453412, 0.0947418158327078, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010865160540066698, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019983446370405167, 0.0011579980573794835, 0.08890527519793578, 0.06919218890520185, 0.11159910121490135, 0.07480553154884384, 0.10772061800434929, 0.10351815450448432, 0.08293733270031223, 0.13395672063012465, 0.06485293773928391, 0.41252171432232965, 0.37882011264031357, 0.3966079245960946, 0.387545796592359, 0.3883735669106885, 0.3931622707182194, 0.3921409702379153, 0.37651196000324694, 0.41920806254107756, 0.0692227730130417, 0.09796791045206843, 0.07771963101195689, 0.09166945898950019, 0.1082998470326797, 0.10388213625060394, 0.0933218806529027, 0.08939049122651122, 0.07781732634681537, 0.22238315152202626, 0.2801192748638952, 0.15657197748825769, 0.22813869659843933, 0.2458105951415357, 0.16774182692833983, 0.16783402132339542, 0.1783128437784971, 0.20893010472017737, 0.218295041488496, 0.2777176373056873, 0.27790040164000207, 0.26771942338431687, 0.2235303889476251, 0.28790815874378795, 0.23850250787046712, 0.30406891536034975, 0.2642679193398354, 0.17778927135135802, 0.21461076349948005, 0.16951845385912223, 0.20091171265123164, 0.2184601372701721, 0.20854030632314813, 0.20208471247616122, 0.2222180480742938, 0.18610254003360505, 0.2248357774312778, 0.22381977985227597, 0.19769777402907807, 0.2044844106662661, 0.22121790114044537, 0.22487714525541724, 0.23243476343378233, 0.2032840562816024, 0.20955559840561877, 0.18254287522460821, 0.19149550192244225, 0.18431593685601855, 0.1777655787475957, 0.20139231174718786, 0.1809459097185414, 0.18817280352880683, 0.1700506520739138, 0.1831078486980675, 0.6850439131216058, 0.1834336784538434, 0.18283400573449848, 0.648111963994819, 0.5690852425871884, 0.19372421390526828, 0.15900807273362427, 0.16650961739253634, 0.17296329359586182, 0.5278453985565532, 0.5048564353589498, 0.4177729828220649, 0.20325356598239286, 0.20559478029695177, 0.22032999488394645, 0.10398526055005353, 0.5118491296802363, 0.4185254296124371, 0.1862248901556952, 0.17395205582391993, 0.18804619050464766, 0.1860831699559109, 0.17963402182600474, 0.1793657543886349, 0.1829907236792716, 0.18146763304415992, 0.185344868858063, 0.09047383235928352, 0.08378086472849866, 0.09681302235377554, 0.07851799807908699, 0.08898180161605962, 0.10272655425954491, 0.08687404474069627, 0.07842797798830037, 0.08358485625458179]}, "mutation_prompt": null}
{"id": "c653fda6-89ae-4586-a7e3-ae24facb5589", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < 0.5:  # PSO update\n                for i in range(self.population_size):\n                    fitness = func(self.particles[i])\n                    if fitness < self.global_best_fitness:\n                        self.global_best = self.particles[i].copy()\n                        self.global_best_fitness = fitness\n                    pbest = self.particles[i].copy()\n                    if fitness < func(pbest):\n                        pbest = self.particles[i].copy()\n                    inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                    cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                    social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                    self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                    self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                    self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                    \n            else:  # DE update with enhanced mutation\n                for i in range(self.population_size):\n                    idxs = np.random.choice(list(range(self.population_size)), 5, replace=False)  # Increased mutation size\n                    mutant = self.particles[idxs[0]] + 0.5 * (self.particles[idxs[1]] - self.particles[idxs[2]) + 0.5 * (self.particles[idxs[3]] - self.particles[idxs[4]))  # Enhanced mutation\n                    crossover = np.random.rand(self.dim) < 0.9\n                    trial = mutant * crossover + self.particles[i] * ~crossover\n                    if func(trial) < func(self.particles[i]):\n                        self.particles[i] = trial.copy()\n\n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing exploration by incorporating a mutation operator that explores beyond the current population's boundaries.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 37, 111, '                    mutant = self.particles[idxs[0]] + 0.5 * (self.particles[idxs[1]] - self.particles[idxs[2]) + 0.5 * (self.particles[idxs[3]] - self.particles[idxs[4]))  # Enhanced mutation')).", "error": "SyntaxError(\"closing parenthesis ')' does not match opening parenthesis '['\", ('<string>', 37, 111, '                    mutant = self.particles[idxs[0]] + 0.5 * (self.particles[idxs[1]] - self.particles[idxs[2]) + 0.5 * (self.particles[idxs[3]] - self.particles[idxs[4]))  # Enhanced mutation'))", "parent_id": "d8e61447-30b6-4633-a362-150ad387bb4f", "metadata": {}, "mutation_prompt": null}
{"id": "d693ed57-4285-4e8a-8560-9e2b9fb8bd85", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < 0.5:  # PSO update\n                for i in range(self.population_size):\n                    fitness = func(self.particles[i])\n                    if fitness < self.global_best_fitness:\n                        self.global_best = self.particles[i].copy()\n                        self.global_best_fitness = fitness\n                    pbest = self.particles[i].copy()\n                    if fitness < func(pbest):\n                        pbest = self.particles[i].copy()\n                    inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                    cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                    social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                    self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                    self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                    self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                    \n            else:  # DE update with adaptive mutation\n                for i in range(self.population_size):\n                    idxs = np.random.choice(list(range(self.population_size)), 3, replace=False)\n                    mutant = self.particles[idxs[0]] + 0.5 * (self.particles[idxs[1]] - self.particles[idxs[2]])\n                    scale_factor = 0.5 + 0.5 * np.exp(-2.0*t/self.budget)\n                    crossover = np.random.rand(self.dim) < scale_factor\n                    trial = mutant * crossover + self.particles[i] * ~crossover\n                    if func(trial) < func(self.particles[i]):\n                        self.particles[i] = trial.copy()\n\n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhancing exploration by integrating a novel adaptive mutation strategy in Differential Evolution while maintaining Particle Swarm Optimization's convergence speed.", "configspace": "", "generation": 28, "fitness": 0.23598754783009823, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "d8e61447-30b6-4633-a362-150ad387bb4f", "metadata": {"aucs": [0.488938362875879, 0.5238727928195801, 0.5159753576322533, 0.45153347996441107, 0.5121777668537228, 0.4920443180308868, 0.4923963914775722, 0.5155314338821808, 0.49924681227817325, 0.21190275036128203, 0.21666449364775753, 0.20606147425077947, 0.17232125240710772, 0.16388605378199805, 0.1398972376506199, 0.11109280931152776, 0.015385342989423623, 0.16773669495469257, 0.06147208965355, 0.1205453044616448, 0.12334023724794929, 0.11378329092305306, 0.1011996359548033, 0.10156619187141691, 0.08790691639003856, 0.12844320306393098, 0.09973933926239675, 0.07356916096804855, 0.09642474581922966, 0.07133622435784215, 0.10729908773968688, 0.0840361332313081, 0.06861590669146134, 0.06580939314784029, 0.08516054695629482, 0.08995730659907619, 0.903510096603518, 0.786779844111124, 0.9134260428423414, 0.8455657771287526, 0.8489164329270631, 0.8413571932539001, 0.8208257891588753, 0.7913924257586819, 0.9263261298095108, 0.24851218907240136, 0.29630674493495024, 0.2727011636597082, 0.2776917093703066, 0.29647461004745734, 0.1509738191012573, 0.2453112206646324, 0.254290406836542, 0.2701912784719279, 0.6863872101799137, 0.24940434836933267, 0.7310604436161691, 0.3177859768570884, 0.19170044965341182, 0.3476530346273491, 0.2674996482929739, 0.3425643579807913, 0.2910381805795139, 0.13142838159356707, 0.1740193006453994, 0.118327566425526, 0.16411827200161055, 0.17435363563007322, 0.11319767715130091, 0.18308028682906097, 0.18137757977987312, 0.24829558911398186, 0.1711765702692022, 0.20084850913713048, 0.12945905471607533, 0.20809205684275567, 0.1864022440390879, 0.17619930482807955, 0.1872191892052113, 0.1112958593724539, 0.1425362068200362, 0.0013378461958176713, 0.0023466612591767078, 9.999999999998899e-05, 0.0886002061719664, 0.03126091070584136, 0.10217286277329385, 0.04850523066777168, 0.021641544796594858, 0.07417597515918328, 0.07668965256294757, 0.12453974024711711, 0.10583513444547699, 0.0668330273367288, 0.0678971588051781, 0.12853144120218385, 0.15929948897605906, 0.1373336991210139, 0.08829778841618241, 9.999999999998899e-05, 9.999999999998899e-05, 0.007262328070015256, 0.0022216035884096152, 0.03114848591310715, 0.0398395423929464, 0.01635025233723353, 0.0254133478620433, 0.014310563636823481, 0.10918152452033592, 0.11866449102788523, 0.1330035053699783, 0.07041538054277974, 0.1084456330511594, 0.1255414199725654, 0.10812685299894365, 0.13892383317307555, 0.07560488430871426, 0.4139556842044244, 0.41669877045400183, 0.45869847942330955, 0.39559479515813867, 0.43875491102585107, 0.4751891886712405, 0.4199777991320153, 0.42797458810409894, 0.4467924025775535, 0.06857863174512457, 0.0867991097177595, 0.10268981327229776, 0.11117544008843727, 0.11724194570492508, 0.10292478974107888, 0.15111812421135729, 0.1163522359239254, 0.09763738420717838, 0.20335862398443827, 0.21477597423476957, 0.2642263595418305, 0.24754709441256562, 0.26391787547622436, 0.23487390246674578, 0.2242537569440186, 0.20907567054660248, 0.26360989854004835, 0.20874162263262785, 0.28422542986111543, 0.2016880021271248, 0.28950816139789737, 0.2967724109154193, 0.30077670829901915, 0.24067257641509887, 0.30569767511428203, 0.15290630372381164, 0.1419950616335478, 0.1859410213931818, 0.17092687460745404, 0.22301927476548222, 0.18603343310827503, 0.19810653039787018, 0.18238359346524935, 0.22306428330711014, 0.2231065946587384, 0.21254980020752545, 0.21671743345671068, 0.23180084226322906, 0.19578455902534353, 0.23619567873577973, 0.22497669482308502, 0.24617546837022608, 0.20575584273616987, 0.2115630985551321, 0.2136807710789298, 0.23091542939580822, 0.19753077138639963, 0.22472149528743002, 0.19491367228287082, 0.19567716328918272, 0.17906272213280594, 0.2322993550974919, 0.21144764517085202, 0.7315206173983717, 0.18667953818112593, 0.7653689990987222, 0.6710046684411808, 0.1974383575519637, 0.1948637521373625, 0.14963296321394792, 0.16890039700535375, 0.8029043035555923, 0.44292169374807755, 0.6172631378279338, 0.5951733337726305, 0.2074617958309386, 0.16658598580649409, 0.5913103169845075, 0.10438119442249938, 0.5462116742863523, 0.10413685076016532, 0.19238013645999952, 0.19074585278234835, 0.1696954906130188, 0.1748253659591582, 0.20484833752224207, 0.17722771226297596, 0.19235132111594078, 0.1799698463703755, 0.1901155978393837, 0.0748274768408499, 0.09552501005232739, 0.07625196875300722, 0.07923027367660429, 0.09186615212450155, 0.08606496366845318, 0.10988135769204166, 0.0746001772542848, 0.0740210942343631]}, "mutation_prompt": null}
{"id": "a84096e1-b44f-4286-b069-24e9a08ca54f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < 0.5:  # PSO update\n                for i in range(self.population_size):\n                    fitness = func(self.particles[i])\n                    if fitness < self.global_best_fitness:\n                        self.global_best = self.particles[i].copy()\n                        self.global_best_fitness = fitness\n                    pbest = self.particles[i].copy()\n                    if fitness < func(pbest):\n                        pbest = self.particles[i].copy()\n                    inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                    cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                    social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                    self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                    self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                    self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                    \n            else:  # DE update with adaptive mutation\n                for i in range(self.population_size):\n                    idxs = np.random.choice(list(range(self.population_size)), 3, replace=False)\n                    mutant = self.particles[idxs[0]] + 0.5 * (self.particles[idxs[1]] - self.particles[idxs[2]])\n                    scale_factor = 0.5 + 0.5 * np.exp(-2.0*t/self.budget)\n                    crossover = np.random.rand(self.dim) < scale_factor\n                    trial = mutant * crossover + self.particles[i] * ~crossover\n                    if func(trial) < func(self.particles[i]):\n                        self.particles[i] = trial.copy()\n\n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhancing exploration by integrating a novel adaptive mutation strategy in Differential Evolution while maintaining Particle Swarm Optimization's convergence speed.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d693ed57-4285-4e8a-8560-9e2b9fb8bd85", "metadata": {"aucs": [0.488938362875879, 0.5238727928195801, 0.5159753576322533, 0.45153347996441107, 0.5121777668537228, 0.4920443180308868, 0.4923963914775722, 0.5155314338821808, 0.49924681227817325, 0.21190275036128203, 0.21666449364775753, 0.20606147425077947, 0.17232125240710772, 0.16388605378199805, 0.1398972376506199, 0.11109280931152776, 0.015385342989423623, 0.16773669495469257, 0.06147208965355, 0.1205453044616448, 0.12334023724794929, 0.11378329092305306, 0.1011996359548033, 0.10156619187141691, 0.08790691639003856, 0.12844320306393098, 0.09973933926239675, 0.07356916096804855, 0.09642474581922966, 0.07133622435784215, 0.10729908773968688, 0.0840361332313081, 0.06861590669146134, 0.06580939314784029, 0.08516054695629482, 0.08995730659907619, 0.903510096603518, 0.786779844111124, 0.9134260428423414, 0.8455657771287526, 0.8489164329270631, 0.8413571932539001, 0.8208257891588753, 0.7913924257586819, 0.9263261298095108, 0.24851218907240136, 0.29630674493495024, 0.2727011636597082, 0.2776917093703066, 0.29647461004745734, 0.1509738191012573, 0.2453112206646324, 0.254290406836542, 0.2701912784719279, 0.6863872101799137, 0.24940434836933267, 0.7310604436161691, 0.3177859768570884, 0.19170044965341182, 0.3476530346273491, 0.2674996482929739, 0.3425643579807913, 0.2910381805795139, 0.13142838159356707, 0.1740193006453994, 0.118327566425526, 0.16411827200161055, 0.17435363563007322, 0.11319767715130091, 0.18308028682906097, 0.18137757977987312, 0.24829558911398186, 0.1711765702692022, 0.20084850913713048, 0.12945905471607533, 0.20809205684275567, 0.1864022440390879, 0.17619930482807955, 0.1872191892052113, 0.1112958593724539, 0.1425362068200362, 0.0013378461958176713, 0.0023466612591767078, 9.999999999998899e-05, 0.0886002061719664, 0.03126091070584136, 0.10217286277329385, 0.04850523066777168, 0.021641544796594858, 0.07417597515918328, 0.07668965256294757, 0.12453974024711711, 0.10583513444547699, 0.0668330273367288, 0.0678971588051781, 0.12853144120218385, 0.15929948897605906, 0.1373336991210139, 0.08829778841618241, 9.999999999998899e-05, 9.999999999998899e-05, 0.007262328070015256, 0.0022216035884096152, 0.03114848591310715, 0.0398395423929464, 0.01635025233723353, 0.0254133478620433, 0.014310563636823481, 0.10918152452033592, 0.11866449102788523, 0.1330035053699783, 0.07041538054277974, 0.1084456330511594, 0.1255414199725654, 0.10812685299894365, 0.13892383317307555, 0.07560488430871426, 0.4139556842044244, 0.41669877045400183, 0.45869847942330955, 0.39559479515813867, 0.43875491102585107, 0.4751891886712405, 0.4199777991320153, 0.42797458810409894, 0.4467924025775535, 0.06857863174512457, 0.0867991097177595, 0.10268981327229776, 0.11117544008843727, 0.11724194570492508, 0.10292478974107888, 0.15111812421135729, 0.1163522359239254, 0.09763738420717838, 0.20335862398443827, 0.21477597423476957, 0.2642263595418305, 0.24754709441256562, 0.26391787547622436, 0.23487390246674578, 0.2242537569440186, 0.20907567054660248, 0.26360989854004835, 0.20874162263262785, 0.28422542986111543, 0.2016880021271248, 0.28950816139789737, 0.2967724109154193, 0.30077670829901915, 0.24067257641509887, 0.30569767511428203, 0.15290630372381164, 0.1419950616335478, 0.1859410213931818, 0.17092687460745404, 0.22301927476548222, 0.18603343310827503, 0.19810653039787018, 0.18238359346524935, 0.22306428330711014, 0.2231065946587384, 0.21254980020752545, 0.21671743345671068, 0.23180084226322906, 0.19578455902534353, 0.23619567873577973, 0.22497669482308502, 0.24617546837022608, 0.20575584273616987, 0.2115630985551321, 0.2136807710789298, 0.23091542939580822, 0.19753077138639963, 0.22472149528743002, 0.19491367228287082, 0.19567716328918272, 0.17906272213280594, 0.2322993550974919, 0.21144764517085202, 0.7315206173983717, 0.18667953818112593, 0.7653689990987222, 0.6710046684411808, 0.1974383575519637, 0.1948637521373625, 0.14963296321394792, 0.16890039700535375, 0.8029043035555923, 0.44292169374807755, 0.6172631378279338, 0.5951733337726305, 0.2074617958309386, 0.16658598580649409, 0.5913103169845075, 0.10438119442249938, 0.5462116742863523, 0.10413685076016532, 0.19238013645999952, 0.19074585278234835, 0.1696954906130188, 0.1748253659591582, 0.20484833752224207, 0.17722771226297596, 0.19235132111594078, 0.1799698463703755, 0.1901155978393837, 0.0748274768408499, 0.09552501005232739, 0.07625196875300722, 0.07923027367660429, 0.09186615212450155, 0.08606496366845318, 0.10988135769204166, 0.0746001772542848, 0.0740210942343631]}, "mutation_prompt": null}
{"id": "eda5c98c-7bb2-49bc-be47-4032b3c19589", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < 0.5:  # PSO update\n                for i in range(self.population_size):\n                    fitness = func(self.particles[i])\n                    if fitness < self.global_best_fitness:\n                        self.global_best = self.particles[i].copy()\n                        self.global_best_fitness = fitness\n                    pbest = self.particles[i].copy()\n                    if fitness < func(pbest):\n                        pbest = self.particles[i].copy()\n                    inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                    cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                    social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                    self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                    self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                    self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                    \n            else:  # DE update with adaptive mutation\n                for i in range(self.population_size):\n                    idxs = np.random.choice(list(range(self.population_size)), 3, replace=False)\n                    mutant = self.particles[idxs[0]] + 0.5 * (self.particles[idxs[1]] - self.particles[idxs[2]])\n                    scale_factor = 0.5 + 0.5 * np.exp(-2.0*t/self.budget)\n                    crossover = np.random.rand(self.dim) < scale_factor\n                    trial = mutant * crossover + self.particles[i] * ~crossover\n                    if func(trial) < func(self.particles[i]):\n                        self.particles[i] = trial.copy()\n\n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhancing exploration by integrating a novel adaptive mutation strategy in Differential Evolution while maintaining Particle Swarm Optimization's convergence speed.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d693ed57-4285-4e8a-8560-9e2b9fb8bd85", "metadata": {"aucs": [0.488938362875879, 0.5238727928195801, 0.5159753576322533, 0.45153347996441107, 0.5121777668537228, 0.4920443180308868, 0.4923963914775722, 0.5155314338821808, 0.49924681227817325, 0.21190275036128203, 0.21666449364775753, 0.20606147425077947, 0.17232125240710772, 0.16388605378199805, 0.1398972376506199, 0.11109280931152776, 0.015385342989423623, 0.16773669495469257, 0.06147208965355, 0.1205453044616448, 0.12334023724794929, 0.11378329092305306, 0.1011996359548033, 0.10156619187141691, 0.08790691639003856, 0.12844320306393098, 0.09973933926239675, 0.07356916096804855, 0.09642474581922966, 0.07133622435784215, 0.10729908773968688, 0.0840361332313081, 0.06861590669146134, 0.06580939314784029, 0.08516054695629482, 0.08995730659907619, 0.903510096603518, 0.786779844111124, 0.9134260428423414, 0.8455657771287526, 0.8489164329270631, 0.8413571932539001, 0.8208257891588753, 0.7913924257586819, 0.9263261298095108, 0.24851218907240136, 0.29630674493495024, 0.2727011636597082, 0.2776917093703066, 0.29647461004745734, 0.1509738191012573, 0.2453112206646324, 0.254290406836542, 0.2701912784719279, 0.6863872101799137, 0.24940434836933267, 0.7310604436161691, 0.3177859768570884, 0.19170044965341182, 0.3476530346273491, 0.2674996482929739, 0.3425643579807913, 0.2910381805795139, 0.13142838159356707, 0.1740193006453994, 0.118327566425526, 0.16411827200161055, 0.17435363563007322, 0.11319767715130091, 0.18308028682906097, 0.18137757977987312, 0.24829558911398186, 0.1711765702692022, 0.20084850913713048, 0.12945905471607533, 0.20809205684275567, 0.1864022440390879, 0.17619930482807955, 0.1872191892052113, 0.1112958593724539, 0.1425362068200362, 0.0013378461958176713, 0.0023466612591767078, 9.999999999998899e-05, 0.0886002061719664, 0.03126091070584136, 0.10217286277329385, 0.04850523066777168, 0.021641544796594858, 0.07417597515918328, 0.07668965256294757, 0.12453974024711711, 0.10583513444547699, 0.0668330273367288, 0.0678971588051781, 0.12853144120218385, 0.15929948897605906, 0.1373336991210139, 0.08829778841618241, 9.999999999998899e-05, 9.999999999998899e-05, 0.007262328070015256, 0.0022216035884096152, 0.03114848591310715, 0.0398395423929464, 0.01635025233723353, 0.0254133478620433, 0.014310563636823481, 0.10918152452033592, 0.11866449102788523, 0.1330035053699783, 0.07041538054277974, 0.1084456330511594, 0.1255414199725654, 0.10812685299894365, 0.13892383317307555, 0.07560488430871426, 0.4139556842044244, 0.41669877045400183, 0.45869847942330955, 0.39559479515813867, 0.43875491102585107, 0.4751891886712405, 0.4199777991320153, 0.42797458810409894, 0.4467924025775535, 0.06857863174512457, 0.0867991097177595, 0.10268981327229776, 0.11117544008843727, 0.11724194570492508, 0.10292478974107888, 0.15111812421135729, 0.1163522359239254, 0.09763738420717838, 0.20335862398443827, 0.21477597423476957, 0.2642263595418305, 0.24754709441256562, 0.26391787547622436, 0.23487390246674578, 0.2242537569440186, 0.20907567054660248, 0.26360989854004835, 0.20874162263262785, 0.28422542986111543, 0.2016880021271248, 0.28950816139789737, 0.2967724109154193, 0.30077670829901915, 0.24067257641509887, 0.30569767511428203, 0.15290630372381164, 0.1419950616335478, 0.1859410213931818, 0.17092687460745404, 0.22301927476548222, 0.18603343310827503, 0.19810653039787018, 0.18238359346524935, 0.22306428330711014, 0.2231065946587384, 0.21254980020752545, 0.21671743345671068, 0.23180084226322906, 0.19578455902534353, 0.23619567873577973, 0.22497669482308502, 0.24617546837022608, 0.20575584273616987, 0.2115630985551321, 0.2136807710789298, 0.23091542939580822, 0.19753077138639963, 0.22472149528743002, 0.19491367228287082, 0.19567716328918272, 0.17906272213280594, 0.2322993550974919, 0.21144764517085202, 0.7315206173983717, 0.18667953818112593, 0.7653689990987222, 0.6710046684411808, 0.1974383575519637, 0.1948637521373625, 0.14963296321394792, 0.16890039700535375, 0.8029043035555923, 0.44292169374807755, 0.6172631378279338, 0.5951733337726305, 0.2074617958309386, 0.16658598580649409, 0.5913103169845075, 0.10438119442249938, 0.5462116742863523, 0.10413685076016532, 0.19238013645999952, 0.19074585278234835, 0.1696954906130188, 0.1748253659591582, 0.20484833752224207, 0.17722771226297596, 0.19235132111594078, 0.1799698463703755, 0.1901155978393837, 0.0748274768408499, 0.09552501005232739, 0.07625196875300722, 0.07923027367660429, 0.09186615212450155, 0.08606496366845318, 0.10988135769204166, 0.0746001772542848, 0.0740210942343631]}, "mutation_prompt": null}
{"id": "37c0e7ad-4ab2-48c4-9598-11375e6842fc", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < 0.5:  # PSO update\n                for i in range(self.population_size):\n                    fitness = func(self.particles[i])\n                    if fitness < self.global_best_fitness:\n                        self.global_best = self.particles[i].copy()\n                        self.global_best_fitness = fitness\n                    pbest = self.particles[i].copy()\n                    if fitness < func(pbest):\n                        pbest = self.particles[i].copy()\n                    inertia_weight = 0.5 + 0.4 * np.exp(-0.5 * t / self.budget)\n                    cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                    social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                    self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                    self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                    self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                    \n            else:  # DE update with adaptive mutation\n                for i in range(self.population_size):\n                    idxs = np.random.choice(list(range(self.population_size)), 3, replace=False)\n                    mutant = self.particles[idxs[0]] + 0.5 * (self.particles[idxs[1]] - self.particles[idxs[2]])\n                    scale_factor = 0.5 + 0.5 * np.exp(-2.0 * t / self.budget)\n                    crossover = np.random.rand(self.dim) < scale_factor\n                    trial = mutant * crossover + self.particles[i] * ~crossover\n                    if func(trial) < func(self.particles[i]):\n                        self.particles[i] = trial.copy()\n\n            # Diversity Maintenance with Dynamic Mutation Adjustment\n            centroid = np.mean(self.particles, axis=0)\n            diversity_factor = np.std(self.particles, axis=0)\n            mutation_rate = 0.5 * np.exp(-t / self.budget)  # Dynamic mutation adjustment\n            for i in range(self.population_size):\n                mutation = np.random.uniform(-mutation_rate * diversity_factor, mutation_rate * diversity_factor, self.dim)\n                self.particles[i] += mutation\n\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Improving exploration and exploitation balance by incorporating a mechanism to dynamically adjust the mutation rate based on population diversity.", "configspace": "", "generation": 31, "fitness": 0.2033613691745336, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.19.", "error": "", "parent_id": "d693ed57-4285-4e8a-8560-9e2b9fb8bd85", "metadata": {"aucs": [0.4074280076479999, 0.386018860470975, 0.413296031667159, 0.40525825545938454, 0.37737874454580655, 0.4005954852159137, 0.3958661017537478, 0.39068640244453623, 0.4384224793212057, 0.07489195469087773, 0.062492421341229565, 0.0432351628357277, 0.042345041140349315, 0.06368018535559572, 0.09450231945158827, 0.0509562158989002, 0.04637842652952162, 0.05845240563611076, 0.09821443177054046, 0.10859989346704735, 0.09881299676874766, 0.11964305474886117, 0.09472827730377487, 0.0854858245208805, 0.11643844084724875, 0.0855533014279205, 0.09933100664921601, 0.0942668009038391, 0.11388122319602623, 0.08601035025927817, 0.09737255252226928, 0.08541267898597782, 0.0755453593426566, 0.07236141365354232, 0.06635798669223969, 0.07869526870573318, 0.9636576986112564, 0.9054635514475768, 0.9275275454216513, 0.942402430125329, 0.9477155827416999, 0.9461780025219503, 0.9245030071185525, 0.90501735124956, 0.931785031519621, 0.24162671610776465, 0.24953379123835395, 0.23449042462491954, 0.24707064117228172, 0.14328444942885543, 0.24887302604386363, 0.25327903687010245, 0.2629984892704864, 0.222752075898476, 0.28523858074857245, 0.3018099414694341, 0.23668504219312458, 0.28515758925199786, 0.3186475485541841, 0.333154521655847, 0.25200210967601655, 0.21261750708079052, 0.32098169235081886, 0.12783052730373345, 0.17527790291801593, 0.12836856913808536, 0.15766020876518327, 0.13375923891544095, 0.12271715954266749, 0.12561525056705813, 0.1659821929408527, 0.13781485850320607, 0.1790364016547623, 0.13636130741524088, 0.15841059689354442, 0.18102077483500356, 0.15412746950998246, 0.14214333384846978, 0.14644855986846128, 0.1554680288285405, 0.17387951606902896, 0.011387292323696063, 9.999999999998899e-05, 0.01828966708948576, 0.015345141622690406, 0.019116151114150992, 9.999999999998899e-05, 9.999999999998899e-05, 0.013697901363268872, 9.999999999998899e-05, 0.06236531758598007, 0.06316692316103323, 0.05614775843850295, 0.07601742451415416, 0.030326667195266, 0.06961239525218843, 0.1050678894541568, 0.05278389679205686, 0.1196061040924764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1080721749286837, 0.08737482516993755, 0.057155013747442585, 0.09720697254766619, 0.07604012760842338, 0.08300136531765379, 0.06997050410252759, 0.09576064003812246, 0.07375672696910551, 0.3866922756808091, 0.3546758235062091, 0.38685000325454044, 0.36394344833827896, 0.37522020435002346, 0.38044978458870105, 0.3601493718749387, 0.37019765739913757, 0.3537776820278917, 0.11336620698411992, 0.07899984900636614, 0.06806828590076597, 0.09962942075387415, 0.12080165820409416, 0.11041707070473439, 0.10907644478198031, 0.10327097400966578, 0.08348538488196133, 0.22257049911014315, 0.19572412545061202, 0.22648166445938855, 0.19385195653247034, 0.2323366023359299, 0.20649228939376396, 0.1890322803985286, 0.2246849540537743, 0.127931660136667, 0.27090868973480375, 0.2179602974152366, 0.16395167169006564, 0.2702686910851312, 0.25691633827246163, 0.2879279844400763, 0.20192930356311445, 0.2525527064624291, 0.24393915991868287, 0.1934649930556014, 0.20944383124959565, 0.15022221935404867, 0.20945725922826364, 0.19766257084768346, 0.17794549303217422, 0.22059607368034706, 0.19562366182652802, 0.20284152206897477, 0.19770279417305936, 0.19726232044552738, 0.18475272044311863, 0.2041559906112338, 0.2471598725123395, 0.24517351756193595, 0.2254982981854916, 0.21201177077602784, 0.20264597863105205, 0.18137081510280517, 0.1915588152473019, 0.2252508702871573, 0.1843587805060487, 0.18047457283223467, 0.18485897095279458, 0.17956143893239385, 0.17957214368255658, 0.17782228670152522, 0.18423732171627882, 0.18371284394728304, 0.18264785821746743, 0.1464774164920325, 0.19469696083351407, 0.5131977753515711, 0.16278183872843588, 0.1988172369192044, 0.11217135970267478, 0.4334690614186456, 0.20407096733133545, 0.42995758524513916, 0.1644591242518071, 0.19798208246790616, 0.49723501913764445, 0.16933049636014874, 0.5030879045588281, 0.4581205849471822, 0.18166412279998545, 0.1659613500393069, 0.18810474040129643, 0.18805731770715706, 0.1715770294489699, 0.17686176853640012, 0.18380290789674614, 0.19331066527225071, 0.19593649979929728, 0.08920444580410858, 0.0883157380269678, 0.09262034381594308, 0.07973500125475697, 0.059015699720127324, 0.0911585058890072, 0.08130556298533542, 0.07305695207327267, 0.08939212446057476]}, "mutation_prompt": null}
{"id": "b2da77c4-4bea-41be-92ea-689864a21b3c", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.min_population_size = 10\n        self.max_population_size = 30\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.min_population_size, self.dim))\n        self.velocities = np.zeros((self.min_population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            self.population_size = int(self.min_population_size + (self.max_population_size - self.min_population_size) * t / self.budget)\n            if self.population_size > self.particles.shape[0]:\n                self.particles = np.vstack((self.particles, np.random.uniform(-5.0, 5.0, (self.population_size - self.particles.shape[0], self.dim))))\n                self.velocities = np.vstack((self.velocities, np.zeros((self.population_size - self.velocities.shape[0], self.dim)))\n            \n            for i in range(self.population_size):\n                fitness = func(self.particles[i])\n                if fitness < self.global_best_fitness:\n                    self.global_best = self.particles[i].copy()\n                    self.global_best_fitness = fitness\n                pbest = self.particles[i].copy()\n                if fitness < func(pbest):\n                    pbest = self.particles[i].copy()\n                if np.random.rand() < 0.5:  # PSO update\n                    inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                    cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                    social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                    self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                    self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                    self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                else:  # DE update with adaptive mutation\n                    idxs = np.random.choice(list(range(self.population_size)), 3, replace=False)\n                    mutant = self.particles[idxs[0]] + 0.5 * (self.particles[idxs[1]] - self.particles[idxs[2]])\n                    scale_factor = 0.5 + 0.5 * np.exp(-2.0*t/self.budget)\n                    crossover = np.random.rand(self.dim) < scale_factor\n                    trial = mutant * crossover + self.particles[i] * ~crossover\n                    if func(trial) < func(self.particles[i]):\n                        self.particles[i] = trial.copy()\n\n            # Diversity Maintenance\n            centroid = np.mean(self.particles[:self.population_size], axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "ImprovedHybridPSODE", "description": "Integrating a dynamic population size control mechanism to adapt the algorithm's exploration and exploitation balance based on diversity and convergence status.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 24, 49, '            for i in range(self.population_size):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 24, 49, '            for i in range(self.population_size):\\n'))", "parent_id": "d693ed57-4285-4e8a-8560-9e2b9fb8bd85", "metadata": {}, "mutation_prompt": null}
{"id": "ac620ef6-d42a-46fa-9d8b-2e9dece9e59e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < 0.5:  # PSO update\n                for i in range(self.population_size):\n                    fitness = func(self.particles[i])\n                    if fitness < self.global_best_fitness:\n                        self.global_best = self.particles[i].copy()\n                        self.global_best_fitness = fitness\n                    pbest = self.particles[i].copy()\n                    if fitness < func(pbest):\n                        pbest = self.particles[i].copy()\n                    inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                    cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                    social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                    self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                    self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                    self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                    \n            else:  # DE update with adaptive mutation\n                for i in range(self.population_size):\n                    idxs = np.random.choice(list(range(self.population_size)), 3, replace=False)\n                    mutant = self.particles[idxs[0]] + 0.5 * (self.particles[idxs[1]] - self.particles[idxs[2]])\n                    scale_factor = 0.5 + 0.5 * np.exp(-2.0*t/self.budget)\n                    crossover = np.random.rand(self.dim) < scale_factor\n                    trial = mutant * crossover + self.particles[i] * ~crossover\n                    if func(trial) < func(self.particles[i]):\n                        self.particles[i] = trial.copy()\n\n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhancing exploration by incorporating a dynamic population resizing strategy to adapt to the problem complexity.", "configspace": "", "generation": 33, "fitness": 0.23598754783009823, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "d693ed57-4285-4e8a-8560-9e2b9fb8bd85", "metadata": {"aucs": [0.488938362875879, 0.5238727928195801, 0.5159753576322533, 0.45153347996441107, 0.5121777668537228, 0.4920443180308868, 0.4923963914775722, 0.5155314338821808, 0.49924681227817325, 0.21190275036128203, 0.21666449364775753, 0.20606147425077947, 0.17232125240710772, 0.16388605378199805, 0.1398972376506199, 0.11109280931152776, 0.015385342989423623, 0.16773669495469257, 0.06147208965355, 0.1205453044616448, 0.12334023724794929, 0.11378329092305306, 0.1011996359548033, 0.10156619187141691, 0.08790691639003856, 0.12844320306393098, 0.09973933926239675, 0.07356916096804855, 0.09642474581922966, 0.07133622435784215, 0.10729908773968688, 0.0840361332313081, 0.06861590669146134, 0.06580939314784029, 0.08516054695629482, 0.08995730659907619, 0.903510096603518, 0.786779844111124, 0.9134260428423414, 0.8455657771287526, 0.8489164329270631, 0.8413571932539001, 0.8208257891588753, 0.7913924257586819, 0.9263261298095108, 0.24851218907240136, 0.29630674493495024, 0.2727011636597082, 0.2776917093703066, 0.29647461004745734, 0.1509738191012573, 0.2453112206646324, 0.254290406836542, 0.2701912784719279, 0.6863872101799137, 0.24940434836933267, 0.7310604436161691, 0.3177859768570884, 0.19170044965341182, 0.3476530346273491, 0.2674996482929739, 0.3425643579807913, 0.2910381805795139, 0.13142838159356707, 0.1740193006453994, 0.118327566425526, 0.16411827200161055, 0.17435363563007322, 0.11319767715130091, 0.18308028682906097, 0.18137757977987312, 0.24829558911398186, 0.1711765702692022, 0.20084850913713048, 0.12945905471607533, 0.20809205684275567, 0.1864022440390879, 0.17619930482807955, 0.1872191892052113, 0.1112958593724539, 0.1425362068200362, 0.0013378461958176713, 0.0023466612591767078, 9.999999999998899e-05, 0.0886002061719664, 0.03126091070584136, 0.10217286277329385, 0.04850523066777168, 0.021641544796594858, 0.07417597515918328, 0.07668965256294757, 0.12453974024711711, 0.10583513444547699, 0.0668330273367288, 0.0678971588051781, 0.12853144120218385, 0.15929948897605906, 0.1373336991210139, 0.08829778841618241, 9.999999999998899e-05, 9.999999999998899e-05, 0.007262328070015256, 0.0022216035884096152, 0.03114848591310715, 0.0398395423929464, 0.01635025233723353, 0.0254133478620433, 0.014310563636823481, 0.10918152452033592, 0.11866449102788523, 0.1330035053699783, 0.07041538054277974, 0.1084456330511594, 0.1255414199725654, 0.10812685299894365, 0.13892383317307555, 0.07560488430871426, 0.4139556842044244, 0.41669877045400183, 0.45869847942330955, 0.39559479515813867, 0.43875491102585107, 0.4751891886712405, 0.4199777991320153, 0.42797458810409894, 0.4467924025775535, 0.06857863174512457, 0.0867991097177595, 0.10268981327229776, 0.11117544008843727, 0.11724194570492508, 0.10292478974107888, 0.15111812421135729, 0.1163522359239254, 0.09763738420717838, 0.20335862398443827, 0.21477597423476957, 0.2642263595418305, 0.24754709441256562, 0.26391787547622436, 0.23487390246674578, 0.2242537569440186, 0.20907567054660248, 0.26360989854004835, 0.20874162263262785, 0.28422542986111543, 0.2016880021271248, 0.28950816139789737, 0.2967724109154193, 0.30077670829901915, 0.24067257641509887, 0.30569767511428203, 0.15290630372381164, 0.1419950616335478, 0.1859410213931818, 0.17092687460745404, 0.22301927476548222, 0.18603343310827503, 0.19810653039787018, 0.18238359346524935, 0.22306428330711014, 0.2231065946587384, 0.21254980020752545, 0.21671743345671068, 0.23180084226322906, 0.19578455902534353, 0.23619567873577973, 0.22497669482308502, 0.24617546837022608, 0.20575584273616987, 0.2115630985551321, 0.2136807710789298, 0.23091542939580822, 0.19753077138639963, 0.22472149528743002, 0.19491367228287082, 0.19567716328918272, 0.17906272213280594, 0.2322993550974919, 0.21144764517085202, 0.7315206173983717, 0.18667953818112593, 0.7653689990987222, 0.6710046684411808, 0.1974383575519637, 0.1948637521373625, 0.14963296321394792, 0.16890039700535375, 0.8029043035555923, 0.44292169374807755, 0.6172631378279338, 0.5951733337726305, 0.2074617958309386, 0.16658598580649409, 0.5913103169845075, 0.10438119442249938, 0.5462116742863523, 0.10413685076016532, 0.19238013645999952, 0.19074585278234835, 0.1696954906130188, 0.1748253659591582, 0.20484833752224207, 0.17722771226297596, 0.19235132111594078, 0.1799698463703755, 0.1901155978393837, 0.0748274768408499, 0.09552501005232739, 0.07625196875300722, 0.07923027367660429, 0.09186615212450155, 0.08606496366845318, 0.10988135769204166, 0.0746001772542848, 0.0740210942343631]}, "mutation_prompt": null}
{"id": "31145752-958d-4f25-883f-981f4a19f1b9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < 0.5:  # PSO update\n                for i in range(self.population_size):\n                    fitness = func(self.particles[i])\n                    if fitness < self.global_best_fitness:\n                        self.global_best = self.particles[i].copy()\n                        self.global_best_fitness = fitness\n                    pbest = self.particles[i].copy()\n                    if fitness < func(pbest):\n                        pbest = self.particles[i].copy()\n                    inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                    cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                    social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                    self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                    self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                    self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                    \n            else:  # DE update with adaptive mutation\n                for i in range(self.population_size):\n                    idxs = np.random.choice(list(range(self.population_size)), 3, replace=False)\n                    mutant = self.particles[idxs[0]] + 0.5 * (self.particles[idxs[1]] - self.particles[idxs[2]])\n                    scale_factor = 0.5 + 0.5 * np.exp(-2.0*t/self.budget)\n                    crossover = np.random.rand(self.dim) < scale_factor\n                    trial = mutant * crossover + self.particles[i] * ~crossover\n                    if func(trial) < func(self.particles[i]):\n                        self.particles[i] = trial.copy()\n\n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhancing exploration by integrating a novel adaptive mutation strategy in Differential Evolution while maintaining Particle Swarm Optimization's convergence speed.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d693ed57-4285-4e8a-8560-9e2b9fb8bd85", "metadata": {"aucs": [0.488938362875879, 0.5238727928195801, 0.5159753576322533, 0.45153347996441107, 0.5121777668537228, 0.4920443180308868, 0.4923963914775722, 0.5155314338821808, 0.49924681227817325, 0.21190275036128203, 0.21666449364775753, 0.20606147425077947, 0.17232125240710772, 0.16388605378199805, 0.1398972376506199, 0.11109280931152776, 0.015385342989423623, 0.16773669495469257, 0.06147208965355, 0.1205453044616448, 0.12334023724794929, 0.11378329092305306, 0.1011996359548033, 0.10156619187141691, 0.08790691639003856, 0.12844320306393098, 0.09973933926239675, 0.07356916096804855, 0.09642474581922966, 0.07133622435784215, 0.10729908773968688, 0.0840361332313081, 0.06861590669146134, 0.06580939314784029, 0.08516054695629482, 0.08995730659907619, 0.903510096603518, 0.786779844111124, 0.9134260428423414, 0.8455657771287526, 0.8489164329270631, 0.8413571932539001, 0.8208257891588753, 0.7913924257586819, 0.9263261298095108, 0.24851218907240136, 0.29630674493495024, 0.2727011636597082, 0.2776917093703066, 0.29647461004745734, 0.1509738191012573, 0.2453112206646324, 0.254290406836542, 0.2701912784719279, 0.6863872101799137, 0.24940434836933267, 0.7310604436161691, 0.3177859768570884, 0.19170044965341182, 0.3476530346273491, 0.2674996482929739, 0.3425643579807913, 0.2910381805795139, 0.13142838159356707, 0.1740193006453994, 0.118327566425526, 0.16411827200161055, 0.17435363563007322, 0.11319767715130091, 0.18308028682906097, 0.18137757977987312, 0.24829558911398186, 0.1711765702692022, 0.20084850913713048, 0.12945905471607533, 0.20809205684275567, 0.1864022440390879, 0.17619930482807955, 0.1872191892052113, 0.1112958593724539, 0.1425362068200362, 0.0013378461958176713, 0.0023466612591767078, 9.999999999998899e-05, 0.0886002061719664, 0.03126091070584136, 0.10217286277329385, 0.04850523066777168, 0.021641544796594858, 0.07417597515918328, 0.07668965256294757, 0.12453974024711711, 0.10583513444547699, 0.0668330273367288, 0.0678971588051781, 0.12853144120218385, 0.15929948897605906, 0.1373336991210139, 0.08829778841618241, 9.999999999998899e-05, 9.999999999998899e-05, 0.007262328070015256, 0.0022216035884096152, 0.03114848591310715, 0.0398395423929464, 0.01635025233723353, 0.0254133478620433, 0.014310563636823481, 0.10918152452033592, 0.11866449102788523, 0.1330035053699783, 0.07041538054277974, 0.1084456330511594, 0.1255414199725654, 0.10812685299894365, 0.13892383317307555, 0.07560488430871426, 0.4139556842044244, 0.41669877045400183, 0.45869847942330955, 0.39559479515813867, 0.43875491102585107, 0.4751891886712405, 0.4199777991320153, 0.42797458810409894, 0.4467924025775535, 0.06857863174512457, 0.0867991097177595, 0.10268981327229776, 0.11117544008843727, 0.11724194570492508, 0.10292478974107888, 0.15111812421135729, 0.1163522359239254, 0.09763738420717838, 0.20335862398443827, 0.21477597423476957, 0.2642263595418305, 0.24754709441256562, 0.26391787547622436, 0.23487390246674578, 0.2242537569440186, 0.20907567054660248, 0.26360989854004835, 0.20874162263262785, 0.28422542986111543, 0.2016880021271248, 0.28950816139789737, 0.2967724109154193, 0.30077670829901915, 0.24067257641509887, 0.30569767511428203, 0.15290630372381164, 0.1419950616335478, 0.1859410213931818, 0.17092687460745404, 0.22301927476548222, 0.18603343310827503, 0.19810653039787018, 0.18238359346524935, 0.22306428330711014, 0.2231065946587384, 0.21254980020752545, 0.21671743345671068, 0.23180084226322906, 0.19578455902534353, 0.23619567873577973, 0.22497669482308502, 0.24617546837022608, 0.20575584273616987, 0.2115630985551321, 0.2136807710789298, 0.23091542939580822, 0.19753077138639963, 0.22472149528743002, 0.19491367228287082, 0.19567716328918272, 0.17906272213280594, 0.2322993550974919, 0.21144764517085202, 0.7315206173983717, 0.18667953818112593, 0.7653689990987222, 0.6710046684411808, 0.1974383575519637, 0.1948637521373625, 0.14963296321394792, 0.16890039700535375, 0.8029043035555923, 0.44292169374807755, 0.6172631378279338, 0.5951733337726305, 0.2074617958309386, 0.16658598580649409, 0.5913103169845075, 0.10438119442249938, 0.5462116742863523, 0.10413685076016532, 0.19238013645999952, 0.19074585278234835, 0.1696954906130188, 0.1748253659591582, 0.20484833752224207, 0.17722771226297596, 0.19235132111594078, 0.1799698463703755, 0.1901155978393837, 0.0748274768408499, 0.09552501005232739, 0.07625196875300722, 0.07923027367660429, 0.09186615212450155, 0.08606496366845318, 0.10988135769204166, 0.0746001772542848, 0.0740210942343631]}, "mutation_prompt": null}
{"id": "96002a0e-91ff-4e50-9420-fc09f085672e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < 0.5:  # PSO update\n                for i in range(self.population_size):\n                    fitness = func(self.particles[i])\n                    if fitness < self.global_best_fitness:\n                        self.global_best = self.particles[i].copy()\n                        self.global_best_fitness = fitness\n                    pbest = self.particles[i].copy()\n                    if fitness < func(pbest):\n                        pbest = self.particles[i].copy()\n                    inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                    cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                    social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                    self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                    self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                    self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                    \n            else:  # DE update with adaptive mutation\n                for i in range(self.population_size):\n                    idxs = np.random.choice(list(range(self.population_size)), 3, replace=False)\n                    mutant = self.particles[idxs[0]] + 0.5 * (self.particles[idxs[1]] - self.particles[idxs[2]])\n                    scale_factor = 0.5 + 0.5 * np.exp(-2.0*t/self.budget)\n                    crossover = np.random.rand(self.dim) < scale_factor\n                    trial = mutant * crossover + self.particles[i] * ~crossover\n                    if func(trial) < func(self.particles[i]):\n                        self.particles[i] = trial.copy()\n\n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhancing exploration by integrating a novel adaptive mutation strategy in Differential Evolution while maintaining Particle Swarm Optimization's convergence speed.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d693ed57-4285-4e8a-8560-9e2b9fb8bd85", "metadata": {"aucs": [0.488938362875879, 0.5238727928195801, 0.5159753576322533, 0.45153347996441107, 0.5121777668537228, 0.4920443180308868, 0.4923963914775722, 0.5155314338821808, 0.49924681227817325, 0.21190275036128203, 0.21666449364775753, 0.20606147425077947, 0.17232125240710772, 0.16388605378199805, 0.1398972376506199, 0.11109280931152776, 0.015385342989423623, 0.16773669495469257, 0.06147208965355, 0.1205453044616448, 0.12334023724794929, 0.11378329092305306, 0.1011996359548033, 0.10156619187141691, 0.08790691639003856, 0.12844320306393098, 0.09973933926239675, 0.07356916096804855, 0.09642474581922966, 0.07133622435784215, 0.10729908773968688, 0.0840361332313081, 0.06861590669146134, 0.06580939314784029, 0.08516054695629482, 0.08995730659907619, 0.903510096603518, 0.786779844111124, 0.9134260428423414, 0.8455657771287526, 0.8489164329270631, 0.8413571932539001, 0.8208257891588753, 0.7913924257586819, 0.9263261298095108, 0.24851218907240136, 0.29630674493495024, 0.2727011636597082, 0.2776917093703066, 0.29647461004745734, 0.1509738191012573, 0.2453112206646324, 0.254290406836542, 0.2701912784719279, 0.6863872101799137, 0.24940434836933267, 0.7310604436161691, 0.3177859768570884, 0.19170044965341182, 0.3476530346273491, 0.2674996482929739, 0.3425643579807913, 0.2910381805795139, 0.13142838159356707, 0.1740193006453994, 0.118327566425526, 0.16411827200161055, 0.17435363563007322, 0.11319767715130091, 0.18308028682906097, 0.18137757977987312, 0.24829558911398186, 0.1711765702692022, 0.20084850913713048, 0.12945905471607533, 0.20809205684275567, 0.1864022440390879, 0.17619930482807955, 0.1872191892052113, 0.1112958593724539, 0.1425362068200362, 0.0013378461958176713, 0.0023466612591767078, 9.999999999998899e-05, 0.0886002061719664, 0.03126091070584136, 0.10217286277329385, 0.04850523066777168, 0.021641544796594858, 0.07417597515918328, 0.07668965256294757, 0.12453974024711711, 0.10583513444547699, 0.0668330273367288, 0.0678971588051781, 0.12853144120218385, 0.15929948897605906, 0.1373336991210139, 0.08829778841618241, 9.999999999998899e-05, 9.999999999998899e-05, 0.007262328070015256, 0.0022216035884096152, 0.03114848591310715, 0.0398395423929464, 0.01635025233723353, 0.0254133478620433, 0.014310563636823481, 0.10918152452033592, 0.11866449102788523, 0.1330035053699783, 0.07041538054277974, 0.1084456330511594, 0.1255414199725654, 0.10812685299894365, 0.13892383317307555, 0.07560488430871426, 0.4139556842044244, 0.41669877045400183, 0.45869847942330955, 0.39559479515813867, 0.43875491102585107, 0.4751891886712405, 0.4199777991320153, 0.42797458810409894, 0.4467924025775535, 0.06857863174512457, 0.0867991097177595, 0.10268981327229776, 0.11117544008843727, 0.11724194570492508, 0.10292478974107888, 0.15111812421135729, 0.1163522359239254, 0.09763738420717838, 0.20335862398443827, 0.21477597423476957, 0.2642263595418305, 0.24754709441256562, 0.26391787547622436, 0.23487390246674578, 0.2242537569440186, 0.20907567054660248, 0.26360989854004835, 0.20874162263262785, 0.28422542986111543, 0.2016880021271248, 0.28950816139789737, 0.2967724109154193, 0.30077670829901915, 0.24067257641509887, 0.30569767511428203, 0.15290630372381164, 0.1419950616335478, 0.1859410213931818, 0.17092687460745404, 0.22301927476548222, 0.18603343310827503, 0.19810653039787018, 0.18238359346524935, 0.22306428330711014, 0.2231065946587384, 0.21254980020752545, 0.21671743345671068, 0.23180084226322906, 0.19578455902534353, 0.23619567873577973, 0.22497669482308502, 0.24617546837022608, 0.20575584273616987, 0.2115630985551321, 0.2136807710789298, 0.23091542939580822, 0.19753077138639963, 0.22472149528743002, 0.19491367228287082, 0.19567716328918272, 0.17906272213280594, 0.2322993550974919, 0.21144764517085202, 0.7315206173983717, 0.18667953818112593, 0.7653689990987222, 0.6710046684411808, 0.1974383575519637, 0.1948637521373625, 0.14963296321394792, 0.16890039700535375, 0.8029043035555923, 0.44292169374807755, 0.6172631378279338, 0.5951733337726305, 0.2074617958309386, 0.16658598580649409, 0.5913103169845075, 0.10438119442249938, 0.5462116742863523, 0.10413685076016532, 0.19238013645999952, 0.19074585278234835, 0.1696954906130188, 0.1748253659591582, 0.20484833752224207, 0.17722771226297596, 0.19235132111594078, 0.1799698463703755, 0.1901155978393837, 0.0748274768408499, 0.09552501005232739, 0.07625196875300722, 0.07923027367660429, 0.09186615212450155, 0.08606496366845318, 0.10988135769204166, 0.0746001772542848, 0.0740210942343631]}, "mutation_prompt": null}
{"id": "d48f67c5-c359-46ec-a8cb-e32f63f6c508", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < 0.5:  # PSO update\n                for i in range(self.population_size):\n                    fitness = func(self.particles[i])\n                    if fitness < self.global_best_fitness:\n                        self.global_best = self.particles[i].copy()\n                        self.global_best_fitness = fitness\n                    pbest = self.particles[i].copy()\n                    if fitness < func(pbest):\n                        pbest = self.particles[i].copy()\n                    inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                    cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                    social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                    self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                    self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                    self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                    \n            else:  # DE update with adaptive mutation\n                for i in range(self.population_size):\n                    idxs = np.random.choice(list(range(self.population_size)), 3, replace=False)\n                    mutant = self.particles[idxs[0]] + 0.5 * (self.particles[idxs[1]] - self.particles[idxs[2]])\n                    scale_factor = 0.5 + 0.5 * np.exp(-2.0*t/self.budget)\n                    crossover = np.random.rand(self.dim) < scale_factor\n                    trial = mutant * crossover + self.particles[i] * ~crossover\n                    if func(trial) < func(self.particles[i]):\n                        self.particles[i] = trial.copy()\n\n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhancing exploration by integrating a novel adaptive mutation strategy in Differential Evolution while maintaining Particle Swarm Optimization's convergence speed.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d693ed57-4285-4e8a-8560-9e2b9fb8bd85", "metadata": {"aucs": [0.488938362875879, 0.5238727928195801, 0.5159753576322533, 0.45153347996441107, 0.5121777668537228, 0.4920443180308868, 0.4923963914775722, 0.5155314338821808, 0.49924681227817325, 0.21190275036128203, 0.21666449364775753, 0.20606147425077947, 0.17232125240710772, 0.16388605378199805, 0.1398972376506199, 0.11109280931152776, 0.015385342989423623, 0.16773669495469257, 0.06147208965355, 0.1205453044616448, 0.12334023724794929, 0.11378329092305306, 0.1011996359548033, 0.10156619187141691, 0.08790691639003856, 0.12844320306393098, 0.09973933926239675, 0.07356916096804855, 0.09642474581922966, 0.07133622435784215, 0.10729908773968688, 0.0840361332313081, 0.06861590669146134, 0.06580939314784029, 0.08516054695629482, 0.08995730659907619, 0.903510096603518, 0.786779844111124, 0.9134260428423414, 0.8455657771287526, 0.8489164329270631, 0.8413571932539001, 0.8208257891588753, 0.7913924257586819, 0.9263261298095108, 0.24851218907240136, 0.29630674493495024, 0.2727011636597082, 0.2776917093703066, 0.29647461004745734, 0.1509738191012573, 0.2453112206646324, 0.254290406836542, 0.2701912784719279, 0.6863872101799137, 0.24940434836933267, 0.7310604436161691, 0.3177859768570884, 0.19170044965341182, 0.3476530346273491, 0.2674996482929739, 0.3425643579807913, 0.2910381805795139, 0.13142838159356707, 0.1740193006453994, 0.118327566425526, 0.16411827200161055, 0.17435363563007322, 0.11319767715130091, 0.18308028682906097, 0.18137757977987312, 0.24829558911398186, 0.1711765702692022, 0.20084850913713048, 0.12945905471607533, 0.20809205684275567, 0.1864022440390879, 0.17619930482807955, 0.1872191892052113, 0.1112958593724539, 0.1425362068200362, 0.0013378461958176713, 0.0023466612591767078, 9.999999999998899e-05, 0.0886002061719664, 0.03126091070584136, 0.10217286277329385, 0.04850523066777168, 0.021641544796594858, 0.07417597515918328, 0.07668965256294757, 0.12453974024711711, 0.10583513444547699, 0.0668330273367288, 0.0678971588051781, 0.12853144120218385, 0.15929948897605906, 0.1373336991210139, 0.08829778841618241, 9.999999999998899e-05, 9.999999999998899e-05, 0.007262328070015256, 0.0022216035884096152, 0.03114848591310715, 0.0398395423929464, 0.01635025233723353, 0.0254133478620433, 0.014310563636823481, 0.10918152452033592, 0.11866449102788523, 0.1330035053699783, 0.07041538054277974, 0.1084456330511594, 0.1255414199725654, 0.10812685299894365, 0.13892383317307555, 0.07560488430871426, 0.4139556842044244, 0.41669877045400183, 0.45869847942330955, 0.39559479515813867, 0.43875491102585107, 0.4751891886712405, 0.4199777991320153, 0.42797458810409894, 0.4467924025775535, 0.06857863174512457, 0.0867991097177595, 0.10268981327229776, 0.11117544008843727, 0.11724194570492508, 0.10292478974107888, 0.15111812421135729, 0.1163522359239254, 0.09763738420717838, 0.20335862398443827, 0.21477597423476957, 0.2642263595418305, 0.24754709441256562, 0.26391787547622436, 0.23487390246674578, 0.2242537569440186, 0.20907567054660248, 0.26360989854004835, 0.20874162263262785, 0.28422542986111543, 0.2016880021271248, 0.28950816139789737, 0.2967724109154193, 0.30077670829901915, 0.24067257641509887, 0.30569767511428203, 0.15290630372381164, 0.1419950616335478, 0.1859410213931818, 0.17092687460745404, 0.22301927476548222, 0.18603343310827503, 0.19810653039787018, 0.18238359346524935, 0.22306428330711014, 0.2231065946587384, 0.21254980020752545, 0.21671743345671068, 0.23180084226322906, 0.19578455902534353, 0.23619567873577973, 0.22497669482308502, 0.24617546837022608, 0.20575584273616987, 0.2115630985551321, 0.2136807710789298, 0.23091542939580822, 0.19753077138639963, 0.22472149528743002, 0.19491367228287082, 0.19567716328918272, 0.17906272213280594, 0.2322993550974919, 0.21144764517085202, 0.7315206173983717, 0.18667953818112593, 0.7653689990987222, 0.6710046684411808, 0.1974383575519637, 0.1948637521373625, 0.14963296321394792, 0.16890039700535375, 0.8029043035555923, 0.44292169374807755, 0.6172631378279338, 0.5951733337726305, 0.2074617958309386, 0.16658598580649409, 0.5913103169845075, 0.10438119442249938, 0.5462116742863523, 0.10413685076016532, 0.19238013645999952, 0.19074585278234835, 0.1696954906130188, 0.1748253659591582, 0.20484833752224207, 0.17722771226297596, 0.19235132111594078, 0.1799698463703755, 0.1901155978393837, 0.0748274768408499, 0.09552501005232739, 0.07625196875300722, 0.07923027367660429, 0.09186615212450155, 0.08606496366845318, 0.10988135769204166, 0.0746001772542848, 0.0740210942343631]}, "mutation_prompt": null}
{"id": "55bd12d1-efe1-4b25-93bb-5827029fecfb", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < 0.5:  # PSO update\n                for i in range(self.population_size):\n                    fitness = func(self.particles[i])\n                    if fitness < self.global_best_fitness:\n                        self.global_best = self.particles[i].copy()\n                        self.global_best_fitness = fitness\n                    pbest = self.particles[i].copy()\n                    if fitness < func(pbest):\n                        pbest = self.particles[i].copy()\n                    inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                    cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                    social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                    self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                    self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                    self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                    \n            else:  # DE update with adaptive mutation\n                for i in range(self.population_size):\n                    idxs = np.random.choice(list(range(self.population_size)), 3, replace=False)\n                    mutant = self.particles[idxs[0]] + 0.5 * (self.particles[idxs[1]] - self.particles[idxs[2]])\n                    scale_factor = 0.5 + 0.5 * np.exp(-2.0*t/self.budget)\n                    crossover = np.random.rand(self.dim) < scale_factor\n                    trial = mutant * crossover + self.particles[i] * ~crossover\n                    if func(trial) < func(self.particles[i]):\n                        self.particles[i] = trial.copy()\n\n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhancing exploration by integrating a novel adaptive mutation strategy in Differential Evolution while maintaining Particle Swarm Optimization's convergence speed.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d693ed57-4285-4e8a-8560-9e2b9fb8bd85", "metadata": {"aucs": [0.488938362875879, 0.5238727928195801, 0.5159753576322533, 0.45153347996441107, 0.5121777668537228, 0.4920443180308868, 0.4923963914775722, 0.5155314338821808, 0.49924681227817325, 0.21190275036128203, 0.21666449364775753, 0.20606147425077947, 0.17232125240710772, 0.16388605378199805, 0.1398972376506199, 0.11109280931152776, 0.015385342989423623, 0.16773669495469257, 0.06147208965355, 0.1205453044616448, 0.12334023724794929, 0.11378329092305306, 0.1011996359548033, 0.10156619187141691, 0.08790691639003856, 0.12844320306393098, 0.09973933926239675, 0.07356916096804855, 0.09642474581922966, 0.07133622435784215, 0.10729908773968688, 0.0840361332313081, 0.06861590669146134, 0.06580939314784029, 0.08516054695629482, 0.08995730659907619, 0.903510096603518, 0.786779844111124, 0.9134260428423414, 0.8455657771287526, 0.8489164329270631, 0.8413571932539001, 0.8208257891588753, 0.7913924257586819, 0.9263261298095108, 0.24851218907240136, 0.29630674493495024, 0.2727011636597082, 0.2776917093703066, 0.29647461004745734, 0.1509738191012573, 0.2453112206646324, 0.254290406836542, 0.2701912784719279, 0.6863872101799137, 0.24940434836933267, 0.7310604436161691, 0.3177859768570884, 0.19170044965341182, 0.3476530346273491, 0.2674996482929739, 0.3425643579807913, 0.2910381805795139, 0.13142838159356707, 0.1740193006453994, 0.118327566425526, 0.16411827200161055, 0.17435363563007322, 0.11319767715130091, 0.18308028682906097, 0.18137757977987312, 0.24829558911398186, 0.1711765702692022, 0.20084850913713048, 0.12945905471607533, 0.20809205684275567, 0.1864022440390879, 0.17619930482807955, 0.1872191892052113, 0.1112958593724539, 0.1425362068200362, 0.0013378461958176713, 0.0023466612591767078, 9.999999999998899e-05, 0.0886002061719664, 0.03126091070584136, 0.10217286277329385, 0.04850523066777168, 0.021641544796594858, 0.07417597515918328, 0.07668965256294757, 0.12453974024711711, 0.10583513444547699, 0.0668330273367288, 0.0678971588051781, 0.12853144120218385, 0.15929948897605906, 0.1373336991210139, 0.08829778841618241, 9.999999999998899e-05, 9.999999999998899e-05, 0.007262328070015256, 0.0022216035884096152, 0.03114848591310715, 0.0398395423929464, 0.01635025233723353, 0.0254133478620433, 0.014310563636823481, 0.10918152452033592, 0.11866449102788523, 0.1330035053699783, 0.07041538054277974, 0.1084456330511594, 0.1255414199725654, 0.10812685299894365, 0.13892383317307555, 0.07560488430871426, 0.4139556842044244, 0.41669877045400183, 0.45869847942330955, 0.39559479515813867, 0.43875491102585107, 0.4751891886712405, 0.4199777991320153, 0.42797458810409894, 0.4467924025775535, 0.06857863174512457, 0.0867991097177595, 0.10268981327229776, 0.11117544008843727, 0.11724194570492508, 0.10292478974107888, 0.15111812421135729, 0.1163522359239254, 0.09763738420717838, 0.20335862398443827, 0.21477597423476957, 0.2642263595418305, 0.24754709441256562, 0.26391787547622436, 0.23487390246674578, 0.2242537569440186, 0.20907567054660248, 0.26360989854004835, 0.20874162263262785, 0.28422542986111543, 0.2016880021271248, 0.28950816139789737, 0.2967724109154193, 0.30077670829901915, 0.24067257641509887, 0.30569767511428203, 0.15290630372381164, 0.1419950616335478, 0.1859410213931818, 0.17092687460745404, 0.22301927476548222, 0.18603343310827503, 0.19810653039787018, 0.18238359346524935, 0.22306428330711014, 0.2231065946587384, 0.21254980020752545, 0.21671743345671068, 0.23180084226322906, 0.19578455902534353, 0.23619567873577973, 0.22497669482308502, 0.24617546837022608, 0.20575584273616987, 0.2115630985551321, 0.2136807710789298, 0.23091542939580822, 0.19753077138639963, 0.22472149528743002, 0.19491367228287082, 0.19567716328918272, 0.17906272213280594, 0.2322993550974919, 0.21144764517085202, 0.7315206173983717, 0.18667953818112593, 0.7653689990987222, 0.6710046684411808, 0.1974383575519637, 0.1948637521373625, 0.14963296321394792, 0.16890039700535375, 0.8029043035555923, 0.44292169374807755, 0.6172631378279338, 0.5951733337726305, 0.2074617958309386, 0.16658598580649409, 0.5913103169845075, 0.10438119442249938, 0.5462116742863523, 0.10413685076016532, 0.19238013645999952, 0.19074585278234835, 0.1696954906130188, 0.1748253659591582, 0.20484833752224207, 0.17722771226297596, 0.19235132111594078, 0.1799698463703755, 0.1901155978393837, 0.0748274768408499, 0.09552501005232739, 0.07625196875300722, 0.07923027367660429, 0.09186615212450155, 0.08606496366845318, 0.10988135769204166, 0.0746001772542848, 0.0740210942343631]}, "mutation_prompt": null}
{"id": "7dbc6822-72bf-41ef-af29-34f61277eba0", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < 0.5:  # PSO update\n                for i in range(self.population_size):\n                    fitness = func(self.particles[i])\n                    if fitness < self.global_best_fitness:\n                        self.global_best = self.particles[i].copy()\n                        self.global_best_fitness = fitness\n                    pbest = self.particles[i].copy()\n                    if fitness < func(pbest):\n                        pbest = self.particles[i].copy()\n                    inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                    cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                    social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                    self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                    self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                    self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                    \n            else:  # DE update with adaptive mutation\n                for i in range(self.population_size):\n                    idxs = np.random.choice(list(range(self.population_size)), 3, replace=False)\n                    mutant = self.particles[idxs[0]] + 0.5 * (self.particles[idxs[1]] - self.particles[idxs[2]])\n                    scale_factor = 0.5 + 0.5 * np.exp(-2.0*t/self.budget)\n                    crossover = np.random.rand(self.dim) < scale_factor\n                    trial = mutant * crossover + self.particles[i] * ~crossover\n                    if func(trial) < func(self.particles[i]):\n                        self.particles[i] = trial.copy()\n\n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "HybridPSODE", "description": "Enhancing exploration by integrating a novel adaptive mutation strategy in Differential Evolution while maintaining Particle Swarm Optimization's convergence speed.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d693ed57-4285-4e8a-8560-9e2b9fb8bd85", "metadata": {"aucs": [0.488938362875879, 0.5238727928195801, 0.5159753576322533, 0.45153347996441107, 0.5121777668537228, 0.4920443180308868, 0.4923963914775722, 0.5155314338821808, 0.49924681227817325, 0.21190275036128203, 0.21666449364775753, 0.20606147425077947, 0.17232125240710772, 0.16388605378199805, 0.1398972376506199, 0.11109280931152776, 0.015385342989423623, 0.16773669495469257, 0.06147208965355, 0.1205453044616448, 0.12334023724794929, 0.11378329092305306, 0.1011996359548033, 0.10156619187141691, 0.08790691639003856, 0.12844320306393098, 0.09973933926239675, 0.07356916096804855, 0.09642474581922966, 0.07133622435784215, 0.10729908773968688, 0.0840361332313081, 0.06861590669146134, 0.06580939314784029, 0.08516054695629482, 0.08995730659907619, 0.903510096603518, 0.786779844111124, 0.9134260428423414, 0.8455657771287526, 0.8489164329270631, 0.8413571932539001, 0.8208257891588753, 0.7913924257586819, 0.9263261298095108, 0.24851218907240136, 0.29630674493495024, 0.2727011636597082, 0.2776917093703066, 0.29647461004745734, 0.1509738191012573, 0.2453112206646324, 0.254290406836542, 0.2701912784719279, 0.6863872101799137, 0.24940434836933267, 0.7310604436161691, 0.3177859768570884, 0.19170044965341182, 0.3476530346273491, 0.2674996482929739, 0.3425643579807913, 0.2910381805795139, 0.13142838159356707, 0.1740193006453994, 0.118327566425526, 0.16411827200161055, 0.17435363563007322, 0.11319767715130091, 0.18308028682906097, 0.18137757977987312, 0.24829558911398186, 0.1711765702692022, 0.20084850913713048, 0.12945905471607533, 0.20809205684275567, 0.1864022440390879, 0.17619930482807955, 0.1872191892052113, 0.1112958593724539, 0.1425362068200362, 0.0013378461958176713, 0.0023466612591767078, 9.999999999998899e-05, 0.0886002061719664, 0.03126091070584136, 0.10217286277329385, 0.04850523066777168, 0.021641544796594858, 0.07417597515918328, 0.07668965256294757, 0.12453974024711711, 0.10583513444547699, 0.0668330273367288, 0.0678971588051781, 0.12853144120218385, 0.15929948897605906, 0.1373336991210139, 0.08829778841618241, 9.999999999998899e-05, 9.999999999998899e-05, 0.007262328070015256, 0.0022216035884096152, 0.03114848591310715, 0.0398395423929464, 0.01635025233723353, 0.0254133478620433, 0.014310563636823481, 0.10918152452033592, 0.11866449102788523, 0.1330035053699783, 0.07041538054277974, 0.1084456330511594, 0.1255414199725654, 0.10812685299894365, 0.13892383317307555, 0.07560488430871426, 0.4139556842044244, 0.41669877045400183, 0.45869847942330955, 0.39559479515813867, 0.43875491102585107, 0.4751891886712405, 0.4199777991320153, 0.42797458810409894, 0.4467924025775535, 0.06857863174512457, 0.0867991097177595, 0.10268981327229776, 0.11117544008843727, 0.11724194570492508, 0.10292478974107888, 0.15111812421135729, 0.1163522359239254, 0.09763738420717838, 0.20335862398443827, 0.21477597423476957, 0.2642263595418305, 0.24754709441256562, 0.26391787547622436, 0.23487390246674578, 0.2242537569440186, 0.20907567054660248, 0.26360989854004835, 0.20874162263262785, 0.28422542986111543, 0.2016880021271248, 0.28950816139789737, 0.2967724109154193, 0.30077670829901915, 0.24067257641509887, 0.30569767511428203, 0.15290630372381164, 0.1419950616335478, 0.1859410213931818, 0.17092687460745404, 0.22301927476548222, 0.18603343310827503, 0.19810653039787018, 0.18238359346524935, 0.22306428330711014, 0.2231065946587384, 0.21254980020752545, 0.21671743345671068, 0.23180084226322906, 0.19578455902534353, 0.23619567873577973, 0.22497669482308502, 0.24617546837022608, 0.20575584273616987, 0.2115630985551321, 0.2136807710789298, 0.23091542939580822, 0.19753077138639963, 0.22472149528743002, 0.19491367228287082, 0.19567716328918272, 0.17906272213280594, 0.2322993550974919, 0.21144764517085202, 0.7315206173983717, 0.18667953818112593, 0.7653689990987222, 0.6710046684411808, 0.1974383575519637, 0.1948637521373625, 0.14963296321394792, 0.16890039700535375, 0.8029043035555923, 0.44292169374807755, 0.6172631378279338, 0.5951733337726305, 0.2074617958309386, 0.16658598580649409, 0.5913103169845075, 0.10438119442249938, 0.5462116742863523, 0.10413685076016532, 0.19238013645999952, 0.19074585278234835, 0.1696954906130188, 0.1748253659591582, 0.20484833752224207, 0.17722771226297596, 0.19235132111594078, 0.1799698463703755, 0.1901155978393837, 0.0748274768408499, 0.09552501005232739, 0.07625196875300722, 0.07923027367660429, 0.09186615212450155, 0.08606496366845318, 0.10988135769204166, 0.0746001772542848, 0.0740210942343631]}, "mutation_prompt": null}
{"id": "e39e2ef9-bbb4-4f7b-9810-9a0bc68c3782", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.max_velocity = 0.5\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.particles = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        self.velocities = np.zeros((self.population_size, self.dim))\n        self.global_best = None\n        self.global_best_fitness = float('inf')\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < 0.5:  # PSO update with local search\n                for i in range(self.population_size):\n                    fitness = func(self.particles[i])\n                    if fitness < self.global_best_fitness:\n                        self.global_best = self.particles[i].copy()\n                        self.global_best_fitness = fitness\n                    pbest = self.particles[i].copy()\n                    if fitness < func(pbest):\n                        pbest = self.particles[i].copy()\n                    inertia_weight = 0.5 + 0.4 * np.exp(-0.5*t/self.budget)\n                    cognitive_component = self.c1 * np.random.rand(self.dim) * (pbest - self.particles[i])\n                    social_component = self.c2 * np.random.rand(self.dim) * (self.global_best - self.particles[i])\n                    self.velocities[i] = inertia_weight * self.velocities[i] + cognitive_component + social_component\n                    self.velocities[i] = np.clip(self.velocities[i], -self.max_velocity, self.max_velocity)\n                    self.particles[i] = np.clip(self.particles[i] + self.velocities[i], -5.0, 5.0)\n                    \n                    # Local Search for exploitation\n                    for j in range(5):  # Perform local search 5 times\n                        delta = np.random.uniform(-0.1, 0.1, self.dim)\n                        candidate = self.particles[i] + delta\n                        if func(candidate) < func(self.particles[i]):\n                            self.particles[i] = candidate.copy()\n                    \n            else:  # DE update with adaptive mutation\n                for i in range(self.population_size):\n                    idxs = np.random.choice(list(range(self.population_size)), 3, replace=False)\n                    mutant = self.particles[idxs[0]] + 0.5 * (self.particles[idxs[1]] - self.particles[idxs[2]])\n                    scale_factor = 0.5 + 0.5 * np.exp(-2.0*t/self.budget)\n                    crossover = np.random.rand(self.dim) < scale_factor\n                    trial = mutant * crossover + self.particles[i] * ~crossover\n                    if func(trial) < func(self.particles[i]):\n                        self.particles[i] = trial.copy()\n\n            # Diversity Maintenance\n            centroid = np.mean(self.particles, axis=0)\n            for i in range(self.population_size):\n                self.particles[i] += 0.03 * (centroid - self.particles[i])\n\n        return self.global_best", "name": "ImprovedHybridPSODE", "description": "Incorporating a novel adaptive local search mechanism to exploit promising regions identified by the global best solution, enhancing the algorithm's exploitation capability.", "configspace": "", "generation": 39, "fitness": 0.18472678478763951, "feedback": "The algorithm ImprovedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.15.", "error": "", "parent_id": "d693ed57-4285-4e8a-8560-9e2b9fb8bd85", "metadata": {"aucs": [0.40041178007645584, 0.40901709060834024, 0.3973023417432514, 0.4154894097468911, 0.35829167283340124, 0.37958999908513036, 0.3974227747246397, 0.39086270525215616, 0.37627217926103196, 0.03419744028002425, 0.05019973717729065, 0.055540452284432607, 0.04939883954482016, 0.02737605996508008, 0.07740260566033963, 0.03367255813023551, 0.05947894329825265, 0.0693096345256572, 0.0637272236800056, 0.08877839248730257, 0.07049083043462745, 0.08249216485744515, 0.12295950235123598, 0.0647320537820597, 0.08712305806587195, 0.08891029433338205, 0.07238620352805358, 0.04482234723993461, 0.07081400314110109, 0.053265629237165046, 0.08749684024107629, 0.06087565810821871, 0.07712501261317395, 0.08121086443203107, 0.04194107193888208, 0.08427041928051948, 0.8144265914482298, 0.27406935009792344, 0.5345067205486593, 0.5894768210898602, 0.7076904249851496, 0.5994744468684952, 0.7030564773893817, 0.5333181478649298, 0.5690973252946447, 0.2405004309486477, 0.2229726561027331, 0.21054724043205086, 0.2297136783272552, 0.21817013373843752, 0.24305543347603775, 0.20357848404604773, 0.20690010581724227, 0.23138655252307405, 0.29478351394841695, 0.18860152610175362, 0.1526435419150033, 0.24798546365584362, 0.2922894482304962, 0.2763406085697978, 0.2949045471569216, 0.2409017987083918, 0.21595449695542812, 0.16324637391869512, 0.15224259452234035, 0.0762130957015934, 0.13467947642543276, 0.11180250390189905, 0.10954741116115352, 0.15626395078127064, 0.16118812974286845, 0.1029438262254152, 0.14916221996228518, 0.1229275772016768, 0.1432874620833383, 0.1490412804131378, 0.14821851275348108, 0.151537359279715, 0.1490620417642018, 0.09898820148692988, 0.14429686823506616, 0.060306412353818395, 0.008472795235033304, 0.00047785888663764986, 0.04357880884067111, 0.046898708603167916, 0.02920457850533842, 0.0013775395362137788, 0.017848178031538375, 0.005992886922619123, 0.09312280857581157, 0.06828342529625753, 0.06676997131796558, 0.08063311479635593, 0.0516638112963117, 0.07489928143617797, 0.10711203545522052, 0.09235671669971857, 0.09298343652876662, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08237106369832103, 0.08769087314878854, 0.07449040122843875, 0.04836477451721677, 0.08443184739116127, 0.08035606147670893, 0.06110223445954455, 0.08494007411694726, 0.06335970993076112, 0.3468449437881873, 0.3697740156142276, 0.36623881483465104, 0.36575319438084974, 0.3377069553835912, 0.3691898310769972, 0.41744219316964304, 0.3652419472873214, 0.36530781686562364, 0.052972288937463086, 0.10766457262441365, 0.07313873184531217, 0.10960995685659891, 0.1114449405192216, 0.10295312864698447, 0.0999263858175875, 0.10836005467501963, 0.07514850565742381, 0.21162784747109797, 0.24697084469919184, 0.19307236911386338, 0.22547169616572105, 0.2175158550829388, 0.17684122903575117, 0.21345757654386577, 0.1553511124816641, 0.22431018017637838, 0.23375228515502244, 0.23862556705220872, 0.19731542563554472, 0.2692482845041778, 0.21684259267385708, 0.2579665793117709, 0.2073711020425254, 0.2532107924983744, 0.20341960662985803, 0.1938061883189074, 0.20545628049126063, 0.13236892425826974, 0.1861024104200999, 0.16592912594412534, 0.17005391231237632, 0.16026097241237547, 0.2130137885892448, 0.09468768293491481, 0.24961805352044109, 0.19710119629085088, 0.1931531827745776, 0.21615858882519012, 0.2212716875781251, 0.18493397400443123, 0.2274326255135255, 0.22434966236896403, 0.21889902865730315, 0.19736944669105472, 0.20685971779458256, 0.1911129062570317, 0.21794050346448335, 0.20770907945225459, 0.1905915613814978, 0.17513205056845693, 0.16863096627075536, 0.20387475814029155, 0.1808659849121207, 0.16405160453746792, 0.1370362055533898, 0.1669554675220819, 0.19310658609700404, 0.18436890800408923, 0.1442426267540583, 0.47845594841557226, 0.5970062258387951, 0.4195718539189026, 0.19573793213091906, 0.5346588189485586, 0.1939205326727994, 0.1989223754573447, 0.5435623010071213, 0.10182850284827549, 0.4208402000633783, 0.48909504139257287, 0.18050481075630398, 0.17879415218747052, 0.1833688801163985, 0.19353054920460067, 0.1909204374854091, 0.1830623543205262, 0.18297364025795348, 0.1875531208337038, 0.18650164411480274, 0.07041595027966363, 0.058679886364319644, 0.09620872318723628, 0.0826381989206777, 0.06385463624312082, 0.0747736697516822, 0.05504951702880301, 0.10009904338408504, 0.09127963009222606]}, "mutation_prompt": null}
{"id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "solution": "class ImprovedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.local_search_radius = 0.1\n        \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            \n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "ImprovedHybridPSODE", "description": "Improving exploration and exploitation balance by incorporating a novel local search mechanism into the HybridPSODE algorithm.", "configspace": "", "generation": 40, "fitness": 0.23623005092064006, "feedback": "The algorithm ImprovedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "d693ed57-4285-4e8a-8560-9e2b9fb8bd85", "metadata": {"aucs": [0.4827274391903619, 0.4670375159564354, 0.5106279648667291, 0.5065560982528386, 0.4809643072280424, 0.5059382610483127, 0.4958981811346711, 0.46404439329059, 0.4983743322045344, 0.16017465466342218, 0.1349840449203239, 0.10565557587112995, 0.18601392743812994, 0.1550802004144627, 0.12978386259802244, 0.18694508119235365, 0.1782212787809342, 0.15359631661172224, 0.08325792310038127, 0.10351618201892832, 0.10587784057677596, 0.10225283874680358, 0.13382643752965728, 0.11206632128703642, 0.09373218869524969, 0.12435342413999073, 0.09863702880302849, 0.10097013661782761, 0.11292390118694506, 0.06090100090125128, 0.0977170463292597, 0.08103853468258171, 0.05206841517191041, 0.08283774618257345, 0.10520933164285817, 0.05298459332830929, 0.9148433182833823, 0.8566539366328891, 0.8261632984876867, 0.8639296096202178, 0.8298831906728873, 0.8382563539603459, 0.8906339548009615, 0.8825221648984247, 0.8498282017999435, 0.28133512729872256, 0.2611441815428155, 0.3106039984085325, 0.28466300795800803, 0.269721211733855, 0.27671588772552846, 0.2503517746513272, 0.3159904037658601, 0.22472971334229175, 0.3211197949297362, 0.13923281304909418, 0.32263787447708003, 0.3456381141044207, 0.3395887763203699, 0.7245236663162515, 0.30477332151463166, 0.23523954020402493, 0.6919482131752175, 0.15242651113482464, 0.19205114712546545, 0.1796405155765568, 0.18536825427138004, 0.18335025491247348, 0.12176512455988409, 0.16156770779972907, 0.19165906091706697, 0.22434813511565121, 0.15932292891098276, 0.16975935360514283, 0.20396015218404073, 0.23913330792030085, 0.20865753987393243, 0.19212702456433473, 0.17947139514025223, 0.15396802795483966, 0.20266141954775907, 0.009769971199454774, 0.02392102080930858, 0.03459176289710597, 0.06819191609704556, 0.018524593633467146, 0.008219901621488668, 0.057844860849513124, 0.016462929585292274, 0.030988002683601024, 0.14571664640139315, 0.03420510706542612, 0.26337042794958987, 0.14575038733772194, 0.05851291776906453, 0.07919385914496557, 0.16946690149440313, 0.1782729053642197, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.0008149569608036922, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.11604539658528834, 0.119743290950594, 0.09851362411483655, 0.06962048604537008, 0.12350973097362727, 0.08956400932768394, 0.0819564686081572, 0.08159911437742795, 0.39354961280485223, 0.4027074099220117, 0.5156512108976494, 0.4162980871450732, 0.37613615314282034, 0.4034081881612709, 0.42767185011020725, 0.4260067680091565, 0.4371113372864899, 0.04088385148645213, 0.09332343718791292, 0.07581666027381817, 0.09406584498518222, 0.09036121121973428, 0.10338379991185398, 0.10233173014173369, 0.0953384742785085, 0.10759678365824255, 0.16631567729451635, 0.2684287117851233, 0.251816704683522, 0.2185221626253555, 0.2604036701833664, 0.26901454228341426, 0.252650156927386, 0.1739288632562921, 0.19757198170447432, 0.2747356229282495, 0.2807572739242805, 0.2214203055131575, 0.26038267534032344, 0.2857608236081972, 0.2998435322334656, 0.20823319054415512, 0.30680842359428895, 0.23936438297213614, 0.19997550092187288, 0.21868533545357427, 0.14855877489314895, 0.24790470538354992, 0.24221285224972722, 0.23879758551270336, 0.184401175921873, 0.23469428534742587, 0.20432809102187555, 0.2049569802303003, 0.2141407639147732, 0.23227926887102068, 0.22667813006172954, 0.22731984348287393, 0.23507655460956534, 0.21614009245907273, 0.20696693624761664, 0.20003544409359653, 0.19007469207706795, 0.19651391562571763, 0.20497938421366468, 0.18243238512332005, 0.18845275621328728, 0.17709031898161243, 0.19602139383647776, 0.1980089800216398, 0.1766891745908753, 0.7316672162297998, 0.18662025928922021, 0.15198810430428944, 0.7074213567884591, 0.19847801788484865, 0.8463549391563634, 0.12233002186102404, 0.18748961164633648, 0.16116573274015922, 0.5726207945782452, 0.206559757119801, 0.5697026340264164, 0.5400694885246986, 0.20801355189804893, 0.20027449507309347, 0.16539951732927516, 0.5998542754940324, 0.49050152257843915, 0.18309205108541304, 0.19057587674729426, 0.18921150152284083, 0.20177465796634197, 0.18471904894247348, 0.17706826172658052, 0.1787711342216568, 0.1899866105636483, 0.18780124609213722, 0.08787437822659994, 0.10485226486299548, 0.07794156646887385, 0.09525166460793133, 0.08645448082724871, 0.08162473486016586, 0.08709509494193568, 0.07757612781331424, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "0a126b2b-654b-4b31-98d2-5ad58b21332e", "solution": "import numpy as np\n\nclass DynamicMutationHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1  # Dynamic mutation rate\n        \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    mutation_rate = np.random.uniform(0, self.mutation_rate)  # Dynamic mutation rate per iteration\n                    perturbation = np.random.uniform(-mutation_rate, mutation_rate, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            \n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "DynamicMutationHybridPSODE", "description": "Enhancing exploration by introducing dynamic mutation for diverse search behavior.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'DynamicMutationHybridPSODE' object has no attribute 'local_search_prob'\").", "error": "AttributeError(\"'DynamicMutationHybridPSODE' object has no attribute 'local_search_prob'\")", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {}, "mutation_prompt": null}
{"id": "dd58f368-71ee-4859-8046-3b0517bd173a", "solution": "class ImprovedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.local_search_radius = 0.1\n        \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            \n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "ImprovedHybridPSODE", "description": "Improving exploration and exploitation balance by incorporating a novel local search mechanism into the HybridPSODE algorithm.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4827274391903619, 0.4670375159564354, 0.5106279648667291, 0.5065560982528386, 0.4809643072280424, 0.5059382610483127, 0.4958981811346711, 0.46404439329059, 0.4983743322045344, 0.16017465466342218, 0.1349840449203239, 0.10565557587112995, 0.18601392743812994, 0.1550802004144627, 0.12978386259802244, 0.18694508119235365, 0.1782212787809342, 0.15359631661172224, 0.08325792310038127, 0.10351618201892832, 0.10587784057677596, 0.10225283874680358, 0.13382643752965728, 0.11206632128703642, 0.09373218869524969, 0.12435342413999073, 0.09863702880302849, 0.10097013661782761, 0.11292390118694506, 0.06090100090125128, 0.0977170463292597, 0.08103853468258171, 0.05206841517191041, 0.08283774618257345, 0.10520933164285817, 0.05298459332830929, 0.9148433182833823, 0.8566539366328891, 0.8261632984876867, 0.8639296096202178, 0.8298831906728873, 0.8382563539603459, 0.8906339548009615, 0.8825221648984247, 0.8498282017999435, 0.28133512729872256, 0.2611441815428155, 0.3106039984085325, 0.28466300795800803, 0.269721211733855, 0.27671588772552846, 0.2503517746513272, 0.3159904037658601, 0.22472971334229175, 0.3211197949297362, 0.13923281304909418, 0.32263787447708003, 0.3456381141044207, 0.3395887763203699, 0.7245236663162515, 0.30477332151463166, 0.23523954020402493, 0.6919482131752175, 0.15242651113482464, 0.19205114712546545, 0.1796405155765568, 0.18536825427138004, 0.18335025491247348, 0.12176512455988409, 0.16156770779972907, 0.19165906091706697, 0.22434813511565121, 0.15932292891098276, 0.16975935360514283, 0.20396015218404073, 0.23913330792030085, 0.20865753987393243, 0.19212702456433473, 0.17947139514025223, 0.15396802795483966, 0.20266141954775907, 0.009769971199454774, 0.02392102080930858, 0.03459176289710597, 0.06819191609704556, 0.018524593633467146, 0.008219901621488668, 0.057844860849513124, 0.016462929585292274, 0.030988002683601024, 0.14571664640139315, 0.03420510706542612, 0.26337042794958987, 0.14575038733772194, 0.05851291776906453, 0.07919385914496557, 0.16946690149440313, 0.1782729053642197, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.0008149569608036922, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.11604539658528834, 0.119743290950594, 0.09851362411483655, 0.06962048604537008, 0.12350973097362727, 0.08956400932768394, 0.0819564686081572, 0.08159911437742795, 0.39354961280485223, 0.4027074099220117, 0.5156512108976494, 0.4162980871450732, 0.37613615314282034, 0.4034081881612709, 0.42767185011020725, 0.4260067680091565, 0.4371113372864899, 0.04088385148645213, 0.09332343718791292, 0.07581666027381817, 0.09406584498518222, 0.09036121121973428, 0.10338379991185398, 0.10233173014173369, 0.0953384742785085, 0.10759678365824255, 0.16631567729451635, 0.2684287117851233, 0.251816704683522, 0.2185221626253555, 0.2604036701833664, 0.26901454228341426, 0.252650156927386, 0.1739288632562921, 0.19757198170447432, 0.2747356229282495, 0.2807572739242805, 0.2214203055131575, 0.26038267534032344, 0.2857608236081972, 0.2998435322334656, 0.20823319054415512, 0.30680842359428895, 0.23936438297213614, 0.19997550092187288, 0.21868533545357427, 0.14855877489314895, 0.24790470538354992, 0.24221285224972722, 0.23879758551270336, 0.184401175921873, 0.23469428534742587, 0.20432809102187555, 0.2049569802303003, 0.2141407639147732, 0.23227926887102068, 0.22667813006172954, 0.22731984348287393, 0.23507655460956534, 0.21614009245907273, 0.20696693624761664, 0.20003544409359653, 0.19007469207706795, 0.19651391562571763, 0.20497938421366468, 0.18243238512332005, 0.18845275621328728, 0.17709031898161243, 0.19602139383647776, 0.1980089800216398, 0.1766891745908753, 0.7316672162297998, 0.18662025928922021, 0.15198810430428944, 0.7074213567884591, 0.19847801788484865, 0.8463549391563634, 0.12233002186102404, 0.18748961164633648, 0.16116573274015922, 0.5726207945782452, 0.206559757119801, 0.5697026340264164, 0.5400694885246986, 0.20801355189804893, 0.20027449507309347, 0.16539951732927516, 0.5998542754940324, 0.49050152257843915, 0.18309205108541304, 0.19057587674729426, 0.18921150152284083, 0.20177465796634197, 0.18471904894247348, 0.17706826172658052, 0.1787711342216568, 0.1899866105636483, 0.18780124609213722, 0.08787437822659994, 0.10485226486299548, 0.07794156646887385, 0.09525166460793133, 0.08645448082724871, 0.08162473486016586, 0.08709509494193568, 0.07757612781331424, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "2761420e-762a-4a3a-bfcc-fcb3b0087e54", "solution": "import numpy as np\n\nclass AdaptiveHybridPSODE(ImprovedHybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius / (np.log10(t + 2)), self.local_search_radius / (np.log10(t + 2)), self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            \n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "AdaptiveHybridPSODE", "description": "Enhancing dynamic local search by adapting the perturbation size based on each particle's fitness improvement.", "configspace": "", "generation": 43, "fitness": 0.23298459293944418, "feedback": "The algorithm AdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4636950278733477, 0.47006364293996916, 0.5159753576322533, 0.4746608993398741, 0.5084891142754365, 0.4920443180308868, 0.48722977312605664, 0.45962199335006504, 0.49924681227817325, 0.1515275223345367, 0.15397151833173084, 0.20606147425077947, 0.156195928566928, 0.11879305300362542, 0.1398972376506199, 0.1561741212173562, 0.1445922048043331, 0.16773669495469257, 0.10125092150605686, 0.12323362202680255, 0.12334023724794929, 0.12192940301804889, 0.10158961619046836, 0.10156619187141691, 0.0764779014745427, 0.10661216133917062, 0.09973933926239675, 0.09336317432246999, 0.08288218922732593, 0.07133622435784215, 0.08179256086385844, 0.08182152878057136, 0.06861590669146134, 0.1349279107838407, 0.10520933164285817, 0.08995730659907619, 0.8612113290845105, 0.8022876594311554, 0.9134260428423414, 0.8270544755089558, 0.8897142980934081, 0.8413571932539001, 0.9062318405149568, 0.8414635476547629, 0.9263261298095108, 0.26938624534729927, 0.2889173601115661, 0.2727011636597082, 0.3218904542923091, 0.269721211733855, 0.1509738191012573, 0.28284025413026215, 0.2924127050875178, 0.2701912784719279, 0.38068795999129346, 0.21413878587674084, 0.7310604436161691, 0.21478980892573074, 0.33390517617016213, 0.3476530346273491, 0.22772310038492682, 0.48847489163422775, 0.2910381805795139, 0.15783511822457463, 0.1656520927794487, 0.118327566425526, 0.18458952323511513, 0.18036374173962522, 0.11319767715130091, 0.17394069774603538, 0.18777634709973356, 0.24829558911398186, 0.17718745409867065, 0.1588444353719708, 0.12945905471607533, 0.17945132237851136, 0.12547782567464405, 0.17619930482807955, 0.1913880265227884, 0.17307147557713887, 0.1425362068200362, 9.999999999998899e-05, 0.021363907760804213, 9.999999999998899e-05, 0.02171392727895549, 0.05065933861771754, 0.10217286277329385, 0.02222814103275339, 9.999999999998899e-05, 0.07417597515918328, 0.21128390564100796, 0.12948928478399557, 0.10583513444547699, 0.09436017033387856, 0.08891979732904076, 0.12853144120218385, 0.14306508261822581, 0.13744180988845578, 0.08829778841618241, 9.999999999998899e-05, 9.999999999998899e-05, 0.007262328070015256, 9.999999999998899e-05, 0.001011153644226992, 0.0398395423929464, 9.999999999998899e-05, 0.0007538825080044553, 0.014310563636823481, 0.0768066198721663, 0.11604539658528834, 0.1330035053699783, 0.133560379322604, 0.1295612175689086, 0.1255414199725654, 0.09528311228838249, 0.08681391196842836, 0.07560488430871426, 0.4061634941140466, 0.42989769442497305, 0.45869847942330955, 0.4399731730866485, 0.4014340414728883, 0.4751891886712405, 0.4398332765687535, 0.4072617518033044, 0.4467924025775535, 0.09880175464083862, 0.08916010766582627, 0.10268981327229776, 0.08228166498517364, 0.12679547278932057, 0.10292478974107888, 0.11285899652998488, 0.0953384742785085, 0.09763738420717838, 0.16361393565507465, 0.23057657945206722, 0.2642263595418305, 0.2945320181570942, 0.27224752204854663, 0.23487390246674578, 0.20416225492132067, 0.256510318041262, 0.26360989854004835, 0.16351670771187, 0.23099998348969608, 0.2016880021271248, 0.31399222528139115, 0.2788482925179351, 0.30077670829901915, 0.3156549908832742, 0.2973610753212661, 0.15290630372381164, 0.20819972420812272, 0.24816526085055235, 0.17092687460745404, 0.23870118482486902, 0.1918222119132521, 0.19810653039787018, 0.26045002644299664, 0.20984469056748933, 0.2231065946587384, 0.224475972572179, 0.1993254332363531, 0.23180084226322906, 0.20648782725934878, 0.19203666635630823, 0.22497669482308502, 0.19905641294709275, 0.21596379437031465, 0.2115630985551321, 0.19852620772026308, 0.18971040092918312, 0.19753077138639963, 0.19203631476124272, 0.20814711399294117, 0.19567716328918272, 0.20111956689339994, 0.27156079181251214, 0.21144764517085202, 0.18541249894869927, 0.18555696528698207, 0.7653689990987222, 0.7150725097644325, 0.19873596493966927, 0.1948637521373625, 0.16535333585082312, 0.16818448017915566, 0.8029043035555923, 0.16608874981936372, 0.20550964310874398, 0.5951733337726305, 0.20769236390011037, 0.1651927698894493, 0.5913103169845075, 0.5292157155504169, 0.5815070413376073, 0.10413685076016532, 0.17802821320337625, 0.1914538778809235, 0.1696954906130188, 0.17859835168452243, 0.1835159504146534, 0.17722771226297596, 0.19200026404743464, 0.17673450433703897, 0.1901155978393837, 0.0781222389479026, 0.09421940340106227, 0.07625196875300722, 0.08446481991998755, 0.11131327187218576, 0.08606496366845318, 0.07496321850363707, 0.07757612781331424, 0.0740210942343631]}, "mutation_prompt": null}
{"id": "779c25bb-f497-4b6e-bcd5-2721ce435877", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.local_search_radius = 0.1\n        self.mutation_prob = 0.2\n        self.mutation_scale = 0.5\n        \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            \n            else:  # Original HybridPSODE update with mutation\n                for i in range(self.population_size):\n                    if np.random.rand() < self.mutation_prob:\n                        best_index = np.argsort([func(p) for p in self.particles])[0]\n                        mutation_vector = self.particles[best_index] - self.particles[i]\n                        perturbed_particle = self.particles[i] + self.mutation_scale * mutation_vector\n                        self.particles[i] = np.clip(perturbed_particle, -5.0, 5.0)\n                super().__call__(func)\n        \n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing population diversity by introducing a novel mutation strategy based on adaptive differential evolution.", "configspace": "", "generation": 44, "fitness": 0.22893066073457446, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.19.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.46191158643811037, 0.4814706987137227, 0.4587029544985701, 0.5117597905459432, 0.459180691269359, 0.4974020026985325, 0.5158251715697622, 0.46228395554753887, 0.51794929789337, 0.1641906957498961, 0.15721100848884995, 0.1968234693895472, 0.1631192531283746, 0.16637122319906816, 0.13632028393664353, 0.11642131977962311, 0.140757889758795, 0.11030333858537655, 0.08330544392943973, 0.10587559669729874, 0.073636563651586, 0.0810606808023484, 0.09566172257632444, 0.11404391350610588, 0.10439901806873131, 0.1276156935701822, 0.12323408720127105, 0.07184968244586432, 0.11120165619379363, 0.1189814865998654, 0.09828852677739508, 0.10528094345224348, 0.0750388421059357, 0.08335671713577031, 0.11991154100366752, 0.06984969344638126, 0.8554202640715445, 0.8805210362184684, 0.8440821415541747, 0.940649286159526, 0.8754993096683341, 0.9082079098316684, 0.9189770758515239, 0.86555730044147, 0.88546615386251, 0.2560778076410314, 0.24785036240247438, 0.05596636844950176, 0.27586273788908244, 0.2583210855328656, 0.2584940935992738, 0.2642662871083261, 0.08534083974691442, 0.27015839482243087, 0.4863393094954582, 0.377793466951028, 0.3310072970989155, 0.21274734273102702, 0.49040965461491504, 0.31529641071120307, 0.3421418377553165, 0.3054994748211697, 0.41693264363778626, 0.23406163816947267, 0.16504390564752214, 0.18352647576726044, 0.18562093589323014, 0.19519150375627436, 0.1531052177309119, 0.1822748317955385, 0.12266398806630019, 0.23084776743577973, 0.18329215230523332, 0.19280787072884342, 0.12469307801799623, 0.1658710375591489, 0.19629495009350872, 0.18125004438630654, 0.21093610248315653, 0.22223755816125812, 0.09858362508427887, 0.026255947542753733, 0.031182169259361014, 0.0602729000874801, 0.0644000696887348, 0.01465001084586981, 9.999999999998899e-05, 0.0023385754363185463, 9.999999999998899e-05, 0.08877268974201247, 0.16130634699205781, 0.11416166072288758, 0.06588116095022345, 0.07796115220799316, 0.06421370425289152, 0.10080386155755117, 0.148691204909145, 0.18333852162382103, 0.05581560176109701, 0.0038398161473712777, 0.006584312906866008, 0.0002737752228606505, 0.015241340069993004, 9.999999999998899e-05, 9.999999999998899e-05, 0.007503550043419405, 9.999999999998899e-05, 0.029499362598926604, 0.12926857687674898, 0.10008056667095311, 0.12084687087971746, 0.09875441314141886, 0.08918904791022964, 0.11512897968395142, 0.10059878855720594, 0.09842541714546205, 0.07229227373293723, 0.4240917005512991, 0.4119968655586116, 0.418129342260111, 0.38597323064595723, 0.41587704058282815, 0.423403091051463, 0.4149196295064582, 0.427058365367744, 0.41528923337548984, 0.09282361525858085, 0.10263870275974663, 0.07922575919955199, 0.11224253121141647, 0.10717694601378203, 0.11205557778202979, 0.09901500990865697, 0.11062512048452422, 0.07644399221468245, 0.25945770361890785, 0.25713170624212756, 0.2572129060944571, 0.21385312013044677, 0.28922041694405887, 0.21544960841734562, 0.277468413286695, 0.2514469821930513, 0.24562669595483455, 0.26760263132416706, 0.29960202289752846, 0.28421820889466476, 0.30086692980026186, 0.27290236608917373, 0.29004968942464937, 0.2051919619276691, 0.287363513049834, 0.21967279994160405, 0.2213355889262837, 0.17294608179145632, 0.21455799235113393, 0.22863125090546688, 0.24633590771225455, 0.2293992507546846, 0.1658933222704032, 0.24469491447079839, 0.1756915137956535, 0.22932269740372835, 0.18197861827001494, 0.18718467849276998, 0.2022647516865509, 0.20794707621925568, 0.20876457742049936, 0.2251396166891233, 0.2170530866707282, 0.21714885218013746, 0.20283841165477767, 0.20264904262277472, 0.19200589721723582, 0.21309516926176697, 0.28836032310815385, 0.19365980610283218, 0.17638967983526055, 0.18319648617628004, 0.20309501631575133, 0.18667551006573935, 0.1866851298452431, 0.18498337576043755, 0.6839452822628784, 0.1987438928196653, 0.16825452208038172, 0.1647471893100152, 0.16811159137688902, 0.1507017431784845, 0.5231318476956921, 0.20974011103680557, 0.5087833537742856, 0.5790183210314135, 0.16545336622998397, 0.5890523009886321, 0.1658506809893835, 0.527398088223751, 0.4991570670764911, 0.16636062074690894, 0.17355897100659, 0.18834549842869985, 0.19427664126558108, 0.1834868559269397, 0.1981802837889033, 0.17310373920774547, 0.18411623788398424, 0.17681361267194262, 0.08831355275306396, 0.09128540789114137, 0.09313269718574502, 0.08880961488263106, 0.09395127480837107, 0.11274261318845435, 0.09067875648037371, 0.08228343661032123, 0.07238880465082043]}, "mutation_prompt": null}
{"id": "97566f93-7f64-41de-a380-977d9b660140", "solution": "class DynamicMutatedHybridPSODE(ImprovedHybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_prob = 0.3\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.mutation_prob:  # Dynamic Mutation\n                for i in range(self.population_size):\n                    mutation_scale = np.random.uniform(0.01, 0.1)\n                    perturbation = np.random.uniform(-mutation_scale, mutation_scale, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            \n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "DynamicMutatedHybridPSODE", "description": "Enhancing population diversity by introducing a dynamic mutation strategy to explore the search space more effectively.", "configspace": "", "generation": 45, "fitness": 0.23298459293944418, "feedback": "The algorithm DynamicMutatedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4636950278733477, 0.47006364293996916, 0.5159753576322533, 0.4746608993398741, 0.5084891142754365, 0.4920443180308868, 0.48722977312605664, 0.45962199335006504, 0.49924681227817325, 0.1515275223345367, 0.15397151833173084, 0.20606147425077947, 0.156195928566928, 0.11879305300362542, 0.1398972376506199, 0.1561741212173562, 0.1445922048043331, 0.16773669495469257, 0.10125092150605686, 0.12323362202680255, 0.12334023724794929, 0.12192940301804889, 0.10158961619046836, 0.10156619187141691, 0.0764779014745427, 0.10661216133917062, 0.09973933926239675, 0.09336317432246999, 0.08288218922732593, 0.07133622435784215, 0.08179256086385844, 0.08182152878057136, 0.06861590669146134, 0.1349279107838407, 0.10520933164285817, 0.08995730659907619, 0.8612113290845105, 0.8022876594311554, 0.9134260428423414, 0.8270544755089558, 0.8897142980934081, 0.8413571932539001, 0.9062318405149568, 0.8414635476547629, 0.9263261298095108, 0.26938624534729927, 0.2889173601115661, 0.2727011636597082, 0.3218904542923091, 0.269721211733855, 0.1509738191012573, 0.28284025413026215, 0.2924127050875178, 0.2701912784719279, 0.38068795999129346, 0.21413878587674084, 0.7310604436161691, 0.21478980892573074, 0.33390517617016213, 0.3476530346273491, 0.22772310038492682, 0.48847489163422775, 0.2910381805795139, 0.15783511822457463, 0.1656520927794487, 0.118327566425526, 0.18458952323511513, 0.18036374173962522, 0.11319767715130091, 0.17394069774603538, 0.18777634709973356, 0.24829558911398186, 0.17718745409867065, 0.1588444353719708, 0.12945905471607533, 0.17945132237851136, 0.12547782567464405, 0.17619930482807955, 0.1913880265227884, 0.17307147557713887, 0.1425362068200362, 9.999999999998899e-05, 0.021363907760804213, 9.999999999998899e-05, 0.02171392727895549, 0.05065933861771754, 0.10217286277329385, 0.02222814103275339, 9.999999999998899e-05, 0.07417597515918328, 0.21128390564100796, 0.12948928478399557, 0.10583513444547699, 0.09436017033387856, 0.08891979732904076, 0.12853144120218385, 0.14306508261822581, 0.13744180988845578, 0.08829778841618241, 9.999999999998899e-05, 9.999999999998899e-05, 0.007262328070015256, 9.999999999998899e-05, 0.001011153644226992, 0.0398395423929464, 9.999999999998899e-05, 0.0007538825080044553, 0.014310563636823481, 0.0768066198721663, 0.11604539658528834, 0.1330035053699783, 0.133560379322604, 0.1295612175689086, 0.1255414199725654, 0.09528311228838249, 0.08681391196842836, 0.07560488430871426, 0.4061634941140466, 0.42989769442497305, 0.45869847942330955, 0.4399731730866485, 0.4014340414728883, 0.4751891886712405, 0.4398332765687535, 0.4072617518033044, 0.4467924025775535, 0.09880175464083862, 0.08916010766582627, 0.10268981327229776, 0.08228166498517364, 0.12679547278932057, 0.10292478974107888, 0.11285899652998488, 0.0953384742785085, 0.09763738420717838, 0.16361393565507465, 0.23057657945206722, 0.2642263595418305, 0.2945320181570942, 0.27224752204854663, 0.23487390246674578, 0.20416225492132067, 0.256510318041262, 0.26360989854004835, 0.16351670771187, 0.23099998348969608, 0.2016880021271248, 0.31399222528139115, 0.2788482925179351, 0.30077670829901915, 0.3156549908832742, 0.2973610753212661, 0.15290630372381164, 0.20819972420812272, 0.24816526085055235, 0.17092687460745404, 0.23870118482486902, 0.1918222119132521, 0.19810653039787018, 0.26045002644299664, 0.20984469056748933, 0.2231065946587384, 0.224475972572179, 0.1993254332363531, 0.23180084226322906, 0.20648782725934878, 0.19203666635630823, 0.22497669482308502, 0.19905641294709275, 0.21596379437031465, 0.2115630985551321, 0.19852620772026308, 0.18971040092918312, 0.19753077138639963, 0.19203631476124272, 0.20814711399294117, 0.19567716328918272, 0.20111956689339994, 0.27156079181251214, 0.21144764517085202, 0.18541249894869927, 0.18555696528698207, 0.7653689990987222, 0.7150725097644325, 0.19873596493966927, 0.1948637521373625, 0.16535333585082312, 0.16818448017915566, 0.8029043035555923, 0.16608874981936372, 0.20550964310874398, 0.5951733337726305, 0.20769236390011037, 0.1651927698894493, 0.5913103169845075, 0.5292157155504169, 0.5815070413376073, 0.10413685076016532, 0.17802821320337625, 0.1914538778809235, 0.1696954906130188, 0.17859835168452243, 0.1835159504146534, 0.17722771226297596, 0.19200026404743464, 0.17673450433703897, 0.1901155978393837, 0.0781222389479026, 0.09421940340106227, 0.07625196875300722, 0.08446481991998755, 0.11131327187218576, 0.08606496366845318, 0.07496321850363707, 0.07757612781331424, 0.0740210942343631]}, "mutation_prompt": null}
{"id": "594f7b0f-0bd0-4543-bec4-d76d5bc5e4c7", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.base_local_search_radius = 0.1\n        self.mutation_factor = 0.01\n        \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n                    else:  # Dynamic mutation strategy\n                        self.local_search_radius *= np.exp(-self.mutation_factor*t/self.budget)\n            \n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing population diversity by introducing a dynamic mutation strategy to adapt the search radius during optimization.", "configspace": "", "generation": 46, "fitness": 0.23623005092064006, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4827274391903619, 0.4670375159564354, 0.5106279648667291, 0.5065560982528386, 0.4809643072280424, 0.5059382610483127, 0.4958981811346711, 0.46404439329059, 0.4983743322045344, 0.16017465466342218, 0.1349840449203239, 0.10565557587112995, 0.18601392743812994, 0.1550802004144627, 0.12978386259802244, 0.18694508119235365, 0.1782212787809342, 0.15359631661172224, 0.08325792310038127, 0.10351618201892832, 0.10587784057677596, 0.10225283874680358, 0.13382643752965728, 0.11206632128703642, 0.09373218869524969, 0.12435342413999073, 0.09863702880302849, 0.10097013661782761, 0.11292390118694506, 0.06090100090125128, 0.0977170463292597, 0.08103853468258171, 0.05206841517191041, 0.08283774618257345, 0.10520933164285817, 0.05298459332830929, 0.9148433182833823, 0.8566539366328891, 0.8261632984876867, 0.8639296096202178, 0.8298831906728873, 0.8382563539603459, 0.8906339548009615, 0.8825221648984247, 0.8498282017999435, 0.28133512729872256, 0.2611441815428155, 0.3106039984085325, 0.28466300795800803, 0.269721211733855, 0.27671588772552846, 0.2503517746513272, 0.3159904037658601, 0.22472971334229175, 0.3211197949297362, 0.13923281304909418, 0.32263787447708003, 0.3456381141044207, 0.3395887763203699, 0.7245236663162515, 0.30477332151463166, 0.23523954020402493, 0.6919482131752175, 0.15242651113482464, 0.19205114712546545, 0.1796405155765568, 0.18536825427138004, 0.18335025491247348, 0.12176512455988409, 0.16156770779972907, 0.19165906091706697, 0.22434813511565121, 0.15932292891098276, 0.16975935360514283, 0.20396015218404073, 0.23913330792030085, 0.20865753987393243, 0.19212702456433473, 0.17947139514025223, 0.15396802795483966, 0.20266141954775907, 0.009769971199454774, 0.02392102080930858, 0.03459176289710597, 0.06819191609704556, 0.018524593633467146, 0.008219901621488668, 0.057844860849513124, 0.016462929585292274, 0.030988002683601024, 0.14571664640139315, 0.03420510706542612, 0.26337042794958987, 0.14575038733772194, 0.05851291776906453, 0.07919385914496557, 0.16946690149440313, 0.1782729053642197, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.0008149569608036922, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.11604539658528834, 0.119743290950594, 0.09851362411483655, 0.06962048604537008, 0.12350973097362727, 0.08956400932768394, 0.0819564686081572, 0.08159911437742795, 0.39354961280485223, 0.4027074099220117, 0.5156512108976494, 0.4162980871450732, 0.37613615314282034, 0.4034081881612709, 0.42767185011020725, 0.4260067680091565, 0.4371113372864899, 0.04088385148645213, 0.09332343718791292, 0.07581666027381817, 0.09406584498518222, 0.09036121121973428, 0.10338379991185398, 0.10233173014173369, 0.0953384742785085, 0.10759678365824255, 0.16631567729451635, 0.2684287117851233, 0.251816704683522, 0.2185221626253555, 0.2604036701833664, 0.26901454228341426, 0.252650156927386, 0.1739288632562921, 0.19757198170447432, 0.2747356229282495, 0.2807572739242805, 0.2214203055131575, 0.26038267534032344, 0.2857608236081972, 0.2998435322334656, 0.20823319054415512, 0.30680842359428895, 0.23936438297213614, 0.19997550092187288, 0.21868533545357427, 0.14855877489314895, 0.24790470538354992, 0.24221285224972722, 0.23879758551270336, 0.184401175921873, 0.23469428534742587, 0.20432809102187555, 0.2049569802303003, 0.2141407639147732, 0.23227926887102068, 0.22667813006172954, 0.22731984348287393, 0.23507655460956534, 0.21614009245907273, 0.20696693624761664, 0.20003544409359653, 0.19007469207706795, 0.19651391562571763, 0.20497938421366468, 0.18243238512332005, 0.18845275621328728, 0.17709031898161243, 0.19602139383647776, 0.1980089800216398, 0.1766891745908753, 0.7316672162297998, 0.18662025928922021, 0.15198810430428944, 0.7074213567884591, 0.19847801788484865, 0.8463549391563634, 0.12233002186102404, 0.18748961164633648, 0.16116573274015922, 0.5726207945782452, 0.206559757119801, 0.5697026340264164, 0.5400694885246986, 0.20801355189804893, 0.20027449507309347, 0.16539951732927516, 0.5998542754940324, 0.49050152257843915, 0.18309205108541304, 0.19057587674729426, 0.18921150152284083, 0.20177465796634197, 0.18471904894247348, 0.17706826172658052, 0.1787711342216568, 0.1899866105636483, 0.18780124609213722, 0.08787437822659994, 0.10485226486299548, 0.07794156646887385, 0.09525166460793133, 0.08645448082724871, 0.08162473486016586, 0.08709509494193568, 0.07757612781331424, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "7a82008f-7745-4397-86c2-2a3c5a6b2c40", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.initial_local_search_radius = 0.1\n        self.local_search_radius = self.initial_local_search_radius\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n                \n                # Dynamically adjust local search radius\n                improvement_ratio = (self.global_best_value - func(self.global_best)) / self.global_best_value\n                self.local_search_radius = self.initial_local_search_radius * (1 + improvement_ratio)  # Increase radius if improvement\n                \n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing global exploration by introducing a dynamically adjusting local search radius mechanism in the ImprovedHybridPSODE algorithm.", "configspace": "", "generation": 47, "fitness": 0.23623005092064006, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4827274391903619, 0.4670375159564354, 0.5106279648667291, 0.5065560982528386, 0.4809643072280424, 0.5059382610483127, 0.4958981811346711, 0.46404439329059, 0.4983743322045344, 0.16017465466342218, 0.1349840449203239, 0.10565557587112995, 0.18601392743812994, 0.1550802004144627, 0.12978386259802244, 0.18694508119235365, 0.1782212787809342, 0.15359631661172224, 0.08325792310038127, 0.10351618201892832, 0.10587784057677596, 0.10225283874680358, 0.13382643752965728, 0.11206632128703642, 0.09373218869524969, 0.12435342413999073, 0.09863702880302849, 0.10097013661782761, 0.11292390118694506, 0.06090100090125128, 0.0977170463292597, 0.08103853468258171, 0.05206841517191041, 0.08283774618257345, 0.10520933164285817, 0.05298459332830929, 0.9148433182833823, 0.8566539366328891, 0.8261632984876867, 0.8639296096202178, 0.8298831906728873, 0.8382563539603459, 0.8906339548009615, 0.8825221648984247, 0.8498282017999435, 0.28133512729872256, 0.2611441815428155, 0.3106039984085325, 0.28466300795800803, 0.269721211733855, 0.27671588772552846, 0.2503517746513272, 0.3159904037658601, 0.22472971334229175, 0.3211197949297362, 0.13923281304909418, 0.32263787447708003, 0.3456381141044207, 0.3395887763203699, 0.7245236663162515, 0.30477332151463166, 0.23523954020402493, 0.6919482131752175, 0.15242651113482464, 0.19205114712546545, 0.1796405155765568, 0.18536825427138004, 0.18335025491247348, 0.12176512455988409, 0.16156770779972907, 0.19165906091706697, 0.22434813511565121, 0.15932292891098276, 0.16975935360514283, 0.20396015218404073, 0.23913330792030085, 0.20865753987393243, 0.19212702456433473, 0.17947139514025223, 0.15396802795483966, 0.20266141954775907, 0.009769971199454774, 0.02392102080930858, 0.03459176289710597, 0.06819191609704556, 0.018524593633467146, 0.008219901621488668, 0.057844860849513124, 0.016462929585292274, 0.030988002683601024, 0.14571664640139315, 0.03420510706542612, 0.26337042794958987, 0.14575038733772194, 0.05851291776906453, 0.07919385914496557, 0.16946690149440313, 0.1782729053642197, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.0008149569608036922, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.11604539658528834, 0.119743290950594, 0.09851362411483655, 0.06962048604537008, 0.12350973097362727, 0.08956400932768394, 0.0819564686081572, 0.08159911437742795, 0.39354961280485223, 0.4027074099220117, 0.5156512108976494, 0.4162980871450732, 0.37613615314282034, 0.4034081881612709, 0.42767185011020725, 0.4260067680091565, 0.4371113372864899, 0.04088385148645213, 0.09332343718791292, 0.07581666027381817, 0.09406584498518222, 0.09036121121973428, 0.10338379991185398, 0.10233173014173369, 0.0953384742785085, 0.10759678365824255, 0.16631567729451635, 0.2684287117851233, 0.251816704683522, 0.2185221626253555, 0.2604036701833664, 0.26901454228341426, 0.252650156927386, 0.1739288632562921, 0.19757198170447432, 0.2747356229282495, 0.2807572739242805, 0.2214203055131575, 0.26038267534032344, 0.2857608236081972, 0.2998435322334656, 0.20823319054415512, 0.30680842359428895, 0.23936438297213614, 0.19997550092187288, 0.21868533545357427, 0.14855877489314895, 0.24790470538354992, 0.24221285224972722, 0.23879758551270336, 0.184401175921873, 0.23469428534742587, 0.20432809102187555, 0.2049569802303003, 0.2141407639147732, 0.23227926887102068, 0.22667813006172954, 0.22731984348287393, 0.23507655460956534, 0.21614009245907273, 0.20696693624761664, 0.20003544409359653, 0.19007469207706795, 0.19651391562571763, 0.20497938421366468, 0.18243238512332005, 0.18845275621328728, 0.17709031898161243, 0.19602139383647776, 0.1980089800216398, 0.1766891745908753, 0.7316672162297998, 0.18662025928922021, 0.15198810430428944, 0.7074213567884591, 0.19847801788484865, 0.8463549391563634, 0.12233002186102404, 0.18748961164633648, 0.16116573274015922, 0.5726207945782452, 0.206559757119801, 0.5697026340264164, 0.5400694885246986, 0.20801355189804893, 0.20027449507309347, 0.16539951732927516, 0.5998542754940324, 0.49050152257843915, 0.18309205108541304, 0.19057587674729426, 0.18921150152284083, 0.20177465796634197, 0.18471904894247348, 0.17706826172658052, 0.1787711342216568, 0.1899866105636483, 0.18780124609213722, 0.08787437822659994, 0.10485226486299548, 0.07794156646887385, 0.09525166460793133, 0.08645448082724871, 0.08162473486016586, 0.08709509494193568, 0.07757612781331424, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "158b3dab-f841-4df7-a4cc-70ed9eda5a53", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.dynamic_perturbation_prob = 0.1\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.dynamic_perturbation_prob:  # Dynamic Perturbation\n                for i in range(self.population_size):\n                    perturbation = np.random.normal(0, 1) * np.abs(self.global_best - self.particles[i])\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            \n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing exploration by introducing a dynamic perturbation mechanism based on the function landscape.", "configspace": "", "generation": 48, "fitness": 0.23623005092064006, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4827274391903619, 0.4670375159564354, 0.5106279648667291, 0.5065560982528386, 0.4809643072280424, 0.5059382610483127, 0.4958981811346711, 0.46404439329059, 0.4983743322045344, 0.16017465466342218, 0.1349840449203239, 0.10565557587112995, 0.18601392743812994, 0.1550802004144627, 0.12978386259802244, 0.18694508119235365, 0.1782212787809342, 0.15359631661172224, 0.08325792310038127, 0.10351618201892832, 0.10587784057677596, 0.10225283874680358, 0.13382643752965728, 0.11206632128703642, 0.09373218869524969, 0.12435342413999073, 0.09863702880302849, 0.10097013661782761, 0.11292390118694506, 0.06090100090125128, 0.0977170463292597, 0.08103853468258171, 0.05206841517191041, 0.08283774618257345, 0.10520933164285817, 0.05298459332830929, 0.9148433182833823, 0.8566539366328891, 0.8261632984876867, 0.8639296096202178, 0.8298831906728873, 0.8382563539603459, 0.8906339548009615, 0.8825221648984247, 0.8498282017999435, 0.28133512729872256, 0.2611441815428155, 0.3106039984085325, 0.28466300795800803, 0.269721211733855, 0.27671588772552846, 0.2503517746513272, 0.3159904037658601, 0.22472971334229175, 0.3211197949297362, 0.13923281304909418, 0.32263787447708003, 0.3456381141044207, 0.3395887763203699, 0.7245236663162515, 0.30477332151463166, 0.23523954020402493, 0.6919482131752175, 0.15242651113482464, 0.19205114712546545, 0.1796405155765568, 0.18536825427138004, 0.18335025491247348, 0.12176512455988409, 0.16156770779972907, 0.19165906091706697, 0.22434813511565121, 0.15932292891098276, 0.16975935360514283, 0.20396015218404073, 0.23913330792030085, 0.20865753987393243, 0.19212702456433473, 0.17947139514025223, 0.15396802795483966, 0.20266141954775907, 0.009769971199454774, 0.02392102080930858, 0.03459176289710597, 0.06819191609704556, 0.018524593633467146, 0.008219901621488668, 0.057844860849513124, 0.016462929585292274, 0.030988002683601024, 0.14571664640139315, 0.03420510706542612, 0.26337042794958987, 0.14575038733772194, 0.05851291776906453, 0.07919385914496557, 0.16946690149440313, 0.1782729053642197, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.0008149569608036922, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.11604539658528834, 0.119743290950594, 0.09851362411483655, 0.06962048604537008, 0.12350973097362727, 0.08956400932768394, 0.0819564686081572, 0.08159911437742795, 0.39354961280485223, 0.4027074099220117, 0.5156512108976494, 0.4162980871450732, 0.37613615314282034, 0.4034081881612709, 0.42767185011020725, 0.4260067680091565, 0.4371113372864899, 0.04088385148645213, 0.09332343718791292, 0.07581666027381817, 0.09406584498518222, 0.09036121121973428, 0.10338379991185398, 0.10233173014173369, 0.0953384742785085, 0.10759678365824255, 0.16631567729451635, 0.2684287117851233, 0.251816704683522, 0.2185221626253555, 0.2604036701833664, 0.26901454228341426, 0.252650156927386, 0.1739288632562921, 0.19757198170447432, 0.2747356229282495, 0.2807572739242805, 0.2214203055131575, 0.26038267534032344, 0.2857608236081972, 0.2998435322334656, 0.20823319054415512, 0.30680842359428895, 0.23936438297213614, 0.19997550092187288, 0.21868533545357427, 0.14855877489314895, 0.24790470538354992, 0.24221285224972722, 0.23879758551270336, 0.184401175921873, 0.23469428534742587, 0.20432809102187555, 0.2049569802303003, 0.2141407639147732, 0.23227926887102068, 0.22667813006172954, 0.22731984348287393, 0.23507655460956534, 0.21614009245907273, 0.20696693624761664, 0.20003544409359653, 0.19007469207706795, 0.19651391562571763, 0.20497938421366468, 0.18243238512332005, 0.18845275621328728, 0.17709031898161243, 0.19602139383647776, 0.1980089800216398, 0.1766891745908753, 0.7316672162297998, 0.18662025928922021, 0.15198810430428944, 0.7074213567884591, 0.19847801788484865, 0.8463549391563634, 0.12233002186102404, 0.18748961164633648, 0.16116573274015922, 0.5726207945782452, 0.206559757119801, 0.5697026340264164, 0.5400694885246986, 0.20801355189804893, 0.20027449507309347, 0.16539951732927516, 0.5998542754940324, 0.49050152257843915, 0.18309205108541304, 0.19057587674729426, 0.18921150152284083, 0.20177465796634197, 0.18471904894247348, 0.17706826172658052, 0.1787711342216568, 0.1899866105636483, 0.18780124609213722, 0.08787437822659994, 0.10485226486299548, 0.07794156646887385, 0.09525166460793133, 0.08645448082724871, 0.08162473486016586, 0.08709509494193568, 0.07757612781331424, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "8e3647ab-e939-423a-8299-4879e2eca406", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.local_search_radius = 0.1\n        self.mutation_prob = 0.2\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            \n            else:  # Original HybridPSODE update\n                super().__call__(func)\n            \n            if np.random.rand() < self.mutation_prob:  # Mutation\n                indices_to_mutate = np.random.choice(self.population_size, int(self.mutation_rate*self.population_size), replace=False)\n                for i in indices_to_mutate:\n                    mutation = np.random.uniform(-self.mutation_rate, self.mutation_rate, self.dim)\n                    self.particles[i] = np.clip(self.particles[i] + mutation, -5.0, 5.0)\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing population diversity by introducing a mutation operator that randomly changes a subset of particles.", "configspace": "", "generation": 49, "fitness": 0.23623005092064006, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4827274391903619, 0.4670375159564354, 0.5106279648667291, 0.5065560982528386, 0.4809643072280424, 0.5059382610483127, 0.4958981811346711, 0.46404439329059, 0.4983743322045344, 0.16017465466342218, 0.1349840449203239, 0.10565557587112995, 0.18601392743812994, 0.1550802004144627, 0.12978386259802244, 0.18694508119235365, 0.1782212787809342, 0.15359631661172224, 0.08325792310038127, 0.10351618201892832, 0.10587784057677596, 0.10225283874680358, 0.13382643752965728, 0.11206632128703642, 0.09373218869524969, 0.12435342413999073, 0.09863702880302849, 0.10097013661782761, 0.11292390118694506, 0.06090100090125128, 0.0977170463292597, 0.08103853468258171, 0.05206841517191041, 0.08283774618257345, 0.10520933164285817, 0.05298459332830929, 0.9148433182833823, 0.8566539366328891, 0.8261632984876867, 0.8639296096202178, 0.8298831906728873, 0.8382563539603459, 0.8906339548009615, 0.8825221648984247, 0.8498282017999435, 0.28133512729872256, 0.2611441815428155, 0.3106039984085325, 0.28466300795800803, 0.269721211733855, 0.27671588772552846, 0.2503517746513272, 0.3159904037658601, 0.22472971334229175, 0.3211197949297362, 0.13923281304909418, 0.32263787447708003, 0.3456381141044207, 0.3395887763203699, 0.7245236663162515, 0.30477332151463166, 0.23523954020402493, 0.6919482131752175, 0.15242651113482464, 0.19205114712546545, 0.1796405155765568, 0.18536825427138004, 0.18335025491247348, 0.12176512455988409, 0.16156770779972907, 0.19165906091706697, 0.22434813511565121, 0.15932292891098276, 0.16975935360514283, 0.20396015218404073, 0.23913330792030085, 0.20865753987393243, 0.19212702456433473, 0.17947139514025223, 0.15396802795483966, 0.20266141954775907, 0.009769971199454774, 0.02392102080930858, 0.03459176289710597, 0.06819191609704556, 0.018524593633467146, 0.008219901621488668, 0.057844860849513124, 0.016462929585292274, 0.030988002683601024, 0.14571664640139315, 0.03420510706542612, 0.26337042794958987, 0.14575038733772194, 0.05851291776906453, 0.07919385914496557, 0.16946690149440313, 0.1782729053642197, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.0008149569608036922, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.11604539658528834, 0.119743290950594, 0.09851362411483655, 0.06962048604537008, 0.12350973097362727, 0.08956400932768394, 0.0819564686081572, 0.08159911437742795, 0.39354961280485223, 0.4027074099220117, 0.5156512108976494, 0.4162980871450732, 0.37613615314282034, 0.4034081881612709, 0.42767185011020725, 0.4260067680091565, 0.4371113372864899, 0.04088385148645213, 0.09332343718791292, 0.07581666027381817, 0.09406584498518222, 0.09036121121973428, 0.10338379991185398, 0.10233173014173369, 0.0953384742785085, 0.10759678365824255, 0.16631567729451635, 0.2684287117851233, 0.251816704683522, 0.2185221626253555, 0.2604036701833664, 0.26901454228341426, 0.252650156927386, 0.1739288632562921, 0.19757198170447432, 0.2747356229282495, 0.2807572739242805, 0.2214203055131575, 0.26038267534032344, 0.2857608236081972, 0.2998435322334656, 0.20823319054415512, 0.30680842359428895, 0.23936438297213614, 0.19997550092187288, 0.21868533545357427, 0.14855877489314895, 0.24790470538354992, 0.24221285224972722, 0.23879758551270336, 0.184401175921873, 0.23469428534742587, 0.20432809102187555, 0.2049569802303003, 0.2141407639147732, 0.23227926887102068, 0.22667813006172954, 0.22731984348287393, 0.23507655460956534, 0.21614009245907273, 0.20696693624761664, 0.20003544409359653, 0.19007469207706795, 0.19651391562571763, 0.20497938421366468, 0.18243238512332005, 0.18845275621328728, 0.17709031898161243, 0.19602139383647776, 0.1980089800216398, 0.1766891745908753, 0.7316672162297998, 0.18662025928922021, 0.15198810430428944, 0.7074213567884591, 0.19847801788484865, 0.8463549391563634, 0.12233002186102404, 0.18748961164633648, 0.16116573274015922, 0.5726207945782452, 0.206559757119801, 0.5697026340264164, 0.5400694885246986, 0.20801355189804893, 0.20027449507309347, 0.16539951732927516, 0.5998542754940324, 0.49050152257843915, 0.18309205108541304, 0.19057587674729426, 0.18921150152284083, 0.20177465796634197, 0.18471904894247348, 0.17706826172658052, 0.1787711342216568, 0.1899866105636483, 0.18780124609213722, 0.08787437822659994, 0.10485226486299548, 0.07794156646887385, 0.09525166460793133, 0.08645448082724871, 0.08162473486016586, 0.08709509494193568, 0.07757612781331424, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "4e254853-5ce0-47ed-8fef-a50580998119", "solution": "class ImprovedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.local_search_radius = 0.1\n        \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            \n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "ImprovedHybridPSODE", "description": "Improving exploration and exploitation balance by incorporating a novel local search mechanism into the HybridPSODE algorithm.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4827274391903619, 0.4670375159564354, 0.5106279648667291, 0.5065560982528386, 0.4809643072280424, 0.5059382610483127, 0.4958981811346711, 0.46404439329059, 0.4983743322045344, 0.16017465466342218, 0.1349840449203239, 0.10565557587112995, 0.18601392743812994, 0.1550802004144627, 0.12978386259802244, 0.18694508119235365, 0.1782212787809342, 0.15359631661172224, 0.08325792310038127, 0.10351618201892832, 0.10587784057677596, 0.10225283874680358, 0.13382643752965728, 0.11206632128703642, 0.09373218869524969, 0.12435342413999073, 0.09863702880302849, 0.10097013661782761, 0.11292390118694506, 0.06090100090125128, 0.0977170463292597, 0.08103853468258171, 0.05206841517191041, 0.08283774618257345, 0.10520933164285817, 0.05298459332830929, 0.9148433182833823, 0.8566539366328891, 0.8261632984876867, 0.8639296096202178, 0.8298831906728873, 0.8382563539603459, 0.8906339548009615, 0.8825221648984247, 0.8498282017999435, 0.28133512729872256, 0.2611441815428155, 0.3106039984085325, 0.28466300795800803, 0.269721211733855, 0.27671588772552846, 0.2503517746513272, 0.3159904037658601, 0.22472971334229175, 0.3211197949297362, 0.13923281304909418, 0.32263787447708003, 0.3456381141044207, 0.3395887763203699, 0.7245236663162515, 0.30477332151463166, 0.23523954020402493, 0.6919482131752175, 0.15242651113482464, 0.19205114712546545, 0.1796405155765568, 0.18536825427138004, 0.18335025491247348, 0.12176512455988409, 0.16156770779972907, 0.19165906091706697, 0.22434813511565121, 0.15932292891098276, 0.16975935360514283, 0.20396015218404073, 0.23913330792030085, 0.20865753987393243, 0.19212702456433473, 0.17947139514025223, 0.15396802795483966, 0.20266141954775907, 0.009769971199454774, 0.02392102080930858, 0.03459176289710597, 0.06819191609704556, 0.018524593633467146, 0.008219901621488668, 0.057844860849513124, 0.016462929585292274, 0.030988002683601024, 0.14571664640139315, 0.03420510706542612, 0.26337042794958987, 0.14575038733772194, 0.05851291776906453, 0.07919385914496557, 0.16946690149440313, 0.1782729053642197, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.0008149569608036922, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.11604539658528834, 0.119743290950594, 0.09851362411483655, 0.06962048604537008, 0.12350973097362727, 0.08956400932768394, 0.0819564686081572, 0.08159911437742795, 0.39354961280485223, 0.4027074099220117, 0.5156512108976494, 0.4162980871450732, 0.37613615314282034, 0.4034081881612709, 0.42767185011020725, 0.4260067680091565, 0.4371113372864899, 0.04088385148645213, 0.09332343718791292, 0.07581666027381817, 0.09406584498518222, 0.09036121121973428, 0.10338379991185398, 0.10233173014173369, 0.0953384742785085, 0.10759678365824255, 0.16631567729451635, 0.2684287117851233, 0.251816704683522, 0.2185221626253555, 0.2604036701833664, 0.26901454228341426, 0.252650156927386, 0.1739288632562921, 0.19757198170447432, 0.2747356229282495, 0.2807572739242805, 0.2214203055131575, 0.26038267534032344, 0.2857608236081972, 0.2998435322334656, 0.20823319054415512, 0.30680842359428895, 0.23936438297213614, 0.19997550092187288, 0.21868533545357427, 0.14855877489314895, 0.24790470538354992, 0.24221285224972722, 0.23879758551270336, 0.184401175921873, 0.23469428534742587, 0.20432809102187555, 0.2049569802303003, 0.2141407639147732, 0.23227926887102068, 0.22667813006172954, 0.22731984348287393, 0.23507655460956534, 0.21614009245907273, 0.20696693624761664, 0.20003544409359653, 0.19007469207706795, 0.19651391562571763, 0.20497938421366468, 0.18243238512332005, 0.18845275621328728, 0.17709031898161243, 0.19602139383647776, 0.1980089800216398, 0.1766891745908753, 0.7316672162297998, 0.18662025928922021, 0.15198810430428944, 0.7074213567884591, 0.19847801788484865, 0.8463549391563634, 0.12233002186102404, 0.18748961164633648, 0.16116573274015922, 0.5726207945782452, 0.206559757119801, 0.5697026340264164, 0.5400694885246986, 0.20801355189804893, 0.20027449507309347, 0.16539951732927516, 0.5998542754940324, 0.49050152257843915, 0.18309205108541304, 0.19057587674729426, 0.18921150152284083, 0.20177465796634197, 0.18471904894247348, 0.17706826172658052, 0.1787711342216568, 0.1899866105636483, 0.18780124609213722, 0.08787437822659994, 0.10485226486299548, 0.07794156646887385, 0.09525166460793133, 0.08645448082724871, 0.08162473486016586, 0.08709509494193568, 0.07757612781331424, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "c4504f6b-07a5-46aa-bad7-f80726761294", "solution": "import numpy as np\n\nclass DynamicLocalSearch(ImprovedHybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.min_local_search_radius = 0.01\n        self.max_local_search_radius = 0.1\n        \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search with dynamic radius\n                diversity = np.std(self.particles, axis=0)\n                dynamic_radius = np.clip(self.local_search_radius * (np.mean(diversity) / (np.max(diversity) + 1e-6)), self.min_local_search_radius, self.max_local_search_radius)\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-dynamic_radius, dynamic_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            \n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "DynamicLocalSearch", "description": "Enhancing local search capability by dynamically adjusting the search radius based on population diversity.", "configspace": "", "generation": 51, "fitness": 0.23298459293944418, "feedback": "The algorithm DynamicLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4636950278733477, 0.47006364293996916, 0.5159753576322533, 0.4746608993398741, 0.5084891142754365, 0.4920443180308868, 0.48722977312605664, 0.45962199335006504, 0.49924681227817325, 0.1515275223345367, 0.15397151833173084, 0.20606147425077947, 0.156195928566928, 0.11879305300362542, 0.1398972376506199, 0.1561741212173562, 0.1445922048043331, 0.16773669495469257, 0.10125092150605686, 0.12323362202680255, 0.12334023724794929, 0.12192940301804889, 0.10158961619046836, 0.10156619187141691, 0.0764779014745427, 0.10661216133917062, 0.09973933926239675, 0.09336317432246999, 0.08288218922732593, 0.07133622435784215, 0.08179256086385844, 0.08182152878057136, 0.06861590669146134, 0.1349279107838407, 0.10520933164285817, 0.08995730659907619, 0.8612113290845105, 0.8022876594311554, 0.9134260428423414, 0.8270544755089558, 0.8897142980934081, 0.8413571932539001, 0.9062318405149568, 0.8414635476547629, 0.9263261298095108, 0.26938624534729927, 0.2889173601115661, 0.2727011636597082, 0.3218904542923091, 0.269721211733855, 0.1509738191012573, 0.28284025413026215, 0.2924127050875178, 0.2701912784719279, 0.38068795999129346, 0.21413878587674084, 0.7310604436161691, 0.21478980892573074, 0.33390517617016213, 0.3476530346273491, 0.22772310038492682, 0.48847489163422775, 0.2910381805795139, 0.15783511822457463, 0.1656520927794487, 0.118327566425526, 0.18458952323511513, 0.18036374173962522, 0.11319767715130091, 0.17394069774603538, 0.18777634709973356, 0.24829558911398186, 0.17718745409867065, 0.1588444353719708, 0.12945905471607533, 0.17945132237851136, 0.12547782567464405, 0.17619930482807955, 0.1913880265227884, 0.17307147557713887, 0.1425362068200362, 9.999999999998899e-05, 0.021363907760804213, 9.999999999998899e-05, 0.02171392727895549, 0.05065933861771754, 0.10217286277329385, 0.02222814103275339, 9.999999999998899e-05, 0.07417597515918328, 0.21128390564100796, 0.12948928478399557, 0.10583513444547699, 0.09436017033387856, 0.08891979732904076, 0.12853144120218385, 0.14306508261822581, 0.13744180988845578, 0.08829778841618241, 9.999999999998899e-05, 9.999999999998899e-05, 0.007262328070015256, 9.999999999998899e-05, 0.001011153644226992, 0.0398395423929464, 9.999999999998899e-05, 0.0007538825080044553, 0.014310563636823481, 0.0768066198721663, 0.11604539658528834, 0.1330035053699783, 0.133560379322604, 0.1295612175689086, 0.1255414199725654, 0.09528311228838249, 0.08681391196842836, 0.07560488430871426, 0.4061634941140466, 0.42989769442497305, 0.45869847942330955, 0.4399731730866485, 0.4014340414728883, 0.4751891886712405, 0.4398332765687535, 0.4072617518033044, 0.4467924025775535, 0.09880175464083862, 0.08916010766582627, 0.10268981327229776, 0.08228166498517364, 0.12679547278932057, 0.10292478974107888, 0.11285899652998488, 0.0953384742785085, 0.09763738420717838, 0.16361393565507465, 0.23057657945206722, 0.2642263595418305, 0.2945320181570942, 0.27224752204854663, 0.23487390246674578, 0.20416225492132067, 0.256510318041262, 0.26360989854004835, 0.16351670771187, 0.23099998348969608, 0.2016880021271248, 0.31399222528139115, 0.2788482925179351, 0.30077670829901915, 0.3156549908832742, 0.2973610753212661, 0.15290630372381164, 0.20819972420812272, 0.24816526085055235, 0.17092687460745404, 0.23870118482486902, 0.1918222119132521, 0.19810653039787018, 0.26045002644299664, 0.20984469056748933, 0.2231065946587384, 0.224475972572179, 0.1993254332363531, 0.23180084226322906, 0.20648782725934878, 0.19203666635630823, 0.22497669482308502, 0.19905641294709275, 0.21596379437031465, 0.2115630985551321, 0.19852620772026308, 0.18971040092918312, 0.19753077138639963, 0.19203631476124272, 0.20814711399294117, 0.19567716328918272, 0.20111956689339994, 0.27156079181251214, 0.21144764517085202, 0.18541249894869927, 0.18555696528698207, 0.7653689990987222, 0.7150725097644325, 0.19873596493966927, 0.1948637521373625, 0.16535333585082312, 0.16818448017915566, 0.8029043035555923, 0.16608874981936372, 0.20550964310874398, 0.5951733337726305, 0.20769236390011037, 0.1651927698894493, 0.5913103169845075, 0.5292157155504169, 0.5815070413376073, 0.10413685076016532, 0.17802821320337625, 0.1914538778809235, 0.1696954906130188, 0.17859835168452243, 0.1835159504146534, 0.17722771226297596, 0.19200026404743464, 0.17673450433703897, 0.1901155978393837, 0.0781222389479026, 0.09421940340106227, 0.07625196875300722, 0.08446481991998755, 0.11131327187218576, 0.08606496366845318, 0.07496321850363707, 0.07757612781331424, 0.0740210942343631]}, "mutation_prompt": null}
{"id": "7dc741f0-890f-4dee-9ce6-7bc2dfc8dc69", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchHybridPSODE(ImprovedHybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    perturbation_radius = np.random.uniform(0.01, 0.2)  # Adaptive perturbation based on landscape\n                    perturbation = np.random.uniform(-perturbation_radius, perturbation_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            else:  \n                super().__call__(func)\n        return self.global_best", "name": "AdaptiveLocalSearchHybridPSODE", "description": "Enhancing local search by adapting the perturbation radius based on function landscape to improve convergence.", "configspace": "", "generation": 52, "fitness": 0.23298459293944418, "feedback": "The algorithm AdaptiveLocalSearchHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4636950278733477, 0.47006364293996916, 0.5159753576322533, 0.4746608993398741, 0.5084891142754365, 0.4920443180308868, 0.48722977312605664, 0.45962199335006504, 0.49924681227817325, 0.1515275223345367, 0.15397151833173084, 0.20606147425077947, 0.156195928566928, 0.11879305300362542, 0.1398972376506199, 0.1561741212173562, 0.1445922048043331, 0.16773669495469257, 0.10125092150605686, 0.12323362202680255, 0.12334023724794929, 0.12192940301804889, 0.10158961619046836, 0.10156619187141691, 0.0764779014745427, 0.10661216133917062, 0.09973933926239675, 0.09336317432246999, 0.08288218922732593, 0.07133622435784215, 0.08179256086385844, 0.08182152878057136, 0.06861590669146134, 0.1349279107838407, 0.10520933164285817, 0.08995730659907619, 0.8612113290845105, 0.8022876594311554, 0.9134260428423414, 0.8270544755089558, 0.8897142980934081, 0.8413571932539001, 0.9062318405149568, 0.8414635476547629, 0.9263261298095108, 0.26938624534729927, 0.2889173601115661, 0.2727011636597082, 0.3218904542923091, 0.269721211733855, 0.1509738191012573, 0.28284025413026215, 0.2924127050875178, 0.2701912784719279, 0.38068795999129346, 0.21413878587674084, 0.7310604436161691, 0.21478980892573074, 0.33390517617016213, 0.3476530346273491, 0.22772310038492682, 0.48847489163422775, 0.2910381805795139, 0.15783511822457463, 0.1656520927794487, 0.118327566425526, 0.18458952323511513, 0.18036374173962522, 0.11319767715130091, 0.17394069774603538, 0.18777634709973356, 0.24829558911398186, 0.17718745409867065, 0.1588444353719708, 0.12945905471607533, 0.17945132237851136, 0.12547782567464405, 0.17619930482807955, 0.1913880265227884, 0.17307147557713887, 0.1425362068200362, 9.999999999998899e-05, 0.021363907760804213, 9.999999999998899e-05, 0.02171392727895549, 0.05065933861771754, 0.10217286277329385, 0.02222814103275339, 9.999999999998899e-05, 0.07417597515918328, 0.21128390564100796, 0.12948928478399557, 0.10583513444547699, 0.09436017033387856, 0.08891979732904076, 0.12853144120218385, 0.14306508261822581, 0.13744180988845578, 0.08829778841618241, 9.999999999998899e-05, 9.999999999998899e-05, 0.007262328070015256, 9.999999999998899e-05, 0.001011153644226992, 0.0398395423929464, 9.999999999998899e-05, 0.0007538825080044553, 0.014310563636823481, 0.0768066198721663, 0.11604539658528834, 0.1330035053699783, 0.133560379322604, 0.1295612175689086, 0.1255414199725654, 0.09528311228838249, 0.08681391196842836, 0.07560488430871426, 0.4061634941140466, 0.42989769442497305, 0.45869847942330955, 0.4399731730866485, 0.4014340414728883, 0.4751891886712405, 0.4398332765687535, 0.4072617518033044, 0.4467924025775535, 0.09880175464083862, 0.08916010766582627, 0.10268981327229776, 0.08228166498517364, 0.12679547278932057, 0.10292478974107888, 0.11285899652998488, 0.0953384742785085, 0.09763738420717838, 0.16361393565507465, 0.23057657945206722, 0.2642263595418305, 0.2945320181570942, 0.27224752204854663, 0.23487390246674578, 0.20416225492132067, 0.256510318041262, 0.26360989854004835, 0.16351670771187, 0.23099998348969608, 0.2016880021271248, 0.31399222528139115, 0.2788482925179351, 0.30077670829901915, 0.3156549908832742, 0.2973610753212661, 0.15290630372381164, 0.20819972420812272, 0.24816526085055235, 0.17092687460745404, 0.23870118482486902, 0.1918222119132521, 0.19810653039787018, 0.26045002644299664, 0.20984469056748933, 0.2231065946587384, 0.224475972572179, 0.1993254332363531, 0.23180084226322906, 0.20648782725934878, 0.19203666635630823, 0.22497669482308502, 0.19905641294709275, 0.21596379437031465, 0.2115630985551321, 0.19852620772026308, 0.18971040092918312, 0.19753077138639963, 0.19203631476124272, 0.20814711399294117, 0.19567716328918272, 0.20111956689339994, 0.27156079181251214, 0.21144764517085202, 0.18541249894869927, 0.18555696528698207, 0.7653689990987222, 0.7150725097644325, 0.19873596493966927, 0.1948637521373625, 0.16535333585082312, 0.16818448017915566, 0.8029043035555923, 0.16608874981936372, 0.20550964310874398, 0.5951733337726305, 0.20769236390011037, 0.1651927698894493, 0.5913103169845075, 0.5292157155504169, 0.5815070413376073, 0.10413685076016532, 0.17802821320337625, 0.1914538778809235, 0.1696954906130188, 0.17859835168452243, 0.1835159504146534, 0.17722771226297596, 0.19200026404743464, 0.17673450433703897, 0.1901155978393837, 0.0781222389479026, 0.09421940340106227, 0.07625196875300722, 0.08446481991998755, 0.11131327187218576, 0.08606496366845318, 0.07496321850363707, 0.07757612781331424, 0.0740210942343631]}, "mutation_prompt": null}
{"id": "a9723053-99b5-471c-8e16-6f959fbec5d1", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.local_search_radius = 0.1\n        self.adaptive_radius = 0.1\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n                    if np.random.rand() < self.adaptive_radius:\n                        self.local_search_radius = np.clip(self.local_search_radius * np.random.uniform(0.9, 1.1), 0.01, 1.0)\n\n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing local search diversity by incorporating adaptive search radius during exploration to improve solution quality.", "configspace": "", "generation": 53, "fitness": 0.23623005092064006, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4827274391903619, 0.4670375159564354, 0.5106279648667291, 0.5065560982528386, 0.4809643072280424, 0.5059382610483127, 0.4958981811346711, 0.46404439329059, 0.4983743322045344, 0.16017465466342218, 0.1349840449203239, 0.10565557587112995, 0.18601392743812994, 0.1550802004144627, 0.12978386259802244, 0.18694508119235365, 0.1782212787809342, 0.15359631661172224, 0.08325792310038127, 0.10351618201892832, 0.10587784057677596, 0.10225283874680358, 0.13382643752965728, 0.11206632128703642, 0.09373218869524969, 0.12435342413999073, 0.09863702880302849, 0.10097013661782761, 0.11292390118694506, 0.06090100090125128, 0.0977170463292597, 0.08103853468258171, 0.05206841517191041, 0.08283774618257345, 0.10520933164285817, 0.05298459332830929, 0.9148433182833823, 0.8566539366328891, 0.8261632984876867, 0.8639296096202178, 0.8298831906728873, 0.8382563539603459, 0.8906339548009615, 0.8825221648984247, 0.8498282017999435, 0.28133512729872256, 0.2611441815428155, 0.3106039984085325, 0.28466300795800803, 0.269721211733855, 0.27671588772552846, 0.2503517746513272, 0.3159904037658601, 0.22472971334229175, 0.3211197949297362, 0.13923281304909418, 0.32263787447708003, 0.3456381141044207, 0.3395887763203699, 0.7245236663162515, 0.30477332151463166, 0.23523954020402493, 0.6919482131752175, 0.15242651113482464, 0.19205114712546545, 0.1796405155765568, 0.18536825427138004, 0.18335025491247348, 0.12176512455988409, 0.16156770779972907, 0.19165906091706697, 0.22434813511565121, 0.15932292891098276, 0.16975935360514283, 0.20396015218404073, 0.23913330792030085, 0.20865753987393243, 0.19212702456433473, 0.17947139514025223, 0.15396802795483966, 0.20266141954775907, 0.009769971199454774, 0.02392102080930858, 0.03459176289710597, 0.06819191609704556, 0.018524593633467146, 0.008219901621488668, 0.057844860849513124, 0.016462929585292274, 0.030988002683601024, 0.14571664640139315, 0.03420510706542612, 0.26337042794958987, 0.14575038733772194, 0.05851291776906453, 0.07919385914496557, 0.16946690149440313, 0.1782729053642197, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.0008149569608036922, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.11604539658528834, 0.119743290950594, 0.09851362411483655, 0.06962048604537008, 0.12350973097362727, 0.08956400932768394, 0.0819564686081572, 0.08159911437742795, 0.39354961280485223, 0.4027074099220117, 0.5156512108976494, 0.4162980871450732, 0.37613615314282034, 0.4034081881612709, 0.42767185011020725, 0.4260067680091565, 0.4371113372864899, 0.04088385148645213, 0.09332343718791292, 0.07581666027381817, 0.09406584498518222, 0.09036121121973428, 0.10338379991185398, 0.10233173014173369, 0.0953384742785085, 0.10759678365824255, 0.16631567729451635, 0.2684287117851233, 0.251816704683522, 0.2185221626253555, 0.2604036701833664, 0.26901454228341426, 0.252650156927386, 0.1739288632562921, 0.19757198170447432, 0.2747356229282495, 0.2807572739242805, 0.2214203055131575, 0.26038267534032344, 0.2857608236081972, 0.2998435322334656, 0.20823319054415512, 0.30680842359428895, 0.23936438297213614, 0.19997550092187288, 0.21868533545357427, 0.14855877489314895, 0.24790470538354992, 0.24221285224972722, 0.23879758551270336, 0.184401175921873, 0.23469428534742587, 0.20432809102187555, 0.2049569802303003, 0.2141407639147732, 0.23227926887102068, 0.22667813006172954, 0.22731984348287393, 0.23507655460956534, 0.21614009245907273, 0.20696693624761664, 0.20003544409359653, 0.19007469207706795, 0.19651391562571763, 0.20497938421366468, 0.18243238512332005, 0.18845275621328728, 0.17709031898161243, 0.19602139383647776, 0.1980089800216398, 0.1766891745908753, 0.7316672162297998, 0.18662025928922021, 0.15198810430428944, 0.7074213567884591, 0.19847801788484865, 0.8463549391563634, 0.12233002186102404, 0.18748961164633648, 0.16116573274015922, 0.5726207945782452, 0.206559757119801, 0.5697026340264164, 0.5400694885246986, 0.20801355189804893, 0.20027449507309347, 0.16539951732927516, 0.5998542754940324, 0.49050152257843915, 0.18309205108541304, 0.19057587674729426, 0.18921150152284083, 0.20177465796634197, 0.18471904894247348, 0.17706826172658052, 0.1787711342216568, 0.1899866105636483, 0.18780124609213722, 0.08787437822659994, 0.10485226486299548, 0.07794156646887385, 0.09525166460793133, 0.08645448082724871, 0.08162473486016586, 0.08709509494193568, 0.07757612781331424, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "c29dc4e3-cc7e-4bd4-bc3a-8c3683842f36", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.local_search_radius = 0.1\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            \n            else:  # Enhanced Mutation\n                for i in range(self.population_size):\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_scale = np.exp(-t / self.budget)  # Dynamic mutation scale\n                        perturbation = np.random.normal(0, mutation_scale, self.dim)\n                        candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                        if func(candidate) < func(self.particles[i]):\n                            self.particles[i] = candidate.copy()\n        \n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing the exploration phase by incorporating a dynamic mutation strategy based on individual performance to adapt to the landscape.", "configspace": "", "generation": 54, "fitness": 0.16471533618535053, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.14.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.3705965146713821, 0.3557864786333571, 0.33281643193319965, 0.38942011938825494, 0.35577825594366885, 0.3643360492685548, 0.3893584943453843, 0.3462058992071628, 0.34665824794203404, 0.008801453787995683, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004986356581773044, 9.999999999998899e-05, 0.006913964776285142, 0.0031265857824368526, 0.0012181155130356336, 0.09068405860389761, 0.09003827646756146, 0.060926299216709, 0.08537966218423787, 0.08978563682119056, 0.07240536096090855, 0.09591700648916068, 0.08931012218760515, 0.07632018731026724, 0.0636275654341738, 0.06870507630890366, 0.05647714413373728, 0.07550561296402192, 0.07848625977526391, 0.049843534109941356, 0.052800080005371064, 0.057473071605614656, 0.05679930804676714, 0.7715564377387409, 0.5280879569462082, 0.6412072426790827, 0.41278395381964283, 0.6383638786982413, 0.6171817206025869, 0.6622293235812828, 0.5016314641912347, 0.7258410102303665, 0.1676443792869573, 0.20136042363445483, 0.12369329103681725, 0.18168213052383386, 0.20455026049321845, 0.15699616632039837, 0.1378100656263621, 0.1527868457039, 0.18257572785673326, 0.23242497493445025, 0.1642268261028137, 0.1565445225004901, 0.2016636379967458, 0.23983556066341538, 0.25245142578668334, 0.16606796226356724, 0.17770826941968276, 0.18510576188464567, 0.13722876381109472, 0.1870435800611867, 0.11810368553903905, 0.11211599757379465, 0.13955133758390204, 0.1330243424224613, 0.11912001701540254, 0.12244130533952136, 0.1604071974982737, 0.11670743365644176, 0.13873331297689562, 0.10932979248152586, 0.10502134648120387, 0.13689889660852184, 0.11878426938972442, 0.1328647232750958, 0.15790598463651073, 0.1335331950326607, 0.007767143899248374, 0.005078188164429953, 9.999999999998899e-05, 9.999999999998899e-05, 0.00023021123324984405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09747043975847969, 0.05166015211260888, 0.13955152799036474, 0.08196531410691454, 0.10115006464050258, 0.09133650897887924, 0.09029913111133103, 0.08175826289981347, 0.0789206389724868, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001657661280462741, 9.999999999998899e-05, 0.06417056120494558, 0.05067875464469884, 0.07428802184791838, 0.0688013567786071, 0.05765605226953541, 0.06302310496799146, 0.06405052851124382, 0.0739109379147711, 0.0734846305390422, 0.3361778875749991, 0.3202206160605813, 0.3243341385302695, 0.331194551088414, 0.30925179019135574, 0.3145735507583014, 0.32720952555779204, 0.32452513132100014, 0.3320278265309202, 0.07203322597455553, 0.09110957281553222, 0.08009701782284884, 0.08329916795211134, 0.06808902642404369, 0.09414540573642749, 0.073735490112661, 0.0916633045544637, 0.09028405874871892, 0.16113020506495357, 0.1589828909757347, 0.17322389599313304, 0.23341726359944337, 0.1874286262216931, 0.18845716501750098, 0.242366178327868, 0.19792670510874022, 0.16433973966396664, 0.17032452504974294, 0.21721006558603762, 0.18301213971697894, 0.2040444908444835, 0.1930897496434335, 0.19243022036873703, 0.17438661806169642, 0.2170969257801174, 0.1741386715978528, 0.1018684847646053, 0.13645863739198105, 0.1366930682580838, 0.12810733872209834, 0.1434383629185999, 0.16150064530657404, 0.1622288666396534, 0.16085193019741095, 0.12885405194706823, 0.20138248710692475, 0.16590299619823456, 0.18215289768342158, 0.1614878476658771, 0.17664769766308275, 0.1585633829257327, 0.16725208375914058, 0.16402400524531202, 0.1846389469399714, 0.18088350200198844, 0.18449779138894418, 0.19266291674222513, 0.23686149560115277, 0.1975331449661153, 0.19527304328576245, 0.17823317429869623, 0.1758915666151175, 0.1628297706240639, 0.3339698168538071, 0.159516317675802, 0.23120468994329546, 0.2973319081499758, 0.1855844324183975, 0.2442195059837302, 0.1603305985019564, 0.3921519095680369, 0.16042433668590206, 0.2432805136925097, 0.30371510396785295, 0.2410470412022775, 0.3202721383863324, 0.2022311848410291, 0.43703262933317244, 0.24182167364759077, 0.26840935792207987, 0.14968924753089907, 0.17745654617870044, 0.18561031553701768, 0.17144056930906149, 0.18294966202575857, 0.17594491649331578, 0.18195594997454323, 0.17294457059254675, 0.2111169302706044, 0.18041269107201696, 0.06377325969578995, 0.05872738322714266, 0.0703663528154832, 0.06639258596492559, 0.06793480045707256, 0.06545613880331835, 0.06525961712707973, 0.05887274034427736, 0.05594485247427039]}, "mutation_prompt": null}
{"id": "27d6f093-28a8-4a76-ae14-14e0330877c2", "solution": "import numpy as np\n\nclass DynamicLocalSearchHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.min_local_search_radius = 0.05\n        self.max_local_search_radius = 0.2\n        \n    def __call__(self, func):\n        for t in range(self.budget):\n            # Adapt local search radius based on performance\n            current_radius = self.min_local_search_radius + (self.max_local_search_radius - self.min_local_search_radius) * (t / self.budget)\n            \n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-current_radius, current_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            \n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "DynamicLocalSearchHybridPSODE", "description": "Enhancing the exploitation phase by implementing a dynamic local search mechanism that adapts its radius based on the performance of the algorithm.", "configspace": "", "generation": 55, "fitness": 0.23623005092064006, "feedback": "The algorithm DynamicLocalSearchHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4827274391903619, 0.4670375159564354, 0.5106279648667291, 0.5065560982528386, 0.4809643072280424, 0.5059382610483127, 0.4958981811346711, 0.46404439329059, 0.4983743322045344, 0.16017465466342218, 0.1349840449203239, 0.10565557587112995, 0.18601392743812994, 0.1550802004144627, 0.12978386259802244, 0.18694508119235365, 0.1782212787809342, 0.15359631661172224, 0.08325792310038127, 0.10351618201892832, 0.10587784057677596, 0.10225283874680358, 0.13382643752965728, 0.11206632128703642, 0.09373218869524969, 0.12435342413999073, 0.09863702880302849, 0.10097013661782761, 0.11292390118694506, 0.06090100090125128, 0.0977170463292597, 0.08103853468258171, 0.05206841517191041, 0.08283774618257345, 0.10520933164285817, 0.05298459332830929, 0.9148433182833823, 0.8566539366328891, 0.8261632984876867, 0.8639296096202178, 0.8298831906728873, 0.8382563539603459, 0.8906339548009615, 0.8825221648984247, 0.8498282017999435, 0.28133512729872256, 0.2611441815428155, 0.3106039984085325, 0.28466300795800803, 0.269721211733855, 0.27671588772552846, 0.2503517746513272, 0.3159904037658601, 0.22472971334229175, 0.3211197949297362, 0.13923281304909418, 0.32263787447708003, 0.3456381141044207, 0.3395887763203699, 0.7245236663162515, 0.30477332151463166, 0.23523954020402493, 0.6919482131752175, 0.15242651113482464, 0.19205114712546545, 0.1796405155765568, 0.18536825427138004, 0.18335025491247348, 0.12176512455988409, 0.16156770779972907, 0.19165906091706697, 0.22434813511565121, 0.15932292891098276, 0.16975935360514283, 0.20396015218404073, 0.23913330792030085, 0.20865753987393243, 0.19212702456433473, 0.17947139514025223, 0.15396802795483966, 0.20266141954775907, 0.009769971199454774, 0.02392102080930858, 0.03459176289710597, 0.06819191609704556, 0.018524593633467146, 0.008219901621488668, 0.057844860849513124, 0.016462929585292274, 0.030988002683601024, 0.14571664640139315, 0.03420510706542612, 0.26337042794958987, 0.14575038733772194, 0.05851291776906453, 0.07919385914496557, 0.16946690149440313, 0.1782729053642197, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.0008149569608036922, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.11604539658528834, 0.119743290950594, 0.09851362411483655, 0.06962048604537008, 0.12350973097362727, 0.08956400932768394, 0.0819564686081572, 0.08159911437742795, 0.39354961280485223, 0.4027074099220117, 0.5156512108976494, 0.4162980871450732, 0.37613615314282034, 0.4034081881612709, 0.42767185011020725, 0.4260067680091565, 0.4371113372864899, 0.04088385148645213, 0.09332343718791292, 0.07581666027381817, 0.09406584498518222, 0.09036121121973428, 0.10338379991185398, 0.10233173014173369, 0.0953384742785085, 0.10759678365824255, 0.16631567729451635, 0.2684287117851233, 0.251816704683522, 0.2185221626253555, 0.2604036701833664, 0.26901454228341426, 0.252650156927386, 0.1739288632562921, 0.19757198170447432, 0.2747356229282495, 0.2807572739242805, 0.2214203055131575, 0.26038267534032344, 0.2857608236081972, 0.2998435322334656, 0.20823319054415512, 0.30680842359428895, 0.23936438297213614, 0.19997550092187288, 0.21868533545357427, 0.14855877489314895, 0.24790470538354992, 0.24221285224972722, 0.23879758551270336, 0.184401175921873, 0.23469428534742587, 0.20432809102187555, 0.2049569802303003, 0.2141407639147732, 0.23227926887102068, 0.22667813006172954, 0.22731984348287393, 0.23507655460956534, 0.21614009245907273, 0.20696693624761664, 0.20003544409359653, 0.19007469207706795, 0.19651391562571763, 0.20497938421366468, 0.18243238512332005, 0.18845275621328728, 0.17709031898161243, 0.19602139383647776, 0.1980089800216398, 0.1766891745908753, 0.7316672162297998, 0.18662025928922021, 0.15198810430428944, 0.7074213567884591, 0.19847801788484865, 0.8463549391563634, 0.12233002186102404, 0.18748961164633648, 0.16116573274015922, 0.5726207945782452, 0.206559757119801, 0.5697026340264164, 0.5400694885246986, 0.20801355189804893, 0.20027449507309347, 0.16539951732927516, 0.5998542754940324, 0.49050152257843915, 0.18309205108541304, 0.19057587674729426, 0.18921150152284083, 0.20177465796634197, 0.18471904894247348, 0.17706826172658052, 0.1787711342216568, 0.1899866105636483, 0.18780124609213722, 0.08787437822659994, 0.10485226486299548, 0.07794156646887385, 0.09525166460793133, 0.08645448082724871, 0.08162473486016586, 0.08709509494193568, 0.07757612781331424, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "34531496-fa17-43df-90ae-6863fd29acab", "solution": "class EnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.local_search_radius = 0.1\n        self.mutation_rate = 0.5\n        \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            \n            else:  # Updated Global Search with Dynamic Mutation\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim) * np.random.rand(self.dim) * self.mutation_rate\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing global search by introducing a dynamic mutation strategy for population diversity.", "configspace": "", "generation": 56, "fitness": 0.061617481515551235, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.10392287790149435, 0.0869259613480422, 0.12386884582129165, 0.12771042462534365, 0.0810928993659652, 0.10843034312011912, 0.10469385020479371, 0.10346259248555179, 0.09027707832040688, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0050003242486602595, 0.03079520782630074, 9.999999999998899e-05, 0.022855657985599298, 0.012110713971017373, 0.03551462738365718, 0.03481470953007881, 0.006951516448046147, 0.057430474959938915, 0.0036911701208151015, 9.999999999998899e-05, 9.999999999998899e-05, 0.05543544547745327, 0.012905268920315183, 9.999999999998899e-05, 9.999999999998899e-05, 0.00036572163970172156, 9.999999999998899e-05, 0.059993794477042894, 0.04487611489552523, 0.06069040831661843, 0.062205049122888934, 0.05746573944770095, 0.04900520531651331, 0.07785701564397751, 0.06031629220156898, 0.05160458244912991, 0.02910155708194795, 0.0001638589146146785, 0.010628442921602588, 0.06519548722681445, 0.01614141413917647, 0.05373230006008034, 0.0029879107947672345, 0.02781797685658549, 9.999999999998899e-05, 0.12461736419808045, 0.044456246333785976, 0.015453397828281812, 0.004610677445167521, 0.03161834985156908, 9.999999999998899e-05, 0.05239001209979355, 0.06215489992128276, 0.03196271467821643, 0.003486569821747776, 0.0010408878032427404, 9.999999999998899e-05, 9.999999999998899e-05, 0.00464754285786928, 9.999999999998899e-05, 0.001995270444539732, 9.999999999998899e-05, 0.0513619854045535, 0.03765261163514766, 9.999999999998899e-05, 9.999999999998899e-05, 0.006185437722378784, 9.999999999998899e-05, 0.000932537377585474, 0.026864272920959942, 9.999999999998899e-05, 0.009521513806116322, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06761206216050175, 0.06408559357814048, 0.0870196391220206, 0.06301969346053671, 0.019491227842002412, 0.02321330473464256, 0.11413563755925538, 0.05357813372981057, 0.0344299396711214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008752312882850832, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010293165393815418, 0.14105993430850539, 0.13831580296179602, 0.18276490952139812, 0.12092912579905146, 0.11575156413356014, 0.11274916069597618, 0.14459919271391897, 0.11585773932362786, 0.160400959872957, 0.014627000966812909, 0.0016869884305363847, 9.999999999998899e-05, 0.02300345718627328, 0.011513456129545574, 0.046236052702135044, 0.017910012000445064, 0.015213922817012615, 0.07022835398482563, 0.11657147196369477, 0.12263992676125568, 0.07660975971760109, 0.20352335295916624, 0.13180614153177228, 0.11243623679078496, 0.15146043560616507, 0.09586766790298262, 0.1079420611204267, 0.11717781642213909, 0.12229766752808302, 0.12246253783586125, 0.14311113771415185, 0.13163313092269568, 0.12624909245143734, 0.13829651584280234, 0.1846554741503763, 0.10485365670992164, 0.062289944307354905, 0.0582711665647313, 0.0677391277701872, 0.0822626913298623, 0.07627521687702954, 0.06994143741824155, 0.07296281390390102, 0.12167706147117063, 0.050710281747817665, 0.1569550590257036, 0.0955007660283792, 0.14546311110160426, 0.15522623236933686, 0.11542123948823013, 0.1468354759819127, 0.1510136212162002, 0.10144810282873185, 0.1453063928264242, 0.006919346678900595, 9.999999999998899e-05, 0.0990276936193355, 0.10561589654758541, 0.02229605105289245, 0.07625923952218328, 0.04740132235432026, 0.04489664573606589, 0.016109193321835802, 0.11138089202597512, 0.12010523325992639, 0.131872456855199, 0.12013786183827979, 0.1741460180748079, 0.1382406966812434, 0.09857390671968225, 0.1448422246312857, 0.13615261232413944, 0.09973994624673865, 0.1349940147097517, 0.09937787525375408, 0.13874490124046535, 0.0865223297334855, 0.07889300426341872, 0.07710549694910385, 0.10051161864589553, 0.09520377669166413, 0.20750985192524962, 0.19431252116486064, 0.18285323661636477, 0.20937986201056225, 0.20994093296301086, 0.1973390143349033, 0.20497833174543545, 0.21125649083425602, 0.19777147680322105, 0.036641827321129306, 0.037504143007947466, 0.05562092476854219, 0.041765479603962596, 0.05097053766074555, 0.032649222951636525, 0.0466344818032145, 0.03413213907884949, 0.04567218793443839]}, "mutation_prompt": null}
{"id": "020cd6bc-a2ec-467c-bcd3-753fd7d24ec8", "solution": "class EnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.local_search_radius = 0.1\n        \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search with dynamic radius\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n                        self.local_search_radius *= 1.1  # Increase search radius on fitness improvement\n                    else:\n                        self.local_search_radius *= 0.9  # Decrease search radius on fitness degradation\n            \n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing the exploration capability by introducing a dynamic adaptive local search strategy based on fitness improvement.", "configspace": "", "generation": 57, "fitness": 0.23623005092064006, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4827274391903619, 0.4670375159564354, 0.5106279648667291, 0.5065560982528386, 0.4809643072280424, 0.5059382610483127, 0.4958981811346711, 0.46404439329059, 0.4983743322045344, 0.16017465466342218, 0.1349840449203239, 0.10565557587112995, 0.18601392743812994, 0.1550802004144627, 0.12978386259802244, 0.18694508119235365, 0.1782212787809342, 0.15359631661172224, 0.08325792310038127, 0.10351618201892832, 0.10587784057677596, 0.10225283874680358, 0.13382643752965728, 0.11206632128703642, 0.09373218869524969, 0.12435342413999073, 0.09863702880302849, 0.10097013661782761, 0.11292390118694506, 0.06090100090125128, 0.0977170463292597, 0.08103853468258171, 0.05206841517191041, 0.08283774618257345, 0.10520933164285817, 0.05298459332830929, 0.9148433182833823, 0.8566539366328891, 0.8261632984876867, 0.8639296096202178, 0.8298831906728873, 0.8382563539603459, 0.8906339548009615, 0.8825221648984247, 0.8498282017999435, 0.28133512729872256, 0.2611441815428155, 0.3106039984085325, 0.28466300795800803, 0.269721211733855, 0.27671588772552846, 0.2503517746513272, 0.3159904037658601, 0.22472971334229175, 0.3211197949297362, 0.13923281304909418, 0.32263787447708003, 0.3456381141044207, 0.3395887763203699, 0.7245236663162515, 0.30477332151463166, 0.23523954020402493, 0.6919482131752175, 0.15242651113482464, 0.19205114712546545, 0.1796405155765568, 0.18536825427138004, 0.18335025491247348, 0.12176512455988409, 0.16156770779972907, 0.19165906091706697, 0.22434813511565121, 0.15932292891098276, 0.16975935360514283, 0.20396015218404073, 0.23913330792030085, 0.20865753987393243, 0.19212702456433473, 0.17947139514025223, 0.15396802795483966, 0.20266141954775907, 0.009769971199454774, 0.02392102080930858, 0.03459176289710597, 0.06819191609704556, 0.018524593633467146, 0.008219901621488668, 0.057844860849513124, 0.016462929585292274, 0.030988002683601024, 0.14571664640139315, 0.03420510706542612, 0.26337042794958987, 0.14575038733772194, 0.05851291776906453, 0.07919385914496557, 0.16946690149440313, 0.1782729053642197, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.0008149569608036922, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.11604539658528834, 0.119743290950594, 0.09851362411483655, 0.06962048604537008, 0.12350973097362727, 0.08956400932768394, 0.0819564686081572, 0.08159911437742795, 0.39354961280485223, 0.4027074099220117, 0.5156512108976494, 0.4162980871450732, 0.37613615314282034, 0.4034081881612709, 0.42767185011020725, 0.4260067680091565, 0.4371113372864899, 0.04088385148645213, 0.09332343718791292, 0.07581666027381817, 0.09406584498518222, 0.09036121121973428, 0.10338379991185398, 0.10233173014173369, 0.0953384742785085, 0.10759678365824255, 0.16631567729451635, 0.2684287117851233, 0.251816704683522, 0.2185221626253555, 0.2604036701833664, 0.26901454228341426, 0.252650156927386, 0.1739288632562921, 0.19757198170447432, 0.2747356229282495, 0.2807572739242805, 0.2214203055131575, 0.26038267534032344, 0.2857608236081972, 0.2998435322334656, 0.20823319054415512, 0.30680842359428895, 0.23936438297213614, 0.19997550092187288, 0.21868533545357427, 0.14855877489314895, 0.24790470538354992, 0.24221285224972722, 0.23879758551270336, 0.184401175921873, 0.23469428534742587, 0.20432809102187555, 0.2049569802303003, 0.2141407639147732, 0.23227926887102068, 0.22667813006172954, 0.22731984348287393, 0.23507655460956534, 0.21614009245907273, 0.20696693624761664, 0.20003544409359653, 0.19007469207706795, 0.19651391562571763, 0.20497938421366468, 0.18243238512332005, 0.18845275621328728, 0.17709031898161243, 0.19602139383647776, 0.1980089800216398, 0.1766891745908753, 0.7316672162297998, 0.18662025928922021, 0.15198810430428944, 0.7074213567884591, 0.19847801788484865, 0.8463549391563634, 0.12233002186102404, 0.18748961164633648, 0.16116573274015922, 0.5726207945782452, 0.206559757119801, 0.5697026340264164, 0.5400694885246986, 0.20801355189804893, 0.20027449507309347, 0.16539951732927516, 0.5998542754940324, 0.49050152257843915, 0.18309205108541304, 0.19057587674729426, 0.18921150152284083, 0.20177465796634197, 0.18471904894247348, 0.17706826172658052, 0.1787711342216568, 0.1899866105636483, 0.18780124609213722, 0.08787437822659994, 0.10485226486299548, 0.07794156646887385, 0.09525166460793133, 0.08645448082724871, 0.08162473486016586, 0.08709509494193568, 0.07757612781331424, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "62fed28e-3995-4923-97c6-6db6ad82ac35", "solution": "class ImprovedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.local_search_radius = 0.1\n        \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            \n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "ImprovedHybridPSODE", "description": "Improving exploration and exploitation balance by incorporating a novel local search mechanism into the HybridPSODE algorithm.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4827274391903619, 0.4670375159564354, 0.5106279648667291, 0.5065560982528386, 0.4809643072280424, 0.5059382610483127, 0.4958981811346711, 0.46404439329059, 0.4983743322045344, 0.16017465466342218, 0.1349840449203239, 0.10565557587112995, 0.18601392743812994, 0.1550802004144627, 0.12978386259802244, 0.18694508119235365, 0.1782212787809342, 0.15359631661172224, 0.08325792310038127, 0.10351618201892832, 0.10587784057677596, 0.10225283874680358, 0.13382643752965728, 0.11206632128703642, 0.09373218869524969, 0.12435342413999073, 0.09863702880302849, 0.10097013661782761, 0.11292390118694506, 0.06090100090125128, 0.0977170463292597, 0.08103853468258171, 0.05206841517191041, 0.08283774618257345, 0.10520933164285817, 0.05298459332830929, 0.9148433182833823, 0.8566539366328891, 0.8261632984876867, 0.8639296096202178, 0.8298831906728873, 0.8382563539603459, 0.8906339548009615, 0.8825221648984247, 0.8498282017999435, 0.28133512729872256, 0.2611441815428155, 0.3106039984085325, 0.28466300795800803, 0.269721211733855, 0.27671588772552846, 0.2503517746513272, 0.3159904037658601, 0.22472971334229175, 0.3211197949297362, 0.13923281304909418, 0.32263787447708003, 0.3456381141044207, 0.3395887763203699, 0.7245236663162515, 0.30477332151463166, 0.23523954020402493, 0.6919482131752175, 0.15242651113482464, 0.19205114712546545, 0.1796405155765568, 0.18536825427138004, 0.18335025491247348, 0.12176512455988409, 0.16156770779972907, 0.19165906091706697, 0.22434813511565121, 0.15932292891098276, 0.16975935360514283, 0.20396015218404073, 0.23913330792030085, 0.20865753987393243, 0.19212702456433473, 0.17947139514025223, 0.15396802795483966, 0.20266141954775907, 0.009769971199454774, 0.02392102080930858, 0.03459176289710597, 0.06819191609704556, 0.018524593633467146, 0.008219901621488668, 0.057844860849513124, 0.016462929585292274, 0.030988002683601024, 0.14571664640139315, 0.03420510706542612, 0.26337042794958987, 0.14575038733772194, 0.05851291776906453, 0.07919385914496557, 0.16946690149440313, 0.1782729053642197, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.0008149569608036922, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.11604539658528834, 0.119743290950594, 0.09851362411483655, 0.06962048604537008, 0.12350973097362727, 0.08956400932768394, 0.0819564686081572, 0.08159911437742795, 0.39354961280485223, 0.4027074099220117, 0.5156512108976494, 0.4162980871450732, 0.37613615314282034, 0.4034081881612709, 0.42767185011020725, 0.4260067680091565, 0.4371113372864899, 0.04088385148645213, 0.09332343718791292, 0.07581666027381817, 0.09406584498518222, 0.09036121121973428, 0.10338379991185398, 0.10233173014173369, 0.0953384742785085, 0.10759678365824255, 0.16631567729451635, 0.2684287117851233, 0.251816704683522, 0.2185221626253555, 0.2604036701833664, 0.26901454228341426, 0.252650156927386, 0.1739288632562921, 0.19757198170447432, 0.2747356229282495, 0.2807572739242805, 0.2214203055131575, 0.26038267534032344, 0.2857608236081972, 0.2998435322334656, 0.20823319054415512, 0.30680842359428895, 0.23936438297213614, 0.19997550092187288, 0.21868533545357427, 0.14855877489314895, 0.24790470538354992, 0.24221285224972722, 0.23879758551270336, 0.184401175921873, 0.23469428534742587, 0.20432809102187555, 0.2049569802303003, 0.2141407639147732, 0.23227926887102068, 0.22667813006172954, 0.22731984348287393, 0.23507655460956534, 0.21614009245907273, 0.20696693624761664, 0.20003544409359653, 0.19007469207706795, 0.19651391562571763, 0.20497938421366468, 0.18243238512332005, 0.18845275621328728, 0.17709031898161243, 0.19602139383647776, 0.1980089800216398, 0.1766891745908753, 0.7316672162297998, 0.18662025928922021, 0.15198810430428944, 0.7074213567884591, 0.19847801788484865, 0.8463549391563634, 0.12233002186102404, 0.18748961164633648, 0.16116573274015922, 0.5726207945782452, 0.206559757119801, 0.5697026340264164, 0.5400694885246986, 0.20801355189804893, 0.20027449507309347, 0.16539951732927516, 0.5998542754940324, 0.49050152257843915, 0.18309205108541304, 0.19057587674729426, 0.18921150152284083, 0.20177465796634197, 0.18471904894247348, 0.17706826172658052, 0.1787711342216568, 0.1899866105636483, 0.18780124609213722, 0.08787437822659994, 0.10485226486299548, 0.07794156646887385, 0.09525166460793133, 0.08645448082724871, 0.08162473486016586, 0.08709509494193568, 0.07757612781331424, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "20008e24-8ceb-41d1-b22d-0d486a36a604", "solution": "import numpy as np\nfrom scipy.stats import levy\nfrom numpy.random import default_rng\n\nclass DynamicInertiaImprovedHybridPSODE(ImprovedHybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.inertia_weight = 0.5\n        self.inertia_decay = 0.99\n\n    def __call__(self, func):\n        rng = default_rng()\n        for t in range(self.budget):\n            self.inertia_weight *= self.inertia_decay\n            for i in range(self.population_size):\n                perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                velocity = self.inertia_weight * self.velocities[i] + self.c1 * rng.uniform(0, 1, self.dim) * (self.pbests[i] - self.particles[i]) + self.c2 * rng.uniform(0, 1, self.dim) * (self.global_best - self.particles[i])\n                candidate = np.clip(self.particles[i] + velocity + perturbation, -5.0, 5.0)\n                if func(candidate) < func(self.particles[i]):\n                    self.particles[i] = candidate.copy()\n        return self.global_best", "name": "DynamicInertiaImprovedHybridPSODE", "description": "Enhancing global search capabilities by introducing a dynamic inertia weight mechanism to balance exploration and exploitation in the ImprovedHybridPSODE algorithm.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'DynamicInertiaImprovedHybridPSODE' object has no attribute 'pbests'\").", "error": "AttributeError(\"'DynamicInertiaImprovedHybridPSODE' object has no attribute 'pbests'\")", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {}, "mutation_prompt": null}
{"id": "81f67ebb-e39d-4078-88de-00bf5682a0c6", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.base_local_search_radius = 0.1\n        self.dynamic_radius_factor = 0.5\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    dynamic_radius = self.base_local_search_radius * (1 + self.dynamic_radius_factor * (func(self.particles[i]) - func(self.global_best)))\n                    perturbation = np.random.uniform(-dynamic_radius, dynamic_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n\n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing diversity maintenance by introducing a dynamic local search radius adaptation based on the population's performance.", "configspace": "", "generation": 60, "fitness": 0.23623005092064006, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4827274391903619, 0.4670375159564354, 0.5106279648667291, 0.5065560982528386, 0.4809643072280424, 0.5059382610483127, 0.4958981811346711, 0.46404439329059, 0.4983743322045344, 0.16017465466342218, 0.1349840449203239, 0.10565557587112995, 0.18601392743812994, 0.1550802004144627, 0.12978386259802244, 0.18694508119235365, 0.1782212787809342, 0.15359631661172224, 0.08325792310038127, 0.10351618201892832, 0.10587784057677596, 0.10225283874680358, 0.13382643752965728, 0.11206632128703642, 0.09373218869524969, 0.12435342413999073, 0.09863702880302849, 0.10097013661782761, 0.11292390118694506, 0.06090100090125128, 0.0977170463292597, 0.08103853468258171, 0.05206841517191041, 0.08283774618257345, 0.10520933164285817, 0.05298459332830929, 0.9148433182833823, 0.8566539366328891, 0.8261632984876867, 0.8639296096202178, 0.8298831906728873, 0.8382563539603459, 0.8906339548009615, 0.8825221648984247, 0.8498282017999435, 0.28133512729872256, 0.2611441815428155, 0.3106039984085325, 0.28466300795800803, 0.269721211733855, 0.27671588772552846, 0.2503517746513272, 0.3159904037658601, 0.22472971334229175, 0.3211197949297362, 0.13923281304909418, 0.32263787447708003, 0.3456381141044207, 0.3395887763203699, 0.7245236663162515, 0.30477332151463166, 0.23523954020402493, 0.6919482131752175, 0.15242651113482464, 0.19205114712546545, 0.1796405155765568, 0.18536825427138004, 0.18335025491247348, 0.12176512455988409, 0.16156770779972907, 0.19165906091706697, 0.22434813511565121, 0.15932292891098276, 0.16975935360514283, 0.20396015218404073, 0.23913330792030085, 0.20865753987393243, 0.19212702456433473, 0.17947139514025223, 0.15396802795483966, 0.20266141954775907, 0.009769971199454774, 0.02392102080930858, 0.03459176289710597, 0.06819191609704556, 0.018524593633467146, 0.008219901621488668, 0.057844860849513124, 0.016462929585292274, 0.030988002683601024, 0.14571664640139315, 0.03420510706542612, 0.26337042794958987, 0.14575038733772194, 0.05851291776906453, 0.07919385914496557, 0.16946690149440313, 0.1782729053642197, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.0008149569608036922, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.11604539658528834, 0.119743290950594, 0.09851362411483655, 0.06962048604537008, 0.12350973097362727, 0.08956400932768394, 0.0819564686081572, 0.08159911437742795, 0.39354961280485223, 0.4027074099220117, 0.5156512108976494, 0.4162980871450732, 0.37613615314282034, 0.4034081881612709, 0.42767185011020725, 0.4260067680091565, 0.4371113372864899, 0.04088385148645213, 0.09332343718791292, 0.07581666027381817, 0.09406584498518222, 0.09036121121973428, 0.10338379991185398, 0.10233173014173369, 0.0953384742785085, 0.10759678365824255, 0.16631567729451635, 0.2684287117851233, 0.251816704683522, 0.2185221626253555, 0.2604036701833664, 0.26901454228341426, 0.252650156927386, 0.1739288632562921, 0.19757198170447432, 0.2747356229282495, 0.2807572739242805, 0.2214203055131575, 0.26038267534032344, 0.2857608236081972, 0.2998435322334656, 0.20823319054415512, 0.30680842359428895, 0.23936438297213614, 0.19997550092187288, 0.21868533545357427, 0.14855877489314895, 0.24790470538354992, 0.24221285224972722, 0.23879758551270336, 0.184401175921873, 0.23469428534742587, 0.20432809102187555, 0.2049569802303003, 0.2141407639147732, 0.23227926887102068, 0.22667813006172954, 0.22731984348287393, 0.23507655460956534, 0.21614009245907273, 0.20696693624761664, 0.20003544409359653, 0.19007469207706795, 0.19651391562571763, 0.20497938421366468, 0.18243238512332005, 0.18845275621328728, 0.17709031898161243, 0.19602139383647776, 0.1980089800216398, 0.1766891745908753, 0.7316672162297998, 0.18662025928922021, 0.15198810430428944, 0.7074213567884591, 0.19847801788484865, 0.8463549391563634, 0.12233002186102404, 0.18748961164633648, 0.16116573274015922, 0.5726207945782452, 0.206559757119801, 0.5697026340264164, 0.5400694885246986, 0.20801355189804893, 0.20027449507309347, 0.16539951732927516, 0.5998542754940324, 0.49050152257843915, 0.18309205108541304, 0.19057587674729426, 0.18921150152284083, 0.20177465796634197, 0.18471904894247348, 0.17706826172658052, 0.1787711342216568, 0.1899866105636483, 0.18780124609213722, 0.08787437822659994, 0.10485226486299548, 0.07794156646887385, 0.09525166460793133, 0.08645448082724871, 0.08162473486016586, 0.08709509494193568, 0.07757612781331424, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "5cfc7f0e-e68f-46d0-917d-7fc05147f953", "solution": "class AdaptiveLocalSearchHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.max_local_search_radius = 0.1\n        self.min_local_search_radius = 0.01\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                diversity = np.std(self.particles, axis=0)\n                adjusted_radius = np.clip(self.local_search_radius * np.mean(diversity), self.min_local_search_radius, self.max_local_search_radius)\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-adjusted_radius, adjusted_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            \n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "AdaptiveLocalSearchHybridPSODE", "description": "Enhancing local search exploration by dynamically adjusting the search radius based on the population diversity.", "configspace": "", "generation": 61, "fitness": 0.23623005092064006, "feedback": "The algorithm AdaptiveLocalSearchHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4827274391903619, 0.4670375159564354, 0.5106279648667291, 0.5065560982528386, 0.4809643072280424, 0.5059382610483127, 0.4958981811346711, 0.46404439329059, 0.4983743322045344, 0.16017465466342218, 0.1349840449203239, 0.10565557587112995, 0.18601392743812994, 0.1550802004144627, 0.12978386259802244, 0.18694508119235365, 0.1782212787809342, 0.15359631661172224, 0.08325792310038127, 0.10351618201892832, 0.10587784057677596, 0.10225283874680358, 0.13382643752965728, 0.11206632128703642, 0.09373218869524969, 0.12435342413999073, 0.09863702880302849, 0.10097013661782761, 0.11292390118694506, 0.06090100090125128, 0.0977170463292597, 0.08103853468258171, 0.05206841517191041, 0.08283774618257345, 0.10520933164285817, 0.05298459332830929, 0.9148433182833823, 0.8566539366328891, 0.8261632984876867, 0.8639296096202178, 0.8298831906728873, 0.8382563539603459, 0.8906339548009615, 0.8825221648984247, 0.8498282017999435, 0.28133512729872256, 0.2611441815428155, 0.3106039984085325, 0.28466300795800803, 0.269721211733855, 0.27671588772552846, 0.2503517746513272, 0.3159904037658601, 0.22472971334229175, 0.3211197949297362, 0.13923281304909418, 0.32263787447708003, 0.3456381141044207, 0.3395887763203699, 0.7245236663162515, 0.30477332151463166, 0.23523954020402493, 0.6919482131752175, 0.15242651113482464, 0.19205114712546545, 0.1796405155765568, 0.18536825427138004, 0.18335025491247348, 0.12176512455988409, 0.16156770779972907, 0.19165906091706697, 0.22434813511565121, 0.15932292891098276, 0.16975935360514283, 0.20396015218404073, 0.23913330792030085, 0.20865753987393243, 0.19212702456433473, 0.17947139514025223, 0.15396802795483966, 0.20266141954775907, 0.009769971199454774, 0.02392102080930858, 0.03459176289710597, 0.06819191609704556, 0.018524593633467146, 0.008219901621488668, 0.057844860849513124, 0.016462929585292274, 0.030988002683601024, 0.14571664640139315, 0.03420510706542612, 0.26337042794958987, 0.14575038733772194, 0.05851291776906453, 0.07919385914496557, 0.16946690149440313, 0.1782729053642197, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.0008149569608036922, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.11604539658528834, 0.119743290950594, 0.09851362411483655, 0.06962048604537008, 0.12350973097362727, 0.08956400932768394, 0.0819564686081572, 0.08159911437742795, 0.39354961280485223, 0.4027074099220117, 0.5156512108976494, 0.4162980871450732, 0.37613615314282034, 0.4034081881612709, 0.42767185011020725, 0.4260067680091565, 0.4371113372864899, 0.04088385148645213, 0.09332343718791292, 0.07581666027381817, 0.09406584498518222, 0.09036121121973428, 0.10338379991185398, 0.10233173014173369, 0.0953384742785085, 0.10759678365824255, 0.16631567729451635, 0.2684287117851233, 0.251816704683522, 0.2185221626253555, 0.2604036701833664, 0.26901454228341426, 0.252650156927386, 0.1739288632562921, 0.19757198170447432, 0.2747356229282495, 0.2807572739242805, 0.2214203055131575, 0.26038267534032344, 0.2857608236081972, 0.2998435322334656, 0.20823319054415512, 0.30680842359428895, 0.23936438297213614, 0.19997550092187288, 0.21868533545357427, 0.14855877489314895, 0.24790470538354992, 0.24221285224972722, 0.23879758551270336, 0.184401175921873, 0.23469428534742587, 0.20432809102187555, 0.2049569802303003, 0.2141407639147732, 0.23227926887102068, 0.22667813006172954, 0.22731984348287393, 0.23507655460956534, 0.21614009245907273, 0.20696693624761664, 0.20003544409359653, 0.19007469207706795, 0.19651391562571763, 0.20497938421366468, 0.18243238512332005, 0.18845275621328728, 0.17709031898161243, 0.19602139383647776, 0.1980089800216398, 0.1766891745908753, 0.7316672162297998, 0.18662025928922021, 0.15198810430428944, 0.7074213567884591, 0.19847801788484865, 0.8463549391563634, 0.12233002186102404, 0.18748961164633648, 0.16116573274015922, 0.5726207945782452, 0.206559757119801, 0.5697026340264164, 0.5400694885246986, 0.20801355189804893, 0.20027449507309347, 0.16539951732927516, 0.5998542754940324, 0.49050152257843915, 0.18309205108541304, 0.19057587674729426, 0.18921150152284083, 0.20177465796634197, 0.18471904894247348, 0.17706826172658052, 0.1787711342216568, 0.1899866105636483, 0.18780124609213722, 0.08787437822659994, 0.10485226486299548, 0.07794156646887385, 0.09525166460793133, 0.08645448082724871, 0.08162473486016586, 0.08709509494193568, 0.07757612781331424, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "c1b8fdaf-cf24-4747-af5a-2de72a7a4d51", "solution": "import numpy as np\n\nclass DynamicHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.min_local_search_radius = 0.01\n        self.max_local_search_radius = 0.2\n        \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search with dynamic radius\n                diversity = np.std(self.particles)\n                dynamic_radius = self.min_local_search_radius + (self.max_local_search_radius - self.min_local_search_radius) * diversity\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-dynamic_radius, dynamic_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            \n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "DynamicHybridPSODE", "description": "Enhancing global exploration by introducing a dynamic adaptation of local search radius based on population diversity.", "configspace": "", "generation": 62, "fitness": 0.23623005092064006, "feedback": "The algorithm DynamicHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4827274391903619, 0.4670375159564354, 0.5106279648667291, 0.5065560982528386, 0.4809643072280424, 0.5059382610483127, 0.4958981811346711, 0.46404439329059, 0.4983743322045344, 0.16017465466342218, 0.1349840449203239, 0.10565557587112995, 0.18601392743812994, 0.1550802004144627, 0.12978386259802244, 0.18694508119235365, 0.1782212787809342, 0.15359631661172224, 0.08325792310038127, 0.10351618201892832, 0.10587784057677596, 0.10225283874680358, 0.13382643752965728, 0.11206632128703642, 0.09373218869524969, 0.12435342413999073, 0.09863702880302849, 0.10097013661782761, 0.11292390118694506, 0.06090100090125128, 0.0977170463292597, 0.08103853468258171, 0.05206841517191041, 0.08283774618257345, 0.10520933164285817, 0.05298459332830929, 0.9148433182833823, 0.8566539366328891, 0.8261632984876867, 0.8639296096202178, 0.8298831906728873, 0.8382563539603459, 0.8906339548009615, 0.8825221648984247, 0.8498282017999435, 0.28133512729872256, 0.2611441815428155, 0.3106039984085325, 0.28466300795800803, 0.269721211733855, 0.27671588772552846, 0.2503517746513272, 0.3159904037658601, 0.22472971334229175, 0.3211197949297362, 0.13923281304909418, 0.32263787447708003, 0.3456381141044207, 0.3395887763203699, 0.7245236663162515, 0.30477332151463166, 0.23523954020402493, 0.6919482131752175, 0.15242651113482464, 0.19205114712546545, 0.1796405155765568, 0.18536825427138004, 0.18335025491247348, 0.12176512455988409, 0.16156770779972907, 0.19165906091706697, 0.22434813511565121, 0.15932292891098276, 0.16975935360514283, 0.20396015218404073, 0.23913330792030085, 0.20865753987393243, 0.19212702456433473, 0.17947139514025223, 0.15396802795483966, 0.20266141954775907, 0.009769971199454774, 0.02392102080930858, 0.03459176289710597, 0.06819191609704556, 0.018524593633467146, 0.008219901621488668, 0.057844860849513124, 0.016462929585292274, 0.030988002683601024, 0.14571664640139315, 0.03420510706542612, 0.26337042794958987, 0.14575038733772194, 0.05851291776906453, 0.07919385914496557, 0.16946690149440313, 0.1782729053642197, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.0008149569608036922, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.11604539658528834, 0.119743290950594, 0.09851362411483655, 0.06962048604537008, 0.12350973097362727, 0.08956400932768394, 0.0819564686081572, 0.08159911437742795, 0.39354961280485223, 0.4027074099220117, 0.5156512108976494, 0.4162980871450732, 0.37613615314282034, 0.4034081881612709, 0.42767185011020725, 0.4260067680091565, 0.4371113372864899, 0.04088385148645213, 0.09332343718791292, 0.07581666027381817, 0.09406584498518222, 0.09036121121973428, 0.10338379991185398, 0.10233173014173369, 0.0953384742785085, 0.10759678365824255, 0.16631567729451635, 0.2684287117851233, 0.251816704683522, 0.2185221626253555, 0.2604036701833664, 0.26901454228341426, 0.252650156927386, 0.1739288632562921, 0.19757198170447432, 0.2747356229282495, 0.2807572739242805, 0.2214203055131575, 0.26038267534032344, 0.2857608236081972, 0.2998435322334656, 0.20823319054415512, 0.30680842359428895, 0.23936438297213614, 0.19997550092187288, 0.21868533545357427, 0.14855877489314895, 0.24790470538354992, 0.24221285224972722, 0.23879758551270336, 0.184401175921873, 0.23469428534742587, 0.20432809102187555, 0.2049569802303003, 0.2141407639147732, 0.23227926887102068, 0.22667813006172954, 0.22731984348287393, 0.23507655460956534, 0.21614009245907273, 0.20696693624761664, 0.20003544409359653, 0.19007469207706795, 0.19651391562571763, 0.20497938421366468, 0.18243238512332005, 0.18845275621328728, 0.17709031898161243, 0.19602139383647776, 0.1980089800216398, 0.1766891745908753, 0.7316672162297998, 0.18662025928922021, 0.15198810430428944, 0.7074213567884591, 0.19847801788484865, 0.8463549391563634, 0.12233002186102404, 0.18748961164633648, 0.16116573274015922, 0.5726207945782452, 0.206559757119801, 0.5697026340264164, 0.5400694885246986, 0.20801355189804893, 0.20027449507309347, 0.16539951732927516, 0.5998542754940324, 0.49050152257843915, 0.18309205108541304, 0.19057587674729426, 0.18921150152284083, 0.20177465796634197, 0.18471904894247348, 0.17706826172658052, 0.1787711342216568, 0.1899866105636483, 0.18780124609213722, 0.08787437822659994, 0.10485226486299548, 0.07794156646887385, 0.09525166460793133, 0.08645448082724871, 0.08162473486016586, 0.08709509494193568, 0.07757612781331424, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "f0c6e0d0-b84d-4184-83a3-65d4a005461e", "solution": "class ImprovedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.local_search_radius = 0.1\n        \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            \n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "ImprovedHybridPSODE", "description": "Improving exploration and exploitation balance by incorporating a novel local search mechanism into the HybridPSODE algorithm.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4827274391903619, 0.4670375159564354, 0.5106279648667291, 0.5065560982528386, 0.4809643072280424, 0.5059382610483127, 0.4958981811346711, 0.46404439329059, 0.4983743322045344, 0.16017465466342218, 0.1349840449203239, 0.10565557587112995, 0.18601392743812994, 0.1550802004144627, 0.12978386259802244, 0.18694508119235365, 0.1782212787809342, 0.15359631661172224, 0.08325792310038127, 0.10351618201892832, 0.10587784057677596, 0.10225283874680358, 0.13382643752965728, 0.11206632128703642, 0.09373218869524969, 0.12435342413999073, 0.09863702880302849, 0.10097013661782761, 0.11292390118694506, 0.06090100090125128, 0.0977170463292597, 0.08103853468258171, 0.05206841517191041, 0.08283774618257345, 0.10520933164285817, 0.05298459332830929, 0.9148433182833823, 0.8566539366328891, 0.8261632984876867, 0.8639296096202178, 0.8298831906728873, 0.8382563539603459, 0.8906339548009615, 0.8825221648984247, 0.8498282017999435, 0.28133512729872256, 0.2611441815428155, 0.3106039984085325, 0.28466300795800803, 0.269721211733855, 0.27671588772552846, 0.2503517746513272, 0.3159904037658601, 0.22472971334229175, 0.3211197949297362, 0.13923281304909418, 0.32263787447708003, 0.3456381141044207, 0.3395887763203699, 0.7245236663162515, 0.30477332151463166, 0.23523954020402493, 0.6919482131752175, 0.15242651113482464, 0.19205114712546545, 0.1796405155765568, 0.18536825427138004, 0.18335025491247348, 0.12176512455988409, 0.16156770779972907, 0.19165906091706697, 0.22434813511565121, 0.15932292891098276, 0.16975935360514283, 0.20396015218404073, 0.23913330792030085, 0.20865753987393243, 0.19212702456433473, 0.17947139514025223, 0.15396802795483966, 0.20266141954775907, 0.009769971199454774, 0.02392102080930858, 0.03459176289710597, 0.06819191609704556, 0.018524593633467146, 0.008219901621488668, 0.057844860849513124, 0.016462929585292274, 0.030988002683601024, 0.14571664640139315, 0.03420510706542612, 0.26337042794958987, 0.14575038733772194, 0.05851291776906453, 0.07919385914496557, 0.16946690149440313, 0.1782729053642197, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.0008149569608036922, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.11604539658528834, 0.119743290950594, 0.09851362411483655, 0.06962048604537008, 0.12350973097362727, 0.08956400932768394, 0.0819564686081572, 0.08159911437742795, 0.39354961280485223, 0.4027074099220117, 0.5156512108976494, 0.4162980871450732, 0.37613615314282034, 0.4034081881612709, 0.42767185011020725, 0.4260067680091565, 0.4371113372864899, 0.04088385148645213, 0.09332343718791292, 0.07581666027381817, 0.09406584498518222, 0.09036121121973428, 0.10338379991185398, 0.10233173014173369, 0.0953384742785085, 0.10759678365824255, 0.16631567729451635, 0.2684287117851233, 0.251816704683522, 0.2185221626253555, 0.2604036701833664, 0.26901454228341426, 0.252650156927386, 0.1739288632562921, 0.19757198170447432, 0.2747356229282495, 0.2807572739242805, 0.2214203055131575, 0.26038267534032344, 0.2857608236081972, 0.2998435322334656, 0.20823319054415512, 0.30680842359428895, 0.23936438297213614, 0.19997550092187288, 0.21868533545357427, 0.14855877489314895, 0.24790470538354992, 0.24221285224972722, 0.23879758551270336, 0.184401175921873, 0.23469428534742587, 0.20432809102187555, 0.2049569802303003, 0.2141407639147732, 0.23227926887102068, 0.22667813006172954, 0.22731984348287393, 0.23507655460956534, 0.21614009245907273, 0.20696693624761664, 0.20003544409359653, 0.19007469207706795, 0.19651391562571763, 0.20497938421366468, 0.18243238512332005, 0.18845275621328728, 0.17709031898161243, 0.19602139383647776, 0.1980089800216398, 0.1766891745908753, 0.7316672162297998, 0.18662025928922021, 0.15198810430428944, 0.7074213567884591, 0.19847801788484865, 0.8463549391563634, 0.12233002186102404, 0.18748961164633648, 0.16116573274015922, 0.5726207945782452, 0.206559757119801, 0.5697026340264164, 0.5400694885246986, 0.20801355189804893, 0.20027449507309347, 0.16539951732927516, 0.5998542754940324, 0.49050152257843915, 0.18309205108541304, 0.19057587674729426, 0.18921150152284083, 0.20177465796634197, 0.18471904894247348, 0.17706826172658052, 0.1787711342216568, 0.1899866105636483, 0.18780124609213722, 0.08787437822659994, 0.10485226486299548, 0.07794156646887385, 0.09525166460793133, 0.08645448082724871, 0.08162473486016586, 0.08709509494193568, 0.07757612781331424, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "385998e1-96fb-4f0e-b784-ee3147a0ad04", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.local_search_radius = 0.1\n        self.adaptive_radius_factor = 0.9\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search with adaptive radius\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n                    else:\n                        self.local_search_radius *= self.adaptive_radius_factor\n\n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing local search with adaptive radius control for better exploration-exploitation balance. ", "configspace": "", "generation": 64, "fitness": 0.23623005092064006, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4827274391903619, 0.4670375159564354, 0.5106279648667291, 0.5065560982528386, 0.4809643072280424, 0.5059382610483127, 0.4958981811346711, 0.46404439329059, 0.4983743322045344, 0.16017465466342218, 0.1349840449203239, 0.10565557587112995, 0.18601392743812994, 0.1550802004144627, 0.12978386259802244, 0.18694508119235365, 0.1782212787809342, 0.15359631661172224, 0.08325792310038127, 0.10351618201892832, 0.10587784057677596, 0.10225283874680358, 0.13382643752965728, 0.11206632128703642, 0.09373218869524969, 0.12435342413999073, 0.09863702880302849, 0.10097013661782761, 0.11292390118694506, 0.06090100090125128, 0.0977170463292597, 0.08103853468258171, 0.05206841517191041, 0.08283774618257345, 0.10520933164285817, 0.05298459332830929, 0.9148433182833823, 0.8566539366328891, 0.8261632984876867, 0.8639296096202178, 0.8298831906728873, 0.8382563539603459, 0.8906339548009615, 0.8825221648984247, 0.8498282017999435, 0.28133512729872256, 0.2611441815428155, 0.3106039984085325, 0.28466300795800803, 0.269721211733855, 0.27671588772552846, 0.2503517746513272, 0.3159904037658601, 0.22472971334229175, 0.3211197949297362, 0.13923281304909418, 0.32263787447708003, 0.3456381141044207, 0.3395887763203699, 0.7245236663162515, 0.30477332151463166, 0.23523954020402493, 0.6919482131752175, 0.15242651113482464, 0.19205114712546545, 0.1796405155765568, 0.18536825427138004, 0.18335025491247348, 0.12176512455988409, 0.16156770779972907, 0.19165906091706697, 0.22434813511565121, 0.15932292891098276, 0.16975935360514283, 0.20396015218404073, 0.23913330792030085, 0.20865753987393243, 0.19212702456433473, 0.17947139514025223, 0.15396802795483966, 0.20266141954775907, 0.009769971199454774, 0.02392102080930858, 0.03459176289710597, 0.06819191609704556, 0.018524593633467146, 0.008219901621488668, 0.057844860849513124, 0.016462929585292274, 0.030988002683601024, 0.14571664640139315, 0.03420510706542612, 0.26337042794958987, 0.14575038733772194, 0.05851291776906453, 0.07919385914496557, 0.16946690149440313, 0.1782729053642197, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.0008149569608036922, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.11604539658528834, 0.119743290950594, 0.09851362411483655, 0.06962048604537008, 0.12350973097362727, 0.08956400932768394, 0.0819564686081572, 0.08159911437742795, 0.39354961280485223, 0.4027074099220117, 0.5156512108976494, 0.4162980871450732, 0.37613615314282034, 0.4034081881612709, 0.42767185011020725, 0.4260067680091565, 0.4371113372864899, 0.04088385148645213, 0.09332343718791292, 0.07581666027381817, 0.09406584498518222, 0.09036121121973428, 0.10338379991185398, 0.10233173014173369, 0.0953384742785085, 0.10759678365824255, 0.16631567729451635, 0.2684287117851233, 0.251816704683522, 0.2185221626253555, 0.2604036701833664, 0.26901454228341426, 0.252650156927386, 0.1739288632562921, 0.19757198170447432, 0.2747356229282495, 0.2807572739242805, 0.2214203055131575, 0.26038267534032344, 0.2857608236081972, 0.2998435322334656, 0.20823319054415512, 0.30680842359428895, 0.23936438297213614, 0.19997550092187288, 0.21868533545357427, 0.14855877489314895, 0.24790470538354992, 0.24221285224972722, 0.23879758551270336, 0.184401175921873, 0.23469428534742587, 0.20432809102187555, 0.2049569802303003, 0.2141407639147732, 0.23227926887102068, 0.22667813006172954, 0.22731984348287393, 0.23507655460956534, 0.21614009245907273, 0.20696693624761664, 0.20003544409359653, 0.19007469207706795, 0.19651391562571763, 0.20497938421366468, 0.18243238512332005, 0.18845275621328728, 0.17709031898161243, 0.19602139383647776, 0.1980089800216398, 0.1766891745908753, 0.7316672162297998, 0.18662025928922021, 0.15198810430428944, 0.7074213567884591, 0.19847801788484865, 0.8463549391563634, 0.12233002186102404, 0.18748961164633648, 0.16116573274015922, 0.5726207945782452, 0.206559757119801, 0.5697026340264164, 0.5400694885246986, 0.20801355189804893, 0.20027449507309347, 0.16539951732927516, 0.5998542754940324, 0.49050152257843915, 0.18309205108541304, 0.19057587674729426, 0.18921150152284083, 0.20177465796634197, 0.18471904894247348, 0.17706826172658052, 0.1787711342216568, 0.1899866105636483, 0.18780124609213722, 0.08787437822659994, 0.10485226486299548, 0.07794156646887385, 0.09525166460793133, 0.08645448082724871, 0.08162473486016586, 0.08709509494193568, 0.07757612781331424, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "e71bd1d1-6589-49aa-8760-1b30afb68b2b", "solution": "import numpy as np\n\nclass LevyHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.local_search_radius = 0.1\n        self.levy_scale = 0.1\n        \n    def levy_flight(self):\n        beta = 1.5\n        sigma = np.power(np.math.gamma(1 + beta) * np.sin(np.pi * beta / 2) / np.math.gamma((1 + beta) / 2) / beta, 1 / beta)\n        u = np.random.normal(0, sigma, self.dim)\n        v = np.random.normal(0, 1, self.dim)\n        step = u / np.power(np.abs(v), 1 / beta)\n        return step * self.levy_scale\n    \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    perturbation = self.levy_flight()\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            \n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "LevyHybridPSODE", "description": "Enhancing global exploration by introducing Levy flight behavior to perturb particle positions in search space.", "configspace": "", "generation": 65, "fitness": 0.23623005092064006, "feedback": "The algorithm LevyHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4827274391903619, 0.4670375159564354, 0.5106279648667291, 0.5065560982528386, 0.4809643072280424, 0.5059382610483127, 0.4958981811346711, 0.46404439329059, 0.4983743322045344, 0.16017465466342218, 0.1349840449203239, 0.10565557587112995, 0.18601392743812994, 0.1550802004144627, 0.12978386259802244, 0.18694508119235365, 0.1782212787809342, 0.15359631661172224, 0.08325792310038127, 0.10351618201892832, 0.10587784057677596, 0.10225283874680358, 0.13382643752965728, 0.11206632128703642, 0.09373218869524969, 0.12435342413999073, 0.09863702880302849, 0.10097013661782761, 0.11292390118694506, 0.06090100090125128, 0.0977170463292597, 0.08103853468258171, 0.05206841517191041, 0.08283774618257345, 0.10520933164285817, 0.05298459332830929, 0.9148433182833823, 0.8566539366328891, 0.8261632984876867, 0.8639296096202178, 0.8298831906728873, 0.8382563539603459, 0.8906339548009615, 0.8825221648984247, 0.8498282017999435, 0.28133512729872256, 0.2611441815428155, 0.3106039984085325, 0.28466300795800803, 0.269721211733855, 0.27671588772552846, 0.2503517746513272, 0.3159904037658601, 0.22472971334229175, 0.3211197949297362, 0.13923281304909418, 0.32263787447708003, 0.3456381141044207, 0.3395887763203699, 0.7245236663162515, 0.30477332151463166, 0.23523954020402493, 0.6919482131752175, 0.15242651113482464, 0.19205114712546545, 0.1796405155765568, 0.18536825427138004, 0.18335025491247348, 0.12176512455988409, 0.16156770779972907, 0.19165906091706697, 0.22434813511565121, 0.15932292891098276, 0.16975935360514283, 0.20396015218404073, 0.23913330792030085, 0.20865753987393243, 0.19212702456433473, 0.17947139514025223, 0.15396802795483966, 0.20266141954775907, 0.009769971199454774, 0.02392102080930858, 0.03459176289710597, 0.06819191609704556, 0.018524593633467146, 0.008219901621488668, 0.057844860849513124, 0.016462929585292274, 0.030988002683601024, 0.14571664640139315, 0.03420510706542612, 0.26337042794958987, 0.14575038733772194, 0.05851291776906453, 0.07919385914496557, 0.16946690149440313, 0.1782729053642197, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.0008149569608036922, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.11604539658528834, 0.119743290950594, 0.09851362411483655, 0.06962048604537008, 0.12350973097362727, 0.08956400932768394, 0.0819564686081572, 0.08159911437742795, 0.39354961280485223, 0.4027074099220117, 0.5156512108976494, 0.4162980871450732, 0.37613615314282034, 0.4034081881612709, 0.42767185011020725, 0.4260067680091565, 0.4371113372864899, 0.04088385148645213, 0.09332343718791292, 0.07581666027381817, 0.09406584498518222, 0.09036121121973428, 0.10338379991185398, 0.10233173014173369, 0.0953384742785085, 0.10759678365824255, 0.16631567729451635, 0.2684287117851233, 0.251816704683522, 0.2185221626253555, 0.2604036701833664, 0.26901454228341426, 0.252650156927386, 0.1739288632562921, 0.19757198170447432, 0.2747356229282495, 0.2807572739242805, 0.2214203055131575, 0.26038267534032344, 0.2857608236081972, 0.2998435322334656, 0.20823319054415512, 0.30680842359428895, 0.23936438297213614, 0.19997550092187288, 0.21868533545357427, 0.14855877489314895, 0.24790470538354992, 0.24221285224972722, 0.23879758551270336, 0.184401175921873, 0.23469428534742587, 0.20432809102187555, 0.2049569802303003, 0.2141407639147732, 0.23227926887102068, 0.22667813006172954, 0.22731984348287393, 0.23507655460956534, 0.21614009245907273, 0.20696693624761664, 0.20003544409359653, 0.19007469207706795, 0.19651391562571763, 0.20497938421366468, 0.18243238512332005, 0.18845275621328728, 0.17709031898161243, 0.19602139383647776, 0.1980089800216398, 0.1766891745908753, 0.7316672162297998, 0.18662025928922021, 0.15198810430428944, 0.7074213567884591, 0.19847801788484865, 0.8463549391563634, 0.12233002186102404, 0.18748961164633648, 0.16116573274015922, 0.5726207945782452, 0.206559757119801, 0.5697026340264164, 0.5400694885246986, 0.20801355189804893, 0.20027449507309347, 0.16539951732927516, 0.5998542754940324, 0.49050152257843915, 0.18309205108541304, 0.19057587674729426, 0.18921150152284083, 0.20177465796634197, 0.18471904894247348, 0.17706826172658052, 0.1787711342216568, 0.1899866105636483, 0.18780124609213722, 0.08787437822659994, 0.10485226486299548, 0.07794156646887385, 0.09525166460793133, 0.08645448082724871, 0.08162473486016586, 0.08709509494193568, 0.07757612781331424, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "9bcc2568-9964-47b2-a99d-14796fab0e91", "solution": "import numpy as np\n\nclass DynamicLocalSearchImprovedHybridPSODE(ImprovedHybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        \n    def __call__(self, func):\n        for t in range(self.budget):\n            dynamic_local_search_prob = 0.1 + 0.4 * (1 - t / self.budget)  # Dynamic probability\n            dynamic_local_search_radius = 0.1 + 0.4 * (1 - t / self.budget)  # Dynamic radius\n            \n            for i in range(self.population_size):\n                if np.random.rand() < dynamic_local_search_prob:\n                    perturbation = np.random.uniform(-dynamic_local_search_radius, dynamic_local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n                else:\n                    super().__call__(func)\n        return self.global_best", "name": "DynamicLocalSearchImprovedHybridPSODE", "description": "Introduce dynamic local search probability and radius based on the function landscape to enhance exploration-exploitation balance.", "configspace": "", "generation": 66, "fitness": 0.23170983771486334, "feedback": "The algorithm DynamicLocalSearchImprovedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4636950278733477, 0.4649253145249731, 0.5159753576322533, 0.4746608993398741, 0.48090949026764496, 0.4920443180308868, 0.48722977312605664, 0.523164299107006, 0.49924681227817325, 0.1515275223345367, 0.12543423549791255, 0.20606147425077947, 0.156195928566928, 0.17612872058645246, 0.1398972376506199, 0.1561741212173562, 0.1643083766696698, 0.16773669495469257, 0.10125092150605686, 0.10442170228998715, 0.12334023724794929, 0.12192940301804889, 0.10954103673598892, 0.10156619187141691, 0.0764779014745427, 0.1044354800131545, 0.09973933926239675, 0.09336317432246999, 0.042065200886144516, 0.07133622435784215, 0.08179256086385844, 0.0775904653281334, 0.06861590669146134, 0.1349279107838407, 0.0998369829201663, 0.08995730659907619, 0.8612113290845105, 0.8314222968590326, 0.9134260428423414, 0.8270544755089558, 0.822673269563819, 0.8413571932539001, 0.9062318405149568, 0.8397836875441191, 0.9263261298095108, 0.26938624534729927, 0.2770533017055762, 0.2727011636597082, 0.3218904542923091, 0.32686776367403236, 0.1509738191012573, 0.28284025413026215, 0.26799700775722146, 0.2701912784719279, 0.38068795999129346, 0.2104793335559081, 0.7310604436161691, 0.21478980892573074, 0.27151387839103314, 0.3476530346273491, 0.22772310038492682, 0.175738209536361, 0.2910381805795139, 0.15783511822457463, 0.12697750823360743, 0.118327566425526, 0.18458952323511513, 0.2176836755906375, 0.11319767715130091, 0.17394069774603538, 0.2120462690560665, 0.24829558911398186, 0.17718745409867065, 0.1463921233952893, 0.12945905471607533, 0.17945132237851136, 0.20729577630210871, 0.17619930482807955, 0.1913880265227884, 0.11652698308301734, 0.1425362068200362, 9.999999999998899e-05, 0.03632944792967352, 9.999999999998899e-05, 0.02171392727895549, 0.02369686704733287, 0.10217286277329385, 0.02222814103275339, 0.05413946159952343, 0.07417597515918328, 0.21128390564100796, 0.10796561353739176, 0.10583513444547699, 0.09436017033387856, 0.06637361423821309, 0.12853144120218385, 0.14306508261822581, 0.13498574921052353, 0.08829778841618241, 9.999999999998899e-05, 0.0005936586293134871, 0.007262328070015256, 9.999999999998899e-05, 9.999999999998899e-05, 0.0398395423929464, 9.999999999998899e-05, 9.999999999998899e-05, 0.014310563636823481, 0.0768066198721663, 0.09383500469432415, 0.1330035053699783, 0.133560379322604, 0.005083854991251968, 0.1255414199725654, 0.09528311228838249, 0.04398670359201551, 0.07560488430871426, 0.4061634941140466, 0.4178337676659667, 0.45869847942330955, 0.4399731730866485, 0.4158342612966821, 0.4751891886712405, 0.4398332765687535, 0.4398166233210886, 0.4467924025775535, 0.09880175464083862, 0.0813418147478584, 0.10268981327229776, 0.08228166498517364, 0.06689463813147778, 0.10292478974107888, 0.11285899652998488, 0.11692695209187509, 0.09763738420717838, 0.16361393565507465, 0.1775500644365542, 0.2642263595418305, 0.2945320181570942, 0.2567227482121489, 0.23487390246674578, 0.20416225492132067, 0.2201025601663894, 0.26360989854004835, 0.16351670771187, 0.2974099318163591, 0.2016880021271248, 0.31399222528139115, 0.2113996594397376, 0.30077670829901915, 0.3156549908832742, 0.28611526324404213, 0.15290630372381164, 0.20819972420812272, 0.2463672049267963, 0.17092687460745404, 0.23870118482486902, 0.22786642261425405, 0.19810653039787018, 0.26045002644299664, 0.20187258575919675, 0.2231065946587384, 0.224475972572179, 0.21441093786006116, 0.23180084226322906, 0.20648782725934878, 0.21755202753775393, 0.22497669482308502, 0.19905641294709275, 0.21034336915099516, 0.2115630985551321, 0.19852620772026308, 0.2092932729294663, 0.19753077138639963, 0.19203631476124272, 0.25126782300172534, 0.19567716328918272, 0.20111956689339994, 0.19819438290001967, 0.21144764517085202, 0.18541249894869927, 0.17542906196721675, 0.7653689990987222, 0.7150725097644325, 0.19920768964664515, 0.1948637521373625, 0.16535333585082312, 0.6623879004275413, 0.8029043035555923, 0.16608874981936372, 0.11121871165028774, 0.5951733337726305, 0.20769236390011037, 0.20456765098661167, 0.5913103169845075, 0.5292157155504169, 0.5356935732845614, 0.10413685076016532, 0.17802821320337625, 0.19046423841980253, 0.1696954906130188, 0.17859835168452243, 0.1808058973530593, 0.17722771226297596, 0.19200026404743464, 0.17210518254544027, 0.1901155978393837, 0.0781222389479026, 0.07106544380233137, 0.07625196875300722, 0.08446481991998755, 0.09482577756925348, 0.08606496366845318, 0.07496321850363707, 0.08523197644117408, 0.0740210942343631]}, "mutation_prompt": null}
{"id": "2015498a-4691-4995-8955-24d2259c7b6f", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.local_search_radius = 0.1\n        self.mutation_rate = 0.1  # New parameter for adaptive mutation rate\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            \n            else:  # Original HybridPSODE update with adaptive mutation\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.mutation_rate, self.mutation_rate, self.dim)  # Adaptive mutation rate\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing the population diversity through adaptive mutation rates to promote global exploration in the search space.", "configspace": "", "generation": 67, "fitness": 0.09378131462282592, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.2146707429749537, 0.18491162417907647, 0.2905582937468174, 0.27235000756765626, 0.17703509342136547, 0.22738225040863724, 0.26541494297975676, 0.19832628678478026, 0.20699056932873983, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011929835654643783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003090676674905035, 0.028124527889919926, 0.01779949336591291, 0.025036632203313425, 0.019410462139900497, 0.0371996182481118, 0.03363444042570518, 0.002630796504541122, 0.06269790377432216, 0.0027964622545291196, 0.011409085344552872, 0.0172989897854815, 0.06310283861078003, 0.013065894211740092, 0.0088709005972476, 0.017465360286022746, 0.005981652303673979, 0.010296049047762934, 0.07516331749053029, 0.05372482003829404, 0.0709255669491966, 0.06978356981804479, 0.12790991252621986, 0.07706047324013465, 0.08884824229502397, 0.08033745986666108, 0.07061785578814728, 0.16169149602951072, 0.07698550331698839, 0.05695384798410963, 0.1359041643057648, 0.0748283421402639, 0.1029821295479143, 0.07380960686028393, 0.06098181986054019, 0.08831228175657557, 0.15414112522736156, 0.0474477917495566, 0.034976585685668526, 0.004614293394514579, 0.04200874647084951, 0.005517201702506136, 0.059468649814473085, 0.09031745306474026, 0.03198162828879014, 0.07709567902199155, 0.07903648359800441, 0.052715760670614675, 0.05657750624023683, 0.04121071497586637, 0.052479980371009316, 0.05569852151419785, 0.06819284450093477, 0.10200906964611112, 0.10914301394941361, 0.042957519977388614, 0.05745284693071284, 0.043784302229056826, 0.019967188088228616, 0.06676579317247489, 0.10685175042230222, 0.03438126699231614, 0.06846368433705341, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010907976392993124, 9.999999999998899e-05, 0.07147045600150581, 0.05838057194787305, 0.09888572495675729, 0.05906729748913697, 0.05267250107011934, 0.08500320796339944, 0.1166903060838147, 0.06478928966834396, 0.050341148755174814, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02296511736465834, 0.011563171817503104, 0.09521571234570725, 0.0045829241925341435, 0.007119782313858791, 0.0027138124143879505, 0.04522984757558368, 0.028371187224498495, 0.0430457524916501, 0.2301161426855307, 0.23366100668904088, 0.3183472010883318, 0.23127646339753782, 0.1938294940756814, 0.17629211845259118, 0.24569174972320618, 0.14220677779514768, 0.2786138902020613, 0.014491656305675726, 0.0006642905164889745, 9.999999999998899e-05, 0.020326698411728295, 0.01751304848093116, 0.04464833505962673, 0.015902855780397296, 0.015161796196686339, 0.07336376867563976, 0.13900313439541245, 0.1585607905029538, 0.12123702774253053, 0.15375477251852643, 0.219649037120766, 0.16155882458163984, 0.16188745716894226, 0.10503396148351896, 0.1515478566607995, 0.1240899952413751, 0.1246381520904346, 0.12414792779340311, 0.1434506534588782, 0.1343542949200901, 0.1281208560638626, 0.13769383754316444, 0.17997557964795763, 0.10626066216491814, 0.05966006303599536, 0.055129064442787645, 0.06819131329845529, 0.08055451760518717, 0.0759835929049697, 0.07053138055500041, 0.0746331285359616, 0.11903919218135928, 0.05068889165577206, 0.15303977584119455, 0.08709465692186491, 0.1555705002771539, 0.18116659091040532, 0.1263740576540897, 0.15452463827547358, 0.1626185770711932, 0.1162965623509723, 0.14164495108852715, 0.11356116543712869, 0.11845943633775113, 0.15944022724640816, 0.16132891666432225, 0.11802515746862807, 0.1343609352948495, 0.1265188252189231, 0.1325960185192835, 0.1323476312371915, 0.22390581829030232, 0.14412456205401036, 0.3818316519014088, 0.2742354046981922, 0.19472714382685652, 0.3111014424896752, 0.14069087242116018, 0.20854617704014078, 0.250860214591781, 0.1770777713851136, 0.21162564190791844, 0.20689834794811413, 0.15451734195216182, 0.1456501643267053, 0.1461507127826146, 0.1548520062972455, 0.20336183435865274, 0.23415344802262816, 0.18409771302705225, 0.21556710142647173, 0.17895472964331727, 0.19389059457541047, 0.1859293985390741, 0.2018255668634109, 0.19503950011328108, 0.1761120498054235, 0.17662335135258722, 0.034174024724335506, 0.03168137537625315, 0.04893798252070225, 0.03364686178439913, 0.04412893955148178, 0.027962118460295837, 0.04482134019809347, 0.02895430256457443, 0.04201528712654412]}, "mutation_prompt": null}
{"id": "75f54b47-dcc3-4770-accb-8dfef1c3789f", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.diversity_threshold = 0.2\n        self.diversity_decay = 0.95\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n\n            else:  # Enhanced HybridPSODE update\n                # Dynamic Diversity Maintenance\n                diversity = np.std(self.particles, axis=0)\n                for i in range(self.population_size):\n                    perturbation = np.random.normal(0, diversity * self.diversity_threshold, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n                self.diversity_threshold *= self.diversity_decay\n\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing global exploration via dynamic population diversity maintenance.", "configspace": "", "generation": 68, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedHybridPSODE' object has no attribute 'local_search_prob'\").", "error": "AttributeError(\"'EnhancedHybridPSODE' object has no attribute 'local_search_prob'\")", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {}, "mutation_prompt": null}
{"id": "40420519-34e3-4516-bdb6-c90beb12be3a", "solution": "import numpy as np\n\nclass DynamicLocalSearchPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.local_search_radius = 0.1\n        self.performance_threshold = 0.5\n        self.adaptation_rate = 0.1\n        \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n                    \n                    # Dynamic adjustment of local search parameters\n                    if func(candidate) < func(self.global_best) and np.random.rand() < self.adaptation_rate:\n                        self.local_search_prob += (1 - self.local_search_prob) * self.adaptation_rate\n                        self.local_search_radius += (1 - self.local_search_radius) * self.adaptation_rate\n                \n            else:  # Original HybridPSODE update\n                super().__call__(func)\n                \n        return self.global_best", "name": "DynamicLocalSearchPSODE", "description": "Introducing dynamic adjustment of local search probability and radius based on the performance of the algorithm.", "configspace": "", "generation": 69, "fitness": 0.23623005092064006, "feedback": "The algorithm DynamicLocalSearchPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4827274391903619, 0.4670375159564354, 0.5106279648667291, 0.5065560982528386, 0.4809643072280424, 0.5059382610483127, 0.4958981811346711, 0.46404439329059, 0.4983743322045344, 0.16017465466342218, 0.1349840449203239, 0.10565557587112995, 0.18601392743812994, 0.1550802004144627, 0.12978386259802244, 0.18694508119235365, 0.1782212787809342, 0.15359631661172224, 0.08325792310038127, 0.10351618201892832, 0.10587784057677596, 0.10225283874680358, 0.13382643752965728, 0.11206632128703642, 0.09373218869524969, 0.12435342413999073, 0.09863702880302849, 0.10097013661782761, 0.11292390118694506, 0.06090100090125128, 0.0977170463292597, 0.08103853468258171, 0.05206841517191041, 0.08283774618257345, 0.10520933164285817, 0.05298459332830929, 0.9148433182833823, 0.8566539366328891, 0.8261632984876867, 0.8639296096202178, 0.8298831906728873, 0.8382563539603459, 0.8906339548009615, 0.8825221648984247, 0.8498282017999435, 0.28133512729872256, 0.2611441815428155, 0.3106039984085325, 0.28466300795800803, 0.269721211733855, 0.27671588772552846, 0.2503517746513272, 0.3159904037658601, 0.22472971334229175, 0.3211197949297362, 0.13923281304909418, 0.32263787447708003, 0.3456381141044207, 0.3395887763203699, 0.7245236663162515, 0.30477332151463166, 0.23523954020402493, 0.6919482131752175, 0.15242651113482464, 0.19205114712546545, 0.1796405155765568, 0.18536825427138004, 0.18335025491247348, 0.12176512455988409, 0.16156770779972907, 0.19165906091706697, 0.22434813511565121, 0.15932292891098276, 0.16975935360514283, 0.20396015218404073, 0.23913330792030085, 0.20865753987393243, 0.19212702456433473, 0.17947139514025223, 0.15396802795483966, 0.20266141954775907, 0.009769971199454774, 0.02392102080930858, 0.03459176289710597, 0.06819191609704556, 0.018524593633467146, 0.008219901621488668, 0.057844860849513124, 0.016462929585292274, 0.030988002683601024, 0.14571664640139315, 0.03420510706542612, 0.26337042794958987, 0.14575038733772194, 0.05851291776906453, 0.07919385914496557, 0.16946690149440313, 0.1782729053642197, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.0008149569608036922, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.11604539658528834, 0.119743290950594, 0.09851362411483655, 0.06962048604537008, 0.12350973097362727, 0.08956400932768394, 0.0819564686081572, 0.08159911437742795, 0.39354961280485223, 0.4027074099220117, 0.5156512108976494, 0.4162980871450732, 0.37613615314282034, 0.4034081881612709, 0.42767185011020725, 0.4260067680091565, 0.4371113372864899, 0.04088385148645213, 0.09332343718791292, 0.07581666027381817, 0.09406584498518222, 0.09036121121973428, 0.10338379991185398, 0.10233173014173369, 0.0953384742785085, 0.10759678365824255, 0.16631567729451635, 0.2684287117851233, 0.251816704683522, 0.2185221626253555, 0.2604036701833664, 0.26901454228341426, 0.252650156927386, 0.1739288632562921, 0.19757198170447432, 0.2747356229282495, 0.2807572739242805, 0.2214203055131575, 0.26038267534032344, 0.2857608236081972, 0.2998435322334656, 0.20823319054415512, 0.30680842359428895, 0.23936438297213614, 0.19997550092187288, 0.21868533545357427, 0.14855877489314895, 0.24790470538354992, 0.24221285224972722, 0.23879758551270336, 0.184401175921873, 0.23469428534742587, 0.20432809102187555, 0.2049569802303003, 0.2141407639147732, 0.23227926887102068, 0.22667813006172954, 0.22731984348287393, 0.23507655460956534, 0.21614009245907273, 0.20696693624761664, 0.20003544409359653, 0.19007469207706795, 0.19651391562571763, 0.20497938421366468, 0.18243238512332005, 0.18845275621328728, 0.17709031898161243, 0.19602139383647776, 0.1980089800216398, 0.1766891745908753, 0.7316672162297998, 0.18662025928922021, 0.15198810430428944, 0.7074213567884591, 0.19847801788484865, 0.8463549391563634, 0.12233002186102404, 0.18748961164633648, 0.16116573274015922, 0.5726207945782452, 0.206559757119801, 0.5697026340264164, 0.5400694885246986, 0.20801355189804893, 0.20027449507309347, 0.16539951732927516, 0.5998542754940324, 0.49050152257843915, 0.18309205108541304, 0.19057587674729426, 0.18921150152284083, 0.20177465796634197, 0.18471904894247348, 0.17706826172658052, 0.1787711342216568, 0.1899866105636483, 0.18780124609213722, 0.08787437822659994, 0.10485226486299548, 0.07794156646887385, 0.09525166460793133, 0.08645448082724871, 0.08162473486016586, 0.08709509494193568, 0.07757612781331424, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "af22350d-d7e2-48ab-95b0-7b6faaddf5b5", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.local_search_radius = 0.1\n        \n    def __call__(self, func):\n        fitness_improvement_trend = []\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n                        fitness_improvement_trend.append(1)\n                    else:\n                        fitness_improvement_trend.append(0)\n            \n            else:  # Original HybridPSODE update\n                super().__call__(func)\n                \n                if len(fitness_improvement_trend) >= 3:\n                    if sum(fitness_improvement_trend[-3:]) == 0:\n                        self.local_search_radius *= 1.1  # Increase radius for exploration\n                    elif sum(fitness_improvement_trend[-3:]) == 3:\n                        self.local_search_radius *= 0.9  # Decrease radius for exploitation\n                    fitness_improvement_trend = []\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing exploration by introducing a dynamic local search radius based on fitness improvement trends.", "configspace": "", "generation": 70, "fitness": 0.23623005092064006, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4827274391903619, 0.4670375159564354, 0.5106279648667291, 0.5065560982528386, 0.4809643072280424, 0.5059382610483127, 0.4958981811346711, 0.46404439329059, 0.4983743322045344, 0.16017465466342218, 0.1349840449203239, 0.10565557587112995, 0.18601392743812994, 0.1550802004144627, 0.12978386259802244, 0.18694508119235365, 0.1782212787809342, 0.15359631661172224, 0.08325792310038127, 0.10351618201892832, 0.10587784057677596, 0.10225283874680358, 0.13382643752965728, 0.11206632128703642, 0.09373218869524969, 0.12435342413999073, 0.09863702880302849, 0.10097013661782761, 0.11292390118694506, 0.06090100090125128, 0.0977170463292597, 0.08103853468258171, 0.05206841517191041, 0.08283774618257345, 0.10520933164285817, 0.05298459332830929, 0.9148433182833823, 0.8566539366328891, 0.8261632984876867, 0.8639296096202178, 0.8298831906728873, 0.8382563539603459, 0.8906339548009615, 0.8825221648984247, 0.8498282017999435, 0.28133512729872256, 0.2611441815428155, 0.3106039984085325, 0.28466300795800803, 0.269721211733855, 0.27671588772552846, 0.2503517746513272, 0.3159904037658601, 0.22472971334229175, 0.3211197949297362, 0.13923281304909418, 0.32263787447708003, 0.3456381141044207, 0.3395887763203699, 0.7245236663162515, 0.30477332151463166, 0.23523954020402493, 0.6919482131752175, 0.15242651113482464, 0.19205114712546545, 0.1796405155765568, 0.18536825427138004, 0.18335025491247348, 0.12176512455988409, 0.16156770779972907, 0.19165906091706697, 0.22434813511565121, 0.15932292891098276, 0.16975935360514283, 0.20396015218404073, 0.23913330792030085, 0.20865753987393243, 0.19212702456433473, 0.17947139514025223, 0.15396802795483966, 0.20266141954775907, 0.009769971199454774, 0.02392102080930858, 0.03459176289710597, 0.06819191609704556, 0.018524593633467146, 0.008219901621488668, 0.057844860849513124, 0.016462929585292274, 0.030988002683601024, 0.14571664640139315, 0.03420510706542612, 0.26337042794958987, 0.14575038733772194, 0.05851291776906453, 0.07919385914496557, 0.16946690149440313, 0.1782729053642197, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.0008149569608036922, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.11604539658528834, 0.119743290950594, 0.09851362411483655, 0.06962048604537008, 0.12350973097362727, 0.08956400932768394, 0.0819564686081572, 0.08159911437742795, 0.39354961280485223, 0.4027074099220117, 0.5156512108976494, 0.4162980871450732, 0.37613615314282034, 0.4034081881612709, 0.42767185011020725, 0.4260067680091565, 0.4371113372864899, 0.04088385148645213, 0.09332343718791292, 0.07581666027381817, 0.09406584498518222, 0.09036121121973428, 0.10338379991185398, 0.10233173014173369, 0.0953384742785085, 0.10759678365824255, 0.16631567729451635, 0.2684287117851233, 0.251816704683522, 0.2185221626253555, 0.2604036701833664, 0.26901454228341426, 0.252650156927386, 0.1739288632562921, 0.19757198170447432, 0.2747356229282495, 0.2807572739242805, 0.2214203055131575, 0.26038267534032344, 0.2857608236081972, 0.2998435322334656, 0.20823319054415512, 0.30680842359428895, 0.23936438297213614, 0.19997550092187288, 0.21868533545357427, 0.14855877489314895, 0.24790470538354992, 0.24221285224972722, 0.23879758551270336, 0.184401175921873, 0.23469428534742587, 0.20432809102187555, 0.2049569802303003, 0.2141407639147732, 0.23227926887102068, 0.22667813006172954, 0.22731984348287393, 0.23507655460956534, 0.21614009245907273, 0.20696693624761664, 0.20003544409359653, 0.19007469207706795, 0.19651391562571763, 0.20497938421366468, 0.18243238512332005, 0.18845275621328728, 0.17709031898161243, 0.19602139383647776, 0.1980089800216398, 0.1766891745908753, 0.7316672162297998, 0.18662025928922021, 0.15198810430428944, 0.7074213567884591, 0.19847801788484865, 0.8463549391563634, 0.12233002186102404, 0.18748961164633648, 0.16116573274015922, 0.5726207945782452, 0.206559757119801, 0.5697026340264164, 0.5400694885246986, 0.20801355189804893, 0.20027449507309347, 0.16539951732927516, 0.5998542754940324, 0.49050152257843915, 0.18309205108541304, 0.19057587674729426, 0.18921150152284083, 0.20177465796634197, 0.18471904894247348, 0.17706826172658052, 0.1787711342216568, 0.1899866105636483, 0.18780124609213722, 0.08787437822659994, 0.10485226486299548, 0.07794156646887385, 0.09525166460793133, 0.08645448082724871, 0.08162473486016586, 0.08709509494193568, 0.07757612781331424, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "fce98883-abc9-40ca-857d-f804f579c4e3", "solution": "import numpy as np\n\nclass DynamicLocalSearch(ImprovedHybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.initial_local_search_prob = 0.1\n        \n    def __call__(self, func):\n        diversity_threshold = 0.5 * self.population_size\n        for t in range(self.budget):\n            current_diversity = len(set(map(tuple, self.particles)))\n            self.local_search_prob = self.initial_local_search_prob * (current_diversity / diversity_threshold)\n            for i in range(self.population_size):\n                if np.random.rand() < self.local_search_prob:  # Local Search\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n                else:  # Original HybridPSODE update\n                    super().__call__(func)\n        return self.global_best", "name": "DynamicLocalSearch", "description": "Enhancing diversity and global exploration by introducing dynamic adaptation of local search probability based on population diversity.", "configspace": "", "generation": 71, "fitness": 0.22367852182933004, "feedback": "The algorithm DynamicLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.19.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4636950278733477, 0.47006364293996916, 0.49420401940231595, 0.4746608993398741, 0.5084891142754365, 0.4504542241355671, 0.48722977312605664, 0.45962199335006504, 0.5106103958716348, 0.1515275223345367, 0.15397151833173084, 0.22367717764266115, 0.156195928566928, 0.11879305300362542, 0.1351323475061208, 0.1561741212173562, 0.1445922048043331, 0.2161539933808112, 0.10125092150605686, 0.12323362202680255, 0.07319798556488799, 0.12192940301804889, 0.10158961619046836, 0.10133219266562177, 0.0764779014745427, 0.10661216133917062, 0.1043459430619732, 0.09336317432246999, 0.08288218922732593, 0.07735076888815806, 0.08179256086385844, 0.08182152878057136, 0.05758117448795996, 0.1349279107838407, 0.10520933164285817, 0.04699895755358807, 0.8612113290845105, 0.8022876594311554, 0.8825291904881603, 0.8270544755089558, 0.8897142980934081, 0.877128301081887, 0.9062318405149568, 0.8414635476547629, 0.9164697906504375, 0.26938624534729927, 0.2889173601115661, 0.258867465338367, 0.3218904542923091, 0.269721211733855, 0.2685170757412496, 0.28284025413026215, 0.2924127050875178, 0.23738061428893642, 0.38068795999129346, 0.21413878587674084, 0.16759361184111954, 0.21478980892573074, 0.33390517617016213, 0.21144589414847226, 0.22772310038492682, 0.48847489163422775, 0.23735256516253223, 0.15783511822457463, 0.1656520927794487, 0.20227374075917093, 0.18458952323511513, 0.18036374173962522, 0.1378384050731054, 0.17394069774603538, 0.18777634709973356, 0.1555250238215503, 0.17718745409867065, 0.1588444353719708, 0.1284768927160621, 0.17945132237851136, 0.12547782567464405, 0.15792177926666573, 0.1913880265227884, 0.17307147557713887, 0.12688231914208792, 9.999999999998899e-05, 0.021363907760804213, 0.02814905437626003, 0.02171392727895549, 0.05065933861771754, 0.022869290462569913, 0.02222814103275339, 9.999999999998899e-05, 0.08977084154490189, 0.21128390564100796, 0.12948928478399557, 0.09445965608528606, 0.09436017033387856, 0.08891979732904076, 0.08675122943260427, 0.14306508261822581, 0.13744180988845578, 0.08259555336729807, 9.999999999998899e-05, 9.999999999998899e-05, 0.026649366091312188, 9.999999999998899e-05, 0.001011153644226992, 0.018653076749170383, 9.999999999998899e-05, 0.0007538825080044553, 0.019872675565282272, 0.0768066198721663, 0.11604539658528834, 0.09353379362726233, 0.133560379322604, 0.1295612175689086, 0.11544432250655268, 0.09528311228838249, 0.08681391196842836, 0.07527645826974438, 0.4061634941140466, 0.42989769442497305, 0.4504844036020583, 0.4399731730866485, 0.4014340414728883, 0.42362798968812665, 0.4398332765687535, 0.4072617518033044, 0.4312488037616643, 0.09880175464083862, 0.08916010766582627, 0.09484773348532871, 0.08228166498517364, 0.12679547278932057, 0.07704746674921137, 0.11285899652998488, 0.0953384742785085, 0.06515500642673688, 0.16361393565507465, 0.23057657945206722, 0.2627984498041487, 0.2945320181570942, 0.27224752204854663, 0.17406582662570746, 0.20416225492132067, 0.256510318041262, 0.26341434104469097, 0.16351670771187, 0.23099998348969608, 0.14865624232029462, 0.31399222528139115, 0.2788482925179351, 0.29334826242326206, 0.3156549908832742, 0.2973610753212661, 0.25139063346819224, 0.20819972420812272, 0.24816526085055235, 0.15548726842144367, 0.23870118482486902, 0.1918222119132521, 0.22261632628080974, 0.26045002644299664, 0.20984469056748933, 0.10349892826680529, 0.224475972572179, 0.1993254332363531, 0.20800839573494723, 0.20648782725934878, 0.19203666635630823, 0.2520279724878367, 0.19905641294709275, 0.21596379437031465, 0.17963915206441727, 0.19852620772026308, 0.18971040092918312, 0.21547767842503873, 0.19203631476124272, 0.20814711399294117, 0.187592487595581, 0.20111956689339994, 0.27156079181251214, 0.18303480636549452, 0.18541249894869927, 0.18555696528698207, 0.18547869409131879, 0.7150725097644325, 0.19873596493966927, 0.16915769572474526, 0.16535333585082312, 0.16818448017915566, 0.15697997794488605, 0.16608874981936372, 0.20550964310874398, 0.5660573339377951, 0.20769236390011037, 0.1651927698894493, 0.6412375826015007, 0.5292157155504169, 0.5815070413376073, 0.47949730076731445, 0.17802821320337625, 0.1914538778809235, 0.18490719006096357, 0.17859835168452243, 0.1835159504146534, 0.22574147301050607, 0.19200026404743464, 0.17673450433703897, 0.18278745342950864, 0.0781222389479026, 0.09421940340106227, 0.06355258956838494, 0.08446481991998755, 0.11131327187218576, 0.12518651812982773, 0.07496321850363707, 0.07757612781331424, 0.09178855116239815]}, "mutation_prompt": null}
{"id": "90df3151-9669-44f3-ac4c-32e54b915a53", "solution": "import numpy as np\n\nclass AdaptiveLocalSearchImprovedHybridPSODE(ImprovedHybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_prob = 0.1\n        self.local_search_radius = 0.1\n        \n    def adaptive_local_search(self, func, candidate, current_best):\n        func_diff = func(candidate) - func(current_best)\n        if func_diff < 0:\n            self.local_search_radius *= 1.1  # Increase radius for promising moves\n        else:\n            self.local_search_radius *= 0.9  # Decrease radius for non-improving moves\n        \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n                        self.adaptive_local_search(func, candidate, self.particles[i])\n            \n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "AdaptiveLocalSearchImprovedHybridPSODE", "description": "Enhancing local search exploration by adding adaptive radius adjustment based on function landscape curvature.", "configspace": "", "generation": 72, "fitness": 0.23298459293944418, "feedback": "The algorithm AdaptiveLocalSearchImprovedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4636950278733477, 0.47006364293996916, 0.5159753576322533, 0.4746608993398741, 0.5084891142754365, 0.4920443180308868, 0.48722977312605664, 0.45962199335006504, 0.49924681227817325, 0.1515275223345367, 0.15397151833173084, 0.20606147425077947, 0.156195928566928, 0.11879305300362542, 0.1398972376506199, 0.1561741212173562, 0.1445922048043331, 0.16773669495469257, 0.10125092150605686, 0.12323362202680255, 0.12334023724794929, 0.12192940301804889, 0.10158961619046836, 0.10156619187141691, 0.0764779014745427, 0.10661216133917062, 0.09973933926239675, 0.09336317432246999, 0.08288218922732593, 0.07133622435784215, 0.08179256086385844, 0.08182152878057136, 0.06861590669146134, 0.1349279107838407, 0.10520933164285817, 0.08995730659907619, 0.8612113290845105, 0.8022876594311554, 0.9134260428423414, 0.8270544755089558, 0.8897142980934081, 0.8413571932539001, 0.9062318405149568, 0.8414635476547629, 0.9263261298095108, 0.26938624534729927, 0.2889173601115661, 0.2727011636597082, 0.3218904542923091, 0.269721211733855, 0.1509738191012573, 0.28284025413026215, 0.2924127050875178, 0.2701912784719279, 0.38068795999129346, 0.21413878587674084, 0.7310604436161691, 0.21478980892573074, 0.33390517617016213, 0.3476530346273491, 0.22772310038492682, 0.48847489163422775, 0.2910381805795139, 0.15783511822457463, 0.1656520927794487, 0.118327566425526, 0.18458952323511513, 0.18036374173962522, 0.11319767715130091, 0.17394069774603538, 0.18777634709973356, 0.24829558911398186, 0.17718745409867065, 0.1588444353719708, 0.12945905471607533, 0.17945132237851136, 0.12547782567464405, 0.17619930482807955, 0.1913880265227884, 0.17307147557713887, 0.1425362068200362, 9.999999999998899e-05, 0.021363907760804213, 9.999999999998899e-05, 0.02171392727895549, 0.05065933861771754, 0.10217286277329385, 0.02222814103275339, 9.999999999998899e-05, 0.07417597515918328, 0.21128390564100796, 0.12948928478399557, 0.10583513444547699, 0.09436017033387856, 0.08891979732904076, 0.12853144120218385, 0.14306508261822581, 0.13744180988845578, 0.08829778841618241, 9.999999999998899e-05, 9.999999999998899e-05, 0.007262328070015256, 9.999999999998899e-05, 0.001011153644226992, 0.0398395423929464, 9.999999999998899e-05, 0.0007538825080044553, 0.014310563636823481, 0.0768066198721663, 0.11604539658528834, 0.1330035053699783, 0.133560379322604, 0.1295612175689086, 0.1255414199725654, 0.09528311228838249, 0.08681391196842836, 0.07560488430871426, 0.4061634941140466, 0.42989769442497305, 0.45869847942330955, 0.4399731730866485, 0.4014340414728883, 0.4751891886712405, 0.4398332765687535, 0.4072617518033044, 0.4467924025775535, 0.09880175464083862, 0.08916010766582627, 0.10268981327229776, 0.08228166498517364, 0.12679547278932057, 0.10292478974107888, 0.11285899652998488, 0.0953384742785085, 0.09763738420717838, 0.16361393565507465, 0.23057657945206722, 0.2642263595418305, 0.2945320181570942, 0.27224752204854663, 0.23487390246674578, 0.20416225492132067, 0.256510318041262, 0.26360989854004835, 0.16351670771187, 0.23099998348969608, 0.2016880021271248, 0.31399222528139115, 0.2788482925179351, 0.30077670829901915, 0.3156549908832742, 0.2973610753212661, 0.15290630372381164, 0.20819972420812272, 0.24816526085055235, 0.17092687460745404, 0.23870118482486902, 0.1918222119132521, 0.19810653039787018, 0.26045002644299664, 0.20984469056748933, 0.2231065946587384, 0.224475972572179, 0.1993254332363531, 0.23180084226322906, 0.20648782725934878, 0.19203666635630823, 0.22497669482308502, 0.19905641294709275, 0.21596379437031465, 0.2115630985551321, 0.19852620772026308, 0.18971040092918312, 0.19753077138639963, 0.19203631476124272, 0.20814711399294117, 0.19567716328918272, 0.20111956689339994, 0.27156079181251214, 0.21144764517085202, 0.18541249894869927, 0.18555696528698207, 0.7653689990987222, 0.7150725097644325, 0.19873596493966927, 0.1948637521373625, 0.16535333585082312, 0.16818448017915566, 0.8029043035555923, 0.16608874981936372, 0.20550964310874398, 0.5951733337726305, 0.20769236390011037, 0.1651927698894493, 0.5913103169845075, 0.5292157155504169, 0.5815070413376073, 0.10413685076016532, 0.17802821320337625, 0.1914538778809235, 0.1696954906130188, 0.17859835168452243, 0.1835159504146534, 0.17722771226297596, 0.19200026404743464, 0.17673450433703897, 0.1901155978393837, 0.0781222389479026, 0.09421940340106227, 0.07625196875300722, 0.08446481991998755, 0.11131327187218576, 0.08606496366845318, 0.07496321850363707, 0.07757612781331424, 0.0740210942343631]}, "mutation_prompt": null}
{"id": "da84a33f-d558-4c68-8e4e-0e0728729003", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_prob = 0.2\n        self.mutation_factor = 0.5\n        \n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.mutation_prob:  # Mutation\n                for i in range(self.population_size):\n                    idxs = np.random.choice(np.arange(self.population_size), 3, replace=False)\n                    mutant = self.particles[idxs[0]] + self.mutation_factor * (self.particles[idxs[1]] - self.particles[idxs[2]])\n                    candidate = np.clip(mutant, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            \n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing diversity in the population by introducing a novel mutation strategy based on differential evolution.", "configspace": "", "generation": 73, "fitness": 0.23623005092064006, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4827274391903619, 0.4670375159564354, 0.5106279648667291, 0.5065560982528386, 0.4809643072280424, 0.5059382610483127, 0.4958981811346711, 0.46404439329059, 0.4983743322045344, 0.16017465466342218, 0.1349840449203239, 0.10565557587112995, 0.18601392743812994, 0.1550802004144627, 0.12978386259802244, 0.18694508119235365, 0.1782212787809342, 0.15359631661172224, 0.08325792310038127, 0.10351618201892832, 0.10587784057677596, 0.10225283874680358, 0.13382643752965728, 0.11206632128703642, 0.09373218869524969, 0.12435342413999073, 0.09863702880302849, 0.10097013661782761, 0.11292390118694506, 0.06090100090125128, 0.0977170463292597, 0.08103853468258171, 0.05206841517191041, 0.08283774618257345, 0.10520933164285817, 0.05298459332830929, 0.9148433182833823, 0.8566539366328891, 0.8261632984876867, 0.8639296096202178, 0.8298831906728873, 0.8382563539603459, 0.8906339548009615, 0.8825221648984247, 0.8498282017999435, 0.28133512729872256, 0.2611441815428155, 0.3106039984085325, 0.28466300795800803, 0.269721211733855, 0.27671588772552846, 0.2503517746513272, 0.3159904037658601, 0.22472971334229175, 0.3211197949297362, 0.13923281304909418, 0.32263787447708003, 0.3456381141044207, 0.3395887763203699, 0.7245236663162515, 0.30477332151463166, 0.23523954020402493, 0.6919482131752175, 0.15242651113482464, 0.19205114712546545, 0.1796405155765568, 0.18536825427138004, 0.18335025491247348, 0.12176512455988409, 0.16156770779972907, 0.19165906091706697, 0.22434813511565121, 0.15932292891098276, 0.16975935360514283, 0.20396015218404073, 0.23913330792030085, 0.20865753987393243, 0.19212702456433473, 0.17947139514025223, 0.15396802795483966, 0.20266141954775907, 0.009769971199454774, 0.02392102080930858, 0.03459176289710597, 0.06819191609704556, 0.018524593633467146, 0.008219901621488668, 0.057844860849513124, 0.016462929585292274, 0.030988002683601024, 0.14571664640139315, 0.03420510706542612, 0.26337042794958987, 0.14575038733772194, 0.05851291776906453, 0.07919385914496557, 0.16946690149440313, 0.1782729053642197, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.0008149569608036922, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.11604539658528834, 0.119743290950594, 0.09851362411483655, 0.06962048604537008, 0.12350973097362727, 0.08956400932768394, 0.0819564686081572, 0.08159911437742795, 0.39354961280485223, 0.4027074099220117, 0.5156512108976494, 0.4162980871450732, 0.37613615314282034, 0.4034081881612709, 0.42767185011020725, 0.4260067680091565, 0.4371113372864899, 0.04088385148645213, 0.09332343718791292, 0.07581666027381817, 0.09406584498518222, 0.09036121121973428, 0.10338379991185398, 0.10233173014173369, 0.0953384742785085, 0.10759678365824255, 0.16631567729451635, 0.2684287117851233, 0.251816704683522, 0.2185221626253555, 0.2604036701833664, 0.26901454228341426, 0.252650156927386, 0.1739288632562921, 0.19757198170447432, 0.2747356229282495, 0.2807572739242805, 0.2214203055131575, 0.26038267534032344, 0.2857608236081972, 0.2998435322334656, 0.20823319054415512, 0.30680842359428895, 0.23936438297213614, 0.19997550092187288, 0.21868533545357427, 0.14855877489314895, 0.24790470538354992, 0.24221285224972722, 0.23879758551270336, 0.184401175921873, 0.23469428534742587, 0.20432809102187555, 0.2049569802303003, 0.2141407639147732, 0.23227926887102068, 0.22667813006172954, 0.22731984348287393, 0.23507655460956534, 0.21614009245907273, 0.20696693624761664, 0.20003544409359653, 0.19007469207706795, 0.19651391562571763, 0.20497938421366468, 0.18243238512332005, 0.18845275621328728, 0.17709031898161243, 0.19602139383647776, 0.1980089800216398, 0.1766891745908753, 0.7316672162297998, 0.18662025928922021, 0.15198810430428944, 0.7074213567884591, 0.19847801788484865, 0.8463549391563634, 0.12233002186102404, 0.18748961164633648, 0.16116573274015922, 0.5726207945782452, 0.206559757119801, 0.5697026340264164, 0.5400694885246986, 0.20801355189804893, 0.20027449507309347, 0.16539951732927516, 0.5998542754940324, 0.49050152257843915, 0.18309205108541304, 0.19057587674729426, 0.18921150152284083, 0.20177465796634197, 0.18471904894247348, 0.17706826172658052, 0.1787711342216568, 0.1899866105636483, 0.18780124609213722, 0.08787437822659994, 0.10485226486299548, 0.07794156646887385, 0.09525166460793133, 0.08645448082724871, 0.08162473486016586, 0.08709509494193568, 0.07757612781331424, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "a9e84f9c-5f97-43a4-985c-3a344e2a80b7", "solution": "import numpy as np\n\nclass ChaoticHybridPSODE(ImprovedHybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.chaos_prob = 0.1\n        self.chaos_intensity = 0.2\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            if np.random.rand() < self.chaos_prob:  # Chaotic Perturbation\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.chaos_intensity, self.chaos_intensity, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            else:\n                super().__call__(func)\n        return self.global_best", "name": "ChaoticHybridPSODE", "description": "Enhancing diversity maintenance by introducing a chaotic perturbation mechanism to explore new regions in the search space.", "configspace": "", "generation": 74, "fitness": 0.23298459293944418, "feedback": "The algorithm ChaoticHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4636950278733477, 0.47006364293996916, 0.5159753576322533, 0.4746608993398741, 0.5084891142754365, 0.4920443180308868, 0.48722977312605664, 0.45962199335006504, 0.49924681227817325, 0.1515275223345367, 0.15397151833173084, 0.20606147425077947, 0.156195928566928, 0.11879305300362542, 0.1398972376506199, 0.1561741212173562, 0.1445922048043331, 0.16773669495469257, 0.10125092150605686, 0.12323362202680255, 0.12334023724794929, 0.12192940301804889, 0.10158961619046836, 0.10156619187141691, 0.0764779014745427, 0.10661216133917062, 0.09973933926239675, 0.09336317432246999, 0.08288218922732593, 0.07133622435784215, 0.08179256086385844, 0.08182152878057136, 0.06861590669146134, 0.1349279107838407, 0.10520933164285817, 0.08995730659907619, 0.8612113290845105, 0.8022876594311554, 0.9134260428423414, 0.8270544755089558, 0.8897142980934081, 0.8413571932539001, 0.9062318405149568, 0.8414635476547629, 0.9263261298095108, 0.26938624534729927, 0.2889173601115661, 0.2727011636597082, 0.3218904542923091, 0.269721211733855, 0.1509738191012573, 0.28284025413026215, 0.2924127050875178, 0.2701912784719279, 0.38068795999129346, 0.21413878587674084, 0.7310604436161691, 0.21478980892573074, 0.33390517617016213, 0.3476530346273491, 0.22772310038492682, 0.48847489163422775, 0.2910381805795139, 0.15783511822457463, 0.1656520927794487, 0.118327566425526, 0.18458952323511513, 0.18036374173962522, 0.11319767715130091, 0.17394069774603538, 0.18777634709973356, 0.24829558911398186, 0.17718745409867065, 0.1588444353719708, 0.12945905471607533, 0.17945132237851136, 0.12547782567464405, 0.17619930482807955, 0.1913880265227884, 0.17307147557713887, 0.1425362068200362, 9.999999999998899e-05, 0.021363907760804213, 9.999999999998899e-05, 0.02171392727895549, 0.05065933861771754, 0.10217286277329385, 0.02222814103275339, 9.999999999998899e-05, 0.07417597515918328, 0.21128390564100796, 0.12948928478399557, 0.10583513444547699, 0.09436017033387856, 0.08891979732904076, 0.12853144120218385, 0.14306508261822581, 0.13744180988845578, 0.08829778841618241, 9.999999999998899e-05, 9.999999999998899e-05, 0.007262328070015256, 9.999999999998899e-05, 0.001011153644226992, 0.0398395423929464, 9.999999999998899e-05, 0.0007538825080044553, 0.014310563636823481, 0.0768066198721663, 0.11604539658528834, 0.1330035053699783, 0.133560379322604, 0.1295612175689086, 0.1255414199725654, 0.09528311228838249, 0.08681391196842836, 0.07560488430871426, 0.4061634941140466, 0.42989769442497305, 0.45869847942330955, 0.4399731730866485, 0.4014340414728883, 0.4751891886712405, 0.4398332765687535, 0.4072617518033044, 0.4467924025775535, 0.09880175464083862, 0.08916010766582627, 0.10268981327229776, 0.08228166498517364, 0.12679547278932057, 0.10292478974107888, 0.11285899652998488, 0.0953384742785085, 0.09763738420717838, 0.16361393565507465, 0.23057657945206722, 0.2642263595418305, 0.2945320181570942, 0.27224752204854663, 0.23487390246674578, 0.20416225492132067, 0.256510318041262, 0.26360989854004835, 0.16351670771187, 0.23099998348969608, 0.2016880021271248, 0.31399222528139115, 0.2788482925179351, 0.30077670829901915, 0.3156549908832742, 0.2973610753212661, 0.15290630372381164, 0.20819972420812272, 0.24816526085055235, 0.17092687460745404, 0.23870118482486902, 0.1918222119132521, 0.19810653039787018, 0.26045002644299664, 0.20984469056748933, 0.2231065946587384, 0.224475972572179, 0.1993254332363531, 0.23180084226322906, 0.20648782725934878, 0.19203666635630823, 0.22497669482308502, 0.19905641294709275, 0.21596379437031465, 0.2115630985551321, 0.19852620772026308, 0.18971040092918312, 0.19753077138639963, 0.19203631476124272, 0.20814711399294117, 0.19567716328918272, 0.20111956689339994, 0.27156079181251214, 0.21144764517085202, 0.18541249894869927, 0.18555696528698207, 0.7653689990987222, 0.7150725097644325, 0.19873596493966927, 0.1948637521373625, 0.16535333585082312, 0.16818448017915566, 0.8029043035555923, 0.16608874981936372, 0.20550964310874398, 0.5951733337726305, 0.20769236390011037, 0.1651927698894493, 0.5913103169845075, 0.5292157155504169, 0.5815070413376073, 0.10413685076016532, 0.17802821320337625, 0.1914538778809235, 0.1696954906130188, 0.17859835168452243, 0.1835159504146534, 0.17722771226297596, 0.19200026404743464, 0.17673450433703897, 0.1901155978393837, 0.0781222389479026, 0.09421940340106227, 0.07625196875300722, 0.08446481991998755, 0.11131327187218576, 0.08606496366845318, 0.07496321850363707, 0.07757612781331424, 0.0740210942343631]}, "mutation_prompt": null}
{"id": "094daf90-762a-4cc3-bf90-3175a43c6340", "solution": "class EnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_radius = 0.1\n        self.local_search_prob = 0.1\n        \n    def __call__(self, func):\n        for t in range(self.budget):\n            func_val = func(self.global_best)\n\n            # Dynamically adjust local search radius based on function landscape\n            self.local_search_radius = 0.1 + 0.05 * np.tanh(func_val)\n\n            if np.random.rand() < self.local_search_prob:  # Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            \n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing exploration by introducing a dynamic local search radius and adaptive probability based on function landscape.", "configspace": "", "generation": 75, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('__call__(): incompatible function arguments. The following argument types are supported:\\n    1. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[float]) -> float\\n    2. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[List[float]]) -> List[float]\\n\\nInvoked with: <RealSingleObjectiveProblem 1. Sphere (iid=1 dim=5)>, None').", "error": "TypeError('__call__(): incompatible function arguments. The following argument types are supported:\\n    1. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[float]) -> float\\n    2. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[List[float]]) -> List[float]\\n\\nInvoked with: <RealSingleObjectiveProblem 1. Sphere (iid=1 dim=5)>, None')", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {}, "mutation_prompt": null}
{"id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 0.2\n        self.max_local_search_prob = 0.5\n        self.min_local_search_prob = 0.05\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            diversity = np.std(self.particles)\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n\n            if np.random.rand() < self.local_search_prob:  # Dynamic Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing global exploration via dynamic adaptation of local search probability based on population diversity.", "configspace": "", "generation": 76, "fitness": 0.23900093515400267, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "71a2e27b-abf9-4226-b28e-8de95857a4c5", "metadata": {"aucs": [0.4827274391903619, 0.5157628549617489, 0.5106279648667291, 0.5065560982528386, 0.5108318496989668, 0.5059382610483127, 0.4958981811346711, 0.5342088392412256, 0.4983743322045344, 0.16017465466342218, 0.13421044830540596, 0.10565557587112995, 0.18601392743812994, 0.16588774722972777, 0.12978386259802244, 0.18694508119235365, 0.16902320510267077, 0.15359631661172224, 0.08325792310038127, 0.11800564938428493, 0.10587784057677596, 0.10225283874680358, 0.13096847356058916, 0.11206632128703642, 0.09373218869524969, 0.08089567207543946, 0.09863702880302849, 0.10097013661782761, 0.07596871708198993, 0.06090100090125128, 0.0977170463292597, 0.09805823639903788, 0.05206841517191041, 0.08283774618257345, 0.08358552719038381, 0.05298459332830929, 0.9148433182833823, 0.8515900716401982, 0.8261632984876867, 0.8639296096202178, 0.9417863337569442, 0.8382563539603459, 0.8906339548009615, 0.8829427706542641, 0.8498282017999435, 0.28133512729872256, 0.2648338490304746, 0.3106039984085325, 0.28466300795800803, 0.25226180977923374, 0.27671588772552846, 0.2503517746513272, 0.2617276234396728, 0.22472971334229175, 0.3211197949297362, 0.29839115631174573, 0.32263787447708003, 0.3456381141044207, 0.37005956599016165, 0.7245236663162515, 0.30477332151463166, 0.2312472478487183, 0.6919482131752175, 0.15242651113482464, 0.16111409616296934, 0.1796405155765568, 0.18536825427138004, 0.1761194591000398, 0.12176512455988409, 0.16156770779972907, 0.17590740152220974, 0.22434813511565121, 0.15932292891098276, 0.1831304033892892, 0.20396015218404073, 0.23913330792030085, 0.20031914584176058, 0.19212702456433473, 0.17947139514025223, 0.11807496364551806, 0.20266141954775907, 0.009769971199454774, 0.0017227391153510352, 0.03459176289710597, 0.06819191609704556, 9.999999999998899e-05, 0.008219901621488668, 0.057844860849513124, 0.027910288103113134, 0.030988002683601024, 0.14571664640139315, 0.11032282398244675, 0.26337042794958987, 0.14575038733772194, 0.07133778256636725, 0.07919385914496557, 0.16946690149440313, 0.1455646304106547, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.018777275679245364, 0.02483920413276597, 9.999999999998899e-05, 0.008605519154051167, 0.0332167738159278, 0.1290607831730367, 0.11281283954477717, 0.119743290950594, 0.09851362411483655, 0.11967699574831991, 0.12350973097362727, 0.08956400932768394, 0.07200095922173111, 0.08159911437742795, 0.39354961280485223, 0.41062524262642186, 0.5156512108976494, 0.4162980871450732, 0.4359683006948276, 0.4034081881612709, 0.42767185011020725, 0.4331370855157064, 0.4371113372864899, 0.04088385148645213, 0.09048383023389905, 0.07581666027381817, 0.09406584498518222, 0.05667652377101817, 0.10338379991185398, 0.10233173014173369, 0.10833042786457558, 0.10759678365824255, 0.16631567729451635, 0.21036485406425043, 0.251816704683522, 0.2185221626253555, 0.23112445301033457, 0.26901454228341426, 0.252650156927386, 0.24420552467735268, 0.19757198170447432, 0.2747356229282495, 0.28074421531732885, 0.2214203055131575, 0.26038267534032344, 0.2993177448383655, 0.2998435322334656, 0.20823319054415512, 0.29592462661959695, 0.23936438297213614, 0.19997550092187288, 0.23593665256939433, 0.14855877489314895, 0.24790470538354992, 0.17210231717418667, 0.23879758551270336, 0.184401175921873, 0.23951467220920952, 0.20432809102187555, 0.2049569802303003, 0.22668765946144454, 0.23227926887102068, 0.22667813006172954, 0.21914765941469994, 0.23507655460956534, 0.21614009245907273, 0.23275983625654217, 0.20003544409359653, 0.19007469207706795, 0.20553975637891686, 0.20497938421366468, 0.18243238512332005, 0.18678725415151665, 0.17709031898161243, 0.19602139383647776, 0.20770123237437144, 0.1766891745908753, 0.7316672162297998, 0.1238535080972697, 0.15198810430428944, 0.7074213567884591, 0.19857759806962527, 0.8463549391563634, 0.12233002186102404, 0.1682010315742356, 0.16116573274015922, 0.5726207945782452, 0.6300371547965526, 0.5697026340264164, 0.5400694885246986, 0.16594555142376322, 0.20027449507309347, 0.16539951732927516, 0.5847981202352635, 0.49050152257843915, 0.18309205108541304, 0.18593436498791538, 0.18921150152284083, 0.20177465796634197, 0.18903326033803192, 0.17706826172658052, 0.1787711342216568, 0.18272239494770592, 0.18780124609213722, 0.08787437822659994, 0.07343008237844206, 0.07794156646887385, 0.09525166460793133, 0.0856850691232165, 0.08162473486016586, 0.08709509494193568, 0.08866272652449647, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "2ffc3a83-9594-46eb-8b99-e9f35ce0ed54", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 0.2\n        self.max_local_search_prob = 0.5\n        self.min_local_search_prob = 0.05\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            diversity = np.std(self.particles)\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n\n            if np.random.rand() < self.local_search_prob:  # Dynamic Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing global exploration via dynamic adaptation of local search probability based on population diversity.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "metadata": {"aucs": [0.4827274391903619, 0.5157628549617489, 0.5106279648667291, 0.5065560982528386, 0.5108318496989668, 0.5059382610483127, 0.4958981811346711, 0.5342088392412256, 0.4983743322045344, 0.16017465466342218, 0.13421044830540596, 0.10565557587112995, 0.18601392743812994, 0.16588774722972777, 0.12978386259802244, 0.18694508119235365, 0.16902320510267077, 0.15359631661172224, 0.08325792310038127, 0.11800564938428493, 0.10587784057677596, 0.10225283874680358, 0.13096847356058916, 0.11206632128703642, 0.09373218869524969, 0.08089567207543946, 0.09863702880302849, 0.10097013661782761, 0.07596871708198993, 0.06090100090125128, 0.0977170463292597, 0.09805823639903788, 0.05206841517191041, 0.08283774618257345, 0.08358552719038381, 0.05298459332830929, 0.9148433182833823, 0.8515900716401982, 0.8261632984876867, 0.8639296096202178, 0.9417863337569442, 0.8382563539603459, 0.8906339548009615, 0.8829427706542641, 0.8498282017999435, 0.28133512729872256, 0.2648338490304746, 0.3106039984085325, 0.28466300795800803, 0.25226180977923374, 0.27671588772552846, 0.2503517746513272, 0.2617276234396728, 0.22472971334229175, 0.3211197949297362, 0.29839115631174573, 0.32263787447708003, 0.3456381141044207, 0.37005956599016165, 0.7245236663162515, 0.30477332151463166, 0.2312472478487183, 0.6919482131752175, 0.15242651113482464, 0.16111409616296934, 0.1796405155765568, 0.18536825427138004, 0.1761194591000398, 0.12176512455988409, 0.16156770779972907, 0.17590740152220974, 0.22434813511565121, 0.15932292891098276, 0.1831304033892892, 0.20396015218404073, 0.23913330792030085, 0.20031914584176058, 0.19212702456433473, 0.17947139514025223, 0.11807496364551806, 0.20266141954775907, 0.009769971199454774, 0.0017227391153510352, 0.03459176289710597, 0.06819191609704556, 9.999999999998899e-05, 0.008219901621488668, 0.057844860849513124, 0.027910288103113134, 0.030988002683601024, 0.14571664640139315, 0.11032282398244675, 0.26337042794958987, 0.14575038733772194, 0.07133778256636725, 0.07919385914496557, 0.16946690149440313, 0.1455646304106547, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.018777275679245364, 0.02483920413276597, 9.999999999998899e-05, 0.008605519154051167, 0.0332167738159278, 0.1290607831730367, 0.11281283954477717, 0.119743290950594, 0.09851362411483655, 0.11967699574831991, 0.12350973097362727, 0.08956400932768394, 0.07200095922173111, 0.08159911437742795, 0.39354961280485223, 0.41062524262642186, 0.5156512108976494, 0.4162980871450732, 0.4359683006948276, 0.4034081881612709, 0.42767185011020725, 0.4331370855157064, 0.4371113372864899, 0.04088385148645213, 0.09048383023389905, 0.07581666027381817, 0.09406584498518222, 0.05667652377101817, 0.10338379991185398, 0.10233173014173369, 0.10833042786457558, 0.10759678365824255, 0.16631567729451635, 0.21036485406425043, 0.251816704683522, 0.2185221626253555, 0.23112445301033457, 0.26901454228341426, 0.252650156927386, 0.24420552467735268, 0.19757198170447432, 0.2747356229282495, 0.28074421531732885, 0.2214203055131575, 0.26038267534032344, 0.2993177448383655, 0.2998435322334656, 0.20823319054415512, 0.29592462661959695, 0.23936438297213614, 0.19997550092187288, 0.23593665256939433, 0.14855877489314895, 0.24790470538354992, 0.17210231717418667, 0.23879758551270336, 0.184401175921873, 0.23951467220920952, 0.20432809102187555, 0.2049569802303003, 0.22668765946144454, 0.23227926887102068, 0.22667813006172954, 0.21914765941469994, 0.23507655460956534, 0.21614009245907273, 0.23275983625654217, 0.20003544409359653, 0.19007469207706795, 0.20553975637891686, 0.20497938421366468, 0.18243238512332005, 0.18678725415151665, 0.17709031898161243, 0.19602139383647776, 0.20770123237437144, 0.1766891745908753, 0.7316672162297998, 0.1238535080972697, 0.15198810430428944, 0.7074213567884591, 0.19857759806962527, 0.8463549391563634, 0.12233002186102404, 0.1682010315742356, 0.16116573274015922, 0.5726207945782452, 0.6300371547965526, 0.5697026340264164, 0.5400694885246986, 0.16594555142376322, 0.20027449507309347, 0.16539951732927516, 0.5847981202352635, 0.49050152257843915, 0.18309205108541304, 0.18593436498791538, 0.18921150152284083, 0.20177465796634197, 0.18903326033803192, 0.17706826172658052, 0.1787711342216568, 0.18272239494770592, 0.18780124609213722, 0.08787437822659994, 0.07343008237844206, 0.07794156646887385, 0.09525166460793133, 0.0856850691232165, 0.08162473486016586, 0.08709509494193568, 0.08866272652449647, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "26160aec-4551-4902-a9a7-49cf7d253225", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 0.2\n        self.max_local_search_prob = 0.5\n        self.min_local_search_prob = 0.05\n        self.step_size_factor = 0.1\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            diversity = np.std(self.particles)\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n\n            if np.random.rand() < self.local_search_prob:  # Dynamic Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.normal(0, self.local_search_radius * self.step_size_factor, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n                        self.step_size_factor *= 1.1  # Adaptive step size control\n                    else:\n                        self.step_size_factor *= 0.9  # Adaptive step size control\n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "ImprovedHybridPSODE", "description": "Improving global exploration by incorporating a novel mutation strategy based on adaptive step size control.", "configspace": "", "generation": 78, "fitness": 0.23310736709600596, "feedback": "The algorithm ImprovedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "metadata": {"aucs": [0.4827274391903619, 0.5363450519612483, 0.5106279648667291, 0.5065560982528386, 0.4941299181865013, 0.5059382610483127, 0.4958981811346711, 0.48956382982372326, 0.4983743322045344, 0.16017465466342218, 0.1109109768532549, 0.10565557587112995, 0.18601392743812994, 0.13224311273859368, 0.12978386259802244, 0.18694508119235365, 0.0146017093008326, 0.15359631661172224, 0.08325792310038127, 0.0953223152137812, 0.10587784057677596, 0.10225283874680358, 0.10879093968278797, 0.11206632128703642, 0.09373218869524969, 0.10077552807334378, 0.09863702880302849, 0.10097013661782761, 0.07949231282681124, 0.06090100090125128, 0.0977170463292597, 0.08837212731805344, 0.05206841517191041, 0.08283774618257345, 0.06166903560171655, 0.05298459332830929, 0.9148433182833823, 0.7476757466292487, 0.8261632984876867, 0.8639296096202178, 0.8537512781767473, 0.8382563539603459, 0.8906339548009615, 0.8301645347083958, 0.8498282017999435, 0.28133512729872256, 0.2648689281778286, 0.3106039984085325, 0.28466300795800803, 0.1490467827976839, 0.27671588772552846, 0.2503517746513272, 0.24222505284570028, 0.22472971334229175, 0.3211197949297362, 0.15766810131937892, 0.32263787447708003, 0.3456381141044207, 0.21866272674993947, 0.7245236663162515, 0.30477332151463166, 0.19758817120969296, 0.6919482131752175, 0.15242651113482464, 0.11828397130343038, 0.1796405155765568, 0.18536825427138004, 0.12668948190647644, 0.12176512455988409, 0.16156770779972907, 0.2114738924635684, 0.22434813511565121, 0.15932292891098276, 0.18729043227373754, 0.20396015218404073, 0.23913330792030085, 0.20359343483223757, 0.19212702456433473, 0.17947139514025223, 0.14833856367141784, 0.20266141954775907, 0.009769971199454774, 0.005478467153163136, 0.03459176289710597, 0.06819191609704556, 9.999999999998899e-05, 0.008219901621488668, 0.057844860849513124, 9.999999999998899e-05, 0.030988002683601024, 0.14571664640139315, 0.09863448859846813, 0.26337042794958987, 0.14575038733772194, 0.050888277292417294, 0.07919385914496557, 0.16946690149440313, 0.1310012667813658, 0.2721485623947688, 9.999999999998899e-05, 0.023381774255512022, 0.05331012382416045, 0.01008356405494193, 9.999999999998899e-05, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.059876352241186814, 0.119743290950594, 0.09851362411483655, 0.11464642156017801, 0.12350973097362727, 0.08956400932768394, 0.04503077603289385, 0.08159911437742795, 0.39354961280485223, 0.41769727258821554, 0.5156512108976494, 0.4162980871450732, 0.4148266777872487, 0.4034081881612709, 0.42767185011020725, 0.42054442302806594, 0.4371113372864899, 0.04088385148645213, 0.08258638909203286, 0.07581666027381817, 0.09406584498518222, 0.07927390401910561, 0.10338379991185398, 0.10233173014173369, 0.09756256535665075, 0.10759678365824255, 0.16631567729451635, 0.23465307357514908, 0.251816704683522, 0.2185221626253555, 0.27603870862955293, 0.26901454228341426, 0.252650156927386, 0.2292356222732368, 0.19757198170447432, 0.2747356229282495, 0.2678638887142979, 0.2214203055131575, 0.26038267534032344, 0.22932444584189016, 0.2998435322334656, 0.20823319054415512, 0.29962209101773574, 0.23936438297213614, 0.19997550092187288, 0.25040387538351816, 0.14855877489314895, 0.24790470538354992, 0.20262814916939975, 0.23879758551270336, 0.184401175921873, 0.23466259593972405, 0.20432809102187555, 0.2049569802303003, 0.21965231346509806, 0.23227926887102068, 0.22667813006172954, 0.2259396300423474, 0.23507655460956534, 0.21614009245907273, 0.20054785740543857, 0.20003544409359653, 0.19007469207706795, 0.21414749727376792, 0.20497938421366468, 0.18243238512332005, 0.21594624107282046, 0.17709031898161243, 0.19602139383647776, 0.27775248541821795, 0.1766891745908753, 0.7316672162297998, 0.17389727769966534, 0.15198810430428944, 0.7074213567884591, 0.199159988672454, 0.8463549391563634, 0.12233002186102404, 0.1680902147056229, 0.16116573274015922, 0.5726207945782452, 0.20785387495576346, 0.5697026340264164, 0.5400694885246986, 0.2053222076142962, 0.20027449507309347, 0.16539951732927516, 0.7200225514213463, 0.49050152257843915, 0.18309205108541304, 0.20628299293811292, 0.18921150152284083, 0.20177465796634197, 0.18277796242557354, 0.17706826172658052, 0.1787711342216568, 0.1805451197049135, 0.18780124609213722, 0.08787437822659994, 0.09576670419737854, 0.07794156646887385, 0.09525166460793133, 0.08728401085307191, 0.08162473486016586, 0.08709509494193568, 0.08600661022089007, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "7b9e0e0f-ba6f-4ac8-a263-0809609a54db", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 0.2\n        self.max_local_search_prob = 0.5\n        self.min_local_search_prob = 0.05\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            diversity = np.std(self.particles)\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n            \n            # Adaptive local search radius\n            self.local_search_radius = 0.1 + 0.1 * np.mean(np.abs(np.diff(self.particles, axis=0)))  # Refinement\n            \n            if np.random.rand() < self.local_search_prob:  # Dynamic Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Adapting local search radius based on particle movement history to enhance exploration-exploitation balance. ", "configspace": "", "generation": 79, "fitness": 0.23856398791401515, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "metadata": {"aucs": [0.4827274391903619, 0.4605593465109984, 0.5106279648667291, 0.5065560982528386, 0.48462647422912564, 0.5059382610483127, 0.4958981811346711, 0.46395124092993145, 0.4983743322045344, 0.16017465466342218, 0.19261862741008096, 0.10565557587112995, 0.18601392743812994, 0.15215081635435457, 0.12978386259802244, 0.18694508119235365, 0.1999669514705883, 0.15359631661172224, 0.08325792310038127, 0.0945959124578929, 0.10587784057677596, 0.10225283874680358, 0.11823144411883746, 0.11206632128703642, 0.09373218869524969, 0.10078119764676507, 0.09863702880302849, 0.10097013661782761, 0.08965659667999115, 0.06090100090125128, 0.0977170463292597, 0.09421374397531967, 0.05206841517191041, 0.08283774618257345, 0.08785211988766806, 0.05298459332830929, 0.9148433182833823, 0.8794108018303418, 0.8261632984876867, 0.8639296096202178, 0.9261709026496976, 0.8382563539603459, 0.8906339548009615, 0.886283398928545, 0.8498282017999435, 0.28133512729872256, 0.24037624097208354, 0.3106039984085325, 0.28466300795800803, 0.2453473080287918, 0.27671588772552846, 0.2503517746513272, 0.28144249445371317, 0.22472971334229175, 0.3211197949297362, 0.3367027893770568, 0.32263787447708003, 0.3456381141044207, 0.21286938812632195, 0.7245236663162515, 0.30477332151463166, 0.23221694353358246, 0.6919482131752175, 0.15242651113482464, 0.19703881897440745, 0.1796405155765568, 0.18536825427138004, 0.17588629156535385, 0.12176512455988409, 0.16156770779972907, 0.15181812169033038, 0.22434813511565121, 0.15932292891098276, 0.1707681329375067, 0.20396015218404073, 0.23913330792030085, 0.17892193544102686, 0.19212702456433473, 0.17947139514025223, 0.19933281852358387, 0.20266141954775907, 0.009769971199454774, 0.04137478817269313, 0.03459176289710597, 0.06819191609704556, 0.04443931598480666, 0.008219901621488668, 0.057844860849513124, 0.0002570925015419334, 0.030988002683601024, 0.14571664640139315, 0.13730104514576635, 0.26337042794958987, 0.14575038733772194, 0.058881297229832485, 0.07919385914496557, 0.16946690149440313, 0.12992315676449284, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 9.999999999998899e-05, 0.02483920413276597, 9.999999999998899e-05, 0.0014100177849384332, 0.0332167738159278, 0.1290607831730367, 0.10974843356048425, 0.119743290950594, 0.09851362411483655, 0.11172836420140153, 0.12350973097362727, 0.08956400932768394, 0.06953461212979639, 0.08159911437742795, 0.39354961280485223, 0.43318804671411004, 0.5156512108976494, 0.4162980871450732, 0.40645673130754456, 0.4034081881612709, 0.42767185011020725, 0.43604685820004885, 0.4371113372864899, 0.04088385148645213, 0.07497629506324988, 0.07581666027381817, 0.09406584498518222, 0.0797744699325802, 0.10338379991185398, 0.10233173014173369, 0.1065811017704027, 0.10759678365824255, 0.16631567729451635, 0.24691691912695068, 0.251816704683522, 0.2185221626253555, 0.24558810532585407, 0.26901454228341426, 0.252650156927386, 0.2691900492820457, 0.19757198170447432, 0.2747356229282495, 0.287833876227641, 0.2214203055131575, 0.26038267534032344, 0.3027191455284596, 0.2998435322334656, 0.20823319054415512, 0.28125107119539083, 0.23936438297213614, 0.19997550092187288, 0.2192385730116, 0.14855877489314895, 0.24790470538354992, 0.18611545679236285, 0.23879758551270336, 0.184401175921873, 0.2256477715795694, 0.20432809102187555, 0.2049569802303003, 0.25627134357555315, 0.23227926887102068, 0.22667813006172954, 0.1884256002249357, 0.23507655460956534, 0.21614009245907273, 0.22641450793490026, 0.20003544409359653, 0.19007469207706795, 0.19271686731277826, 0.20497938421366468, 0.18243238512332005, 0.18745752769760837, 0.17709031898161243, 0.19602139383647776, 0.20186684961279977, 0.1766891745908753, 0.7316672162297998, 0.18409776205957873, 0.15198810430428944, 0.7074213567884591, 0.19931050862741362, 0.8463549391563634, 0.12233002186102404, 0.16701867344493493, 0.16116573274015922, 0.5726207945782452, 0.5941007181894052, 0.5697026340264164, 0.5400694885246986, 0.16589315962811801, 0.20027449507309347, 0.16539951732927516, 0.5296449000393868, 0.49050152257843915, 0.18309205108541304, 0.1771751359558521, 0.18921150152284083, 0.20177465796634197, 0.1779415243572735, 0.17706826172658052, 0.1787711342216568, 0.1904429093376706, 0.18780124609213722, 0.08787437822659994, 0.10868604950560234, 0.07794156646887385, 0.09525166460793133, 0.10106380632616763, 0.08162473486016586, 0.08709509494193568, 0.07278380268646034, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "c74a2cf5-44c0-441c-9afc-81758ec108da", "solution": "import numpy as np\n\nclass OpposedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 0.2\n        self.max_local_search_prob = 0.5\n        self.min_local_search_prob = 0.05\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            diversity = np.std(self.particles)\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n\n            if np.random.rand() < self.local_search_prob:  # Dynamic Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            else:  # Original HybridPSODE update with opposition-based initialization\n                for i in range(self.population_size):\n                    opposite_particle = -self.particles[i]\n                    if func(opposite_particle) < func(self.particles[i]):\n                        self.particles[i] = opposite_particle.copy()\n        return self.global_best", "name": "OpposedHybridPSODE", "description": "Improving global exploration by incorporating opposition-based learning to enhance population diversity and convergence speed.", "configspace": "", "generation": 80, "fitness": 0.07756520665503805, "feedback": "The algorithm OpposedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "metadata": {"aucs": [0.13302748116505203, 0.11107795289111777, 0.2434907714829848, 0.1575106354048279, 0.17769499276680523, 0.1868514883382023, 0.1473290918857061, 0.11524123288494825, 0.10775846813603107, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027188023936269734, 0.025434465789070937, 0.03938830382544789, 0.06708786709063153, 0.03182709364943004, 0.06538718410432409, 0.029227891020970675, 0.007211485589530109, 0.04319765935174713, 0.00827908551146661, 9.999999999998899e-05, 0.026505957393878288, 0.05068218405802194, 0.0327450888350701, 0.021413383869746894, 0.0084746471057624, 0.046529632802176146, 0.017826551472806207, 0.061592483285484056, 0.0702084352830723, 0.06303429070592137, 0.0632874687230437, 0.07143563322833324, 0.06179250152493676, 0.07645729224074715, 0.06696280284934275, 0.060575577168328176, 0.05081736492096711, 0.008493910335435118, 0.0838857847725174, 0.08938760153635084, 0.05721418666809752, 0.0619191166892602, 0.0034191504487783853, 0.029079048895979787, 0.011181890151677032, 0.10775964280739081, 0.05019609159626448, 0.05645045724770137, 0.04521295013241, 0.06268047108080788, 0.04939051557156404, 0.06616371970545554, 0.07676081935283197, 0.03196173343911812, 0.0013345268211465422, 0.04718301922393586, 0.002081331910979145, 9.999999999998899e-05, 0.006663873634165207, 0.002494716969602462, 0.0180572818985143, 0.048223074590007076, 0.06809209296703922, 0.07545139063225348, 9.999999999998899e-05, 0.029401693033350607, 0.050934751655232535, 0.0004226759896910348, 0.0010716102197053656, 0.0007461233556136371, 9.999999999998899e-05, 0.01705793426764035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09324562432217731, 0.04886348757519843, 0.070630190768045, 0.06086866031473093, 0.027352851854831717, 0.04445134358984493, 0.10729554652806705, 0.05554631128799048, 0.09565693181847346, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027001569205749365, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028947591600733125, 0.009171377698562133, 0.18088300288559844, 0.1716684087732514, 0.2132791604038935, 0.1855526613057389, 0.15427637313929643, 0.15302311984420425, 0.19675104097303953, 0.1399942727939839, 0.19975526258021792, 0.02570889581750402, 0.003152074647436498, 0.036152803409343126, 0.022671998351338707, 0.025585315823492216, 0.043761702841489725, 0.012724068514202047, 0.02613940001619708, 0.06160075409261101, 0.12198755994014121, 0.15939636056298334, 0.13602597655277515, 0.22378412531261793, 0.13964282254926363, 0.12215288426997872, 0.1563086415439533, 0.11712609064264912, 0.1387970260244743, 0.16196117356541395, 0.13645112369826862, 0.12340578730526286, 0.14167662571675577, 0.13414054716931534, 0.15085029594044153, 0.1382890377285445, 0.18103972163050708, 0.15161220844320544, 0.08750771297036386, 0.07915673923036304, 0.08201605048031724, 0.085129089965431, 0.07541324075976097, 0.09472544711958342, 0.08298351193591336, 0.11566226045209627, 0.10117338784994923, 0.15050616516148763, 0.12059404223788739, 0.13461558123369954, 0.14981759903379877, 0.11493551979817018, 0.14824117578510487, 0.1721536757545622, 0.11932952051674417, 0.13604662192934702, 0.09695236866423418, 0.049530359052814, 0.11342555531373055, 0.1387227615862927, 0.08196926104246727, 0.1123406014622973, 0.11511181392162928, 0.10453484988485984, 0.15268010619527417, 0.14427623094380337, 0.14522062424541404, 0.1574200168734342, 0.15216561488513014, 0.18129170860392474, 0.39826287573143915, 0.11209871621489254, 0.15618565999817835, 0.15045123643337388, 0.08128519004570667, 0.15811070043596065, 0.1074242841088604, 0.16148008738139974, 0.1073412337477665, 0.22956642778746394, 0.17530917347676733, 0.11328715371253639, 0.09672293120832653, 0.1651037757940087, 0.1763055306314938, 0.15746570051595132, 0.17021139475326075, 0.16689289206992963, 0.1695910343650756, 0.1927155670050874, 0.16842259933415138, 0.18515699642237027, 0.04039652777895297, 0.036407608826796944, 0.04907159013440665, 0.03868465476231009, 0.04249185078459872, 0.04468632994670718, 0.03880095297227981, 0.03212198507295361, 0.041397291878811804]}, "mutation_prompt": null}
{"id": "d1b348fa-ce04-4bd9-99de-1f1532dcb313", "solution": "import numpy as np\n\nclass EnhancedHybridPSODEMutation(EnhancedHybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.1\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            diversity = np.std(self.particles)\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n\n            if np.random.rand() < self.local_search_prob:  # Dynamic Local Search with Mutation\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n                    else:  # Mutation mechanism\n                        mutation = np.random.uniform(-self.mutation_rate, self.mutation_rate, self.dim)\n                        candidate = np.clip(self.particles[i] + mutation, -5.0, 5.0)\n                        if func(candidate) < func(self.particles[i]):\n                            self.particles[i] = candidate.copy()\n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "EnhancedHybridPSODEMutation", "description": "Improving exploration by introducing a mutation mechanism for particles to escape local optima more effectively.", "configspace": "", "generation": 81, "fitness": 0.22941088854930738, "feedback": "The algorithm EnhancedHybridPSODEMutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "metadata": {"aucs": [0.4936121171868002, 0.4871846768646916, 0.5281548682661281, 0.49283318420674127, 0.4970504819120818, 0.5104397915327695, 0.44564562854442846, 0.4733542768325184, 0.4980525182878871, 0.17418129613601485, 0.22211784356115483, 0.1513742242460554, 0.1490491698297497, 0.13893617329817154, 0.15787108635779024, 0.17082949080666243, 0.13647504287503254, 0.1487604492183373, 0.060978428349703795, 0.09847259183167112, 0.06366602085631712, 0.10229495962337354, 0.12328247856438124, 0.10671426290565955, 0.1002203331118211, 0.11483562691063165, 0.10748994573641701, 0.09427910838036446, 0.08956591580301831, 0.0763649157845091, 0.07980104827805246, 0.052617956444497405, 0.09082764723600378, 0.12310769022760693, 0.07657012245088046, 0.07629481285927031, 0.9199156446453395, 0.9334633552176793, 0.9307088649985704, 0.8843056249282215, 0.875883202294997, 0.9081297069886174, 0.88622238644501, 0.8428229604151894, 0.8253578793046014, 0.2486914582985803, 0.2493214409326886, 0.2737195250768455, 0.25323284421337755, 0.24539775312976053, 0.14255614701147856, 0.27352998295052755, 0.27008546207894935, 0.2554928307507309, 0.38320752020184246, 0.35875405682283035, 0.3435636237300409, 0.1892122664958341, 0.2672613179391834, 0.3895184786559521, 0.1252142302493361, 0.31492306946101367, 0.22810907798027347, 0.16797579410023378, 0.12230352134191913, 0.18147844230929822, 0.16987243272634556, 0.16836767413344045, 0.10896840202621039, 0.20475416569828497, 0.18081481394255994, 0.1639578775326318, 0.1920148347709162, 0.18057650209049447, 0.19150001509690695, 0.2003024604245126, 0.18344345267039075, 0.20838533276751514, 0.18208924027361906, 0.19669890380560429, 0.18440285991602312, 0.04465299754098484, 9.999999999998899e-05, 0.0001894235102749553, 0.040939035611403995, 0.007728751812295154, 0.0057451069025746815, 0.015044372829053465, 0.08125396489475112, 0.003952977151353898, 0.16853670696624035, 0.16970248481265682, 0.07099045391392722, 0.14524964221739578, 0.1550808062700395, 0.08097661964551373, 0.10274085672594502, 0.13066198503313753, 0.17721246857183526, 9.999999999998899e-05, 9.999999999998899e-05, 0.012382885099305296, 0.010097448772759865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012225615729732908, 0.02583895915544765, 0.09930323417659803, 0.12093783399872371, 0.05041994942815731, 0.09125036540297027, 0.08360917540398716, 0.10242437598647525, 0.0979741407165553, 0.08278997573899383, 0.07029296741460822, 0.39712129295808496, 0.3963457497824503, 0.42820678962681946, 0.41268294385777227, 0.3948742297645529, 0.4266057447839213, 0.417881769223833, 0.4231287214639047, 0.4377389129276854, 0.06598739021877087, 0.0783483282698928, 0.07427230566186549, 0.07396148475518982, 0.08671752572130154, 0.08971155314324131, 0.09728261588550591, 0.0857950544435957, 0.09422039667281679, 0.24307618675222764, 0.23427165640939285, 0.25855937041531063, 0.2406720453445046, 0.21593226512460162, 0.23962624036348867, 0.20621085195831257, 0.2370913620958277, 0.28907843164851943, 0.29504439736213506, 0.2789924117011203, 0.2723220991420884, 0.29148005064351756, 0.22302043000623395, 0.2655214014055578, 0.23552354494281746, 0.2965496301783954, 0.224111494503339, 0.16627491184360244, 0.20583865499020715, 0.12975426145368696, 0.22824669931940267, 0.22345164177315147, 0.1888925806310704, 0.18494679061423602, 0.25806092403960346, 0.24030336684816467, 0.2248450179300262, 0.25198797633238257, 0.2292057436277125, 0.2437874910837965, 0.2027606841743267, 0.18547699978192245, 0.22096689273504566, 0.22893955057572013, 0.2309713989266433, 0.22333501171939374, 0.18479051144037195, 0.1918745453591849, 0.18665233102635115, 0.19451165196831732, 0.18094979858512739, 0.19789867080545853, 0.19292708906077227, 0.17538841747885126, 0.731402594403959, 0.1850003179690355, 0.18408645277744373, 0.7597377956467775, 0.19711614996247928, 0.7143586605248446, 0.16371526891390453, 0.16741818106196793, 0.15005267281067158, 0.5424763440707396, 0.5199937324418026, 0.5100794778965747, 0.4309128606382031, 0.2020591748031525, 0.5888580344163667, 0.10417196654497018, 0.16619800006491792, 0.4512889142359975, 0.18283130647803114, 0.17441011623438119, 0.18684238480562843, 0.18173021702190884, 0.1826663124827369, 0.19517622776192922, 0.17868064971241548, 0.19220420552780326, 0.17013929740170008, 0.0945815541585675, 0.08743985227056128, 0.09610879693004248, 0.07773269731360033, 0.08125136014586098, 0.11394109954957277, 0.07068850691083739, 0.07183426951249727, 0.07494403052687215]}, "mutation_prompt": null}
{"id": "8d09d44c-8463-4fbf-8032-e4492d26b2b7", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 0.2\n        self.max_local_search_prob = 0.5\n        self.min_local_search_prob = 0.05\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            diversity = np.std(self.particles)\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n\n            if np.random.rand() < self.local_search_prob:  # Dynamic Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing global exploration via dynamic adaptation of local search probability based on population diversity.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "metadata": {"aucs": [0.4827274391903619, 0.5157628549617489, 0.5106279648667291, 0.5065560982528386, 0.5108318496989668, 0.5059382610483127, 0.4958981811346711, 0.5342088392412256, 0.4983743322045344, 0.16017465466342218, 0.13421044830540596, 0.10565557587112995, 0.18601392743812994, 0.16588774722972777, 0.12978386259802244, 0.18694508119235365, 0.16902320510267077, 0.15359631661172224, 0.08325792310038127, 0.11800564938428493, 0.10587784057677596, 0.10225283874680358, 0.13096847356058916, 0.11206632128703642, 0.09373218869524969, 0.08089567207543946, 0.09863702880302849, 0.10097013661782761, 0.07596871708198993, 0.06090100090125128, 0.0977170463292597, 0.09805823639903788, 0.05206841517191041, 0.08283774618257345, 0.08358552719038381, 0.05298459332830929, 0.9148433182833823, 0.8515900716401982, 0.8261632984876867, 0.8639296096202178, 0.9417863337569442, 0.8382563539603459, 0.8906339548009615, 0.8829427706542641, 0.8498282017999435, 0.28133512729872256, 0.2648338490304746, 0.3106039984085325, 0.28466300795800803, 0.25226180977923374, 0.27671588772552846, 0.2503517746513272, 0.2617276234396728, 0.22472971334229175, 0.3211197949297362, 0.29839115631174573, 0.32263787447708003, 0.3456381141044207, 0.37005956599016165, 0.7245236663162515, 0.30477332151463166, 0.2312472478487183, 0.6919482131752175, 0.15242651113482464, 0.16111409616296934, 0.1796405155765568, 0.18536825427138004, 0.1761194591000398, 0.12176512455988409, 0.16156770779972907, 0.17590740152220974, 0.22434813511565121, 0.15932292891098276, 0.1831304033892892, 0.20396015218404073, 0.23913330792030085, 0.20031914584176058, 0.19212702456433473, 0.17947139514025223, 0.11807496364551806, 0.20266141954775907, 0.009769971199454774, 0.0017227391153510352, 0.03459176289710597, 0.06819191609704556, 9.999999999998899e-05, 0.008219901621488668, 0.057844860849513124, 0.027910288103113134, 0.030988002683601024, 0.14571664640139315, 0.11032282398244675, 0.26337042794958987, 0.14575038733772194, 0.07133778256636725, 0.07919385914496557, 0.16946690149440313, 0.1455646304106547, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.018777275679245364, 0.02483920413276597, 9.999999999998899e-05, 0.008605519154051167, 0.0332167738159278, 0.1290607831730367, 0.11281283954477717, 0.119743290950594, 0.09851362411483655, 0.11967699574831991, 0.12350973097362727, 0.08956400932768394, 0.07200095922173111, 0.08159911437742795, 0.39354961280485223, 0.41062524262642186, 0.5156512108976494, 0.4162980871450732, 0.4359683006948276, 0.4034081881612709, 0.42767185011020725, 0.4331370855157064, 0.4371113372864899, 0.04088385148645213, 0.09048383023389905, 0.07581666027381817, 0.09406584498518222, 0.05667652377101817, 0.10338379991185398, 0.10233173014173369, 0.10833042786457558, 0.10759678365824255, 0.16631567729451635, 0.21036485406425043, 0.251816704683522, 0.2185221626253555, 0.23112445301033457, 0.26901454228341426, 0.252650156927386, 0.24420552467735268, 0.19757198170447432, 0.2747356229282495, 0.28074421531732885, 0.2214203055131575, 0.26038267534032344, 0.2993177448383655, 0.2998435322334656, 0.20823319054415512, 0.29592462661959695, 0.23936438297213614, 0.19997550092187288, 0.23593665256939433, 0.14855877489314895, 0.24790470538354992, 0.17210231717418667, 0.23879758551270336, 0.184401175921873, 0.23951467220920952, 0.20432809102187555, 0.2049569802303003, 0.22668765946144454, 0.23227926887102068, 0.22667813006172954, 0.21914765941469994, 0.23507655460956534, 0.21614009245907273, 0.23275983625654217, 0.20003544409359653, 0.19007469207706795, 0.20553975637891686, 0.20497938421366468, 0.18243238512332005, 0.18678725415151665, 0.17709031898161243, 0.19602139383647776, 0.20770123237437144, 0.1766891745908753, 0.7316672162297998, 0.1238535080972697, 0.15198810430428944, 0.7074213567884591, 0.19857759806962527, 0.8463549391563634, 0.12233002186102404, 0.1682010315742356, 0.16116573274015922, 0.5726207945782452, 0.6300371547965526, 0.5697026340264164, 0.5400694885246986, 0.16594555142376322, 0.20027449507309347, 0.16539951732927516, 0.5847981202352635, 0.49050152257843915, 0.18309205108541304, 0.18593436498791538, 0.18921150152284083, 0.20177465796634197, 0.18903326033803192, 0.17706826172658052, 0.1787711342216568, 0.18272239494770592, 0.18780124609213722, 0.08787437822659994, 0.07343008237844206, 0.07794156646887385, 0.09525166460793133, 0.0856850691232165, 0.08162473486016586, 0.08709509494193568, 0.08866272652449647, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "ddfca347-40e2-4e9c-aba3-ae102ee66f05", "solution": "import numpy as np\n\nclass EnhancedHybridPSODEImproved(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 0.2\n        self.max_local_search_prob = 0.5\n        self.min_local_search_prob = 0.05\n        self.inertia_weight = 0.9  # New parameter for adaptive inertia weight\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            diversity = np.std(self.particles)\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n\n            if np.random.rand() < self.local_search_prob:  # Dynamic Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            else:  # Updated HybridPSODE with adaptive inertia weight\n                for i in range(self.population_size):\n                    cognitive = self.cognitive_weight * np.random.uniform(0, 1, self.dim) * (self.personal_best[i] - self.particles[i])\n                    social = self.social_weight * np.random.uniform(0, 1, self.dim) * (self.global_best - self.particles[i])\n                    velocity = self.inertia_weight * self.velocities[i] + cognitive + social\n                    self.particles[i] = np.clip(self.particles[i] + velocity, -5.0, 5.0)\n                    if func(self.particles[i]) < func(self.personal_best[i]):\n                        self.personal_best[i] = self.particles[i].copy()\n                    if func(self.particles[i]) < func(self.global_best):\n                        self.global_best = self.particles[i].copy()\n                    self.velocities[i] = velocity\n                    self.inertia_weight -= 0.0005  # Adaptive update of inertia weight\n\n        return self.global_best", "name": "EnhancedHybridPSODEImproved", "description": "Improving global exploration by introducing adaptive inertia weight for better convergence and exploration trade-off.", "configspace": "", "generation": 83, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedHybridPSODEImproved' object has no attribute 'cognitive_weight'\").", "error": "AttributeError(\"'EnhancedHybridPSODEImproved' object has no attribute 'cognitive_weight'\")", "parent_id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "metadata": {}, "mutation_prompt": null}
{"id": "2aa3eb61-c9cf-4ae8-9d76-a0735f578b36", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 0.2\n        self.max_local_search_prob = 0.5\n        self.min_local_search_prob = 0.05\n        self.perturbation_factor = 0.1\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            diversity = np.std(self.particles)\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n\n            if np.random.rand() < self.local_search_prob:\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius * self.perturbation_factor, self.local_search_radius * self.perturbation_factor, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            else:\n                super().__call__(func)\n        return self.global_best", "name": "EnhancedAdaptiveHybridPSODE", "description": "Enhancing global exploration via adaptive local search with variable perturbation for improved convergence.", "configspace": "", "generation": 84, "fitness": 0.23796977827657922, "feedback": "The algorithm EnhancedAdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "metadata": {"aucs": [0.4827274391903619, 0.5001681238748505, 0.5106279648667291, 0.5065560982528386, 0.4484766287144487, 0.5059382610483127, 0.4958981811346711, 0.507838152541301, 0.4983743322045344, 0.16017465466342218, 0.15621866861105405, 0.10565557587112995, 0.18601392743812994, 0.15697937966782716, 0.12978386259802244, 0.18694508119235365, 0.17802779123009482, 0.15359631661172224, 0.08325792310038127, 0.11598952260555129, 0.10587784057677596, 0.10225283874680358, 0.0857843361315167, 0.11206632128703642, 0.09373218869524969, 0.06445547849283007, 0.09863702880302849, 0.10097013661782761, 0.09965877160222203, 0.06090100090125128, 0.0977170463292597, 0.07657262843601675, 0.05206841517191041, 0.08283774618257345, 0.07441923803553052, 0.05298459332830929, 0.9148433182833823, 0.8526799582491629, 0.8261632984876867, 0.8639296096202178, 0.9418266038675946, 0.8382563539603459, 0.8906339548009615, 0.8831178194797367, 0.8498282017999435, 0.28133512729872256, 0.24729859070510007, 0.3106039984085325, 0.28466300795800803, 0.2573615320254228, 0.27671588772552846, 0.2503517746513272, 0.26316960114971033, 0.22472971334229175, 0.3211197949297362, 0.2576438791831124, 0.32263787447708003, 0.3456381141044207, 0.1950217652444145, 0.7245236663162515, 0.30477332151463166, 0.3140564977743473, 0.6919482131752175, 0.15242651113482464, 0.15771580016822428, 0.1796405155765568, 0.18536825427138004, 0.16249604534013706, 0.12176512455988409, 0.16156770779972907, 0.1957140147869132, 0.22434813511565121, 0.15932292891098276, 0.17116830451132392, 0.20396015218404073, 0.23913330792030085, 0.21138138715641452, 0.19212702456433473, 0.17947139514025223, 0.11900940608920241, 0.20266141954775907, 0.009769971199454774, 0.032347171539600095, 0.03459176289710597, 0.06819191609704556, 0.022568804315986735, 0.008219901621488668, 0.057844860849513124, 0.02575565382258571, 0.030988002683601024, 0.14571664640139315, 0.09516612201687857, 0.26337042794958987, 0.14575038733772194, 0.06069946466901599, 0.07919385914496557, 0.16946690149440313, 0.13276097417349597, 0.2721485623947688, 9.999999999998899e-05, 0.00241728669676633, 0.05331012382416045, 0.01008356405494193, 9.999999999998899e-05, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.10090981237342089, 0.119743290950594, 0.09851362411483655, 0.10223104439408803, 0.12350973097362727, 0.08956400932768394, 0.04629496042829284, 0.08159911437742795, 0.39354961280485223, 0.43197509356951347, 0.5156512108976494, 0.4162980871450732, 0.4013867687120163, 0.4034081881612709, 0.42767185011020725, 0.393886479802422, 0.4371113372864899, 0.04088385148645213, 0.05704927651625491, 0.07581666027381817, 0.09406584498518222, 0.0623739100080033, 0.10338379991185398, 0.10233173014173369, 0.09722112689021412, 0.10759678365824255, 0.16631567729451635, 0.2733095698880825, 0.251816704683522, 0.2185221626253555, 0.2562967169985423, 0.26901454228341426, 0.252650156927386, 0.23723052871763162, 0.19757198170447432, 0.2747356229282495, 0.2961181788043167, 0.2214203055131575, 0.26038267534032344, 0.288899555901885, 0.2998435322334656, 0.20823319054415512, 0.3066036850819933, 0.23936438297213614, 0.19997550092187288, 0.21536800725330285, 0.14855877489314895, 0.24790470538354992, 0.24769465876299768, 0.23879758551270336, 0.184401175921873, 0.25988380896027874, 0.20432809102187555, 0.2049569802303003, 0.19690572796530792, 0.23227926887102068, 0.22667813006172954, 0.20547734905986514, 0.23507655460956534, 0.21614009245907273, 0.25816883318561135, 0.20003544409359653, 0.19007469207706795, 0.19026324369647196, 0.20497938421366468, 0.18243238512332005, 0.22904337184625756, 0.17709031898161243, 0.19602139383647776, 0.18843418705019555, 0.1766891745908753, 0.7316672162297998, 0.18176122276861417, 0.15198810430428944, 0.7074213567884591, 0.19795485343776076, 0.8463549391563634, 0.12233002186102404, 0.16710171816508956, 0.16116573274015922, 0.5726207945782452, 0.6122801720471474, 0.5697026340264164, 0.5400694885246986, 0.166336710934485, 0.20027449507309347, 0.16539951732927516, 0.5759688405892383, 0.49050152257843915, 0.18309205108541304, 0.19759741437240363, 0.18921150152284083, 0.20177465796634197, 0.19540725610540266, 0.17706826172658052, 0.1787711342216568, 0.18314852116197589, 0.18780124609213722, 0.08787437822659994, 0.08314454841349905, 0.07794156646887385, 0.09525166460793133, 0.09049013895885216, 0.08162473486016586, 0.08709509494193568, 0.09269312233791138, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "73416fb9-38e2-4b27-98bc-816f1e3ee512", "solution": "import numpy as np\n\nclass EnhancedHybridPSODELevy(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 0.2\n        self.max_local_search_prob = 0.5\n        self.min_local_search_prob = 0.05\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            diversity = np.std(self.particles)\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n\n            if np.random.rand() < self.local_search_prob:  # Dynamic Local Search with Levy flights\n                for i in range(self.population_size):\n                    levy = np.random.standard_cauchy(self.dim)  # Levy flight\n                    perturbation = np.multiply(levy, self.local_search_radius)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "EnhancedHybridPSODELevy", "description": "Introducing a novel mutation strategy based on Levy flights to enhance exploration capability.", "configspace": "", "generation": 85, "fitness": 0.23777042150547023, "feedback": "The algorithm EnhancedHybridPSODELevy got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "metadata": {"aucs": [0.4827274391903619, 0.4896397979157594, 0.5106279648667291, 0.5065560982528386, 0.4735763080993479, 0.5059382610483127, 0.4958981811346711, 0.5160547513646712, 0.4983743322045344, 0.16017465466342218, 0.15246394036281163, 0.10565557587112995, 0.18601392743812994, 0.04111219610491934, 0.12978386259802244, 0.18694508119235365, 0.18976484249474956, 0.15359631661172224, 0.08325792310038127, 0.10320827689380041, 0.10587784057677596, 0.10225283874680358, 0.12950617614475246, 0.11206632128703642, 0.09373218869524969, 0.09449766221090483, 0.09863702880302849, 0.10097013661782761, 0.09508288220389982, 0.06090100090125128, 0.0977170463292597, 0.08381344300952354, 0.05206841517191041, 0.08283774618257345, 0.06957020415017834, 0.05298459332830929, 0.9148433182833823, 0.8930118953423568, 0.8261632984876867, 0.8639296096202178, 0.8676813379572126, 0.8382563539603459, 0.8906339548009615, 0.8575705223894095, 0.8498282017999435, 0.28133512729872256, 0.2521987279925718, 0.3106039984085325, 0.28466300795800803, 0.2586896896781631, 0.27671588772552846, 0.2503517746513272, 0.2428353184824722, 0.22472971334229175, 0.3211197949297362, 0.30050451796456723, 0.32263787447708003, 0.3456381141044207, 0.24466079177393452, 0.7245236663162515, 0.30477332151463166, 0.31506570622274, 0.6919482131752175, 0.15242651113482464, 0.2189378451671029, 0.1796405155765568, 0.18536825427138004, 0.24005354967740944, 0.12176512455988409, 0.16156770779972907, 0.1246813155650216, 0.22434813511565121, 0.15932292891098276, 0.1979625697538927, 0.20396015218404073, 0.23913330792030085, 0.1825446303855982, 0.19212702456433473, 0.17947139514025223, 0.17338081390618432, 0.20266141954775907, 0.009769971199454774, 9.999999999998899e-05, 0.03459176289710597, 0.06819191609704556, 0.043499506908198926, 0.008219901621488668, 0.057844860849513124, 0.06080373886058643, 0.030988002683601024, 0.14571664640139315, 0.12335942337682992, 0.26337042794958987, 0.14575038733772194, 0.09629643096519647, 0.07919385914496557, 0.16946690149440313, 0.12254667164893218, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.037170815350676234, 0.02483920413276597, 9.999999999998899e-05, 0.010089865343428372, 0.0332167738159278, 0.1290607831730367, 0.06363711017567708, 0.119743290950594, 0.09851362411483655, 0.10023279736742985, 0.12350973097362727, 0.08956400932768394, 0.07011408629519988, 0.08159911437742795, 0.39354961280485223, 0.4307188412691634, 0.5156512108976494, 0.4162980871450732, 0.4104553796786359, 0.4034081881612709, 0.42767185011020725, 0.3973058088724115, 0.4371113372864899, 0.04088385148645213, 0.10028125452547121, 0.07581666027381817, 0.09406584498518222, 0.09617790080771704, 0.10338379991185398, 0.10233173014173369, 0.0911445174902048, 0.10759678365824255, 0.16631567729451635, 0.2292601351824618, 0.251816704683522, 0.2185221626253555, 0.2320091923514883, 0.26901454228341426, 0.252650156927386, 0.23828101552375003, 0.19757198170447432, 0.2747356229282495, 0.2859682348735779, 0.2214203055131575, 0.26038267534032344, 0.29927485449186775, 0.2998435322334656, 0.20823319054415512, 0.3107913953189021, 0.23936438297213614, 0.19997550092187288, 0.23582780792200486, 0.14855877489314895, 0.24790470538354992, 0.2524749292176347, 0.23879758551270336, 0.184401175921873, 0.2514154070316843, 0.20432809102187555, 0.2049569802303003, 0.21078994583667632, 0.23227926887102068, 0.22667813006172954, 0.2216839238720527, 0.23507655460956534, 0.21614009245907273, 0.2298809068085147, 0.20003544409359653, 0.19007469207706795, 0.18743076832435612, 0.20497938421366468, 0.18243238512332005, 0.19053725352937356, 0.17709031898161243, 0.19602139383647776, 0.1721922325048274, 0.1766891745908753, 0.7316672162297998, 0.1857606342641841, 0.15198810430428944, 0.7074213567884591, 0.19724008783917568, 0.8463549391563634, 0.12233002186102404, 0.16645326545309014, 0.16116573274015922, 0.5726207945782452, 0.5146691320305694, 0.5697026340264164, 0.5400694885246986, 0.11226140591861133, 0.20027449507309347, 0.16539951732927516, 0.5090573815083843, 0.49050152257843915, 0.18309205108541304, 0.20726476391426651, 0.18921150152284083, 0.20177465796634197, 0.18614602333673924, 0.17706826172658052, 0.1787711342216568, 0.17672689723091206, 0.18780124609213722, 0.08787437822659994, 0.08057896636868878, 0.07794156646887385, 0.09525166460793133, 0.09361219143575039, 0.08162473486016586, 0.08709509494193568, 0.07032214126894087, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "48c96061-bc9c-450e-9d99-9be97f0f0648", "solution": "import numpy as np\n\nclass DynamicRadiusEnhancedHybridPSODE(EnhancedHybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.success_rate_threshold = 0.3\n        self.max_radius = 1.0\n        self.min_radius = 0.05\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            diversity = np.std(self.particles)\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n\n            if np.random.rand() < self.local_search_prob:  # Dynamic Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n                        self.local_search_radius = min(self.max_radius, self.local_search_radius * 1.1)  # Increase radius on successful perturbation\n                    else:\n                        self.local_search_radius = max(self.min_radius, self.local_search_radius * 0.9)  # Decrease radius on unsuccessful perturbation\n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "DynamicRadiusEnhancedHybridPSODE", "description": "Introduce a dynamic update mechanism for the local search radius based on the success rate of perturbations to improve exploration-exploitation balance.", "configspace": "", "generation": 86, "fitness": 0.2301471681080974, "feedback": "The algorithm DynamicRadiusEnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "metadata": {"aucs": [0.4936121171868002, 0.4871878557789734, 0.5281548682661281, 0.49283318420674127, 0.4564089038659954, 0.5104397915327695, 0.44564562854442846, 0.48383536646803527, 0.4980525182878871, 0.17418129613601485, 0.19405649212898846, 0.1513742242460554, 0.1490491698297497, 0.16585969797258093, 0.15787108635779024, 0.17082949080666243, 0.13965084329331745, 0.1487604492183373, 0.060978428349703795, 0.08025551609467274, 0.06366602085631712, 0.10229495962337354, 0.10420448676986893, 0.10671426290565955, 0.1002203331118211, 0.07367625702434544, 0.10748994573641701, 0.09427910838036446, 0.06845312212090315, 0.0763649157845091, 0.07980104827805246, 0.07780372619857845, 0.09082764723600378, 0.12310769022760693, 0.03993094517057216, 0.07629481285927031, 0.9199156446453395, 0.8585357217418509, 0.9307088649985704, 0.8843056249282215, 0.9417617216973617, 0.9081297069886174, 0.88622238644501, 0.8829315992247488, 0.8253578793046014, 0.2486914582985803, 0.2643929408449126, 0.2737195250768455, 0.25323284421337755, 0.2410926776940332, 0.14255614701147856, 0.27352998295052755, 0.25035164845610114, 0.2554928307507309, 0.38320752020184246, 0.3485692143103626, 0.3435636237300409, 0.1892122664958341, 0.2672154512370081, 0.3895184786559521, 0.1252142302493361, 0.30380685408542163, 0.22810907798027347, 0.16797579410023378, 0.13902191922818896, 0.18147844230929822, 0.16987243272634556, 0.22937642698851068, 0.10896840202621039, 0.20475416569828497, 0.1223435870501256, 0.1639578775326318, 0.1920148347709162, 0.1744056076208621, 0.19150001509690695, 0.2003024604245126, 0.14822765181277642, 0.20838533276751514, 0.18208924027361906, 0.11773696216324658, 0.18440285991602312, 0.04465299754098484, 0.008750612636487909, 0.0001894235102749553, 0.040939035611403995, 0.033327182968914015, 0.0057451069025746815, 0.015044372829053465, 0.02003093646691756, 0.003952977151353898, 0.16853670696624035, 0.09653200659679173, 0.07099045391392722, 0.14524964221739578, 0.08913789390482985, 0.08097661964551373, 0.10274085672594502, 0.18185755384719227, 0.17721246857183526, 9.999999999998899e-05, 0.022028522839912523, 0.012382885099305296, 0.010097448772759865, 0.036133267917217715, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031297622026137395, 0.02583895915544765, 0.09930323417659803, 0.11292286586604317, 0.05041994942815731, 0.09125036540297027, 0.11113384350691502, 0.10242437598647525, 0.0979741407165553, 0.07348870192490198, 0.07029296741460822, 0.39712129295808496, 0.4112662715533396, 0.42820678962681946, 0.41268294385777227, 0.39368174898218466, 0.4266057447839213, 0.417881769223833, 0.4137525846679412, 0.4377389129276854, 0.06598739021877087, 0.07109375545628394, 0.07427230566186549, 0.07396148475518982, 0.11053417396891585, 0.08971155314324131, 0.09728261588550591, 0.08606393479622765, 0.09422039667281679, 0.24307618675222764, 0.20491452452138403, 0.25855937041531063, 0.2406720453445046, 0.1769083580887958, 0.23962624036348867, 0.20621085195831257, 0.16765404468901102, 0.28907843164851943, 0.29504439736213506, 0.27328083500330835, 0.2723220991420884, 0.29148005064351756, 0.28420501430172485, 0.2655214014055578, 0.23552354494281746, 0.28534177647089864, 0.224111494503339, 0.16627491184360244, 0.19616093812223068, 0.12975426145368696, 0.22824669931940267, 0.2322735648957338, 0.1888925806310704, 0.18494679061423602, 0.2361905398740911, 0.24030336684816467, 0.2248450179300262, 0.22058084432433245, 0.2292057436277125, 0.2437874910837965, 0.23138814264691332, 0.18547699978192245, 0.22096689273504566, 0.2375919909535441, 0.2309713989266433, 0.22333501171939374, 0.1884942646835529, 0.1918745453591849, 0.18665233102635115, 0.23059777462637598, 0.18094979858512739, 0.19789867080545853, 0.20615460440669608, 0.17538841747885126, 0.731402594403959, 0.18139439643867983, 0.18408645277744373, 0.7597377956467775, 0.19840994808060197, 0.7143586605248446, 0.16371526891390453, 0.16686638242042406, 0.15005267281067158, 0.5424763440707396, 0.6196794060987424, 0.5100794778965747, 0.4309128606382031, 0.16639268795447193, 0.5888580344163667, 0.10417196654497018, 0.5751328734350853, 0.4512889142359975, 0.18283130647803114, 0.17888068821605085, 0.18684238480562843, 0.18173021702190884, 0.18243162953453473, 0.19517622776192922, 0.17868064971241548, 0.18420844204432874, 0.17013929740170008, 0.0945815541585675, 0.06288267645499002, 0.09610879693004248, 0.07773269731360033, 0.08735956125115829, 0.11394109954957277, 0.07068850691083739, 0.10349759297132366, 0.07494403052687215]}, "mutation_prompt": null}
{"id": "aa4dddbe-cb81-4919-9b3f-2c9512b0a411", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.diversity_threshold = 0.2\n        self.max_local_search_prob = 0.5\n        self.min_local_search_prob = 0.05\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            diversity = np.std(self.particles)\n            self.local_search_radius = 0.1 + 0.05 * (diversity / self.diversity_threshold)  # Dynamic local search radius adjustment\n\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n\n            if np.random.rand() < self.local_search_prob:  # Dynamic Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "RefinedEnhancedHybridPSODE", "description": "Dynamically adjusting the local search radius based on particle variance to enhance exploration-exploitation balance in optimization.", "configspace": "", "generation": 87, "fitness": 0.23612687600133814, "feedback": "The algorithm RefinedEnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "metadata": {"aucs": [0.4827274391903619, 0.4827883896792672, 0.5106279648667291, 0.5065560982528386, 0.4633179336116102, 0.5059382610483127, 0.4958981811346711, 0.4912034142134457, 0.4983743322045344, 0.16017465466342218, 0.13867769461612645, 0.10565557587112995, 0.18601392743812994, 0.16734969010442113, 0.12978386259802244, 0.18694508119235365, 0.14788360598200057, 0.15359631661172224, 0.08325792310038127, 0.12681869501468845, 0.10587784057677596, 0.10225283874680358, 0.10125474646709476, 0.11206632128703642, 0.09373218869524969, 0.04854787868326327, 0.09863702880302849, 0.10097013661782761, 0.06665665960754519, 0.06090100090125128, 0.0977170463292597, 0.08296303032661867, 0.05206841517191041, 0.08283774618257345, 0.10679263876808487, 0.05298459332830929, 0.9148433182833823, 0.8421624086225867, 0.8261632984876867, 0.8639296096202178, 0.9148393006272698, 0.8382563539603459, 0.8906339548009615, 0.885427915648618, 0.8498282017999435, 0.28133512729872256, 0.2969065186533125, 0.3106039984085325, 0.28466300795800803, 0.24277452201689986, 0.27671588772552846, 0.2503517746513272, 0.26089236621497225, 0.22472971334229175, 0.3211197949297362, 0.3414412207514528, 0.32263787447708003, 0.3456381141044207, 0.19166567267678059, 0.7245236663162515, 0.30477332151463166, 0.23326448729640636, 0.6919482131752175, 0.15242651113482464, 0.15098706799298744, 0.1796405155765568, 0.18536825427138004, 0.15945064212304094, 0.12176512455988409, 0.16156770779972907, 0.15549418757190947, 0.22434813511565121, 0.15932292891098276, 0.17036143884380195, 0.20396015218404073, 0.23913330792030085, 0.17670727100021177, 0.19212702456433473, 0.17947139514025223, 0.20460807414243176, 0.20266141954775907, 0.009769971199454774, 0.006082679658233059, 0.03459176289710597, 0.06819191609704556, 0.03527679896266378, 0.008219901621488668, 0.057844860849513124, 0.031895877717564636, 0.030988002683601024, 0.14571664640139315, 0.09051088666067697, 0.26337042794958987, 0.14575038733772194, 0.08388831842174127, 0.07919385914496557, 0.16946690149440313, 0.16999179990222657, 0.2721485623947688, 9.999999999998899e-05, 0.0006520054177014956, 0.05331012382416045, 0.01008356405494193, 0.033783145349353116, 0.02483920413276597, 9.999999999998899e-05, 0.017959196439638836, 0.0332167738159278, 0.1290607831730367, 0.1263539440987297, 0.119743290950594, 0.09851362411483655, 0.004967447247890444, 0.12350973097362727, 0.08956400932768394, 0.0723679799442436, 0.08159911437742795, 0.39354961280485223, 0.4166176800842888, 0.5156512108976494, 0.4162980871450732, 0.388010935965857, 0.4034081881612709, 0.42767185011020725, 0.41867861784846505, 0.4371113372864899, 0.04088385148645213, 0.08837681577466594, 0.07581666027381817, 0.09406584498518222, 0.09791531209922266, 0.10338379991185398, 0.10233173014173369, 0.08976293702961591, 0.10759678365824255, 0.16631567729451635, 0.1581017432154055, 0.251816704683522, 0.2185221626253555, 0.2837208007668033, 0.26901454228341426, 0.252650156927386, 0.2319919269063544, 0.19757198170447432, 0.2747356229282495, 0.3000065419743372, 0.2214203055131575, 0.26038267534032344, 0.28649100835407804, 0.2998435322334656, 0.20823319054415512, 0.30373540023811807, 0.23936438297213614, 0.19997550092187288, 0.20679236965212022, 0.14855877489314895, 0.24790470538354992, 0.1743989533619259, 0.23879758551270336, 0.184401175921873, 0.2308862689071185, 0.20432809102187555, 0.2049569802303003, 0.2311960761454913, 0.23227926887102068, 0.22667813006172954, 0.24185509699537389, 0.23507655460956534, 0.21614009245907273, 0.20212681351014394, 0.20003544409359653, 0.19007469207706795, 0.199880531511633, 0.20497938421366468, 0.18243238512332005, 0.17707169520132704, 0.17709031898161243, 0.19602139383647776, 0.18690252297343746, 0.1766891745908753, 0.7316672162297998, 0.1851577491006008, 0.15198810430428944, 0.7074213567884591, 0.19710128806469718, 0.8463549391563634, 0.12233002186102404, 0.16857950243721187, 0.16116573274015922, 0.5726207945782452, 0.5069127218976703, 0.5697026340264164, 0.5400694885246986, 0.15396892630942405, 0.20027449507309347, 0.16539951732927516, 0.5029360490616974, 0.49050152257843915, 0.18309205108541304, 0.17607743829604183, 0.18921150152284083, 0.20177465796634197, 0.18066128036319185, 0.17706826172658052, 0.1787711342216568, 0.18227352402504826, 0.18780124609213722, 0.08787437822659994, 0.07912185417996664, 0.07794156646887385, 0.09525166460793133, 0.08978655406729308, 0.08162473486016586, 0.08709509494193568, 0.092944439219529, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "d72215d5-db2a-46a4-85c3-0fdda03b40d1", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 0.2\n        self.max_local_search_prob = 0.5\n        self.min_local_search_prob = 0.05\n        self.adaptive_radius_factor = 0.1\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            diversity = np.std(self.particles)\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n\n            if np.random.rand() < self.local_search_prob:  # Dynamic Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius * self.adaptive_radius_factor, self.local_search_radius * self.adaptive_radius_factor, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing global exploration via dynamic adaptation of local search probability based on population diversity with adaptive search radius.", "configspace": "", "generation": 88, "fitness": 0.23796977827657922, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "metadata": {"aucs": [0.4827274391903619, 0.5001681238748505, 0.5106279648667291, 0.5065560982528386, 0.4484766287144487, 0.5059382610483127, 0.4958981811346711, 0.507838152541301, 0.4983743322045344, 0.16017465466342218, 0.15621866861105405, 0.10565557587112995, 0.18601392743812994, 0.15697937966782716, 0.12978386259802244, 0.18694508119235365, 0.17802779123009482, 0.15359631661172224, 0.08325792310038127, 0.11598952260555129, 0.10587784057677596, 0.10225283874680358, 0.0857843361315167, 0.11206632128703642, 0.09373218869524969, 0.06445547849283007, 0.09863702880302849, 0.10097013661782761, 0.09965877160222203, 0.06090100090125128, 0.0977170463292597, 0.07657262843601675, 0.05206841517191041, 0.08283774618257345, 0.07441923803553052, 0.05298459332830929, 0.9148433182833823, 0.8526799582491629, 0.8261632984876867, 0.8639296096202178, 0.9418266038675946, 0.8382563539603459, 0.8906339548009615, 0.8831178194797367, 0.8498282017999435, 0.28133512729872256, 0.24729859070510007, 0.3106039984085325, 0.28466300795800803, 0.2573615320254228, 0.27671588772552846, 0.2503517746513272, 0.26316960114971033, 0.22472971334229175, 0.3211197949297362, 0.2576438791831124, 0.32263787447708003, 0.3456381141044207, 0.1950217652444145, 0.7245236663162515, 0.30477332151463166, 0.3140564977743473, 0.6919482131752175, 0.15242651113482464, 0.15771580016822428, 0.1796405155765568, 0.18536825427138004, 0.16249604534013706, 0.12176512455988409, 0.16156770779972907, 0.1957140147869132, 0.22434813511565121, 0.15932292891098276, 0.17116830451132392, 0.20396015218404073, 0.23913330792030085, 0.21138138715641452, 0.19212702456433473, 0.17947139514025223, 0.11900940608920241, 0.20266141954775907, 0.009769971199454774, 0.032347171539600095, 0.03459176289710597, 0.06819191609704556, 0.022568804315986735, 0.008219901621488668, 0.057844860849513124, 0.02575565382258571, 0.030988002683601024, 0.14571664640139315, 0.09516612201687857, 0.26337042794958987, 0.14575038733772194, 0.06069946466901599, 0.07919385914496557, 0.16946690149440313, 0.13276097417349597, 0.2721485623947688, 9.999999999998899e-05, 0.00241728669676633, 0.05331012382416045, 0.01008356405494193, 9.999999999998899e-05, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.10090981237342089, 0.119743290950594, 0.09851362411483655, 0.10223104439408803, 0.12350973097362727, 0.08956400932768394, 0.04629496042829284, 0.08159911437742795, 0.39354961280485223, 0.43197509356951347, 0.5156512108976494, 0.4162980871450732, 0.4013867687120163, 0.4034081881612709, 0.42767185011020725, 0.393886479802422, 0.4371113372864899, 0.04088385148645213, 0.05704927651625491, 0.07581666027381817, 0.09406584498518222, 0.0623739100080033, 0.10338379991185398, 0.10233173014173369, 0.09722112689021412, 0.10759678365824255, 0.16631567729451635, 0.2733095698880825, 0.251816704683522, 0.2185221626253555, 0.2562967169985423, 0.26901454228341426, 0.252650156927386, 0.23723052871763162, 0.19757198170447432, 0.2747356229282495, 0.2961181788043167, 0.2214203055131575, 0.26038267534032344, 0.288899555901885, 0.2998435322334656, 0.20823319054415512, 0.3066036850819933, 0.23936438297213614, 0.19997550092187288, 0.21536800725330285, 0.14855877489314895, 0.24790470538354992, 0.24769465876299768, 0.23879758551270336, 0.184401175921873, 0.25988380896027874, 0.20432809102187555, 0.2049569802303003, 0.19690572796530792, 0.23227926887102068, 0.22667813006172954, 0.20547734905986514, 0.23507655460956534, 0.21614009245907273, 0.25816883318561135, 0.20003544409359653, 0.19007469207706795, 0.19026324369647196, 0.20497938421366468, 0.18243238512332005, 0.22904337184625756, 0.17709031898161243, 0.19602139383647776, 0.18843418705019555, 0.1766891745908753, 0.7316672162297998, 0.18176122276861417, 0.15198810430428944, 0.7074213567884591, 0.19795485343776076, 0.8463549391563634, 0.12233002186102404, 0.16710171816508956, 0.16116573274015922, 0.5726207945782452, 0.6122801720471474, 0.5697026340264164, 0.5400694885246986, 0.166336710934485, 0.20027449507309347, 0.16539951732927516, 0.5759688405892383, 0.49050152257843915, 0.18309205108541304, 0.19759741437240363, 0.18921150152284083, 0.20177465796634197, 0.19540725610540266, 0.17706826172658052, 0.1787711342216568, 0.18314852116197589, 0.18780124609213722, 0.08787437822659994, 0.08314454841349905, 0.07794156646887385, 0.09525166460793133, 0.09049013895885216, 0.08162473486016586, 0.08709509494193568, 0.09269312233791138, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "e59cf986-1882-4219-8ed6-4a34a2aaee32", "solution": "import numpy as np\n\nclass AdaptiveHybridPSODE(EnhancedHybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.inertia_weight_min = 0.4\n        self.inertia_weight_max = 1.0\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            inertia_weight = self.inertia_weight_max - ((self.inertia_weight_max - self.inertia_weight_min) * t) / self.budget\n            diversity = np.std(self.particles)\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n\n            if np.random.rand() < self.local_search_prob:  # Dynamic Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            else:  # Original HybridPSODE update\n                super().__call__(func, inertia_weight)\n        return self.global_best", "name": "AdaptiveHybridPSODE", "description": "Introducing adaptive inertia weight to balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('__call__() takes 2 positional arguments but 3 were given').", "error": "TypeError('__call__() takes 2 positional arguments but 3 were given')", "parent_id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "metadata": {}, "mutation_prompt": null}
{"id": "12fcaa7b-cc52-4172-8da2-c34fe97648cc", "solution": "import numpy as np\n\nclass AdaptiveHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 0.2\n        self.max_local_search_prob = 0.5\n        self.min_local_search_prob = 0.05\n        self.mutation_step_size = 0.2\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            diversity = np.std(self.particles)\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n\n            if np.random.rand() < self.local_search_prob:  # Dynamic Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            else:  # Adaptive Mutation Strategy\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.mutation_step_size, self.mutation_step_size, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n        return self.global_best", "name": "AdaptiveHybridPSODE", "description": "Enhancing global exploration by incorporating adaptive mutation strategy to balance exploration and exploitation.", "configspace": "", "generation": 90, "fitness": 0.10971349818980253, "feedback": "The algorithm AdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.09.", "error": "", "parent_id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "metadata": {"aucs": [0.2714546651620432, 0.25772420870741186, 0.32745904596917663, 0.3241232237089201, 0.2556584765365967, 0.3054398719744338, 0.28125337171917264, 0.2887457751946494, 0.27495885006957055, 0.0006409595574857763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0034252697200493065, 0.025964182106471334, 0.016421649393063453, 0.021319739087064193, 0.019876251293451053, 0.03832242038518996, 0.032090935418447986, 0.01198533932201229, 0.05183140844908962, 0.01679717656942392, 0.024379389802648643, 0.018631248425882596, 0.06331544186043014, 0.021910213964672187, 0.005191348517029515, 0.018026204402566304, 0.010898151589062377, 0.017269319408603545, 0.08798347815661423, 0.07723352718889165, 0.08072385720825548, 0.07648151501502487, 0.35922142725257267, 0.0897489774674074, 0.0934867492659276, 0.08563905916060499, 0.08019888092287275, 0.16187043671445756, 0.12444979400519662, 0.08505828349904698, 0.18724735358248312, 0.09268516904139812, 0.1500114908344895, 0.13340672431873668, 0.10097425196900744, 0.13554050542845775, 0.16635004674209797, 0.09998282000544712, 0.03621271021046957, 0.021693476621386654, 0.05218662791538642, 0.007887734511710875, 0.0728667317780497, 0.09318061469793337, 0.15380140047960067, 0.11603531199192729, 0.11082929829913024, 0.07403373501973398, 0.0916265016671316, 0.06681369061459241, 0.08990279461281403, 0.06769203149809966, 0.0912457286597732, 0.1306312130129651, 0.13266578619673053, 0.0949787701824798, 0.08807359753111255, 0.07289253988946454, 0.05669484605707198, 0.09198753987304753, 0.1261833351418412, 0.08927462063673142, 0.09037975885373817, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005870833782400942, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0747379334247944, 0.06017567755733977, 0.11603262178773388, 0.06502397627521872, 0.05896916366184268, 0.07495383768060015, 0.10104615587412735, 0.05678253182353188, 0.06439720056863496, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04665375853679776, 0.02652463901787483, 0.08806205005475753, 0.018206081322160728, 0.027217512411715883, 0.01924799871764149, 0.06621691615000891, 0.03983825681834152, 0.054074330419330185, 0.2698167661950155, 0.27309737217349117, 0.33019730690278737, 0.28057197448956217, 0.2666833250773044, 0.23498913490801476, 0.2726548329737879, 0.200047912774439, 0.3303739089021901, 0.025351591430993747, 0.002566945821935618, 0.0011312488234547224, 0.021709459017426935, 0.023621964410599272, 0.044299057895387906, 0.017492017493112688, 0.007975887649798619, 0.06264472553816303, 0.15579040065736904, 0.16358856439798453, 0.14590100655896499, 0.16442229220878712, 0.23052811087522673, 0.1538481881927306, 0.19861590207736413, 0.13440641487892002, 0.17349555472040734, 0.1257110748332556, 0.12488430934240857, 0.1308928079933901, 0.13790881287334977, 0.13632183550672072, 0.13190030909062156, 0.13289349436440168, 0.17997557964795763, 0.10551150115932051, 0.06456188231078508, 0.06568021124406132, 0.0860261130474842, 0.081762241397485, 0.07452097734225316, 0.0749212551255457, 0.07362416688576778, 0.13155746829077453, 0.05023814041778174, 0.15447640740816115, 0.10168463750675638, 0.1586954566817732, 0.1519304735564887, 0.12549473330043914, 0.14924959588992004, 0.1567180124884595, 0.11651965155552901, 0.14210513652602297, 0.1341270389467194, 0.1769875843560882, 0.17285555758992355, 0.16683722827991299, 0.1486176243110382, 0.15143691134974924, 0.1379094981470913, 0.16244346488029626, 0.1556675929855048, 0.26835732106553833, 0.15434633678076548, 0.41605902462273947, 0.348684363965009, 0.22032513104176243, 0.37732973525117874, 0.1553004172837733, 0.2729341144260926, 0.16150428761700675, 0.2493424553805742, 0.23160983843436345, 0.2083392917931789, 0.19397451200209248, 0.17640870901489047, 0.16009566867956615, 0.19656187463803687, 0.22105700273983608, 0.26497078670283636, 0.21805164437825653, 0.1846291174539042, 0.18562191405161355, 0.1756406311622879, 0.1762057844803958, 0.19507822948761455, 0.1876927823754787, 0.1747435361999684, 0.16908924377716306, 0.03802924329157964, 0.033271421578901395, 0.047002898069811505, 0.038506730773187, 0.0450915139785566, 0.03164006003067166, 0.03878810645079689, 0.029274570977352643, 0.03966004783488297]}, "mutation_prompt": null}
{"id": "9fcdefdc-de3d-4f81-ab58-4df0565abbea", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.diversity_threshold = 0.2\n        self.max_local_search_prob = 0.5\n        self.min_local_search_prob = 0.05\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            diversity = np.std(self.particles)\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n\n            local_search_radius = 0.1 * (1 - t / self.budget)  # Dynamic Local Search Radius\n\n            if np.random.rand() < self.local_search_prob:\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-local_search_radius, local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            else:\n                super().__call__(func)\n        return self.global_best", "name": "EnhancedAdaptiveHybridPSODE", "description": "Dynamically adjust local search radius based on function landscape to improve exploration-exploitation balance.", "configspace": "", "generation": 91, "fitness": 0.23900093515400267, "feedback": "The algorithm EnhancedAdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "metadata": {"aucs": [0.4827274391903619, 0.5157628549617489, 0.5106279648667291, 0.5065560982528386, 0.5108318496989668, 0.5059382610483127, 0.4958981811346711, 0.5342088392412256, 0.4983743322045344, 0.16017465466342218, 0.13421044830540596, 0.10565557587112995, 0.18601392743812994, 0.16588774722972777, 0.12978386259802244, 0.18694508119235365, 0.16902320510267077, 0.15359631661172224, 0.08325792310038127, 0.11800564938428493, 0.10587784057677596, 0.10225283874680358, 0.13096847356058916, 0.11206632128703642, 0.09373218869524969, 0.08089567207543946, 0.09863702880302849, 0.10097013661782761, 0.07596871708198993, 0.06090100090125128, 0.0977170463292597, 0.09805823639903788, 0.05206841517191041, 0.08283774618257345, 0.08358552719038381, 0.05298459332830929, 0.9148433182833823, 0.8515900716401982, 0.8261632984876867, 0.8639296096202178, 0.9417863337569442, 0.8382563539603459, 0.8906339548009615, 0.8829427706542641, 0.8498282017999435, 0.28133512729872256, 0.2648338490304746, 0.3106039984085325, 0.28466300795800803, 0.25226180977923374, 0.27671588772552846, 0.2503517746513272, 0.2617276234396728, 0.22472971334229175, 0.3211197949297362, 0.29839115631174573, 0.32263787447708003, 0.3456381141044207, 0.37005956599016165, 0.7245236663162515, 0.30477332151463166, 0.2312472478487183, 0.6919482131752175, 0.15242651113482464, 0.16111409616296934, 0.1796405155765568, 0.18536825427138004, 0.1761194591000398, 0.12176512455988409, 0.16156770779972907, 0.17590740152220974, 0.22434813511565121, 0.15932292891098276, 0.1831304033892892, 0.20396015218404073, 0.23913330792030085, 0.20031914584176058, 0.19212702456433473, 0.17947139514025223, 0.11807496364551806, 0.20266141954775907, 0.009769971199454774, 0.0017227391153510352, 0.03459176289710597, 0.06819191609704556, 9.999999999998899e-05, 0.008219901621488668, 0.057844860849513124, 0.027910288103113134, 0.030988002683601024, 0.14571664640139315, 0.11032282398244675, 0.26337042794958987, 0.14575038733772194, 0.07133778256636725, 0.07919385914496557, 0.16946690149440313, 0.1455646304106547, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.018777275679245364, 0.02483920413276597, 9.999999999998899e-05, 0.008605519154051167, 0.0332167738159278, 0.1290607831730367, 0.11281283954477717, 0.119743290950594, 0.09851362411483655, 0.11967699574831991, 0.12350973097362727, 0.08956400932768394, 0.07200095922173111, 0.08159911437742795, 0.39354961280485223, 0.41062524262642186, 0.5156512108976494, 0.4162980871450732, 0.4359683006948276, 0.4034081881612709, 0.42767185011020725, 0.4331370855157064, 0.4371113372864899, 0.04088385148645213, 0.09048383023389905, 0.07581666027381817, 0.09406584498518222, 0.05667652377101817, 0.10338379991185398, 0.10233173014173369, 0.10833042786457558, 0.10759678365824255, 0.16631567729451635, 0.21036485406425043, 0.251816704683522, 0.2185221626253555, 0.23112445301033457, 0.26901454228341426, 0.252650156927386, 0.24420552467735268, 0.19757198170447432, 0.2747356229282495, 0.28074421531732885, 0.2214203055131575, 0.26038267534032344, 0.2993177448383655, 0.2998435322334656, 0.20823319054415512, 0.29592462661959695, 0.23936438297213614, 0.19997550092187288, 0.23593665256939433, 0.14855877489314895, 0.24790470538354992, 0.17210231717418667, 0.23879758551270336, 0.184401175921873, 0.23951467220920952, 0.20432809102187555, 0.2049569802303003, 0.22668765946144454, 0.23227926887102068, 0.22667813006172954, 0.21914765941469994, 0.23507655460956534, 0.21614009245907273, 0.23275983625654217, 0.20003544409359653, 0.19007469207706795, 0.20553975637891686, 0.20497938421366468, 0.18243238512332005, 0.18678725415151665, 0.17709031898161243, 0.19602139383647776, 0.20770123237437144, 0.1766891745908753, 0.7316672162297998, 0.1238535080972697, 0.15198810430428944, 0.7074213567884591, 0.19857759806962527, 0.8463549391563634, 0.12233002186102404, 0.1682010315742356, 0.16116573274015922, 0.5726207945782452, 0.6300371547965526, 0.5697026340264164, 0.5400694885246986, 0.16594555142376322, 0.20027449507309347, 0.16539951732927516, 0.5847981202352635, 0.49050152257843915, 0.18309205108541304, 0.18593436498791538, 0.18921150152284083, 0.20177465796634197, 0.18903326033803192, 0.17706826172658052, 0.1787711342216568, 0.18272239494770592, 0.18780124609213722, 0.08787437822659994, 0.07343008237844206, 0.07794156646887385, 0.09525166460793133, 0.0856850691232165, 0.08162473486016586, 0.08709509494193568, 0.08866272652449647, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "6f641c50-c377-4b8a-afa1-e21d3c2f4e2c", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 0.2\n        self.max_local_search_prob = 0.5\n        self.min_local_search_prob = 0.05\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            diversity = np.std(self.particles)\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n\n            if np.random.rand() < self.local_search_prob:  # Dynamic Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing global exploration via dynamic adaptation of local search probability based on population diversity.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "metadata": {"aucs": [0.4827274391903619, 0.5157628549617489, 0.5106279648667291, 0.5065560982528386, 0.5108318496989668, 0.5059382610483127, 0.4958981811346711, 0.5342088392412256, 0.4983743322045344, 0.16017465466342218, 0.13421044830540596, 0.10565557587112995, 0.18601392743812994, 0.16588774722972777, 0.12978386259802244, 0.18694508119235365, 0.16902320510267077, 0.15359631661172224, 0.08325792310038127, 0.11800564938428493, 0.10587784057677596, 0.10225283874680358, 0.13096847356058916, 0.11206632128703642, 0.09373218869524969, 0.08089567207543946, 0.09863702880302849, 0.10097013661782761, 0.07596871708198993, 0.06090100090125128, 0.0977170463292597, 0.09805823639903788, 0.05206841517191041, 0.08283774618257345, 0.08358552719038381, 0.05298459332830929, 0.9148433182833823, 0.8515900716401982, 0.8261632984876867, 0.8639296096202178, 0.9417863337569442, 0.8382563539603459, 0.8906339548009615, 0.8829427706542641, 0.8498282017999435, 0.28133512729872256, 0.2648338490304746, 0.3106039984085325, 0.28466300795800803, 0.25226180977923374, 0.27671588772552846, 0.2503517746513272, 0.2617276234396728, 0.22472971334229175, 0.3211197949297362, 0.29839115631174573, 0.32263787447708003, 0.3456381141044207, 0.37005956599016165, 0.7245236663162515, 0.30477332151463166, 0.2312472478487183, 0.6919482131752175, 0.15242651113482464, 0.16111409616296934, 0.1796405155765568, 0.18536825427138004, 0.1761194591000398, 0.12176512455988409, 0.16156770779972907, 0.17590740152220974, 0.22434813511565121, 0.15932292891098276, 0.1831304033892892, 0.20396015218404073, 0.23913330792030085, 0.20031914584176058, 0.19212702456433473, 0.17947139514025223, 0.11807496364551806, 0.20266141954775907, 0.009769971199454774, 0.0017227391153510352, 0.03459176289710597, 0.06819191609704556, 9.999999999998899e-05, 0.008219901621488668, 0.057844860849513124, 0.027910288103113134, 0.030988002683601024, 0.14571664640139315, 0.11032282398244675, 0.26337042794958987, 0.14575038733772194, 0.07133778256636725, 0.07919385914496557, 0.16946690149440313, 0.1455646304106547, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.018777275679245364, 0.02483920413276597, 9.999999999998899e-05, 0.008605519154051167, 0.0332167738159278, 0.1290607831730367, 0.11281283954477717, 0.119743290950594, 0.09851362411483655, 0.11967699574831991, 0.12350973097362727, 0.08956400932768394, 0.07200095922173111, 0.08159911437742795, 0.39354961280485223, 0.41062524262642186, 0.5156512108976494, 0.4162980871450732, 0.4359683006948276, 0.4034081881612709, 0.42767185011020725, 0.4331370855157064, 0.4371113372864899, 0.04088385148645213, 0.09048383023389905, 0.07581666027381817, 0.09406584498518222, 0.05667652377101817, 0.10338379991185398, 0.10233173014173369, 0.10833042786457558, 0.10759678365824255, 0.16631567729451635, 0.21036485406425043, 0.251816704683522, 0.2185221626253555, 0.23112445301033457, 0.26901454228341426, 0.252650156927386, 0.24420552467735268, 0.19757198170447432, 0.2747356229282495, 0.28074421531732885, 0.2214203055131575, 0.26038267534032344, 0.2993177448383655, 0.2998435322334656, 0.20823319054415512, 0.29592462661959695, 0.23936438297213614, 0.19997550092187288, 0.23593665256939433, 0.14855877489314895, 0.24790470538354992, 0.17210231717418667, 0.23879758551270336, 0.184401175921873, 0.23951467220920952, 0.20432809102187555, 0.2049569802303003, 0.22668765946144454, 0.23227926887102068, 0.22667813006172954, 0.21914765941469994, 0.23507655460956534, 0.21614009245907273, 0.23275983625654217, 0.20003544409359653, 0.19007469207706795, 0.20553975637891686, 0.20497938421366468, 0.18243238512332005, 0.18678725415151665, 0.17709031898161243, 0.19602139383647776, 0.20770123237437144, 0.1766891745908753, 0.7316672162297998, 0.1238535080972697, 0.15198810430428944, 0.7074213567884591, 0.19857759806962527, 0.8463549391563634, 0.12233002186102404, 0.1682010315742356, 0.16116573274015922, 0.5726207945782452, 0.6300371547965526, 0.5697026340264164, 0.5400694885246986, 0.16594555142376322, 0.20027449507309347, 0.16539951732927516, 0.5847981202352635, 0.49050152257843915, 0.18309205108541304, 0.18593436498791538, 0.18921150152284083, 0.20177465796634197, 0.18903326033803192, 0.17706826172658052, 0.1787711342216568, 0.18272239494770592, 0.18780124609213722, 0.08787437822659994, 0.07343008237844206, 0.07794156646887385, 0.09525166460793133, 0.0856850691232165, 0.08162473486016586, 0.08709509494193568, 0.08866272652449647, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "939adcaa-914b-4479-a518-8fbfaee74e69", "solution": "import numpy as np\n\nclass EnhancedHybridPSODEImproved(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 0.2\n        self.max_local_search_prob = 0.5\n        self.min_local_search_prob = 0.05\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            diversity = np.std(self.particles)\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n\n            if np.random.rand() < self.local_search_prob:  # Dynamic Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            else:  # Updated mutation strategy based on fitness diversity\n                for i in range(self.population_size):\n                    diversity_fitness = np.std([func(p) for p in self.particles])\n                    perturbation = np.random.uniform(-diversity_fitness, diversity_fitness, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n        return self.global_best", "name": "EnhancedHybridPSODEImproved", "description": "Improving global exploration by integrating a novel adaptive mutation strategy based on particle fitness diversity.", "configspace": "", "generation": 93, "fitness": 0.08324015521254173, "feedback": "The algorithm EnhancedHybridPSODEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.18.", "error": "", "parent_id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "metadata": {"aucs": [0.07852019175074765, 0.07041214981789368, 0.09388658087168855, 0.1081455816057596, 0.0780665993462204, 0.10211976494638841, 0.09147495546871598, 0.07851973945702007, 0.08375707009248745, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01674343556769675, 9.999999999998899e-05, 0.01828433000355112, 0.004049147391823271, 0.02361234238525378, 0.02191407755996677, 9.999999999998899e-05, 0.015123772999284246, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044842532495336984, 0.00435099931298244, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7708137070237295, 0.8967643008123652, 0.9240506669507307, 0.9536901847321655, 0.6925839649118335, 0.9789959801855269, 0.9692341924233131, 0.9519562173776906, 0.9354653696232045, 0.0004534329304635154, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004563572526696813, 0.004399350147363701, 9.999999999998899e-05, 9.999999999998899e-05, 0.014138476719818938, 9.999999999998899e-05, 0.10070535899713995, 0.03892501401262782, 0.015925040059842965, 0.00460814591559322, 0.027928875204328185, 9.999999999998899e-05, 0.04509841422172978, 0.06235802567878723, 0.030013498153697804, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021318015156663428, 0.0052879313147213836, 0.014747763675669545, 0.05070636051985944, 0.000805901769350803, 9.999999999998899e-05, 0.06452118600465584, 0.01947490211094971, 0.003937857279813772, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12109970676657844, 0.12176863553723594, 0.1553206708100966, 0.11359837028173914, 0.10662519258219583, 0.10057779309058024, 0.13204534887058839, 0.12346303011871074, 0.13583160365057867, 0.0040204030789479095, 0.0010374937463131229, 9.999999999998899e-05, 0.018951815597816668, 0.0007419448287723229, 0.034787721073143096, 0.007842662400465272, 0.0023688046275192054, 0.03445982489904742, 0.12538804422461003, 0.10171223328475132, 0.10079911764007465, 0.17587059224454382, 0.13404112172539484, 0.10278168448377512, 0.13902816877163426, 0.0851062568256693, 0.12581645542429032, 0.13158344877269423, 0.133334166750688, 0.1315841638347125, 0.1498067438727665, 0.15442919311925196, 0.13994439800996028, 0.13585076188985135, 0.17644592818333438, 0.145565242565594, 0.052500094496016, 0.05862041913352278, 0.054399309471277024, 0.07307614833671883, 0.0702030625716521, 0.053182307308971444, 0.06852800855647878, 0.0997370246232645, 0.06144065229848439, 0.12125742281915786, 0.11842125403546211, 0.1527063595335152, 0.13011707394507244, 0.08894479976573166, 0.11597033519843192, 0.127872704657487, 0.08696885124458498, 0.12636593782533023, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001950374850132719, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08874733697319193, 0.0951025339819298, 0.0935203190111632, 0.08461685632182525, 0.1364866280683753, 0.08310599176545275, 0.0864048139923439, 0.10308265255081839, 0.06909956846497312, 0.056502470945996364, 0.07076109029064825, 0.05763854155648329, 0.0644728615583603, 0.09081092169760874, 0.05026869695035674, 0.11492031738757047, 0.055480774491057705, 0.10329174848509315, 0.15822237015150908, 0.15155443201459018, 0.14930043716639108, 0.15600628261921878, 0.1623273276894881, 0.15364773358047024, 0.19062069447826446, 0.1523109757518326, 0.17631724468402554, 0.022853976275447496, 0.018817761561270685, 0.032294901975998824, 0.029102255862055837, 0.024257579051059075, 0.017424714060176316, 0.0258791110063612, 0.02048986048497059, 0.02705309650829424]}, "mutation_prompt": null}
{"id": "485a38f2-96b7-467f-baf9-26f26e6f0997", "solution": "import numpy as np\n\nclass EnhancedHybridPSODEImproved(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 0.2\n        self.max_local_search_prob = 0.5\n        self.min_local_search_prob = 0.05\n        self.learning_rate = 0.1  # New adaptive learning rate\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            diversity = np.std(self.particles)\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n\n            if np.random.rand() < self.local_search_prob:  # Dynamic Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim) * self.learning_rate  # Adaptive learning rate\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n                        self.learning_rate *= 1.1  # Update learning rate based on improvement\n                    else:\n                        self.learning_rate *= 0.9  # Decrease learning rate if no improvement\n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "EnhancedHybridPSODEImproved", "description": "Improving exploration by introducing a novel adaptive learning rate mechanism based on particle performance history.", "configspace": "", "generation": 94, "fitness": 0.23733904163320166, "feedback": "The algorithm EnhancedHybridPSODEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "metadata": {"aucs": [0.4827274391903619, 0.48568330686989036, 0.5106279648667291, 0.5065560982528386, 0.4669945687282626, 0.5059382610483127, 0.4958981811346711, 0.47402550508208685, 0.4983743322045344, 0.16017465466342218, 0.15488173755091306, 0.10565557587112995, 0.18601392743812994, 0.1493083246001281, 0.12978386259802244, 0.18694508119235365, 0.17072450215699575, 0.15359631661172224, 0.08325792310038127, 0.10304773313061288, 0.10587784057677596, 0.10225283874680358, 0.08578580476635267, 0.11206632128703642, 0.09373218869524969, 0.06525968065218568, 0.09863702880302849, 0.10097013661782761, 0.09283271132573878, 0.06090100090125128, 0.0977170463292597, 0.10575768824449239, 0.05206841517191041, 0.08283774618257345, 0.05953774599065309, 0.05298459332830929, 0.9148433182833823, 0.8527212095086005, 0.8261632984876867, 0.8639296096202178, 0.9418252524139675, 0.8382563539603459, 0.8906339548009615, 0.8831268935773784, 0.8498282017999435, 0.28133512729872256, 0.2863106391953588, 0.3106039984085325, 0.28466300795800803, 0.26083268165156126, 0.27671588772552846, 0.2503517746513272, 0.25777409690265407, 0.22472971334229175, 0.3211197949297362, 0.2576438791831124, 0.32263787447708003, 0.3456381141044207, 0.19342381514518614, 0.7245236663162515, 0.30477332151463166, 0.3250026371771231, 0.6919482131752175, 0.15242651113482464, 0.1820996547164182, 0.1796405155765568, 0.18536825427138004, 0.18136532658739024, 0.12176512455988409, 0.16156770779972907, 0.1692255659899825, 0.22434813511565121, 0.15932292891098276, 0.17460382617540016, 0.20396015218404073, 0.23913330792030085, 0.20923235144429408, 0.19212702456433473, 0.17947139514025223, 0.12047025513082188, 0.20266141954775907, 0.009769971199454774, 0.0171467494820825, 0.03459176289710597, 0.06819191609704556, 0.0019628869158617723, 0.008219901621488668, 0.057844860849513124, 0.025764014200829632, 0.030988002683601024, 0.14571664640139315, 0.09184854866378844, 0.26337042794958987, 0.14575038733772194, 0.056897275051142615, 0.07919385914496557, 0.16946690149440313, 0.11724532167771506, 0.2721485623947688, 9.999999999998899e-05, 0.021094441167977984, 0.05331012382416045, 0.01008356405494193, 9.999999999998899e-05, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.09734671434860176, 0.119743290950594, 0.09851362411483655, 0.11630624048279936, 0.12350973097362727, 0.08956400932768394, 0.024532202313315654, 0.08159911437742795, 0.39354961280485223, 0.433707142115176, 0.5156512108976494, 0.4162980871450732, 0.3974632803203608, 0.4034081881612709, 0.42767185011020725, 0.40171158334365864, 0.4371113372864899, 0.04088385148645213, 0.06136896994711083, 0.07581666027381817, 0.09406584498518222, 0.06511983628018259, 0.10338379991185398, 0.10233173014173369, 0.0927836577799459, 0.10759678365824255, 0.16631567729451635, 0.24992072274091248, 0.251816704683522, 0.2185221626253555, 0.2521872145595303, 0.26901454228341426, 0.252650156927386, 0.23539175306117854, 0.19757198170447432, 0.2747356229282495, 0.3038904647254297, 0.2214203055131575, 0.26038267534032344, 0.3000483622821284, 0.2998435322334656, 0.20823319054415512, 0.2982850713960723, 0.23936438297213614, 0.19997550092187288, 0.2256904955468979, 0.14855877489314895, 0.24790470538354992, 0.20975728847107267, 0.23879758551270336, 0.184401175921873, 0.26058593498058935, 0.20432809102187555, 0.2049569802303003, 0.21905789455752167, 0.23227926887102068, 0.22667813006172954, 0.19534081571402973, 0.23507655460956534, 0.21614009245907273, 0.22091226329229263, 0.20003544409359653, 0.19007469207706795, 0.1823411270386397, 0.20497938421366468, 0.18243238512332005, 0.23525207540362458, 0.17709031898161243, 0.19602139383647776, 0.21688076374393017, 0.1766891745908753, 0.7316672162297998, 0.1817183302656159, 0.15198810430428944, 0.7074213567884591, 0.19790695408656878, 0.8463549391563634, 0.12233002186102404, 0.16716416986472982, 0.16116573274015922, 0.5726207945782452, 0.5223337361565215, 0.5697026340264164, 0.5400694885246986, 0.16635078747108745, 0.20027449507309347, 0.16539951732927516, 0.5466808105435056, 0.49050152257843915, 0.18309205108541304, 0.18981615622045878, 0.18921150152284083, 0.20177465796634197, 0.21626520312777497, 0.17706826172658052, 0.1787711342216568, 0.1985776229715177, 0.18780124609213722, 0.08787437822659994, 0.07844884260054441, 0.07794156646887385, 0.09525166460793133, 0.10501279287377507, 0.08162473486016586, 0.08709509494193568, 0.10902279141412541, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "dcef1844-6104-4a87-aa4b-a0760b699db5", "solution": "import numpy as np\n\nclass AdaptedEnhancedHybridPSODE(EnhancedHybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.min_perturbation_scale = 0.1\n        self.max_perturbation_scale = 0.5\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            diversity = np.std(self.particles)\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n\n            if np.random.rand() < self.local_search_prob:  # Dynamic Local Search\n                global_best_distance = np.linalg.norm(self.global_best)\n                for i in range(self.population_size):\n                    perturbation_scale = self.min_perturbation_scale + (self.max_perturbation_scale - self.min_perturbation_scale) * (np.linalg.norm(self.particles[i] - self.global_best) / global_best_distance)\n                    perturbation = np.random.uniform(-perturbation_scale, perturbation_scale, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "AdaptedEnhancedHybridPSODE", "description": "Improving local search diversity through adaptive perturbation scaling based on distance from global best solution.", "configspace": "", "generation": 95, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"unsupported operand type(s) for *: 'NoneType' and 'NoneType'\").", "error": "TypeError(\"unsupported operand type(s) for *: 'NoneType' and 'NoneType'\")", "parent_id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "metadata": {}, "mutation_prompt": null}
{"id": "3ef04125-43a3-4fa3-b251-f355b658b10c", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 0.2\n        self.max_local_search_prob = 0.5\n        self.min_local_search_prob = 0.05\n        self.mutation_control_factor = 0.1\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            diversity = np.std(self.particles)\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n\n            if np.random.rand() < self.local_search_prob:  # Dynamic Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n                        if np.random.rand() < self.mutation_control_factor:  # Adaptive Mutation Control\n                            self.local_search_radius *= 0.9  # Reduce radius for better exploitation\n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "ImprovedHybridPSODE", "description": "Improving global convergence by incorporating adaptive mutation control based on particle performance.", "configspace": "", "generation": 96, "fitness": 0.23318334737435192, "feedback": "The algorithm ImprovedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "metadata": {"aucs": [0.4827274391903619, 0.48327721749066077, 0.5106279648667291, 0.5065560982528386, 0.4869933920484508, 0.5059382610483127, 0.4958981811346711, 0.4583208589459983, 0.4983743322045344, 0.16017465466342218, 0.20912211336864917, 0.10565557587112995, 0.18601392743812994, 0.037531979325585385, 0.12978386259802244, 0.18694508119235365, 0.11253535867353148, 0.15359631661172224, 0.08325792310038127, 0.15147502619334863, 0.10587784057677596, 0.10225283874680358, 0.08157878046846434, 0.11206632128703642, 0.09373218869524969, 0.07120849465318912, 0.09863702880302849, 0.10097013661782761, 0.07539412464091855, 0.06090100090125128, 0.0977170463292597, 0.09987640983088009, 0.05206841517191041, 0.08283774618257345, 0.08663147011648631, 0.05298459332830929, 0.9148433182833823, 0.7955568221884991, 0.8261632984876867, 0.8639296096202178, 0.9035128056770384, 0.8382563539603459, 0.8906339548009615, 0.8314484977307539, 0.8498282017999435, 0.28133512729872256, 0.24768838482275535, 0.3106039984085325, 0.28466300795800803, 0.2642922579011907, 0.27671588772552846, 0.2503517746513272, 0.23056470100694781, 0.22472971334229175, 0.3211197949297362, 0.2188828560109154, 0.32263787447708003, 0.3456381141044207, 0.26664152036538025, 0.7245236663162515, 0.30477332151463166, 0.2343256592357289, 0.6919482131752175, 0.15242651113482464, 0.17421106171894096, 0.1796405155765568, 0.18536825427138004, 0.14723813635486382, 0.12176512455988409, 0.16156770779972907, 0.15857868973116185, 0.22434813511565121, 0.15932292891098276, 0.17779376695624582, 0.20396015218404073, 0.23913330792030085, 0.15426032742252904, 0.19212702456433473, 0.17947139514025223, 0.20305458465485904, 0.20266141954775907, 0.009769971199454774, 0.03451223991949903, 0.03459176289710597, 0.06819191609704556, 9.999999999998899e-05, 0.008219901621488668, 0.057844860849513124, 0.007789397629986317, 0.030988002683601024, 0.14571664640139315, 0.07486212729910202, 0.26337042794958987, 0.14575038733772194, 0.04828316268039856, 0.07919385914496557, 0.16946690149440313, 0.13100920116166903, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.011052623002818285, 0.02483920413276597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332167738159278, 0.1290607831730367, 0.11160219471650912, 0.119743290950594, 0.09851362411483655, 0.09799187912901086, 0.12350973097362727, 0.08956400932768394, 0.06882226269231617, 0.08159911437742795, 0.39354961280485223, 0.4052804474169276, 0.5156512108976494, 0.4162980871450732, 0.4263932458503926, 0.4034081881612709, 0.42767185011020725, 0.42414971979802263, 0.4371113372864899, 0.04088385148645213, 0.11383439285725105, 0.07581666027381817, 0.09406584498518222, 0.054234164243847194, 0.10338379991185398, 0.10233173014173369, 0.08734205027000497, 0.10759678365824255, 0.16631567729451635, 0.161027580057711, 0.251816704683522, 0.2185221626253555, 0.2330611972134602, 0.26901454228341426, 0.252650156927386, 0.21990782879709336, 0.19757198170447432, 0.2747356229282495, 0.2624795516284818, 0.2214203055131575, 0.26038267534032344, 0.2959570169169674, 0.2998435322334656, 0.20823319054415512, 0.29836908706114496, 0.23936438297213614, 0.19997550092187288, 0.22968925588472233, 0.14855877489314895, 0.24790470538354992, 0.2187433506939357, 0.23879758551270336, 0.184401175921873, 0.2534182888889006, 0.20432809102187555, 0.2049569802303003, 0.18336598866597376, 0.23227926887102068, 0.22667813006172954, 0.23735379406854207, 0.23507655460956534, 0.21614009245907273, 0.2191535925187823, 0.20003544409359653, 0.19007469207706795, 0.19110635415666588, 0.20497938421366468, 0.18243238512332005, 0.21066503295407546, 0.17709031898161243, 0.19602139383647776, 0.18317742301745665, 0.1766891745908753, 0.7316672162297998, 0.18443396340143237, 0.15198810430428944, 0.7074213567884591, 0.1976152147289465, 0.8463549391563634, 0.12233002186102404, 0.1682209258444438, 0.16116573274015922, 0.5726207945782452, 0.20728684197999092, 0.5697026340264164, 0.5400694885246986, 0.1667454124120593, 0.20027449507309347, 0.16539951732927516, 0.5172435812622154, 0.49050152257843915, 0.18309205108541304, 0.18410267927098822, 0.18921150152284083, 0.20177465796634197, 0.18734417318877405, 0.17706826172658052, 0.1787711342216568, 0.1940141941878405, 0.18780124609213722, 0.08787437822659994, 0.08809463108111326, 0.07794156646887385, 0.09525166460793133, 0.08391340763920141, 0.08162473486016586, 0.08709509494193568, 0.08326196946399489, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "01e1dbc1-ab27-4e8b-b284-dbcb5eaf525f", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 0.2\n        self.max_local_search_prob = 0.5\n        self.min_local_search_prob = 0.05\n        self.mutation_factor = 0.5\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            diversity = np.std(self.particles)\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n\n            if np.random.rand() < self.local_search_prob:  # Dynamic Local Search with Mutation\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    mutation_vector = np.mean(np.array([np.random.normal(0, self.mutation_factor) * (self.global_best - self.particles[i]) for _ in range(self.dim)]), axis=0)\n                    candidate = np.clip(self.particles[i] + perturbation + mutation_vector, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "ImprovedHybridPSODE", "description": "Improving global exploration by incorporating a novel mutation strategy based on a combination of differential evolution and adaptive step size control.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\").", "error": "TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\")", "parent_id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "metadata": {}, "mutation_prompt": null}
{"id": "8ae5d0be-2c4c-461d-94ff-613eb1a68c0d", "solution": "import numpy as np\n\nclass AdaptiveHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 0.2\n        self.max_local_search_prob = 0.5\n        self.min_local_search_prob = 0.05\n        self.mutation_scale = 0.1\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            diversity = np.std(self.particles)\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n\n            if np.random.rand() < self.local_search_prob:  # Dynamic Local Search with adaptive mutation\n                for i in range(self.population_size):\n                    perturbation = np.random.normal(0, self.mutation_scale, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "AdaptiveHybridPSODE", "description": "Enhancing global exploration by incorporating adaptive mutation strategies for better exploration-exploitation balance.", "configspace": "", "generation": 98, "fitness": 0.23331531378304915, "feedback": "The algorithm AdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "metadata": {"aucs": [0.4827274391903619, 0.4774806163822317, 0.5106279648667291, 0.5065560982528386, 0.4416430333416064, 0.5059382610483127, 0.4958981811346711, 0.46367717299528044, 0.4983743322045344, 0.16017465466342218, 0.1729126792337765, 0.10565557587112995, 0.18601392743812994, 0.05425035726959848, 0.12978386259802244, 0.18694508119235365, 0.14403139968048106, 0.15359631661172224, 0.08325792310038127, 0.11184754693404719, 0.10587784057677596, 0.10225283874680358, 0.12803499622479142, 0.11206632128703642, 0.09373218869524969, 0.07697949189119369, 0.09863702880302849, 0.10097013661782761, 0.05606289284414634, 0.06090100090125128, 0.0977170463292597, 0.08844809232093409, 0.05206841517191041, 0.08283774618257345, 0.06406355310364631, 0.05298459332830929, 0.9148433182833823, 0.7757922484283957, 0.8261632984876867, 0.8639296096202178, 0.8543857230725607, 0.8382563539603459, 0.8906339548009615, 0.8321076144333308, 0.8498282017999435, 0.28133512729872256, 0.23251090397370322, 0.3106039984085325, 0.28466300795800803, 0.14851974218184483, 0.27671588772552846, 0.2503517746513272, 0.27438701004268984, 0.22472971334229175, 0.3211197949297362, 0.3012125280611694, 0.32263787447708003, 0.3456381141044207, 0.18786745948120498, 0.7245236663162515, 0.30477332151463166, 0.20959015975598227, 0.6919482131752175, 0.15242651113482464, 0.13161629257942808, 0.1796405155765568, 0.18536825427138004, 0.17065644435150573, 0.12176512455988409, 0.16156770779972907, 0.17756309287873007, 0.22434813511565121, 0.15932292891098276, 0.15769863642499493, 0.20396015218404073, 0.23913330792030085, 0.1791468621241713, 0.19212702456433473, 0.17947139514025223, 0.190117819687172, 0.20266141954775907, 0.009769971199454774, 0.05014752445645443, 0.03459176289710597, 0.06819191609704556, 9.999999999998899e-05, 0.008219901621488668, 0.057844860849513124, 0.06028952419854172, 0.030988002683601024, 0.14571664640139315, 0.15908402623313667, 0.26337042794958987, 0.14575038733772194, 0.1296482659168069, 0.07919385914496557, 0.16946690149440313, 0.1458358670377773, 0.2721485623947688, 9.999999999998899e-05, 0.030918456127735805, 0.05331012382416045, 0.01008356405494193, 9.999999999998899e-05, 0.02483920413276597, 9.999999999998899e-05, 0.01567071086434446, 0.0332167738159278, 0.1290607831730367, 0.08113528614561383, 0.119743290950594, 0.09851362411483655, 0.10860825243904926, 0.12350973097362727, 0.08956400932768394, 0.04555046989443923, 0.08159911437742795, 0.39354961280485223, 0.4320562549361847, 0.5156512108976494, 0.4162980871450732, 0.4106696674039837, 0.4034081881612709, 0.42767185011020725, 0.41321756996110326, 0.4371113372864899, 0.04088385148645213, 0.09391033273880911, 0.07581666027381817, 0.09406584498518222, 0.051126537003874706, 0.10338379991185398, 0.10233173014173369, 0.05423405843383167, 0.10759678365824255, 0.16631567729451635, 0.21135111827374153, 0.251816704683522, 0.2185221626253555, 0.27350333431707274, 0.26901454228341426, 0.252650156927386, 0.28461051458184206, 0.19757198170447432, 0.2747356229282495, 0.3041599171870878, 0.2214203055131575, 0.26038267534032344, 0.2634027627790514, 0.2998435322334656, 0.20823319054415512, 0.31337386413688395, 0.23936438297213614, 0.19997550092187288, 0.10623919224020462, 0.14855877489314895, 0.24790470538354992, 0.2238148402236192, 0.23879758551270336, 0.184401175921873, 0.24999449868560142, 0.20432809102187555, 0.2049569802303003, 0.21420132400793346, 0.23227926887102068, 0.22667813006172954, 0.22380518371063451, 0.23507655460956534, 0.21614009245907273, 0.2033977609989689, 0.20003544409359653, 0.19007469207706795, 0.20604243076071516, 0.20497938421366468, 0.18243238512332005, 0.21528833733611052, 0.17709031898161243, 0.19602139383647776, 0.29774244294430896, 0.1766891745908753, 0.7316672162297998, 0.17456118752281657, 0.15198810430428944, 0.7074213567884591, 0.1991506380560476, 0.8463549391563634, 0.12233002186102404, 0.16828274741691873, 0.16116573274015922, 0.5726207945782452, 0.20799892073789894, 0.5697026340264164, 0.5400694885246986, 0.14369668754923548, 0.20027449507309347, 0.16539951732927516, 0.4878975489466397, 0.49050152257843915, 0.18309205108541304, 0.17831940547263625, 0.18921150152284083, 0.20177465796634197, 0.17627123065550565, 0.17706826172658052, 0.1787711342216568, 0.17842391660258805, 0.18780124609213722, 0.08787437822659994, 0.07501943985023429, 0.07794156646887385, 0.09525166460793133, 0.09554833384456685, 0.08162473486016586, 0.08709509494193568, 0.08670673513607585, 0.058358728837654916]}, "mutation_prompt": null}
{"id": "8c1f7e9c-89c1-43d8-931d-8fbd0c469c0f", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE(HybridPSODE):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.local_search_radius = 0.1\n        self.diversity_threshold = 0.2\n        self.max_local_search_prob = 0.5\n        self.min_local_search_prob = 0.05\n\n    def __call__(self, func):\n        for t in range(self.budget):\n            diversity = np.std(self.particles)\n            self.local_search_prob = max(self.min_local_search_prob, min(self.max_local_search_prob, diversity / self.diversity_threshold))\n\n            if np.random.rand() < self.local_search_prob:  # Dynamic Local Search\n                for i in range(self.population_size):\n                    perturbation = np.random.uniform(-self.local_search_radius, self.local_search_radius, self.dim)\n                    candidate = np.clip(self.particles[i] + perturbation, -5.0, 5.0)\n                    if func(candidate) < func(self.particles[i]):\n                        self.particles[i] = candidate.copy()\n            else:  # Original HybridPSODE update\n                super().__call__(func)\n        return self.global_best", "name": "EnhancedHybridPSODE", "description": "Enhancing global exploration via dynamic adaptation of local search probability based on population diversity.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "35e1e57f-5d75-4ebb-9ef4-3d70bcf39169", "metadata": {"aucs": [0.4827274391903619, 0.5157628549617489, 0.5106279648667291, 0.5065560982528386, 0.5108318496989668, 0.5059382610483127, 0.4958981811346711, 0.5342088392412256, 0.4983743322045344, 0.16017465466342218, 0.13421044830540596, 0.10565557587112995, 0.18601392743812994, 0.16588774722972777, 0.12978386259802244, 0.18694508119235365, 0.16902320510267077, 0.15359631661172224, 0.08325792310038127, 0.11800564938428493, 0.10587784057677596, 0.10225283874680358, 0.13096847356058916, 0.11206632128703642, 0.09373218869524969, 0.08089567207543946, 0.09863702880302849, 0.10097013661782761, 0.07596871708198993, 0.06090100090125128, 0.0977170463292597, 0.09805823639903788, 0.05206841517191041, 0.08283774618257345, 0.08358552719038381, 0.05298459332830929, 0.9148433182833823, 0.8515900716401982, 0.8261632984876867, 0.8639296096202178, 0.9417863337569442, 0.8382563539603459, 0.8906339548009615, 0.8829427706542641, 0.8498282017999435, 0.28133512729872256, 0.2648338490304746, 0.3106039984085325, 0.28466300795800803, 0.25226180977923374, 0.27671588772552846, 0.2503517746513272, 0.2617276234396728, 0.22472971334229175, 0.3211197949297362, 0.29839115631174573, 0.32263787447708003, 0.3456381141044207, 0.37005956599016165, 0.7245236663162515, 0.30477332151463166, 0.2312472478487183, 0.6919482131752175, 0.15242651113482464, 0.16111409616296934, 0.1796405155765568, 0.18536825427138004, 0.1761194591000398, 0.12176512455988409, 0.16156770779972907, 0.17590740152220974, 0.22434813511565121, 0.15932292891098276, 0.1831304033892892, 0.20396015218404073, 0.23913330792030085, 0.20031914584176058, 0.19212702456433473, 0.17947139514025223, 0.11807496364551806, 0.20266141954775907, 0.009769971199454774, 0.0017227391153510352, 0.03459176289710597, 0.06819191609704556, 9.999999999998899e-05, 0.008219901621488668, 0.057844860849513124, 0.027910288103113134, 0.030988002683601024, 0.14571664640139315, 0.11032282398244675, 0.26337042794958987, 0.14575038733772194, 0.07133778256636725, 0.07919385914496557, 0.16946690149440313, 0.1455646304106547, 0.2721485623947688, 9.999999999998899e-05, 9.999999999998899e-05, 0.05331012382416045, 0.01008356405494193, 0.018777275679245364, 0.02483920413276597, 9.999999999998899e-05, 0.008605519154051167, 0.0332167738159278, 0.1290607831730367, 0.11281283954477717, 0.119743290950594, 0.09851362411483655, 0.11967699574831991, 0.12350973097362727, 0.08956400932768394, 0.07200095922173111, 0.08159911437742795, 0.39354961280485223, 0.41062524262642186, 0.5156512108976494, 0.4162980871450732, 0.4359683006948276, 0.4034081881612709, 0.42767185011020725, 0.4331370855157064, 0.4371113372864899, 0.04088385148645213, 0.09048383023389905, 0.07581666027381817, 0.09406584498518222, 0.05667652377101817, 0.10338379991185398, 0.10233173014173369, 0.10833042786457558, 0.10759678365824255, 0.16631567729451635, 0.21036485406425043, 0.251816704683522, 0.2185221626253555, 0.23112445301033457, 0.26901454228341426, 0.252650156927386, 0.24420552467735268, 0.19757198170447432, 0.2747356229282495, 0.28074421531732885, 0.2214203055131575, 0.26038267534032344, 0.2993177448383655, 0.2998435322334656, 0.20823319054415512, 0.29592462661959695, 0.23936438297213614, 0.19997550092187288, 0.23593665256939433, 0.14855877489314895, 0.24790470538354992, 0.17210231717418667, 0.23879758551270336, 0.184401175921873, 0.23951467220920952, 0.20432809102187555, 0.2049569802303003, 0.22668765946144454, 0.23227926887102068, 0.22667813006172954, 0.21914765941469994, 0.23507655460956534, 0.21614009245907273, 0.23275983625654217, 0.20003544409359653, 0.19007469207706795, 0.20553975637891686, 0.20497938421366468, 0.18243238512332005, 0.18678725415151665, 0.17709031898161243, 0.19602139383647776, 0.20770123237437144, 0.1766891745908753, 0.7316672162297998, 0.1238535080972697, 0.15198810430428944, 0.7074213567884591, 0.19857759806962527, 0.8463549391563634, 0.12233002186102404, 0.1682010315742356, 0.16116573274015922, 0.5726207945782452, 0.6300371547965526, 0.5697026340264164, 0.5400694885246986, 0.16594555142376322, 0.20027449507309347, 0.16539951732927516, 0.5847981202352635, 0.49050152257843915, 0.18309205108541304, 0.18593436498791538, 0.18921150152284083, 0.20177465796634197, 0.18903326033803192, 0.17706826172658052, 0.1787711342216568, 0.18272239494770592, 0.18780124609213722, 0.08787437822659994, 0.07343008237844206, 0.07794156646887385, 0.09525166460793133, 0.0856850691232165, 0.08162473486016586, 0.08709509494193568, 0.08866272652449647, 0.058358728837654916]}, "mutation_prompt": null}
