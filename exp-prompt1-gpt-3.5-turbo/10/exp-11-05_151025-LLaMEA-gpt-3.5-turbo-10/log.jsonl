{"id": "f77e9655-6ae6-4430-9618-79001173ece6", "solution": "import numpy as np\n\nclass HybridFireflyDE:\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta_min = beta_min\n        self.gamma = gamma\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                mutant = de_mutate(x_r1, x_r2, x_r3)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "HybridFireflyDE", "description": "Hybrid Firefly Algorithm with Differential Evolution Strategy for Black Box Optimization; Integrating global search exploration of firefly algorithm with local search exploitation of differential evolution", "configspace": "", "generation": 0, "fitness": 0.125969508289228, "feedback": "The algorithm HybridFireflyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": null, "metadata": {"aucs": [0.1706806706263455, 0.20982903570136013, 0.1808004183625025, 0.2187132311954305, 0.23299886371620793, 0.21518866479121124, 0.21982506185010975, 0.20313164540774586, 0.20498595815324672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058847135887658775, 0.048356603316981106, 0.0613445302326352, 0.057706667007290546, 0.06038823594370968, 0.052925884897469744, 0.04842821344722548, 0.04602980809682955, 0.04792154449198627, 0.02128437595891841, 0.031464132781662046, 0.02670728494843133, 0.022049814849862015, 0.028385234299568074, 0.023970581490599385, 0.01610256441726121, 0.020518383227653203, 0.033041375977722276, 0.9624050395457955, 0.9697003945763114, 0.9664403663016383, 0.9140183053189224, 0.9560565069040278, 0.9747285324400811, 0.9588637694272298, 0.9844370083722936, 0.9638989126882023, 0.08555310115832848, 0.06032467627838489, 0.08130938611723704, 0.09333475240380817, 0.07637531984338641, 0.11826669417256253, 0.06853637185375538, 0.0846733424131757, 0.08671258808894222, 0.1122027249844183, 0.11492373607951267, 0.11822673986171395, 0.14120545868096868, 0.14578262312744283, 0.15244712063095045, 0.1451681801272322, 0.1455921684536492, 0.12785733994958315, 9.999999999998899e-05, 9.999999999998899e-05, 0.009045269114352439, 0.0058361737420845605, 0.00023225009266714114, 0.010068769035783354, 0.02011386918512359, 0.023183769420225153, 0.010259365605384874, 0.005971131992701717, 0.017598360755945786, 0.015501366427991714, 0.008019193323734908, 9.999999999998899e-05, 9.999999999998899e-05, 0.018207514362074684, 0.006189595883945742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05210542723273337, 0.05041414996954352, 0.052565604366617835, 0.0461178518431552, 0.06044205855670193, 0.022883944357079966, 0.03315680484695527, 0.027123331205806456, 0.04273943863537899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015743417806818316, 0.002015886218921348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011881637401399359, 0.0018823794761728685, 0.012559378433985358, 0.240744801529178, 0.19195867148563361, 0.19271876491580164, 0.2044689014762454, 0.19813276651724787, 0.19567705862933815, 0.18519454470766572, 0.21921565458832215, 0.1942994623372558, 0.06568043591196293, 0.06020961128600777, 0.06184206489442878, 0.05588662521313237, 0.0460959260221071, 0.045873952692970676, 0.03706005472268281, 0.05064771065130258, 0.044993266138474985, 0.12882783989397228, 0.11841707001505197, 0.12884901770431934, 0.13243587802063683, 0.13677459080242804, 0.11874074238989307, 0.13680272616340206, 0.15909540790207954, 0.11141059372890616, 0.16608927968834908, 0.1641666643180042, 0.16052096861249043, 0.16239296858208085, 0.1662553761241714, 0.1569539812196291, 0.1734030855368195, 0.17706476411338468, 0.17822737770446562, 0.11603886084008519, 0.10335426482560839, 0.10960997039067821, 0.09434617128833178, 0.10249927624262145, 0.09805947054370301, 0.1217801685166533, 0.10685390980492482, 0.11805186186713235, 0.15924777679643798, 0.1635730376019383, 0.14776817852086255, 0.15298542709671237, 0.1553996626287597, 0.15638223736443124, 0.15097477852149588, 0.15268459670986234, 0.14849166501866107, 0.1693312807763414, 0.14505915964414595, 0.14892748588499927, 0.14921357659151635, 0.15252947860506194, 0.1489222769873504, 0.14915942888706868, 0.1561204213923404, 0.14545921295376263, 0.1529842628606386, 0.13727730416738793, 0.1318528424390628, 0.1365151508916902, 0.14476004159004896, 0.15253636916082636, 0.1638994031216553, 0.15548511078561222, 0.15069181950772548, 0.15684859356227165, 0.1455948097301214, 0.16154893515375768, 0.1122896012768908, 0.11408848125850146, 0.11046108538693333, 0.1939495447647016, 0.18048786865077016, 0.17458171813111545, 0.16805652538684357, 0.17352249976542022, 0.17849166221156187, 0.17846300016551797, 0.2089646553390121, 0.18073394031664103, 0.1817670279238376, 0.19346593094790498, 0.1870943293612951, 0.050016787809069485, 0.04890377911872512, 0.050969956405236605, 0.05494930636031836, 0.05171107627457461, 0.043594132986987666, 0.050123900842999, 0.04504301267484989, 0.05578113745708646]}, "mutation_prompt": null}
{"id": "838752ff-7327-43b7-8982-267c10338ee7", "solution": "import numpy as np\n\nclass DynamicPopSizeHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, max_pop_size=30, min_pop_size=10):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.max_pop_size = max_pop_size\n        self.min_pop_size = min_pop_size\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                mutant = de_mutate(x_r1, x_r2, x_r3)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            # Dynamic population size adjustment\n            self.pop_size = max(self.min_pop_size, min(self.max_pop_size, int(self.pop_size * (1 + self.gamma * (func(best_sol) - func(pop[best_idx])))))\n\n        return best_sol", "name": "DynamicPopSizeHybridFireflyDE", "description": "Enhance exploration by incorporating a dynamic population size strategy.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 56, 9, '        return best_sol\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 56, 9, '        return best_sol\\n'))", "parent_id": "f77e9655-6ae6-4430-9618-79001173ece6", "metadata": {}, "mutation_prompt": null}
{"id": "c40b778c-8a9b-41b5-80ae-c88f7421f62f", "solution": "import numpy as np\n\nclass HybridFireflyDE:\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta_min = beta_min\n        self.gamma = gamma\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                mutant = de_mutate(x_r1, x_r2, x_r3)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "HybridFireflyDE", "description": "Hybrid Firefly Algorithm with Differential Evolution Strategy for Black Box Optimization; Integrating global search exploration of firefly algorithm with local search exploitation of differential evolution", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f77e9655-6ae6-4430-9618-79001173ece6", "metadata": {"aucs": [0.1706806706263455, 0.20982903570136013, 0.1808004183625025, 0.2187132311954305, 0.23299886371620793, 0.21518866479121124, 0.21982506185010975, 0.20313164540774586, 0.20498595815324672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058847135887658775, 0.048356603316981106, 0.0613445302326352, 0.057706667007290546, 0.06038823594370968, 0.052925884897469744, 0.04842821344722548, 0.04602980809682955, 0.04792154449198627, 0.02128437595891841, 0.031464132781662046, 0.02670728494843133, 0.022049814849862015, 0.028385234299568074, 0.023970581490599385, 0.01610256441726121, 0.020518383227653203, 0.033041375977722276, 0.9624050395457955, 0.9697003945763114, 0.9664403663016383, 0.9140183053189224, 0.9560565069040278, 0.9747285324400811, 0.9588637694272298, 0.9844370083722936, 0.9638989126882023, 0.08555310115832848, 0.06032467627838489, 0.08130938611723704, 0.09333475240380817, 0.07637531984338641, 0.11826669417256253, 0.06853637185375538, 0.0846733424131757, 0.08671258808894222, 0.1122027249844183, 0.11492373607951267, 0.11822673986171395, 0.14120545868096868, 0.14578262312744283, 0.15244712063095045, 0.1451681801272322, 0.1455921684536492, 0.12785733994958315, 9.999999999998899e-05, 9.999999999998899e-05, 0.009045269114352439, 0.0058361737420845605, 0.00023225009266714114, 0.010068769035783354, 0.02011386918512359, 0.023183769420225153, 0.010259365605384874, 0.005971131992701717, 0.017598360755945786, 0.015501366427991714, 0.008019193323734908, 9.999999999998899e-05, 9.999999999998899e-05, 0.018207514362074684, 0.006189595883945742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05210542723273337, 0.05041414996954352, 0.052565604366617835, 0.0461178518431552, 0.06044205855670193, 0.022883944357079966, 0.03315680484695527, 0.027123331205806456, 0.04273943863537899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015743417806818316, 0.002015886218921348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011881637401399359, 0.0018823794761728685, 0.012559378433985358, 0.240744801529178, 0.19195867148563361, 0.19271876491580164, 0.2044689014762454, 0.19813276651724787, 0.19567705862933815, 0.18519454470766572, 0.21921565458832215, 0.1942994623372558, 0.06568043591196293, 0.06020961128600777, 0.06184206489442878, 0.05588662521313237, 0.0460959260221071, 0.045873952692970676, 0.03706005472268281, 0.05064771065130258, 0.044993266138474985, 0.12882783989397228, 0.11841707001505197, 0.12884901770431934, 0.13243587802063683, 0.13677459080242804, 0.11874074238989307, 0.13680272616340206, 0.15909540790207954, 0.11141059372890616, 0.16608927968834908, 0.1641666643180042, 0.16052096861249043, 0.16239296858208085, 0.1662553761241714, 0.1569539812196291, 0.1734030855368195, 0.17706476411338468, 0.17822737770446562, 0.11603886084008519, 0.10335426482560839, 0.10960997039067821, 0.09434617128833178, 0.10249927624262145, 0.09805947054370301, 0.1217801685166533, 0.10685390980492482, 0.11805186186713235, 0.15924777679643798, 0.1635730376019383, 0.14776817852086255, 0.15298542709671237, 0.1553996626287597, 0.15638223736443124, 0.15097477852149588, 0.15268459670986234, 0.14849166501866107, 0.1693312807763414, 0.14505915964414595, 0.14892748588499927, 0.14921357659151635, 0.15252947860506194, 0.1489222769873504, 0.14915942888706868, 0.1561204213923404, 0.14545921295376263, 0.1529842628606386, 0.13727730416738793, 0.1318528424390628, 0.1365151508916902, 0.14476004159004896, 0.15253636916082636, 0.1638994031216553, 0.15548511078561222, 0.15069181950772548, 0.15684859356227165, 0.1455948097301214, 0.16154893515375768, 0.1122896012768908, 0.11408848125850146, 0.11046108538693333, 0.1939495447647016, 0.18048786865077016, 0.17458171813111545, 0.16805652538684357, 0.17352249976542022, 0.17849166221156187, 0.17846300016551797, 0.2089646553390121, 0.18073394031664103, 0.1817670279238376, 0.19346593094790498, 0.1870943293612951, 0.050016787809069485, 0.04890377911872512, 0.050969956405236605, 0.05494930636031836, 0.05171107627457461, 0.043594132986987666, 0.050123900842999, 0.04504301267484989, 0.05578113745708646]}, "mutation_prompt": null}
{"id": "b8b158b9-d31b-43d8-80f1-4503492fbd4e", "solution": "import numpy as np\n\nclass HybridFireflyDE:\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta_min = beta_min\n        self.gamma = gamma\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                mutant = de_mutate(x_r1, x_r2, x_r3)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "HybridFireflyDE", "description": "Hybrid Firefly Algorithm with Differential Evolution Strategy for Black Box Optimization; Integrating global search exploration of firefly algorithm with local search exploitation of differential evolution", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f77e9655-6ae6-4430-9618-79001173ece6", "metadata": {"aucs": [0.1706806706263455, 0.20982903570136013, 0.1808004183625025, 0.2187132311954305, 0.23299886371620793, 0.21518866479121124, 0.21982506185010975, 0.20313164540774586, 0.20498595815324672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058847135887658775, 0.048356603316981106, 0.0613445302326352, 0.057706667007290546, 0.06038823594370968, 0.052925884897469744, 0.04842821344722548, 0.04602980809682955, 0.04792154449198627, 0.02128437595891841, 0.031464132781662046, 0.02670728494843133, 0.022049814849862015, 0.028385234299568074, 0.023970581490599385, 0.01610256441726121, 0.020518383227653203, 0.033041375977722276, 0.9624050395457955, 0.9697003945763114, 0.9664403663016383, 0.9140183053189224, 0.9560565069040278, 0.9747285324400811, 0.9588637694272298, 0.9844370083722936, 0.9638989126882023, 0.08555310115832848, 0.06032467627838489, 0.08130938611723704, 0.09333475240380817, 0.07637531984338641, 0.11826669417256253, 0.06853637185375538, 0.0846733424131757, 0.08671258808894222, 0.1122027249844183, 0.11492373607951267, 0.11822673986171395, 0.14120545868096868, 0.14578262312744283, 0.15244712063095045, 0.1451681801272322, 0.1455921684536492, 0.12785733994958315, 9.999999999998899e-05, 9.999999999998899e-05, 0.009045269114352439, 0.0058361737420845605, 0.00023225009266714114, 0.010068769035783354, 0.02011386918512359, 0.023183769420225153, 0.010259365605384874, 0.005971131992701717, 0.017598360755945786, 0.015501366427991714, 0.008019193323734908, 9.999999999998899e-05, 9.999999999998899e-05, 0.018207514362074684, 0.006189595883945742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05210542723273337, 0.05041414996954352, 0.052565604366617835, 0.0461178518431552, 0.06044205855670193, 0.022883944357079966, 0.03315680484695527, 0.027123331205806456, 0.04273943863537899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015743417806818316, 0.002015886218921348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011881637401399359, 0.0018823794761728685, 0.012559378433985358, 0.240744801529178, 0.19195867148563361, 0.19271876491580164, 0.2044689014762454, 0.19813276651724787, 0.19567705862933815, 0.18519454470766572, 0.21921565458832215, 0.1942994623372558, 0.06568043591196293, 0.06020961128600777, 0.06184206489442878, 0.05588662521313237, 0.0460959260221071, 0.045873952692970676, 0.03706005472268281, 0.05064771065130258, 0.044993266138474985, 0.12882783989397228, 0.11841707001505197, 0.12884901770431934, 0.13243587802063683, 0.13677459080242804, 0.11874074238989307, 0.13680272616340206, 0.15909540790207954, 0.11141059372890616, 0.16608927968834908, 0.1641666643180042, 0.16052096861249043, 0.16239296858208085, 0.1662553761241714, 0.1569539812196291, 0.1734030855368195, 0.17706476411338468, 0.17822737770446562, 0.11603886084008519, 0.10335426482560839, 0.10960997039067821, 0.09434617128833178, 0.10249927624262145, 0.09805947054370301, 0.1217801685166533, 0.10685390980492482, 0.11805186186713235, 0.15924777679643798, 0.1635730376019383, 0.14776817852086255, 0.15298542709671237, 0.1553996626287597, 0.15638223736443124, 0.15097477852149588, 0.15268459670986234, 0.14849166501866107, 0.1693312807763414, 0.14505915964414595, 0.14892748588499927, 0.14921357659151635, 0.15252947860506194, 0.1489222769873504, 0.14915942888706868, 0.1561204213923404, 0.14545921295376263, 0.1529842628606386, 0.13727730416738793, 0.1318528424390628, 0.1365151508916902, 0.14476004159004896, 0.15253636916082636, 0.1638994031216553, 0.15548511078561222, 0.15069181950772548, 0.15684859356227165, 0.1455948097301214, 0.16154893515375768, 0.1122896012768908, 0.11408848125850146, 0.11046108538693333, 0.1939495447647016, 0.18048786865077016, 0.17458171813111545, 0.16805652538684357, 0.17352249976542022, 0.17849166221156187, 0.17846300016551797, 0.2089646553390121, 0.18073394031664103, 0.1817670279238376, 0.19346593094790498, 0.1870943293612951, 0.050016787809069485, 0.04890377911872512, 0.050969956405236605, 0.05494930636031836, 0.05171107627457461, 0.043594132986987666, 0.050123900842999, 0.04504301267484989, 0.05578113745708646]}, "mutation_prompt": null}
{"id": "933176eb-ac82-4e21-bb00-0678db99f722", "solution": "import numpy as np\n\nclass HybridFireflyDE:\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta_min = beta_min\n        self.gamma = gamma\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                mutant = de_mutate(x_r1, x_r2, x_r3)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "HybridFireflyDE", "description": "Hybrid Firefly Algorithm with Differential Evolution Strategy for Black Box Optimization; Integrating global search exploration of firefly algorithm with local search exploitation of differential evolution", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f77e9655-6ae6-4430-9618-79001173ece6", "metadata": {"aucs": [0.1706806706263455, 0.20982903570136013, 0.1808004183625025, 0.2187132311954305, 0.23299886371620793, 0.21518866479121124, 0.21982506185010975, 0.20313164540774586, 0.20498595815324672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058847135887658775, 0.048356603316981106, 0.0613445302326352, 0.057706667007290546, 0.06038823594370968, 0.052925884897469744, 0.04842821344722548, 0.04602980809682955, 0.04792154449198627, 0.02128437595891841, 0.031464132781662046, 0.02670728494843133, 0.022049814849862015, 0.028385234299568074, 0.023970581490599385, 0.01610256441726121, 0.020518383227653203, 0.033041375977722276, 0.9624050395457955, 0.9697003945763114, 0.9664403663016383, 0.9140183053189224, 0.9560565069040278, 0.9747285324400811, 0.9588637694272298, 0.9844370083722936, 0.9638989126882023, 0.08555310115832848, 0.06032467627838489, 0.08130938611723704, 0.09333475240380817, 0.07637531984338641, 0.11826669417256253, 0.06853637185375538, 0.0846733424131757, 0.08671258808894222, 0.1122027249844183, 0.11492373607951267, 0.11822673986171395, 0.14120545868096868, 0.14578262312744283, 0.15244712063095045, 0.1451681801272322, 0.1455921684536492, 0.12785733994958315, 9.999999999998899e-05, 9.999999999998899e-05, 0.009045269114352439, 0.0058361737420845605, 0.00023225009266714114, 0.010068769035783354, 0.02011386918512359, 0.023183769420225153, 0.010259365605384874, 0.005971131992701717, 0.017598360755945786, 0.015501366427991714, 0.008019193323734908, 9.999999999998899e-05, 9.999999999998899e-05, 0.018207514362074684, 0.006189595883945742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05210542723273337, 0.05041414996954352, 0.052565604366617835, 0.0461178518431552, 0.06044205855670193, 0.022883944357079966, 0.03315680484695527, 0.027123331205806456, 0.04273943863537899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015743417806818316, 0.002015886218921348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011881637401399359, 0.0018823794761728685, 0.012559378433985358, 0.240744801529178, 0.19195867148563361, 0.19271876491580164, 0.2044689014762454, 0.19813276651724787, 0.19567705862933815, 0.18519454470766572, 0.21921565458832215, 0.1942994623372558, 0.06568043591196293, 0.06020961128600777, 0.06184206489442878, 0.05588662521313237, 0.0460959260221071, 0.045873952692970676, 0.03706005472268281, 0.05064771065130258, 0.044993266138474985, 0.12882783989397228, 0.11841707001505197, 0.12884901770431934, 0.13243587802063683, 0.13677459080242804, 0.11874074238989307, 0.13680272616340206, 0.15909540790207954, 0.11141059372890616, 0.16608927968834908, 0.1641666643180042, 0.16052096861249043, 0.16239296858208085, 0.1662553761241714, 0.1569539812196291, 0.1734030855368195, 0.17706476411338468, 0.17822737770446562, 0.11603886084008519, 0.10335426482560839, 0.10960997039067821, 0.09434617128833178, 0.10249927624262145, 0.09805947054370301, 0.1217801685166533, 0.10685390980492482, 0.11805186186713235, 0.15924777679643798, 0.1635730376019383, 0.14776817852086255, 0.15298542709671237, 0.1553996626287597, 0.15638223736443124, 0.15097477852149588, 0.15268459670986234, 0.14849166501866107, 0.1693312807763414, 0.14505915964414595, 0.14892748588499927, 0.14921357659151635, 0.15252947860506194, 0.1489222769873504, 0.14915942888706868, 0.1561204213923404, 0.14545921295376263, 0.1529842628606386, 0.13727730416738793, 0.1318528424390628, 0.1365151508916902, 0.14476004159004896, 0.15253636916082636, 0.1638994031216553, 0.15548511078561222, 0.15069181950772548, 0.15684859356227165, 0.1455948097301214, 0.16154893515375768, 0.1122896012768908, 0.11408848125850146, 0.11046108538693333, 0.1939495447647016, 0.18048786865077016, 0.17458171813111545, 0.16805652538684357, 0.17352249976542022, 0.17849166221156187, 0.17846300016551797, 0.2089646553390121, 0.18073394031664103, 0.1817670279238376, 0.19346593094790498, 0.1870943293612951, 0.050016787809069485, 0.04890377911872512, 0.050969956405236605, 0.05494930636031836, 0.05171107627457461, 0.043594132986987666, 0.050123900842999, 0.04504301267484989, 0.05578113745708646]}, "mutation_prompt": null}
{"id": "41a27a99-00d5-4468-92ce-480c7d78cd02", "solution": "import numpy as np\n\nclass HybridFireflyDE:\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta_min = beta_min\n        self.gamma = gamma\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                mutant = de_mutate(x_r1, x_r2, x_r3)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "HybridFireflyDE", "description": "Hybrid Firefly Algorithm with Differential Evolution Strategy for Black Box Optimization; Integrating global search exploration of firefly algorithm with local search exploitation of differential evolution", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f77e9655-6ae6-4430-9618-79001173ece6", "metadata": {"aucs": [0.1706806706263455, 0.20982903570136013, 0.1808004183625025, 0.2187132311954305, 0.23299886371620793, 0.21518866479121124, 0.21982506185010975, 0.20313164540774586, 0.20498595815324672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058847135887658775, 0.048356603316981106, 0.0613445302326352, 0.057706667007290546, 0.06038823594370968, 0.052925884897469744, 0.04842821344722548, 0.04602980809682955, 0.04792154449198627, 0.02128437595891841, 0.031464132781662046, 0.02670728494843133, 0.022049814849862015, 0.028385234299568074, 0.023970581490599385, 0.01610256441726121, 0.020518383227653203, 0.033041375977722276, 0.9624050395457955, 0.9697003945763114, 0.9664403663016383, 0.9140183053189224, 0.9560565069040278, 0.9747285324400811, 0.9588637694272298, 0.9844370083722936, 0.9638989126882023, 0.08555310115832848, 0.06032467627838489, 0.08130938611723704, 0.09333475240380817, 0.07637531984338641, 0.11826669417256253, 0.06853637185375538, 0.0846733424131757, 0.08671258808894222, 0.1122027249844183, 0.11492373607951267, 0.11822673986171395, 0.14120545868096868, 0.14578262312744283, 0.15244712063095045, 0.1451681801272322, 0.1455921684536492, 0.12785733994958315, 9.999999999998899e-05, 9.999999999998899e-05, 0.009045269114352439, 0.0058361737420845605, 0.00023225009266714114, 0.010068769035783354, 0.02011386918512359, 0.023183769420225153, 0.010259365605384874, 0.005971131992701717, 0.017598360755945786, 0.015501366427991714, 0.008019193323734908, 9.999999999998899e-05, 9.999999999998899e-05, 0.018207514362074684, 0.006189595883945742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05210542723273337, 0.05041414996954352, 0.052565604366617835, 0.0461178518431552, 0.06044205855670193, 0.022883944357079966, 0.03315680484695527, 0.027123331205806456, 0.04273943863537899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015743417806818316, 0.002015886218921348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011881637401399359, 0.0018823794761728685, 0.012559378433985358, 0.240744801529178, 0.19195867148563361, 0.19271876491580164, 0.2044689014762454, 0.19813276651724787, 0.19567705862933815, 0.18519454470766572, 0.21921565458832215, 0.1942994623372558, 0.06568043591196293, 0.06020961128600777, 0.06184206489442878, 0.05588662521313237, 0.0460959260221071, 0.045873952692970676, 0.03706005472268281, 0.05064771065130258, 0.044993266138474985, 0.12882783989397228, 0.11841707001505197, 0.12884901770431934, 0.13243587802063683, 0.13677459080242804, 0.11874074238989307, 0.13680272616340206, 0.15909540790207954, 0.11141059372890616, 0.16608927968834908, 0.1641666643180042, 0.16052096861249043, 0.16239296858208085, 0.1662553761241714, 0.1569539812196291, 0.1734030855368195, 0.17706476411338468, 0.17822737770446562, 0.11603886084008519, 0.10335426482560839, 0.10960997039067821, 0.09434617128833178, 0.10249927624262145, 0.09805947054370301, 0.1217801685166533, 0.10685390980492482, 0.11805186186713235, 0.15924777679643798, 0.1635730376019383, 0.14776817852086255, 0.15298542709671237, 0.1553996626287597, 0.15638223736443124, 0.15097477852149588, 0.15268459670986234, 0.14849166501866107, 0.1693312807763414, 0.14505915964414595, 0.14892748588499927, 0.14921357659151635, 0.15252947860506194, 0.1489222769873504, 0.14915942888706868, 0.1561204213923404, 0.14545921295376263, 0.1529842628606386, 0.13727730416738793, 0.1318528424390628, 0.1365151508916902, 0.14476004159004896, 0.15253636916082636, 0.1638994031216553, 0.15548511078561222, 0.15069181950772548, 0.15684859356227165, 0.1455948097301214, 0.16154893515375768, 0.1122896012768908, 0.11408848125850146, 0.11046108538693333, 0.1939495447647016, 0.18048786865077016, 0.17458171813111545, 0.16805652538684357, 0.17352249976542022, 0.17849166221156187, 0.17846300016551797, 0.2089646553390121, 0.18073394031664103, 0.1817670279238376, 0.19346593094790498, 0.1870943293612951, 0.050016787809069485, 0.04890377911872512, 0.050969956405236605, 0.05494930636031836, 0.05171107627457461, 0.043594132986987666, 0.050123900842999, 0.04504301267484989, 0.05578113745708646]}, "mutation_prompt": null}
{"id": "bbbd0b12-7b10-4242-8130-a7dc5ad8020f", "solution": "import numpy as np\n\nclass HybridFireflyDE:\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta_min = beta_min\n        self.gamma = gamma\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                mutant = de_mutate(x_r1, x_r2, x_r3)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "HybridFireflyDE", "description": "Hybrid Firefly Algorithm with Differential Evolution Strategy for Black Box Optimization; Integrating global search exploration of firefly algorithm with local search exploitation of differential evolution", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f77e9655-6ae6-4430-9618-79001173ece6", "metadata": {"aucs": [0.1706806706263455, 0.20982903570136013, 0.1808004183625025, 0.2187132311954305, 0.23299886371620793, 0.21518866479121124, 0.21982506185010975, 0.20313164540774586, 0.20498595815324672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058847135887658775, 0.048356603316981106, 0.0613445302326352, 0.057706667007290546, 0.06038823594370968, 0.052925884897469744, 0.04842821344722548, 0.04602980809682955, 0.04792154449198627, 0.02128437595891841, 0.031464132781662046, 0.02670728494843133, 0.022049814849862015, 0.028385234299568074, 0.023970581490599385, 0.01610256441726121, 0.020518383227653203, 0.033041375977722276, 0.9624050395457955, 0.9697003945763114, 0.9664403663016383, 0.9140183053189224, 0.9560565069040278, 0.9747285324400811, 0.9588637694272298, 0.9844370083722936, 0.9638989126882023, 0.08555310115832848, 0.06032467627838489, 0.08130938611723704, 0.09333475240380817, 0.07637531984338641, 0.11826669417256253, 0.06853637185375538, 0.0846733424131757, 0.08671258808894222, 0.1122027249844183, 0.11492373607951267, 0.11822673986171395, 0.14120545868096868, 0.14578262312744283, 0.15244712063095045, 0.1451681801272322, 0.1455921684536492, 0.12785733994958315, 9.999999999998899e-05, 9.999999999998899e-05, 0.009045269114352439, 0.0058361737420845605, 0.00023225009266714114, 0.010068769035783354, 0.02011386918512359, 0.023183769420225153, 0.010259365605384874, 0.005971131992701717, 0.017598360755945786, 0.015501366427991714, 0.008019193323734908, 9.999999999998899e-05, 9.999999999998899e-05, 0.018207514362074684, 0.006189595883945742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05210542723273337, 0.05041414996954352, 0.052565604366617835, 0.0461178518431552, 0.06044205855670193, 0.022883944357079966, 0.03315680484695527, 0.027123331205806456, 0.04273943863537899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015743417806818316, 0.002015886218921348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011881637401399359, 0.0018823794761728685, 0.012559378433985358, 0.240744801529178, 0.19195867148563361, 0.19271876491580164, 0.2044689014762454, 0.19813276651724787, 0.19567705862933815, 0.18519454470766572, 0.21921565458832215, 0.1942994623372558, 0.06568043591196293, 0.06020961128600777, 0.06184206489442878, 0.05588662521313237, 0.0460959260221071, 0.045873952692970676, 0.03706005472268281, 0.05064771065130258, 0.044993266138474985, 0.12882783989397228, 0.11841707001505197, 0.12884901770431934, 0.13243587802063683, 0.13677459080242804, 0.11874074238989307, 0.13680272616340206, 0.15909540790207954, 0.11141059372890616, 0.16608927968834908, 0.1641666643180042, 0.16052096861249043, 0.16239296858208085, 0.1662553761241714, 0.1569539812196291, 0.1734030855368195, 0.17706476411338468, 0.17822737770446562, 0.11603886084008519, 0.10335426482560839, 0.10960997039067821, 0.09434617128833178, 0.10249927624262145, 0.09805947054370301, 0.1217801685166533, 0.10685390980492482, 0.11805186186713235, 0.15924777679643798, 0.1635730376019383, 0.14776817852086255, 0.15298542709671237, 0.1553996626287597, 0.15638223736443124, 0.15097477852149588, 0.15268459670986234, 0.14849166501866107, 0.1693312807763414, 0.14505915964414595, 0.14892748588499927, 0.14921357659151635, 0.15252947860506194, 0.1489222769873504, 0.14915942888706868, 0.1561204213923404, 0.14545921295376263, 0.1529842628606386, 0.13727730416738793, 0.1318528424390628, 0.1365151508916902, 0.14476004159004896, 0.15253636916082636, 0.1638994031216553, 0.15548511078561222, 0.15069181950772548, 0.15684859356227165, 0.1455948097301214, 0.16154893515375768, 0.1122896012768908, 0.11408848125850146, 0.11046108538693333, 0.1939495447647016, 0.18048786865077016, 0.17458171813111545, 0.16805652538684357, 0.17352249976542022, 0.17849166221156187, 0.17846300016551797, 0.2089646553390121, 0.18073394031664103, 0.1817670279238376, 0.19346593094790498, 0.1870943293612951, 0.050016787809069485, 0.04890377911872512, 0.050969956405236605, 0.05494930636031836, 0.05171107627457461, 0.043594132986987666, 0.050123900842999, 0.04504301267484989, 0.05578113745708646]}, "mutation_prompt": null}
{"id": "f9db735f-8162-49a2-9252-6a7fb800e4db", "solution": "import numpy as np\n\nclass ImprovedHybridFireflyDE:\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta_min = beta_min\n        self.gamma = gamma\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                mutant = de_mutate(x_r1, x_r2, x_r3)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n            pop = np.array(new_pop)\n            self.pop_size = min(int(self.pop_size * 1.1), 100)  # Dynamic population size adaptation\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedHybridFireflyDE", "description": "Improved Hybrid Firefly Algorithm with Differential Evolution Strategy for Black Box Optimization by incorporating dynamic population size adaptation.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 20 is out of bounds for axis 0 with size 20').", "error": "IndexError('index 20 is out of bounds for axis 0 with size 20')", "parent_id": "f77e9655-6ae6-4430-9618-79001173ece6", "metadata": {}, "mutation_prompt": null}
{"id": "9d4c4887-34cc-418c-ac24-4ce91c49c5fa", "solution": "import numpy as np\n\nclass EnhancedHybridFireflyDE(HybridFireflyDE):\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3):\n            F = 0.5 + 0.3 * (1 - np.exp(-budget_used / self.budget))  # Dynamic mutation factor\n            return x_r1 + F * (x_r2 - x_r3)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                mutant = de_mutate(x_r1, x_r2, x_r3)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "EnhancedHybridFireflyDE", "description": "Enhance the local search strategy by incorporating a dynamic mutation factor based on individual performance.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'clipToBounds' is not defined\").", "error": "NameError(\"name 'clipToBounds' is not defined\")", "parent_id": "f77e9655-6ae6-4430-9618-79001173ece6", "metadata": {}, "mutation_prompt": null}
{"id": "4e12e98a-e9c8-4d50-833e-712b16e17250", "solution": "import numpy as np\n\nclass HybridFireflyDE:\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta_min = beta_min\n        self.gamma = gamma\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                mutant = de_mutate(x_r1, x_r2, x_r3)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "HybridFireflyDE", "description": "Hybrid Firefly Algorithm with Differential Evolution Strategy for Black Box Optimization; Integrating global search exploration of firefly algorithm with local search exploitation of differential evolution", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f77e9655-6ae6-4430-9618-79001173ece6", "metadata": {"aucs": [0.1706806706263455, 0.20982903570136013, 0.1808004183625025, 0.2187132311954305, 0.23299886371620793, 0.21518866479121124, 0.21982506185010975, 0.20313164540774586, 0.20498595815324672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058847135887658775, 0.048356603316981106, 0.0613445302326352, 0.057706667007290546, 0.06038823594370968, 0.052925884897469744, 0.04842821344722548, 0.04602980809682955, 0.04792154449198627, 0.02128437595891841, 0.031464132781662046, 0.02670728494843133, 0.022049814849862015, 0.028385234299568074, 0.023970581490599385, 0.01610256441726121, 0.020518383227653203, 0.033041375977722276, 0.9624050395457955, 0.9697003945763114, 0.9664403663016383, 0.9140183053189224, 0.9560565069040278, 0.9747285324400811, 0.9588637694272298, 0.9844370083722936, 0.9638989126882023, 0.08555310115832848, 0.06032467627838489, 0.08130938611723704, 0.09333475240380817, 0.07637531984338641, 0.11826669417256253, 0.06853637185375538, 0.0846733424131757, 0.08671258808894222, 0.1122027249844183, 0.11492373607951267, 0.11822673986171395, 0.14120545868096868, 0.14578262312744283, 0.15244712063095045, 0.1451681801272322, 0.1455921684536492, 0.12785733994958315, 9.999999999998899e-05, 9.999999999998899e-05, 0.009045269114352439, 0.0058361737420845605, 0.00023225009266714114, 0.010068769035783354, 0.02011386918512359, 0.023183769420225153, 0.010259365605384874, 0.005971131992701717, 0.017598360755945786, 0.015501366427991714, 0.008019193323734908, 9.999999999998899e-05, 9.999999999998899e-05, 0.018207514362074684, 0.006189595883945742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05210542723273337, 0.05041414996954352, 0.052565604366617835, 0.0461178518431552, 0.06044205855670193, 0.022883944357079966, 0.03315680484695527, 0.027123331205806456, 0.04273943863537899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015743417806818316, 0.002015886218921348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011881637401399359, 0.0018823794761728685, 0.012559378433985358, 0.240744801529178, 0.19195867148563361, 0.19271876491580164, 0.2044689014762454, 0.19813276651724787, 0.19567705862933815, 0.18519454470766572, 0.21921565458832215, 0.1942994623372558, 0.06568043591196293, 0.06020961128600777, 0.06184206489442878, 0.05588662521313237, 0.0460959260221071, 0.045873952692970676, 0.03706005472268281, 0.05064771065130258, 0.044993266138474985, 0.12882783989397228, 0.11841707001505197, 0.12884901770431934, 0.13243587802063683, 0.13677459080242804, 0.11874074238989307, 0.13680272616340206, 0.15909540790207954, 0.11141059372890616, 0.16608927968834908, 0.1641666643180042, 0.16052096861249043, 0.16239296858208085, 0.1662553761241714, 0.1569539812196291, 0.1734030855368195, 0.17706476411338468, 0.17822737770446562, 0.11603886084008519, 0.10335426482560839, 0.10960997039067821, 0.09434617128833178, 0.10249927624262145, 0.09805947054370301, 0.1217801685166533, 0.10685390980492482, 0.11805186186713235, 0.15924777679643798, 0.1635730376019383, 0.14776817852086255, 0.15298542709671237, 0.1553996626287597, 0.15638223736443124, 0.15097477852149588, 0.15268459670986234, 0.14849166501866107, 0.1693312807763414, 0.14505915964414595, 0.14892748588499927, 0.14921357659151635, 0.15252947860506194, 0.1489222769873504, 0.14915942888706868, 0.1561204213923404, 0.14545921295376263, 0.1529842628606386, 0.13727730416738793, 0.1318528424390628, 0.1365151508916902, 0.14476004159004896, 0.15253636916082636, 0.1638994031216553, 0.15548511078561222, 0.15069181950772548, 0.15684859356227165, 0.1455948097301214, 0.16154893515375768, 0.1122896012768908, 0.11408848125850146, 0.11046108538693333, 0.1939495447647016, 0.18048786865077016, 0.17458171813111545, 0.16805652538684357, 0.17352249976542022, 0.17849166221156187, 0.17846300016551797, 0.2089646553390121, 0.18073394031664103, 0.1817670279238376, 0.19346593094790498, 0.1870943293612951, 0.050016787809069485, 0.04890377911872512, 0.050969956405236605, 0.05494930636031836, 0.05171107627457461, 0.043594132986987666, 0.050123900842999, 0.04504301267484989, 0.05578113745708646]}, "mutation_prompt": null}
{"id": "10b7a215-875e-4ae7-b4e6-12214b18ca16", "solution": "import numpy as np\n\nclass ImprovedHybridFireflyDE:\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta_min = beta_min\n        self.gamma = gamma\n        self.pop_size = pop_size\n\n    def chaotic_map(self, x):\n        return 3.9 * x * (1 - x)\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() + self.chaotic_map(pop[i])\n                trial = clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                mutant = de_mutate(x_r1, x_r2, x_r3)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedHybridFireflyDE", "description": "Improve exploration by incorporating a chaotic map for diverse search directions.", "configspace": "", "generation": 10, "fitness": 0.1053815834786958, "feedback": "The algorithm ImprovedHybridFireflyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.17.", "error": "", "parent_id": "f77e9655-6ae6-4430-9618-79001173ece6", "metadata": {"aucs": [0.1425479198979005, 0.14835824958985888, 0.15175595515475904, 0.179061566898031, 0.2111132200778555, 0.21250474000502018, 0.13784084393904938, 0.17274948167060633, 0.21668233062916775, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04056140211944981, 0.03389032196133135, 0.0316361710866877, 0.026462665534233043, 0.032642045853066515, 0.03533988758858286, 0.06674904947696647, 0.0357229289231773, 0.04963076465055205, 0.016672956742414535, 0.010046327168432567, 0.016015378505677802, 0.02321582778456499, 0.01857731289867548, 0.010214353576825541, 0.005617898459380322, 9.999999999998899e-05, 0.0141368372539038, 0.09189549181555579, 0.08787954729196101, 0.754047871788725, 0.9421647833828892, 0.9579707298286435, 0.9480311389310049, 0.9919855114713352, 0.9857494818450743, 0.9896217791911672, 9.999999999998899e-05, 0.05790721033276025, 0.02672660000321958, 9.999999999998899e-05, 0.00031549654350837564, 0.016458600757862984, 0.07134691750008282, 0.07484049655298641, 0.05474527831979337, 0.17113015060351788, 0.0927052582688328, 0.11733049540383889, 0.11178697313153985, 0.09887780350616626, 0.07764280548830016, 0.0916246822949055, 0.0839464356789289, 0.08087637094421629, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011183083981101127, 9.999999999998899e-05, 0.062110025082723896, 0.003555706672383696, 9.999999999998899e-05, 9.999999999998899e-05, 0.015472792474824026, 0.010446521047810298, 0.01766009836548532, 9.999999999998899e-05, 9.999999999998899e-05, 0.009882892729106585, 0.001232386353528625, 0.0002986092605379298, 0.018379866806301437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07116318802374555, 0.03605477017594916, 0.03656207497347164, 0.006995799249193246, 0.016575381327626926, 0.014715051016051084, 0.04904274028501876, 0.036714510119747135, 0.04174477210244765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008033825165343789, 9.999999999998899e-05, 0.011966711845305289, 0.18129158485109254, 0.16214489315065161, 0.2068607133427336, 0.1778659915820937, 0.1590778445677279, 0.15484775337785883, 0.1688020681051765, 0.20085578215543232, 0.19973242376784672, 0.021948749791046107, 0.03762833173128344, 0.02790207407827605, 0.04262045381102797, 0.02786675740821143, 0.033651981170028766, 0.041293765126528936, 0.05174368486888414, 0.04468903827686266, 0.12861309010345956, 0.13729365796408655, 0.12987516035550162, 0.11335768684926584, 0.12318891924303765, 0.1266819888881051, 0.12200686472186717, 0.12186296597048096, 0.12174268467236582, 0.13866875725233696, 0.1382727708659457, 0.13484841374133716, 0.15874671427145737, 0.15391397836834675, 0.14144235417556106, 0.14339732957938955, 0.17377774300845283, 0.154319504782773, 0.06581153143040896, 0.08094932364935015, 0.09886261459359558, 0.10369562198953486, 0.09429089666394119, 0.11580798133517123, 0.08883110588910981, 0.10199520805504492, 0.08991404349932786, 0.1786786833762819, 0.15784504354895756, 0.14917000177549766, 0.15653179621521462, 0.1514354840605765, 0.15600598611078198, 0.1347064051062674, 0.12751504087797294, 0.15384668262839873, 0.13228321041582147, 0.08735612923717184, 0.14785882150574703, 0.12123829492597049, 0.05541824727034328, 0.1209198646533085, 0.08048769062117567, 0.13353159717227392, 0.07748337903095381, 0.15383039644679863, 0.16390957626011682, 0.13618416610648254, 0.12637294193788107, 0.1439193883051192, 0.10650011642669577, 0.1323677780407585, 0.14674757885186518, 0.1041481659740251, 0.1628518947834382, 0.1417156229331935, 0.12752879460085753, 0.16110432900508076, 0.31944889428900836, 0.14270901837968308, 0.1576157747964989, 0.1902587105293334, 0.13597897006037551, 0.1732906230693808, 0.17312286398263654, 0.16902545175808759, 0.17931932671195205, 0.16558970472877388, 0.1798308156823354, 0.18094710624974197, 0.18127826506483113, 0.17382098958183212, 0.036891487421897406, 0.030272811724552207, 0.04838243114865859, 0.048151142269803326, 0.03246977603819978, 0.034731407215686017, 0.05372117805978782, 0.04018078982663609, 0.051318201723859036]}, "mutation_prompt": null}
{"id": "99593549-91c7-451a-8d06-c6e45fec5711", "solution": "import numpy as np\n\nclass HybridFireflyDE:\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta_min = beta_min\n        self.gamma = gamma\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                mutant = de_mutate(x_r1, x_r2, x_r3)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "HybridFireflyDE", "description": "Hybrid Firefly Algorithm with Differential Evolution Strategy for Black Box Optimization; Integrating global search exploration of firefly algorithm with local search exploitation of differential evolution", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f77e9655-6ae6-4430-9618-79001173ece6", "metadata": {"aucs": [0.1706806706263455, 0.20982903570136013, 0.1808004183625025, 0.2187132311954305, 0.23299886371620793, 0.21518866479121124, 0.21982506185010975, 0.20313164540774586, 0.20498595815324672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058847135887658775, 0.048356603316981106, 0.0613445302326352, 0.057706667007290546, 0.06038823594370968, 0.052925884897469744, 0.04842821344722548, 0.04602980809682955, 0.04792154449198627, 0.02128437595891841, 0.031464132781662046, 0.02670728494843133, 0.022049814849862015, 0.028385234299568074, 0.023970581490599385, 0.01610256441726121, 0.020518383227653203, 0.033041375977722276, 0.9624050395457955, 0.9697003945763114, 0.9664403663016383, 0.9140183053189224, 0.9560565069040278, 0.9747285324400811, 0.9588637694272298, 0.9844370083722936, 0.9638989126882023, 0.08555310115832848, 0.06032467627838489, 0.08130938611723704, 0.09333475240380817, 0.07637531984338641, 0.11826669417256253, 0.06853637185375538, 0.0846733424131757, 0.08671258808894222, 0.1122027249844183, 0.11492373607951267, 0.11822673986171395, 0.14120545868096868, 0.14578262312744283, 0.15244712063095045, 0.1451681801272322, 0.1455921684536492, 0.12785733994958315, 9.999999999998899e-05, 9.999999999998899e-05, 0.009045269114352439, 0.0058361737420845605, 0.00023225009266714114, 0.010068769035783354, 0.02011386918512359, 0.023183769420225153, 0.010259365605384874, 0.005971131992701717, 0.017598360755945786, 0.015501366427991714, 0.008019193323734908, 9.999999999998899e-05, 9.999999999998899e-05, 0.018207514362074684, 0.006189595883945742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05210542723273337, 0.05041414996954352, 0.052565604366617835, 0.0461178518431552, 0.06044205855670193, 0.022883944357079966, 0.03315680484695527, 0.027123331205806456, 0.04273943863537899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015743417806818316, 0.002015886218921348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011881637401399359, 0.0018823794761728685, 0.012559378433985358, 0.240744801529178, 0.19195867148563361, 0.19271876491580164, 0.2044689014762454, 0.19813276651724787, 0.19567705862933815, 0.18519454470766572, 0.21921565458832215, 0.1942994623372558, 0.06568043591196293, 0.06020961128600777, 0.06184206489442878, 0.05588662521313237, 0.0460959260221071, 0.045873952692970676, 0.03706005472268281, 0.05064771065130258, 0.044993266138474985, 0.12882783989397228, 0.11841707001505197, 0.12884901770431934, 0.13243587802063683, 0.13677459080242804, 0.11874074238989307, 0.13680272616340206, 0.15909540790207954, 0.11141059372890616, 0.16608927968834908, 0.1641666643180042, 0.16052096861249043, 0.16239296858208085, 0.1662553761241714, 0.1569539812196291, 0.1734030855368195, 0.17706476411338468, 0.17822737770446562, 0.11603886084008519, 0.10335426482560839, 0.10960997039067821, 0.09434617128833178, 0.10249927624262145, 0.09805947054370301, 0.1217801685166533, 0.10685390980492482, 0.11805186186713235, 0.15924777679643798, 0.1635730376019383, 0.14776817852086255, 0.15298542709671237, 0.1553996626287597, 0.15638223736443124, 0.15097477852149588, 0.15268459670986234, 0.14849166501866107, 0.1693312807763414, 0.14505915964414595, 0.14892748588499927, 0.14921357659151635, 0.15252947860506194, 0.1489222769873504, 0.14915942888706868, 0.1561204213923404, 0.14545921295376263, 0.1529842628606386, 0.13727730416738793, 0.1318528424390628, 0.1365151508916902, 0.14476004159004896, 0.15253636916082636, 0.1638994031216553, 0.15548511078561222, 0.15069181950772548, 0.15684859356227165, 0.1455948097301214, 0.16154893515375768, 0.1122896012768908, 0.11408848125850146, 0.11046108538693333, 0.1939495447647016, 0.18048786865077016, 0.17458171813111545, 0.16805652538684357, 0.17352249976542022, 0.17849166221156187, 0.17846300016551797, 0.2089646553390121, 0.18073394031664103, 0.1817670279238376, 0.19346593094790498, 0.1870943293612951, 0.050016787809069485, 0.04890377911872512, 0.050969956405236605, 0.05494930636031836, 0.05171107627457461, 0.043594132986987666, 0.050123900842999, 0.04504301267484989, 0.05578113745708646]}, "mutation_prompt": null}
{"id": "17548d2b-c45f-4f90-8ea0-f71100c5dcae", "solution": "import numpy as np\n\nclass ImprovedHybridFireflyDE:\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta_min = beta_min\n        self.gamma = gamma\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def opposition_based(x):\n            return -x\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n                \n                trial_opposite = opposition_based(trial)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                mutant = de_mutate(x_r1, x_r2, x_r3)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial) and func(mutant) < func(trial_opposite):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                elif func(trial_opposite) < func(trial):\n                    new_pop.append(trial_opposite)\n                    budget_used += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedHybridFireflyDE", "description": "Introducing opposition-based learning to improve solution quality by considering opposite solutions during the optimization process.", "configspace": "", "generation": 12, "fitness": 0.12033855420315194, "feedback": "The algorithm ImprovedHybridFireflyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "f77e9655-6ae6-4430-9618-79001173ece6", "metadata": {"aucs": [0.19095711028538775, 0.17270688693938296, 0.16979020175731707, 0.19908058716632682, 0.20846029575488223, 0.20982809766128907, 0.20024785555826707, 0.17710636676440494, 0.21534781043133566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036023370542663025, 0.0575911543683606, 0.043969257076569734, 0.060458596712426704, 0.04510389008080218, 0.050987002377274604, 0.04052781389972404, 0.040552232515894904, 0.05682157995083503, 0.025325085344687026, 0.017032427379519488, 0.024754652871507243, 0.02442234308568736, 0.02003636515364704, 0.018350062409521195, 0.019662193831778807, 0.034675597145125914, 0.015010297161975883, 0.937949767487574, 0.9589774716692507, 0.812732735129277, 0.8740033497104086, 0.9254024196909894, 0.9369111612705454, 0.9314603413170733, 0.9735381723474472, 0.940293326404338, 0.0613932456588574, 0.07047885500787054, 0.05524805054196713, 0.05907344431993011, 0.04107182438387458, 0.08011313983949697, 0.08119574702375632, 0.07033513058413643, 0.07226793621336869, 0.12132640226125235, 0.1212364631337306, 0.11274303527676988, 0.12633581155440043, 0.11952259287919098, 0.140264639173746, 0.12312498748199596, 0.11366544066999029, 0.1308266695151844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001268555506502289, 0.0077998347550701785, 0.0007669900859779144, 0.05199120526010903, 0.04102390503289299, 0.013789403905272613, 0.009756157128282372, 0.008526821768053527, 0.03844527784969998, 0.0014195735760927919, 0.001869819302408704, 0.014349753288439904, 0.003443498398145839, 9.999999999998899e-05, 0.005934446259683646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04333886747176929, 0.060454751868863954, 0.04964270525335901, 0.008010508758814483, 0.08168578887658573, 0.0419255964271138, 0.08935516707502322, 0.03898226985278419, 0.04560803934720403, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018457360928066158, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027709391849084497, 0.0001503091536989576, 0.0018756684273605329, 0.18227804100279732, 0.21467848892895058, 0.19007390683997916, 0.18279586016555316, 0.2035491823529384, 0.20210366292251747, 0.17619335857178597, 0.17785094834209558, 0.1813402959807462, 0.06078634090599522, 0.07068082628629058, 0.056485206186627335, 0.04165501015806672, 0.03606157215783312, 0.0373871136844065, 0.04087128681981522, 0.042207465349314965, 0.04832323743927158, 0.14062084823681142, 0.13386837927276374, 0.11982590573454621, 0.14711936663231318, 0.13389383694842893, 0.11589122385510453, 0.11496996707683937, 0.16040804511888052, 0.13127361292366424, 0.1671583468731791, 0.14567815745141566, 0.1575559938829696, 0.15728997678695777, 0.15338721889976137, 0.163021816244469, 0.16575603948713669, 0.17377774300845283, 0.15574695924325133, 0.10629193867940134, 0.10341070897884874, 0.1249246190880473, 0.09141655341237698, 0.09915965299082852, 0.10918306166783909, 0.10812146483956475, 0.0989735892715744, 0.10434159533504916, 0.1645720993731189, 0.14743851825833876, 0.15652979904510644, 0.13601580631010568, 0.14128811594208524, 0.14058862487841872, 0.14124908631332622, 0.15726056998706883, 0.1430883582092658, 0.12179528548918128, 0.1548293085322623, 0.14081207903656634, 0.1379127263640887, 0.1325641668513825, 0.13850480076806548, 0.1433781275175221, 0.13491635966646298, 0.1451126353315505, 0.157933285289925, 0.1565153612017799, 0.14843723407416842, 0.14578977052288677, 0.1609352420990282, 0.1485346435800382, 0.1617337820164284, 0.14418688817521375, 0.12548169926144415, 0.13162644025376125, 0.1251281762561688, 0.11997286047418043, 0.10447762605359256, 0.17628959810674028, 0.12375833160678817, 0.1687174043938443, 0.14992796560957, 0.1596376120751205, 0.17265384000590944, 0.16711304415619255, 0.17786587477137017, 0.1777022432481623, 0.16386911040854124, 0.17907411581988475, 0.17862339921206316, 0.17476247622550523, 0.19728566200260322, 0.06133401788584236, 0.04757765367773881, 0.04525052671646701, 0.053698494137510155, 0.03913857694617451, 0.04437510737621175, 0.044121536566805286, 0.04992863197906339, 0.05086007226951739]}, "mutation_prompt": null}
{"id": "df417317-017a-4fa6-838f-8b172c5b2f4b", "solution": "import numpy as np\n\nclass EnhancedHybridFireflyDE:\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta_min = beta_min\n        self.gamma = gamma\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                mutant = de_mutate(x_r1, x_r2, x_r3)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n            \n            if self.budget - budget_used <= self.pop_size:\n                pop = np.vstack((pop, np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))))\n                fitness = [func(ind) for ind in pop]\n                best_idx = np.argmin(fitness)\n                best_sol = pop[best_idx]\n                budget_used += self.pop_size\n                \n        return best_sol", "name": "EnhancedHybridFireflyDE", "description": "Enhancing diversity through adaptive population size control.", "configspace": "", "generation": 13, "fitness": 0.125969508289228, "feedback": "The algorithm EnhancedHybridFireflyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "f77e9655-6ae6-4430-9618-79001173ece6", "metadata": {"aucs": [0.1706806706263455, 0.20982903570136013, 0.1808004183625025, 0.2187132311954305, 0.23299886371620793, 0.21518866479121124, 0.21982506185010975, 0.20313164540774586, 0.20498595815324672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058847135887658775, 0.048356603316981106, 0.0613445302326352, 0.057706667007290546, 0.06038823594370968, 0.052925884897469744, 0.04842821344722548, 0.04602980809682955, 0.04792154449198627, 0.02128437595891841, 0.031464132781662046, 0.02670728494843133, 0.022049814849862015, 0.028385234299568074, 0.023970581490599385, 0.01610256441726121, 0.020518383227653203, 0.033041375977722276, 0.9624050395457955, 0.9697003945763114, 0.9664403663016383, 0.9140183053189224, 0.9560565069040278, 0.9747285324400811, 0.9588637694272298, 0.9844370083722936, 0.9638989126882023, 0.08555310115832848, 0.06032467627838489, 0.08130938611723704, 0.09333475240380817, 0.07637531984338641, 0.11826669417256253, 0.06853637185375538, 0.0846733424131757, 0.08671258808894222, 0.1122027249844183, 0.11492373607951267, 0.11822673986171395, 0.14120545868096868, 0.14578262312744283, 0.15244712063095045, 0.1451681801272322, 0.1455921684536492, 0.12785733994958315, 9.999999999998899e-05, 9.999999999998899e-05, 0.009045269114352439, 0.0058361737420845605, 0.00023225009266714114, 0.010068769035783354, 0.02011386918512359, 0.023183769420225153, 0.010259365605384874, 0.005971131992701717, 0.017598360755945786, 0.015501366427991714, 0.008019193323734908, 9.999999999998899e-05, 9.999999999998899e-05, 0.018207514362074684, 0.006189595883945742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05210542723273337, 0.05041414996954352, 0.052565604366617835, 0.0461178518431552, 0.06044205855670193, 0.022883944357079966, 0.03315680484695527, 0.027123331205806456, 0.04273943863537899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015743417806818316, 0.002015886218921348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011881637401399359, 0.0018823794761728685, 0.012559378433985358, 0.240744801529178, 0.19195867148563361, 0.19271876491580164, 0.2044689014762454, 0.19813276651724787, 0.19567705862933815, 0.18519454470766572, 0.21921565458832215, 0.1942994623372558, 0.06568043591196293, 0.06020961128600777, 0.06184206489442878, 0.05588662521313237, 0.0460959260221071, 0.045873952692970676, 0.03706005472268281, 0.05064771065130258, 0.044993266138474985, 0.12882783989397228, 0.11841707001505197, 0.12884901770431934, 0.13243587802063683, 0.13677459080242804, 0.11874074238989307, 0.13680272616340206, 0.15909540790207954, 0.11141059372890616, 0.16608927968834908, 0.1641666643180042, 0.16052096861249043, 0.16239296858208085, 0.1662553761241714, 0.1569539812196291, 0.1734030855368195, 0.17706476411338468, 0.17822737770446562, 0.11603886084008519, 0.10335426482560839, 0.10960997039067821, 0.09434617128833178, 0.10249927624262145, 0.09805947054370301, 0.1217801685166533, 0.10685390980492482, 0.11805186186713235, 0.15924777679643798, 0.1635730376019383, 0.14776817852086255, 0.15298542709671237, 0.1553996626287597, 0.15638223736443124, 0.15097477852149588, 0.15268459670986234, 0.14849166501866107, 0.1693312807763414, 0.14505915964414595, 0.14892748588499927, 0.14921357659151635, 0.15252947860506194, 0.1489222769873504, 0.14915942888706868, 0.1561204213923404, 0.14545921295376263, 0.1529842628606386, 0.13727730416738793, 0.1318528424390628, 0.1365151508916902, 0.14476004159004896, 0.15253636916082636, 0.1638994031216553, 0.15548511078561222, 0.15069181950772548, 0.15684859356227165, 0.1455948097301214, 0.16154893515375768, 0.1122896012768908, 0.11408848125850146, 0.11046108538693333, 0.1939495447647016, 0.18048786865077016, 0.17458171813111545, 0.16805652538684357, 0.17352249976542022, 0.17849166221156187, 0.17846300016551797, 0.2089646553390121, 0.18073394031664103, 0.1817670279238376, 0.19346593094790498, 0.1870943293612951, 0.050016787809069485, 0.04890377911872512, 0.050969956405236605, 0.05494930636031836, 0.05171107627457461, 0.043594132986987666, 0.050123900842999, 0.04504301267484989, 0.05578113745708646]}, "mutation_prompt": null}
{"id": "c0b29eef-5c1d-4667-9008-6e814ec3ef80", "solution": "import numpy as np\n\nclass HybridFireflyDE:\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20):\n        self.budget = budget\n        self.dim = dim\n        self.alpha = alpha\n        self.beta_min = beta_min\n        self.gamma = gamma\n        self.pop_size = pop_size\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                mutant = de_mutate(x_r1, x_r2, x_r3)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "HybridFireflyDE", "description": "Hybrid Firefly Algorithm with Differential Evolution Strategy for Black Box Optimization; Integrating global search exploration of firefly algorithm with local search exploitation of differential evolution", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f77e9655-6ae6-4430-9618-79001173ece6", "metadata": {"aucs": [0.1706806706263455, 0.20982903570136013, 0.1808004183625025, 0.2187132311954305, 0.23299886371620793, 0.21518866479121124, 0.21982506185010975, 0.20313164540774586, 0.20498595815324672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.058847135887658775, 0.048356603316981106, 0.0613445302326352, 0.057706667007290546, 0.06038823594370968, 0.052925884897469744, 0.04842821344722548, 0.04602980809682955, 0.04792154449198627, 0.02128437595891841, 0.031464132781662046, 0.02670728494843133, 0.022049814849862015, 0.028385234299568074, 0.023970581490599385, 0.01610256441726121, 0.020518383227653203, 0.033041375977722276, 0.9624050395457955, 0.9697003945763114, 0.9664403663016383, 0.9140183053189224, 0.9560565069040278, 0.9747285324400811, 0.9588637694272298, 0.9844370083722936, 0.9638989126882023, 0.08555310115832848, 0.06032467627838489, 0.08130938611723704, 0.09333475240380817, 0.07637531984338641, 0.11826669417256253, 0.06853637185375538, 0.0846733424131757, 0.08671258808894222, 0.1122027249844183, 0.11492373607951267, 0.11822673986171395, 0.14120545868096868, 0.14578262312744283, 0.15244712063095045, 0.1451681801272322, 0.1455921684536492, 0.12785733994958315, 9.999999999998899e-05, 9.999999999998899e-05, 0.009045269114352439, 0.0058361737420845605, 0.00023225009266714114, 0.010068769035783354, 0.02011386918512359, 0.023183769420225153, 0.010259365605384874, 0.005971131992701717, 0.017598360755945786, 0.015501366427991714, 0.008019193323734908, 9.999999999998899e-05, 9.999999999998899e-05, 0.018207514362074684, 0.006189595883945742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05210542723273337, 0.05041414996954352, 0.052565604366617835, 0.0461178518431552, 0.06044205855670193, 0.022883944357079966, 0.03315680484695527, 0.027123331205806456, 0.04273943863537899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0015743417806818316, 0.002015886218921348, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011881637401399359, 0.0018823794761728685, 0.012559378433985358, 0.240744801529178, 0.19195867148563361, 0.19271876491580164, 0.2044689014762454, 0.19813276651724787, 0.19567705862933815, 0.18519454470766572, 0.21921565458832215, 0.1942994623372558, 0.06568043591196293, 0.06020961128600777, 0.06184206489442878, 0.05588662521313237, 0.0460959260221071, 0.045873952692970676, 0.03706005472268281, 0.05064771065130258, 0.044993266138474985, 0.12882783989397228, 0.11841707001505197, 0.12884901770431934, 0.13243587802063683, 0.13677459080242804, 0.11874074238989307, 0.13680272616340206, 0.15909540790207954, 0.11141059372890616, 0.16608927968834908, 0.1641666643180042, 0.16052096861249043, 0.16239296858208085, 0.1662553761241714, 0.1569539812196291, 0.1734030855368195, 0.17706476411338468, 0.17822737770446562, 0.11603886084008519, 0.10335426482560839, 0.10960997039067821, 0.09434617128833178, 0.10249927624262145, 0.09805947054370301, 0.1217801685166533, 0.10685390980492482, 0.11805186186713235, 0.15924777679643798, 0.1635730376019383, 0.14776817852086255, 0.15298542709671237, 0.1553996626287597, 0.15638223736443124, 0.15097477852149588, 0.15268459670986234, 0.14849166501866107, 0.1693312807763414, 0.14505915964414595, 0.14892748588499927, 0.14921357659151635, 0.15252947860506194, 0.1489222769873504, 0.14915942888706868, 0.1561204213923404, 0.14545921295376263, 0.1529842628606386, 0.13727730416738793, 0.1318528424390628, 0.1365151508916902, 0.14476004159004896, 0.15253636916082636, 0.1638994031216553, 0.15548511078561222, 0.15069181950772548, 0.15684859356227165, 0.1455948097301214, 0.16154893515375768, 0.1122896012768908, 0.11408848125850146, 0.11046108538693333, 0.1939495447647016, 0.18048786865077016, 0.17458171813111545, 0.16805652538684357, 0.17352249976542022, 0.17849166221156187, 0.17846300016551797, 0.2089646553390121, 0.18073394031664103, 0.1817670279238376, 0.19346593094790498, 0.1870943293612951, 0.050016787809069485, 0.04890377911872512, 0.050969956405236605, 0.05494930636031836, 0.05171107627457461, 0.043594132986987666, 0.050123900842999, 0.04504301267484989, 0.05578113745708646]}, "mutation_prompt": null}
{"id": "42f1d718-f2bd-410c-8038-442c3a770893", "solution": "import numpy as np\n\nclass EnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n                if adapt_count >= 10:  # Adaptive mutation strategy update\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n                    \n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "EnhancedHybridFireflyDE", "description": "Enhancing diversity in the population through adaptive mutation strategy.", "configspace": "", "generation": 15, "fitness": 0.12698000539253462, "feedback": "The algorithm EnhancedHybridFireflyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "f77e9655-6ae6-4430-9618-79001173ece6", "metadata": {"aucs": [0.17917747743683898, 0.18965142501693977, 0.19572403606103062, 0.25666752843683893, 0.2191434606824636, 0.22250416550163732, 0.20748917211556117, 0.19301149029641085, 0.20745607928967968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100679217208126, 0.048222148706930756, 0.04542179494935339, 0.046420499210297006, 0.051560428802894576, 0.0493192208222859, 0.04757645309849179, 0.04484300931597973, 0.05614744769392965, 0.03769195335516884, 0.03012893136054573, 0.02564161310654567, 0.02539714833087514, 0.01485434698604371, 0.024852867181386684, 0.02440521879429236, 0.01999744194195263, 0.027468917520642067, 0.9733180713414964, 0.9433449722100002, 0.9449958828436081, 0.9661694666894903, 0.9250550302490792, 0.959542058557347, 0.9643541109679267, 0.958573497597322, 0.9444795108074746, 0.0738886783857301, 0.07348718976060697, 0.0853184308655156, 0.06785882266075571, 0.06759425528340834, 0.0735117995570248, 0.08373338463016422, 0.08932644230141906, 0.11750662285317681, 0.11888211333469811, 0.09965707332674467, 0.12145192107031799, 0.16892574462679044, 0.12600471077436537, 0.12399226668595342, 0.1500723148525478, 0.1347975288354053, 0.1398582765790527, 0.0024471937071424144, 9.999999999998899e-05, 9.999999999998899e-05, 0.023106821924749776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006115359312049984, 0.011679035669832638, 0.011829826662067, 0.01796322007053386, 0.007384321569400498, 0.02286662824012453, 9.999999999998899e-05, 9.999999999998899e-05, 0.009823763108111061, 9.999999999998899e-05, 0.01904501936042924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05343740127215246, 0.03514598746143294, 0.061042416838278823, 0.061522046646483086, 0.037688795904207706, 0.0693433840750638, 0.02878055287467074, 0.06322349857232057, 0.03427258055837734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018546084269352447, 9.999999999998899e-05, 9.999999999998899e-05, 0.00524229725042058, 0.006239660759150278, 9.999999999998899e-05, 0.01124340349262165, 0.19629153318711945, 0.1954810635663372, 0.2015693105844938, 0.2119972299044336, 0.24097472328486125, 0.2013517693331358, 0.19433122368007305, 0.20369095636127998, 0.19672463603550094, 0.07032292455213696, 0.06681306846794521, 0.0626436972675588, 0.05413597561447536, 0.06799662779376614, 0.04732076219303638, 0.061045612583145115, 0.052012497285358616, 0.054920252562312255, 0.14041258191197992, 0.11496316808280294, 0.12556541302226254, 0.13162417472588728, 0.1335174772792419, 0.13061577197312546, 0.12670923861642003, 0.13674183207533575, 0.12590036461568366, 0.15427072155749988, 0.16182558672783998, 0.17128119877428793, 0.1517487625623235, 0.14924688351536408, 0.17398593675823992, 0.16118953410317716, 0.17554604625453107, 0.15916507055526619, 0.10231896080838054, 0.09667242176118729, 0.09959450520219182, 0.12039032851536868, 0.1210700346829493, 0.11635015171938923, 0.13971974209299565, 0.11521397149626134, 0.11602082148961723, 0.17972310877155473, 0.15694231380496948, 0.1474187466806578, 0.16575786065380904, 0.15681765820717464, 0.16509942191535976, 0.16349874655954755, 0.14461592303090942, 0.16416441019473893, 0.14595259640567004, 0.11651419488686965, 0.1465965431863504, 0.1350881002746841, 0.16274211390447946, 0.140347430811392, 0.14009609946128476, 0.1299165790275547, 0.14614181821175465, 0.1370647464370095, 0.22561590442776747, 0.13030395298711195, 0.1524702086604417, 0.13474369064113656, 0.15293757488063098, 0.15995232993492658, 0.11589544689746167, 0.15178687312813144, 0.13611360698079766, 0.15006066492158665, 0.14130839103196702, 0.13593289019827204, 0.16653563297727036, 0.3417646137971847, 0.17412884169066778, 0.15442069232689226, 0.17497736808625775, 0.19134409179619571, 0.17911580914215774, 0.17317254780050584, 0.1931794055121615, 0.17531071114611385, 0.1752265338938218, 0.16463222268788502, 0.1825273241687443, 0.19670757296034724, 0.05920185906815312, 0.04536595982987601, 0.05940979702104776, 0.04903048064180637, 0.04474926712387883, 0.04782637279583213, 0.05350575318352291, 0.04829000058852395, 0.05488324886255358]}, "mutation_prompt": null}
{"id": "562f1abd-4411-423d-b4c6-fe3c6df1ffce", "solution": "import numpy as np\n\nclass ChaoticEnhancedHybridFireflyDE(EnhancedHybridFireflyDE):\n    def levy_flight(self):\n        chaos_map = lambda x: 3.9 * x * (1 - x)  # Logistic chaotic map\n        step = np.zeros(self.dim)\n        x = np.random.rand(self.dim)\n        for _ in range(self.dim):\n            x = chaos_map(x)\n            step[_] = 10 * (x - 0.5)  # Scale chaotic value to search space\n        return step\n\n    def __call__(self, func):\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + self.levy_flight()\n                trial = self.clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = self.de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = self.clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n                if adapt_count >= 10:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n                    \n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ChaoticEnhancedHybridFireflyDE", "description": "Introducing chaotic dynamics to enhance population diversity and exploration capability.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('setting an array element with a sequence.').", "error": "ValueError('setting an array element with a sequence.')", "parent_id": "42f1d718-f2bd-410c-8038-442c3a770893", "metadata": {}, "mutation_prompt": null}
{"id": "a99dda51-3ca8-468d-baf7-5d81647349aa", "solution": "import numpy as np\n\nclass EnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n                if adapt_count >= 10:  # Adaptive mutation strategy update\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n                    \n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "EnhancedHybridFireflyDE", "description": "Enhancing diversity in the population through adaptive mutation strategy.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "42f1d718-f2bd-410c-8038-442c3a770893", "metadata": {"aucs": [0.17917747743683898, 0.18965142501693977, 0.19572403606103062, 0.25666752843683893, 0.2191434606824636, 0.22250416550163732, 0.20748917211556117, 0.19301149029641085, 0.20745607928967968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100679217208126, 0.048222148706930756, 0.04542179494935339, 0.046420499210297006, 0.051560428802894576, 0.0493192208222859, 0.04757645309849179, 0.04484300931597973, 0.05614744769392965, 0.03769195335516884, 0.03012893136054573, 0.02564161310654567, 0.02539714833087514, 0.01485434698604371, 0.024852867181386684, 0.02440521879429236, 0.01999744194195263, 0.027468917520642067, 0.9733180713414964, 0.9433449722100002, 0.9449958828436081, 0.9661694666894903, 0.9250550302490792, 0.959542058557347, 0.9643541109679267, 0.958573497597322, 0.9444795108074746, 0.0738886783857301, 0.07348718976060697, 0.0853184308655156, 0.06785882266075571, 0.06759425528340834, 0.0735117995570248, 0.08373338463016422, 0.08932644230141906, 0.11750662285317681, 0.11888211333469811, 0.09965707332674467, 0.12145192107031799, 0.16892574462679044, 0.12600471077436537, 0.12399226668595342, 0.1500723148525478, 0.1347975288354053, 0.1398582765790527, 0.0024471937071424144, 9.999999999998899e-05, 9.999999999998899e-05, 0.023106821924749776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006115359312049984, 0.011679035669832638, 0.011829826662067, 0.01796322007053386, 0.007384321569400498, 0.02286662824012453, 9.999999999998899e-05, 9.999999999998899e-05, 0.009823763108111061, 9.999999999998899e-05, 0.01904501936042924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05343740127215246, 0.03514598746143294, 0.061042416838278823, 0.061522046646483086, 0.037688795904207706, 0.0693433840750638, 0.02878055287467074, 0.06322349857232057, 0.03427258055837734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018546084269352447, 9.999999999998899e-05, 9.999999999998899e-05, 0.00524229725042058, 0.006239660759150278, 9.999999999998899e-05, 0.01124340349262165, 0.19629153318711945, 0.1954810635663372, 0.2015693105844938, 0.2119972299044336, 0.24097472328486125, 0.2013517693331358, 0.19433122368007305, 0.20369095636127998, 0.19672463603550094, 0.07032292455213696, 0.06681306846794521, 0.0626436972675588, 0.05413597561447536, 0.06799662779376614, 0.04732076219303638, 0.061045612583145115, 0.052012497285358616, 0.054920252562312255, 0.14041258191197992, 0.11496316808280294, 0.12556541302226254, 0.13162417472588728, 0.1335174772792419, 0.13061577197312546, 0.12670923861642003, 0.13674183207533575, 0.12590036461568366, 0.15427072155749988, 0.16182558672783998, 0.17128119877428793, 0.1517487625623235, 0.14924688351536408, 0.17398593675823992, 0.16118953410317716, 0.17554604625453107, 0.15916507055526619, 0.10231896080838054, 0.09667242176118729, 0.09959450520219182, 0.12039032851536868, 0.1210700346829493, 0.11635015171938923, 0.13971974209299565, 0.11521397149626134, 0.11602082148961723, 0.17972310877155473, 0.15694231380496948, 0.1474187466806578, 0.16575786065380904, 0.15681765820717464, 0.16509942191535976, 0.16349874655954755, 0.14461592303090942, 0.16416441019473893, 0.14595259640567004, 0.11651419488686965, 0.1465965431863504, 0.1350881002746841, 0.16274211390447946, 0.140347430811392, 0.14009609946128476, 0.1299165790275547, 0.14614181821175465, 0.1370647464370095, 0.22561590442776747, 0.13030395298711195, 0.1524702086604417, 0.13474369064113656, 0.15293757488063098, 0.15995232993492658, 0.11589544689746167, 0.15178687312813144, 0.13611360698079766, 0.15006066492158665, 0.14130839103196702, 0.13593289019827204, 0.16653563297727036, 0.3417646137971847, 0.17412884169066778, 0.15442069232689226, 0.17497736808625775, 0.19134409179619571, 0.17911580914215774, 0.17317254780050584, 0.1931794055121615, 0.17531071114611385, 0.1752265338938218, 0.16463222268788502, 0.1825273241687443, 0.19670757296034724, 0.05920185906815312, 0.04536595982987601, 0.05940979702104776, 0.04903048064180637, 0.04474926712387883, 0.04782637279583213, 0.05350575318352291, 0.04829000058852395, 0.05488324886255358]}, "mutation_prompt": null}
{"id": "f79d2e4b-63d7-45db-9e65-cdd2db0669cf", "solution": "import numpy as np\n\nclass EnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n                if adapt_count >= 10:  # Adaptive mutation strategy update\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n                    \n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "EnhancedHybridFireflyDE", "description": "Enhancing diversity in the population through adaptive mutation strategy.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "42f1d718-f2bd-410c-8038-442c3a770893", "metadata": {"aucs": [0.17917747743683898, 0.18965142501693977, 0.19572403606103062, 0.25666752843683893, 0.2191434606824636, 0.22250416550163732, 0.20748917211556117, 0.19301149029641085, 0.20745607928967968, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100679217208126, 0.048222148706930756, 0.04542179494935339, 0.046420499210297006, 0.051560428802894576, 0.0493192208222859, 0.04757645309849179, 0.04484300931597973, 0.05614744769392965, 0.03769195335516884, 0.03012893136054573, 0.02564161310654567, 0.02539714833087514, 0.01485434698604371, 0.024852867181386684, 0.02440521879429236, 0.01999744194195263, 0.027468917520642067, 0.9733180713414964, 0.9433449722100002, 0.9449958828436081, 0.9661694666894903, 0.9250550302490792, 0.959542058557347, 0.9643541109679267, 0.958573497597322, 0.9444795108074746, 0.0738886783857301, 0.07348718976060697, 0.0853184308655156, 0.06785882266075571, 0.06759425528340834, 0.0735117995570248, 0.08373338463016422, 0.08932644230141906, 0.11750662285317681, 0.11888211333469811, 0.09965707332674467, 0.12145192107031799, 0.16892574462679044, 0.12600471077436537, 0.12399226668595342, 0.1500723148525478, 0.1347975288354053, 0.1398582765790527, 0.0024471937071424144, 9.999999999998899e-05, 9.999999999998899e-05, 0.023106821924749776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006115359312049984, 0.011679035669832638, 0.011829826662067, 0.01796322007053386, 0.007384321569400498, 0.02286662824012453, 9.999999999998899e-05, 9.999999999998899e-05, 0.009823763108111061, 9.999999999998899e-05, 0.01904501936042924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05343740127215246, 0.03514598746143294, 0.061042416838278823, 0.061522046646483086, 0.037688795904207706, 0.0693433840750638, 0.02878055287467074, 0.06322349857232057, 0.03427258055837734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018546084269352447, 9.999999999998899e-05, 9.999999999998899e-05, 0.00524229725042058, 0.006239660759150278, 9.999999999998899e-05, 0.01124340349262165, 0.19629153318711945, 0.1954810635663372, 0.2015693105844938, 0.2119972299044336, 0.24097472328486125, 0.2013517693331358, 0.19433122368007305, 0.20369095636127998, 0.19672463603550094, 0.07032292455213696, 0.06681306846794521, 0.0626436972675588, 0.05413597561447536, 0.06799662779376614, 0.04732076219303638, 0.061045612583145115, 0.052012497285358616, 0.054920252562312255, 0.14041258191197992, 0.11496316808280294, 0.12556541302226254, 0.13162417472588728, 0.1335174772792419, 0.13061577197312546, 0.12670923861642003, 0.13674183207533575, 0.12590036461568366, 0.15427072155749988, 0.16182558672783998, 0.17128119877428793, 0.1517487625623235, 0.14924688351536408, 0.17398593675823992, 0.16118953410317716, 0.17554604625453107, 0.15916507055526619, 0.10231896080838054, 0.09667242176118729, 0.09959450520219182, 0.12039032851536868, 0.1210700346829493, 0.11635015171938923, 0.13971974209299565, 0.11521397149626134, 0.11602082148961723, 0.17972310877155473, 0.15694231380496948, 0.1474187466806578, 0.16575786065380904, 0.15681765820717464, 0.16509942191535976, 0.16349874655954755, 0.14461592303090942, 0.16416441019473893, 0.14595259640567004, 0.11651419488686965, 0.1465965431863504, 0.1350881002746841, 0.16274211390447946, 0.140347430811392, 0.14009609946128476, 0.1299165790275547, 0.14614181821175465, 0.1370647464370095, 0.22561590442776747, 0.13030395298711195, 0.1524702086604417, 0.13474369064113656, 0.15293757488063098, 0.15995232993492658, 0.11589544689746167, 0.15178687312813144, 0.13611360698079766, 0.15006066492158665, 0.14130839103196702, 0.13593289019827204, 0.16653563297727036, 0.3417646137971847, 0.17412884169066778, 0.15442069232689226, 0.17497736808625775, 0.19134409179619571, 0.17911580914215774, 0.17317254780050584, 0.1931794055121615, 0.17531071114611385, 0.1752265338938218, 0.16463222268788502, 0.1825273241687443, 0.19670757296034724, 0.05920185906815312, 0.04536595982987601, 0.05940979702104776, 0.04903048064180637, 0.04474926712387883, 0.04782637279583213, 0.05350575318352291, 0.04829000058852395, 0.05488324886255358]}, "mutation_prompt": null}
{"id": "f07a9efc-b9b5-4ecc-aa73-5d91381013ac", "solution": "import numpy as np\n\nclass ImprovedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        adapt_threshold = 20\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n                if adapt_count >= adapt_threshold:  # Adaptive mutation strategy update\n                    self.adapt_rate *= 0.85\n                    adapt_threshold += 10\n                    adapt_count = 0\n                    \n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedHybridFireflyDE", "description": "Improved diversity in the population through adaptive mutation and differential evolution for enhanced exploration and exploitation.", "configspace": "", "generation": 19, "fitness": 0.12892787567836936, "feedback": "The algorithm ImprovedHybridFireflyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "42f1d718-f2bd-410c-8038-442c3a770893", "metadata": {"aucs": [0.20466533541282972, 0.16312974590860652, 0.22300539221675597, 0.22240867429505629, 0.21493760466584977, 0.1984733246622371, 0.22637544209074068, 0.2250821674241683, 0.18159475095509892, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04764386500223772, 0.045099923617123894, 0.0575609514841382, 0.056893416215583636, 0.06305288035496703, 0.0622014952543023, 0.045731797698659316, 0.05444219259942329, 0.04887062776734563, 0.024501535131605134, 0.02604403738912353, 0.025713349835906008, 0.0278451284055371, 0.02765661649093798, 0.02694355025193651, 0.036773018499305365, 0.030082188911773278, 0.02178957130641157, 0.9733180713414964, 0.9433767995854422, 0.9449977513056711, 0.9745384437725115, 0.9183953164555513, 0.9595202044092996, 0.964357692595117, 0.9593105776018171, 0.9444463455539926, 0.0669355761948569, 0.08589555366538626, 0.06085754987629366, 0.07188871911265537, 0.05021416028207226, 0.08533580183070821, 0.09139112748317235, 0.08250741908208625, 0.07951546210321392, 0.14321881186000318, 0.13038085142805467, 0.11567777659345446, 0.16892574462679044, 0.1241423517649588, 0.15011941872923085, 0.14658019323231364, 0.16724689258787928, 0.12877753481998078, 0.019599515228053477, 9.999999999998899e-05, 0.008062020951591364, 0.017849963551157866, 9.999999999998899e-05, 0.03721768287867311, 0.003454232545746394, 0.004540700841906609, 0.011607752798356685, 0.01861039095531103, 0.03444561339252672, 0.01646112778584574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010645469605648161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05870204495545017, 0.07602836838410909, 0.06524947660505409, 0.058654125138671076, 0.022962492135507273, 0.039658305975762254, 0.03204724293379457, 0.05434084826009311, 0.0539915246750341, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00023675505483677917, 0.00397426824931113, 0.012389340792142822, 9.999999999998899e-05, 0.01888543540692389, 0.003143629085367916, 0.017792543157554963, 0.0031159083208769367, 0.25129571845286636, 0.1988370725261832, 0.2147095113685884, 0.2198386859222472, 0.21325352938932296, 0.19929583570372977, 0.18152209798259167, 0.19999810068274904, 0.18723741072408395, 0.058004023159851426, 0.07513210523406522, 0.078335127341423, 0.05240720327334125, 0.06429717381075495, 0.047563272549575264, 0.08461778393300723, 0.06036683667094789, 0.054692691002681926, 0.13949911594173914, 0.15126152908687784, 0.12802934207353478, 0.1331015999727253, 0.12664349674156872, 0.14337868155343314, 0.12720152558099906, 0.1156691884942258, 0.12031565002032185, 0.1620218555202957, 0.1680573432299327, 0.1685639067739858, 0.15204417904054313, 0.16523649518695582, 0.16283961578569106, 0.1887412360158751, 0.17377774300845283, 0.16218602222730982, 0.11386123056532937, 0.11710631927057036, 0.11107330908746316, 0.09697530990554237, 0.10706222505744845, 0.10548800492415156, 0.11791432475830821, 0.10954118531848, 0.11450281159594977, 0.14436161835133354, 0.17292352206340422, 0.15919872384596978, 0.15800240333208182, 0.1622126165949872, 0.15449708301185006, 0.1924893584976316, 0.16096176116083027, 0.20642471256961337, 0.1528512234303191, 0.12165042601121456, 0.14347976068517887, 0.13853333533364587, 0.1393961952050511, 0.12957860446611613, 0.15074685551236855, 0.13267987062832165, 0.14292032591347925, 0.13217879129500765, 0.22561590442776747, 0.1348309005876439, 0.13376212162764134, 0.13798713827457088, 0.15803527026428965, 0.15301288513823785, 0.20627362090183765, 0.20247489828498977, 0.1504405526849436, 0.15842194480909966, 0.14176880833058203, 0.12556824184238868, 0.13141151068698598, 0.33454849920642604, 0.1678143116043631, 0.16967581833088097, 0.17913751689433866, 0.17731919325938028, 0.1725146744659214, 0.17758403565180414, 0.17578867673621934, 0.1763186813870019, 0.18895467886191486, 0.1800159337908832, 0.1781428428526015, 0.17742581940023883, 0.0622312781822042, 0.054536613829451186, 0.04678254880258337, 0.06313770229114868, 0.046389666500540105, 0.04667507535595794, 0.05352082620356635, 0.06586954739906892, 0.048191281879201076]}, "mutation_prompt": null}
{"id": "6b9660f0-f4e4-4d36-a505-01d2bc1a58f5", "solution": "import numpy as np\n\nclass ImprovedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        adapt_threshold = 20\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n                if adapt_count >= adapt_threshold:  # Adaptive mutation strategy update\n                    self.adapt_rate *= 0.85\n                    adapt_threshold += 10\n                    adapt_count = 0\n                    \n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedHybridFireflyDE", "description": "Improved diversity in the population through adaptive mutation and differential evolution for enhanced exploration and exploitation.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f07a9efc-b9b5-4ecc-aa73-5d91381013ac", "metadata": {"aucs": [0.20466533541282972, 0.16312974590860652, 0.22300539221675597, 0.22240867429505629, 0.21493760466584977, 0.1984733246622371, 0.22637544209074068, 0.2250821674241683, 0.18159475095509892, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04764386500223772, 0.045099923617123894, 0.0575609514841382, 0.056893416215583636, 0.06305288035496703, 0.0622014952543023, 0.045731797698659316, 0.05444219259942329, 0.04887062776734563, 0.024501535131605134, 0.02604403738912353, 0.025713349835906008, 0.0278451284055371, 0.02765661649093798, 0.02694355025193651, 0.036773018499305365, 0.030082188911773278, 0.02178957130641157, 0.9733180713414964, 0.9433767995854422, 0.9449977513056711, 0.9745384437725115, 0.9183953164555513, 0.9595202044092996, 0.964357692595117, 0.9593105776018171, 0.9444463455539926, 0.0669355761948569, 0.08589555366538626, 0.06085754987629366, 0.07188871911265537, 0.05021416028207226, 0.08533580183070821, 0.09139112748317235, 0.08250741908208625, 0.07951546210321392, 0.14321881186000318, 0.13038085142805467, 0.11567777659345446, 0.16892574462679044, 0.1241423517649588, 0.15011941872923085, 0.14658019323231364, 0.16724689258787928, 0.12877753481998078, 0.019599515228053477, 9.999999999998899e-05, 0.008062020951591364, 0.017849963551157866, 9.999999999998899e-05, 0.03721768287867311, 0.003454232545746394, 0.004540700841906609, 0.011607752798356685, 0.01861039095531103, 0.03444561339252672, 0.01646112778584574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010645469605648161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05870204495545017, 0.07602836838410909, 0.06524947660505409, 0.058654125138671076, 0.022962492135507273, 0.039658305975762254, 0.03204724293379457, 0.05434084826009311, 0.0539915246750341, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00023675505483677917, 0.00397426824931113, 0.012389340792142822, 9.999999999998899e-05, 0.01888543540692389, 0.003143629085367916, 0.017792543157554963, 0.0031159083208769367, 0.25129571845286636, 0.1988370725261832, 0.2147095113685884, 0.2198386859222472, 0.21325352938932296, 0.19929583570372977, 0.18152209798259167, 0.19999810068274904, 0.18723741072408395, 0.058004023159851426, 0.07513210523406522, 0.078335127341423, 0.05240720327334125, 0.06429717381075495, 0.047563272549575264, 0.08461778393300723, 0.06036683667094789, 0.054692691002681926, 0.13949911594173914, 0.15126152908687784, 0.12802934207353478, 0.1331015999727253, 0.12664349674156872, 0.14337868155343314, 0.12720152558099906, 0.1156691884942258, 0.12031565002032185, 0.1620218555202957, 0.1680573432299327, 0.1685639067739858, 0.15204417904054313, 0.16523649518695582, 0.16283961578569106, 0.1887412360158751, 0.17377774300845283, 0.16218602222730982, 0.11386123056532937, 0.11710631927057036, 0.11107330908746316, 0.09697530990554237, 0.10706222505744845, 0.10548800492415156, 0.11791432475830821, 0.10954118531848, 0.11450281159594977, 0.14436161835133354, 0.17292352206340422, 0.15919872384596978, 0.15800240333208182, 0.1622126165949872, 0.15449708301185006, 0.1924893584976316, 0.16096176116083027, 0.20642471256961337, 0.1528512234303191, 0.12165042601121456, 0.14347976068517887, 0.13853333533364587, 0.1393961952050511, 0.12957860446611613, 0.15074685551236855, 0.13267987062832165, 0.14292032591347925, 0.13217879129500765, 0.22561590442776747, 0.1348309005876439, 0.13376212162764134, 0.13798713827457088, 0.15803527026428965, 0.15301288513823785, 0.20627362090183765, 0.20247489828498977, 0.1504405526849436, 0.15842194480909966, 0.14176880833058203, 0.12556824184238868, 0.13141151068698598, 0.33454849920642604, 0.1678143116043631, 0.16967581833088097, 0.17913751689433866, 0.17731919325938028, 0.1725146744659214, 0.17758403565180414, 0.17578867673621934, 0.1763186813870019, 0.18895467886191486, 0.1800159337908832, 0.1781428428526015, 0.17742581940023883, 0.0622312781822042, 0.054536613829451186, 0.04678254880258337, 0.06313770229114868, 0.046389666500540105, 0.04667507535595794, 0.05352082620356635, 0.06586954739906892, 0.048191281879201076]}, "mutation_prompt": null}
{"id": "0c25f2b9-71dc-413b-b59e-553d044d86c7", "solution": "import numpy as np\n\nclass ImprovedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        adapt_threshold = 20\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n                if adapt_count >= adapt_threshold:  # Adaptive mutation strategy update\n                    self.adapt_rate *= 0.85\n                    adapt_threshold += 10\n                    adapt_count = 0\n                    \n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedHybridFireflyDE", "description": "Improved diversity in the population through adaptive mutation and differential evolution for enhanced exploration and exploitation.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f07a9efc-b9b5-4ecc-aa73-5d91381013ac", "metadata": {"aucs": [0.20466533541282972, 0.16312974590860652, 0.22300539221675597, 0.22240867429505629, 0.21493760466584977, 0.1984733246622371, 0.22637544209074068, 0.2250821674241683, 0.18159475095509892, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04764386500223772, 0.045099923617123894, 0.0575609514841382, 0.056893416215583636, 0.06305288035496703, 0.0622014952543023, 0.045731797698659316, 0.05444219259942329, 0.04887062776734563, 0.024501535131605134, 0.02604403738912353, 0.025713349835906008, 0.0278451284055371, 0.02765661649093798, 0.02694355025193651, 0.036773018499305365, 0.030082188911773278, 0.02178957130641157, 0.9733180713414964, 0.9433767995854422, 0.9449977513056711, 0.9745384437725115, 0.9183953164555513, 0.9595202044092996, 0.964357692595117, 0.9593105776018171, 0.9444463455539926, 0.0669355761948569, 0.08589555366538626, 0.06085754987629366, 0.07188871911265537, 0.05021416028207226, 0.08533580183070821, 0.09139112748317235, 0.08250741908208625, 0.07951546210321392, 0.14321881186000318, 0.13038085142805467, 0.11567777659345446, 0.16892574462679044, 0.1241423517649588, 0.15011941872923085, 0.14658019323231364, 0.16724689258787928, 0.12877753481998078, 0.019599515228053477, 9.999999999998899e-05, 0.008062020951591364, 0.017849963551157866, 9.999999999998899e-05, 0.03721768287867311, 0.003454232545746394, 0.004540700841906609, 0.011607752798356685, 0.01861039095531103, 0.03444561339252672, 0.01646112778584574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010645469605648161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05870204495545017, 0.07602836838410909, 0.06524947660505409, 0.058654125138671076, 0.022962492135507273, 0.039658305975762254, 0.03204724293379457, 0.05434084826009311, 0.0539915246750341, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00023675505483677917, 0.00397426824931113, 0.012389340792142822, 9.999999999998899e-05, 0.01888543540692389, 0.003143629085367916, 0.017792543157554963, 0.0031159083208769367, 0.25129571845286636, 0.1988370725261832, 0.2147095113685884, 0.2198386859222472, 0.21325352938932296, 0.19929583570372977, 0.18152209798259167, 0.19999810068274904, 0.18723741072408395, 0.058004023159851426, 0.07513210523406522, 0.078335127341423, 0.05240720327334125, 0.06429717381075495, 0.047563272549575264, 0.08461778393300723, 0.06036683667094789, 0.054692691002681926, 0.13949911594173914, 0.15126152908687784, 0.12802934207353478, 0.1331015999727253, 0.12664349674156872, 0.14337868155343314, 0.12720152558099906, 0.1156691884942258, 0.12031565002032185, 0.1620218555202957, 0.1680573432299327, 0.1685639067739858, 0.15204417904054313, 0.16523649518695582, 0.16283961578569106, 0.1887412360158751, 0.17377774300845283, 0.16218602222730982, 0.11386123056532937, 0.11710631927057036, 0.11107330908746316, 0.09697530990554237, 0.10706222505744845, 0.10548800492415156, 0.11791432475830821, 0.10954118531848, 0.11450281159594977, 0.14436161835133354, 0.17292352206340422, 0.15919872384596978, 0.15800240333208182, 0.1622126165949872, 0.15449708301185006, 0.1924893584976316, 0.16096176116083027, 0.20642471256961337, 0.1528512234303191, 0.12165042601121456, 0.14347976068517887, 0.13853333533364587, 0.1393961952050511, 0.12957860446611613, 0.15074685551236855, 0.13267987062832165, 0.14292032591347925, 0.13217879129500765, 0.22561590442776747, 0.1348309005876439, 0.13376212162764134, 0.13798713827457088, 0.15803527026428965, 0.15301288513823785, 0.20627362090183765, 0.20247489828498977, 0.1504405526849436, 0.15842194480909966, 0.14176880833058203, 0.12556824184238868, 0.13141151068698598, 0.33454849920642604, 0.1678143116043631, 0.16967581833088097, 0.17913751689433866, 0.17731919325938028, 0.1725146744659214, 0.17758403565180414, 0.17578867673621934, 0.1763186813870019, 0.18895467886191486, 0.1800159337908832, 0.1781428428526015, 0.17742581940023883, 0.0622312781822042, 0.054536613829451186, 0.04678254880258337, 0.06313770229114868, 0.046389666500540105, 0.04667507535595794, 0.05352082620356635, 0.06586954739906892, 0.048191281879201076]}, "mutation_prompt": null}
{"id": "e30e264f-a1be-4e3f-a4e5-a6f0175a70e5", "solution": "import numpy as np\n\nclass ImprovedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        adapt_threshold = 20\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n                if adapt_count >= adapt_threshold:  # Adaptive mutation strategy update\n                    self.adapt_rate *= 0.85\n                    adapt_threshold += 10\n                    adapt_count = 0\n                    \n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedHybridFireflyDE", "description": "Improved diversity in the population through adaptive mutation and differential evolution for enhanced exploration and exploitation.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f07a9efc-b9b5-4ecc-aa73-5d91381013ac", "metadata": {"aucs": [0.20466533541282972, 0.16312974590860652, 0.22300539221675597, 0.22240867429505629, 0.21493760466584977, 0.1984733246622371, 0.22637544209074068, 0.2250821674241683, 0.18159475095509892, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04764386500223772, 0.045099923617123894, 0.0575609514841382, 0.056893416215583636, 0.06305288035496703, 0.0622014952543023, 0.045731797698659316, 0.05444219259942329, 0.04887062776734563, 0.024501535131605134, 0.02604403738912353, 0.025713349835906008, 0.0278451284055371, 0.02765661649093798, 0.02694355025193651, 0.036773018499305365, 0.030082188911773278, 0.02178957130641157, 0.9733180713414964, 0.9433767995854422, 0.9449977513056711, 0.9745384437725115, 0.9183953164555513, 0.9595202044092996, 0.964357692595117, 0.9593105776018171, 0.9444463455539926, 0.0669355761948569, 0.08589555366538626, 0.06085754987629366, 0.07188871911265537, 0.05021416028207226, 0.08533580183070821, 0.09139112748317235, 0.08250741908208625, 0.07951546210321392, 0.14321881186000318, 0.13038085142805467, 0.11567777659345446, 0.16892574462679044, 0.1241423517649588, 0.15011941872923085, 0.14658019323231364, 0.16724689258787928, 0.12877753481998078, 0.019599515228053477, 9.999999999998899e-05, 0.008062020951591364, 0.017849963551157866, 9.999999999998899e-05, 0.03721768287867311, 0.003454232545746394, 0.004540700841906609, 0.011607752798356685, 0.01861039095531103, 0.03444561339252672, 0.01646112778584574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010645469605648161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05870204495545017, 0.07602836838410909, 0.06524947660505409, 0.058654125138671076, 0.022962492135507273, 0.039658305975762254, 0.03204724293379457, 0.05434084826009311, 0.0539915246750341, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00023675505483677917, 0.00397426824931113, 0.012389340792142822, 9.999999999998899e-05, 0.01888543540692389, 0.003143629085367916, 0.017792543157554963, 0.0031159083208769367, 0.25129571845286636, 0.1988370725261832, 0.2147095113685884, 0.2198386859222472, 0.21325352938932296, 0.19929583570372977, 0.18152209798259167, 0.19999810068274904, 0.18723741072408395, 0.058004023159851426, 0.07513210523406522, 0.078335127341423, 0.05240720327334125, 0.06429717381075495, 0.047563272549575264, 0.08461778393300723, 0.06036683667094789, 0.054692691002681926, 0.13949911594173914, 0.15126152908687784, 0.12802934207353478, 0.1331015999727253, 0.12664349674156872, 0.14337868155343314, 0.12720152558099906, 0.1156691884942258, 0.12031565002032185, 0.1620218555202957, 0.1680573432299327, 0.1685639067739858, 0.15204417904054313, 0.16523649518695582, 0.16283961578569106, 0.1887412360158751, 0.17377774300845283, 0.16218602222730982, 0.11386123056532937, 0.11710631927057036, 0.11107330908746316, 0.09697530990554237, 0.10706222505744845, 0.10548800492415156, 0.11791432475830821, 0.10954118531848, 0.11450281159594977, 0.14436161835133354, 0.17292352206340422, 0.15919872384596978, 0.15800240333208182, 0.1622126165949872, 0.15449708301185006, 0.1924893584976316, 0.16096176116083027, 0.20642471256961337, 0.1528512234303191, 0.12165042601121456, 0.14347976068517887, 0.13853333533364587, 0.1393961952050511, 0.12957860446611613, 0.15074685551236855, 0.13267987062832165, 0.14292032591347925, 0.13217879129500765, 0.22561590442776747, 0.1348309005876439, 0.13376212162764134, 0.13798713827457088, 0.15803527026428965, 0.15301288513823785, 0.20627362090183765, 0.20247489828498977, 0.1504405526849436, 0.15842194480909966, 0.14176880833058203, 0.12556824184238868, 0.13141151068698598, 0.33454849920642604, 0.1678143116043631, 0.16967581833088097, 0.17913751689433866, 0.17731919325938028, 0.1725146744659214, 0.17758403565180414, 0.17578867673621934, 0.1763186813870019, 0.18895467886191486, 0.1800159337908832, 0.1781428428526015, 0.17742581940023883, 0.0622312781822042, 0.054536613829451186, 0.04678254880258337, 0.06313770229114868, 0.046389666500540105, 0.04667507535595794, 0.05352082620356635, 0.06586954739906892, 0.048191281879201076]}, "mutation_prompt": null}
{"id": "f939029b-d2de-458a-8d93-d7e466747da2", "solution": "class ImprovedHybridFireflyDE(LocalSearchHybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1, search_radius=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size, adapt_rate, search_radius)\n\n    def __call__(self, func):\n        # Same as before with the addition of local search strategy\n        \n        while budget_used < self.budget:\n            for i in range(self.pop_size):\n                # Existing code for firefly algorithm\n                # Local search strategy\n                local_search = clipToBounds(pop[i] + np.random.uniform(-self.search_radius, self.search_radius, self.dim))\n                \n                if func(local_search) < func(pop[i]):\n                    pop[i] = local_search\n                    budget_used += 1\n\n                if budget_used >= self.budget:\n                    break\n\n        return pop[np.argmin([func(ind) for ind in pop])]", "name": "ImprovedHybridFireflyDE", "description": "Improved hybrid algorithm that incorporates a local search strategy to enhance exploitation capability in the optimization process.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'LocalSearchHybridFireflyDE' is not defined\").", "error": "NameError(\"name 'LocalSearchHybridFireflyDE' is not defined\")", "parent_id": "f07a9efc-b9b5-4ecc-aa73-5d91381013ac", "metadata": {}, "mutation_prompt": null}
{"id": "0a50b302-9ead-40f8-aadc-a4b037e55d6a", "solution": "import numpy as np\n\nclass ImprovedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        adapt_threshold = 20\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n                if adapt_count >= adapt_threshold:  # Adaptive mutation strategy update\n                    self.adapt_rate *= 0.85\n                    adapt_threshold += 10\n                    adapt_count = 0\n                    \n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedHybridFireflyDE", "description": "Improved diversity in the population through adaptive mutation and differential evolution for enhanced exploration and exploitation.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "f07a9efc-b9b5-4ecc-aa73-5d91381013ac", "metadata": {"aucs": [0.20466533541282972, 0.16312974590860652, 0.22300539221675597, 0.22240867429505629, 0.21493760466584977, 0.1984733246622371, 0.22637544209074068, 0.2250821674241683, 0.18159475095509892, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04764386500223772, 0.045099923617123894, 0.0575609514841382, 0.056893416215583636, 0.06305288035496703, 0.0622014952543023, 0.045731797698659316, 0.05444219259942329, 0.04887062776734563, 0.024501535131605134, 0.02604403738912353, 0.025713349835906008, 0.0278451284055371, 0.02765661649093798, 0.02694355025193651, 0.036773018499305365, 0.030082188911773278, 0.02178957130641157, 0.9733180713414964, 0.9433767995854422, 0.9449977513056711, 0.9745384437725115, 0.9183953164555513, 0.9595202044092996, 0.964357692595117, 0.9593105776018171, 0.9444463455539926, 0.0669355761948569, 0.08589555366538626, 0.06085754987629366, 0.07188871911265537, 0.05021416028207226, 0.08533580183070821, 0.09139112748317235, 0.08250741908208625, 0.07951546210321392, 0.14321881186000318, 0.13038085142805467, 0.11567777659345446, 0.16892574462679044, 0.1241423517649588, 0.15011941872923085, 0.14658019323231364, 0.16724689258787928, 0.12877753481998078, 0.019599515228053477, 9.999999999998899e-05, 0.008062020951591364, 0.017849963551157866, 9.999999999998899e-05, 0.03721768287867311, 0.003454232545746394, 0.004540700841906609, 0.011607752798356685, 0.01861039095531103, 0.03444561339252672, 0.01646112778584574, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010645469605648161, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05870204495545017, 0.07602836838410909, 0.06524947660505409, 0.058654125138671076, 0.022962492135507273, 0.039658305975762254, 0.03204724293379457, 0.05434084826009311, 0.0539915246750341, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00023675505483677917, 0.00397426824931113, 0.012389340792142822, 9.999999999998899e-05, 0.01888543540692389, 0.003143629085367916, 0.017792543157554963, 0.0031159083208769367, 0.25129571845286636, 0.1988370725261832, 0.2147095113685884, 0.2198386859222472, 0.21325352938932296, 0.19929583570372977, 0.18152209798259167, 0.19999810068274904, 0.18723741072408395, 0.058004023159851426, 0.07513210523406522, 0.078335127341423, 0.05240720327334125, 0.06429717381075495, 0.047563272549575264, 0.08461778393300723, 0.06036683667094789, 0.054692691002681926, 0.13949911594173914, 0.15126152908687784, 0.12802934207353478, 0.1331015999727253, 0.12664349674156872, 0.14337868155343314, 0.12720152558099906, 0.1156691884942258, 0.12031565002032185, 0.1620218555202957, 0.1680573432299327, 0.1685639067739858, 0.15204417904054313, 0.16523649518695582, 0.16283961578569106, 0.1887412360158751, 0.17377774300845283, 0.16218602222730982, 0.11386123056532937, 0.11710631927057036, 0.11107330908746316, 0.09697530990554237, 0.10706222505744845, 0.10548800492415156, 0.11791432475830821, 0.10954118531848, 0.11450281159594977, 0.14436161835133354, 0.17292352206340422, 0.15919872384596978, 0.15800240333208182, 0.1622126165949872, 0.15449708301185006, 0.1924893584976316, 0.16096176116083027, 0.20642471256961337, 0.1528512234303191, 0.12165042601121456, 0.14347976068517887, 0.13853333533364587, 0.1393961952050511, 0.12957860446611613, 0.15074685551236855, 0.13267987062832165, 0.14292032591347925, 0.13217879129500765, 0.22561590442776747, 0.1348309005876439, 0.13376212162764134, 0.13798713827457088, 0.15803527026428965, 0.15301288513823785, 0.20627362090183765, 0.20247489828498977, 0.1504405526849436, 0.15842194480909966, 0.14176880833058203, 0.12556824184238868, 0.13141151068698598, 0.33454849920642604, 0.1678143116043631, 0.16967581833088097, 0.17913751689433866, 0.17731919325938028, 0.1725146744659214, 0.17758403565180414, 0.17578867673621934, 0.1763186813870019, 0.18895467886191486, 0.1800159337908832, 0.1781428428526015, 0.17742581940023883, 0.0622312781822042, 0.054536613829451186, 0.04678254880258337, 0.06313770229114868, 0.046389666500540105, 0.04667507535595794, 0.05352082620356635, 0.06586954739906892, 0.048191281879201076]}, "mutation_prompt": null}
{"id": "67588dcb-5ce0-4afb-9c02-c45f00723b7f", "solution": "import numpy as np\n\nclass EnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.max_pop_size = pop_size * 2\n        self.min_pop_size = pop_size // 2\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        adapt_threshold = 20\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n                if adapt_count >= adapt_threshold:  # Adaptive mutation strategy update\n                    self.adapt_rate *= 0.85\n                    adapt_threshold += 10\n                    adapt_count = 0\n                    \n            if adapt_count > 10:  # Dynamic population size adjustment\n                self.pop_size = min(self.max_pop_size, self.pop_size + 1)\n                adapt_count = 0\n            elif adapt_count < 5 and self.pop_size > self.min_pop_size:\n                self.pop_size = max(self.min_pop_size, self.pop_size - 1)\n                adapt_count = 0\n                \n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "EnhancedHybridFireflyDE", "description": "Improved diversity in the population through adaptive mutation and differential evolution with enhanced adaptability, incorporating a dynamic population size adjustment mechanism.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 19 is out of bounds for axis 0 with size 19').", "error": "IndexError('index 19 is out of bounds for axis 0 with size 19')", "parent_id": "f07a9efc-b9b5-4ecc-aa73-5d91381013ac", "metadata": {}, "mutation_prompt": null}
{"id": "03c11b77-300b-4a21-a187-c44571da00ee", "solution": "import numpy as np\n\nclass AdaptiveHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        adapt_threshold = 20\n        dynamic_pop_threshold = 0.8\n        \n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = clipToBounds(attractor)\n                \n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n                \n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n                    \n                if adapt_count >= adapt_threshold:  # Adaptive mutation strategy update\n                    self.adapt_rate *= 0.85\n                    adapt_threshold += 10\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            if np.random.rand() < dynamic_pop_threshold:\n                pop = np.vstack((pop, np.random.uniform(-5.0, 5.0, (int(self.pop_size*0.2), self.dim)))\n                self.pop_size += int(self.pop_size * 0.2)\n\n        return best_sol", "name": "AdaptiveHybridFireflyDE", "description": "Improved diversity in the population through adaptive mutation and differential evolution with dynamic population size for enhanced exploration and exploitation.", "configspace": "", "generation": 26, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 64, 17, '                self.pop_size += int(self.pop_size * 0.2)\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 64, 17, '                self.pop_size += int(self.pop_size * 0.2)\\n'))", "parent_id": "f07a9efc-b9b5-4ecc-aa73-5d91381013ac", "metadata": {}, "mutation_prompt": null}
{"id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 27, "fitness": 0.1424026991688293, "feedback": "The algorithm ImprovedEnhancedHybridFireflyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "f07a9efc-b9b5-4ecc-aa73-5d91381013ac", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "1e319205-330a-41f9-a8e8-973781b7e634", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "deac6fb5-4bd1-40f0-bc9a-b0918dc7b902", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "e5ab3b46-9470-472b-b068-3a6aa10b4457", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "f9d380e0-f5da-487d-8555-0160db7bd1f1", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "cad95bed-ae25-420a-a9d8-130b67c8d956", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "d7e20e31-5be3-482e-a20a-e74db66c498c", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "f257e269-ac6f-4459-8ef3-9ac957aadb31", "solution": "def chaotic_map(x, chaos_param):\n    return 4 * x * (1 - x) * chaos_param\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1, chaos_adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n        self.chaos_adapt_rate = chaos_adapt_rate\n\n    def __call__(self, func):\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx], self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                    if adapt_count >= 15:\n                        self.adapt_rate *= 0.9\n                        self.chaos_param += np.random.normal(0, self.chaos_adapt_rate)\n                        adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Introduce a dynamic adaptation of the chaos parameter for enhanced exploration-exploitation balance.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'budget_used' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'budget_used' referenced before assignment\")", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {}, "mutation_prompt": null}
{"id": "423a8834-58bb-485c-a3ad-961661ef9e7b", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "0c990db8-a2d1-452f-8286-c9a7d0459870", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "650c6649-10c7-47ec-bdf6-bb7a1a36d641", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "9124b420-4d89-470b-9194-e4ee4fca1c84", "solution": "import numpy as np\n\nclass EnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1, adapt_threshold=15, adapt_decay=0.9):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.adapt_threshold = adapt_threshold\n        self.adapt_decay = adapt_decay\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= self.adapt_threshold:\n                    self.adapt_rate *= self.adapt_decay\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "EnhancedHybridFireflyDE", "description": "Enhanced HybridFireflyDE algorithm with improved adaptation rate update mechanism for dynamic parameter adjustment to enhance exploration-exploitation balance.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedHybridFireflyDE' object has no attribute 'chaos_param'\").", "error": "AttributeError(\"'EnhancedHybridFireflyDE' object has no attribute 'chaos_param'\")", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {}, "mutation_prompt": null}
{"id": "a047b37e-5592-426c-9c00-3bfe01532001", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "7f50b90b-0eb9-418a-8a70-8f51db3ee7a4", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "2af4e035-8533-4198-baaf-2ae2e1be8432", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "afc6c916-6322-40c8-8658-e7914d06703f", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "e9518b6f-d50d-4a89-973c-0696f9f0a7da", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "c0b44814-b3cc-46a7-803c-4bcceb50da8f", "solution": "import numpy as np\n\nclass CrowdingEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1, crowding_factor=0.2):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.crowding_factor = crowding_factor\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n\n        while budget_used < self.budget:\n            new_pop = []\n            crowding_dist = np.zeros(self.pop_size)\n\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][np.random.randint(self.dim)] * self.crowding_factor)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n                crowding_dist[i] = np.mean(np.linalg.norm(pop - pop[i], axis=1))\n\n            sorted_indices = np.argsort(crowding_dist)\n            pop = pop[sorted_indices]\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "CrowdingEnhancedHybridFireflyDE", "description": "Enhance the population diversity by incorporating a crowding-based selection mechanism to maintain a diverse set of solutions for better exploration.", "configspace": "", "generation": 44, "fitness": 0.11291161625112717, "feedback": "The algorithm CrowdingEnhancedHybridFireflyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.16.", "error": "", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.14971906112385314, 0.12952048324411136, 0.1786950549447185, 0.13995455594867523, 0.15337004894840844, 0.16823424736329184, 0.15542449860590335, 0.16304311085282353, 0.13298446120064378, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027040374689804025, 0.0431030668990241, 0.03648103142105941, 0.043997566324357695, 0.02974950144646704, 0.0368910914753795, 0.04097275816166235, 0.032401752378826476, 0.04128952690323917, 0.026049256344799487, 0.014863587119442134, 0.023304010646310602, 0.02915204984196973, 0.01794236836073959, 0.0286215914929131, 0.031401402179559, 0.015259797489691307, 0.017911896678708072, 0.7462478554878396, 0.8477504823183861, 0.9339238717944685, 0.948703258758963, 0.752541135617248, 0.9229744831557882, 0.9734060086822847, 0.5090951909744221, 0.7512885994103231, 0.10100600081484934, 0.07742476807127918, 0.047842376462961855, 0.05381975517026316, 0.07025905250483644, 0.054969647543599565, 0.061193118464349716, 0.04390242048216275, 0.05658260654143232, 0.13860523900238897, 0.12293671989668042, 0.1043323518116196, 0.13090303526988079, 0.09167788815061062, 0.12873037170814605, 0.11125776778644325, 0.14561206123475112, 0.10128614077230558, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003732442018157256, 9.999999999998899e-05, 0.0042291645676919565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006947251149331035, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010085038572239635, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007932258166790662, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046107149693596305, 0.04455551676978431, 0.04269164399052516, 0.03061080240992542, 0.02820697261579319, 0.0224667723717088, 0.08987590046781457, 0.04219854733160555, 0.04067398783233134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19112226977414237, 0.22841038838543082, 0.18939914424308468, 0.21224284617344025, 0.17294136982659147, 0.1724664759012352, 0.16808982472409462, 0.1920562783453983, 0.23197684991409573, 0.030350978358924308, 0.07665102205781549, 0.01898948717328164, 0.03643286963171455, 0.0420597109385471, 0.05007946611942404, 0.0397536313842215, 0.037494064656827364, 0.05627363824895926, 0.14283270767763712, 0.12696072133824987, 0.14270355615932007, 0.1502984484188712, 0.16267848210732394, 0.13031315930832843, 0.1407525424698124, 0.12105462351920449, 0.14195883479067428, 0.1526860881413853, 0.15848638475182453, 0.1383715964567822, 0.1634158782119859, 0.14845938218579702, 0.1503082920983192, 0.14329324315285408, 0.17827388018228518, 0.13260743382737838, 0.0854582113828255, 0.0912552219825491, 0.09333190096613342, 0.1096910321447413, 0.10659825100769171, 0.10549266632741505, 0.09338673180214008, 0.11280540068427203, 0.09328968673059812, 0.1572611141338328, 0.13982576401940638, 0.15057265309415901, 0.15372982858240414, 0.14219493770732383, 0.16440668089222832, 0.14452664480567223, 0.14983004308296133, 0.1579189468004275, 0.14165714013688468, 0.1105918546470892, 0.1554885033825012, 0.13310429326182838, 0.13424071765823387, 0.13716788821905157, 0.15218606243065624, 0.14994807572916158, 0.1038171397716704, 0.24341248849891284, 0.22303024927964132, 0.1390370443067288, 0.2283964397833349, 0.12697626564666387, 0.16134634587183339, 0.10584211123311527, 0.11937511583565097, 0.13955923463376152, 0.14474942543429026, 0.11212105405981687, 0.10029536763900504, 0.1494931468846995, 0.10859239197369441, 0.11171150650818185, 0.13499970114281645, 0.18695139122097104, 0.10559598010196547, 0.1835245448699483, 0.18132644008809662, 0.18596387327013697, 0.18061380619607548, 0.18334725561561105, 0.17003539762680142, 0.1956174059213318, 0.1795753661202234, 0.18000022867615184, 0.04924978219645382, 0.04404366384295422, 0.06370073726129344, 0.05088511461291256, 0.0706627448166306, 0.037288033972537105, 0.09186156162809622, 0.04723624475188004, 0.060103108916621406]}, "mutation_prompt": null}
{"id": "4ad1b0c7-00f4-43e0-ac08-18676f1b7b29", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "c08b92cf-3f13-4940-a951-74d299e4309e", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "d0daac19-e4ed-4e8c-b59d-0b6dbb3da265", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "f538df3b-8ed6-428d-979e-5eb07e1625a2", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "2c306b21-ac21-4792-a81a-46657e9d2ddb", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "bd5cc33b-7fa5-4073-aeb1-0d1a43ace343", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "a4aeae81-0975-4876-a294-fe0162d179b0", "solution": "import numpy as np\n\nclass DynamicSearchSpaceAdaptiveFireflyDE(ImprovedEnhancedHybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size, adapt_rate)\n        self.initial_search_range = 5.0\n\n    def __call__(self, func):\n        def adaptive_search_range(step):\n            return self.initial_search_range * np.exp(-step / self.budget)\n\n        def clipToBounds(x, search_range):\n            return np.clip(x, -search_range, search_range)\n\n        pop = np.random.uniform(-self.initial_search_range, self.initial_search_range, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                search_range = adaptive_search_range(budget_used)\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor, search_range)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant, search_range)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "DynamicSearchSpaceAdaptiveFireflyDE", "description": "Enhance exploration by introducing a dynamic search space adaptation mechanism to adaptively adjust the search range during optimization.", "configspace": "", "generation": 51, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'levy_flight' is not defined\").", "error": "NameError(\"name 'levy_flight' is not defined\")", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {}, "mutation_prompt": null}
{"id": "0d2f4d01-279c-491e-9bdb-f62e9e28d826", "solution": "import numpy as np\n\nclass ImprovedMergedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def merged_mutation(x_r1, x_r2, x_r3, F=0.5):\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (\n                        np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n\n            return x_r1 + F * (x_r2 - x_r3) + step\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + merged_mutation(pop[i], pop[np.random.choice(range(self.pop_size), 1)[0]], pop[np.random.choice(range(self.pop_size), 1)[0]])\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedMergedHybridFireflyDE", "description": "Improve exploration by incorporating a hybrid mutation strategy combining Levy flights and Cauchy distribution for enhanced diversity exploration.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'de_mutate' is not defined\").", "error": "NameError(\"name 'de_mutate' is not defined\")", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {}, "mutation_prompt": null}
{"id": "03ae3da1-0659-4c17-b8ea-e3fc4520111b", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "2e080360-c8fa-410c-a82e-17e5fb8b97dc", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "ac443e12-194e-4cd5-a915-4ee585f0e5bd", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "2f6a1dcf-b465-4ce4-be5b-69d19171fb18", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.mutation_factor = 0.5\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                \n                F = np.clip(self.mutation_factor + np.random.normal(0, self.adapt_rate), 0.1, 1.0)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    self.mutation_factor = np.clip(self.mutation_factor + np.random.normal(0, 0.05), 0.1, 1.0)\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Enhance adaptation mechanism by incorporating a self-adaptive control for both mutation and step size adjustments.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedEnhancedHybridFireflyDE' object has no attribute 'chaos_param'\").", "error": "AttributeError(\"'ImprovedEnhancedHybridFireflyDE' object has no attribute 'chaos_param'\")", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {}, "mutation_prompt": null}
{"id": "d5664a23-9eb1-46a1-b364-f8114c2425d0", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "643493b0-b649-4973-88ca-828d235d101e", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "d2cba6d6-8c28-4750-b006-aab59f6d8fc1", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "38734fc1-8921-472e-8c1a-21311014329f", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "58da865b-868a-4272-8329-f864a0b67c4d", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "a6961e75-6698-44af-b655-8ddf9c71e726", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "b2dc919e-d076-49ee-9a82-7ba01424dd29", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "cbd71211-cb5a-403b-a824-36587315b3f2", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def initialize_population(self):\n        opposites = np.full((self.pop_size, self.dim), -1.0) * np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        pop = np.vstack((np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim)), opposites))\n        return pop\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = self.initialize_population()\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Enhance the exploration capability by incorporating a novel opposition-based learning strategy for population initialization.", "configspace": "", "generation": 64, "fitness": 0.13875250688533697, "feedback": "The algorithm ImprovedEnhancedHybridFireflyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.2739929408290729, 0.19986067522905837, 0.21721025796391202, 0.2049334881005761, 0.2558039970966972, 0.2728142852350447, 0.2994261303812914, 0.1944625101601749, 0.1964353138994266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03446537844208597, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06609697900545619, 0.05783313495635489, 0.08178924132231113, 0.06167509450187858, 0.04395623584647379, 0.04887669924031379, 0.08395249961553308, 0.056591308326113365, 0.06795433087812819, 0.06363665168757093, 0.038280751172548144, 0.0347676743940456, 0.052142612993463455, 0.03382492152783434, 0.03379508363386652, 0.04540764259553831, 0.03977835393563123, 0.023961245796313757, 0.9768422925932363, 0.9795709052317424, 0.9669581963284967, 0.9871665947596753, 0.9618657900206833, 0.9002820780588716, 0.9728440516973733, 0.9786518120097456, 0.932776586429217, 0.07401706841327726, 0.07044592762025681, 0.08678793560389964, 0.042557461235136596, 0.07667583785003951, 0.0866930780262315, 0.09129099045922917, 0.10400316577171831, 0.07913780615728538, 0.167153268364301, 0.14841558112345554, 0.12492714323434317, 0.12633017727650364, 0.16209909285722846, 0.15870831871682223, 0.1503730138136783, 0.1500342543366432, 0.15391497742438154, 0.03270083465911433, 0.0027526881406835235, 0.05161584362027949, 0.07627056491644468, 0.025601954830946072, 0.018976503455945704, 0.06803613806467679, 0.05045656779836882, 0.002335499087925408, 0.036160047668357564, 0.01601449551062073, 0.08910430829347604, 0.06417459323119079, 0.07055923407888709, 0.05154133202326283, 0.034678583040275046, 0.027703929205775468, 0.026840438489939666, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03727556096991047, 0.04464198199850611, 0.05603662263246734, 0.03534818499549053, 0.026573029129379977, 0.08742496946801115, 0.04962714734760665, 0.08476639488339355, 0.05628168516286913, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010444136248092262, 0.0028664844922734467, 0.00643241489755797, 0.004245265769810658, 0.03389124814305722, 9.999999999998899e-05, 0.004546503776899802, 0.004066344553949386, 0.038792510016459336, 0.21555289166539726, 0.23515283649025664, 0.21963518274058713, 0.23834092944766094, 0.20477391027663427, 0.22345321755081737, 0.2166809868699059, 0.2432295682622937, 0.24956165426403376, 0.057631608796026246, 0.07342298605985453, 0.06351742477381828, 0.0563874590162361, 0.053559355810596565, 0.057515865720496384, 0.05461483212609253, 0.056740548746602504, 0.09023340118750489, 0.13932313626708714, 0.13117159906067843, 0.1435953637800399, 0.14698946455816764, 0.15333663847406243, 0.15274629640176718, 0.12326523973167858, 0.15142223097499896, 0.14475391104715363, 0.1874285715623779, 0.2024449212663475, 0.1890806198475814, 0.205549076352333, 0.17247497277531165, 0.16463828183446128, 0.20455662402728036, 0.18477697964876505, 0.17843738728270675, 0.12017498164237439, 0.12242194097539727, 0.13498692450044802, 0.12200010201908318, 0.12371418665688416, 0.14879777760380253, 0.13834502119872416, 0.13333795532898707, 0.12874664024397753, 0.17029521314248464, 0.16235475491048035, 0.16452335359349168, 0.16476424786579624, 0.18083442298305719, 0.15600463676943077, 0.16075474399686396, 0.16748311103275682, 0.15738270285936307, 0.15649690566404295, 0.16156676071467924, 0.15681998670795472, 0.1638172945144193, 0.16553409400821617, 0.15709336904856153, 0.15986526958933078, 0.159254541240612, 0.16340412724334308, 0.14366392341549195, 0.195126757181183, 0.14295785421841412, 0.14556417317992965, 0.2156550475018313, 0.16667499911399353, 0.1417502497036328, 0.15633616227733127, 0.1650077369768691, 0.18401593551214934, 0.16576506162025983, 0.15589768057517395, 0.16270994427261953, 0.1820257963624522, 0.13037148443677538, 0.1814165031269943, 0.1962472211659918, 0.13678804949623113, 0.18278733579432382, 0.18832456539398257, 0.17770436487101837, 0.1946377361157765, 0.18091394912081038, 0.17183331098559262, 0.1772144147329805, 0.16536277310914416, 0.20062287380184596, 0.06759850061904071, 0.0842115063101857, 0.05795338691353358, 0.05640082176769334, 0.05496989047985534, 0.07231440738887907, 0.049231301347748, 0.0565075419002804, 0.0608740235317804]}, "mutation_prompt": null}
{"id": "e554034b-bcff-4660-a053-1e5b4c8b609c", "solution": "import numpy as np\n\nclass EnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def cauchy_mutation(scale=0.1):\n            return np.random.standard_cauchy(self.dim) * scale\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + cauchy_mutation()\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "EnhancedHybridFireflyDE", "description": "Improve exploration by incorporating a novel self-adaptive mutation strategy based on Cauchy distribution.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'de_mutate' is not defined\").", "error": "NameError(\"name 'de_mutate' is not defined\")", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {}, "mutation_prompt": null}
{"id": "dd4d7999-6743-4dca-87ef-825c9caddde8", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "af40b11e-d4c9-4434-acb9-439f212bd81c", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "918d459a-329b-4279-8e61-04dd4ebe0375", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "056f836c-edba-4d72-bd46-2a0b5f1d9a1a", "solution": "class DynamicChaosEnhancedHybridFireflyDE(ImprovedEnhancedHybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1, chaos_adapt_rate=0.05):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size, adapt_rate)\n        self.chaos_adapt_rate = chaos_adapt_rate\n\n    def __call__(self, func):\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        chaos_param = 0.1  # Initial value\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * chaos_param)\n                trial = clipToBounds(attractor)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            if adapt_count >= 10:\n                chaos_param += self.chaos_adapt_rate\n                chaos_param = min(chaos_param, 1.0)\n                chaos_idx = np.random.randint(self.dim)\n\n        return best_sol", "name": "DynamicChaosEnhancedHybridFireflyDE", "description": "Enhancing the exploration capability by introducing a dynamic chaos parameter adaptation mechanism to better balance local and global search.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'budget_used' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'budget_used' referenced before assignment\")", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {}, "mutation_prompt": null}
{"id": "ef563f53-e5ab-4607-b848-90dd6497f14c", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "6fb06db8-21b7-4566-9c02-3742bb7c3ec2", "solution": "import numpy as np\n\nclass ChaosEnhancedHybridFireflyDE(ImprovedEnhancedHybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1, chaos_param=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size, adapt_rate)\n        self.chaos_param = chaos_param\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ChaosEnhancedHybridFireflyDE", "description": "Enhance exploration by incorporating a chaos-driven adaptive mutation mechanism to diversify the search process.", "configspace": "", "generation": 71, "fitness": 0.1424026991688293, "feedback": "The algorithm ChaosEnhancedHybridFireflyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "5dc0bd9f-222c-49b0-a3c1-d739949db83e", "solution": "import numpy as np\n\nclass EnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1, chaos_param=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = chaos_param\n\n    def __call__(self, func):\n        def adaptive_chaotic_map(x, success_rate):\n            return 4 * x * (1 - x) * (1 + 0.5 * success_rate)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * adaptive_chaotic_map(pop[i][chaos_idx], adapt_count/self.budget)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "EnhancedHybridFireflyDE", "description": "Enhance exploration by introducing a novel adaptive chaotic search mechanism that dynamically adjusts the chaos parameter based on local exploration success.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'levy_flight' is not defined\").", "error": "NameError(\"name 'levy_flight' is not defined\")", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {}, "mutation_prompt": null}
{"id": "eeee753b-8e2a-436b-abf6-f5a9239b1532", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "70b121ca-9e0d-46c2-a98c-c4620db2e531", "solution": "import numpy as np\n\nclass EnhancedHybridFireflyDE(ImprovedEnhancedHybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size, adapt_rate)\n\n    def __call__(self, func):\n        def cauchy_flight():\n            sigma = 0.1\n            v = np.random.standard_cauchy(self.dim)\n            step = sigma * v / np.abs(v)\n            return step\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param) + cauchy_flight()\n                trial = clipToBounds(attractor)\n\n                ...\n", "name": "EnhancedHybridFireflyDE", "description": "Enhance exploration by incorporating a hybrid mutation strategy using both Gaussian and Cauchy distributions for improved diversity and adaptability.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'budget_used' is not defined\").", "error": "NameError(\"name 'budget_used' is not defined\")", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {}, "mutation_prompt": null}
{"id": "a8b286ba-a525-4ecf-92b5-d89b203fecb1", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "1780db2f-1fde-4d41-a76f-8dc196325c99", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "7ef0f549-ca10-44ec-ba13-da423fe1c5e5", "solution": "import numpy as np\n\nclass EnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def adaptive_mutation(fitness, x_r1, x_r2, x_r3, F=0.5):\n            fitness_factor = np.mean(fitness) / (np.min(fitness) + 1e-8)\n            F *= 1 + fitness_factor\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = adaptive_mutation(fitness, x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "EnhancedHybridFireflyDE", "description": "Enhance the local search capability by incorporating a novel adaptive mutation strategy based on the individual's fitness.", "configspace": "", "generation": 77, "fitness": 0.12170521693318326, "feedback": "The algorithm EnhancedHybridFireflyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.18921730570965067, 0.1470043590289981, 0.19996449051352916, 0.17185746316925365, 0.2107793756720302, 0.16472429323653903, 0.19825254270629145, 0.18006982847285202, 0.2590954015412066, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046338265776150855, 0.0436833808593281, 0.04376655684456854, 0.04153753765683976, 0.031032530736479713, 0.047506670160181286, 0.0448717992597929, 0.024121344780470677, 0.05115526779037405, 0.044369050079569594, 0.023387254433861582, 0.04210335701082368, 0.024650872281391956, 0.013653999829877472, 0.03705931220006864, 0.03772921988630973, 0.023854174334238865, 0.030453661630412743, 0.9896340575687678, 0.9854640377654824, 0.9494019931023354, 0.9862213834393125, 0.9974197538897144, 0.9647802526320166, 0.9810533902454631, 0.9864075627831483, 0.9778691915253785, 0.051456012407991136, 0.03822847424459741, 0.0403990743281778, 0.010217157218033734, 0.02478935195872456, 0.022406387021195573, 0.05846077119888071, 0.06196148075463348, 0.05733846340399651, 0.13593030581428123, 0.11083988242384835, 0.10076047329546478, 0.11441819065275793, 0.12289765613238601, 0.1059248528280603, 0.10353084367732623, 0.10900006126288064, 0.08626895423853853, 9.999999999998899e-05, 9.999999999998899e-05, 0.0137862312914111, 0.00836149561022792, 9.999999999998899e-05, 0.029937168826597693, 9.999999999998899e-05, 0.010453069477363908, 0.005291642701716781, 0.008909621209512442, 0.0044260534840444565, 0.015557212116315333, 0.005216765938842904, 0.02292072415503532, 0.02127576200722414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020953455318232006, 0.03210838356143464, 0.026111772946981193, 0.04498715494300831, 0.023578925223313174, 0.02549030239943717, 0.0007126114227590241, 0.034864493878799085, 0.008853826688414834, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002124686644568108, 0.018855460570487037, 0.0007805639879617798, 9.999999999998899e-05, 9.999999999998899e-05, 0.010669701633200912, 9.999999999998899e-05, 0.1956773732114937, 0.22562950576423768, 0.20699026000795184, 0.19125472036623314, 0.2031796788325918, 0.19116313560512155, 0.17747302480151195, 0.17705713504056564, 0.18879780261835377, 0.05436963166264264, 0.051069111149433244, 0.05049728856106028, 0.05519952306069176, 0.03930816929902303, 0.04375811472813529, 0.042103501394633036, 0.026750118831954772, 0.033300167470931785, 0.1503745572731976, 0.12574071864605052, 0.14514782078010668, 0.1402353241132318, 0.1617294952944427, 0.13608150391155827, 0.12471202011905103, 0.1219836440349249, 0.14851373667308077, 0.19264841356790607, 0.1786483625683395, 0.1781048544895124, 0.15794276243415784, 0.15230924655287803, 0.14671239397000047, 0.20932457392587356, 0.18983130736629616, 0.1856256649829845, 0.12588281550598857, 0.11003729303491305, 0.09285848858374679, 0.09938409115287683, 0.09514583631442142, 0.09721246851052201, 0.13084439413738747, 0.12476512798966888, 0.10755425814259256, 0.1570049762961555, 0.16972826591387546, 0.1522862369754241, 0.16320858200056587, 0.14067657560524216, 0.1502722472358602, 0.13580932482250974, 0.1524884672114285, 0.1723208757795659, 0.1310933133148885, 0.11254129371559707, 0.15036859598674146, 0.13217491104030965, 0.12704634963281847, 0.14465272539404306, 0.10975681477729504, 0.119437920954097, 0.1565592320639373, 0.10961777072358014, 0.13118271175232954, 0.16920558830574006, 0.14024803206801717, 0.1647812466806099, 0.11979667224964474, 0.129027303413208, 0.16014734668359576, 0.12954027418703395, 0.1578961731625641, 0.14643730317176196, 0.15588092115350594, 0.14070550331158282, 0.14766741182933585, 0.1478504483142664, 0.22679621683784512, 0.18464371115429334, 0.17337949523320473, 0.17139163169478766, 0.19157610662708635, 0.18785801688523862, 0.17661060489123825, 0.18811651142662333, 0.18497194913765247, 0.19088081430596449, 0.17809741500204268, 0.17762350955134298, 0.04978313021270364, 0.041590246838854594, 0.045449651017201886, 0.04175146621624515, 0.0418199673694617, 0.04374029775145172, 0.038802850032700786, 0.04962901544598686, 0.04802698027487162]}, "mutation_prompt": null}
{"id": "3eb3601e-b736-45cf-b524-41e85f9b6edd", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "ebfc0ada-0862-42b4-8acf-f3fb892b69e3", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "ec49ea21-0b52-4d68-a97a-2ede998b5900", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "777a6eef-e283-403b-9e26-7fd531232262", "solution": "import numpy as np\n\nclass EnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def gradient_descent(self, x, func):\n        step_size = 0.01\n        gradient = np.zeros(self.dim)\n        for i in range(self.dim):\n            x1 = x.copy()\n            x2 = x.copy()\n            x1[i] += step_size\n            x2[i] -= step_size\n            gradient[i] = (func(x1) - func(x2)) / (2 * step_size)\n        return gradient\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                gradient_step = self.gradient_descent(pop[i], func)\n                trial = clipToBounds(trial - 0.01 * gradient_step)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "EnhancedHybridFireflyDE", "description": "Enhance the diversity and exploration capabilities by incorporating a local search strategy based on gradient descent.", "configspace": "", "generation": 81, "fitness": 0.1124534960673219, "feedback": "The algorithm EnhancedHybridFireflyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.18.", "error": "", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.1848665551455858, 0.195459308627021, 0.22698956346610533, 0.18005739667239018, 0.20154521902805467, 0.16209494833716487, 0.22748811205303232, 0.1645531541174169, 0.214772324409072, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03389350406277447, 0.055639679123776986, 0.041762510974528544, 0.04652624925054483, 0.030197550452326527, 0.049392820150305994, 0.055316826778863626, 0.04209203391511951, 0.04403341029370089, 0.03796262886944657, 0.024462074763924813, 0.049212304184203415, 0.027980797283387426, 0.016405575781891613, 0.020361486566370157, 0.021865803582758914, 0.023532055004286456, 0.01677085542162482, 0.955620225462478, 0.7796133508673682, 0.8073333476711418, 0.9452342006514531, 0.993607113473757, 0.8208469109766179, 0.8891031164629208, 0.8550836341873744, 0.9079395398896852, 0.054005852386447284, 0.03572109678548352, 0.047482339190935585, 0.020481976783236266, 0.029755702571833575, 0.026260107428660917, 0.03162147479366251, 0.07123065124712413, 0.04533248234742804, 0.14625733244222994, 0.10407767505576593, 0.11210424076420478, 0.10726415063754924, 0.1251071740763302, 0.10652297302243119, 0.13331163011918234, 0.129302044180572, 0.1308776840200533, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011887268413632857, 9.999999999998899e-05, 0.011369921556579676, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008084733204936079, 9.999999999998899e-05, 9.999999999998899e-05, 0.007581237209924652, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034975284733219314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.052249968609565656, 0.04802318963720731, 0.08434523757891399, 0.019894395614847404, 0.045586749642296254, 0.008581886137272177, 0.04173493297036879, 0.04781397406285981, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017933708359010203, 0.0029904918667041924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20439768943245695, 0.189985380890351, 0.18251771530730998, 0.1827457197860275, 0.19708336908764634, 0.18715526294729257, 0.19240669736695604, 0.20255906932014633, 0.20567557748897847, 0.04721914967811647, 0.05496600656765693, 0.04830936541605457, 0.04723121841950395, 0.044246593298923664, 0.046870049851849394, 0.03717495026285633, 0.04960669297971476, 0.04686446818666645, 0.11290215112334356, 0.11585562454578324, 0.1141326652036807, 0.12493483959668428, 0.12328207115924306, 0.10731405628745783, 0.1255237510346605, 0.12577341261098884, 0.1439908124385023, 0.17783380172452867, 0.1655289533622506, 0.15849897771946653, 0.1777232734758245, 0.16140403303893147, 0.16880915584766099, 0.1658579486104751, 0.17672952807794318, 0.1698053784695065, 0.09480354737292929, 0.099362336427815, 0.08545278170046189, 0.10002705898162989, 0.10248119401249511, 0.09218922208437363, 0.10233869331931689, 0.10661017075677848, 0.10286803545705336, 0.1664053334383061, 0.189785439865375, 0.1573565079486785, 0.166833315197356, 0.1682680682100074, 0.1458374554478713, 0.15593373658951382, 0.16101177263771949, 0.15506055885942915, 0.0629196611416275, 0.06722751468992505, 0.03351505121830256, 0.018239749297866203, 0.011735517407414076, 0.038072685675828666, 0.09734664984020125, 0.09029199250368425, 0.014911336815558562, 0.10779792511488917, 0.1507097489626028, 0.14692939952462714, 0.11633196711328997, 0.13154552018280696, 0.09821351723531735, 0.13110949566689034, 0.13510144706165716, 0.1304371845960992, 0.1338478017482606, 0.14588337524464112, 0.13312278130913513, 0.14463215270491947, 0.11050886832738671, 0.11386432873022856, 0.16376797760360018, 0.17766213229836358, 0.14987859497013123, 0.1810598463778088, 0.19428871921560553, 0.17398497247121303, 0.1780950236607578, 0.1856742005462313, 0.1866022541267277, 0.18917064428374164, 0.2089990401321813, 0.1827536490217162, 0.06452636648174848, 0.040035718811706866, 0.03789122529953115, 0.052648489875686044, 0.039938258996811915, 0.040875318191031185, 0.03438961647248884, 0.03256736584484865, 0.03909847087166185]}, "mutation_prompt": null}
{"id": "a781caf8-2fa2-4b96-a30f-f94da50441e0", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "6fd7d349-6475-47c6-ac52-f6ac3cab5e25", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "3e5db120-0c50-452c-beb1-f4d78930d1e1", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n        return best_sol", "name": "ImprovedEnhancedHybridFireflyDE", "description": "Improve diversity through adaptive mutation and differential evolution with dynamic parameter adjustment, and a revamped attraction mechanism using chaotic maps for enhanced exploration-exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.25082152023664916, 0.18159534773142882, 0.2703282636241382, 0.20276095230415736, 0.30717543960917115, 0.21231225254122998, 0.2653435241273089, 0.18340454931868422, 0.2505662084085556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02822122025494822, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06314946267163801, 0.05613504620939569, 0.047876738930469176, 0.06056122692865906, 0.05596524747547538, 0.07268198177876506, 0.065504954602707, 0.04600388784947351, 0.08095753554791285, 0.04916122633178621, 0.04071716651153634, 0.03878192058398222, 0.04820246460138444, 0.050824709431237736, 0.0605471875103849, 0.049839629071036895, 0.031160537255467857, 0.051461465466020484, 0.9895777956411915, 0.9488196578617013, 0.9454622631920961, 0.9862419533586314, 0.9974197538897144, 0.9585867672542523, 0.9742816951339234, 0.9809648214719628, 0.9778686786895828, 0.11352612630642855, 0.08871226577786495, 0.08925454383980991, 0.04672155538781697, 0.05608444411550395, 0.04780144147990428, 0.10280404483510919, 0.08901420014402739, 0.10356603136868692, 0.17442993566544518, 0.11593006997958633, 0.1999448433794624, 0.13823971916978517, 0.19003645473484654, 0.1383339421242452, 0.17456874169896652, 0.16132609599254033, 0.1639420987050202, 0.041419457945201965, 0.010403919679517482, 0.08931154997725099, 0.0892843995296887, 0.016491396957218463, 0.09702511614117171, 0.05727854063350646, 0.0485744245685793, 0.0412143149151043, 0.05668006725280428, 0.008289671006928456, 0.05422419610621254, 0.05087541349715774, 0.11172653942109279, 0.07784327308479022, 0.04078590882616406, 0.011586424085971103, 0.07213430798181397, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11621226594356016, 0.0553593588210779, 0.08006293191265668, 0.033381301985002, 0.040173885360528905, 0.07322517366705705, 0.10649312529801469, 0.06639087192062654, 0.036289387145136076, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013649053530356836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018533155860918527, 0.012190414062985822, 0.0030132011362457023, 0.008350868458872895, 0.014673090051055993, 0.20910647739789812, 0.22072080078012069, 0.21525928924868254, 0.2642625161007547, 0.22347408205522656, 0.20681806047426332, 0.2225791391712726, 0.24984195613759097, 0.2741334823734113, 0.05901360404783884, 0.07224224676575819, 0.0730356102854699, 0.05834703611012715, 0.05485595493325002, 0.06255390833429297, 0.06389410797758044, 0.05162031134948464, 0.057563349722970614, 0.15584333318552546, 0.14326767293624232, 0.14402576727546545, 0.1295818514293242, 0.14330355435680553, 0.14121717769467212, 0.14680617674123675, 0.12375405528492789, 0.13246380457446194, 0.19416466423474932, 0.20616575097560963, 0.1839612917790654, 0.17717957948376517, 0.19736488184325052, 0.18177122626927866, 0.22183610972681933, 0.18983130736629616, 0.20944504526171415, 0.13359195685888858, 0.13009530270654324, 0.12459646819738335, 0.12420287778378059, 0.12006462298793175, 0.14222443680057384, 0.13187088662309943, 0.12596545846786578, 0.13539032183823907, 0.16614649126733805, 0.16715779563448485, 0.19229084478659608, 0.17457016111340795, 0.16874369246333132, 0.1694966451379336, 0.15011168500012773, 0.20111915224373156, 0.17040462531657563, 0.15639581336169273, 0.1705463880227066, 0.15929006988481198, 0.15633136729056374, 0.16247162951341976, 0.16437978895578675, 0.1804850795929278, 0.14421866936753558, 0.15259858396490034, 0.1643167627748391, 0.1683433890332814, 0.1571048938618469, 0.21476459549704974, 0.16619828669197412, 0.1507285104678998, 0.15224021490517914, 0.18645724917078388, 0.16778407726714994, 0.1774010848611398, 0.16349159477230846, 0.1747973405802491, 0.16062443284490713, 0.1386360931656614, 0.16751442486541712, 0.18013837218872286, 0.20266888041102094, 0.17725753700281544, 0.17762095058714167, 0.1857355843569629, 0.17676849482802226, 0.17754352351641933, 0.1767073136555869, 0.17479692793329815, 0.17166148151582217, 0.17345760010215439, 0.17895274795735638, 0.06427733425456372, 0.053802868811766213, 0.0646110616047395, 0.06556626854440606, 0.06332552039461536, 0.05720878374045224, 0.05413619596938968, 0.05874965920389896, 0.05824249756224542]}, "mutation_prompt": null}
{"id": "1ef3e38e-fdfa-4970-8a04-0bf5a3e0cdfc", "solution": "import numpy as np\n\nclass DynamicInertiaHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1, inertia_min=0.1, inertia_max=0.9):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            inertia_weight = self.inertia_min + (self.inertia_max - self.inertia_min) * (budget_used / self.budget)\n            self.beta_min = self.beta_min * inertia_weight\n\n        return best_sol", "name": "DynamicInertiaHybridFireflyDE", "description": "Introduce a dynamic inertia weight to balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 85, "fitness": 0.14441093199512642, "feedback": "The algorithm DynamicInertiaHybridFireflyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "6c5e5cd1-6f7e-4416-8cc6-280d292f0d36", "metadata": {"aucs": [0.24416321030366084, 0.1975788897274633, 0.30387744126411254, 0.22296840885408198, 0.2964622588469332, 0.21939178732409137, 0.293601054850978, 0.19797503485632562, 0.2841848955049582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027775875995627808, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08135363764168613, 0.058060948745691676, 0.05227852430135094, 0.057005347843870346, 0.0844461680661791, 0.06555228518382306, 0.0760913149030894, 0.0770860481435055, 0.08052980489796224, 0.05398777488243123, 0.03965212423853515, 0.04079880645685385, 0.07427304918607247, 0.04101157454142268, 0.04650395427789267, 0.06647870051441573, 0.030748266245139155, 0.04251449641887506, 0.9895777956411915, 0.9804762624190323, 0.9551368801359423, 0.9862450183301783, 0.9974197538897144, 0.9684234343714869, 0.9741153528731431, 0.9818573363044448, 0.9882210237827542, 0.09226390743487278, 0.08009986216979981, 0.09897995421754058, 0.07098138152163769, 0.06271809536187434, 0.05581287218410491, 0.08248290545808801, 0.12060286635367179, 0.0998941312248498, 0.18771198207559858, 0.13265366678524515, 0.17717508287294537, 0.14390734973642116, 0.19393403637088735, 0.13116250889455294, 0.22070875319303462, 0.16893445733331391, 0.1800660735914158, 0.09803427696923794, 0.006037820925875681, 0.09650529739455016, 0.07108866335230901, 0.01410610910074206, 0.08828282360660489, 0.01108457130745133, 0.038854100271561, 0.04164570364999998, 0.10775179085783171, 0.11167182657604957, 0.04928392649807756, 0.06024946174735546, 0.10296368911580689, 0.08018624127278728, 0.051422851914416645, 0.026647507168871765, 0.05766062960954965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192255252765022, 0.06801602024383246, 0.07571214905588308, 0.04862755901875204, 0.06460518824695449, 0.09035118525210095, 0.04671020088868705, 0.04581428249060171, 0.05973233076515516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004426273803050718, 0.006021284606719357, 0.006610182437166823, 0.01023833945548236, 0.026189952283502627, 0.00551383588694121, 0.03387773407927175, 0.0046078141012363405, 0.023200074112146307, 0.2100554053084822, 0.23125022583636456, 0.22467270879121237, 0.23327389221460548, 0.2199296423707996, 0.20118966229568147, 0.2101898696987431, 0.2074203712044983, 0.21576219214218617, 0.06405221540856965, 0.07164790532157173, 0.0721993529075231, 0.04540448589087531, 0.06775168624952077, 0.05880153018328915, 0.05583834426071499, 0.045170366589503685, 0.052802149418383904, 0.14493863211202496, 0.14046562488250147, 0.13955181912564618, 0.13846004945890455, 0.1387608936881961, 0.1285347793413122, 0.13620161407232467, 0.15541968702599152, 0.1644687973994362, 0.18293631020598144, 0.1782123838204136, 0.18842474408933163, 0.19444078931245634, 0.1699882871859414, 0.20110080351074333, 0.19640894361785932, 0.1995482207006789, 0.2038992320205505, 0.13746425017548758, 0.1258161634355942, 0.1379314087116691, 0.1373573448995492, 0.11907540395796823, 0.12943465374613938, 0.15445802498515349, 0.14247077937628527, 0.1450082439925392, 0.1864765182001925, 0.1756899270383474, 0.17237558104742767, 0.17970500702397363, 0.15413431591245075, 0.18863781789050893, 0.1934733361858414, 0.16111733188150446, 0.15073816297405063, 0.14961254632255427, 0.15714048091562294, 0.16364528864871086, 0.17205172491159504, 0.1617455885277146, 0.16205451671153426, 0.16107900335655645, 0.15819719980854663, 0.1557461316117218, 0.17246550792360882, 0.15957530474673698, 0.142040814340732, 0.16051449722790534, 0.14168996125926692, 0.1695927228432893, 0.16530109291535122, 0.2112009380036749, 0.16482993909320687, 0.1620703110542081, 0.18733094238167047, 0.1533942268027476, 0.18185652921667883, 0.133446751513703, 0.1649472628501122, 0.1849760080209113, 0.20163445089048415, 0.18880476890916553, 0.17823235969886098, 0.19903058323615497, 0.17374196164713318, 0.17900591260525434, 0.17088098280494757, 0.18252365176997187, 0.18419643162923705, 0.18020537944726966, 0.17112052128196664, 0.05421432832534978, 0.051221772629231, 0.05430180999468359, 0.06592838140358948, 0.06959589547066392, 0.059425856992216586, 0.0610191851995, 0.05348113935451204, 0.060984078412267606]}, "mutation_prompt": null}
{"id": "5ef49e1b-0274-4044-b55a-e221d8fa1448", "solution": "import numpy as np\n\nclass DynamicInertiaHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1, inertia_min=0.1, inertia_max=0.9):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            inertia_weight = self.inertia_min + (self.inertia_max - self.inertia_min) * (budget_used / self.budget)\n            self.beta_min = self.beta_min * inertia_weight\n\n        return best_sol", "name": "DynamicInertiaHybridFireflyDE", "description": "Introduce a dynamic inertia weight to balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1ef3e38e-fdfa-4970-8a04-0bf5a3e0cdfc", "metadata": {"aucs": [0.24416321030366084, 0.1975788897274633, 0.30387744126411254, 0.22296840885408198, 0.2964622588469332, 0.21939178732409137, 0.293601054850978, 0.19797503485632562, 0.2841848955049582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027775875995627808, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08135363764168613, 0.058060948745691676, 0.05227852430135094, 0.057005347843870346, 0.0844461680661791, 0.06555228518382306, 0.0760913149030894, 0.0770860481435055, 0.08052980489796224, 0.05398777488243123, 0.03965212423853515, 0.04079880645685385, 0.07427304918607247, 0.04101157454142268, 0.04650395427789267, 0.06647870051441573, 0.030748266245139155, 0.04251449641887506, 0.9895777956411915, 0.9804762624190323, 0.9551368801359423, 0.9862450183301783, 0.9974197538897144, 0.9684234343714869, 0.9741153528731431, 0.9818573363044448, 0.9882210237827542, 0.09226390743487278, 0.08009986216979981, 0.09897995421754058, 0.07098138152163769, 0.06271809536187434, 0.05581287218410491, 0.08248290545808801, 0.12060286635367179, 0.0998941312248498, 0.18771198207559858, 0.13265366678524515, 0.17717508287294537, 0.14390734973642116, 0.19393403637088735, 0.13116250889455294, 0.22070875319303462, 0.16893445733331391, 0.1800660735914158, 0.09803427696923794, 0.006037820925875681, 0.09650529739455016, 0.07108866335230901, 0.01410610910074206, 0.08828282360660489, 0.01108457130745133, 0.038854100271561, 0.04164570364999998, 0.10775179085783171, 0.11167182657604957, 0.04928392649807756, 0.06024946174735546, 0.10296368911580689, 0.08018624127278728, 0.051422851914416645, 0.026647507168871765, 0.05766062960954965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192255252765022, 0.06801602024383246, 0.07571214905588308, 0.04862755901875204, 0.06460518824695449, 0.09035118525210095, 0.04671020088868705, 0.04581428249060171, 0.05973233076515516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004426273803050718, 0.006021284606719357, 0.006610182437166823, 0.01023833945548236, 0.026189952283502627, 0.00551383588694121, 0.03387773407927175, 0.0046078141012363405, 0.023200074112146307, 0.2100554053084822, 0.23125022583636456, 0.22467270879121237, 0.23327389221460548, 0.2199296423707996, 0.20118966229568147, 0.2101898696987431, 0.2074203712044983, 0.21576219214218617, 0.06405221540856965, 0.07164790532157173, 0.0721993529075231, 0.04540448589087531, 0.06775168624952077, 0.05880153018328915, 0.05583834426071499, 0.045170366589503685, 0.052802149418383904, 0.14493863211202496, 0.14046562488250147, 0.13955181912564618, 0.13846004945890455, 0.1387608936881961, 0.1285347793413122, 0.13620161407232467, 0.15541968702599152, 0.1644687973994362, 0.18293631020598144, 0.1782123838204136, 0.18842474408933163, 0.19444078931245634, 0.1699882871859414, 0.20110080351074333, 0.19640894361785932, 0.1995482207006789, 0.2038992320205505, 0.13746425017548758, 0.1258161634355942, 0.1379314087116691, 0.1373573448995492, 0.11907540395796823, 0.12943465374613938, 0.15445802498515349, 0.14247077937628527, 0.1450082439925392, 0.1864765182001925, 0.1756899270383474, 0.17237558104742767, 0.17970500702397363, 0.15413431591245075, 0.18863781789050893, 0.1934733361858414, 0.16111733188150446, 0.15073816297405063, 0.14961254632255427, 0.15714048091562294, 0.16364528864871086, 0.17205172491159504, 0.1617455885277146, 0.16205451671153426, 0.16107900335655645, 0.15819719980854663, 0.1557461316117218, 0.17246550792360882, 0.15957530474673698, 0.142040814340732, 0.16051449722790534, 0.14168996125926692, 0.1695927228432893, 0.16530109291535122, 0.2112009380036749, 0.16482993909320687, 0.1620703110542081, 0.18733094238167047, 0.1533942268027476, 0.18185652921667883, 0.133446751513703, 0.1649472628501122, 0.1849760080209113, 0.20163445089048415, 0.18880476890916553, 0.17823235969886098, 0.19903058323615497, 0.17374196164713318, 0.17900591260525434, 0.17088098280494757, 0.18252365176997187, 0.18419643162923705, 0.18020537944726966, 0.17112052128196664, 0.05421432832534978, 0.051221772629231, 0.05430180999468359, 0.06592838140358948, 0.06959589547066392, 0.059425856992216586, 0.0610191851995, 0.05348113935451204, 0.060984078412267606]}, "mutation_prompt": null}
{"id": "3c765804-3d4f-4d18-9a1e-4c02ebc77e66", "solution": "import numpy as np\n\nclass DynamicInertiaHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1, inertia_min=0.1, inertia_max=0.9):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            inertia_weight = self.inertia_min + (self.inertia_max - self.inertia_min) * (budget_used / self.budget)\n            self.beta_min = self.beta_min * inertia_weight\n\n        return best_sol", "name": "DynamicInertiaHybridFireflyDE", "description": "Introduce a dynamic inertia weight to balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ef3e38e-fdfa-4970-8a04-0bf5a3e0cdfc", "metadata": {"aucs": [0.24416321030366084, 0.1975788897274633, 0.30387744126411254, 0.22296840885408198, 0.2964622588469332, 0.21939178732409137, 0.293601054850978, 0.19797503485632562, 0.2841848955049582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027775875995627808, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08135363764168613, 0.058060948745691676, 0.05227852430135094, 0.057005347843870346, 0.0844461680661791, 0.06555228518382306, 0.0760913149030894, 0.0770860481435055, 0.08052980489796224, 0.05398777488243123, 0.03965212423853515, 0.04079880645685385, 0.07427304918607247, 0.04101157454142268, 0.04650395427789267, 0.06647870051441573, 0.030748266245139155, 0.04251449641887506, 0.9895777956411915, 0.9804762624190323, 0.9551368801359423, 0.9862450183301783, 0.9974197538897144, 0.9684234343714869, 0.9741153528731431, 0.9818573363044448, 0.9882210237827542, 0.09226390743487278, 0.08009986216979981, 0.09897995421754058, 0.07098138152163769, 0.06271809536187434, 0.05581287218410491, 0.08248290545808801, 0.12060286635367179, 0.0998941312248498, 0.18771198207559858, 0.13265366678524515, 0.17717508287294537, 0.14390734973642116, 0.19393403637088735, 0.13116250889455294, 0.22070875319303462, 0.16893445733331391, 0.1800660735914158, 0.09803427696923794, 0.006037820925875681, 0.09650529739455016, 0.07108866335230901, 0.01410610910074206, 0.08828282360660489, 0.01108457130745133, 0.038854100271561, 0.04164570364999998, 0.10775179085783171, 0.11167182657604957, 0.04928392649807756, 0.06024946174735546, 0.10296368911580689, 0.08018624127278728, 0.051422851914416645, 0.026647507168871765, 0.05766062960954965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192255252765022, 0.06801602024383246, 0.07571214905588308, 0.04862755901875204, 0.06460518824695449, 0.09035118525210095, 0.04671020088868705, 0.04581428249060171, 0.05973233076515516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004426273803050718, 0.006021284606719357, 0.006610182437166823, 0.01023833945548236, 0.026189952283502627, 0.00551383588694121, 0.03387773407927175, 0.0046078141012363405, 0.023200074112146307, 0.2100554053084822, 0.23125022583636456, 0.22467270879121237, 0.23327389221460548, 0.2199296423707996, 0.20118966229568147, 0.2101898696987431, 0.2074203712044983, 0.21576219214218617, 0.06405221540856965, 0.07164790532157173, 0.0721993529075231, 0.04540448589087531, 0.06775168624952077, 0.05880153018328915, 0.05583834426071499, 0.045170366589503685, 0.052802149418383904, 0.14493863211202496, 0.14046562488250147, 0.13955181912564618, 0.13846004945890455, 0.1387608936881961, 0.1285347793413122, 0.13620161407232467, 0.15541968702599152, 0.1644687973994362, 0.18293631020598144, 0.1782123838204136, 0.18842474408933163, 0.19444078931245634, 0.1699882871859414, 0.20110080351074333, 0.19640894361785932, 0.1995482207006789, 0.2038992320205505, 0.13746425017548758, 0.1258161634355942, 0.1379314087116691, 0.1373573448995492, 0.11907540395796823, 0.12943465374613938, 0.15445802498515349, 0.14247077937628527, 0.1450082439925392, 0.1864765182001925, 0.1756899270383474, 0.17237558104742767, 0.17970500702397363, 0.15413431591245075, 0.18863781789050893, 0.1934733361858414, 0.16111733188150446, 0.15073816297405063, 0.14961254632255427, 0.15714048091562294, 0.16364528864871086, 0.17205172491159504, 0.1617455885277146, 0.16205451671153426, 0.16107900335655645, 0.15819719980854663, 0.1557461316117218, 0.17246550792360882, 0.15957530474673698, 0.142040814340732, 0.16051449722790534, 0.14168996125926692, 0.1695927228432893, 0.16530109291535122, 0.2112009380036749, 0.16482993909320687, 0.1620703110542081, 0.18733094238167047, 0.1533942268027476, 0.18185652921667883, 0.133446751513703, 0.1649472628501122, 0.1849760080209113, 0.20163445089048415, 0.18880476890916553, 0.17823235969886098, 0.19903058323615497, 0.17374196164713318, 0.17900591260525434, 0.17088098280494757, 0.18252365176997187, 0.18419643162923705, 0.18020537944726966, 0.17112052128196664, 0.05421432832534978, 0.051221772629231, 0.05430180999468359, 0.06592838140358948, 0.06959589547066392, 0.059425856992216586, 0.0610191851995, 0.05348113935451204, 0.060984078412267606]}, "mutation_prompt": null}
{"id": "2608e822-2097-4445-ba32-20268797157f", "solution": "import numpy as np\n\nclass DynamicInertiaHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1, inertia_min=0.1, inertia_max=0.9):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            inertia_weight = self.inertia_min + (self.inertia_max - self.inertia_min) * (budget_used / self.budget)\n            self.beta_min = self.beta_min * inertia_weight\n\n        return best_sol", "name": "DynamicInertiaHybridFireflyDE", "description": "Introduce a dynamic inertia weight to balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ef3e38e-fdfa-4970-8a04-0bf5a3e0cdfc", "metadata": {"aucs": [0.24416321030366084, 0.1975788897274633, 0.30387744126411254, 0.22296840885408198, 0.2964622588469332, 0.21939178732409137, 0.293601054850978, 0.19797503485632562, 0.2841848955049582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027775875995627808, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08135363764168613, 0.058060948745691676, 0.05227852430135094, 0.057005347843870346, 0.0844461680661791, 0.06555228518382306, 0.0760913149030894, 0.0770860481435055, 0.08052980489796224, 0.05398777488243123, 0.03965212423853515, 0.04079880645685385, 0.07427304918607247, 0.04101157454142268, 0.04650395427789267, 0.06647870051441573, 0.030748266245139155, 0.04251449641887506, 0.9895777956411915, 0.9804762624190323, 0.9551368801359423, 0.9862450183301783, 0.9974197538897144, 0.9684234343714869, 0.9741153528731431, 0.9818573363044448, 0.9882210237827542, 0.09226390743487278, 0.08009986216979981, 0.09897995421754058, 0.07098138152163769, 0.06271809536187434, 0.05581287218410491, 0.08248290545808801, 0.12060286635367179, 0.0998941312248498, 0.18771198207559858, 0.13265366678524515, 0.17717508287294537, 0.14390734973642116, 0.19393403637088735, 0.13116250889455294, 0.22070875319303462, 0.16893445733331391, 0.1800660735914158, 0.09803427696923794, 0.006037820925875681, 0.09650529739455016, 0.07108866335230901, 0.01410610910074206, 0.08828282360660489, 0.01108457130745133, 0.038854100271561, 0.04164570364999998, 0.10775179085783171, 0.11167182657604957, 0.04928392649807756, 0.06024946174735546, 0.10296368911580689, 0.08018624127278728, 0.051422851914416645, 0.026647507168871765, 0.05766062960954965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192255252765022, 0.06801602024383246, 0.07571214905588308, 0.04862755901875204, 0.06460518824695449, 0.09035118525210095, 0.04671020088868705, 0.04581428249060171, 0.05973233076515516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004426273803050718, 0.006021284606719357, 0.006610182437166823, 0.01023833945548236, 0.026189952283502627, 0.00551383588694121, 0.03387773407927175, 0.0046078141012363405, 0.023200074112146307, 0.2100554053084822, 0.23125022583636456, 0.22467270879121237, 0.23327389221460548, 0.2199296423707996, 0.20118966229568147, 0.2101898696987431, 0.2074203712044983, 0.21576219214218617, 0.06405221540856965, 0.07164790532157173, 0.0721993529075231, 0.04540448589087531, 0.06775168624952077, 0.05880153018328915, 0.05583834426071499, 0.045170366589503685, 0.052802149418383904, 0.14493863211202496, 0.14046562488250147, 0.13955181912564618, 0.13846004945890455, 0.1387608936881961, 0.1285347793413122, 0.13620161407232467, 0.15541968702599152, 0.1644687973994362, 0.18293631020598144, 0.1782123838204136, 0.18842474408933163, 0.19444078931245634, 0.1699882871859414, 0.20110080351074333, 0.19640894361785932, 0.1995482207006789, 0.2038992320205505, 0.13746425017548758, 0.1258161634355942, 0.1379314087116691, 0.1373573448995492, 0.11907540395796823, 0.12943465374613938, 0.15445802498515349, 0.14247077937628527, 0.1450082439925392, 0.1864765182001925, 0.1756899270383474, 0.17237558104742767, 0.17970500702397363, 0.15413431591245075, 0.18863781789050893, 0.1934733361858414, 0.16111733188150446, 0.15073816297405063, 0.14961254632255427, 0.15714048091562294, 0.16364528864871086, 0.17205172491159504, 0.1617455885277146, 0.16205451671153426, 0.16107900335655645, 0.15819719980854663, 0.1557461316117218, 0.17246550792360882, 0.15957530474673698, 0.142040814340732, 0.16051449722790534, 0.14168996125926692, 0.1695927228432893, 0.16530109291535122, 0.2112009380036749, 0.16482993909320687, 0.1620703110542081, 0.18733094238167047, 0.1533942268027476, 0.18185652921667883, 0.133446751513703, 0.1649472628501122, 0.1849760080209113, 0.20163445089048415, 0.18880476890916553, 0.17823235969886098, 0.19903058323615497, 0.17374196164713318, 0.17900591260525434, 0.17088098280494757, 0.18252365176997187, 0.18419643162923705, 0.18020537944726966, 0.17112052128196664, 0.05421432832534978, 0.051221772629231, 0.05430180999468359, 0.06592838140358948, 0.06959589547066392, 0.059425856992216586, 0.0610191851995, 0.05348113935451204, 0.060984078412267606]}, "mutation_prompt": null}
{"id": "5c0dfc0a-1ec9-404c-8def-171565250a2d", "solution": "import numpy as np\n\nclass DynamicInertiaHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1, inertia_min=0.1, inertia_max=0.9):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            inertia_weight = self.inertia_min + (self.inertia_max - self.inertia_min) * (budget_used / self.budget)\n            self.beta_min = self.beta_min * inertia_weight\n\n        return best_sol", "name": "DynamicInertiaHybridFireflyDE", "description": "Introduce a dynamic inertia weight to balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ef3e38e-fdfa-4970-8a04-0bf5a3e0cdfc", "metadata": {"aucs": [0.24416321030366084, 0.1975788897274633, 0.30387744126411254, 0.22296840885408198, 0.2964622588469332, 0.21939178732409137, 0.293601054850978, 0.19797503485632562, 0.2841848955049582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027775875995627808, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08135363764168613, 0.058060948745691676, 0.05227852430135094, 0.057005347843870346, 0.0844461680661791, 0.06555228518382306, 0.0760913149030894, 0.0770860481435055, 0.08052980489796224, 0.05398777488243123, 0.03965212423853515, 0.04079880645685385, 0.07427304918607247, 0.04101157454142268, 0.04650395427789267, 0.06647870051441573, 0.030748266245139155, 0.04251449641887506, 0.9895777956411915, 0.9804762624190323, 0.9551368801359423, 0.9862450183301783, 0.9974197538897144, 0.9684234343714869, 0.9741153528731431, 0.9818573363044448, 0.9882210237827542, 0.09226390743487278, 0.08009986216979981, 0.09897995421754058, 0.07098138152163769, 0.06271809536187434, 0.05581287218410491, 0.08248290545808801, 0.12060286635367179, 0.0998941312248498, 0.18771198207559858, 0.13265366678524515, 0.17717508287294537, 0.14390734973642116, 0.19393403637088735, 0.13116250889455294, 0.22070875319303462, 0.16893445733331391, 0.1800660735914158, 0.09803427696923794, 0.006037820925875681, 0.09650529739455016, 0.07108866335230901, 0.01410610910074206, 0.08828282360660489, 0.01108457130745133, 0.038854100271561, 0.04164570364999998, 0.10775179085783171, 0.11167182657604957, 0.04928392649807756, 0.06024946174735546, 0.10296368911580689, 0.08018624127278728, 0.051422851914416645, 0.026647507168871765, 0.05766062960954965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192255252765022, 0.06801602024383246, 0.07571214905588308, 0.04862755901875204, 0.06460518824695449, 0.09035118525210095, 0.04671020088868705, 0.04581428249060171, 0.05973233076515516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004426273803050718, 0.006021284606719357, 0.006610182437166823, 0.01023833945548236, 0.026189952283502627, 0.00551383588694121, 0.03387773407927175, 0.0046078141012363405, 0.023200074112146307, 0.2100554053084822, 0.23125022583636456, 0.22467270879121237, 0.23327389221460548, 0.2199296423707996, 0.20118966229568147, 0.2101898696987431, 0.2074203712044983, 0.21576219214218617, 0.06405221540856965, 0.07164790532157173, 0.0721993529075231, 0.04540448589087531, 0.06775168624952077, 0.05880153018328915, 0.05583834426071499, 0.045170366589503685, 0.052802149418383904, 0.14493863211202496, 0.14046562488250147, 0.13955181912564618, 0.13846004945890455, 0.1387608936881961, 0.1285347793413122, 0.13620161407232467, 0.15541968702599152, 0.1644687973994362, 0.18293631020598144, 0.1782123838204136, 0.18842474408933163, 0.19444078931245634, 0.1699882871859414, 0.20110080351074333, 0.19640894361785932, 0.1995482207006789, 0.2038992320205505, 0.13746425017548758, 0.1258161634355942, 0.1379314087116691, 0.1373573448995492, 0.11907540395796823, 0.12943465374613938, 0.15445802498515349, 0.14247077937628527, 0.1450082439925392, 0.1864765182001925, 0.1756899270383474, 0.17237558104742767, 0.17970500702397363, 0.15413431591245075, 0.18863781789050893, 0.1934733361858414, 0.16111733188150446, 0.15073816297405063, 0.14961254632255427, 0.15714048091562294, 0.16364528864871086, 0.17205172491159504, 0.1617455885277146, 0.16205451671153426, 0.16107900335655645, 0.15819719980854663, 0.1557461316117218, 0.17246550792360882, 0.15957530474673698, 0.142040814340732, 0.16051449722790534, 0.14168996125926692, 0.1695927228432893, 0.16530109291535122, 0.2112009380036749, 0.16482993909320687, 0.1620703110542081, 0.18733094238167047, 0.1533942268027476, 0.18185652921667883, 0.133446751513703, 0.1649472628501122, 0.1849760080209113, 0.20163445089048415, 0.18880476890916553, 0.17823235969886098, 0.19903058323615497, 0.17374196164713318, 0.17900591260525434, 0.17088098280494757, 0.18252365176997187, 0.18419643162923705, 0.18020537944726966, 0.17112052128196664, 0.05421432832534978, 0.051221772629231, 0.05430180999468359, 0.06592838140358948, 0.06959589547066392, 0.059425856992216586, 0.0610191851995, 0.05348113935451204, 0.060984078412267606]}, "mutation_prompt": null}
{"id": "57288795-5413-47a9-a659-bc52c89751dd", "solution": "import numpy as np\n\nclass DynamicInertiaHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1, inertia_min=0.1, inertia_max=0.9):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            inertia_weight = self.inertia_min + (self.inertia_max - self.inertia_min) * (budget_used / self.budget)\n            self.beta_min = self.beta_min * inertia_weight\n\n        return best_sol", "name": "DynamicInertiaHybridFireflyDE", "description": "Introduce a dynamic inertia weight to balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ef3e38e-fdfa-4970-8a04-0bf5a3e0cdfc", "metadata": {"aucs": [0.24416321030366084, 0.1975788897274633, 0.30387744126411254, 0.22296840885408198, 0.2964622588469332, 0.21939178732409137, 0.293601054850978, 0.19797503485632562, 0.2841848955049582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027775875995627808, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08135363764168613, 0.058060948745691676, 0.05227852430135094, 0.057005347843870346, 0.0844461680661791, 0.06555228518382306, 0.0760913149030894, 0.0770860481435055, 0.08052980489796224, 0.05398777488243123, 0.03965212423853515, 0.04079880645685385, 0.07427304918607247, 0.04101157454142268, 0.04650395427789267, 0.06647870051441573, 0.030748266245139155, 0.04251449641887506, 0.9895777956411915, 0.9804762624190323, 0.9551368801359423, 0.9862450183301783, 0.9974197538897144, 0.9684234343714869, 0.9741153528731431, 0.9818573363044448, 0.9882210237827542, 0.09226390743487278, 0.08009986216979981, 0.09897995421754058, 0.07098138152163769, 0.06271809536187434, 0.05581287218410491, 0.08248290545808801, 0.12060286635367179, 0.0998941312248498, 0.18771198207559858, 0.13265366678524515, 0.17717508287294537, 0.14390734973642116, 0.19393403637088735, 0.13116250889455294, 0.22070875319303462, 0.16893445733331391, 0.1800660735914158, 0.09803427696923794, 0.006037820925875681, 0.09650529739455016, 0.07108866335230901, 0.01410610910074206, 0.08828282360660489, 0.01108457130745133, 0.038854100271561, 0.04164570364999998, 0.10775179085783171, 0.11167182657604957, 0.04928392649807756, 0.06024946174735546, 0.10296368911580689, 0.08018624127278728, 0.051422851914416645, 0.026647507168871765, 0.05766062960954965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192255252765022, 0.06801602024383246, 0.07571214905588308, 0.04862755901875204, 0.06460518824695449, 0.09035118525210095, 0.04671020088868705, 0.04581428249060171, 0.05973233076515516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004426273803050718, 0.006021284606719357, 0.006610182437166823, 0.01023833945548236, 0.026189952283502627, 0.00551383588694121, 0.03387773407927175, 0.0046078141012363405, 0.023200074112146307, 0.2100554053084822, 0.23125022583636456, 0.22467270879121237, 0.23327389221460548, 0.2199296423707996, 0.20118966229568147, 0.2101898696987431, 0.2074203712044983, 0.21576219214218617, 0.06405221540856965, 0.07164790532157173, 0.0721993529075231, 0.04540448589087531, 0.06775168624952077, 0.05880153018328915, 0.05583834426071499, 0.045170366589503685, 0.052802149418383904, 0.14493863211202496, 0.14046562488250147, 0.13955181912564618, 0.13846004945890455, 0.1387608936881961, 0.1285347793413122, 0.13620161407232467, 0.15541968702599152, 0.1644687973994362, 0.18293631020598144, 0.1782123838204136, 0.18842474408933163, 0.19444078931245634, 0.1699882871859414, 0.20110080351074333, 0.19640894361785932, 0.1995482207006789, 0.2038992320205505, 0.13746425017548758, 0.1258161634355942, 0.1379314087116691, 0.1373573448995492, 0.11907540395796823, 0.12943465374613938, 0.15445802498515349, 0.14247077937628527, 0.1450082439925392, 0.1864765182001925, 0.1756899270383474, 0.17237558104742767, 0.17970500702397363, 0.15413431591245075, 0.18863781789050893, 0.1934733361858414, 0.16111733188150446, 0.15073816297405063, 0.14961254632255427, 0.15714048091562294, 0.16364528864871086, 0.17205172491159504, 0.1617455885277146, 0.16205451671153426, 0.16107900335655645, 0.15819719980854663, 0.1557461316117218, 0.17246550792360882, 0.15957530474673698, 0.142040814340732, 0.16051449722790534, 0.14168996125926692, 0.1695927228432893, 0.16530109291535122, 0.2112009380036749, 0.16482993909320687, 0.1620703110542081, 0.18733094238167047, 0.1533942268027476, 0.18185652921667883, 0.133446751513703, 0.1649472628501122, 0.1849760080209113, 0.20163445089048415, 0.18880476890916553, 0.17823235969886098, 0.19903058323615497, 0.17374196164713318, 0.17900591260525434, 0.17088098280494757, 0.18252365176997187, 0.18419643162923705, 0.18020537944726966, 0.17112052128196664, 0.05421432832534978, 0.051221772629231, 0.05430180999468359, 0.06592838140358948, 0.06959589547066392, 0.059425856992216586, 0.0610191851995, 0.05348113935451204, 0.060984078412267606]}, "mutation_prompt": null}
{"id": "bb4d9bd8-4356-4b02-9cd3-cd4df2d71e4e", "solution": "import numpy as np\n\nclass DynamicInertiaHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1, inertia_min=0.1, inertia_max=0.9):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            inertia_weight = self.inertia_min + (self.inertia_max - self.inertia_min) * (budget_used / self.budget)\n            self.beta_min = self.beta_min * inertia_weight\n\n        return best_sol", "name": "DynamicInertiaHybridFireflyDE", "description": "Introduce a dynamic inertia weight to balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1ef3e38e-fdfa-4970-8a04-0bf5a3e0cdfc", "metadata": {"aucs": [0.24416321030366084, 0.1975788897274633, 0.30387744126411254, 0.22296840885408198, 0.2964622588469332, 0.21939178732409137, 0.293601054850978, 0.19797503485632562, 0.2841848955049582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027775875995627808, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08135363764168613, 0.058060948745691676, 0.05227852430135094, 0.057005347843870346, 0.0844461680661791, 0.06555228518382306, 0.0760913149030894, 0.0770860481435055, 0.08052980489796224, 0.05398777488243123, 0.03965212423853515, 0.04079880645685385, 0.07427304918607247, 0.04101157454142268, 0.04650395427789267, 0.06647870051441573, 0.030748266245139155, 0.04251449641887506, 0.9895777956411915, 0.9804762624190323, 0.9551368801359423, 0.9862450183301783, 0.9974197538897144, 0.9684234343714869, 0.9741153528731431, 0.9818573363044448, 0.9882210237827542, 0.09226390743487278, 0.08009986216979981, 0.09897995421754058, 0.07098138152163769, 0.06271809536187434, 0.05581287218410491, 0.08248290545808801, 0.12060286635367179, 0.0998941312248498, 0.18771198207559858, 0.13265366678524515, 0.17717508287294537, 0.14390734973642116, 0.19393403637088735, 0.13116250889455294, 0.22070875319303462, 0.16893445733331391, 0.1800660735914158, 0.09803427696923794, 0.006037820925875681, 0.09650529739455016, 0.07108866335230901, 0.01410610910074206, 0.08828282360660489, 0.01108457130745133, 0.038854100271561, 0.04164570364999998, 0.10775179085783171, 0.11167182657604957, 0.04928392649807756, 0.06024946174735546, 0.10296368911580689, 0.08018624127278728, 0.051422851914416645, 0.026647507168871765, 0.05766062960954965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192255252765022, 0.06801602024383246, 0.07571214905588308, 0.04862755901875204, 0.06460518824695449, 0.09035118525210095, 0.04671020088868705, 0.04581428249060171, 0.05973233076515516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004426273803050718, 0.006021284606719357, 0.006610182437166823, 0.01023833945548236, 0.026189952283502627, 0.00551383588694121, 0.03387773407927175, 0.0046078141012363405, 0.023200074112146307, 0.2100554053084822, 0.23125022583636456, 0.22467270879121237, 0.23327389221460548, 0.2199296423707996, 0.20118966229568147, 0.2101898696987431, 0.2074203712044983, 0.21576219214218617, 0.06405221540856965, 0.07164790532157173, 0.0721993529075231, 0.04540448589087531, 0.06775168624952077, 0.05880153018328915, 0.05583834426071499, 0.045170366589503685, 0.052802149418383904, 0.14493863211202496, 0.14046562488250147, 0.13955181912564618, 0.13846004945890455, 0.1387608936881961, 0.1285347793413122, 0.13620161407232467, 0.15541968702599152, 0.1644687973994362, 0.18293631020598144, 0.1782123838204136, 0.18842474408933163, 0.19444078931245634, 0.1699882871859414, 0.20110080351074333, 0.19640894361785932, 0.1995482207006789, 0.2038992320205505, 0.13746425017548758, 0.1258161634355942, 0.1379314087116691, 0.1373573448995492, 0.11907540395796823, 0.12943465374613938, 0.15445802498515349, 0.14247077937628527, 0.1450082439925392, 0.1864765182001925, 0.1756899270383474, 0.17237558104742767, 0.17970500702397363, 0.15413431591245075, 0.18863781789050893, 0.1934733361858414, 0.16111733188150446, 0.15073816297405063, 0.14961254632255427, 0.15714048091562294, 0.16364528864871086, 0.17205172491159504, 0.1617455885277146, 0.16205451671153426, 0.16107900335655645, 0.15819719980854663, 0.1557461316117218, 0.17246550792360882, 0.15957530474673698, 0.142040814340732, 0.16051449722790534, 0.14168996125926692, 0.1695927228432893, 0.16530109291535122, 0.2112009380036749, 0.16482993909320687, 0.1620703110542081, 0.18733094238167047, 0.1533942268027476, 0.18185652921667883, 0.133446751513703, 0.1649472628501122, 0.1849760080209113, 0.20163445089048415, 0.18880476890916553, 0.17823235969886098, 0.19903058323615497, 0.17374196164713318, 0.17900591260525434, 0.17088098280494757, 0.18252365176997187, 0.18419643162923705, 0.18020537944726966, 0.17112052128196664, 0.05421432832534978, 0.051221772629231, 0.05430180999468359, 0.06592838140358948, 0.06959589547066392, 0.059425856992216586, 0.0610191851995, 0.05348113935451204, 0.060984078412267606]}, "mutation_prompt": null}
{"id": "620d7dff-3dde-4384-b826-4df0f3652117", "solution": "import numpy as np\n\nclass DynamicInertiaHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1, inertia_min=0.1, inertia_max=0.9):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            inertia_weight = self.inertia_min + (self.inertia_max - self.inertia_min) * (budget_used / self.budget)\n            self.beta_min = self.beta_min * inertia_weight\n\n        return best_sol", "name": "DynamicInertiaHybridFireflyDE", "description": "Introduce a dynamic inertia weight to balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1ef3e38e-fdfa-4970-8a04-0bf5a3e0cdfc", "metadata": {"aucs": [0.24416321030366084, 0.1975788897274633, 0.30387744126411254, 0.22296840885408198, 0.2964622588469332, 0.21939178732409137, 0.293601054850978, 0.19797503485632562, 0.2841848955049582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027775875995627808, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08135363764168613, 0.058060948745691676, 0.05227852430135094, 0.057005347843870346, 0.0844461680661791, 0.06555228518382306, 0.0760913149030894, 0.0770860481435055, 0.08052980489796224, 0.05398777488243123, 0.03965212423853515, 0.04079880645685385, 0.07427304918607247, 0.04101157454142268, 0.04650395427789267, 0.06647870051441573, 0.030748266245139155, 0.04251449641887506, 0.9895777956411915, 0.9804762624190323, 0.9551368801359423, 0.9862450183301783, 0.9974197538897144, 0.9684234343714869, 0.9741153528731431, 0.9818573363044448, 0.9882210237827542, 0.09226390743487278, 0.08009986216979981, 0.09897995421754058, 0.07098138152163769, 0.06271809536187434, 0.05581287218410491, 0.08248290545808801, 0.12060286635367179, 0.0998941312248498, 0.18771198207559858, 0.13265366678524515, 0.17717508287294537, 0.14390734973642116, 0.19393403637088735, 0.13116250889455294, 0.22070875319303462, 0.16893445733331391, 0.1800660735914158, 0.09803427696923794, 0.006037820925875681, 0.09650529739455016, 0.07108866335230901, 0.01410610910074206, 0.08828282360660489, 0.01108457130745133, 0.038854100271561, 0.04164570364999998, 0.10775179085783171, 0.11167182657604957, 0.04928392649807756, 0.06024946174735546, 0.10296368911580689, 0.08018624127278728, 0.051422851914416645, 0.026647507168871765, 0.05766062960954965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192255252765022, 0.06801602024383246, 0.07571214905588308, 0.04862755901875204, 0.06460518824695449, 0.09035118525210095, 0.04671020088868705, 0.04581428249060171, 0.05973233076515516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004426273803050718, 0.006021284606719357, 0.006610182437166823, 0.01023833945548236, 0.026189952283502627, 0.00551383588694121, 0.03387773407927175, 0.0046078141012363405, 0.023200074112146307, 0.2100554053084822, 0.23125022583636456, 0.22467270879121237, 0.23327389221460548, 0.2199296423707996, 0.20118966229568147, 0.2101898696987431, 0.2074203712044983, 0.21576219214218617, 0.06405221540856965, 0.07164790532157173, 0.0721993529075231, 0.04540448589087531, 0.06775168624952077, 0.05880153018328915, 0.05583834426071499, 0.045170366589503685, 0.052802149418383904, 0.14493863211202496, 0.14046562488250147, 0.13955181912564618, 0.13846004945890455, 0.1387608936881961, 0.1285347793413122, 0.13620161407232467, 0.15541968702599152, 0.1644687973994362, 0.18293631020598144, 0.1782123838204136, 0.18842474408933163, 0.19444078931245634, 0.1699882871859414, 0.20110080351074333, 0.19640894361785932, 0.1995482207006789, 0.2038992320205505, 0.13746425017548758, 0.1258161634355942, 0.1379314087116691, 0.1373573448995492, 0.11907540395796823, 0.12943465374613938, 0.15445802498515349, 0.14247077937628527, 0.1450082439925392, 0.1864765182001925, 0.1756899270383474, 0.17237558104742767, 0.17970500702397363, 0.15413431591245075, 0.18863781789050893, 0.1934733361858414, 0.16111733188150446, 0.15073816297405063, 0.14961254632255427, 0.15714048091562294, 0.16364528864871086, 0.17205172491159504, 0.1617455885277146, 0.16205451671153426, 0.16107900335655645, 0.15819719980854663, 0.1557461316117218, 0.17246550792360882, 0.15957530474673698, 0.142040814340732, 0.16051449722790534, 0.14168996125926692, 0.1695927228432893, 0.16530109291535122, 0.2112009380036749, 0.16482993909320687, 0.1620703110542081, 0.18733094238167047, 0.1533942268027476, 0.18185652921667883, 0.133446751513703, 0.1649472628501122, 0.1849760080209113, 0.20163445089048415, 0.18880476890916553, 0.17823235969886098, 0.19903058323615497, 0.17374196164713318, 0.17900591260525434, 0.17088098280494757, 0.18252365176997187, 0.18419643162923705, 0.18020537944726966, 0.17112052128196664, 0.05421432832534978, 0.051221772629231, 0.05430180999468359, 0.06592838140358948, 0.06959589547066392, 0.059425856992216586, 0.0610191851995, 0.05348113935451204, 0.060984078412267606]}, "mutation_prompt": null}
{"id": "f43734ad-d47f-42a6-b88e-a045550ab35d", "solution": "import numpy as np\n\nclass DynamicInertiaHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1, inertia_min=0.1, inertia_max=0.9):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            inertia_weight = self.inertia_min + (self.inertia_max - self.inertia_min) * (budget_used / self.budget)\n            self.beta_min = self.beta_min * inertia_weight\n\n        return best_sol", "name": "DynamicInertiaHybridFireflyDE", "description": "Introduce a dynamic inertia weight to balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1ef3e38e-fdfa-4970-8a04-0bf5a3e0cdfc", "metadata": {"aucs": [0.24416321030366084, 0.1975788897274633, 0.30387744126411254, 0.22296840885408198, 0.2964622588469332, 0.21939178732409137, 0.293601054850978, 0.19797503485632562, 0.2841848955049582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027775875995627808, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08135363764168613, 0.058060948745691676, 0.05227852430135094, 0.057005347843870346, 0.0844461680661791, 0.06555228518382306, 0.0760913149030894, 0.0770860481435055, 0.08052980489796224, 0.05398777488243123, 0.03965212423853515, 0.04079880645685385, 0.07427304918607247, 0.04101157454142268, 0.04650395427789267, 0.06647870051441573, 0.030748266245139155, 0.04251449641887506, 0.9895777956411915, 0.9804762624190323, 0.9551368801359423, 0.9862450183301783, 0.9974197538897144, 0.9684234343714869, 0.9741153528731431, 0.9818573363044448, 0.9882210237827542, 0.09226390743487278, 0.08009986216979981, 0.09897995421754058, 0.07098138152163769, 0.06271809536187434, 0.05581287218410491, 0.08248290545808801, 0.12060286635367179, 0.0998941312248498, 0.18771198207559858, 0.13265366678524515, 0.17717508287294537, 0.14390734973642116, 0.19393403637088735, 0.13116250889455294, 0.22070875319303462, 0.16893445733331391, 0.1800660735914158, 0.09803427696923794, 0.006037820925875681, 0.09650529739455016, 0.07108866335230901, 0.01410610910074206, 0.08828282360660489, 0.01108457130745133, 0.038854100271561, 0.04164570364999998, 0.10775179085783171, 0.11167182657604957, 0.04928392649807756, 0.06024946174735546, 0.10296368911580689, 0.08018624127278728, 0.051422851914416645, 0.026647507168871765, 0.05766062960954965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192255252765022, 0.06801602024383246, 0.07571214905588308, 0.04862755901875204, 0.06460518824695449, 0.09035118525210095, 0.04671020088868705, 0.04581428249060171, 0.05973233076515516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004426273803050718, 0.006021284606719357, 0.006610182437166823, 0.01023833945548236, 0.026189952283502627, 0.00551383588694121, 0.03387773407927175, 0.0046078141012363405, 0.023200074112146307, 0.2100554053084822, 0.23125022583636456, 0.22467270879121237, 0.23327389221460548, 0.2199296423707996, 0.20118966229568147, 0.2101898696987431, 0.2074203712044983, 0.21576219214218617, 0.06405221540856965, 0.07164790532157173, 0.0721993529075231, 0.04540448589087531, 0.06775168624952077, 0.05880153018328915, 0.05583834426071499, 0.045170366589503685, 0.052802149418383904, 0.14493863211202496, 0.14046562488250147, 0.13955181912564618, 0.13846004945890455, 0.1387608936881961, 0.1285347793413122, 0.13620161407232467, 0.15541968702599152, 0.1644687973994362, 0.18293631020598144, 0.1782123838204136, 0.18842474408933163, 0.19444078931245634, 0.1699882871859414, 0.20110080351074333, 0.19640894361785932, 0.1995482207006789, 0.2038992320205505, 0.13746425017548758, 0.1258161634355942, 0.1379314087116691, 0.1373573448995492, 0.11907540395796823, 0.12943465374613938, 0.15445802498515349, 0.14247077937628527, 0.1450082439925392, 0.1864765182001925, 0.1756899270383474, 0.17237558104742767, 0.17970500702397363, 0.15413431591245075, 0.18863781789050893, 0.1934733361858414, 0.16111733188150446, 0.15073816297405063, 0.14961254632255427, 0.15714048091562294, 0.16364528864871086, 0.17205172491159504, 0.1617455885277146, 0.16205451671153426, 0.16107900335655645, 0.15819719980854663, 0.1557461316117218, 0.17246550792360882, 0.15957530474673698, 0.142040814340732, 0.16051449722790534, 0.14168996125926692, 0.1695927228432893, 0.16530109291535122, 0.2112009380036749, 0.16482993909320687, 0.1620703110542081, 0.18733094238167047, 0.1533942268027476, 0.18185652921667883, 0.133446751513703, 0.1649472628501122, 0.1849760080209113, 0.20163445089048415, 0.18880476890916553, 0.17823235969886098, 0.19903058323615497, 0.17374196164713318, 0.17900591260525434, 0.17088098280494757, 0.18252365176997187, 0.18419643162923705, 0.18020537944726966, 0.17112052128196664, 0.05421432832534978, 0.051221772629231, 0.05430180999468359, 0.06592838140358948, 0.06959589547066392, 0.059425856992216586, 0.0610191851995, 0.05348113935451204, 0.060984078412267606]}, "mutation_prompt": null}
{"id": "2fd31ae5-e752-4c09-b3b8-77abe637584c", "solution": "class ImprovedDynamicInertiaHybridFireflyDE(DynamicInertiaHybridFireflyDE):\n\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1, inertia_min=0.1, inertia_max=0.9):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size, adapt_rate, inertia_min, inertia_max)\n        self.chaos_param = 0.1\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            chaotic_step = np.array([chaotic_map(i) for i in step])\n            return step + chaotic_step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight()\n                trial = np.clip(attractor, -5.0, 5.0)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = np.clip(mutant, -5.0, 5.0)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            inertia_weight = self.inertia_min + (self.inertia_max - self.inertia_min) * (budget_used / self.budget)\n            self.beta_min = self.beta_min * inertia_weight\n\n        return best_sol", "name": "ImprovedDynamicInertiaHybridFireflyDE", "description": "Improve exploration by incorporating chaotic maps into the levy flight step and applying a dynamic inertia weight adaptation strategy during the optimization process.", "configspace": "", "generation": 94, "fitness": 0.10081948920503249, "feedback": "The algorithm ImprovedDynamicInertiaHybridFireflyDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.15.", "error": "", "parent_id": "1ef3e38e-fdfa-4970-8a04-0bf5a3e0cdfc", "metadata": {"aucs": [0.1339925980439488, 0.145319506831454, 0.17811396583162697, 0.2290858414533805, 0.2284961617721728, 0.20296090903012243, 0.21002669340066793, 0.24629331951917655, 0.23495458666349378, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03356616582339045, 0.03642818994744246, 0.03285830772692966, 0.04673932978389761, 0.04474237460531294, 0.0423507824824122, 0.0560004136443748, 0.03898793295608105, 0.04872664430281981, 0.020051567431122574, 0.0012228868841329676, 9.999999999998899e-05, 0.023320437393666515, 0.0061234393911902, 0.011124548702532211, 0.01371041187919031, 0.0008702028782882065, 0.000757873516547769, 0.1325245177671377, 0.0904916159236866, 0.06211719179727315, 0.6371948589908778, 0.8303394793633025, 0.8437803467886447, 0.9807378622813894, 0.9743444319815414, 0.9874502760163046, 0.035811714566000186, 0.03986664071508439, 0.01763418408654871, 0.037501184388209374, 0.03495052717794622, 0.027039620588632185, 0.06288348301707503, 0.03398154419775423, 0.05459945108024078, 0.10027683525177622, 0.08754312130611452, 0.0914232805069427, 0.10296332469889602, 0.11385510518923458, 0.13035449345187955, 0.10318531338255343, 0.09243188582146744, 0.09792179329430695, 0.01980643311309127, 9.999999999998899e-05, 0.003163175897495929, 0.015485524768952375, 0.01017198348344095, 0.005542740083296249, 0.0016496935678150804, 0.0009605188259638187, 0.008264704467979889, 0.0072415288119233034, 9.999999999998899e-05, 0.03178036282393293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011920248268743827, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026760557337135116, 0.07690436940770773, 0.08409771063325933, 9.999999999998899e-05, 0.025942295773107027, 9.999999999998899e-05, 0.00817237228387313, 0.013677509278035682, 0.02975658056380126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00040778434469124214, 9.999999999998899e-05, 9.999999999998899e-05, 0.0032534553281570178, 0.00092590494895195, 9.999999999998899e-05, 0.2101603998594731, 0.18610018930649375, 0.21408441125585576, 0.18191696220387732, 0.18050741713909702, 0.1666958034410151, 0.18132377482545614, 0.2090684051235686, 0.18068695305535953, 0.020719708224595568, 0.03899372153445879, 0.01784712008380651, 0.08044134740387143, 0.04246581080873002, 0.05798859064117201, 0.038126534417472935, 0.059375790578798826, 0.03735474660924998, 0.09325038718075651, 0.13954227669079466, 0.10499416880529389, 0.12645628163507405, 0.1296586517538303, 0.12184536502434129, 0.1495503951044973, 0.15304233838859693, 0.16261251658846432, 0.15565140657410448, 0.13539602302536602, 0.1367680647459245, 0.1549194635592347, 0.16921346904619916, 0.1393843015671382, 0.14021026534413172, 0.17377774300845283, 0.1250504666015344, 0.07559769893388124, 0.08135663948209493, 0.07747870029533366, 0.09899259643797398, 0.12217127830981478, 0.10040633112281361, 0.084028122456551, 0.10522358671141696, 0.10081297012710055, 0.14296055898237758, 0.17967447589384933, 0.15103024858479963, 0.1693057860321191, 0.15604310236663355, 0.14281032196320087, 0.13309926656557713, 0.14368465324721924, 0.13708129584120166, 0.05384381751035361, 0.13152435082342073, 0.10963330241971836, 0.13967276756755032, 0.11909037959075852, 0.12872863568042625, 0.09839065784730339, 0.09236598316855038, 0.1040263591467232, 0.15947909900458312, 0.16655660840292863, 0.1925659335427624, 0.1362016079552577, 0.1401694065515109, 0.1442708310112295, 0.1265670404063567, 0.15872728691804183, 0.11927391282736521, 0.12777452745982087, 0.157545686449013, 0.11738417989808081, 0.10654403455782935, 0.1555776591722433, 0.1444004666097597, 0.11868581464872674, 0.13731074644388463, 0.12131027751851342, 0.16840744862649903, 0.17102032452270655, 0.18150055773099594, 0.1722036348647249, 0.1642782896864341, 0.17968202873202777, 0.17941044167760645, 0.1764758274888485, 0.19037336049875853, 0.036935916858303997, 0.03643655726564299, 0.040398648229468925, 0.052118399550436845, 0.041934050099807996, 0.04237810256608332, 0.04663489985568048, 0.059982489889531476, 0.05206378296315184]}, "mutation_prompt": null}
{"id": "22e27321-4592-4b5e-a23f-e5b67e75f680", "solution": "import numpy as np\n\nclass DynamicInertiaHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1, inertia_min=0.1, inertia_max=0.9):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            inertia_weight = self.inertia_min + (self.inertia_max - self.inertia_min) * (budget_used / self.budget)\n            self.beta_min = self.beta_min * inertia_weight\n\n        return best_sol", "name": "DynamicInertiaHybridFireflyDE", "description": "Introduce a dynamic inertia weight to balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ef3e38e-fdfa-4970-8a04-0bf5a3e0cdfc", "metadata": {"aucs": [0.24416321030366084, 0.1975788897274633, 0.30387744126411254, 0.22296840885408198, 0.2964622588469332, 0.21939178732409137, 0.293601054850978, 0.19797503485632562, 0.2841848955049582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027775875995627808, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08135363764168613, 0.058060948745691676, 0.05227852430135094, 0.057005347843870346, 0.0844461680661791, 0.06555228518382306, 0.0760913149030894, 0.0770860481435055, 0.08052980489796224, 0.05398777488243123, 0.03965212423853515, 0.04079880645685385, 0.07427304918607247, 0.04101157454142268, 0.04650395427789267, 0.06647870051441573, 0.030748266245139155, 0.04251449641887506, 0.9895777956411915, 0.9804762624190323, 0.9551368801359423, 0.9862450183301783, 0.9974197538897144, 0.9684234343714869, 0.9741153528731431, 0.9818573363044448, 0.9882210237827542, 0.09226390743487278, 0.08009986216979981, 0.09897995421754058, 0.07098138152163769, 0.06271809536187434, 0.05581287218410491, 0.08248290545808801, 0.12060286635367179, 0.0998941312248498, 0.18771198207559858, 0.13265366678524515, 0.17717508287294537, 0.14390734973642116, 0.19393403637088735, 0.13116250889455294, 0.22070875319303462, 0.16893445733331391, 0.1800660735914158, 0.09803427696923794, 0.006037820925875681, 0.09650529739455016, 0.07108866335230901, 0.01410610910074206, 0.08828282360660489, 0.01108457130745133, 0.038854100271561, 0.04164570364999998, 0.10775179085783171, 0.11167182657604957, 0.04928392649807756, 0.06024946174735546, 0.10296368911580689, 0.08018624127278728, 0.051422851914416645, 0.026647507168871765, 0.05766062960954965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192255252765022, 0.06801602024383246, 0.07571214905588308, 0.04862755901875204, 0.06460518824695449, 0.09035118525210095, 0.04671020088868705, 0.04581428249060171, 0.05973233076515516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004426273803050718, 0.006021284606719357, 0.006610182437166823, 0.01023833945548236, 0.026189952283502627, 0.00551383588694121, 0.03387773407927175, 0.0046078141012363405, 0.023200074112146307, 0.2100554053084822, 0.23125022583636456, 0.22467270879121237, 0.23327389221460548, 0.2199296423707996, 0.20118966229568147, 0.2101898696987431, 0.2074203712044983, 0.21576219214218617, 0.06405221540856965, 0.07164790532157173, 0.0721993529075231, 0.04540448589087531, 0.06775168624952077, 0.05880153018328915, 0.05583834426071499, 0.045170366589503685, 0.052802149418383904, 0.14493863211202496, 0.14046562488250147, 0.13955181912564618, 0.13846004945890455, 0.1387608936881961, 0.1285347793413122, 0.13620161407232467, 0.15541968702599152, 0.1644687973994362, 0.18293631020598144, 0.1782123838204136, 0.18842474408933163, 0.19444078931245634, 0.1699882871859414, 0.20110080351074333, 0.19640894361785932, 0.1995482207006789, 0.2038992320205505, 0.13746425017548758, 0.1258161634355942, 0.1379314087116691, 0.1373573448995492, 0.11907540395796823, 0.12943465374613938, 0.15445802498515349, 0.14247077937628527, 0.1450082439925392, 0.1864765182001925, 0.1756899270383474, 0.17237558104742767, 0.17970500702397363, 0.15413431591245075, 0.18863781789050893, 0.1934733361858414, 0.16111733188150446, 0.15073816297405063, 0.14961254632255427, 0.15714048091562294, 0.16364528864871086, 0.17205172491159504, 0.1617455885277146, 0.16205451671153426, 0.16107900335655645, 0.15819719980854663, 0.1557461316117218, 0.17246550792360882, 0.15957530474673698, 0.142040814340732, 0.16051449722790534, 0.14168996125926692, 0.1695927228432893, 0.16530109291535122, 0.2112009380036749, 0.16482993909320687, 0.1620703110542081, 0.18733094238167047, 0.1533942268027476, 0.18185652921667883, 0.133446751513703, 0.1649472628501122, 0.1849760080209113, 0.20163445089048415, 0.18880476890916553, 0.17823235969886098, 0.19903058323615497, 0.17374196164713318, 0.17900591260525434, 0.17088098280494757, 0.18252365176997187, 0.18419643162923705, 0.18020537944726966, 0.17112052128196664, 0.05421432832534978, 0.051221772629231, 0.05430180999468359, 0.06592838140358948, 0.06959589547066392, 0.059425856992216586, 0.0610191851995, 0.05348113935451204, 0.060984078412267606]}, "mutation_prompt": null}
{"id": "2dae5b85-19e3-441a-9def-eef604b06bf3", "solution": "import numpy as np\n\nclass DynamicInertiaHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1, inertia_min=0.1, inertia_max=0.9):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            inertia_weight = self.inertia_min + (self.inertia_max - self.inertia_min) * (budget_used / self.budget)\n            self.beta_min = self.beta_min * inertia_weight\n\n        return best_sol", "name": "DynamicInertiaHybridFireflyDE", "description": "Introduce a dynamic inertia weight to balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1ef3e38e-fdfa-4970-8a04-0bf5a3e0cdfc", "metadata": {"aucs": [0.24416321030366084, 0.1975788897274633, 0.30387744126411254, 0.22296840885408198, 0.2964622588469332, 0.21939178732409137, 0.293601054850978, 0.19797503485632562, 0.2841848955049582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027775875995627808, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08135363764168613, 0.058060948745691676, 0.05227852430135094, 0.057005347843870346, 0.0844461680661791, 0.06555228518382306, 0.0760913149030894, 0.0770860481435055, 0.08052980489796224, 0.05398777488243123, 0.03965212423853515, 0.04079880645685385, 0.07427304918607247, 0.04101157454142268, 0.04650395427789267, 0.06647870051441573, 0.030748266245139155, 0.04251449641887506, 0.9895777956411915, 0.9804762624190323, 0.9551368801359423, 0.9862450183301783, 0.9974197538897144, 0.9684234343714869, 0.9741153528731431, 0.9818573363044448, 0.9882210237827542, 0.09226390743487278, 0.08009986216979981, 0.09897995421754058, 0.07098138152163769, 0.06271809536187434, 0.05581287218410491, 0.08248290545808801, 0.12060286635367179, 0.0998941312248498, 0.18771198207559858, 0.13265366678524515, 0.17717508287294537, 0.14390734973642116, 0.19393403637088735, 0.13116250889455294, 0.22070875319303462, 0.16893445733331391, 0.1800660735914158, 0.09803427696923794, 0.006037820925875681, 0.09650529739455016, 0.07108866335230901, 0.01410610910074206, 0.08828282360660489, 0.01108457130745133, 0.038854100271561, 0.04164570364999998, 0.10775179085783171, 0.11167182657604957, 0.04928392649807756, 0.06024946174735546, 0.10296368911580689, 0.08018624127278728, 0.051422851914416645, 0.026647507168871765, 0.05766062960954965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192255252765022, 0.06801602024383246, 0.07571214905588308, 0.04862755901875204, 0.06460518824695449, 0.09035118525210095, 0.04671020088868705, 0.04581428249060171, 0.05973233076515516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004426273803050718, 0.006021284606719357, 0.006610182437166823, 0.01023833945548236, 0.026189952283502627, 0.00551383588694121, 0.03387773407927175, 0.0046078141012363405, 0.023200074112146307, 0.2100554053084822, 0.23125022583636456, 0.22467270879121237, 0.23327389221460548, 0.2199296423707996, 0.20118966229568147, 0.2101898696987431, 0.2074203712044983, 0.21576219214218617, 0.06405221540856965, 0.07164790532157173, 0.0721993529075231, 0.04540448589087531, 0.06775168624952077, 0.05880153018328915, 0.05583834426071499, 0.045170366589503685, 0.052802149418383904, 0.14493863211202496, 0.14046562488250147, 0.13955181912564618, 0.13846004945890455, 0.1387608936881961, 0.1285347793413122, 0.13620161407232467, 0.15541968702599152, 0.1644687973994362, 0.18293631020598144, 0.1782123838204136, 0.18842474408933163, 0.19444078931245634, 0.1699882871859414, 0.20110080351074333, 0.19640894361785932, 0.1995482207006789, 0.2038992320205505, 0.13746425017548758, 0.1258161634355942, 0.1379314087116691, 0.1373573448995492, 0.11907540395796823, 0.12943465374613938, 0.15445802498515349, 0.14247077937628527, 0.1450082439925392, 0.1864765182001925, 0.1756899270383474, 0.17237558104742767, 0.17970500702397363, 0.15413431591245075, 0.18863781789050893, 0.1934733361858414, 0.16111733188150446, 0.15073816297405063, 0.14961254632255427, 0.15714048091562294, 0.16364528864871086, 0.17205172491159504, 0.1617455885277146, 0.16205451671153426, 0.16107900335655645, 0.15819719980854663, 0.1557461316117218, 0.17246550792360882, 0.15957530474673698, 0.142040814340732, 0.16051449722790534, 0.14168996125926692, 0.1695927228432893, 0.16530109291535122, 0.2112009380036749, 0.16482993909320687, 0.1620703110542081, 0.18733094238167047, 0.1533942268027476, 0.18185652921667883, 0.133446751513703, 0.1649472628501122, 0.1849760080209113, 0.20163445089048415, 0.18880476890916553, 0.17823235969886098, 0.19903058323615497, 0.17374196164713318, 0.17900591260525434, 0.17088098280494757, 0.18252365176997187, 0.18419643162923705, 0.18020537944726966, 0.17112052128196664, 0.05421432832534978, 0.051221772629231, 0.05430180999468359, 0.06592838140358948, 0.06959589547066392, 0.059425856992216586, 0.0610191851995, 0.05348113935451204, 0.060984078412267606]}, "mutation_prompt": null}
{"id": "42bec8b9-48a1-4678-a179-ecaf7cfe4632", "solution": "import numpy as np\n\nclass DynamicInertiaHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1, inertia_min=0.1, inertia_max=0.9):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            inertia_weight = self.inertia_min + (self.inertia_max - self.inertia_min) * (budget_used / self.budget)\n            self.beta_min = self.beta_min * inertia_weight\n\n        return best_sol", "name": "DynamicInertiaHybridFireflyDE", "description": "Introduce a dynamic inertia weight to balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1ef3e38e-fdfa-4970-8a04-0bf5a3e0cdfc", "metadata": {"aucs": [0.24416321030366084, 0.1975788897274633, 0.30387744126411254, 0.22296840885408198, 0.2964622588469332, 0.21939178732409137, 0.293601054850978, 0.19797503485632562, 0.2841848955049582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027775875995627808, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08135363764168613, 0.058060948745691676, 0.05227852430135094, 0.057005347843870346, 0.0844461680661791, 0.06555228518382306, 0.0760913149030894, 0.0770860481435055, 0.08052980489796224, 0.05398777488243123, 0.03965212423853515, 0.04079880645685385, 0.07427304918607247, 0.04101157454142268, 0.04650395427789267, 0.06647870051441573, 0.030748266245139155, 0.04251449641887506, 0.9895777956411915, 0.9804762624190323, 0.9551368801359423, 0.9862450183301783, 0.9974197538897144, 0.9684234343714869, 0.9741153528731431, 0.9818573363044448, 0.9882210237827542, 0.09226390743487278, 0.08009986216979981, 0.09897995421754058, 0.07098138152163769, 0.06271809536187434, 0.05581287218410491, 0.08248290545808801, 0.12060286635367179, 0.0998941312248498, 0.18771198207559858, 0.13265366678524515, 0.17717508287294537, 0.14390734973642116, 0.19393403637088735, 0.13116250889455294, 0.22070875319303462, 0.16893445733331391, 0.1800660735914158, 0.09803427696923794, 0.006037820925875681, 0.09650529739455016, 0.07108866335230901, 0.01410610910074206, 0.08828282360660489, 0.01108457130745133, 0.038854100271561, 0.04164570364999998, 0.10775179085783171, 0.11167182657604957, 0.04928392649807756, 0.06024946174735546, 0.10296368911580689, 0.08018624127278728, 0.051422851914416645, 0.026647507168871765, 0.05766062960954965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192255252765022, 0.06801602024383246, 0.07571214905588308, 0.04862755901875204, 0.06460518824695449, 0.09035118525210095, 0.04671020088868705, 0.04581428249060171, 0.05973233076515516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004426273803050718, 0.006021284606719357, 0.006610182437166823, 0.01023833945548236, 0.026189952283502627, 0.00551383588694121, 0.03387773407927175, 0.0046078141012363405, 0.023200074112146307, 0.2100554053084822, 0.23125022583636456, 0.22467270879121237, 0.23327389221460548, 0.2199296423707996, 0.20118966229568147, 0.2101898696987431, 0.2074203712044983, 0.21576219214218617, 0.06405221540856965, 0.07164790532157173, 0.0721993529075231, 0.04540448589087531, 0.06775168624952077, 0.05880153018328915, 0.05583834426071499, 0.045170366589503685, 0.052802149418383904, 0.14493863211202496, 0.14046562488250147, 0.13955181912564618, 0.13846004945890455, 0.1387608936881961, 0.1285347793413122, 0.13620161407232467, 0.15541968702599152, 0.1644687973994362, 0.18293631020598144, 0.1782123838204136, 0.18842474408933163, 0.19444078931245634, 0.1699882871859414, 0.20110080351074333, 0.19640894361785932, 0.1995482207006789, 0.2038992320205505, 0.13746425017548758, 0.1258161634355942, 0.1379314087116691, 0.1373573448995492, 0.11907540395796823, 0.12943465374613938, 0.15445802498515349, 0.14247077937628527, 0.1450082439925392, 0.1864765182001925, 0.1756899270383474, 0.17237558104742767, 0.17970500702397363, 0.15413431591245075, 0.18863781789050893, 0.1934733361858414, 0.16111733188150446, 0.15073816297405063, 0.14961254632255427, 0.15714048091562294, 0.16364528864871086, 0.17205172491159504, 0.1617455885277146, 0.16205451671153426, 0.16107900335655645, 0.15819719980854663, 0.1557461316117218, 0.17246550792360882, 0.15957530474673698, 0.142040814340732, 0.16051449722790534, 0.14168996125926692, 0.1695927228432893, 0.16530109291535122, 0.2112009380036749, 0.16482993909320687, 0.1620703110542081, 0.18733094238167047, 0.1533942268027476, 0.18185652921667883, 0.133446751513703, 0.1649472628501122, 0.1849760080209113, 0.20163445089048415, 0.18880476890916553, 0.17823235969886098, 0.19903058323615497, 0.17374196164713318, 0.17900591260525434, 0.17088098280494757, 0.18252365176997187, 0.18419643162923705, 0.18020537944726966, 0.17112052128196664, 0.05421432832534978, 0.051221772629231, 0.05430180999468359, 0.06592838140358948, 0.06959589547066392, 0.059425856992216586, 0.0610191851995, 0.05348113935451204, 0.060984078412267606]}, "mutation_prompt": null}
{"id": "46c01062-31c3-4c6f-944b-16119de44eb9", "solution": "import numpy as np\n\nclass DynamicInertiaHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1, inertia_min=0.1, inertia_max=0.9):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            inertia_weight = self.inertia_min + (self.inertia_max - self.inertia_min) * (budget_used / self.budget)\n            self.beta_min = self.beta_min * inertia_weight\n\n        return best_sol", "name": "DynamicInertiaHybridFireflyDE", "description": "Introduce a dynamic inertia weight to balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "1ef3e38e-fdfa-4970-8a04-0bf5a3e0cdfc", "metadata": {"aucs": [0.24416321030366084, 0.1975788897274633, 0.30387744126411254, 0.22296840885408198, 0.2964622588469332, 0.21939178732409137, 0.293601054850978, 0.19797503485632562, 0.2841848955049582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027775875995627808, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08135363764168613, 0.058060948745691676, 0.05227852430135094, 0.057005347843870346, 0.0844461680661791, 0.06555228518382306, 0.0760913149030894, 0.0770860481435055, 0.08052980489796224, 0.05398777488243123, 0.03965212423853515, 0.04079880645685385, 0.07427304918607247, 0.04101157454142268, 0.04650395427789267, 0.06647870051441573, 0.030748266245139155, 0.04251449641887506, 0.9895777956411915, 0.9804762624190323, 0.9551368801359423, 0.9862450183301783, 0.9974197538897144, 0.9684234343714869, 0.9741153528731431, 0.9818573363044448, 0.9882210237827542, 0.09226390743487278, 0.08009986216979981, 0.09897995421754058, 0.07098138152163769, 0.06271809536187434, 0.05581287218410491, 0.08248290545808801, 0.12060286635367179, 0.0998941312248498, 0.18771198207559858, 0.13265366678524515, 0.17717508287294537, 0.14390734973642116, 0.19393403637088735, 0.13116250889455294, 0.22070875319303462, 0.16893445733331391, 0.1800660735914158, 0.09803427696923794, 0.006037820925875681, 0.09650529739455016, 0.07108866335230901, 0.01410610910074206, 0.08828282360660489, 0.01108457130745133, 0.038854100271561, 0.04164570364999998, 0.10775179085783171, 0.11167182657604957, 0.04928392649807756, 0.06024946174735546, 0.10296368911580689, 0.08018624127278728, 0.051422851914416645, 0.026647507168871765, 0.05766062960954965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192255252765022, 0.06801602024383246, 0.07571214905588308, 0.04862755901875204, 0.06460518824695449, 0.09035118525210095, 0.04671020088868705, 0.04581428249060171, 0.05973233076515516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004426273803050718, 0.006021284606719357, 0.006610182437166823, 0.01023833945548236, 0.026189952283502627, 0.00551383588694121, 0.03387773407927175, 0.0046078141012363405, 0.023200074112146307, 0.2100554053084822, 0.23125022583636456, 0.22467270879121237, 0.23327389221460548, 0.2199296423707996, 0.20118966229568147, 0.2101898696987431, 0.2074203712044983, 0.21576219214218617, 0.06405221540856965, 0.07164790532157173, 0.0721993529075231, 0.04540448589087531, 0.06775168624952077, 0.05880153018328915, 0.05583834426071499, 0.045170366589503685, 0.052802149418383904, 0.14493863211202496, 0.14046562488250147, 0.13955181912564618, 0.13846004945890455, 0.1387608936881961, 0.1285347793413122, 0.13620161407232467, 0.15541968702599152, 0.1644687973994362, 0.18293631020598144, 0.1782123838204136, 0.18842474408933163, 0.19444078931245634, 0.1699882871859414, 0.20110080351074333, 0.19640894361785932, 0.1995482207006789, 0.2038992320205505, 0.13746425017548758, 0.1258161634355942, 0.1379314087116691, 0.1373573448995492, 0.11907540395796823, 0.12943465374613938, 0.15445802498515349, 0.14247077937628527, 0.1450082439925392, 0.1864765182001925, 0.1756899270383474, 0.17237558104742767, 0.17970500702397363, 0.15413431591245075, 0.18863781789050893, 0.1934733361858414, 0.16111733188150446, 0.15073816297405063, 0.14961254632255427, 0.15714048091562294, 0.16364528864871086, 0.17205172491159504, 0.1617455885277146, 0.16205451671153426, 0.16107900335655645, 0.15819719980854663, 0.1557461316117218, 0.17246550792360882, 0.15957530474673698, 0.142040814340732, 0.16051449722790534, 0.14168996125926692, 0.1695927228432893, 0.16530109291535122, 0.2112009380036749, 0.16482993909320687, 0.1620703110542081, 0.18733094238167047, 0.1533942268027476, 0.18185652921667883, 0.133446751513703, 0.1649472628501122, 0.1849760080209113, 0.20163445089048415, 0.18880476890916553, 0.17823235969886098, 0.19903058323615497, 0.17374196164713318, 0.17900591260525434, 0.17088098280494757, 0.18252365176997187, 0.18419643162923705, 0.18020537944726966, 0.17112052128196664, 0.05421432832534978, 0.051221772629231, 0.05430180999468359, 0.06592838140358948, 0.06959589547066392, 0.059425856992216586, 0.0610191851995, 0.05348113935451204, 0.060984078412267606]}, "mutation_prompt": null}
{"id": "322238b0-f034-40ef-a9b0-19a51ca686b8", "solution": "import numpy as np\n\nclass DynamicInertiaHybridFireflyDE(HybridFireflyDE):\n    def __init__(self, budget, dim, alpha=0.5, beta_min=0.2, gamma=0.5, pop_size=20, adapt_rate=0.1, inertia_min=0.1, inertia_max=0.9):\n        super().__init__(budget, dim, alpha, beta_min, gamma, pop_size)\n        self.adapt_rate = adapt_rate\n        self.chaos_param = 0.1\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        def chaotic_map(x):\n            return 4 * x * (1 - x)\n\n        def levy_flight():\n            sigma1 = (np.math.gamma(1 + self.alpha) * np.math.sin(np.pi * self.alpha / 2) / (np.math.gamma((1 + self.alpha) / 2) * self.alpha * 2 ** ((self.alpha - 1) / 2))) ** (1 / self.alpha)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, self.dim)\n            v = np.random.normal(0, sigma2, self.dim)\n            step = u / np.power(np.abs(v), 1 / self.alpha)\n            return step\n\n        def de_mutate(x_r1, x_r2, x_r3, F=0.5):\n            return x_r1 + F * (x_r2 - x_r3)\n\n        def clipToBounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        pop = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = [func(ind) for ind in pop]\n        best_idx = np.argmin(fitness)\n        best_sol = pop[best_idx]\n        budget_used = self.pop_size\n        adapt_count = 0\n        chaos_idx = np.random.randint(self.dim)\n\n        while budget_used < self.budget:\n            new_pop = []\n            for i in range(self.pop_size):\n                beta = self.beta_min + (1 - self.beta_min) * np.random.rand()\n                attractor = pop[best_idx] + beta * (pop[i] - pop[best_idx]) + levy_flight() * chaotic_map(pop[i][chaos_idx] * self.chaos_param)\n                trial = clipToBounds(attractor)\n\n                x_r1, x_r2, x_r3 = pop[np.random.choice(range(self.pop_size), 3, replace=False)]\n                F = 0.5 + np.random.normal(0, self.adapt_rate)\n                mutant = de_mutate(x_r1, x_r2, x_r3, F)\n                mutant = clipToBounds(mutant)\n\n                if func(mutant) < func(trial):\n                    new_pop.append(mutant)\n                    budget_used += 1\n                    adapt_count += 1\n                else:\n                    new_pop.append(trial)\n                    budget_used += 1\n\n                if adapt_count >= 15:\n                    self.adapt_rate *= 0.9\n                    adapt_count = 0\n\n            pop = np.array(new_pop)\n            fitness = [func(ind) for ind in pop]\n            best_idx = np.argmin(fitness)\n            best_sol = pop[best_idx]\n\n            inertia_weight = self.inertia_min + (self.inertia_max - self.inertia_min) * (budget_used / self.budget)\n            self.beta_min = self.beta_min * inertia_weight\n\n        return best_sol", "name": "DynamicInertiaHybridFireflyDE", "description": "Introduce a dynamic inertia weight to balance exploration and exploitation in the optimization process.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1ef3e38e-fdfa-4970-8a04-0bf5a3e0cdfc", "metadata": {"aucs": [0.24416321030366084, 0.1975788897274633, 0.30387744126411254, 0.22296840885408198, 0.2964622588469332, 0.21939178732409137, 0.293601054850978, 0.19797503485632562, 0.2841848955049582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027775875995627808, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08135363764168613, 0.058060948745691676, 0.05227852430135094, 0.057005347843870346, 0.0844461680661791, 0.06555228518382306, 0.0760913149030894, 0.0770860481435055, 0.08052980489796224, 0.05398777488243123, 0.03965212423853515, 0.04079880645685385, 0.07427304918607247, 0.04101157454142268, 0.04650395427789267, 0.06647870051441573, 0.030748266245139155, 0.04251449641887506, 0.9895777956411915, 0.9804762624190323, 0.9551368801359423, 0.9862450183301783, 0.9974197538897144, 0.9684234343714869, 0.9741153528731431, 0.9818573363044448, 0.9882210237827542, 0.09226390743487278, 0.08009986216979981, 0.09897995421754058, 0.07098138152163769, 0.06271809536187434, 0.05581287218410491, 0.08248290545808801, 0.12060286635367179, 0.0998941312248498, 0.18771198207559858, 0.13265366678524515, 0.17717508287294537, 0.14390734973642116, 0.19393403637088735, 0.13116250889455294, 0.22070875319303462, 0.16893445733331391, 0.1800660735914158, 0.09803427696923794, 0.006037820925875681, 0.09650529739455016, 0.07108866335230901, 0.01410610910074206, 0.08828282360660489, 0.01108457130745133, 0.038854100271561, 0.04164570364999998, 0.10775179085783171, 0.11167182657604957, 0.04928392649807756, 0.06024946174735546, 0.10296368911580689, 0.08018624127278728, 0.051422851914416645, 0.026647507168871765, 0.05766062960954965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06192255252765022, 0.06801602024383246, 0.07571214905588308, 0.04862755901875204, 0.06460518824695449, 0.09035118525210095, 0.04671020088868705, 0.04581428249060171, 0.05973233076515516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004426273803050718, 0.006021284606719357, 0.006610182437166823, 0.01023833945548236, 0.026189952283502627, 0.00551383588694121, 0.03387773407927175, 0.0046078141012363405, 0.023200074112146307, 0.2100554053084822, 0.23125022583636456, 0.22467270879121237, 0.23327389221460548, 0.2199296423707996, 0.20118966229568147, 0.2101898696987431, 0.2074203712044983, 0.21576219214218617, 0.06405221540856965, 0.07164790532157173, 0.0721993529075231, 0.04540448589087531, 0.06775168624952077, 0.05880153018328915, 0.05583834426071499, 0.045170366589503685, 0.052802149418383904, 0.14493863211202496, 0.14046562488250147, 0.13955181912564618, 0.13846004945890455, 0.1387608936881961, 0.1285347793413122, 0.13620161407232467, 0.15541968702599152, 0.1644687973994362, 0.18293631020598144, 0.1782123838204136, 0.18842474408933163, 0.19444078931245634, 0.1699882871859414, 0.20110080351074333, 0.19640894361785932, 0.1995482207006789, 0.2038992320205505, 0.13746425017548758, 0.1258161634355942, 0.1379314087116691, 0.1373573448995492, 0.11907540395796823, 0.12943465374613938, 0.15445802498515349, 0.14247077937628527, 0.1450082439925392, 0.1864765182001925, 0.1756899270383474, 0.17237558104742767, 0.17970500702397363, 0.15413431591245075, 0.18863781789050893, 0.1934733361858414, 0.16111733188150446, 0.15073816297405063, 0.14961254632255427, 0.15714048091562294, 0.16364528864871086, 0.17205172491159504, 0.1617455885277146, 0.16205451671153426, 0.16107900335655645, 0.15819719980854663, 0.1557461316117218, 0.17246550792360882, 0.15957530474673698, 0.142040814340732, 0.16051449722790534, 0.14168996125926692, 0.1695927228432893, 0.16530109291535122, 0.2112009380036749, 0.16482993909320687, 0.1620703110542081, 0.18733094238167047, 0.1533942268027476, 0.18185652921667883, 0.133446751513703, 0.1649472628501122, 0.1849760080209113, 0.20163445089048415, 0.18880476890916553, 0.17823235969886098, 0.19903058323615497, 0.17374196164713318, 0.17900591260525434, 0.17088098280494757, 0.18252365176997187, 0.18419643162923705, 0.18020537944726966, 0.17112052128196664, 0.05421432832534978, 0.051221772629231, 0.05430180999468359, 0.06592838140358948, 0.06959589547066392, 0.059425856992216586, 0.0610191851995, 0.05348113935451204, 0.060984078412267606]}, "mutation_prompt": null}
