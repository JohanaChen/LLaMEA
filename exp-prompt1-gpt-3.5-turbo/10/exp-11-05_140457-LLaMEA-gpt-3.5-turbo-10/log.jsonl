{"id": "7ea19964-c915-4347-bcc5-86df4107bb2c", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.quantum_factor = quantum_factor\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n\n        return global_best", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm that utilizes quantum mechanics principles to enhance particle swarm optimization for black box optimization tasks.", "configspace": "", "generation": 0, "fitness": 0.19585317511669106, "feedback": "The algorithm QIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": null, "metadata": {"aucs": [0.3707993836332991, 0.36288418195612426, 0.36256174898332705, 0.37644375576146594, 0.34823775259145995, 0.35093729175013255, 0.35662114256919475, 0.3693849442520676, 0.3508670078394267, 0.032533702811574416, 0.01827464854329408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017461471249735072, 0.01000535842272443, 9.999999999998899e-05, 0.08422618627269018, 0.10934584176987316, 0.13332140477359622, 0.1137451995739086, 0.11826944847387444, 0.0952339704880073, 0.08008832403475519, 0.13169574298061237, 0.07767080752835731, 0.09025079527558233, 0.08576398103863192, 0.07633198925254037, 0.09370229680505071, 0.08578687035732202, 0.10963481687350429, 0.10590356278915847, 0.08711209345184179, 0.10466923305086262, 0.9904282105333916, 0.9913153955923232, 0.9922487373734183, 0.9897178332085891, 0.9905235514927733, 0.9873232848954681, 0.989703886113354, 0.9906588004157855, 0.9879632642871543, 0.23976989824993378, 0.22797251874332602, 0.22093204771758967, 0.21523443477181636, 0.23125217887692973, 0.25248753169645577, 0.2319807413943369, 0.23178539337892456, 0.22440667760519684, 0.25852071302451374, 0.23090644276864603, 0.29402903482444775, 0.23104019586276936, 0.2631528862297312, 0.23731649887396267, 0.26274190946518483, 0.27713940829060535, 0.2911725075337661, 0.14266801955977315, 0.149856431343795, 0.15365148921886596, 0.11697334422860517, 0.15085816007418928, 0.12851137638953258, 0.1544260378829957, 0.13996473015699085, 0.127238278982424, 0.13756075354420738, 0.14789370026836912, 0.1429555008938389, 0.142156895306069, 0.11072414616230253, 0.1325537674773406, 0.06154174997032136, 9.999999999998899e-05, 0.126308599535515, 9.999999999998899e-05, 9.999999999998899e-05, 0.02746312011566554, 0.006566893060816592, 9.999999999998899e-05, 0.001234633708396049, 9.999999999998899e-05, 9.999999999998899e-05, 0.008472590731497975, 0.13888615496068402, 0.03782285118066897, 0.11482093657785064, 0.10306770911931762, 0.012851120070916267, 0.018352604788084315, 0.07041491374854503, 0.053876280423193035, 0.05748240453961839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05989840249672029, 0.06787604174211015, 0.06427168587455212, 0.06760733207101, 0.06686880009182317, 0.08771811921287576, 0.07527768720849959, 0.067789640977307, 0.0689090490833183, 0.36355299445908107, 0.3500399819747657, 0.3611779496372265, 0.36355375768904263, 0.34804520820789875, 0.3500054096238425, 0.347068946099955, 0.3480505230944708, 0.3741749049716465, 0.09430670398509133, 0.09563213854906893, 0.10585046187527536, 0.10546884817781943, 0.08188528286571961, 0.10848780884537768, 0.09879134889419261, 0.12379433693598185, 0.10281426418723183, 0.19803368672908062, 0.20373859408992356, 0.13308144588974424, 0.22401909154114819, 0.22087163969446844, 0.182698854897282, 0.2275968209835424, 0.14458968634795788, 0.2060118427584221, 0.27273947492687634, 0.2561258302255014, 0.2605047574639401, 0.26470248775711436, 0.25913215823436464, 0.2445933055130305, 0.25695215058231446, 0.264750700730361, 0.26062821268717606, 0.21808931014497024, 0.1887994640854589, 0.19533407920586965, 0.15397375958501303, 0.20027815153968886, 0.20678563362849223, 0.19064802701072292, 0.19512364569999807, 0.19709664907468483, 0.21523436225925185, 0.19234543342670685, 0.20927505673947644, 0.20853509424438654, 0.21081689952910243, 0.22029239105456777, 0.20383626797029042, 0.2232429446758062, 0.18630021431115873, 0.1777068915434118, 0.18571812919724562, 0.20159399491474672, 0.18218900701251428, 0.1813618298562718, 0.19006053992615302, 0.17616401765911938, 0.18571802018149763, 0.18769346778298146, 0.44617258916790525, 0.1666895507821866, 0.15384176611455647, 0.45433049766896205, 0.19922494432443993, 0.1975763404795583, 0.11297521442373304, 0.1704136429727391, 0.48650494238015407, 0.47545228909963566, 0.15616881520997772, 0.07323609661021169, 0.20865784349200256, 0.16911866958848898, 0.20846173059186845, 0.1050014028763, 0.10512456336251852, 0.4356634851694644, 0.18355766603534618, 0.18120461233072105, 0.19461993132146327, 0.19210129027720568, 0.1781384676677491, 0.2001721666262466, 0.1867414295669021, 0.17483894137230405, 0.18049206372007554, 0.09781719899738217, 0.08420244349208028, 0.08286035563685912, 0.08814406554616339, 0.09742822873190615, 0.09183373945552886, 0.10526582219602754, 0.08903797441860883, 0.09666925895948475]}, "mutation_prompt": null}
{"id": "a8baed42-0a3e-45c8-8497-1be8fb4af4bf", "solution": "import numpy as np\n\nclass ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, inertia_decay=0.99):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.inertia_decay = inertia_decay\n\n    def __call__(self, func):\n        particles = self.initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = self.inertia_weight * self.inertia_decay ** t\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Improved Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm with dynamic inertia weight to balance exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedQIPSO' object has no attribute 'initialize_particles'\").", "error": "AttributeError(\"'ImprovedQIPSO' object has no attribute 'initialize_particles'\")", "parent_id": "7ea19964-c915-4347-bcc5-86df4107bb2c", "metadata": {}, "mutation_prompt": null}
{"id": "7c23652b-8fa9-4e6f-be86-e70507151538", "solution": "import numpy as np\n\nclass ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.min_inertia = 0.1\n        self.max_inertia = 0.9\n\n    def __call__(self, func):\n        def adapt_inertia(iteration):\n            return self.min_inertia + (self.max_inertia - self.min_inertia) * (self.budget - iteration) / self.budget\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for iter_count in range(self.budget):\n            inertia = adapt_inertia(iter_count)\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = inertia * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Improved Quantum-Inspired Particle Swarm Optimization (QIPSO) with dynamic inertia weight adjustment for enhanced exploration and exploitation balance.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_particles' is not defined\").", "error": "NameError(\"name 'initialize_particles' is not defined\")", "parent_id": "7ea19964-c915-4347-bcc5-86df4107bb2c", "metadata": {}, "mutation_prompt": null}
{"id": "7df2ce24-6b9d-4f5e-a2d3-4506cb03e54a", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.quantum_factor = quantum_factor\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n\n        return global_best", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm that utilizes quantum mechanics principles to enhance particle swarm optimization for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ea19964-c915-4347-bcc5-86df4107bb2c", "metadata": {"aucs": [0.3707993836332991, 0.36288418195612426, 0.36256174898332705, 0.37644375576146594, 0.34823775259145995, 0.35093729175013255, 0.35662114256919475, 0.3693849442520676, 0.3508670078394267, 0.032533702811574416, 0.01827464854329408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017461471249735072, 0.01000535842272443, 9.999999999998899e-05, 0.08422618627269018, 0.10934584176987316, 0.13332140477359622, 0.1137451995739086, 0.11826944847387444, 0.0952339704880073, 0.08008832403475519, 0.13169574298061237, 0.07767080752835731, 0.09025079527558233, 0.08576398103863192, 0.07633198925254037, 0.09370229680505071, 0.08578687035732202, 0.10963481687350429, 0.10590356278915847, 0.08711209345184179, 0.10466923305086262, 0.9904282105333916, 0.9913153955923232, 0.9922487373734183, 0.9897178332085891, 0.9905235514927733, 0.9873232848954681, 0.989703886113354, 0.9906588004157855, 0.9879632642871543, 0.23976989824993378, 0.22797251874332602, 0.22093204771758967, 0.21523443477181636, 0.23125217887692973, 0.25248753169645577, 0.2319807413943369, 0.23178539337892456, 0.22440667760519684, 0.25852071302451374, 0.23090644276864603, 0.29402903482444775, 0.23104019586276936, 0.2631528862297312, 0.23731649887396267, 0.26274190946518483, 0.27713940829060535, 0.2911725075337661, 0.14266801955977315, 0.149856431343795, 0.15365148921886596, 0.11697334422860517, 0.15085816007418928, 0.12851137638953258, 0.1544260378829957, 0.13996473015699085, 0.127238278982424, 0.13756075354420738, 0.14789370026836912, 0.1429555008938389, 0.142156895306069, 0.11072414616230253, 0.1325537674773406, 0.06154174997032136, 9.999999999998899e-05, 0.126308599535515, 9.999999999998899e-05, 9.999999999998899e-05, 0.02746312011566554, 0.006566893060816592, 9.999999999998899e-05, 0.001234633708396049, 9.999999999998899e-05, 9.999999999998899e-05, 0.008472590731497975, 0.13888615496068402, 0.03782285118066897, 0.11482093657785064, 0.10306770911931762, 0.012851120070916267, 0.018352604788084315, 0.07041491374854503, 0.053876280423193035, 0.05748240453961839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05989840249672029, 0.06787604174211015, 0.06427168587455212, 0.06760733207101, 0.06686880009182317, 0.08771811921287576, 0.07527768720849959, 0.067789640977307, 0.0689090490833183, 0.36355299445908107, 0.3500399819747657, 0.3611779496372265, 0.36355375768904263, 0.34804520820789875, 0.3500054096238425, 0.347068946099955, 0.3480505230944708, 0.3741749049716465, 0.09430670398509133, 0.09563213854906893, 0.10585046187527536, 0.10546884817781943, 0.08188528286571961, 0.10848780884537768, 0.09879134889419261, 0.12379433693598185, 0.10281426418723183, 0.19803368672908062, 0.20373859408992356, 0.13308144588974424, 0.22401909154114819, 0.22087163969446844, 0.182698854897282, 0.2275968209835424, 0.14458968634795788, 0.2060118427584221, 0.27273947492687634, 0.2561258302255014, 0.2605047574639401, 0.26470248775711436, 0.25913215823436464, 0.2445933055130305, 0.25695215058231446, 0.264750700730361, 0.26062821268717606, 0.21808931014497024, 0.1887994640854589, 0.19533407920586965, 0.15397375958501303, 0.20027815153968886, 0.20678563362849223, 0.19064802701072292, 0.19512364569999807, 0.19709664907468483, 0.21523436225925185, 0.19234543342670685, 0.20927505673947644, 0.20853509424438654, 0.21081689952910243, 0.22029239105456777, 0.20383626797029042, 0.2232429446758062, 0.18630021431115873, 0.1777068915434118, 0.18571812919724562, 0.20159399491474672, 0.18218900701251428, 0.1813618298562718, 0.19006053992615302, 0.17616401765911938, 0.18571802018149763, 0.18769346778298146, 0.44617258916790525, 0.1666895507821866, 0.15384176611455647, 0.45433049766896205, 0.19922494432443993, 0.1975763404795583, 0.11297521442373304, 0.1704136429727391, 0.48650494238015407, 0.47545228909963566, 0.15616881520997772, 0.07323609661021169, 0.20865784349200256, 0.16911866958848898, 0.20846173059186845, 0.1050014028763, 0.10512456336251852, 0.4356634851694644, 0.18355766603534618, 0.18120461233072105, 0.19461993132146327, 0.19210129027720568, 0.1781384676677491, 0.2001721666262466, 0.1867414295669021, 0.17483894137230405, 0.18049206372007554, 0.09781719899738217, 0.08420244349208028, 0.08286035563685912, 0.08814406554616339, 0.09742822873190615, 0.09183373945552886, 0.10526582219602754, 0.08903797441860883, 0.09666925895948475]}, "mutation_prompt": null}
{"id": "85ca4c07-34c3-4d51-98e2-b6bd3f7b4cea", "solution": "import numpy as np\n\nclass ImprovedQIPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.quantum_factor = quantum_factor\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                r1, r2 = np.random.rand(), np.random.rand()\n                inertia_weight = self.inertia_weight + 0.1 * (r1 - 0.5)\n                cognitive_weight = self.cognitive_weight + 0.1 * (r2 - 0.5)\n                velocities[i] = inertia_weight * velocities[i] + cognitive_weight * cognitive_component + self.social_weight * social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Improved Quantum-Inspired Particle Swarm Optimization (QIPSO) with dynamic adaptation of algorithm parameters to enhance exploration and exploitation.", "configspace": "", "generation": 4, "fitness": 0.17178725986003648, "feedback": "The algorithm ImprovedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.20.", "error": "", "parent_id": "7ea19964-c915-4347-bcc5-86df4107bb2c", "metadata": {"aucs": [0.3146331479608282, 0.31182963273564646, 0.32238568921001665, 0.3314205738622532, 0.29940513070999775, 0.3178073381061338, 0.2959788394116315, 0.3406260644127266, 0.34652627523618706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07650822585530603, 0.07577110208109539, 0.08058218657875438, 0.07514600340645539, 0.07281621668368266, 0.07586427983025057, 0.08115123980980532, 0.08319074581056651, 0.08491136717847225, 0.062130650309470736, 0.08589186175251029, 0.06673855015245012, 0.06629855419692487, 0.047761697215612964, 0.06863828018171192, 0.06177374839357763, 0.07721668077009869, 0.07129088827071006, 0.9924886280217011, 0.9944672223983096, 0.9938738070383101, 0.9930791693004547, 0.9936217960208259, 0.9943184433679038, 0.9949712881526485, 0.9937144598939645, 0.9943766296534886, 0.1675419885275522, 0.17301771450687542, 0.1705810941137239, 0.19677362337203108, 0.17989509178211371, 0.2152918861420322, 0.17457141609468452, 0.17154776402359817, 0.17298520281281327, 0.20049189799900557, 0.16398869547223827, 0.22303149853169424, 0.2153432097205742, 0.20441125498267876, 0.20095798991530367, 0.25542904599779026, 0.176252831210023, 0.18580765904257202, 0.12290332864400444, 0.10975659406807559, 0.09229811238696817, 0.09293185583003394, 0.11721500482322122, 0.11814172556720093, 0.0999546300241182, 0.09632537744244396, 0.09683909704240978, 0.0929713202279796, 0.08082723699299399, 0.09507931502479028, 0.09025763030258804, 0.10379576720685946, 0.08448920969042173, 0.1146001411156572, 0.037465290142774776, 0.09134126429305178, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00016603827236016944, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04164044537656775, 0.03646239113078331, 0.039410099397645726, 0.09085204478444886, 0.008231710501916178, 9.999999999998899e-05, 0.05450270916314626, 0.03074252405530009, 0.044959669559827886, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04995815323051955, 0.02277961343479107, 0.03667317499992262, 0.02549114657596896, 0.03521043479523578, 0.04424140687000022, 0.033283033407645046, 0.03948844640036897, 0.03985499438367457, 0.2929240647102591, 0.2864126790098417, 0.2960975830598148, 0.32672996897214956, 0.295065445630765, 0.2948113623126215, 0.315397935793135, 0.3072452582043277, 0.2832556995813357, 0.07343958129996009, 0.08543210492091735, 0.08470416988300988, 0.08289816587801069, 0.07340735992803005, 0.1013439464748842, 0.06273947362920806, 0.06391737701663058, 0.0823018642981801, 0.16685749188356458, 0.16567918194385134, 0.13027439925131878, 0.16610573703261466, 0.1727915514970908, 0.1682448938401967, 0.1652410956146938, 0.1548827859049785, 0.21280829881070262, 0.2226037300043524, 0.22316292830487372, 0.208103295245738, 0.19919389570468637, 0.218772089554657, 0.22931147583802658, 0.23401683583870259, 0.22418988565013276, 0.2301852806321567, 0.16084178280563288, 0.1616737536818852, 0.14554327765517117, 0.09990707263950849, 0.16886039768117866, 0.16732626260182437, 0.17290404258355796, 0.16346599665000416, 0.1727801873287491, 0.16260284864550612, 0.12969244242970268, 0.17627811114984837, 0.19991522091624792, 0.18417955704987787, 0.16558600654160383, 0.19044639579150135, 0.21051090594358823, 0.1817604239703744, 0.16711847420564085, 0.16832371040264993, 0.1877723029343944, 0.16809878755309615, 0.1709491901246818, 0.18271372784551965, 0.179255349127045, 0.17991713498505635, 0.1720858549935339, 0.4390126995548176, 0.16247325359609055, 0.15256388460306647, 0.3521126782255217, 0.19150144078123243, 0.16580173232814321, 0.14705114951013676, 0.16967020598807736, 0.3833752926762496, 0.3919452368684415, 0.14737171804255833, 0.18703958622404293, 0.251528943062315, 0.29912893174738997, 0.20443161945312194, 0.19011668265751536, 0.1915504273936257, 0.24189392462876536, 0.1878459461648614, 0.20516042438076987, 0.19145934802481013, 0.21147059518676337, 0.1844955176278541, 0.1719594334478075, 0.17498917263270064, 0.2080305600773923, 0.18016863021238205, 0.06568844416715569, 0.06803517085666977, 0.08496620990887915, 0.06707430973683126, 0.06451196941595227, 0.07624963834712584, 0.07133792606493006, 0.06541015470655565, 0.06659994469102315]}, "mutation_prompt": null}
{"id": "666c45db-4daf-4093-843b-356ad9cc47d1", "solution": "import numpy as np\n\nclass DynamicInertiaQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_min=0.1, inertia_max=0.9, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5):\n        super().__init__(budget, dim, num_particles, inertia_min, cognitive_weight, social_weight, quantum_factor)\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        inertia_list = np.linspace(self.inertia_max, self.inertia_min, self.budget)\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for t in range(self.budget):\n            inertia_weight = inertia_list[t]\n\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n\n        return global_best", "name": "DynamicInertiaQIPSO", "description": "Enhancing QIPSO algorithm by introducing dynamic inertia weight for improved convergence and exploration.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_particles' is not defined\").", "error": "NameError(\"name 'initialize_particles' is not defined\")", "parent_id": "7ea19964-c915-4347-bcc5-86df4107bb2c", "metadata": {}, "mutation_prompt": null}
{"id": "35db9d99-8203-4122-a3cc-b4f244f30ed1", "solution": "class AdaptiveQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_min=0.1, inertia_max=0.9, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5):\n        super().__init__(budget, dim, num_particles, inertia_min, cognitive_weight, social_weight, quantum_factor)\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for t in range(self.budget):\n            inertia_weight = self.inertia_min + (self.inertia_max - self.inertia_min) * ((self.budget - t) / self.budget)\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n\n        return global_best", "name": "AdaptiveQIPSO", "description": "Adding adaptive inertia weight to QIPSO algorithm for improved convergence speed and exploration-exploitation balance.", "configspace": "", "generation": 6, "fitness": 0.15813386593066117, "feedback": "The algorithm AdaptiveQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "7ea19964-c915-4347-bcc5-86df4107bb2c", "metadata": {"aucs": [0.24717046351510719, 0.2802802190566325, 0.23760331678152447, 0.2896069752894983, 0.27274517271603527, 0.28750546199612315, 0.2725052733118236, 0.27711528016751574, 0.29035865729938437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07831406085659787, 0.06632288974832268, 0.0708106223495455, 0.09370466788618337, 0.09040298106551725, 0.07318790269221431, 0.07320339179856128, 0.07865118833986107, 0.07955041026547538, 0.05828221115293275, 0.05496710236477775, 0.05849579801863147, 0.06750756684109782, 0.05996786907465723, 0.0719997425659834, 0.06888096687728407, 0.05585593235463926, 0.049926593301069855, 0.9909989715656117, 0.9918377399635362, 0.9938422687949404, 0.9903963938250853, 0.9906879687770578, 0.9895019388057207, 0.9907182592780667, 0.9906593070169831, 0.9889658213957934, 0.1264049246205815, 0.15172505596719144, 0.15092275854823656, 0.1331504908583031, 0.14940358260684206, 0.14129760476986808, 0.13032049776159838, 0.1404916527345731, 0.14840578669954974, 0.16378886977664753, 0.20273957020766642, 0.17912333391858615, 0.1772341134819615, 0.17831108279265628, 0.1694332933415128, 0.1650454437652299, 0.13419990116116953, 0.20409395732512903, 0.07615068726057284, 0.07945714537071069, 0.06226415556620435, 0.06282864311023117, 0.05210911643840532, 0.04553957035366618, 0.08244279505876673, 0.052916985149214946, 0.07901608171980046, 0.05341434787316779, 0.06138026646156447, 0.08409245032012425, 0.08537668377730445, 0.01751239047950348, 0.07560878592861497, 0.06860948045439252, 0.032530723060885114, 0.06101108948708911, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07834356489231764, 0.0411198722686813, 0.06685483790028612, 0.08910461885786769, 0.020619782542949383, 0.007436435218283299, 0.05365926648496988, 0.033877198856512414, 0.03646399402272216, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024819346424329702, 0.013405251205509505, 0.025962239264637366, 0.022714529856347476, 0.002375904723345812, 0.034585909603945364, 0.024760895525866355, 0.06324404854321963, 0.03219490839506356, 0.286396816385342, 0.2606803595758631, 0.2726408102544018, 0.28494097526912543, 0.2772447908987159, 0.29190651705515, 0.2736378523548463, 0.25172825505652796, 0.2529435901842767, 0.05579123254218943, 0.08325515053993748, 0.07233466269165678, 0.07260067948775928, 0.06396299932129279, 0.07350170972785797, 0.07330131886646873, 0.05977685942391564, 0.07629881505927227, 0.14792213071857474, 0.11971801029551443, 0.15489909774113475, 0.1501361500234032, 0.15868437929525625, 0.1722074966865177, 0.14902527461462234, 0.12428915037783206, 0.13590231208276127, 0.2123412088364396, 0.22379076324671276, 0.22467360311169537, 0.2069657131363466, 0.2139968816116724, 0.20837577050462874, 0.23698454913838807, 0.21993383012515977, 0.21791287139327886, 0.16564786449615365, 0.15318645606021386, 0.14897437601286478, 0.1347758174349496, 0.17053187297800343, 0.13619830811832256, 0.16051985517070166, 0.15758456421445133, 0.16368500166107225, 0.16550334982194326, 0.1837512855896769, 0.16730251331267987, 0.17529873537232032, 0.19623833824074477, 0.17292183011013762, 0.16650106433813416, 0.1826121608110418, 0.1922717896755335, 0.17439996116765033, 0.164473421278173, 0.17301584230090195, 0.16440134150549057, 0.16160876921378564, 0.16577319118986145, 0.1711615635546605, 0.17157355070591207, 0.1617774412758599, 0.4451130887852802, 0.14497127831144352, 0.15275524061560297, 0.3144843726538957, 0.18324422533283058, 0.1846817677080449, 0.13351615021370822, 0.1692936539244796, 0.30279280105253337, 0.25686554519098137, 0.148122509176995, 0.16486570086636243, 0.17572742133174002, 0.19153055608562364, 0.1891335444166451, 0.2065658996048605, 0.1848784962067903, 0.18538392628228484, 0.1861309638728007, 0.18619314238770845, 0.20297700580889266, 0.17870058576587378, 0.202126640599551, 0.19503422414641292, 0.18837319358993043, 0.17184338650757547, 0.17145883452374344, 0.06245823035605502, 0.0652901199136755, 0.06280778265400111, 0.06991019053583836, 0.07527691925931446, 0.066757020224119, 0.061240381980376735, 0.0632493781389456, 0.07564069984794641]}, "mutation_prompt": null}
{"id": "ba5faef8-05a7-4a9d-a53e-fef77edf26b4", "solution": "import numpy as np\n\nclass QIPSO:\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_particles = num_particles\n        self.inertia_weight = inertia_weight\n        self.cognitive_weight = cognitive_weight\n        self.social_weight = social_weight\n        self.quantum_factor = quantum_factor\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n\n        return global_best", "name": "QIPSO", "description": "Quantum-Inspired Particle Swarm Optimization (QIPSO) algorithm that utilizes quantum mechanics principles to enhance particle swarm optimization for black box optimization tasks.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7ea19964-c915-4347-bcc5-86df4107bb2c", "metadata": {"aucs": [0.3707993836332991, 0.36288418195612426, 0.36256174898332705, 0.37644375576146594, 0.34823775259145995, 0.35093729175013255, 0.35662114256919475, 0.3693849442520676, 0.3508670078394267, 0.032533702811574416, 0.01827464854329408, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017461471249735072, 0.01000535842272443, 9.999999999998899e-05, 0.08422618627269018, 0.10934584176987316, 0.13332140477359622, 0.1137451995739086, 0.11826944847387444, 0.0952339704880073, 0.08008832403475519, 0.13169574298061237, 0.07767080752835731, 0.09025079527558233, 0.08576398103863192, 0.07633198925254037, 0.09370229680505071, 0.08578687035732202, 0.10963481687350429, 0.10590356278915847, 0.08711209345184179, 0.10466923305086262, 0.9904282105333916, 0.9913153955923232, 0.9922487373734183, 0.9897178332085891, 0.9905235514927733, 0.9873232848954681, 0.989703886113354, 0.9906588004157855, 0.9879632642871543, 0.23976989824993378, 0.22797251874332602, 0.22093204771758967, 0.21523443477181636, 0.23125217887692973, 0.25248753169645577, 0.2319807413943369, 0.23178539337892456, 0.22440667760519684, 0.25852071302451374, 0.23090644276864603, 0.29402903482444775, 0.23104019586276936, 0.2631528862297312, 0.23731649887396267, 0.26274190946518483, 0.27713940829060535, 0.2911725075337661, 0.14266801955977315, 0.149856431343795, 0.15365148921886596, 0.11697334422860517, 0.15085816007418928, 0.12851137638953258, 0.1544260378829957, 0.13996473015699085, 0.127238278982424, 0.13756075354420738, 0.14789370026836912, 0.1429555008938389, 0.142156895306069, 0.11072414616230253, 0.1325537674773406, 0.06154174997032136, 9.999999999998899e-05, 0.126308599535515, 9.999999999998899e-05, 9.999999999998899e-05, 0.02746312011566554, 0.006566893060816592, 9.999999999998899e-05, 0.001234633708396049, 9.999999999998899e-05, 9.999999999998899e-05, 0.008472590731497975, 0.13888615496068402, 0.03782285118066897, 0.11482093657785064, 0.10306770911931762, 0.012851120070916267, 0.018352604788084315, 0.07041491374854503, 0.053876280423193035, 0.05748240453961839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05989840249672029, 0.06787604174211015, 0.06427168587455212, 0.06760733207101, 0.06686880009182317, 0.08771811921287576, 0.07527768720849959, 0.067789640977307, 0.0689090490833183, 0.36355299445908107, 0.3500399819747657, 0.3611779496372265, 0.36355375768904263, 0.34804520820789875, 0.3500054096238425, 0.347068946099955, 0.3480505230944708, 0.3741749049716465, 0.09430670398509133, 0.09563213854906893, 0.10585046187527536, 0.10546884817781943, 0.08188528286571961, 0.10848780884537768, 0.09879134889419261, 0.12379433693598185, 0.10281426418723183, 0.19803368672908062, 0.20373859408992356, 0.13308144588974424, 0.22401909154114819, 0.22087163969446844, 0.182698854897282, 0.2275968209835424, 0.14458968634795788, 0.2060118427584221, 0.27273947492687634, 0.2561258302255014, 0.2605047574639401, 0.26470248775711436, 0.25913215823436464, 0.2445933055130305, 0.25695215058231446, 0.264750700730361, 0.26062821268717606, 0.21808931014497024, 0.1887994640854589, 0.19533407920586965, 0.15397375958501303, 0.20027815153968886, 0.20678563362849223, 0.19064802701072292, 0.19512364569999807, 0.19709664907468483, 0.21523436225925185, 0.19234543342670685, 0.20927505673947644, 0.20853509424438654, 0.21081689952910243, 0.22029239105456777, 0.20383626797029042, 0.2232429446758062, 0.18630021431115873, 0.1777068915434118, 0.18571812919724562, 0.20159399491474672, 0.18218900701251428, 0.1813618298562718, 0.19006053992615302, 0.17616401765911938, 0.18571802018149763, 0.18769346778298146, 0.44617258916790525, 0.1666895507821866, 0.15384176611455647, 0.45433049766896205, 0.19922494432443993, 0.1975763404795583, 0.11297521442373304, 0.1704136429727391, 0.48650494238015407, 0.47545228909963566, 0.15616881520997772, 0.07323609661021169, 0.20865784349200256, 0.16911866958848898, 0.20846173059186845, 0.1050014028763, 0.10512456336251852, 0.4356634851694644, 0.18355766603534618, 0.18120461233072105, 0.19461993132146327, 0.19210129027720568, 0.1781384676677491, 0.2001721666262466, 0.1867414295669021, 0.17483894137230405, 0.18049206372007554, 0.09781719899738217, 0.08420244349208028, 0.08286035563685912, 0.08814406554616339, 0.09742822873190615, 0.09183373945552886, 0.10526582219602754, 0.08903797441860883, 0.09666925895948475]}, "mutation_prompt": null}
{"id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "solution": "import numpy as np\n\nclass ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Introducing dynamic quantum factor adaptation based on fitness improvement to enhance exploration and exploitation balance in QIPSO.", "configspace": "", "generation": 8, "fitness": 0.20137555782064348, "feedback": "The algorithm ImprovedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "7ea19964-c915-4347-bcc5-86df4107bb2c", "metadata": {"aucs": [0.40052570598683046, 0.37562211666283774, 0.35507416460347907, 0.34928280270681766, 0.3649261590780498, 0.36085165572983435, 0.3534497759754629, 0.35898589225071953, 0.3661896102429475, 0.0010324558890708602, 0.010990701671673597, 0.0014110041907519077, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003200543918005505, 9.999999999998899e-05, 0.08397539614006766, 0.11523015731251784, 0.11599070095650654, 0.09309145387230378, 0.08675515679105761, 0.10427946039202307, 0.1117435863111661, 0.12734584486645184, 0.1284785769841581, 0.08888111730227577, 0.09681018338265424, 0.09579217093043912, 0.09828922146594232, 0.10009224916078796, 0.08327754844244795, 0.0794586137280765, 0.10791646505700758, 0.08948988891765042, 0.9914233632670114, 0.9917114546520976, 0.991171814023667, 0.9896468414125761, 0.9898357128741788, 0.9880978891267381, 0.9908126643821275, 0.9917593975567109, 0.9905139307445721, 0.21928159182961404, 0.24499445087306682, 0.2439174869402556, 0.22017761223239474, 0.23449987476096135, 0.2511044906504709, 0.2658890782706078, 0.23827270886187302, 0.2568469267189697, 0.30632337760570594, 0.2477024475936449, 0.30870862483102623, 0.2588128015281742, 0.30049068948040636, 0.21999120985975795, 0.22149254426421505, 0.30665743645989985, 0.2752172449694503, 0.15346559977293983, 0.13055848721287444, 0.13565715801061562, 0.13267920714024528, 0.12965663302065955, 0.1761965747613331, 0.12451026505372886, 0.09855079838397562, 0.1275594744051225, 0.12529432743890578, 0.15247857516084418, 0.14262551248685873, 0.13138359625658835, 0.12315377806810646, 0.14163220855434466, 0.14723799654885128, 0.0915373776941526, 0.13869603355982307, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.011969387603556925, 9.999999999998899e-05, 9.999999999998899e-05, 0.005430498454147892, 0.059307617871185325, 0.03081272704648963, 0.08986588706057996, 0.10452906064062284, 0.008686375097159527, 0.013278555200379905, 0.08899460620755617, 0.04427849308956644, 0.11689725124837225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04475939592949785, 0.06156108253826442, 0.07851384550809104, 0.07688369362092329, 0.06381604411538644, 0.08040563900556741, 0.07469803177816392, 0.07713319611033298, 0.06665767294401304, 0.3581369366702103, 0.3640988034105592, 0.41807822254211247, 0.3712571678732728, 0.33527067274918265, 0.37912050000404196, 0.347846006899576, 0.35099302880456895, 0.3470911517924231, 0.09665941402298972, 0.10685926207500929, 0.10607127424554585, 0.09661381616742615, 0.08961107118360956, 0.09184322167801728, 0.10984200419671875, 0.08493006898608979, 0.10721366882397088, 0.24908366034648333, 0.20040501195173233, 0.1993676528354995, 0.2493072482096227, 0.21585528858679393, 0.17938226945522495, 0.2216429352140321, 0.2298922006034163, 0.182826286165916, 0.2622807783746146, 0.2637168915108128, 0.2650155127861936, 0.26423958634123335, 0.24277888102790923, 0.26431484973148256, 0.25237685576791824, 0.2541325392681859, 0.25701405450637527, 0.19532284675275036, 0.20901467358367476, 0.2007965919329192, 0.20352339168493228, 0.2079222530608087, 0.1697284169684764, 0.16257994619623928, 0.1959994881114422, 0.18635469443002284, 0.2119719920007057, 0.1832752892744801, 0.19300016195149905, 0.2020506685759289, 0.19203590835432283, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.18604222874311604, 0.17601566798449908, 0.19050405098957313, 0.20720237400527863, 0.1970666794688649, 0.17246575426425137, 0.1984223742946175, 0.19360725198789575, 0.17664587235705698, 0.5391453991383579, 0.16953777489079325, 0.15420036366599033, 0.2716377777047917, 0.1975794088453, 0.19886997379428872, 0.35000817729958333, 0.17005526917748104, 0.48054712692999213, 0.4092620404766716, 0.15613359525885606, 0.31004115747730765, 0.5036810710013038, 0.33874410849909353, 0.2091860553119833, 0.10529279528814384, 0.10492025246060854, 0.4143941967858491, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.20394243043355798, 0.19659059394332967, 0.18199967015695562, 0.18008268279955542, 0.18275556122513914, 0.18274441759078364, 0.08933420057650654, 0.09876969476957853, 0.08835223633017308, 0.08070985681442966, 0.09182559882702479, 0.08009103056798972, 0.07921098327789355, 0.08661289764727387, 0.08291818388013017]}, "mutation_prompt": null}
{"id": "024a831d-ac98-4c1c-bcf6-1ad5b62f70e6", "solution": "import numpy as np\n\nclass ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Introducing dynamic quantum factor adaptation based on fitness improvement to enhance exploration and exploitation balance in QIPSO.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.40052570598683046, 0.37562211666283774, 0.35507416460347907, 0.34928280270681766, 0.3649261590780498, 0.36085165572983435, 0.3534497759754629, 0.35898589225071953, 0.3661896102429475, 0.0010324558890708602, 0.010990701671673597, 0.0014110041907519077, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003200543918005505, 9.999999999998899e-05, 0.08397539614006766, 0.11523015731251784, 0.11599070095650654, 0.09309145387230378, 0.08675515679105761, 0.10427946039202307, 0.1117435863111661, 0.12734584486645184, 0.1284785769841581, 0.08888111730227577, 0.09681018338265424, 0.09579217093043912, 0.09828922146594232, 0.10009224916078796, 0.08327754844244795, 0.0794586137280765, 0.10791646505700758, 0.08948988891765042, 0.9914233632670114, 0.9917114546520976, 0.991171814023667, 0.9896468414125761, 0.9898357128741788, 0.9880978891267381, 0.9908126643821275, 0.9917593975567109, 0.9905139307445721, 0.21928159182961404, 0.24499445087306682, 0.2439174869402556, 0.22017761223239474, 0.23449987476096135, 0.2511044906504709, 0.2658890782706078, 0.23827270886187302, 0.2568469267189697, 0.30632337760570594, 0.2477024475936449, 0.30870862483102623, 0.2588128015281742, 0.30049068948040636, 0.21999120985975795, 0.22149254426421505, 0.30665743645989985, 0.2752172449694503, 0.15346559977293983, 0.13055848721287444, 0.13565715801061562, 0.13267920714024528, 0.12965663302065955, 0.1761965747613331, 0.12451026505372886, 0.09855079838397562, 0.1275594744051225, 0.12529432743890578, 0.15247857516084418, 0.14262551248685873, 0.13138359625658835, 0.12315377806810646, 0.14163220855434466, 0.14723799654885128, 0.0915373776941526, 0.13869603355982307, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.011969387603556925, 9.999999999998899e-05, 9.999999999998899e-05, 0.005430498454147892, 0.059307617871185325, 0.03081272704648963, 0.08986588706057996, 0.10452906064062284, 0.008686375097159527, 0.013278555200379905, 0.08899460620755617, 0.04427849308956644, 0.11689725124837225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04475939592949785, 0.06156108253826442, 0.07851384550809104, 0.07688369362092329, 0.06381604411538644, 0.08040563900556741, 0.07469803177816392, 0.07713319611033298, 0.06665767294401304, 0.3581369366702103, 0.3640988034105592, 0.41807822254211247, 0.3712571678732728, 0.33527067274918265, 0.37912050000404196, 0.347846006899576, 0.35099302880456895, 0.3470911517924231, 0.09665941402298972, 0.10685926207500929, 0.10607127424554585, 0.09661381616742615, 0.08961107118360956, 0.09184322167801728, 0.10984200419671875, 0.08493006898608979, 0.10721366882397088, 0.24908366034648333, 0.20040501195173233, 0.1993676528354995, 0.2493072482096227, 0.21585528858679393, 0.17938226945522495, 0.2216429352140321, 0.2298922006034163, 0.182826286165916, 0.2622807783746146, 0.2637168915108128, 0.2650155127861936, 0.26423958634123335, 0.24277888102790923, 0.26431484973148256, 0.25237685576791824, 0.2541325392681859, 0.25701405450637527, 0.19532284675275036, 0.20901467358367476, 0.2007965919329192, 0.20352339168493228, 0.2079222530608087, 0.1697284169684764, 0.16257994619623928, 0.1959994881114422, 0.18635469443002284, 0.2119719920007057, 0.1832752892744801, 0.19300016195149905, 0.2020506685759289, 0.19203590835432283, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.18604222874311604, 0.17601566798449908, 0.19050405098957313, 0.20720237400527863, 0.1970666794688649, 0.17246575426425137, 0.1984223742946175, 0.19360725198789575, 0.17664587235705698, 0.5391453991383579, 0.16953777489079325, 0.15420036366599033, 0.2716377777047917, 0.1975794088453, 0.19886997379428872, 0.35000817729958333, 0.17005526917748104, 0.48054712692999213, 0.4092620404766716, 0.15613359525885606, 0.31004115747730765, 0.5036810710013038, 0.33874410849909353, 0.2091860553119833, 0.10529279528814384, 0.10492025246060854, 0.4143941967858491, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.20394243043355798, 0.19659059394332967, 0.18199967015695562, 0.18008268279955542, 0.18275556122513914, 0.18274441759078364, 0.08933420057650654, 0.09876969476957853, 0.08835223633017308, 0.08070985681442966, 0.09182559882702479, 0.08009103056798972, 0.07921098327789355, 0.08661289764727387, 0.08291818388013017]}, "mutation_prompt": null}
{"id": "9fca5665-113c-4016-8422-1160e9435545", "solution": "import numpy as np\n\nclass ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, mutation_rate=0.1):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < self.mutation_rate:\n                            particles[i] = np.random.uniform(-5.0, 5.0, size=self.dim)  # Mutation step\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Updating the quantum factor adaptation mechanism by incorporating a mutation step to enhance diversity and escape local optima.", "configspace": "", "generation": 10, "fitness": 0.19748538778291552, "feedback": "The algorithm ImprovedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.36541999512714884, 0.3670670249998099, 0.360142708625121, 0.3657719606724169, 0.3493064682279945, 0.3742964660344049, 0.3808761764565336, 0.40857609365342307, 0.3779170665865127, 0.0019376463109344044, 0.0068754726268849264, 9.999999999998899e-05, 0.010822799428775953, 9.999999999998899e-05, 9.999999999998899e-05, 0.009514785884550347, 0.028319897422640294, 9.999999999998899e-05, 0.11215349268499741, 0.09840929697105472, 0.08587414442795638, 0.10718688344719773, 0.10005905842065255, 0.09751382688040744, 0.08927697019213632, 0.10905278311652877, 0.0926894772381438, 0.09266048874059851, 0.09279998596837902, 0.08819959393125243, 0.09619594019806788, 0.09400333576877506, 0.09904040103396616, 0.09460799588806112, 0.08633564897252344, 0.10168063771879299, 0.9910406676547171, 0.9938947485562184, 0.9913238284252482, 0.9837773720761254, 0.992737622087837, 0.9882974589935273, 0.9892618603483553, 0.9919815223336138, 0.9906491692388616, 0.2221259005681704, 0.24081248053297288, 0.2335677834635096, 0.23013936566233506, 0.2342760894201048, 0.2626818810172046, 0.23149634434543032, 0.22896501772374844, 0.23964027003911237, 0.3634188538543711, 0.1959764023674211, 0.2823779442511747, 0.2707206569232433, 0.2740458489293648, 0.24207481115068685, 0.2644611241954328, 0.23427630540108113, 0.2858354071751964, 0.14770880761219818, 0.1381931053852299, 0.15353393790127812, 0.14799073520056283, 0.11519402530765832, 0.12451116900363979, 0.14385608954801776, 0.10831091357028311, 0.1409662388771189, 0.1356190244175366, 0.09892427860638231, 0.08161828010587302, 0.1563464245329671, 0.14702214524559676, 0.13979242856756935, 0.13379779407417391, 9.999999999998899e-05, 0.15202724225473707, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015322935988143938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0076605221441364835, 0.08522650217002625, 0.05152083482579206, 0.09213904157491504, 0.08987639557349392, 0.0005788004866930097, 0.019167224383950132, 0.08059907031941405, 0.051947075441517665, 0.13750591288408742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034669711352374954, 0.051849987239919404, 0.07085704032604678, 0.07983177612283943, 0.08597353184251533, 0.059457819064885564, 0.06335287045489857, 0.049605804211900084, 0.062451706846185284, 0.40325352417254334, 0.3418676430225086, 0.3357428430433461, 0.3382392929194622, 0.35117824560195854, 0.34045145147196654, 0.36198215322606186, 0.33742625718019403, 0.37715082122508126, 0.11175290506255875, 0.09547661339669433, 0.10053748761856784, 0.11060036594841094, 0.11011122764206516, 0.10022595765314912, 0.10259799230135447, 0.11341216456013448, 0.11117909286264638, 0.15587123458764185, 0.2081956859197539, 0.19257726142068132, 0.2059417726160695, 0.20910255823403834, 0.19024946058933012, 0.2091051854719369, 0.16262197586621274, 0.22327215791266697, 0.2602632435994905, 0.2607098524512006, 0.24832348446019847, 0.2503328982032117, 0.256980060134837, 0.25993446860005454, 0.2498923639354117, 0.26084690298742486, 0.25727048633047545, 0.18495921112837255, 0.18223507205947387, 0.19813112984998726, 0.1511153219986653, 0.22223754579530985, 0.20715821168395632, 0.17258428417397442, 0.21239539872214985, 0.18350236093799388, 0.20683813843215293, 0.1526226538374592, 0.20645510481430762, 0.21126153625940547, 0.20461389544314346, 0.1840435411803515, 0.2075198990137469, 0.21234492466914978, 0.2033364871314567, 0.1889964105413071, 0.18074859268314025, 0.1857253476617723, 0.17902222789549738, 0.20150633895605374, 0.20449434135350553, 0.1813297069257358, 0.19270412072971999, 0.182941513795721, 0.46678919793975315, 0.1259180334289094, 0.15457846568366518, 0.5698348028398845, 0.19882545879632874, 0.196281469265557, 0.09984342220854991, 0.17005641426622764, 0.5730992359357564, 0.5336250565350493, 0.15601048864914013, 0.11178898568639084, 0.46443439029292044, 0.16890344428775972, 0.20841183641162297, 0.10496379750718499, 0.10498893651667551, 0.383307447861991, 0.18825554474419737, 0.17437703013720707, 0.17044047432890308, 0.1743351827496945, 0.1802748377269936, 0.18301352812686644, 0.17462700717914104, 0.18259602207112524, 0.1884745129234321, 0.08373905592211173, 0.0857200454230378, 0.0920904169385347, 0.09208281263806095, 0.08611587196179449, 0.09108580637949348, 0.07390754061650784, 0.09178139963575904, 0.09521691373441188]}, "mutation_prompt": null}
{"id": "6dfb3be3-2371-4c1f-9bd5-36b1237ffad4", "solution": "import numpy as np\n\nclass ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Introducing dynamic quantum factor adaptation based on fitness improvement to enhance exploration and exploitation balance in QIPSO.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.40052570598683046, 0.37562211666283774, 0.35507416460347907, 0.34928280270681766, 0.3649261590780498, 0.36085165572983435, 0.3534497759754629, 0.35898589225071953, 0.3661896102429475, 0.0010324558890708602, 0.010990701671673597, 0.0014110041907519077, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003200543918005505, 9.999999999998899e-05, 0.08397539614006766, 0.11523015731251784, 0.11599070095650654, 0.09309145387230378, 0.08675515679105761, 0.10427946039202307, 0.1117435863111661, 0.12734584486645184, 0.1284785769841581, 0.08888111730227577, 0.09681018338265424, 0.09579217093043912, 0.09828922146594232, 0.10009224916078796, 0.08327754844244795, 0.0794586137280765, 0.10791646505700758, 0.08948988891765042, 0.9914233632670114, 0.9917114546520976, 0.991171814023667, 0.9896468414125761, 0.9898357128741788, 0.9880978891267381, 0.9908126643821275, 0.9917593975567109, 0.9905139307445721, 0.21928159182961404, 0.24499445087306682, 0.2439174869402556, 0.22017761223239474, 0.23449987476096135, 0.2511044906504709, 0.2658890782706078, 0.23827270886187302, 0.2568469267189697, 0.30632337760570594, 0.2477024475936449, 0.30870862483102623, 0.2588128015281742, 0.30049068948040636, 0.21999120985975795, 0.22149254426421505, 0.30665743645989985, 0.2752172449694503, 0.15346559977293983, 0.13055848721287444, 0.13565715801061562, 0.13267920714024528, 0.12965663302065955, 0.1761965747613331, 0.12451026505372886, 0.09855079838397562, 0.1275594744051225, 0.12529432743890578, 0.15247857516084418, 0.14262551248685873, 0.13138359625658835, 0.12315377806810646, 0.14163220855434466, 0.14723799654885128, 0.0915373776941526, 0.13869603355982307, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.011969387603556925, 9.999999999998899e-05, 9.999999999998899e-05, 0.005430498454147892, 0.059307617871185325, 0.03081272704648963, 0.08986588706057996, 0.10452906064062284, 0.008686375097159527, 0.013278555200379905, 0.08899460620755617, 0.04427849308956644, 0.11689725124837225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04475939592949785, 0.06156108253826442, 0.07851384550809104, 0.07688369362092329, 0.06381604411538644, 0.08040563900556741, 0.07469803177816392, 0.07713319611033298, 0.06665767294401304, 0.3581369366702103, 0.3640988034105592, 0.41807822254211247, 0.3712571678732728, 0.33527067274918265, 0.37912050000404196, 0.347846006899576, 0.35099302880456895, 0.3470911517924231, 0.09665941402298972, 0.10685926207500929, 0.10607127424554585, 0.09661381616742615, 0.08961107118360956, 0.09184322167801728, 0.10984200419671875, 0.08493006898608979, 0.10721366882397088, 0.24908366034648333, 0.20040501195173233, 0.1993676528354995, 0.2493072482096227, 0.21585528858679393, 0.17938226945522495, 0.2216429352140321, 0.2298922006034163, 0.182826286165916, 0.2622807783746146, 0.2637168915108128, 0.2650155127861936, 0.26423958634123335, 0.24277888102790923, 0.26431484973148256, 0.25237685576791824, 0.2541325392681859, 0.25701405450637527, 0.19532284675275036, 0.20901467358367476, 0.2007965919329192, 0.20352339168493228, 0.2079222530608087, 0.1697284169684764, 0.16257994619623928, 0.1959994881114422, 0.18635469443002284, 0.2119719920007057, 0.1832752892744801, 0.19300016195149905, 0.2020506685759289, 0.19203590835432283, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.18604222874311604, 0.17601566798449908, 0.19050405098957313, 0.20720237400527863, 0.1970666794688649, 0.17246575426425137, 0.1984223742946175, 0.19360725198789575, 0.17664587235705698, 0.5391453991383579, 0.16953777489079325, 0.15420036366599033, 0.2716377777047917, 0.1975794088453, 0.19886997379428872, 0.35000817729958333, 0.17005526917748104, 0.48054712692999213, 0.4092620404766716, 0.15613359525885606, 0.31004115747730765, 0.5036810710013038, 0.33874410849909353, 0.2091860553119833, 0.10529279528814384, 0.10492025246060854, 0.4143941967858491, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.20394243043355798, 0.19659059394332967, 0.18199967015695562, 0.18008268279955542, 0.18275556122513914, 0.18274441759078364, 0.08933420057650654, 0.09876969476957853, 0.08835223633017308, 0.08070985681442966, 0.09182559882702479, 0.08009103056798972, 0.07921098327789355, 0.08661289764727387, 0.08291818388013017]}, "mutation_prompt": null}
{"id": "949788a5-b1ee-42e6-bc82-967017606769", "solution": "import numpy as np\n\nclass ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Introducing dynamic quantum factor adaptation based on fitness improvement to enhance exploration and exploitation balance in QIPSO.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.40052570598683046, 0.37562211666283774, 0.35507416460347907, 0.34928280270681766, 0.3649261590780498, 0.36085165572983435, 0.3534497759754629, 0.35898589225071953, 0.3661896102429475, 0.0010324558890708602, 0.010990701671673597, 0.0014110041907519077, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003200543918005505, 9.999999999998899e-05, 0.08397539614006766, 0.11523015731251784, 0.11599070095650654, 0.09309145387230378, 0.08675515679105761, 0.10427946039202307, 0.1117435863111661, 0.12734584486645184, 0.1284785769841581, 0.08888111730227577, 0.09681018338265424, 0.09579217093043912, 0.09828922146594232, 0.10009224916078796, 0.08327754844244795, 0.0794586137280765, 0.10791646505700758, 0.08948988891765042, 0.9914233632670114, 0.9917114546520976, 0.991171814023667, 0.9896468414125761, 0.9898357128741788, 0.9880978891267381, 0.9908126643821275, 0.9917593975567109, 0.9905139307445721, 0.21928159182961404, 0.24499445087306682, 0.2439174869402556, 0.22017761223239474, 0.23449987476096135, 0.2511044906504709, 0.2658890782706078, 0.23827270886187302, 0.2568469267189697, 0.30632337760570594, 0.2477024475936449, 0.30870862483102623, 0.2588128015281742, 0.30049068948040636, 0.21999120985975795, 0.22149254426421505, 0.30665743645989985, 0.2752172449694503, 0.15346559977293983, 0.13055848721287444, 0.13565715801061562, 0.13267920714024528, 0.12965663302065955, 0.1761965747613331, 0.12451026505372886, 0.09855079838397562, 0.1275594744051225, 0.12529432743890578, 0.15247857516084418, 0.14262551248685873, 0.13138359625658835, 0.12315377806810646, 0.14163220855434466, 0.14723799654885128, 0.0915373776941526, 0.13869603355982307, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.011969387603556925, 9.999999999998899e-05, 9.999999999998899e-05, 0.005430498454147892, 0.059307617871185325, 0.03081272704648963, 0.08986588706057996, 0.10452906064062284, 0.008686375097159527, 0.013278555200379905, 0.08899460620755617, 0.04427849308956644, 0.11689725124837225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04475939592949785, 0.06156108253826442, 0.07851384550809104, 0.07688369362092329, 0.06381604411538644, 0.08040563900556741, 0.07469803177816392, 0.07713319611033298, 0.06665767294401304, 0.3581369366702103, 0.3640988034105592, 0.41807822254211247, 0.3712571678732728, 0.33527067274918265, 0.37912050000404196, 0.347846006899576, 0.35099302880456895, 0.3470911517924231, 0.09665941402298972, 0.10685926207500929, 0.10607127424554585, 0.09661381616742615, 0.08961107118360956, 0.09184322167801728, 0.10984200419671875, 0.08493006898608979, 0.10721366882397088, 0.24908366034648333, 0.20040501195173233, 0.1993676528354995, 0.2493072482096227, 0.21585528858679393, 0.17938226945522495, 0.2216429352140321, 0.2298922006034163, 0.182826286165916, 0.2622807783746146, 0.2637168915108128, 0.2650155127861936, 0.26423958634123335, 0.24277888102790923, 0.26431484973148256, 0.25237685576791824, 0.2541325392681859, 0.25701405450637527, 0.19532284675275036, 0.20901467358367476, 0.2007965919329192, 0.20352339168493228, 0.2079222530608087, 0.1697284169684764, 0.16257994619623928, 0.1959994881114422, 0.18635469443002284, 0.2119719920007057, 0.1832752892744801, 0.19300016195149905, 0.2020506685759289, 0.19203590835432283, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.18604222874311604, 0.17601566798449908, 0.19050405098957313, 0.20720237400527863, 0.1970666794688649, 0.17246575426425137, 0.1984223742946175, 0.19360725198789575, 0.17664587235705698, 0.5391453991383579, 0.16953777489079325, 0.15420036366599033, 0.2716377777047917, 0.1975794088453, 0.19886997379428872, 0.35000817729958333, 0.17005526917748104, 0.48054712692999213, 0.4092620404766716, 0.15613359525885606, 0.31004115747730765, 0.5036810710013038, 0.33874410849909353, 0.2091860553119833, 0.10529279528814384, 0.10492025246060854, 0.4143941967858491, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.20394243043355798, 0.19659059394332967, 0.18199967015695562, 0.18008268279955542, 0.18275556122513914, 0.18274441759078364, 0.08933420057650654, 0.09876969476957853, 0.08835223633017308, 0.08070985681442966, 0.09182559882702479, 0.08009103056798972, 0.07921098327789355, 0.08661289764727387, 0.08291818388013017]}, "mutation_prompt": null}
{"id": "5bf945ef-9c4f-49ab-8081-83aa407cda07", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n\n            # Incorporating differential evolution to update a subset of particles\n            subset_idx = np.random.choice(self.num_particles, int(0.1 * self.num_particles), replace=False)\n            for idx in subset_idx:\n                r1, r2, r3 = np.random.choice(self.num_particles, 3, replace=False)\n                mutant = particles[r1] + 0.5*(particles[r2] - particles[r3])\n                crossover = np.random.rand(self.dim) < 0.9\n                particles[idx] = np.where(crossover, mutant, particles[idx])\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance exploration by incorporating differential evolution strategy to update a subset of particles.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'EnhancedQIPSO' object has no attribute 'quantum_factor_decay'\").", "error": "AttributeError(\"'EnhancedQIPSO' object has no attribute 'quantum_factor_decay'\")", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {}, "mutation_prompt": null}
{"id": "c4c6e068-490d-46be-8ece-13b242537f12", "solution": "import numpy as np\n\nclass ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Introducing dynamic quantum factor adaptation based on fitness improvement to enhance exploration and exploitation balance in QIPSO.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.40052570598683046, 0.37562211666283774, 0.35507416460347907, 0.34928280270681766, 0.3649261590780498, 0.36085165572983435, 0.3534497759754629, 0.35898589225071953, 0.3661896102429475, 0.0010324558890708602, 0.010990701671673597, 0.0014110041907519077, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003200543918005505, 9.999999999998899e-05, 0.08397539614006766, 0.11523015731251784, 0.11599070095650654, 0.09309145387230378, 0.08675515679105761, 0.10427946039202307, 0.1117435863111661, 0.12734584486645184, 0.1284785769841581, 0.08888111730227577, 0.09681018338265424, 0.09579217093043912, 0.09828922146594232, 0.10009224916078796, 0.08327754844244795, 0.0794586137280765, 0.10791646505700758, 0.08948988891765042, 0.9914233632670114, 0.9917114546520976, 0.991171814023667, 0.9896468414125761, 0.9898357128741788, 0.9880978891267381, 0.9908126643821275, 0.9917593975567109, 0.9905139307445721, 0.21928159182961404, 0.24499445087306682, 0.2439174869402556, 0.22017761223239474, 0.23449987476096135, 0.2511044906504709, 0.2658890782706078, 0.23827270886187302, 0.2568469267189697, 0.30632337760570594, 0.2477024475936449, 0.30870862483102623, 0.2588128015281742, 0.30049068948040636, 0.21999120985975795, 0.22149254426421505, 0.30665743645989985, 0.2752172449694503, 0.15346559977293983, 0.13055848721287444, 0.13565715801061562, 0.13267920714024528, 0.12965663302065955, 0.1761965747613331, 0.12451026505372886, 0.09855079838397562, 0.1275594744051225, 0.12529432743890578, 0.15247857516084418, 0.14262551248685873, 0.13138359625658835, 0.12315377806810646, 0.14163220855434466, 0.14723799654885128, 0.0915373776941526, 0.13869603355982307, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.011969387603556925, 9.999999999998899e-05, 9.999999999998899e-05, 0.005430498454147892, 0.059307617871185325, 0.03081272704648963, 0.08986588706057996, 0.10452906064062284, 0.008686375097159527, 0.013278555200379905, 0.08899460620755617, 0.04427849308956644, 0.11689725124837225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04475939592949785, 0.06156108253826442, 0.07851384550809104, 0.07688369362092329, 0.06381604411538644, 0.08040563900556741, 0.07469803177816392, 0.07713319611033298, 0.06665767294401304, 0.3581369366702103, 0.3640988034105592, 0.41807822254211247, 0.3712571678732728, 0.33527067274918265, 0.37912050000404196, 0.347846006899576, 0.35099302880456895, 0.3470911517924231, 0.09665941402298972, 0.10685926207500929, 0.10607127424554585, 0.09661381616742615, 0.08961107118360956, 0.09184322167801728, 0.10984200419671875, 0.08493006898608979, 0.10721366882397088, 0.24908366034648333, 0.20040501195173233, 0.1993676528354995, 0.2493072482096227, 0.21585528858679393, 0.17938226945522495, 0.2216429352140321, 0.2298922006034163, 0.182826286165916, 0.2622807783746146, 0.2637168915108128, 0.2650155127861936, 0.26423958634123335, 0.24277888102790923, 0.26431484973148256, 0.25237685576791824, 0.2541325392681859, 0.25701405450637527, 0.19532284675275036, 0.20901467358367476, 0.2007965919329192, 0.20352339168493228, 0.2079222530608087, 0.1697284169684764, 0.16257994619623928, 0.1959994881114422, 0.18635469443002284, 0.2119719920007057, 0.1832752892744801, 0.19300016195149905, 0.2020506685759289, 0.19203590835432283, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.18604222874311604, 0.17601566798449908, 0.19050405098957313, 0.20720237400527863, 0.1970666794688649, 0.17246575426425137, 0.1984223742946175, 0.19360725198789575, 0.17664587235705698, 0.5391453991383579, 0.16953777489079325, 0.15420036366599033, 0.2716377777047917, 0.1975794088453, 0.19886997379428872, 0.35000817729958333, 0.17005526917748104, 0.48054712692999213, 0.4092620404766716, 0.15613359525885606, 0.31004115747730765, 0.5036810710013038, 0.33874410849909353, 0.2091860553119833, 0.10529279528814384, 0.10492025246060854, 0.4143941967858491, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.20394243043355798, 0.19659059394332967, 0.18199967015695562, 0.18008268279955542, 0.18275556122513914, 0.18274441759078364, 0.08933420057650654, 0.09876969476957853, 0.08835223633017308, 0.08070985681442966, 0.09182559882702479, 0.08009103056798972, 0.07921098327789355, 0.08661289764727387, 0.08291818388013017]}, "mutation_prompt": null}
{"id": "0206daf3-ba3b-4b0c-813e-e2ae428ba484", "solution": "import numpy as np\n\nclass ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Introducing dynamic quantum factor adaptation based on fitness improvement to enhance exploration and exploitation balance in QIPSO.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.40052570598683046, 0.37562211666283774, 0.35507416460347907, 0.34928280270681766, 0.3649261590780498, 0.36085165572983435, 0.3534497759754629, 0.35898589225071953, 0.3661896102429475, 0.0010324558890708602, 0.010990701671673597, 0.0014110041907519077, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003200543918005505, 9.999999999998899e-05, 0.08397539614006766, 0.11523015731251784, 0.11599070095650654, 0.09309145387230378, 0.08675515679105761, 0.10427946039202307, 0.1117435863111661, 0.12734584486645184, 0.1284785769841581, 0.08888111730227577, 0.09681018338265424, 0.09579217093043912, 0.09828922146594232, 0.10009224916078796, 0.08327754844244795, 0.0794586137280765, 0.10791646505700758, 0.08948988891765042, 0.9914233632670114, 0.9917114546520976, 0.991171814023667, 0.9896468414125761, 0.9898357128741788, 0.9880978891267381, 0.9908126643821275, 0.9917593975567109, 0.9905139307445721, 0.21928159182961404, 0.24499445087306682, 0.2439174869402556, 0.22017761223239474, 0.23449987476096135, 0.2511044906504709, 0.2658890782706078, 0.23827270886187302, 0.2568469267189697, 0.30632337760570594, 0.2477024475936449, 0.30870862483102623, 0.2588128015281742, 0.30049068948040636, 0.21999120985975795, 0.22149254426421505, 0.30665743645989985, 0.2752172449694503, 0.15346559977293983, 0.13055848721287444, 0.13565715801061562, 0.13267920714024528, 0.12965663302065955, 0.1761965747613331, 0.12451026505372886, 0.09855079838397562, 0.1275594744051225, 0.12529432743890578, 0.15247857516084418, 0.14262551248685873, 0.13138359625658835, 0.12315377806810646, 0.14163220855434466, 0.14723799654885128, 0.0915373776941526, 0.13869603355982307, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.011969387603556925, 9.999999999998899e-05, 9.999999999998899e-05, 0.005430498454147892, 0.059307617871185325, 0.03081272704648963, 0.08986588706057996, 0.10452906064062284, 0.008686375097159527, 0.013278555200379905, 0.08899460620755617, 0.04427849308956644, 0.11689725124837225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04475939592949785, 0.06156108253826442, 0.07851384550809104, 0.07688369362092329, 0.06381604411538644, 0.08040563900556741, 0.07469803177816392, 0.07713319611033298, 0.06665767294401304, 0.3581369366702103, 0.3640988034105592, 0.41807822254211247, 0.3712571678732728, 0.33527067274918265, 0.37912050000404196, 0.347846006899576, 0.35099302880456895, 0.3470911517924231, 0.09665941402298972, 0.10685926207500929, 0.10607127424554585, 0.09661381616742615, 0.08961107118360956, 0.09184322167801728, 0.10984200419671875, 0.08493006898608979, 0.10721366882397088, 0.24908366034648333, 0.20040501195173233, 0.1993676528354995, 0.2493072482096227, 0.21585528858679393, 0.17938226945522495, 0.2216429352140321, 0.2298922006034163, 0.182826286165916, 0.2622807783746146, 0.2637168915108128, 0.2650155127861936, 0.26423958634123335, 0.24277888102790923, 0.26431484973148256, 0.25237685576791824, 0.2541325392681859, 0.25701405450637527, 0.19532284675275036, 0.20901467358367476, 0.2007965919329192, 0.20352339168493228, 0.2079222530608087, 0.1697284169684764, 0.16257994619623928, 0.1959994881114422, 0.18635469443002284, 0.2119719920007057, 0.1832752892744801, 0.19300016195149905, 0.2020506685759289, 0.19203590835432283, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.18604222874311604, 0.17601566798449908, 0.19050405098957313, 0.20720237400527863, 0.1970666794688649, 0.17246575426425137, 0.1984223742946175, 0.19360725198789575, 0.17664587235705698, 0.5391453991383579, 0.16953777489079325, 0.15420036366599033, 0.2716377777047917, 0.1975794088453, 0.19886997379428872, 0.35000817729958333, 0.17005526917748104, 0.48054712692999213, 0.4092620404766716, 0.15613359525885606, 0.31004115747730765, 0.5036810710013038, 0.33874410849909353, 0.2091860553119833, 0.10529279528814384, 0.10492025246060854, 0.4143941967858491, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.20394243043355798, 0.19659059394332967, 0.18199967015695562, 0.18008268279955542, 0.18275556122513914, 0.18274441759078364, 0.08933420057650654, 0.09876969476957853, 0.08835223633017308, 0.08070985681442966, 0.09182559882702479, 0.08009103056798972, 0.07921098327789355, 0.08661289764727387, 0.08291818388013017]}, "mutation_prompt": null}
{"id": "8c6067b1-e9a9-49d3-a083-420134e799df", "solution": "import numpy as np\n\nclass ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Introducing dynamic quantum factor adaptation based on fitness improvement to enhance exploration and exploitation balance in QIPSO.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.40052570598683046, 0.37562211666283774, 0.35507416460347907, 0.34928280270681766, 0.3649261590780498, 0.36085165572983435, 0.3534497759754629, 0.35898589225071953, 0.3661896102429475, 0.0010324558890708602, 0.010990701671673597, 0.0014110041907519077, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003200543918005505, 9.999999999998899e-05, 0.08397539614006766, 0.11523015731251784, 0.11599070095650654, 0.09309145387230378, 0.08675515679105761, 0.10427946039202307, 0.1117435863111661, 0.12734584486645184, 0.1284785769841581, 0.08888111730227577, 0.09681018338265424, 0.09579217093043912, 0.09828922146594232, 0.10009224916078796, 0.08327754844244795, 0.0794586137280765, 0.10791646505700758, 0.08948988891765042, 0.9914233632670114, 0.9917114546520976, 0.991171814023667, 0.9896468414125761, 0.9898357128741788, 0.9880978891267381, 0.9908126643821275, 0.9917593975567109, 0.9905139307445721, 0.21928159182961404, 0.24499445087306682, 0.2439174869402556, 0.22017761223239474, 0.23449987476096135, 0.2511044906504709, 0.2658890782706078, 0.23827270886187302, 0.2568469267189697, 0.30632337760570594, 0.2477024475936449, 0.30870862483102623, 0.2588128015281742, 0.30049068948040636, 0.21999120985975795, 0.22149254426421505, 0.30665743645989985, 0.2752172449694503, 0.15346559977293983, 0.13055848721287444, 0.13565715801061562, 0.13267920714024528, 0.12965663302065955, 0.1761965747613331, 0.12451026505372886, 0.09855079838397562, 0.1275594744051225, 0.12529432743890578, 0.15247857516084418, 0.14262551248685873, 0.13138359625658835, 0.12315377806810646, 0.14163220855434466, 0.14723799654885128, 0.0915373776941526, 0.13869603355982307, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.011969387603556925, 9.999999999998899e-05, 9.999999999998899e-05, 0.005430498454147892, 0.059307617871185325, 0.03081272704648963, 0.08986588706057996, 0.10452906064062284, 0.008686375097159527, 0.013278555200379905, 0.08899460620755617, 0.04427849308956644, 0.11689725124837225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04475939592949785, 0.06156108253826442, 0.07851384550809104, 0.07688369362092329, 0.06381604411538644, 0.08040563900556741, 0.07469803177816392, 0.07713319611033298, 0.06665767294401304, 0.3581369366702103, 0.3640988034105592, 0.41807822254211247, 0.3712571678732728, 0.33527067274918265, 0.37912050000404196, 0.347846006899576, 0.35099302880456895, 0.3470911517924231, 0.09665941402298972, 0.10685926207500929, 0.10607127424554585, 0.09661381616742615, 0.08961107118360956, 0.09184322167801728, 0.10984200419671875, 0.08493006898608979, 0.10721366882397088, 0.24908366034648333, 0.20040501195173233, 0.1993676528354995, 0.2493072482096227, 0.21585528858679393, 0.17938226945522495, 0.2216429352140321, 0.2298922006034163, 0.182826286165916, 0.2622807783746146, 0.2637168915108128, 0.2650155127861936, 0.26423958634123335, 0.24277888102790923, 0.26431484973148256, 0.25237685576791824, 0.2541325392681859, 0.25701405450637527, 0.19532284675275036, 0.20901467358367476, 0.2007965919329192, 0.20352339168493228, 0.2079222530608087, 0.1697284169684764, 0.16257994619623928, 0.1959994881114422, 0.18635469443002284, 0.2119719920007057, 0.1832752892744801, 0.19300016195149905, 0.2020506685759289, 0.19203590835432283, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.18604222874311604, 0.17601566798449908, 0.19050405098957313, 0.20720237400527863, 0.1970666794688649, 0.17246575426425137, 0.1984223742946175, 0.19360725198789575, 0.17664587235705698, 0.5391453991383579, 0.16953777489079325, 0.15420036366599033, 0.2716377777047917, 0.1975794088453, 0.19886997379428872, 0.35000817729958333, 0.17005526917748104, 0.48054712692999213, 0.4092620404766716, 0.15613359525885606, 0.31004115747730765, 0.5036810710013038, 0.33874410849909353, 0.2091860553119833, 0.10529279528814384, 0.10492025246060854, 0.4143941967858491, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.20394243043355798, 0.19659059394332967, 0.18199967015695562, 0.18008268279955542, 0.18275556122513914, 0.18274441759078364, 0.08933420057650654, 0.09876969476957853, 0.08835223633017308, 0.08070985681442966, 0.09182559882702479, 0.08009103056798972, 0.07921098327789355, 0.08661289764727387, 0.08291818388013017]}, "mutation_prompt": null}
{"id": "31a78056-52fc-4ad7-bfd8-1fe98e86c9c5", "solution": "import numpy as np\n\nclass ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Introducing dynamic quantum factor adaptation based on fitness improvement to enhance exploration and exploitation balance in QIPSO.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.40052570598683046, 0.37562211666283774, 0.35507416460347907, 0.34928280270681766, 0.3649261590780498, 0.36085165572983435, 0.3534497759754629, 0.35898589225071953, 0.3661896102429475, 0.0010324558890708602, 0.010990701671673597, 0.0014110041907519077, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003200543918005505, 9.999999999998899e-05, 0.08397539614006766, 0.11523015731251784, 0.11599070095650654, 0.09309145387230378, 0.08675515679105761, 0.10427946039202307, 0.1117435863111661, 0.12734584486645184, 0.1284785769841581, 0.08888111730227577, 0.09681018338265424, 0.09579217093043912, 0.09828922146594232, 0.10009224916078796, 0.08327754844244795, 0.0794586137280765, 0.10791646505700758, 0.08948988891765042, 0.9914233632670114, 0.9917114546520976, 0.991171814023667, 0.9896468414125761, 0.9898357128741788, 0.9880978891267381, 0.9908126643821275, 0.9917593975567109, 0.9905139307445721, 0.21928159182961404, 0.24499445087306682, 0.2439174869402556, 0.22017761223239474, 0.23449987476096135, 0.2511044906504709, 0.2658890782706078, 0.23827270886187302, 0.2568469267189697, 0.30632337760570594, 0.2477024475936449, 0.30870862483102623, 0.2588128015281742, 0.30049068948040636, 0.21999120985975795, 0.22149254426421505, 0.30665743645989985, 0.2752172449694503, 0.15346559977293983, 0.13055848721287444, 0.13565715801061562, 0.13267920714024528, 0.12965663302065955, 0.1761965747613331, 0.12451026505372886, 0.09855079838397562, 0.1275594744051225, 0.12529432743890578, 0.15247857516084418, 0.14262551248685873, 0.13138359625658835, 0.12315377806810646, 0.14163220855434466, 0.14723799654885128, 0.0915373776941526, 0.13869603355982307, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.011969387603556925, 9.999999999998899e-05, 9.999999999998899e-05, 0.005430498454147892, 0.059307617871185325, 0.03081272704648963, 0.08986588706057996, 0.10452906064062284, 0.008686375097159527, 0.013278555200379905, 0.08899460620755617, 0.04427849308956644, 0.11689725124837225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04475939592949785, 0.06156108253826442, 0.07851384550809104, 0.07688369362092329, 0.06381604411538644, 0.08040563900556741, 0.07469803177816392, 0.07713319611033298, 0.06665767294401304, 0.3581369366702103, 0.3640988034105592, 0.41807822254211247, 0.3712571678732728, 0.33527067274918265, 0.37912050000404196, 0.347846006899576, 0.35099302880456895, 0.3470911517924231, 0.09665941402298972, 0.10685926207500929, 0.10607127424554585, 0.09661381616742615, 0.08961107118360956, 0.09184322167801728, 0.10984200419671875, 0.08493006898608979, 0.10721366882397088, 0.24908366034648333, 0.20040501195173233, 0.1993676528354995, 0.2493072482096227, 0.21585528858679393, 0.17938226945522495, 0.2216429352140321, 0.2298922006034163, 0.182826286165916, 0.2622807783746146, 0.2637168915108128, 0.2650155127861936, 0.26423958634123335, 0.24277888102790923, 0.26431484973148256, 0.25237685576791824, 0.2541325392681859, 0.25701405450637527, 0.19532284675275036, 0.20901467358367476, 0.2007965919329192, 0.20352339168493228, 0.2079222530608087, 0.1697284169684764, 0.16257994619623928, 0.1959994881114422, 0.18635469443002284, 0.2119719920007057, 0.1832752892744801, 0.19300016195149905, 0.2020506685759289, 0.19203590835432283, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.18604222874311604, 0.17601566798449908, 0.19050405098957313, 0.20720237400527863, 0.1970666794688649, 0.17246575426425137, 0.1984223742946175, 0.19360725198789575, 0.17664587235705698, 0.5391453991383579, 0.16953777489079325, 0.15420036366599033, 0.2716377777047917, 0.1975794088453, 0.19886997379428872, 0.35000817729958333, 0.17005526917748104, 0.48054712692999213, 0.4092620404766716, 0.15613359525885606, 0.31004115747730765, 0.5036810710013038, 0.33874410849909353, 0.2091860553119833, 0.10529279528814384, 0.10492025246060854, 0.4143941967858491, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.20394243043355798, 0.19659059394332967, 0.18199967015695562, 0.18008268279955542, 0.18275556122513914, 0.18274441759078364, 0.08933420057650654, 0.09876969476957853, 0.08835223633017308, 0.08070985681442966, 0.09182559882702479, 0.08009103056798972, 0.07921098327789355, 0.08661289764727387, 0.08291818388013017]}, "mutation_prompt": null}
{"id": "8517edca-d128-47e2-acf9-6e3adeee6adc", "solution": "import numpy as np\n\nclass ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Introducing dynamic quantum factor adaptation based on fitness improvement to enhance exploration and exploitation balance in QIPSO.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.40052570598683046, 0.37562211666283774, 0.35507416460347907, 0.34928280270681766, 0.3649261590780498, 0.36085165572983435, 0.3534497759754629, 0.35898589225071953, 0.3661896102429475, 0.0010324558890708602, 0.010990701671673597, 0.0014110041907519077, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003200543918005505, 9.999999999998899e-05, 0.08397539614006766, 0.11523015731251784, 0.11599070095650654, 0.09309145387230378, 0.08675515679105761, 0.10427946039202307, 0.1117435863111661, 0.12734584486645184, 0.1284785769841581, 0.08888111730227577, 0.09681018338265424, 0.09579217093043912, 0.09828922146594232, 0.10009224916078796, 0.08327754844244795, 0.0794586137280765, 0.10791646505700758, 0.08948988891765042, 0.9914233632670114, 0.9917114546520976, 0.991171814023667, 0.9896468414125761, 0.9898357128741788, 0.9880978891267381, 0.9908126643821275, 0.9917593975567109, 0.9905139307445721, 0.21928159182961404, 0.24499445087306682, 0.2439174869402556, 0.22017761223239474, 0.23449987476096135, 0.2511044906504709, 0.2658890782706078, 0.23827270886187302, 0.2568469267189697, 0.30632337760570594, 0.2477024475936449, 0.30870862483102623, 0.2588128015281742, 0.30049068948040636, 0.21999120985975795, 0.22149254426421505, 0.30665743645989985, 0.2752172449694503, 0.15346559977293983, 0.13055848721287444, 0.13565715801061562, 0.13267920714024528, 0.12965663302065955, 0.1761965747613331, 0.12451026505372886, 0.09855079838397562, 0.1275594744051225, 0.12529432743890578, 0.15247857516084418, 0.14262551248685873, 0.13138359625658835, 0.12315377806810646, 0.14163220855434466, 0.14723799654885128, 0.0915373776941526, 0.13869603355982307, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.011969387603556925, 9.999999999998899e-05, 9.999999999998899e-05, 0.005430498454147892, 0.059307617871185325, 0.03081272704648963, 0.08986588706057996, 0.10452906064062284, 0.008686375097159527, 0.013278555200379905, 0.08899460620755617, 0.04427849308956644, 0.11689725124837225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04475939592949785, 0.06156108253826442, 0.07851384550809104, 0.07688369362092329, 0.06381604411538644, 0.08040563900556741, 0.07469803177816392, 0.07713319611033298, 0.06665767294401304, 0.3581369366702103, 0.3640988034105592, 0.41807822254211247, 0.3712571678732728, 0.33527067274918265, 0.37912050000404196, 0.347846006899576, 0.35099302880456895, 0.3470911517924231, 0.09665941402298972, 0.10685926207500929, 0.10607127424554585, 0.09661381616742615, 0.08961107118360956, 0.09184322167801728, 0.10984200419671875, 0.08493006898608979, 0.10721366882397088, 0.24908366034648333, 0.20040501195173233, 0.1993676528354995, 0.2493072482096227, 0.21585528858679393, 0.17938226945522495, 0.2216429352140321, 0.2298922006034163, 0.182826286165916, 0.2622807783746146, 0.2637168915108128, 0.2650155127861936, 0.26423958634123335, 0.24277888102790923, 0.26431484973148256, 0.25237685576791824, 0.2541325392681859, 0.25701405450637527, 0.19532284675275036, 0.20901467358367476, 0.2007965919329192, 0.20352339168493228, 0.2079222530608087, 0.1697284169684764, 0.16257994619623928, 0.1959994881114422, 0.18635469443002284, 0.2119719920007057, 0.1832752892744801, 0.19300016195149905, 0.2020506685759289, 0.19203590835432283, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.18604222874311604, 0.17601566798449908, 0.19050405098957313, 0.20720237400527863, 0.1970666794688649, 0.17246575426425137, 0.1984223742946175, 0.19360725198789575, 0.17664587235705698, 0.5391453991383579, 0.16953777489079325, 0.15420036366599033, 0.2716377777047917, 0.1975794088453, 0.19886997379428872, 0.35000817729958333, 0.17005526917748104, 0.48054712692999213, 0.4092620404766716, 0.15613359525885606, 0.31004115747730765, 0.5036810710013038, 0.33874410849909353, 0.2091860553119833, 0.10529279528814384, 0.10492025246060854, 0.4143941967858491, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.20394243043355798, 0.19659059394332967, 0.18199967015695562, 0.18008268279955542, 0.18275556122513914, 0.18274441759078364, 0.08933420057650654, 0.09876969476957853, 0.08835223633017308, 0.08070985681442966, 0.09182559882702479, 0.08009103056798972, 0.07921098327789355, 0.08661289764727387, 0.08291818388013017]}, "mutation_prompt": null}
{"id": "c555b2c3-c953-4676-badb-b5b773739166", "solution": "import numpy as np\n\nclass ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Introducing dynamic quantum factor adaptation based on fitness improvement to enhance exploration and exploitation balance in QIPSO.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.40052570598683046, 0.37562211666283774, 0.35507416460347907, 0.34928280270681766, 0.3649261590780498, 0.36085165572983435, 0.3534497759754629, 0.35898589225071953, 0.3661896102429475, 0.0010324558890708602, 0.010990701671673597, 0.0014110041907519077, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003200543918005505, 9.999999999998899e-05, 0.08397539614006766, 0.11523015731251784, 0.11599070095650654, 0.09309145387230378, 0.08675515679105761, 0.10427946039202307, 0.1117435863111661, 0.12734584486645184, 0.1284785769841581, 0.08888111730227577, 0.09681018338265424, 0.09579217093043912, 0.09828922146594232, 0.10009224916078796, 0.08327754844244795, 0.0794586137280765, 0.10791646505700758, 0.08948988891765042, 0.9914233632670114, 0.9917114546520976, 0.991171814023667, 0.9896468414125761, 0.9898357128741788, 0.9880978891267381, 0.9908126643821275, 0.9917593975567109, 0.9905139307445721, 0.21928159182961404, 0.24499445087306682, 0.2439174869402556, 0.22017761223239474, 0.23449987476096135, 0.2511044906504709, 0.2658890782706078, 0.23827270886187302, 0.2568469267189697, 0.30632337760570594, 0.2477024475936449, 0.30870862483102623, 0.2588128015281742, 0.30049068948040636, 0.21999120985975795, 0.22149254426421505, 0.30665743645989985, 0.2752172449694503, 0.15346559977293983, 0.13055848721287444, 0.13565715801061562, 0.13267920714024528, 0.12965663302065955, 0.1761965747613331, 0.12451026505372886, 0.09855079838397562, 0.1275594744051225, 0.12529432743890578, 0.15247857516084418, 0.14262551248685873, 0.13138359625658835, 0.12315377806810646, 0.14163220855434466, 0.14723799654885128, 0.0915373776941526, 0.13869603355982307, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.011969387603556925, 9.999999999998899e-05, 9.999999999998899e-05, 0.005430498454147892, 0.059307617871185325, 0.03081272704648963, 0.08986588706057996, 0.10452906064062284, 0.008686375097159527, 0.013278555200379905, 0.08899460620755617, 0.04427849308956644, 0.11689725124837225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04475939592949785, 0.06156108253826442, 0.07851384550809104, 0.07688369362092329, 0.06381604411538644, 0.08040563900556741, 0.07469803177816392, 0.07713319611033298, 0.06665767294401304, 0.3581369366702103, 0.3640988034105592, 0.41807822254211247, 0.3712571678732728, 0.33527067274918265, 0.37912050000404196, 0.347846006899576, 0.35099302880456895, 0.3470911517924231, 0.09665941402298972, 0.10685926207500929, 0.10607127424554585, 0.09661381616742615, 0.08961107118360956, 0.09184322167801728, 0.10984200419671875, 0.08493006898608979, 0.10721366882397088, 0.24908366034648333, 0.20040501195173233, 0.1993676528354995, 0.2493072482096227, 0.21585528858679393, 0.17938226945522495, 0.2216429352140321, 0.2298922006034163, 0.182826286165916, 0.2622807783746146, 0.2637168915108128, 0.2650155127861936, 0.26423958634123335, 0.24277888102790923, 0.26431484973148256, 0.25237685576791824, 0.2541325392681859, 0.25701405450637527, 0.19532284675275036, 0.20901467358367476, 0.2007965919329192, 0.20352339168493228, 0.2079222530608087, 0.1697284169684764, 0.16257994619623928, 0.1959994881114422, 0.18635469443002284, 0.2119719920007057, 0.1832752892744801, 0.19300016195149905, 0.2020506685759289, 0.19203590835432283, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.18604222874311604, 0.17601566798449908, 0.19050405098957313, 0.20720237400527863, 0.1970666794688649, 0.17246575426425137, 0.1984223742946175, 0.19360725198789575, 0.17664587235705698, 0.5391453991383579, 0.16953777489079325, 0.15420036366599033, 0.2716377777047917, 0.1975794088453, 0.19886997379428872, 0.35000817729958333, 0.17005526917748104, 0.48054712692999213, 0.4092620404766716, 0.15613359525885606, 0.31004115747730765, 0.5036810710013038, 0.33874410849909353, 0.2091860553119833, 0.10529279528814384, 0.10492025246060854, 0.4143941967858491, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.20394243043355798, 0.19659059394332967, 0.18199967015695562, 0.18008268279955542, 0.18275556122513914, 0.18274441759078364, 0.08933420057650654, 0.09876969476957853, 0.08835223633017308, 0.08070985681442966, 0.09182559882702479, 0.08009103056798972, 0.07921098327789355, 0.08661289764727387, 0.08291818388013017]}, "mutation_prompt": null}
{"id": "d0bc13d6-b29e-4076-b49e-525513952762", "solution": "import numpy as np\n\nclass ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Introducing dynamic quantum factor adaptation based on fitness improvement to enhance exploration and exploitation balance in QIPSO.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.40052570598683046, 0.37562211666283774, 0.35507416460347907, 0.34928280270681766, 0.3649261590780498, 0.36085165572983435, 0.3534497759754629, 0.35898589225071953, 0.3661896102429475, 0.0010324558890708602, 0.010990701671673597, 0.0014110041907519077, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003200543918005505, 9.999999999998899e-05, 0.08397539614006766, 0.11523015731251784, 0.11599070095650654, 0.09309145387230378, 0.08675515679105761, 0.10427946039202307, 0.1117435863111661, 0.12734584486645184, 0.1284785769841581, 0.08888111730227577, 0.09681018338265424, 0.09579217093043912, 0.09828922146594232, 0.10009224916078796, 0.08327754844244795, 0.0794586137280765, 0.10791646505700758, 0.08948988891765042, 0.9914233632670114, 0.9917114546520976, 0.991171814023667, 0.9896468414125761, 0.9898357128741788, 0.9880978891267381, 0.9908126643821275, 0.9917593975567109, 0.9905139307445721, 0.21928159182961404, 0.24499445087306682, 0.2439174869402556, 0.22017761223239474, 0.23449987476096135, 0.2511044906504709, 0.2658890782706078, 0.23827270886187302, 0.2568469267189697, 0.30632337760570594, 0.2477024475936449, 0.30870862483102623, 0.2588128015281742, 0.30049068948040636, 0.21999120985975795, 0.22149254426421505, 0.30665743645989985, 0.2752172449694503, 0.15346559977293983, 0.13055848721287444, 0.13565715801061562, 0.13267920714024528, 0.12965663302065955, 0.1761965747613331, 0.12451026505372886, 0.09855079838397562, 0.1275594744051225, 0.12529432743890578, 0.15247857516084418, 0.14262551248685873, 0.13138359625658835, 0.12315377806810646, 0.14163220855434466, 0.14723799654885128, 0.0915373776941526, 0.13869603355982307, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.011969387603556925, 9.999999999998899e-05, 9.999999999998899e-05, 0.005430498454147892, 0.059307617871185325, 0.03081272704648963, 0.08986588706057996, 0.10452906064062284, 0.008686375097159527, 0.013278555200379905, 0.08899460620755617, 0.04427849308956644, 0.11689725124837225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04475939592949785, 0.06156108253826442, 0.07851384550809104, 0.07688369362092329, 0.06381604411538644, 0.08040563900556741, 0.07469803177816392, 0.07713319611033298, 0.06665767294401304, 0.3581369366702103, 0.3640988034105592, 0.41807822254211247, 0.3712571678732728, 0.33527067274918265, 0.37912050000404196, 0.347846006899576, 0.35099302880456895, 0.3470911517924231, 0.09665941402298972, 0.10685926207500929, 0.10607127424554585, 0.09661381616742615, 0.08961107118360956, 0.09184322167801728, 0.10984200419671875, 0.08493006898608979, 0.10721366882397088, 0.24908366034648333, 0.20040501195173233, 0.1993676528354995, 0.2493072482096227, 0.21585528858679393, 0.17938226945522495, 0.2216429352140321, 0.2298922006034163, 0.182826286165916, 0.2622807783746146, 0.2637168915108128, 0.2650155127861936, 0.26423958634123335, 0.24277888102790923, 0.26431484973148256, 0.25237685576791824, 0.2541325392681859, 0.25701405450637527, 0.19532284675275036, 0.20901467358367476, 0.2007965919329192, 0.20352339168493228, 0.2079222530608087, 0.1697284169684764, 0.16257994619623928, 0.1959994881114422, 0.18635469443002284, 0.2119719920007057, 0.1832752892744801, 0.19300016195149905, 0.2020506685759289, 0.19203590835432283, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.18604222874311604, 0.17601566798449908, 0.19050405098957313, 0.20720237400527863, 0.1970666794688649, 0.17246575426425137, 0.1984223742946175, 0.19360725198789575, 0.17664587235705698, 0.5391453991383579, 0.16953777489079325, 0.15420036366599033, 0.2716377777047917, 0.1975794088453, 0.19886997379428872, 0.35000817729958333, 0.17005526917748104, 0.48054712692999213, 0.4092620404766716, 0.15613359525885606, 0.31004115747730765, 0.5036810710013038, 0.33874410849909353, 0.2091860553119833, 0.10529279528814384, 0.10492025246060854, 0.4143941967858491, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.20394243043355798, 0.19659059394332967, 0.18199967015695562, 0.18008268279955542, 0.18275556122513914, 0.18274441759078364, 0.08933420057650654, 0.09876969476957853, 0.08835223633017308, 0.08070985681442966, 0.09182559882702479, 0.08009103056798972, 0.07921098327789355, 0.08661289764727387, 0.08291818388013017]}, "mutation_prompt": null}
{"id": "071178c4-f2a2-45c8-b27f-3c1727d9908d", "solution": "class RefinedQIPSO(ImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay)\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            if current_value < best_values[global_best_idx]:  # Adaptive quantum decay\n                                self.quantum_factor *= self.quantum_factor_decay\n                            else:\n                                self.quantum_factor = min(1.0, self.quantum_factor * 1.01)\n\n        return global_best", "name": "RefinedQIPSO", "description": "Implement adaptive quantum factor decay based on the performance of individual particles to enhance convergence speed and exploration in ImprovedQIPSO.", "configspace": "", "generation": 21, "fitness": 0.19961474501835794, "feedback": "The algorithm RefinedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.40052570598683046, 0.3870862740727824, 0.35524964674699777, 0.34928280270681766, 0.3763835549502278, 0.36535844706780585, 0.3865552122274952, 0.35558187222225435, 0.35540995377088525, 0.00748898440324941, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.08600131918045939, 0.10995177107955822, 0.10838243045785056, 0.09223517186854457, 0.10363445198400989, 0.09215533836243106, 0.1117435863111661, 0.12391733960927609, 0.1132147819567847, 0.08888111730227577, 0.10219779360975789, 0.08431340245133556, 0.08664197352148018, 0.0865948913827036, 0.0928915781572146, 0.0794586137280765, 0.07479324364221407, 0.08483916225973265, 0.9914233632670114, 0.9929261104601116, 0.9911729258496537, 0.989476620460126, 0.9898437890584635, 0.9880984988598113, 0.9908134877740998, 0.9920849165760008, 0.9905127267132838, 0.25121605744039277, 0.2608521967936097, 0.23538237307452803, 0.21920136575976945, 0.23449987476096135, 0.22828012528529062, 0.21707059647586313, 0.22707867514983948, 0.2572390504181645, 0.2530988435862961, 0.24577765452390865, 0.3361002394162038, 0.2877825677104706, 0.2419407060804496, 0.2643209010871207, 0.21289160686985642, 0.25759123337856416, 0.2591389649060487, 0.15346559977293983, 0.12370526570291462, 0.1293945778066956, 0.12652151957601987, 0.12873920027674335, 0.11768213089012824, 0.12451026505372886, 0.0849028667503513, 0.13617220415875986, 0.1346463649631382, 0.1560223393582132, 0.1252856574393334, 0.13138359625658835, 0.1210229928033808, 0.1293366853645357, 0.14723799654885128, 0.05571512519161281, 0.15533782311169075, 9.999999999998899e-05, 0.003448264567039727, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.023686923446327834, 9.999999999998899e-05, 9.999999999998899e-05, 0.011583135444004578, 0.059307617871185325, 0.030749155715062315, 0.08519340122291319, 0.07461561841542885, 0.008686375097159527, 0.012246941056438976, 0.08327844674319362, 0.04427849308956644, 0.08967845909605954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04973782641760205, 0.03561849389776672, 0.07002066273065777, 0.07688369362092329, 0.06489332100717637, 0.05993475718430363, 0.07469803177816392, 0.0637046713742464, 0.05651176031397065, 0.34102227041160205, 0.36210352100957277, 0.40931070168730366, 0.3362673949622713, 0.33527067274918265, 0.37912050000404196, 0.35057002426280215, 0.3511908341611697, 0.3470911517924231, 0.09665941402298972, 0.09731257924470171, 0.10607127424554585, 0.10086009163592191, 0.10163992617149031, 0.09184322167801728, 0.10177172508324239, 0.13392348160753986, 0.10721366882397088, 0.20863103799863847, 0.20040501195173233, 0.19946436765934827, 0.22221401654486328, 0.21585528858679393, 0.1697106002223585, 0.22037617504020746, 0.2331552014951186, 0.19825686482738036, 0.2622807783746146, 0.2628457664270023, 0.2685501269868269, 0.26423958634123335, 0.24844209652200078, 0.2583268170817712, 0.25236048302091707, 0.279960174587761, 0.24976297640616918, 0.19567700761671936, 0.20901467358367476, 0.20250124886101417, 0.20253521702722999, 0.2034890415023558, 0.1610769303145998, 0.16371588435555073, 0.20196523210446504, 0.20753725887614127, 0.2119719920007057, 0.19929361542099455, 0.19300016195149905, 0.2020506685759289, 0.21087687149275414, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.19029298404756978, 0.19981387643509307, 0.19300832400848256, 0.18384286923992954, 0.1902614526157428, 0.18092311108786874, 0.18941423600482343, 0.20416329291217172, 0.19207849104898755, 0.538872507219367, 0.16957496250049298, 0.15353526967805387, 0.2716377777047917, 0.19735299297753828, 0.19886997379428872, 0.15944866791432777, 0.17012494662255595, 0.5848882016865897, 0.4272949928504828, 0.15577481108931657, 0.37430328504994026, 0.438419630472626, 0.4699593991975116, 0.20903728039930125, 0.10480192861558812, 0.10492025246060854, 0.40235589000733274, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.18684421142011665, 0.17117065378618068, 0.18199967015695562, 0.18008268279955542, 0.1855871575288398, 0.18274441759078364, 0.0850347188479531, 0.08678442335685055, 0.08857760755675503, 0.08361041591031337, 0.0915383020114725, 0.0884858130525017, 0.08170360400738741, 0.09139316622953442, 0.08476706754550856]}, "mutation_prompt": null}
{"id": "87b4f755-a8a1-4e18-8f03-f75047ee81f0", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, mutation_rate=0.1):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < self.mutation_rate:  # Adaptive mutation\n                            particles[i] = np.random.uniform(-5.0, 5.0, size=self.dim)\n\n                            if np.random.rand() < 0.1:  # 10% chance\n                                self.quantum_factor *= self.quantum_factor_decay\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhancing exploration by introducing a novel adaptive mutation mechanism to escape local optima.", "configspace": "", "generation": 22, "fitness": 0.1963773578937335, "feedback": "The algorithm EnhancedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.40052570598683046, 0.3519762463372791, 0.37054914872217404, 0.354100600174882, 0.35127462296082745, 0.35183864811019616, 0.3390051517858772, 0.33380152902619786, 0.3438998863792182, 9.999999999998899e-05, 0.0005889432234919001, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.00979783056753003, 9.999999999998899e-05, 0.08065957887212827, 0.08891793489355126, 0.09919174714008261, 0.09829450164092324, 0.06643776651192512, 0.0873626705015147, 0.1117435863111661, 0.09424825467019093, 0.0995682418605649, 0.08888111730227577, 0.08980794312571727, 0.11188740448987788, 0.09245299528585671, 0.08995896179868779, 0.08641193022957372, 0.0794586137280765, 0.08042566772869653, 0.09445767459725662, 0.9914233632670114, 0.993938471106563, 0.9923411206347257, 0.9848271438596193, 0.9940085364147521, 0.9858287739529357, 0.989456182246347, 0.9913067679235459, 0.9896713930685345, 0.22144993128170587, 0.22200096044390882, 0.22777644806131336, 0.22859273659930457, 0.23449987476096135, 0.21998936861237128, 0.236139642451359, 0.23681085785891332, 0.22563003358975597, 0.3155890373053917, 0.24835573353192752, 0.327925257372782, 0.2384666217812158, 0.27279477006129593, 0.2705232737263483, 0.21570332674236592, 0.28486689870153503, 0.30269026708079605, 0.15346559977293983, 0.1318470862037695, 0.13206230754721726, 0.0917677558732567, 0.13534320829093116, 0.15122096986169387, 0.12451026505372886, 0.10606452715441594, 0.1405348680178342, 0.15095122791660365, 0.1396573059365872, 0.1022311721817667, 0.13138359625658835, 0.1606945874212664, 0.15258760594144982, 0.14723799654885128, 0.12466066092421169, 0.1260474923834627, 9.999999999998899e-05, 0.010805052382573344, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059307617871185325, 0.027173301384018078, 0.08405308668337963, 0.08196644452884216, 0.008686375097159527, 0.012126213009719833, 0.08542799027790315, 0.04427849308956644, 0.10373636787643992, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049189786896936094, 0.05152836324499077, 0.09147071441259413, 0.07688369362092329, 0.05351669807419368, 0.07167521362390694, 0.07469803177816392, 0.06680399923426827, 0.06586020387111824, 0.34320738735884593, 0.34503583812982863, 0.3700350545251695, 0.3478627455769365, 0.33527067274918265, 0.37912050000404196, 0.34747390197635075, 0.36162447648114726, 0.3470911517924231, 0.09665941402298972, 0.09733642991025715, 0.10607127424554585, 0.1153357648619191, 0.10762161818656601, 0.09184322167801728, 0.10293717313803585, 0.10281795028168272, 0.10721366882397088, 0.18453778286602862, 0.20040501195173233, 0.20834217169976887, 0.2068412306030053, 0.21585528858679393, 0.23727605882919656, 0.20273250256212227, 0.2344018204624413, 0.20702173190835116, 0.2622807783746146, 0.2504307426998784, 0.2642594993881543, 0.26423958634123335, 0.24523265493034097, 0.25046177215743204, 0.26478557419224413, 0.24737794119667955, 0.2689085527771562, 0.1975034641916794, 0.20901467358367476, 0.20070407670856572, 0.20354280059773155, 0.2105916737470026, 0.16237243291805803, 0.18096542540644245, 0.20432555740214653, 0.17990442420123942, 0.2119719920007057, 0.21089491173439268, 0.19300016195149905, 0.2020506685759289, 0.1991987562857569, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2011936335560386, 0.1893478564793638, 0.18067561617514216, 0.2047015156605021, 0.18366098253131358, 0.1737860036489587, 0.1935472882617265, 0.19696626024728614, 0.18015673394185727, 0.538872507219367, 0.1679577105407969, 0.15419612897148105, 0.2716377777047917, 0.19611061541062336, 0.19886997379428872, 0.12163636707681835, 0.17026121010661188, 0.4771416651039747, 0.4513781939509537, 0.1559661628766087, 0.1114727773198112, 0.42530245501200026, 0.16877299947799151, 0.20700741519869603, 0.15507108896265331, 0.10492025246060854, 0.42234074677288536, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.18552497608318907, 0.17280990508081961, 0.18199967015695562, 0.18008268279955542, 0.19322813770417135, 0.18274441759078364, 0.08579948970090079, 0.08590061257552228, 0.08990295170783336, 0.0747184505401125, 0.0951155304980883, 0.08661409018456512, 0.08422766872745213, 0.0889562189173152, 0.09297519975667179]}, "mutation_prompt": null}
{"id": "9dc10296-a726-4978-9a4f-50731ecb953d", "solution": "import numpy as np\n\nclass ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Introducing dynamic quantum factor adaptation based on fitness improvement to enhance exploration and exploitation balance in QIPSO.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.40052570598683046, 0.37562211666283774, 0.35507416460347907, 0.34928280270681766, 0.3649261590780498, 0.36085165572983435, 0.3534497759754629, 0.35898589225071953, 0.3661896102429475, 0.0010324558890708602, 0.010990701671673597, 0.0014110041907519077, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003200543918005505, 9.999999999998899e-05, 0.08397539614006766, 0.11523015731251784, 0.11599070095650654, 0.09309145387230378, 0.08675515679105761, 0.10427946039202307, 0.1117435863111661, 0.12734584486645184, 0.1284785769841581, 0.08888111730227577, 0.09681018338265424, 0.09579217093043912, 0.09828922146594232, 0.10009224916078796, 0.08327754844244795, 0.0794586137280765, 0.10791646505700758, 0.08948988891765042, 0.9914233632670114, 0.9917114546520976, 0.991171814023667, 0.9896468414125761, 0.9898357128741788, 0.9880978891267381, 0.9908126643821275, 0.9917593975567109, 0.9905139307445721, 0.21928159182961404, 0.24499445087306682, 0.2439174869402556, 0.22017761223239474, 0.23449987476096135, 0.2511044906504709, 0.2658890782706078, 0.23827270886187302, 0.2568469267189697, 0.30632337760570594, 0.2477024475936449, 0.30870862483102623, 0.2588128015281742, 0.30049068948040636, 0.21999120985975795, 0.22149254426421505, 0.30665743645989985, 0.2752172449694503, 0.15346559977293983, 0.13055848721287444, 0.13565715801061562, 0.13267920714024528, 0.12965663302065955, 0.1761965747613331, 0.12451026505372886, 0.09855079838397562, 0.1275594744051225, 0.12529432743890578, 0.15247857516084418, 0.14262551248685873, 0.13138359625658835, 0.12315377806810646, 0.14163220855434466, 0.14723799654885128, 0.0915373776941526, 0.13869603355982307, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.011969387603556925, 9.999999999998899e-05, 9.999999999998899e-05, 0.005430498454147892, 0.059307617871185325, 0.03081272704648963, 0.08986588706057996, 0.10452906064062284, 0.008686375097159527, 0.013278555200379905, 0.08899460620755617, 0.04427849308956644, 0.11689725124837225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04475939592949785, 0.06156108253826442, 0.07851384550809104, 0.07688369362092329, 0.06381604411538644, 0.08040563900556741, 0.07469803177816392, 0.07713319611033298, 0.06665767294401304, 0.3581369366702103, 0.3640988034105592, 0.41807822254211247, 0.3712571678732728, 0.33527067274918265, 0.37912050000404196, 0.347846006899576, 0.35099302880456895, 0.3470911517924231, 0.09665941402298972, 0.10685926207500929, 0.10607127424554585, 0.09661381616742615, 0.08961107118360956, 0.09184322167801728, 0.10984200419671875, 0.08493006898608979, 0.10721366882397088, 0.24908366034648333, 0.20040501195173233, 0.1993676528354995, 0.2493072482096227, 0.21585528858679393, 0.17938226945522495, 0.2216429352140321, 0.2298922006034163, 0.182826286165916, 0.2622807783746146, 0.2637168915108128, 0.2650155127861936, 0.26423958634123335, 0.24277888102790923, 0.26431484973148256, 0.25237685576791824, 0.2541325392681859, 0.25701405450637527, 0.19532284675275036, 0.20901467358367476, 0.2007965919329192, 0.20352339168493228, 0.2079222530608087, 0.1697284169684764, 0.16257994619623928, 0.1959994881114422, 0.18635469443002284, 0.2119719920007057, 0.1832752892744801, 0.19300016195149905, 0.2020506685759289, 0.19203590835432283, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.18604222874311604, 0.17601566798449908, 0.19050405098957313, 0.20720237400527863, 0.1970666794688649, 0.17246575426425137, 0.1984223742946175, 0.19360725198789575, 0.17664587235705698, 0.5391453991383579, 0.16953777489079325, 0.15420036366599033, 0.2716377777047917, 0.1975794088453, 0.19886997379428872, 0.35000817729958333, 0.17005526917748104, 0.48054712692999213, 0.4092620404766716, 0.15613359525885606, 0.31004115747730765, 0.5036810710013038, 0.33874410849909353, 0.2091860553119833, 0.10529279528814384, 0.10492025246060854, 0.4143941967858491, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.20394243043355798, 0.19659059394332967, 0.18199967015695562, 0.18008268279955542, 0.18275556122513914, 0.18274441759078364, 0.08933420057650654, 0.09876969476957853, 0.08835223633017308, 0.08070985681442966, 0.09182559882702479, 0.08009103056798972, 0.07921098327789355, 0.08661289764727387, 0.08291818388013017]}, "mutation_prompt": null}
{"id": "efe3ccd4-101d-43e0-84a9-0e2fc8804507", "solution": "import numpy as np\n\nclass ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Introducing dynamic quantum factor adaptation based on fitness improvement to enhance exploration and exploitation balance in QIPSO.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.40052570598683046, 0.37562211666283774, 0.35507416460347907, 0.34928280270681766, 0.3649261590780498, 0.36085165572983435, 0.3534497759754629, 0.35898589225071953, 0.3661896102429475, 0.0010324558890708602, 0.010990701671673597, 0.0014110041907519077, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003200543918005505, 9.999999999998899e-05, 0.08397539614006766, 0.11523015731251784, 0.11599070095650654, 0.09309145387230378, 0.08675515679105761, 0.10427946039202307, 0.1117435863111661, 0.12734584486645184, 0.1284785769841581, 0.08888111730227577, 0.09681018338265424, 0.09579217093043912, 0.09828922146594232, 0.10009224916078796, 0.08327754844244795, 0.0794586137280765, 0.10791646505700758, 0.08948988891765042, 0.9914233632670114, 0.9917114546520976, 0.991171814023667, 0.9896468414125761, 0.9898357128741788, 0.9880978891267381, 0.9908126643821275, 0.9917593975567109, 0.9905139307445721, 0.21928159182961404, 0.24499445087306682, 0.2439174869402556, 0.22017761223239474, 0.23449987476096135, 0.2511044906504709, 0.2658890782706078, 0.23827270886187302, 0.2568469267189697, 0.30632337760570594, 0.2477024475936449, 0.30870862483102623, 0.2588128015281742, 0.30049068948040636, 0.21999120985975795, 0.22149254426421505, 0.30665743645989985, 0.2752172449694503, 0.15346559977293983, 0.13055848721287444, 0.13565715801061562, 0.13267920714024528, 0.12965663302065955, 0.1761965747613331, 0.12451026505372886, 0.09855079838397562, 0.1275594744051225, 0.12529432743890578, 0.15247857516084418, 0.14262551248685873, 0.13138359625658835, 0.12315377806810646, 0.14163220855434466, 0.14723799654885128, 0.0915373776941526, 0.13869603355982307, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.011969387603556925, 9.999999999998899e-05, 9.999999999998899e-05, 0.005430498454147892, 0.059307617871185325, 0.03081272704648963, 0.08986588706057996, 0.10452906064062284, 0.008686375097159527, 0.013278555200379905, 0.08899460620755617, 0.04427849308956644, 0.11689725124837225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04475939592949785, 0.06156108253826442, 0.07851384550809104, 0.07688369362092329, 0.06381604411538644, 0.08040563900556741, 0.07469803177816392, 0.07713319611033298, 0.06665767294401304, 0.3581369366702103, 0.3640988034105592, 0.41807822254211247, 0.3712571678732728, 0.33527067274918265, 0.37912050000404196, 0.347846006899576, 0.35099302880456895, 0.3470911517924231, 0.09665941402298972, 0.10685926207500929, 0.10607127424554585, 0.09661381616742615, 0.08961107118360956, 0.09184322167801728, 0.10984200419671875, 0.08493006898608979, 0.10721366882397088, 0.24908366034648333, 0.20040501195173233, 0.1993676528354995, 0.2493072482096227, 0.21585528858679393, 0.17938226945522495, 0.2216429352140321, 0.2298922006034163, 0.182826286165916, 0.2622807783746146, 0.2637168915108128, 0.2650155127861936, 0.26423958634123335, 0.24277888102790923, 0.26431484973148256, 0.25237685576791824, 0.2541325392681859, 0.25701405450637527, 0.19532284675275036, 0.20901467358367476, 0.2007965919329192, 0.20352339168493228, 0.2079222530608087, 0.1697284169684764, 0.16257994619623928, 0.1959994881114422, 0.18635469443002284, 0.2119719920007057, 0.1832752892744801, 0.19300016195149905, 0.2020506685759289, 0.19203590835432283, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.18604222874311604, 0.17601566798449908, 0.19050405098957313, 0.20720237400527863, 0.1970666794688649, 0.17246575426425137, 0.1984223742946175, 0.19360725198789575, 0.17664587235705698, 0.5391453991383579, 0.16953777489079325, 0.15420036366599033, 0.2716377777047917, 0.1975794088453, 0.19886997379428872, 0.35000817729958333, 0.17005526917748104, 0.48054712692999213, 0.4092620404766716, 0.15613359525885606, 0.31004115747730765, 0.5036810710013038, 0.33874410849909353, 0.2091860553119833, 0.10529279528814384, 0.10492025246060854, 0.4143941967858491, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.20394243043355798, 0.19659059394332967, 0.18199967015695562, 0.18008268279955542, 0.18275556122513914, 0.18274441759078364, 0.08933420057650654, 0.09876969476957853, 0.08835223633017308, 0.08070985681442966, 0.09182559882702479, 0.08009103056798972, 0.07921098327789355, 0.08661289764727387, 0.08291818388013017]}, "mutation_prompt": null}
{"id": "67cc2fa9-78d1-4ff2-b72d-3726afa85aab", "solution": "import numpy as np\n\nclass ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Introducing dynamic quantum factor adaptation based on fitness improvement to enhance exploration and exploitation balance in QIPSO.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.40052570598683046, 0.37562211666283774, 0.35507416460347907, 0.34928280270681766, 0.3649261590780498, 0.36085165572983435, 0.3534497759754629, 0.35898589225071953, 0.3661896102429475, 0.0010324558890708602, 0.010990701671673597, 0.0014110041907519077, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003200543918005505, 9.999999999998899e-05, 0.08397539614006766, 0.11523015731251784, 0.11599070095650654, 0.09309145387230378, 0.08675515679105761, 0.10427946039202307, 0.1117435863111661, 0.12734584486645184, 0.1284785769841581, 0.08888111730227577, 0.09681018338265424, 0.09579217093043912, 0.09828922146594232, 0.10009224916078796, 0.08327754844244795, 0.0794586137280765, 0.10791646505700758, 0.08948988891765042, 0.9914233632670114, 0.9917114546520976, 0.991171814023667, 0.9896468414125761, 0.9898357128741788, 0.9880978891267381, 0.9908126643821275, 0.9917593975567109, 0.9905139307445721, 0.21928159182961404, 0.24499445087306682, 0.2439174869402556, 0.22017761223239474, 0.23449987476096135, 0.2511044906504709, 0.2658890782706078, 0.23827270886187302, 0.2568469267189697, 0.30632337760570594, 0.2477024475936449, 0.30870862483102623, 0.2588128015281742, 0.30049068948040636, 0.21999120985975795, 0.22149254426421505, 0.30665743645989985, 0.2752172449694503, 0.15346559977293983, 0.13055848721287444, 0.13565715801061562, 0.13267920714024528, 0.12965663302065955, 0.1761965747613331, 0.12451026505372886, 0.09855079838397562, 0.1275594744051225, 0.12529432743890578, 0.15247857516084418, 0.14262551248685873, 0.13138359625658835, 0.12315377806810646, 0.14163220855434466, 0.14723799654885128, 0.0915373776941526, 0.13869603355982307, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.011969387603556925, 9.999999999998899e-05, 9.999999999998899e-05, 0.005430498454147892, 0.059307617871185325, 0.03081272704648963, 0.08986588706057996, 0.10452906064062284, 0.008686375097159527, 0.013278555200379905, 0.08899460620755617, 0.04427849308956644, 0.11689725124837225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04475939592949785, 0.06156108253826442, 0.07851384550809104, 0.07688369362092329, 0.06381604411538644, 0.08040563900556741, 0.07469803177816392, 0.07713319611033298, 0.06665767294401304, 0.3581369366702103, 0.3640988034105592, 0.41807822254211247, 0.3712571678732728, 0.33527067274918265, 0.37912050000404196, 0.347846006899576, 0.35099302880456895, 0.3470911517924231, 0.09665941402298972, 0.10685926207500929, 0.10607127424554585, 0.09661381616742615, 0.08961107118360956, 0.09184322167801728, 0.10984200419671875, 0.08493006898608979, 0.10721366882397088, 0.24908366034648333, 0.20040501195173233, 0.1993676528354995, 0.2493072482096227, 0.21585528858679393, 0.17938226945522495, 0.2216429352140321, 0.2298922006034163, 0.182826286165916, 0.2622807783746146, 0.2637168915108128, 0.2650155127861936, 0.26423958634123335, 0.24277888102790923, 0.26431484973148256, 0.25237685576791824, 0.2541325392681859, 0.25701405450637527, 0.19532284675275036, 0.20901467358367476, 0.2007965919329192, 0.20352339168493228, 0.2079222530608087, 0.1697284169684764, 0.16257994619623928, 0.1959994881114422, 0.18635469443002284, 0.2119719920007057, 0.1832752892744801, 0.19300016195149905, 0.2020506685759289, 0.19203590835432283, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.18604222874311604, 0.17601566798449908, 0.19050405098957313, 0.20720237400527863, 0.1970666794688649, 0.17246575426425137, 0.1984223742946175, 0.19360725198789575, 0.17664587235705698, 0.5391453991383579, 0.16953777489079325, 0.15420036366599033, 0.2716377777047917, 0.1975794088453, 0.19886997379428872, 0.35000817729958333, 0.17005526917748104, 0.48054712692999213, 0.4092620404766716, 0.15613359525885606, 0.31004115747730765, 0.5036810710013038, 0.33874410849909353, 0.2091860553119833, 0.10529279528814384, 0.10492025246060854, 0.4143941967858491, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.20394243043355798, 0.19659059394332967, 0.18199967015695562, 0.18008268279955542, 0.18275556122513914, 0.18274441759078364, 0.08933420057650654, 0.09876969476957853, 0.08835223633017308, 0.08070985681442966, 0.09182559882702479, 0.08009103056798972, 0.07921098327789355, 0.08661289764727387, 0.08291818388013017]}, "mutation_prompt": null}
{"id": "b06dc3f9-13a1-43ec-b605-003b17bc1952", "solution": "import numpy as np\n\nclass ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Introducing dynamic quantum factor adaptation based on fitness improvement to enhance exploration and exploitation balance in QIPSO.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.40052570598683046, 0.37562211666283774, 0.35507416460347907, 0.34928280270681766, 0.3649261590780498, 0.36085165572983435, 0.3534497759754629, 0.35898589225071953, 0.3661896102429475, 0.0010324558890708602, 0.010990701671673597, 0.0014110041907519077, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003200543918005505, 9.999999999998899e-05, 0.08397539614006766, 0.11523015731251784, 0.11599070095650654, 0.09309145387230378, 0.08675515679105761, 0.10427946039202307, 0.1117435863111661, 0.12734584486645184, 0.1284785769841581, 0.08888111730227577, 0.09681018338265424, 0.09579217093043912, 0.09828922146594232, 0.10009224916078796, 0.08327754844244795, 0.0794586137280765, 0.10791646505700758, 0.08948988891765042, 0.9914233632670114, 0.9917114546520976, 0.991171814023667, 0.9896468414125761, 0.9898357128741788, 0.9880978891267381, 0.9908126643821275, 0.9917593975567109, 0.9905139307445721, 0.21928159182961404, 0.24499445087306682, 0.2439174869402556, 0.22017761223239474, 0.23449987476096135, 0.2511044906504709, 0.2658890782706078, 0.23827270886187302, 0.2568469267189697, 0.30632337760570594, 0.2477024475936449, 0.30870862483102623, 0.2588128015281742, 0.30049068948040636, 0.21999120985975795, 0.22149254426421505, 0.30665743645989985, 0.2752172449694503, 0.15346559977293983, 0.13055848721287444, 0.13565715801061562, 0.13267920714024528, 0.12965663302065955, 0.1761965747613331, 0.12451026505372886, 0.09855079838397562, 0.1275594744051225, 0.12529432743890578, 0.15247857516084418, 0.14262551248685873, 0.13138359625658835, 0.12315377806810646, 0.14163220855434466, 0.14723799654885128, 0.0915373776941526, 0.13869603355982307, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.011969387603556925, 9.999999999998899e-05, 9.999999999998899e-05, 0.005430498454147892, 0.059307617871185325, 0.03081272704648963, 0.08986588706057996, 0.10452906064062284, 0.008686375097159527, 0.013278555200379905, 0.08899460620755617, 0.04427849308956644, 0.11689725124837225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04475939592949785, 0.06156108253826442, 0.07851384550809104, 0.07688369362092329, 0.06381604411538644, 0.08040563900556741, 0.07469803177816392, 0.07713319611033298, 0.06665767294401304, 0.3581369366702103, 0.3640988034105592, 0.41807822254211247, 0.3712571678732728, 0.33527067274918265, 0.37912050000404196, 0.347846006899576, 0.35099302880456895, 0.3470911517924231, 0.09665941402298972, 0.10685926207500929, 0.10607127424554585, 0.09661381616742615, 0.08961107118360956, 0.09184322167801728, 0.10984200419671875, 0.08493006898608979, 0.10721366882397088, 0.24908366034648333, 0.20040501195173233, 0.1993676528354995, 0.2493072482096227, 0.21585528858679393, 0.17938226945522495, 0.2216429352140321, 0.2298922006034163, 0.182826286165916, 0.2622807783746146, 0.2637168915108128, 0.2650155127861936, 0.26423958634123335, 0.24277888102790923, 0.26431484973148256, 0.25237685576791824, 0.2541325392681859, 0.25701405450637527, 0.19532284675275036, 0.20901467358367476, 0.2007965919329192, 0.20352339168493228, 0.2079222530608087, 0.1697284169684764, 0.16257994619623928, 0.1959994881114422, 0.18635469443002284, 0.2119719920007057, 0.1832752892744801, 0.19300016195149905, 0.2020506685759289, 0.19203590835432283, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.18604222874311604, 0.17601566798449908, 0.19050405098957313, 0.20720237400527863, 0.1970666794688649, 0.17246575426425137, 0.1984223742946175, 0.19360725198789575, 0.17664587235705698, 0.5391453991383579, 0.16953777489079325, 0.15420036366599033, 0.2716377777047917, 0.1975794088453, 0.19886997379428872, 0.35000817729958333, 0.17005526917748104, 0.48054712692999213, 0.4092620404766716, 0.15613359525885606, 0.31004115747730765, 0.5036810710013038, 0.33874410849909353, 0.2091860553119833, 0.10529279528814384, 0.10492025246060854, 0.4143941967858491, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.20394243043355798, 0.19659059394332967, 0.18199967015695562, 0.18008268279955542, 0.18275556122513914, 0.18274441759078364, 0.08933420057650654, 0.09876969476957853, 0.08835223633017308, 0.08070985681442966, 0.09182559882702479, 0.08009103056798972, 0.07921098327789355, 0.08661289764727387, 0.08291818388013017]}, "mutation_prompt": null}
{"id": "3fbef2c5-1c5d-456a-bb7b-0862c29ae334", "solution": "import numpy as np\n\nclass ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Introducing dynamic quantum factor adaptation based on fitness improvement to enhance exploration and exploitation balance in QIPSO.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.40052570598683046, 0.37562211666283774, 0.35507416460347907, 0.34928280270681766, 0.3649261590780498, 0.36085165572983435, 0.3534497759754629, 0.35898589225071953, 0.3661896102429475, 0.0010324558890708602, 0.010990701671673597, 0.0014110041907519077, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003200543918005505, 9.999999999998899e-05, 0.08397539614006766, 0.11523015731251784, 0.11599070095650654, 0.09309145387230378, 0.08675515679105761, 0.10427946039202307, 0.1117435863111661, 0.12734584486645184, 0.1284785769841581, 0.08888111730227577, 0.09681018338265424, 0.09579217093043912, 0.09828922146594232, 0.10009224916078796, 0.08327754844244795, 0.0794586137280765, 0.10791646505700758, 0.08948988891765042, 0.9914233632670114, 0.9917114546520976, 0.991171814023667, 0.9896468414125761, 0.9898357128741788, 0.9880978891267381, 0.9908126643821275, 0.9917593975567109, 0.9905139307445721, 0.21928159182961404, 0.24499445087306682, 0.2439174869402556, 0.22017761223239474, 0.23449987476096135, 0.2511044906504709, 0.2658890782706078, 0.23827270886187302, 0.2568469267189697, 0.30632337760570594, 0.2477024475936449, 0.30870862483102623, 0.2588128015281742, 0.30049068948040636, 0.21999120985975795, 0.22149254426421505, 0.30665743645989985, 0.2752172449694503, 0.15346559977293983, 0.13055848721287444, 0.13565715801061562, 0.13267920714024528, 0.12965663302065955, 0.1761965747613331, 0.12451026505372886, 0.09855079838397562, 0.1275594744051225, 0.12529432743890578, 0.15247857516084418, 0.14262551248685873, 0.13138359625658835, 0.12315377806810646, 0.14163220855434466, 0.14723799654885128, 0.0915373776941526, 0.13869603355982307, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.011969387603556925, 9.999999999998899e-05, 9.999999999998899e-05, 0.005430498454147892, 0.059307617871185325, 0.03081272704648963, 0.08986588706057996, 0.10452906064062284, 0.008686375097159527, 0.013278555200379905, 0.08899460620755617, 0.04427849308956644, 0.11689725124837225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04475939592949785, 0.06156108253826442, 0.07851384550809104, 0.07688369362092329, 0.06381604411538644, 0.08040563900556741, 0.07469803177816392, 0.07713319611033298, 0.06665767294401304, 0.3581369366702103, 0.3640988034105592, 0.41807822254211247, 0.3712571678732728, 0.33527067274918265, 0.37912050000404196, 0.347846006899576, 0.35099302880456895, 0.3470911517924231, 0.09665941402298972, 0.10685926207500929, 0.10607127424554585, 0.09661381616742615, 0.08961107118360956, 0.09184322167801728, 0.10984200419671875, 0.08493006898608979, 0.10721366882397088, 0.24908366034648333, 0.20040501195173233, 0.1993676528354995, 0.2493072482096227, 0.21585528858679393, 0.17938226945522495, 0.2216429352140321, 0.2298922006034163, 0.182826286165916, 0.2622807783746146, 0.2637168915108128, 0.2650155127861936, 0.26423958634123335, 0.24277888102790923, 0.26431484973148256, 0.25237685576791824, 0.2541325392681859, 0.25701405450637527, 0.19532284675275036, 0.20901467358367476, 0.2007965919329192, 0.20352339168493228, 0.2079222530608087, 0.1697284169684764, 0.16257994619623928, 0.1959994881114422, 0.18635469443002284, 0.2119719920007057, 0.1832752892744801, 0.19300016195149905, 0.2020506685759289, 0.19203590835432283, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.18604222874311604, 0.17601566798449908, 0.19050405098957313, 0.20720237400527863, 0.1970666794688649, 0.17246575426425137, 0.1984223742946175, 0.19360725198789575, 0.17664587235705698, 0.5391453991383579, 0.16953777489079325, 0.15420036366599033, 0.2716377777047917, 0.1975794088453, 0.19886997379428872, 0.35000817729958333, 0.17005526917748104, 0.48054712692999213, 0.4092620404766716, 0.15613359525885606, 0.31004115747730765, 0.5036810710013038, 0.33874410849909353, 0.2091860553119833, 0.10529279528814384, 0.10492025246060854, 0.4143941967858491, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.20394243043355798, 0.19659059394332967, 0.18199967015695562, 0.18008268279955542, 0.18275556122513914, 0.18274441759078364, 0.08933420057650654, 0.09876969476957853, 0.08835223633017308, 0.08070985681442966, 0.09182559882702479, 0.08009103056798972, 0.07921098327789355, 0.08661289764727387, 0.08291818388013017]}, "mutation_prompt": null}
{"id": "55a4ec03-db85-4187-b41c-9387239a5e37", "solution": "import numpy as np\n\nclass ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n        self.chaos_prob = 0.05\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n\n                if np.random.rand() < self.chaos_prob:  # Introduce chaos\n                    chaos_factor = np.random.uniform(-1, 1, size=self.dim)\n                    velocities[i] = velocities[i] + chaos_factor\n\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Enhancing global search capability by incorporating a chaotic strategy to diversify the search process.", "configspace": "", "generation": 28, "fitness": 0.19567962706536213, "feedback": "The algorithm ImprovedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.3599710836904426, 0.34169386038494043, 0.340972759387415, 0.3600340221559204, 0.36079739689498835, 0.3563106071395734, 0.3697815077684088, 0.3541447896770953, 0.3480383560337197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017683623103453616, 9.999999999998899e-05, 9.999999999998899e-05, 0.10420128709524834, 0.1086646591217515, 0.07050363960945283, 0.11101750862636761, 0.1347998222377932, 0.10117125221187384, 0.1102592361025978, 0.10941780706770865, 0.1122069913109397, 0.08849876690902381, 0.08223991496560956, 0.1092946480541328, 0.09436631721624422, 0.10074710954629573, 0.08157998339737993, 0.09326590727836259, 0.09254594413971229, 0.10410919939069996, 0.9909049374005098, 0.9937865710397593, 0.9912103997604057, 0.9844638883151519, 0.9893540164139452, 0.9878831589975143, 0.9907624045631362, 0.9907504836641899, 0.9910767232930033, 0.26309625786489266, 0.22313423056040382, 0.2561980565597278, 0.23324271151983678, 0.23105565921865023, 0.2629342375678382, 0.2633054144387498, 0.24795338302527947, 0.2301667456998474, 0.28406215223861087, 0.28140699035533856, 0.2630014738538181, 0.2163512240131381, 0.29326815384768357, 0.24456807603948183, 0.23997156735304193, 0.23372464284089056, 0.30378215265309605, 0.1373240694341341, 0.1399659251171581, 0.1762480811358017, 0.18993288832237254, 0.15181301802779856, 0.14313746426395768, 0.13860357379445465, 0.1340065530496206, 0.1447974650567272, 0.13736108446253237, 0.14002304338303817, 0.12910387953748814, 0.14982841799480717, 0.12233588673608631, 0.1684881476968525, 0.15652207441417088, 0.08000171904926734, 0.13518050029321238, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011155479900821996, 0.01488678408420907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02855258899929891, 0.10737337057360452, 0.03616748563101846, 0.06364176892179929, 0.10812289515705742, 0.00158504406694282, 0.007708652971582741, 0.12081690369743991, 0.053411378409463084, 0.09459841521008727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05682018984972381, 0.031035561421502655, 0.05959187016132361, 0.05817485425169455, 0.06301910632791463, 0.07277019882392177, 0.060883382587314516, 0.04866543000872592, 0.05232775369203013, 0.3415767006965963, 0.3462334910692426, 0.36735888706606135, 0.36694740919977753, 0.33805436554394774, 0.35733906042687935, 0.35325758241150496, 0.34791818536609986, 0.35435572776456337, 0.09791888405351945, 0.10764206109023744, 0.1032814216274277, 0.09798638827656891, 0.10365639398944715, 0.10216964846555243, 0.11744284238944014, 0.09151860910075416, 0.12396089567807889, 0.1448375625509336, 0.2004139714016041, 0.16877370890779653, 0.20478723937229537, 0.2272377629913509, 0.16537085104088312, 0.18761576079998532, 0.20024146434317958, 0.22917237051990746, 0.25915839975837307, 0.2407016745124394, 0.2664316661387328, 0.2566761141082443, 0.2586617848487712, 0.25710595084490684, 0.2500770332884854, 0.26212220939489916, 0.2596711097379094, 0.20303311962954707, 0.22764180424158442, 0.20217454190465955, 0.18388078603707558, 0.20144685926513384, 0.20945272270204218, 0.1960357599158642, 0.19776068475521902, 0.16003365913811995, 0.22056234847601597, 0.15766410869221148, 0.22969806606984755, 0.22479447550206755, 0.19363463898287747, 0.20826126364578446, 0.21356650278711087, 0.19632916872044048, 0.21053542625670785, 0.17490740590014553, 0.1791348117882835, 0.19323057326907833, 0.19158942581453298, 0.20584174029201163, 0.1755398278189796, 0.19308162801887552, 0.20091222410880127, 0.18325736108245205, 0.4883591449235244, 0.1847333095080348, 0.1540691380912329, 0.4947730707059337, 0.1979683849667907, 0.13141919364982002, 0.12417012812741579, 0.17052047746194854, 0.3552024678117588, 0.42373269065598407, 0.15596736239759934, 0.073168761239501, 0.20769491232140136, 0.1690418817657463, 0.20616173147846628, 0.10508800531784834, 0.10483960494092481, 0.3210308348907679, 0.20281335126845146, 0.1896577554922454, 0.17556000306048114, 0.18848364260776296, 0.22745144858794175, 0.1805091866773324, 0.1870905877092951, 0.18297689153726815, 0.17216297557875948, 0.08583478775486308, 0.08771258904109414, 0.08355242236491156, 0.07629729914151362, 0.09750535366570345, 0.08396929746095505, 0.09471803685628166, 0.07773908692204878, 0.0851308864126924]}, "mutation_prompt": null}
{"id": "c14fd9ea-6388-45b1-bdc2-8f4839a3bda9", "solution": "import numpy as np\n\nclass AdaptiveQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, quantum_factor_upper=0.8, quantum_factor_lower=0.2):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n        self.quantum_factor_upper = quantum_factor_upper\n        self.quantum_factor_lower = quantum_factor_lower\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            if current_value < best_values[i]:\n                                self.quantum_factor = min(self.quantum_factor_upper, self.quantum_factor * self.quantum_factor_decay)\n                            else:\n                                self.quantum_factor = max(self.quantum_factor_lower, self.quantum_factor * self.quantum_factor_decay)\n\n        return global_best", "name": "AdaptiveQIPSO", "description": "Introducing adaptive quantum factor control mechanism based on individual particle behavior to dynamically adjust exploration and exploitation in QIPSO.", "configspace": "", "generation": 29, "fitness": 0.20137555782064348, "feedback": "The algorithm AdaptiveQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.40052570598683046, 0.37562211666283774, 0.35507416460347907, 0.34928280270681766, 0.3649261590780498, 0.36085165572983435, 0.3534497759754629, 0.35898589225071953, 0.3661896102429475, 0.0010324558890708602, 0.010990701671673597, 0.0014110041907519077, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003200543918005505, 9.999999999998899e-05, 0.08397539614006766, 0.11523015731251784, 0.11599070095650654, 0.09309145387230378, 0.08675515679105761, 0.10427946039202307, 0.1117435863111661, 0.12734584486645184, 0.1284785769841581, 0.08888111730227577, 0.09681018338265424, 0.09579217093043912, 0.09828922146594232, 0.10009224916078796, 0.08327754844244795, 0.0794586137280765, 0.10791646505700758, 0.08948988891765042, 0.9914233632670114, 0.9917114546520976, 0.991171814023667, 0.9896468414125761, 0.9898357128741788, 0.9880978891267381, 0.9908126643821275, 0.9917593975567109, 0.9905139307445721, 0.21928159182961404, 0.24499445087306682, 0.2439174869402556, 0.22017761223239474, 0.23449987476096135, 0.2511044906504709, 0.2658890782706078, 0.23827270886187302, 0.2568469267189697, 0.30632337760570594, 0.2477024475936449, 0.30870862483102623, 0.2588128015281742, 0.30049068948040636, 0.21999120985975795, 0.22149254426421505, 0.30665743645989985, 0.2752172449694503, 0.15346559977293983, 0.13055848721287444, 0.13565715801061562, 0.13267920714024528, 0.12965663302065955, 0.1761965747613331, 0.12451026505372886, 0.09855079838397562, 0.1275594744051225, 0.12529432743890578, 0.15247857516084418, 0.14262551248685873, 0.13138359625658835, 0.12315377806810646, 0.14163220855434466, 0.14723799654885128, 0.0915373776941526, 0.13869603355982307, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.011969387603556925, 9.999999999998899e-05, 9.999999999998899e-05, 0.005430498454147892, 0.059307617871185325, 0.03081272704648963, 0.08986588706057996, 0.10452906064062284, 0.008686375097159527, 0.013278555200379905, 0.08899460620755617, 0.04427849308956644, 0.11689725124837225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04475939592949785, 0.06156108253826442, 0.07851384550809104, 0.07688369362092329, 0.06381604411538644, 0.08040563900556741, 0.07469803177816392, 0.07713319611033298, 0.06665767294401304, 0.3581369366702103, 0.3640988034105592, 0.41807822254211247, 0.3712571678732728, 0.33527067274918265, 0.37912050000404196, 0.347846006899576, 0.35099302880456895, 0.3470911517924231, 0.09665941402298972, 0.10685926207500929, 0.10607127424554585, 0.09661381616742615, 0.08961107118360956, 0.09184322167801728, 0.10984200419671875, 0.08493006898608979, 0.10721366882397088, 0.24908366034648333, 0.20040501195173233, 0.1993676528354995, 0.2493072482096227, 0.21585528858679393, 0.17938226945522495, 0.2216429352140321, 0.2298922006034163, 0.182826286165916, 0.2622807783746146, 0.2637168915108128, 0.2650155127861936, 0.26423958634123335, 0.24277888102790923, 0.26431484973148256, 0.25237685576791824, 0.2541325392681859, 0.25701405450637527, 0.19532284675275036, 0.20901467358367476, 0.2007965919329192, 0.20352339168493228, 0.2079222530608087, 0.1697284169684764, 0.16257994619623928, 0.1959994881114422, 0.18635469443002284, 0.2119719920007057, 0.1832752892744801, 0.19300016195149905, 0.2020506685759289, 0.19203590835432283, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.18604222874311604, 0.17601566798449908, 0.19050405098957313, 0.20720237400527863, 0.1970666794688649, 0.17246575426425137, 0.1984223742946175, 0.19360725198789575, 0.17664587235705698, 0.5391453991383579, 0.16953777489079325, 0.15420036366599033, 0.2716377777047917, 0.1975794088453, 0.19886997379428872, 0.35000817729958333, 0.17005526917748104, 0.48054712692999213, 0.4092620404766716, 0.15613359525885606, 0.31004115747730765, 0.5036810710013038, 0.33874410849909353, 0.2091860553119833, 0.10529279528814384, 0.10492025246060854, 0.4143941967858491, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.20394243043355798, 0.19659059394332967, 0.18199967015695562, 0.18008268279955542, 0.18275556122513914, 0.18274441759078364, 0.08933420057650654, 0.09876969476957853, 0.08835223633017308, 0.08070985681442966, 0.09182559882702479, 0.08009103056798972, 0.07921098327789355, 0.08661289764727387, 0.08291818388013017]}, "mutation_prompt": null}
{"id": "d6b8c8d6-3a38-40cd-b4b2-dc9782419276", "solution": "import numpy as np\n\nclass DynamicParticleQIPSO(ImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, min_particles=10, max_particles=50, decay_threshold=0.2, growth_threshold=0.8):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay)\n        self.min_particles = min_particles\n        self.max_particles = max_particles\n        self.decay_threshold = decay_threshold\n        self.growth_threshold = growth_threshold\n\n    def __call__(self, func):\n        def initialize_particles(num_particles):\n            return np.random.uniform(-5.0, 5.0, size=(num_particles, self.dim))\n\n        num_particles = self.num_particles\n        particles = initialize_particles(num_particles)\n        velocities = np.zeros((num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n\n            # Dynamically adjust number of particles\n            if np.random.rand() < self.decay_threshold and num_particles > self.min_particles:\n                num_particles -= 1\n                particles = np.delete(particles, -1, axis=0)\n                velocities = np.delete(velocities, -1, axis=0)\n                best_positions = np.delete(best_positions, -1, axis=0)\n                best_values = np.delete(best_values, -1)\n            elif np.random.rand() < self.growth_threshold and num_particles < self.max_particles:\n                num_particles += 1\n                particles = np.vstack((particles, np.random.uniform(-5.0, 5.0, size=(1, self.dim)))\n                velocities = np.vstack((velocities, np.zeros(self.dim)))\n                best_positions = np.vstack((best_positions, particles[-1].copy()))\n                best_values = np.append(best_values, func(particles[-1]))\n\n        return global_best", "name": "DynamicParticleQIPSO", "description": "Enhancing diversity by introducing a dynamically adjusting number of particles during optimization.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 50, 17, '                velocities = np.vstack((velocities, np.zeros(self.dim)))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 50, 17, '                velocities = np.vstack((velocities, np.zeros(self.dim)))\\n'))", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {}, "mutation_prompt": null}
{"id": "32948b99-f1f6-44ae-b49b-f4af65811473", "solution": "import numpy as np\n\nclass ImprovedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n\n        return global_best", "name": "ImprovedQIPSO", "description": "Introducing dynamic quantum factor adaptation based on fitness improvement to enhance exploration and exploitation balance in QIPSO.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.40052570598683046, 0.37562211666283774, 0.35507416460347907, 0.34928280270681766, 0.3649261590780498, 0.36085165572983435, 0.3534497759754629, 0.35898589225071953, 0.3661896102429475, 0.0010324558890708602, 0.010990701671673597, 0.0014110041907519077, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003200543918005505, 9.999999999998899e-05, 0.08397539614006766, 0.11523015731251784, 0.11599070095650654, 0.09309145387230378, 0.08675515679105761, 0.10427946039202307, 0.1117435863111661, 0.12734584486645184, 0.1284785769841581, 0.08888111730227577, 0.09681018338265424, 0.09579217093043912, 0.09828922146594232, 0.10009224916078796, 0.08327754844244795, 0.0794586137280765, 0.10791646505700758, 0.08948988891765042, 0.9914233632670114, 0.9917114546520976, 0.991171814023667, 0.9896468414125761, 0.9898357128741788, 0.9880978891267381, 0.9908126643821275, 0.9917593975567109, 0.9905139307445721, 0.21928159182961404, 0.24499445087306682, 0.2439174869402556, 0.22017761223239474, 0.23449987476096135, 0.2511044906504709, 0.2658890782706078, 0.23827270886187302, 0.2568469267189697, 0.30632337760570594, 0.2477024475936449, 0.30870862483102623, 0.2588128015281742, 0.30049068948040636, 0.21999120985975795, 0.22149254426421505, 0.30665743645989985, 0.2752172449694503, 0.15346559977293983, 0.13055848721287444, 0.13565715801061562, 0.13267920714024528, 0.12965663302065955, 0.1761965747613331, 0.12451026505372886, 0.09855079838397562, 0.1275594744051225, 0.12529432743890578, 0.15247857516084418, 0.14262551248685873, 0.13138359625658835, 0.12315377806810646, 0.14163220855434466, 0.14723799654885128, 0.0915373776941526, 0.13869603355982307, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.011969387603556925, 9.999999999998899e-05, 9.999999999998899e-05, 0.005430498454147892, 0.059307617871185325, 0.03081272704648963, 0.08986588706057996, 0.10452906064062284, 0.008686375097159527, 0.013278555200379905, 0.08899460620755617, 0.04427849308956644, 0.11689725124837225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04475939592949785, 0.06156108253826442, 0.07851384550809104, 0.07688369362092329, 0.06381604411538644, 0.08040563900556741, 0.07469803177816392, 0.07713319611033298, 0.06665767294401304, 0.3581369366702103, 0.3640988034105592, 0.41807822254211247, 0.3712571678732728, 0.33527067274918265, 0.37912050000404196, 0.347846006899576, 0.35099302880456895, 0.3470911517924231, 0.09665941402298972, 0.10685926207500929, 0.10607127424554585, 0.09661381616742615, 0.08961107118360956, 0.09184322167801728, 0.10984200419671875, 0.08493006898608979, 0.10721366882397088, 0.24908366034648333, 0.20040501195173233, 0.1993676528354995, 0.2493072482096227, 0.21585528858679393, 0.17938226945522495, 0.2216429352140321, 0.2298922006034163, 0.182826286165916, 0.2622807783746146, 0.2637168915108128, 0.2650155127861936, 0.26423958634123335, 0.24277888102790923, 0.26431484973148256, 0.25237685576791824, 0.2541325392681859, 0.25701405450637527, 0.19532284675275036, 0.20901467358367476, 0.2007965919329192, 0.20352339168493228, 0.2079222530608087, 0.1697284169684764, 0.16257994619623928, 0.1959994881114422, 0.18635469443002284, 0.2119719920007057, 0.1832752892744801, 0.19300016195149905, 0.2020506685759289, 0.19203590835432283, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.18604222874311604, 0.17601566798449908, 0.19050405098957313, 0.20720237400527863, 0.1970666794688649, 0.17246575426425137, 0.1984223742946175, 0.19360725198789575, 0.17664587235705698, 0.5391453991383579, 0.16953777489079325, 0.15420036366599033, 0.2716377777047917, 0.1975794088453, 0.19886997379428872, 0.35000817729958333, 0.17005526917748104, 0.48054712692999213, 0.4092620404766716, 0.15613359525885606, 0.31004115747730765, 0.5036810710013038, 0.33874410849909353, 0.2091860553119833, 0.10529279528814384, 0.10492025246060854, 0.4143941967858491, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.20394243043355798, 0.19659059394332967, 0.18199967015695562, 0.18008268279955542, 0.18275556122513914, 0.18274441759078364, 0.08933420057650654, 0.09876969476957853, 0.08835223633017308, 0.08070985681442966, 0.09182559882702479, 0.08009103056798972, 0.07921098327789355, 0.08661289764727387, 0.08291818388013017]}, "mutation_prompt": null}
{"id": "946108f6-1b5d-4430-92e9-964a08a1eaa0", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            \n            # Introducing a random factor based on the best global position\n            random_factor = np.random.uniform(-0.1, 0.1, size=self.dim)\n            particles += random_factor\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhancing exploration by introducing a random factor based on the best global position found during optimization.", "configspace": "", "generation": 32, "fitness": 0.19654695731974922, "feedback": "The algorithm EnhancedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.36142230156208044, 0.3521872794436929, 0.378851107449239, 0.355639018147731, 0.36165413382650136, 0.37396423748979524, 0.35885064304601944, 0.3699619417162555, 0.36295164301621896, 0.007113546035717455, 9.999999999998899e-05, 0.0032582959348584906, 9.999999999998899e-05, 0.01749392066616806, 9.999999999998899e-05, 9.999999999998899e-05, 0.03658385206107684, 0.002450991471008468, 0.08357973988103895, 0.09164050799921641, 0.10394283572488183, 0.10920160250134081, 0.1022786085576699, 0.09967089336297319, 0.12136753168123127, 0.11419950645226906, 0.08483083010676329, 0.0996257298781813, 0.08455624168782394, 0.09197785857896579, 0.09914623331352246, 0.09188556126067937, 0.09016734467867804, 0.09812939096102213, 0.09236411221799223, 0.11141462196806629, 0.9923144975160275, 0.9934239202420274, 0.9915081880447302, 0.9883409396682556, 0.9907450668740014, 0.9872614430475791, 0.9910325671261395, 0.992200717801754, 0.9883890138055217, 0.24159228325880655, 0.24748924160789598, 0.22922757098730162, 0.25298992851829294, 0.22274592437355956, 0.23838502067266865, 0.23440102528285922, 0.25703878144423453, 0.23830058477477467, 0.2910398067176919, 0.2546501874384933, 0.29677645512138595, 0.26606377622177657, 0.30612816541364696, 0.2574452947582965, 0.21646536082819634, 0.23930854027525372, 0.29989622202032284, 0.13342916235873148, 0.13204840037262566, 0.14379086214599135, 0.145466067020962, 0.1343195547426329, 0.09694550610338615, 0.13064321684408098, 0.07957439258533361, 0.1299344804379582, 0.12483799727786737, 0.12578627040240842, 0.07563456523873624, 0.13099310428848543, 9.999999999998899e-05, 0.1366125039967797, 0.11314830219009309, 0.116626275190858, 0.12469465648239186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01961227852196934, 9.999999999998899e-05, 9.999999999998899e-05, 0.06878780664183337, 0.051532867370776, 0.1289234845412226, 0.08154156270262991, 0.011717671917799266, 0.037168549751810276, 0.12301663043438216, 0.0706491570436707, 0.10475062124190082, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06410157352099488, 0.039840067919366784, 0.06383106266929695, 0.07072586316597607, 0.08832708369953213, 0.07607331192050792, 0.061889818843632205, 0.07320104045308906, 0.07624410699536366, 0.3548221867181215, 0.34712646599850994, 0.3536684011186563, 0.37469799451692365, 0.3295187301353668, 0.34088606465816784, 0.4069325358796666, 0.36278584242079326, 0.3331474195457693, 0.09682176308519774, 0.09667848181615535, 0.09670204147162964, 0.11255438533387874, 0.11015960101968736, 0.10068606029231686, 0.10393914155280304, 0.08634787597746651, 0.0985920505976815, 0.17819595901240304, 0.15214380331066346, 0.1446570721158792, 0.2126762065565907, 0.1999448881751532, 0.1515241786332714, 0.18980799391448722, 0.16595833262597137, 0.19620643624390832, 0.24687207414203127, 0.24994274243809822, 0.26151255529466666, 0.245264749909908, 0.25729744967230583, 0.2673664138765913, 0.2558311508139983, 0.25717450490113625, 0.27209921823169914, 0.1770398803400649, 0.21619563897657468, 0.1893211042545372, 0.18962762579855053, 0.18920566471579137, 0.2058353783470589, 0.1717761597685732, 0.20769706414178024, 0.19046346965684025, 0.2100959798574562, 0.16606329404375209, 0.2021833242275477, 0.21859101857273477, 0.2202789163180353, 0.1792607615299343, 0.2301762679324414, 0.2237156207764669, 0.2001485879755026, 0.18789073073286922, 0.2053828982571625, 0.19713000970835426, 0.18767638250035346, 0.1992706191004201, 0.18634204480913308, 0.20294432901960513, 0.21157612902293854, 0.18429047273469001, 0.48593191426502946, 0.17217848876896824, 0.1538751826168726, 0.5001211315024165, 0.19743343548820957, 0.19732124000176332, 0.0997412046558468, 0.1701389451345221, 0.5068780733336117, 0.5158414997742117, 0.15620776886294407, 0.07291414663040108, 0.42362336323354177, 0.16894245776189531, 0.21045240378568975, 0.1048859295843837, 0.10492650577323637, 0.41761110517638067, 0.182110944802781, 0.18277234828480848, 0.18397717416432147, 0.18391407009553107, 0.1973379150026151, 0.19024431841156397, 0.17964849473629096, 0.17749047468052126, 0.1830157252385105, 0.0818657833049189, 0.08785554187598632, 0.0829774264840214, 0.08686399093388131, 0.08884621396962666, 0.08385277895175236, 0.08118165639378572, 0.08522509839247905, 0.08907342031054433]}, "mutation_prompt": null}
{"id": "b50f9f04-fa05-458a-b1b7-1f7baadd7ba5", "solution": "import numpy as np\n\nclass RefinedQIPSO(ImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, elitism_rate=0.1):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay)\n        self.elitism_rate = elitism_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        num_elites = int(self.num_particles * self.elitism_rate)\n        elite_indices = np.argpartition(best_values, num_elites)[:num_elites]\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n\n        particles[elite_indices] = best_positions[elite_indices]\n        return global_best", "name": "RefinedQIPSO", "description": "Introducing elitism by preserving a fraction of the best solutions to enhance convergence speed and local optima escape in ImprovedQIPSO.", "configspace": "", "generation": 33, "fitness": 0.20137555782064348, "feedback": "The algorithm RefinedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.40052570598683046, 0.37562211666283774, 0.35507416460347907, 0.34928280270681766, 0.3649261590780498, 0.36085165572983435, 0.3534497759754629, 0.35898589225071953, 0.3661896102429475, 0.0010324558890708602, 0.010990701671673597, 0.0014110041907519077, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003200543918005505, 9.999999999998899e-05, 0.08397539614006766, 0.11523015731251784, 0.11599070095650654, 0.09309145387230378, 0.08675515679105761, 0.10427946039202307, 0.1117435863111661, 0.12734584486645184, 0.1284785769841581, 0.08888111730227577, 0.09681018338265424, 0.09579217093043912, 0.09828922146594232, 0.10009224916078796, 0.08327754844244795, 0.0794586137280765, 0.10791646505700758, 0.08948988891765042, 0.9914233632670114, 0.9917114546520976, 0.991171814023667, 0.9896468414125761, 0.9898357128741788, 0.9880978891267381, 0.9908126643821275, 0.9917593975567109, 0.9905139307445721, 0.21928159182961404, 0.24499445087306682, 0.2439174869402556, 0.22017761223239474, 0.23449987476096135, 0.2511044906504709, 0.2658890782706078, 0.23827270886187302, 0.2568469267189697, 0.30632337760570594, 0.2477024475936449, 0.30870862483102623, 0.2588128015281742, 0.30049068948040636, 0.21999120985975795, 0.22149254426421505, 0.30665743645989985, 0.2752172449694503, 0.15346559977293983, 0.13055848721287444, 0.13565715801061562, 0.13267920714024528, 0.12965663302065955, 0.1761965747613331, 0.12451026505372886, 0.09855079838397562, 0.1275594744051225, 0.12529432743890578, 0.15247857516084418, 0.14262551248685873, 0.13138359625658835, 0.12315377806810646, 0.14163220855434466, 0.14723799654885128, 0.0915373776941526, 0.13869603355982307, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.011969387603556925, 9.999999999998899e-05, 9.999999999998899e-05, 0.005430498454147892, 0.059307617871185325, 0.03081272704648963, 0.08986588706057996, 0.10452906064062284, 0.008686375097159527, 0.013278555200379905, 0.08899460620755617, 0.04427849308956644, 0.11689725124837225, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04475939592949785, 0.06156108253826442, 0.07851384550809104, 0.07688369362092329, 0.06381604411538644, 0.08040563900556741, 0.07469803177816392, 0.07713319611033298, 0.06665767294401304, 0.3581369366702103, 0.3640988034105592, 0.41807822254211247, 0.3712571678732728, 0.33527067274918265, 0.37912050000404196, 0.347846006899576, 0.35099302880456895, 0.3470911517924231, 0.09665941402298972, 0.10685926207500929, 0.10607127424554585, 0.09661381616742615, 0.08961107118360956, 0.09184322167801728, 0.10984200419671875, 0.08493006898608979, 0.10721366882397088, 0.24908366034648333, 0.20040501195173233, 0.1993676528354995, 0.2493072482096227, 0.21585528858679393, 0.17938226945522495, 0.2216429352140321, 0.2298922006034163, 0.182826286165916, 0.2622807783746146, 0.2637168915108128, 0.2650155127861936, 0.26423958634123335, 0.24277888102790923, 0.26431484973148256, 0.25237685576791824, 0.2541325392681859, 0.25701405450637527, 0.19532284675275036, 0.20901467358367476, 0.2007965919329192, 0.20352339168493228, 0.2079222530608087, 0.1697284169684764, 0.16257994619623928, 0.1959994881114422, 0.18635469443002284, 0.2119719920007057, 0.1832752892744801, 0.19300016195149905, 0.2020506685759289, 0.19203590835432283, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.18604222874311604, 0.17601566798449908, 0.19050405098957313, 0.20720237400527863, 0.1970666794688649, 0.17246575426425137, 0.1984223742946175, 0.19360725198789575, 0.17664587235705698, 0.5391453991383579, 0.16953777489079325, 0.15420036366599033, 0.2716377777047917, 0.1975794088453, 0.19886997379428872, 0.35000817729958333, 0.17005526917748104, 0.48054712692999213, 0.4092620404766716, 0.15613359525885606, 0.31004115747730765, 0.5036810710013038, 0.33874410849909353, 0.2091860553119833, 0.10529279528814384, 0.10492025246060854, 0.4143941967858491, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.20394243043355798, 0.19659059394332967, 0.18199967015695562, 0.18008268279955542, 0.18275556122513914, 0.18274441759078364, 0.08933420057650654, 0.09876969476957853, 0.08835223633017308, 0.08070985681442966, 0.09182559882702479, 0.08009103056798972, 0.07921098327789355, 0.08661289764727387, 0.08291818388013017]}, "mutation_prompt": null}
{"id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance the exploration by introducing a dynamic adjustment mechanism for the social weight during the optimization process.", "configspace": "", "generation": 34, "fitness": 0.20210986684265866, "feedback": "The algorithm EnhancedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "ac6a7313-953e-4685-a91b-7e9a4d6edb46", "metadata": {"aucs": [0.40052570598683046, 0.38665434379303854, 0.3511358168669183, 0.3549640800811814, 0.3631857959300051, 0.3769998046410866, 0.3671742583017379, 0.3487107833359343, 0.36829691933682773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.09814787272712888, 0.12782368099014496, 0.1041100699990144, 0.08635889854823686, 0.09260908041752902, 0.10111696654229785, 0.1117435863111661, 0.10605438801031253, 0.09784166179699749, 0.08888111730227577, 0.09035102758828906, 0.09795395229197912, 0.08943168741291252, 0.08653351716078506, 0.08727140295537705, 0.0794586137280765, 0.0908518986609893, 0.08648400050848637, 0.9914233632670114, 0.9926563919972974, 0.9912527337637672, 0.9883924450137075, 0.986839538448225, 0.9865656048167651, 0.988959762933399, 0.989817606679141, 0.9877441806982439, 0.2733729718927925, 0.24143533857162247, 0.23357737739968976, 0.2237696683267375, 0.23449987476096135, 0.2354110892560406, 0.25405618053250956, 0.24844549031218932, 0.2746567072520939, 0.29356291405480484, 0.25920703189740246, 0.2953305745122642, 0.26007084435812244, 0.24041142830061712, 0.24870066494372045, 0.25007552263727706, 0.2683928825453782, 0.303670483057492, 0.15346559977293983, 0.1447095516268011, 0.14474882655238797, 0.14682204719171565, 0.14541048011267288, 0.14678353780431608, 0.12451026505372886, 0.14629878020734632, 0.16477015094981795, 0.1497681715875422, 0.15322773688361635, 0.12610349255239894, 0.13138359625658835, 0.14312040398245063, 0.16747353158053735, 0.14723799654885128, 0.13723421195847407, 0.1461089701560162, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.003881359358109737, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924185486683504, 0.059307617871185325, 0.02895056386871897, 0.08405308668337963, 0.11420946976003377, 0.00891950723468582, 0.012674545413271288, 0.09047844169094732, 0.04427849308956644, 0.1000102844949392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299866673142828, 0.03668826499756339, 0.06940530518897303, 0.07688369362092329, 0.06511502596872853, 0.10275456721820242, 0.07469803177816392, 0.06286008885360139, 0.06538344460854772, 0.34205071526278463, 0.3684015656529417, 0.3700350545251695, 0.35743442240561396, 0.33527067274918265, 0.37912050000404196, 0.34759777866201325, 0.3529955327381811, 0.3470911517924231, 0.09665941402298972, 0.09533646123601702, 0.10607127424554585, 0.11745576632948829, 0.0980288033301806, 0.09184322167801728, 0.10318090279276715, 0.0989201949495413, 0.10721366882397088, 0.22536185688553123, 0.20040501195173233, 0.20154857321644837, 0.22450487355662962, 0.21585528858679393, 0.2069928640593326, 0.23908179974778232, 0.2665174367881512, 0.24138053229524414, 0.2622807783746146, 0.2501478825728658, 0.25742429800629074, 0.26423958634123335, 0.24368694457848827, 0.2760881045263355, 0.2571028594319912, 0.26225954549211694, 0.2521292830548637, 0.1841629070235723, 0.20901467358367476, 0.2034676953592397, 0.20278974546510276, 0.19730591246252382, 0.16733962217194676, 0.1668559949702887, 0.2070607522265171, 0.2172497613408999, 0.2119719920007057, 0.18227401791887743, 0.19300016195149905, 0.2020506685759289, 0.20627790011062663, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2239608834767145, 0.20082804547104538, 0.19860736375982124, 0.17303698005590817, 0.18526208160397994, 0.19513968120191116, 0.19550640304933586, 0.18997332327773864, 0.17291089465800247, 0.538872507219367, 0.19733415766982842, 0.15427373733338923, 0.2716377777047917, 0.1986257592844176, 0.19886997379428872, 0.3691159249161302, 0.17013844892602115, 0.5100516678299377, 0.5109533693195962, 0.1557362489196168, 0.2081250152798425, 0.46335503946786816, 0.16951017187019912, 0.2080246424666029, 0.10492309473493366, 0.10492025246060854, 0.4576937133023883, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.17330145918270823, 0.17866711363544707, 0.18199967015695562, 0.18008268279955542, 0.18850257835538975, 0.18274441759078364, 0.09052420112030957, 0.09040708048099677, 0.08801172644855693, 0.08045374604565259, 0.0871715566406821, 0.09228177040148, 0.0916070538856879, 0.0973146831289965, 0.11926825870526425]}, "mutation_prompt": null}
{"id": "c1170a4d-caa8-4ef7-960c-67d9550828ec", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance the exploration by introducing a dynamic adjustment mechanism for the social weight during the optimization process.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.40052570598683046, 0.38665434379303854, 0.3511358168669183, 0.3549640800811814, 0.3631857959300051, 0.3769998046410866, 0.3671742583017379, 0.3487107833359343, 0.36829691933682773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.09814787272712888, 0.12782368099014496, 0.1041100699990144, 0.08635889854823686, 0.09260908041752902, 0.10111696654229785, 0.1117435863111661, 0.10605438801031253, 0.09784166179699749, 0.08888111730227577, 0.09035102758828906, 0.09795395229197912, 0.08943168741291252, 0.08653351716078506, 0.08727140295537705, 0.0794586137280765, 0.0908518986609893, 0.08648400050848637, 0.9914233632670114, 0.9926563919972974, 0.9912527337637672, 0.9883924450137075, 0.986839538448225, 0.9865656048167651, 0.988959762933399, 0.989817606679141, 0.9877441806982439, 0.2733729718927925, 0.24143533857162247, 0.23357737739968976, 0.2237696683267375, 0.23449987476096135, 0.2354110892560406, 0.25405618053250956, 0.24844549031218932, 0.2746567072520939, 0.29356291405480484, 0.25920703189740246, 0.2953305745122642, 0.26007084435812244, 0.24041142830061712, 0.24870066494372045, 0.25007552263727706, 0.2683928825453782, 0.303670483057492, 0.15346559977293983, 0.1447095516268011, 0.14474882655238797, 0.14682204719171565, 0.14541048011267288, 0.14678353780431608, 0.12451026505372886, 0.14629878020734632, 0.16477015094981795, 0.1497681715875422, 0.15322773688361635, 0.12610349255239894, 0.13138359625658835, 0.14312040398245063, 0.16747353158053735, 0.14723799654885128, 0.13723421195847407, 0.1461089701560162, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.003881359358109737, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924185486683504, 0.059307617871185325, 0.02895056386871897, 0.08405308668337963, 0.11420946976003377, 0.00891950723468582, 0.012674545413271288, 0.09047844169094732, 0.04427849308956644, 0.1000102844949392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299866673142828, 0.03668826499756339, 0.06940530518897303, 0.07688369362092329, 0.06511502596872853, 0.10275456721820242, 0.07469803177816392, 0.06286008885360139, 0.06538344460854772, 0.34205071526278463, 0.3684015656529417, 0.3700350545251695, 0.35743442240561396, 0.33527067274918265, 0.37912050000404196, 0.34759777866201325, 0.3529955327381811, 0.3470911517924231, 0.09665941402298972, 0.09533646123601702, 0.10607127424554585, 0.11745576632948829, 0.0980288033301806, 0.09184322167801728, 0.10318090279276715, 0.0989201949495413, 0.10721366882397088, 0.22536185688553123, 0.20040501195173233, 0.20154857321644837, 0.22450487355662962, 0.21585528858679393, 0.2069928640593326, 0.23908179974778232, 0.2665174367881512, 0.24138053229524414, 0.2622807783746146, 0.2501478825728658, 0.25742429800629074, 0.26423958634123335, 0.24368694457848827, 0.2760881045263355, 0.2571028594319912, 0.26225954549211694, 0.2521292830548637, 0.1841629070235723, 0.20901467358367476, 0.2034676953592397, 0.20278974546510276, 0.19730591246252382, 0.16733962217194676, 0.1668559949702887, 0.2070607522265171, 0.2172497613408999, 0.2119719920007057, 0.18227401791887743, 0.19300016195149905, 0.2020506685759289, 0.20627790011062663, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2239608834767145, 0.20082804547104538, 0.19860736375982124, 0.17303698005590817, 0.18526208160397994, 0.19513968120191116, 0.19550640304933586, 0.18997332327773864, 0.17291089465800247, 0.538872507219367, 0.19733415766982842, 0.15427373733338923, 0.2716377777047917, 0.1986257592844176, 0.19886997379428872, 0.3691159249161302, 0.17013844892602115, 0.5100516678299377, 0.5109533693195962, 0.1557362489196168, 0.2081250152798425, 0.46335503946786816, 0.16951017187019912, 0.2080246424666029, 0.10492309473493366, 0.10492025246060854, 0.4576937133023883, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.17330145918270823, 0.17866711363544707, 0.18199967015695562, 0.18008268279955542, 0.18850257835538975, 0.18274441759078364, 0.09052420112030957, 0.09040708048099677, 0.08801172644855693, 0.08045374604565259, 0.0871715566406821, 0.09228177040148, 0.0916070538856879, 0.0973146831289965, 0.11926825870526425]}, "mutation_prompt": null}
{"id": "4f923442-e661-43f3-9fcf-dafe1b96e39b", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance the exploration by introducing a dynamic adjustment mechanism for the social weight during the optimization process.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.40052570598683046, 0.38665434379303854, 0.3511358168669183, 0.3549640800811814, 0.3631857959300051, 0.3769998046410866, 0.3671742583017379, 0.3487107833359343, 0.36829691933682773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.09814787272712888, 0.12782368099014496, 0.1041100699990144, 0.08635889854823686, 0.09260908041752902, 0.10111696654229785, 0.1117435863111661, 0.10605438801031253, 0.09784166179699749, 0.08888111730227577, 0.09035102758828906, 0.09795395229197912, 0.08943168741291252, 0.08653351716078506, 0.08727140295537705, 0.0794586137280765, 0.0908518986609893, 0.08648400050848637, 0.9914233632670114, 0.9926563919972974, 0.9912527337637672, 0.9883924450137075, 0.986839538448225, 0.9865656048167651, 0.988959762933399, 0.989817606679141, 0.9877441806982439, 0.2733729718927925, 0.24143533857162247, 0.23357737739968976, 0.2237696683267375, 0.23449987476096135, 0.2354110892560406, 0.25405618053250956, 0.24844549031218932, 0.2746567072520939, 0.29356291405480484, 0.25920703189740246, 0.2953305745122642, 0.26007084435812244, 0.24041142830061712, 0.24870066494372045, 0.25007552263727706, 0.2683928825453782, 0.303670483057492, 0.15346559977293983, 0.1447095516268011, 0.14474882655238797, 0.14682204719171565, 0.14541048011267288, 0.14678353780431608, 0.12451026505372886, 0.14629878020734632, 0.16477015094981795, 0.1497681715875422, 0.15322773688361635, 0.12610349255239894, 0.13138359625658835, 0.14312040398245063, 0.16747353158053735, 0.14723799654885128, 0.13723421195847407, 0.1461089701560162, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.003881359358109737, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924185486683504, 0.059307617871185325, 0.02895056386871897, 0.08405308668337963, 0.11420946976003377, 0.00891950723468582, 0.012674545413271288, 0.09047844169094732, 0.04427849308956644, 0.1000102844949392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299866673142828, 0.03668826499756339, 0.06940530518897303, 0.07688369362092329, 0.06511502596872853, 0.10275456721820242, 0.07469803177816392, 0.06286008885360139, 0.06538344460854772, 0.34205071526278463, 0.3684015656529417, 0.3700350545251695, 0.35743442240561396, 0.33527067274918265, 0.37912050000404196, 0.34759777866201325, 0.3529955327381811, 0.3470911517924231, 0.09665941402298972, 0.09533646123601702, 0.10607127424554585, 0.11745576632948829, 0.0980288033301806, 0.09184322167801728, 0.10318090279276715, 0.0989201949495413, 0.10721366882397088, 0.22536185688553123, 0.20040501195173233, 0.20154857321644837, 0.22450487355662962, 0.21585528858679393, 0.2069928640593326, 0.23908179974778232, 0.2665174367881512, 0.24138053229524414, 0.2622807783746146, 0.2501478825728658, 0.25742429800629074, 0.26423958634123335, 0.24368694457848827, 0.2760881045263355, 0.2571028594319912, 0.26225954549211694, 0.2521292830548637, 0.1841629070235723, 0.20901467358367476, 0.2034676953592397, 0.20278974546510276, 0.19730591246252382, 0.16733962217194676, 0.1668559949702887, 0.2070607522265171, 0.2172497613408999, 0.2119719920007057, 0.18227401791887743, 0.19300016195149905, 0.2020506685759289, 0.20627790011062663, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2239608834767145, 0.20082804547104538, 0.19860736375982124, 0.17303698005590817, 0.18526208160397994, 0.19513968120191116, 0.19550640304933586, 0.18997332327773864, 0.17291089465800247, 0.538872507219367, 0.19733415766982842, 0.15427373733338923, 0.2716377777047917, 0.1986257592844176, 0.19886997379428872, 0.3691159249161302, 0.17013844892602115, 0.5100516678299377, 0.5109533693195962, 0.1557362489196168, 0.2081250152798425, 0.46335503946786816, 0.16951017187019912, 0.2080246424666029, 0.10492309473493366, 0.10492025246060854, 0.4576937133023883, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.17330145918270823, 0.17866711363544707, 0.18199967015695562, 0.18008268279955542, 0.18850257835538975, 0.18274441759078364, 0.09052420112030957, 0.09040708048099677, 0.08801172644855693, 0.08045374604565259, 0.0871715566406821, 0.09228177040148, 0.0916070538856879, 0.0973146831289965, 0.11926825870526425]}, "mutation_prompt": null}
{"id": "846a9f83-a8fd-4415-a92a-99c7a18363ac", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance the exploration by introducing a dynamic adjustment mechanism for the social weight during the optimization process.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.40052570598683046, 0.38665434379303854, 0.3511358168669183, 0.3549640800811814, 0.3631857959300051, 0.3769998046410866, 0.3671742583017379, 0.3487107833359343, 0.36829691933682773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.09814787272712888, 0.12782368099014496, 0.1041100699990144, 0.08635889854823686, 0.09260908041752902, 0.10111696654229785, 0.1117435863111661, 0.10605438801031253, 0.09784166179699749, 0.08888111730227577, 0.09035102758828906, 0.09795395229197912, 0.08943168741291252, 0.08653351716078506, 0.08727140295537705, 0.0794586137280765, 0.0908518986609893, 0.08648400050848637, 0.9914233632670114, 0.9926563919972974, 0.9912527337637672, 0.9883924450137075, 0.986839538448225, 0.9865656048167651, 0.988959762933399, 0.989817606679141, 0.9877441806982439, 0.2733729718927925, 0.24143533857162247, 0.23357737739968976, 0.2237696683267375, 0.23449987476096135, 0.2354110892560406, 0.25405618053250956, 0.24844549031218932, 0.2746567072520939, 0.29356291405480484, 0.25920703189740246, 0.2953305745122642, 0.26007084435812244, 0.24041142830061712, 0.24870066494372045, 0.25007552263727706, 0.2683928825453782, 0.303670483057492, 0.15346559977293983, 0.1447095516268011, 0.14474882655238797, 0.14682204719171565, 0.14541048011267288, 0.14678353780431608, 0.12451026505372886, 0.14629878020734632, 0.16477015094981795, 0.1497681715875422, 0.15322773688361635, 0.12610349255239894, 0.13138359625658835, 0.14312040398245063, 0.16747353158053735, 0.14723799654885128, 0.13723421195847407, 0.1461089701560162, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.003881359358109737, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924185486683504, 0.059307617871185325, 0.02895056386871897, 0.08405308668337963, 0.11420946976003377, 0.00891950723468582, 0.012674545413271288, 0.09047844169094732, 0.04427849308956644, 0.1000102844949392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299866673142828, 0.03668826499756339, 0.06940530518897303, 0.07688369362092329, 0.06511502596872853, 0.10275456721820242, 0.07469803177816392, 0.06286008885360139, 0.06538344460854772, 0.34205071526278463, 0.3684015656529417, 0.3700350545251695, 0.35743442240561396, 0.33527067274918265, 0.37912050000404196, 0.34759777866201325, 0.3529955327381811, 0.3470911517924231, 0.09665941402298972, 0.09533646123601702, 0.10607127424554585, 0.11745576632948829, 0.0980288033301806, 0.09184322167801728, 0.10318090279276715, 0.0989201949495413, 0.10721366882397088, 0.22536185688553123, 0.20040501195173233, 0.20154857321644837, 0.22450487355662962, 0.21585528858679393, 0.2069928640593326, 0.23908179974778232, 0.2665174367881512, 0.24138053229524414, 0.2622807783746146, 0.2501478825728658, 0.25742429800629074, 0.26423958634123335, 0.24368694457848827, 0.2760881045263355, 0.2571028594319912, 0.26225954549211694, 0.2521292830548637, 0.1841629070235723, 0.20901467358367476, 0.2034676953592397, 0.20278974546510276, 0.19730591246252382, 0.16733962217194676, 0.1668559949702887, 0.2070607522265171, 0.2172497613408999, 0.2119719920007057, 0.18227401791887743, 0.19300016195149905, 0.2020506685759289, 0.20627790011062663, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2239608834767145, 0.20082804547104538, 0.19860736375982124, 0.17303698005590817, 0.18526208160397994, 0.19513968120191116, 0.19550640304933586, 0.18997332327773864, 0.17291089465800247, 0.538872507219367, 0.19733415766982842, 0.15427373733338923, 0.2716377777047917, 0.1986257592844176, 0.19886997379428872, 0.3691159249161302, 0.17013844892602115, 0.5100516678299377, 0.5109533693195962, 0.1557362489196168, 0.2081250152798425, 0.46335503946786816, 0.16951017187019912, 0.2080246424666029, 0.10492309473493366, 0.10492025246060854, 0.4576937133023883, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.17330145918270823, 0.17866711363544707, 0.18199967015695562, 0.18008268279955542, 0.18850257835538975, 0.18274441759078364, 0.09052420112030957, 0.09040708048099677, 0.08801172644855693, 0.08045374604565259, 0.0871715566406821, 0.09228177040148, 0.0916070538856879, 0.0973146831289965, 0.11926825870526425]}, "mutation_prompt": null}
{"id": "7702e71b-3f4d-40b7-83d4-f4dec4b7838a", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance the exploration by introducing a dynamic adjustment mechanism for the social weight during the optimization process.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.40052570598683046, 0.38665434379303854, 0.3511358168669183, 0.3549640800811814, 0.3631857959300051, 0.3769998046410866, 0.3671742583017379, 0.3487107833359343, 0.36829691933682773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.09814787272712888, 0.12782368099014496, 0.1041100699990144, 0.08635889854823686, 0.09260908041752902, 0.10111696654229785, 0.1117435863111661, 0.10605438801031253, 0.09784166179699749, 0.08888111730227577, 0.09035102758828906, 0.09795395229197912, 0.08943168741291252, 0.08653351716078506, 0.08727140295537705, 0.0794586137280765, 0.0908518986609893, 0.08648400050848637, 0.9914233632670114, 0.9926563919972974, 0.9912527337637672, 0.9883924450137075, 0.986839538448225, 0.9865656048167651, 0.988959762933399, 0.989817606679141, 0.9877441806982439, 0.2733729718927925, 0.24143533857162247, 0.23357737739968976, 0.2237696683267375, 0.23449987476096135, 0.2354110892560406, 0.25405618053250956, 0.24844549031218932, 0.2746567072520939, 0.29356291405480484, 0.25920703189740246, 0.2953305745122642, 0.26007084435812244, 0.24041142830061712, 0.24870066494372045, 0.25007552263727706, 0.2683928825453782, 0.303670483057492, 0.15346559977293983, 0.1447095516268011, 0.14474882655238797, 0.14682204719171565, 0.14541048011267288, 0.14678353780431608, 0.12451026505372886, 0.14629878020734632, 0.16477015094981795, 0.1497681715875422, 0.15322773688361635, 0.12610349255239894, 0.13138359625658835, 0.14312040398245063, 0.16747353158053735, 0.14723799654885128, 0.13723421195847407, 0.1461089701560162, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.003881359358109737, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924185486683504, 0.059307617871185325, 0.02895056386871897, 0.08405308668337963, 0.11420946976003377, 0.00891950723468582, 0.012674545413271288, 0.09047844169094732, 0.04427849308956644, 0.1000102844949392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299866673142828, 0.03668826499756339, 0.06940530518897303, 0.07688369362092329, 0.06511502596872853, 0.10275456721820242, 0.07469803177816392, 0.06286008885360139, 0.06538344460854772, 0.34205071526278463, 0.3684015656529417, 0.3700350545251695, 0.35743442240561396, 0.33527067274918265, 0.37912050000404196, 0.34759777866201325, 0.3529955327381811, 0.3470911517924231, 0.09665941402298972, 0.09533646123601702, 0.10607127424554585, 0.11745576632948829, 0.0980288033301806, 0.09184322167801728, 0.10318090279276715, 0.0989201949495413, 0.10721366882397088, 0.22536185688553123, 0.20040501195173233, 0.20154857321644837, 0.22450487355662962, 0.21585528858679393, 0.2069928640593326, 0.23908179974778232, 0.2665174367881512, 0.24138053229524414, 0.2622807783746146, 0.2501478825728658, 0.25742429800629074, 0.26423958634123335, 0.24368694457848827, 0.2760881045263355, 0.2571028594319912, 0.26225954549211694, 0.2521292830548637, 0.1841629070235723, 0.20901467358367476, 0.2034676953592397, 0.20278974546510276, 0.19730591246252382, 0.16733962217194676, 0.1668559949702887, 0.2070607522265171, 0.2172497613408999, 0.2119719920007057, 0.18227401791887743, 0.19300016195149905, 0.2020506685759289, 0.20627790011062663, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2239608834767145, 0.20082804547104538, 0.19860736375982124, 0.17303698005590817, 0.18526208160397994, 0.19513968120191116, 0.19550640304933586, 0.18997332327773864, 0.17291089465800247, 0.538872507219367, 0.19733415766982842, 0.15427373733338923, 0.2716377777047917, 0.1986257592844176, 0.19886997379428872, 0.3691159249161302, 0.17013844892602115, 0.5100516678299377, 0.5109533693195962, 0.1557362489196168, 0.2081250152798425, 0.46335503946786816, 0.16951017187019912, 0.2080246424666029, 0.10492309473493366, 0.10492025246060854, 0.4576937133023883, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.17330145918270823, 0.17866711363544707, 0.18199967015695562, 0.18008268279955542, 0.18850257835538975, 0.18274441759078364, 0.09052420112030957, 0.09040708048099677, 0.08801172644855693, 0.08045374604565259, 0.0871715566406821, 0.09228177040148, 0.0916070538856879, 0.0973146831289965, 0.11926825870526425]}, "mutation_prompt": null}
{"id": "0596896f-6515-4b37-8550-950caaadca38", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance the exploration by introducing a dynamic adjustment mechanism for the social weight during the optimization process.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.40052570598683046, 0.38665434379303854, 0.3511358168669183, 0.3549640800811814, 0.3631857959300051, 0.3769998046410866, 0.3671742583017379, 0.3487107833359343, 0.36829691933682773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.09814787272712888, 0.12782368099014496, 0.1041100699990144, 0.08635889854823686, 0.09260908041752902, 0.10111696654229785, 0.1117435863111661, 0.10605438801031253, 0.09784166179699749, 0.08888111730227577, 0.09035102758828906, 0.09795395229197912, 0.08943168741291252, 0.08653351716078506, 0.08727140295537705, 0.0794586137280765, 0.0908518986609893, 0.08648400050848637, 0.9914233632670114, 0.9926563919972974, 0.9912527337637672, 0.9883924450137075, 0.986839538448225, 0.9865656048167651, 0.988959762933399, 0.989817606679141, 0.9877441806982439, 0.2733729718927925, 0.24143533857162247, 0.23357737739968976, 0.2237696683267375, 0.23449987476096135, 0.2354110892560406, 0.25405618053250956, 0.24844549031218932, 0.2746567072520939, 0.29356291405480484, 0.25920703189740246, 0.2953305745122642, 0.26007084435812244, 0.24041142830061712, 0.24870066494372045, 0.25007552263727706, 0.2683928825453782, 0.303670483057492, 0.15346559977293983, 0.1447095516268011, 0.14474882655238797, 0.14682204719171565, 0.14541048011267288, 0.14678353780431608, 0.12451026505372886, 0.14629878020734632, 0.16477015094981795, 0.1497681715875422, 0.15322773688361635, 0.12610349255239894, 0.13138359625658835, 0.14312040398245063, 0.16747353158053735, 0.14723799654885128, 0.13723421195847407, 0.1461089701560162, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.003881359358109737, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924185486683504, 0.059307617871185325, 0.02895056386871897, 0.08405308668337963, 0.11420946976003377, 0.00891950723468582, 0.012674545413271288, 0.09047844169094732, 0.04427849308956644, 0.1000102844949392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299866673142828, 0.03668826499756339, 0.06940530518897303, 0.07688369362092329, 0.06511502596872853, 0.10275456721820242, 0.07469803177816392, 0.06286008885360139, 0.06538344460854772, 0.34205071526278463, 0.3684015656529417, 0.3700350545251695, 0.35743442240561396, 0.33527067274918265, 0.37912050000404196, 0.34759777866201325, 0.3529955327381811, 0.3470911517924231, 0.09665941402298972, 0.09533646123601702, 0.10607127424554585, 0.11745576632948829, 0.0980288033301806, 0.09184322167801728, 0.10318090279276715, 0.0989201949495413, 0.10721366882397088, 0.22536185688553123, 0.20040501195173233, 0.20154857321644837, 0.22450487355662962, 0.21585528858679393, 0.2069928640593326, 0.23908179974778232, 0.2665174367881512, 0.24138053229524414, 0.2622807783746146, 0.2501478825728658, 0.25742429800629074, 0.26423958634123335, 0.24368694457848827, 0.2760881045263355, 0.2571028594319912, 0.26225954549211694, 0.2521292830548637, 0.1841629070235723, 0.20901467358367476, 0.2034676953592397, 0.20278974546510276, 0.19730591246252382, 0.16733962217194676, 0.1668559949702887, 0.2070607522265171, 0.2172497613408999, 0.2119719920007057, 0.18227401791887743, 0.19300016195149905, 0.2020506685759289, 0.20627790011062663, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2239608834767145, 0.20082804547104538, 0.19860736375982124, 0.17303698005590817, 0.18526208160397994, 0.19513968120191116, 0.19550640304933586, 0.18997332327773864, 0.17291089465800247, 0.538872507219367, 0.19733415766982842, 0.15427373733338923, 0.2716377777047917, 0.1986257592844176, 0.19886997379428872, 0.3691159249161302, 0.17013844892602115, 0.5100516678299377, 0.5109533693195962, 0.1557362489196168, 0.2081250152798425, 0.46335503946786816, 0.16951017187019912, 0.2080246424666029, 0.10492309473493366, 0.10492025246060854, 0.4576937133023883, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.17330145918270823, 0.17866711363544707, 0.18199967015695562, 0.18008268279955542, 0.18850257835538975, 0.18274441759078364, 0.09052420112030957, 0.09040708048099677, 0.08801172644855693, 0.08045374604565259, 0.0871715566406821, 0.09228177040148, 0.0916070538856879, 0.0973146831289965, 0.11926825870526425]}, "mutation_prompt": null}
{"id": "d19651d5-0bce-4d1c-8322-374d386aa383", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance the exploration by introducing a dynamic adjustment mechanism for the social weight during the optimization process.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.40052570598683046, 0.38665434379303854, 0.3511358168669183, 0.3549640800811814, 0.3631857959300051, 0.3769998046410866, 0.3671742583017379, 0.3487107833359343, 0.36829691933682773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.09814787272712888, 0.12782368099014496, 0.1041100699990144, 0.08635889854823686, 0.09260908041752902, 0.10111696654229785, 0.1117435863111661, 0.10605438801031253, 0.09784166179699749, 0.08888111730227577, 0.09035102758828906, 0.09795395229197912, 0.08943168741291252, 0.08653351716078506, 0.08727140295537705, 0.0794586137280765, 0.0908518986609893, 0.08648400050848637, 0.9914233632670114, 0.9926563919972974, 0.9912527337637672, 0.9883924450137075, 0.986839538448225, 0.9865656048167651, 0.988959762933399, 0.989817606679141, 0.9877441806982439, 0.2733729718927925, 0.24143533857162247, 0.23357737739968976, 0.2237696683267375, 0.23449987476096135, 0.2354110892560406, 0.25405618053250956, 0.24844549031218932, 0.2746567072520939, 0.29356291405480484, 0.25920703189740246, 0.2953305745122642, 0.26007084435812244, 0.24041142830061712, 0.24870066494372045, 0.25007552263727706, 0.2683928825453782, 0.303670483057492, 0.15346559977293983, 0.1447095516268011, 0.14474882655238797, 0.14682204719171565, 0.14541048011267288, 0.14678353780431608, 0.12451026505372886, 0.14629878020734632, 0.16477015094981795, 0.1497681715875422, 0.15322773688361635, 0.12610349255239894, 0.13138359625658835, 0.14312040398245063, 0.16747353158053735, 0.14723799654885128, 0.13723421195847407, 0.1461089701560162, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.003881359358109737, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924185486683504, 0.059307617871185325, 0.02895056386871897, 0.08405308668337963, 0.11420946976003377, 0.00891950723468582, 0.012674545413271288, 0.09047844169094732, 0.04427849308956644, 0.1000102844949392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299866673142828, 0.03668826499756339, 0.06940530518897303, 0.07688369362092329, 0.06511502596872853, 0.10275456721820242, 0.07469803177816392, 0.06286008885360139, 0.06538344460854772, 0.34205071526278463, 0.3684015656529417, 0.3700350545251695, 0.35743442240561396, 0.33527067274918265, 0.37912050000404196, 0.34759777866201325, 0.3529955327381811, 0.3470911517924231, 0.09665941402298972, 0.09533646123601702, 0.10607127424554585, 0.11745576632948829, 0.0980288033301806, 0.09184322167801728, 0.10318090279276715, 0.0989201949495413, 0.10721366882397088, 0.22536185688553123, 0.20040501195173233, 0.20154857321644837, 0.22450487355662962, 0.21585528858679393, 0.2069928640593326, 0.23908179974778232, 0.2665174367881512, 0.24138053229524414, 0.2622807783746146, 0.2501478825728658, 0.25742429800629074, 0.26423958634123335, 0.24368694457848827, 0.2760881045263355, 0.2571028594319912, 0.26225954549211694, 0.2521292830548637, 0.1841629070235723, 0.20901467358367476, 0.2034676953592397, 0.20278974546510276, 0.19730591246252382, 0.16733962217194676, 0.1668559949702887, 0.2070607522265171, 0.2172497613408999, 0.2119719920007057, 0.18227401791887743, 0.19300016195149905, 0.2020506685759289, 0.20627790011062663, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2239608834767145, 0.20082804547104538, 0.19860736375982124, 0.17303698005590817, 0.18526208160397994, 0.19513968120191116, 0.19550640304933586, 0.18997332327773864, 0.17291089465800247, 0.538872507219367, 0.19733415766982842, 0.15427373733338923, 0.2716377777047917, 0.1986257592844176, 0.19886997379428872, 0.3691159249161302, 0.17013844892602115, 0.5100516678299377, 0.5109533693195962, 0.1557362489196168, 0.2081250152798425, 0.46335503946786816, 0.16951017187019912, 0.2080246424666029, 0.10492309473493366, 0.10492025246060854, 0.4576937133023883, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.17330145918270823, 0.17866711363544707, 0.18199967015695562, 0.18008268279955542, 0.18850257835538975, 0.18274441759078364, 0.09052420112030957, 0.09040708048099677, 0.08801172644855693, 0.08045374604565259, 0.0871715566406821, 0.09228177040148, 0.0916070538856879, 0.0973146831289965, 0.11926825870526425]}, "mutation_prompt": null}
{"id": "fd58af9e-9923-40d3-8d0c-2c04486e606c", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance the exploration by introducing a dynamic adjustment mechanism for the social weight during the optimization process.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.40052570598683046, 0.38665434379303854, 0.3511358168669183, 0.3549640800811814, 0.3631857959300051, 0.3769998046410866, 0.3671742583017379, 0.3487107833359343, 0.36829691933682773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.09814787272712888, 0.12782368099014496, 0.1041100699990144, 0.08635889854823686, 0.09260908041752902, 0.10111696654229785, 0.1117435863111661, 0.10605438801031253, 0.09784166179699749, 0.08888111730227577, 0.09035102758828906, 0.09795395229197912, 0.08943168741291252, 0.08653351716078506, 0.08727140295537705, 0.0794586137280765, 0.0908518986609893, 0.08648400050848637, 0.9914233632670114, 0.9926563919972974, 0.9912527337637672, 0.9883924450137075, 0.986839538448225, 0.9865656048167651, 0.988959762933399, 0.989817606679141, 0.9877441806982439, 0.2733729718927925, 0.24143533857162247, 0.23357737739968976, 0.2237696683267375, 0.23449987476096135, 0.2354110892560406, 0.25405618053250956, 0.24844549031218932, 0.2746567072520939, 0.29356291405480484, 0.25920703189740246, 0.2953305745122642, 0.26007084435812244, 0.24041142830061712, 0.24870066494372045, 0.25007552263727706, 0.2683928825453782, 0.303670483057492, 0.15346559977293983, 0.1447095516268011, 0.14474882655238797, 0.14682204719171565, 0.14541048011267288, 0.14678353780431608, 0.12451026505372886, 0.14629878020734632, 0.16477015094981795, 0.1497681715875422, 0.15322773688361635, 0.12610349255239894, 0.13138359625658835, 0.14312040398245063, 0.16747353158053735, 0.14723799654885128, 0.13723421195847407, 0.1461089701560162, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.003881359358109737, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924185486683504, 0.059307617871185325, 0.02895056386871897, 0.08405308668337963, 0.11420946976003377, 0.00891950723468582, 0.012674545413271288, 0.09047844169094732, 0.04427849308956644, 0.1000102844949392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299866673142828, 0.03668826499756339, 0.06940530518897303, 0.07688369362092329, 0.06511502596872853, 0.10275456721820242, 0.07469803177816392, 0.06286008885360139, 0.06538344460854772, 0.34205071526278463, 0.3684015656529417, 0.3700350545251695, 0.35743442240561396, 0.33527067274918265, 0.37912050000404196, 0.34759777866201325, 0.3529955327381811, 0.3470911517924231, 0.09665941402298972, 0.09533646123601702, 0.10607127424554585, 0.11745576632948829, 0.0980288033301806, 0.09184322167801728, 0.10318090279276715, 0.0989201949495413, 0.10721366882397088, 0.22536185688553123, 0.20040501195173233, 0.20154857321644837, 0.22450487355662962, 0.21585528858679393, 0.2069928640593326, 0.23908179974778232, 0.2665174367881512, 0.24138053229524414, 0.2622807783746146, 0.2501478825728658, 0.25742429800629074, 0.26423958634123335, 0.24368694457848827, 0.2760881045263355, 0.2571028594319912, 0.26225954549211694, 0.2521292830548637, 0.1841629070235723, 0.20901467358367476, 0.2034676953592397, 0.20278974546510276, 0.19730591246252382, 0.16733962217194676, 0.1668559949702887, 0.2070607522265171, 0.2172497613408999, 0.2119719920007057, 0.18227401791887743, 0.19300016195149905, 0.2020506685759289, 0.20627790011062663, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2239608834767145, 0.20082804547104538, 0.19860736375982124, 0.17303698005590817, 0.18526208160397994, 0.19513968120191116, 0.19550640304933586, 0.18997332327773864, 0.17291089465800247, 0.538872507219367, 0.19733415766982842, 0.15427373733338923, 0.2716377777047917, 0.1986257592844176, 0.19886997379428872, 0.3691159249161302, 0.17013844892602115, 0.5100516678299377, 0.5109533693195962, 0.1557362489196168, 0.2081250152798425, 0.46335503946786816, 0.16951017187019912, 0.2080246424666029, 0.10492309473493366, 0.10492025246060854, 0.4576937133023883, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.17330145918270823, 0.17866711363544707, 0.18199967015695562, 0.18008268279955542, 0.18850257835538975, 0.18274441759078364, 0.09052420112030957, 0.09040708048099677, 0.08801172644855693, 0.08045374604565259, 0.0871715566406821, 0.09228177040148, 0.0916070538856879, 0.0973146831289965, 0.11926825870526425]}, "mutation_prompt": null}
{"id": "718024ca-2616-4d81-a398-564c48978359", "solution": "import numpy as np\n\nclass MutatedEnhancedQIPSO(EnhancedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, mutation_rate=0.1):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay)\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def mutate(particle):\n            mutated_particle = particle + np.random.normal(0, self.mutation_rate, size=self.dim)\n            return np.clip(mutated_particle, -5.0, 5.0)\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = mutate(particles[i])  # Introduce mutation\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "MutatedEnhancedQIPSO", "description": "Enhance the algorithm by incorporating a mutation operator to introduce additional exploration in the search space.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_particles' is not defined\").", "error": "NameError(\"name 'initialize_particles' is not defined\")", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {}, "mutation_prompt": null}
{"id": "224d0707-9c24-4f9d-a16b-27e7574c7628", "solution": "import numpy as np\n\nclass MutatedEnhancedQIPSO(EnhancedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, mutation_rate=0.1):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay)\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] = np.random.uniform(-5.0, 5.0, size=self.dim)  # Mutation to explore new regions\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "MutatedEnhancedQIPSO", "description": "Improve exploration by incorporating a mutation strategy to diversify the search space exploration and enhance convergence speed.", "configspace": "", "generation": 43, "fitness": 0.19274339779869087, "feedback": "The algorithm MutatedEnhancedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.31666316094253033, 0.3334533885565093, 0.3276280000251196, 0.323996175832588, 0.34528261621429, 0.34420978821646353, 0.3738592285668013, 0.34488770523814727, 0.31857569201554314, 9.999999999998899e-05, 0.000922873507882449, 9.999999999998899e-05, 0.00653246071746949, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10150874885829053, 0.09444652738093351, 0.12037925084899814, 0.1041352917219921, 0.10092353323837544, 0.06647621966563222, 0.1191772959561529, 0.08315682515509615, 0.08913669301928129, 0.08721617589494313, 0.08679027284091467, 0.07643201079372008, 0.08959250358351678, 0.08397488881551651, 0.08146773526856033, 0.08276442798772332, 0.09163576829258802, 0.10502877386685139, 0.9913314484829573, 0.9927823891662366, 0.9913440245491475, 0.9882165953481438, 0.9918003795472218, 0.9872533512532308, 0.9913685370318901, 0.9908600845423314, 0.9909467082598913, 0.2503431148810039, 0.21821267909887487, 0.22577804754584718, 0.22900502007642665, 0.2026995864184209, 0.21396261094854951, 0.2297229731181567, 0.21676173071700233, 0.2043056277136156, 0.2853525463486545, 0.231619954352985, 0.29728316720345493, 0.27700901344002227, 0.23368839459658675, 0.24790047603311538, 0.2673678973158712, 0.25155683404585993, 0.33589347033684125, 0.13664671997665012, 0.11281745263644094, 0.12854447999787277, 0.08254952575411967, 0.13827873746786412, 0.08351723647637155, 0.12284865291604508, 0.11233182074663128, 0.10403205966738693, 0.12909448128977985, 0.1438938477699394, 0.12815227205180035, 0.1120772408568399, 0.13162870340769373, 0.13752033571105327, 0.12185719845999354, 0.056214393746312985, 0.13448993951257326, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001419776950899565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09377394511486725, 0.038347693637870495, 0.08918597733589562, 0.09492528231717201, 0.010555784695898573, 0.016726277067919515, 0.06061134032614157, 0.057209138905509827, 0.09342145637363719, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04905157174531183, 0.02763923626195397, 0.05017425111183638, 0.05518337048232447, 0.06367596446099055, 0.0584498125594044, 0.056821724078539027, 0.04275027793722075, 0.07806464181542105, 0.3174440763418235, 0.3439675240564313, 0.3250724460107328, 0.33651571200329644, 0.36365347323540176, 0.3401605302515297, 0.37424858452556464, 0.32516743894663414, 0.34570724104755524, 0.09037634271699391, 0.08771752711487224, 0.07877128746259021, 0.09870441095763394, 0.1098499379311999, 0.09150821424525712, 0.08780522007630165, 0.11759512336571332, 0.10870727222864529, 0.14137475989916803, 0.20069827655209316, 0.17313026174281199, 0.2050636818075492, 0.1649100077591482, 0.15509318955552553, 0.1686747442232539, 0.14689486276438513, 0.1895607425959963, 0.24786512050276466, 0.2522454904093516, 0.24830966587662406, 0.2375681323539397, 0.19550918637292425, 0.25175875776617407, 0.23935535248013973, 0.2518289128489327, 0.24540646731380644, 0.16998952633659536, 0.18790455262359873, 0.18323143338743608, 0.16667698729539848, 0.17637776353516021, 0.15847266617258626, 0.18630044242875743, 0.19547193231722781, 0.19633188898221443, 0.180313521638659, 0.185051905005287, 0.18727325333997935, 0.2574703481386954, 0.21803000960692465, 0.2029751239643901, 0.21354742373772595, 0.23653200161006693, 0.1989489682022456, 0.17056639143444152, 0.18532644942940557, 0.17215750037052624, 0.1876285298491479, 0.18355864811124034, 0.1707711473670257, 0.1945862915352614, 0.18366582173538826, 0.1820512229848349, 0.45862961046823203, 0.16542523220331817, 0.277027430236071, 0.416796920082795, 0.19449821566483916, 0.16911832028930351, 0.41688744196226624, 0.17022930796505864, 0.312119034528321, 0.41700889411452347, 0.15481237204355125, 0.2064791033804496, 0.20845648474333234, 0.44059086101196754, 0.4550990200414361, 0.1412013513816357, 0.15371009957680726, 0.44402240513132984, 0.19101184208528477, 0.185129370140799, 0.18866368153797275, 0.19176897142169025, 0.2013493670901605, 0.18296804725122173, 0.16991803893058877, 0.18918405950071038, 0.18723929637680026, 0.08679836875261715, 0.08010587321146645, 0.0735233536768587, 0.09275078506591583, 0.0810433494081435, 0.08184698767128307, 0.09423812263938869, 0.08826424281928413, 0.08372301860986575]}, "mutation_prompt": null}
{"id": "f04f3f0a-8e2e-4b5b-ab5e-5976f38b2dec", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance the exploration by introducing a dynamic adjustment mechanism for the social weight during the optimization process.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.40052570598683046, 0.38665434379303854, 0.3511358168669183, 0.3549640800811814, 0.3631857959300051, 0.3769998046410866, 0.3671742583017379, 0.3487107833359343, 0.36829691933682773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.09814787272712888, 0.12782368099014496, 0.1041100699990144, 0.08635889854823686, 0.09260908041752902, 0.10111696654229785, 0.1117435863111661, 0.10605438801031253, 0.09784166179699749, 0.08888111730227577, 0.09035102758828906, 0.09795395229197912, 0.08943168741291252, 0.08653351716078506, 0.08727140295537705, 0.0794586137280765, 0.0908518986609893, 0.08648400050848637, 0.9914233632670114, 0.9926563919972974, 0.9912527337637672, 0.9883924450137075, 0.986839538448225, 0.9865656048167651, 0.988959762933399, 0.989817606679141, 0.9877441806982439, 0.2733729718927925, 0.24143533857162247, 0.23357737739968976, 0.2237696683267375, 0.23449987476096135, 0.2354110892560406, 0.25405618053250956, 0.24844549031218932, 0.2746567072520939, 0.29356291405480484, 0.25920703189740246, 0.2953305745122642, 0.26007084435812244, 0.24041142830061712, 0.24870066494372045, 0.25007552263727706, 0.2683928825453782, 0.303670483057492, 0.15346559977293983, 0.1447095516268011, 0.14474882655238797, 0.14682204719171565, 0.14541048011267288, 0.14678353780431608, 0.12451026505372886, 0.14629878020734632, 0.16477015094981795, 0.1497681715875422, 0.15322773688361635, 0.12610349255239894, 0.13138359625658835, 0.14312040398245063, 0.16747353158053735, 0.14723799654885128, 0.13723421195847407, 0.1461089701560162, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.003881359358109737, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924185486683504, 0.059307617871185325, 0.02895056386871897, 0.08405308668337963, 0.11420946976003377, 0.00891950723468582, 0.012674545413271288, 0.09047844169094732, 0.04427849308956644, 0.1000102844949392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299866673142828, 0.03668826499756339, 0.06940530518897303, 0.07688369362092329, 0.06511502596872853, 0.10275456721820242, 0.07469803177816392, 0.06286008885360139, 0.06538344460854772, 0.34205071526278463, 0.3684015656529417, 0.3700350545251695, 0.35743442240561396, 0.33527067274918265, 0.37912050000404196, 0.34759777866201325, 0.3529955327381811, 0.3470911517924231, 0.09665941402298972, 0.09533646123601702, 0.10607127424554585, 0.11745576632948829, 0.0980288033301806, 0.09184322167801728, 0.10318090279276715, 0.0989201949495413, 0.10721366882397088, 0.22536185688553123, 0.20040501195173233, 0.20154857321644837, 0.22450487355662962, 0.21585528858679393, 0.2069928640593326, 0.23908179974778232, 0.2665174367881512, 0.24138053229524414, 0.2622807783746146, 0.2501478825728658, 0.25742429800629074, 0.26423958634123335, 0.24368694457848827, 0.2760881045263355, 0.2571028594319912, 0.26225954549211694, 0.2521292830548637, 0.1841629070235723, 0.20901467358367476, 0.2034676953592397, 0.20278974546510276, 0.19730591246252382, 0.16733962217194676, 0.1668559949702887, 0.2070607522265171, 0.2172497613408999, 0.2119719920007057, 0.18227401791887743, 0.19300016195149905, 0.2020506685759289, 0.20627790011062663, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2239608834767145, 0.20082804547104538, 0.19860736375982124, 0.17303698005590817, 0.18526208160397994, 0.19513968120191116, 0.19550640304933586, 0.18997332327773864, 0.17291089465800247, 0.538872507219367, 0.19733415766982842, 0.15427373733338923, 0.2716377777047917, 0.1986257592844176, 0.19886997379428872, 0.3691159249161302, 0.17013844892602115, 0.5100516678299377, 0.5109533693195962, 0.1557362489196168, 0.2081250152798425, 0.46335503946786816, 0.16951017187019912, 0.2080246424666029, 0.10492309473493366, 0.10492025246060854, 0.4576937133023883, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.17330145918270823, 0.17866711363544707, 0.18199967015695562, 0.18008268279955542, 0.18850257835538975, 0.18274441759078364, 0.09052420112030957, 0.09040708048099677, 0.08801172644855693, 0.08045374604565259, 0.0871715566406821, 0.09228177040148, 0.0916070538856879, 0.0973146831289965, 0.11926825870526425]}, "mutation_prompt": null}
{"id": "ed43dace-741a-4f93-9e6c-8604d97e846f", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance the exploration by introducing a dynamic adjustment mechanism for the social weight during the optimization process.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.40052570598683046, 0.38665434379303854, 0.3511358168669183, 0.3549640800811814, 0.3631857959300051, 0.3769998046410866, 0.3671742583017379, 0.3487107833359343, 0.36829691933682773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.09814787272712888, 0.12782368099014496, 0.1041100699990144, 0.08635889854823686, 0.09260908041752902, 0.10111696654229785, 0.1117435863111661, 0.10605438801031253, 0.09784166179699749, 0.08888111730227577, 0.09035102758828906, 0.09795395229197912, 0.08943168741291252, 0.08653351716078506, 0.08727140295537705, 0.0794586137280765, 0.0908518986609893, 0.08648400050848637, 0.9914233632670114, 0.9926563919972974, 0.9912527337637672, 0.9883924450137075, 0.986839538448225, 0.9865656048167651, 0.988959762933399, 0.989817606679141, 0.9877441806982439, 0.2733729718927925, 0.24143533857162247, 0.23357737739968976, 0.2237696683267375, 0.23449987476096135, 0.2354110892560406, 0.25405618053250956, 0.24844549031218932, 0.2746567072520939, 0.29356291405480484, 0.25920703189740246, 0.2953305745122642, 0.26007084435812244, 0.24041142830061712, 0.24870066494372045, 0.25007552263727706, 0.2683928825453782, 0.303670483057492, 0.15346559977293983, 0.1447095516268011, 0.14474882655238797, 0.14682204719171565, 0.14541048011267288, 0.14678353780431608, 0.12451026505372886, 0.14629878020734632, 0.16477015094981795, 0.1497681715875422, 0.15322773688361635, 0.12610349255239894, 0.13138359625658835, 0.14312040398245063, 0.16747353158053735, 0.14723799654885128, 0.13723421195847407, 0.1461089701560162, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.003881359358109737, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924185486683504, 0.059307617871185325, 0.02895056386871897, 0.08405308668337963, 0.11420946976003377, 0.00891950723468582, 0.012674545413271288, 0.09047844169094732, 0.04427849308956644, 0.1000102844949392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299866673142828, 0.03668826499756339, 0.06940530518897303, 0.07688369362092329, 0.06511502596872853, 0.10275456721820242, 0.07469803177816392, 0.06286008885360139, 0.06538344460854772, 0.34205071526278463, 0.3684015656529417, 0.3700350545251695, 0.35743442240561396, 0.33527067274918265, 0.37912050000404196, 0.34759777866201325, 0.3529955327381811, 0.3470911517924231, 0.09665941402298972, 0.09533646123601702, 0.10607127424554585, 0.11745576632948829, 0.0980288033301806, 0.09184322167801728, 0.10318090279276715, 0.0989201949495413, 0.10721366882397088, 0.22536185688553123, 0.20040501195173233, 0.20154857321644837, 0.22450487355662962, 0.21585528858679393, 0.2069928640593326, 0.23908179974778232, 0.2665174367881512, 0.24138053229524414, 0.2622807783746146, 0.2501478825728658, 0.25742429800629074, 0.26423958634123335, 0.24368694457848827, 0.2760881045263355, 0.2571028594319912, 0.26225954549211694, 0.2521292830548637, 0.1841629070235723, 0.20901467358367476, 0.2034676953592397, 0.20278974546510276, 0.19730591246252382, 0.16733962217194676, 0.1668559949702887, 0.2070607522265171, 0.2172497613408999, 0.2119719920007057, 0.18227401791887743, 0.19300016195149905, 0.2020506685759289, 0.20627790011062663, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2239608834767145, 0.20082804547104538, 0.19860736375982124, 0.17303698005590817, 0.18526208160397994, 0.19513968120191116, 0.19550640304933586, 0.18997332327773864, 0.17291089465800247, 0.538872507219367, 0.19733415766982842, 0.15427373733338923, 0.2716377777047917, 0.1986257592844176, 0.19886997379428872, 0.3691159249161302, 0.17013844892602115, 0.5100516678299377, 0.5109533693195962, 0.1557362489196168, 0.2081250152798425, 0.46335503946786816, 0.16951017187019912, 0.2080246424666029, 0.10492309473493366, 0.10492025246060854, 0.4576937133023883, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.17330145918270823, 0.17866711363544707, 0.18199967015695562, 0.18008268279955542, 0.18850257835538975, 0.18274441759078364, 0.09052420112030957, 0.09040708048099677, 0.08801172644855693, 0.08045374604565259, 0.0871715566406821, 0.09228177040148, 0.0916070538856879, 0.0973146831289965, 0.11926825870526425]}, "mutation_prompt": null}
{"id": "5337705c-a68f-4409-9d6e-1efa5d65d2c7", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance the exploration by introducing a dynamic adjustment mechanism for the social weight during the optimization process.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.40052570598683046, 0.38665434379303854, 0.3511358168669183, 0.3549640800811814, 0.3631857959300051, 0.3769998046410866, 0.3671742583017379, 0.3487107833359343, 0.36829691933682773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.09814787272712888, 0.12782368099014496, 0.1041100699990144, 0.08635889854823686, 0.09260908041752902, 0.10111696654229785, 0.1117435863111661, 0.10605438801031253, 0.09784166179699749, 0.08888111730227577, 0.09035102758828906, 0.09795395229197912, 0.08943168741291252, 0.08653351716078506, 0.08727140295537705, 0.0794586137280765, 0.0908518986609893, 0.08648400050848637, 0.9914233632670114, 0.9926563919972974, 0.9912527337637672, 0.9883924450137075, 0.986839538448225, 0.9865656048167651, 0.988959762933399, 0.989817606679141, 0.9877441806982439, 0.2733729718927925, 0.24143533857162247, 0.23357737739968976, 0.2237696683267375, 0.23449987476096135, 0.2354110892560406, 0.25405618053250956, 0.24844549031218932, 0.2746567072520939, 0.29356291405480484, 0.25920703189740246, 0.2953305745122642, 0.26007084435812244, 0.24041142830061712, 0.24870066494372045, 0.25007552263727706, 0.2683928825453782, 0.303670483057492, 0.15346559977293983, 0.1447095516268011, 0.14474882655238797, 0.14682204719171565, 0.14541048011267288, 0.14678353780431608, 0.12451026505372886, 0.14629878020734632, 0.16477015094981795, 0.1497681715875422, 0.15322773688361635, 0.12610349255239894, 0.13138359625658835, 0.14312040398245063, 0.16747353158053735, 0.14723799654885128, 0.13723421195847407, 0.1461089701560162, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.003881359358109737, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924185486683504, 0.059307617871185325, 0.02895056386871897, 0.08405308668337963, 0.11420946976003377, 0.00891950723468582, 0.012674545413271288, 0.09047844169094732, 0.04427849308956644, 0.1000102844949392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299866673142828, 0.03668826499756339, 0.06940530518897303, 0.07688369362092329, 0.06511502596872853, 0.10275456721820242, 0.07469803177816392, 0.06286008885360139, 0.06538344460854772, 0.34205071526278463, 0.3684015656529417, 0.3700350545251695, 0.35743442240561396, 0.33527067274918265, 0.37912050000404196, 0.34759777866201325, 0.3529955327381811, 0.3470911517924231, 0.09665941402298972, 0.09533646123601702, 0.10607127424554585, 0.11745576632948829, 0.0980288033301806, 0.09184322167801728, 0.10318090279276715, 0.0989201949495413, 0.10721366882397088, 0.22536185688553123, 0.20040501195173233, 0.20154857321644837, 0.22450487355662962, 0.21585528858679393, 0.2069928640593326, 0.23908179974778232, 0.2665174367881512, 0.24138053229524414, 0.2622807783746146, 0.2501478825728658, 0.25742429800629074, 0.26423958634123335, 0.24368694457848827, 0.2760881045263355, 0.2571028594319912, 0.26225954549211694, 0.2521292830548637, 0.1841629070235723, 0.20901467358367476, 0.2034676953592397, 0.20278974546510276, 0.19730591246252382, 0.16733962217194676, 0.1668559949702887, 0.2070607522265171, 0.2172497613408999, 0.2119719920007057, 0.18227401791887743, 0.19300016195149905, 0.2020506685759289, 0.20627790011062663, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2239608834767145, 0.20082804547104538, 0.19860736375982124, 0.17303698005590817, 0.18526208160397994, 0.19513968120191116, 0.19550640304933586, 0.18997332327773864, 0.17291089465800247, 0.538872507219367, 0.19733415766982842, 0.15427373733338923, 0.2716377777047917, 0.1986257592844176, 0.19886997379428872, 0.3691159249161302, 0.17013844892602115, 0.5100516678299377, 0.5109533693195962, 0.1557362489196168, 0.2081250152798425, 0.46335503946786816, 0.16951017187019912, 0.2080246424666029, 0.10492309473493366, 0.10492025246060854, 0.4576937133023883, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.17330145918270823, 0.17866711363544707, 0.18199967015695562, 0.18008268279955542, 0.18850257835538975, 0.18274441759078364, 0.09052420112030957, 0.09040708048099677, 0.08801172644855693, 0.08045374604565259, 0.0871715566406821, 0.09228177040148, 0.0916070538856879, 0.0973146831289965, 0.11926825870526425]}, "mutation_prompt": null}
{"id": "5096208c-f34c-40b1-8d8f-5626e2a88943", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance the exploration by introducing a dynamic adjustment mechanism for the social weight during the optimization process.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.40052570598683046, 0.38665434379303854, 0.3511358168669183, 0.3549640800811814, 0.3631857959300051, 0.3769998046410866, 0.3671742583017379, 0.3487107833359343, 0.36829691933682773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.09814787272712888, 0.12782368099014496, 0.1041100699990144, 0.08635889854823686, 0.09260908041752902, 0.10111696654229785, 0.1117435863111661, 0.10605438801031253, 0.09784166179699749, 0.08888111730227577, 0.09035102758828906, 0.09795395229197912, 0.08943168741291252, 0.08653351716078506, 0.08727140295537705, 0.0794586137280765, 0.0908518986609893, 0.08648400050848637, 0.9914233632670114, 0.9926563919972974, 0.9912527337637672, 0.9883924450137075, 0.986839538448225, 0.9865656048167651, 0.988959762933399, 0.989817606679141, 0.9877441806982439, 0.2733729718927925, 0.24143533857162247, 0.23357737739968976, 0.2237696683267375, 0.23449987476096135, 0.2354110892560406, 0.25405618053250956, 0.24844549031218932, 0.2746567072520939, 0.29356291405480484, 0.25920703189740246, 0.2953305745122642, 0.26007084435812244, 0.24041142830061712, 0.24870066494372045, 0.25007552263727706, 0.2683928825453782, 0.303670483057492, 0.15346559977293983, 0.1447095516268011, 0.14474882655238797, 0.14682204719171565, 0.14541048011267288, 0.14678353780431608, 0.12451026505372886, 0.14629878020734632, 0.16477015094981795, 0.1497681715875422, 0.15322773688361635, 0.12610349255239894, 0.13138359625658835, 0.14312040398245063, 0.16747353158053735, 0.14723799654885128, 0.13723421195847407, 0.1461089701560162, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.003881359358109737, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924185486683504, 0.059307617871185325, 0.02895056386871897, 0.08405308668337963, 0.11420946976003377, 0.00891950723468582, 0.012674545413271288, 0.09047844169094732, 0.04427849308956644, 0.1000102844949392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299866673142828, 0.03668826499756339, 0.06940530518897303, 0.07688369362092329, 0.06511502596872853, 0.10275456721820242, 0.07469803177816392, 0.06286008885360139, 0.06538344460854772, 0.34205071526278463, 0.3684015656529417, 0.3700350545251695, 0.35743442240561396, 0.33527067274918265, 0.37912050000404196, 0.34759777866201325, 0.3529955327381811, 0.3470911517924231, 0.09665941402298972, 0.09533646123601702, 0.10607127424554585, 0.11745576632948829, 0.0980288033301806, 0.09184322167801728, 0.10318090279276715, 0.0989201949495413, 0.10721366882397088, 0.22536185688553123, 0.20040501195173233, 0.20154857321644837, 0.22450487355662962, 0.21585528858679393, 0.2069928640593326, 0.23908179974778232, 0.2665174367881512, 0.24138053229524414, 0.2622807783746146, 0.2501478825728658, 0.25742429800629074, 0.26423958634123335, 0.24368694457848827, 0.2760881045263355, 0.2571028594319912, 0.26225954549211694, 0.2521292830548637, 0.1841629070235723, 0.20901467358367476, 0.2034676953592397, 0.20278974546510276, 0.19730591246252382, 0.16733962217194676, 0.1668559949702887, 0.2070607522265171, 0.2172497613408999, 0.2119719920007057, 0.18227401791887743, 0.19300016195149905, 0.2020506685759289, 0.20627790011062663, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2239608834767145, 0.20082804547104538, 0.19860736375982124, 0.17303698005590817, 0.18526208160397994, 0.19513968120191116, 0.19550640304933586, 0.18997332327773864, 0.17291089465800247, 0.538872507219367, 0.19733415766982842, 0.15427373733338923, 0.2716377777047917, 0.1986257592844176, 0.19886997379428872, 0.3691159249161302, 0.17013844892602115, 0.5100516678299377, 0.5109533693195962, 0.1557362489196168, 0.2081250152798425, 0.46335503946786816, 0.16951017187019912, 0.2080246424666029, 0.10492309473493366, 0.10492025246060854, 0.4576937133023883, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.17330145918270823, 0.17866711363544707, 0.18199967015695562, 0.18008268279955542, 0.18850257835538975, 0.18274441759078364, 0.09052420112030957, 0.09040708048099677, 0.08801172644855693, 0.08045374604565259, 0.0871715566406821, 0.09228177040148, 0.0916070538856879, 0.0973146831289965, 0.11926825870526425]}, "mutation_prompt": null}
{"id": "21606334-af8b-4f34-b67a-ffd94cc8f58c", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance the exploration by introducing a dynamic adjustment mechanism for the social weight during the optimization process.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.40052570598683046, 0.38665434379303854, 0.3511358168669183, 0.3549640800811814, 0.3631857959300051, 0.3769998046410866, 0.3671742583017379, 0.3487107833359343, 0.36829691933682773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.09814787272712888, 0.12782368099014496, 0.1041100699990144, 0.08635889854823686, 0.09260908041752902, 0.10111696654229785, 0.1117435863111661, 0.10605438801031253, 0.09784166179699749, 0.08888111730227577, 0.09035102758828906, 0.09795395229197912, 0.08943168741291252, 0.08653351716078506, 0.08727140295537705, 0.0794586137280765, 0.0908518986609893, 0.08648400050848637, 0.9914233632670114, 0.9926563919972974, 0.9912527337637672, 0.9883924450137075, 0.986839538448225, 0.9865656048167651, 0.988959762933399, 0.989817606679141, 0.9877441806982439, 0.2733729718927925, 0.24143533857162247, 0.23357737739968976, 0.2237696683267375, 0.23449987476096135, 0.2354110892560406, 0.25405618053250956, 0.24844549031218932, 0.2746567072520939, 0.29356291405480484, 0.25920703189740246, 0.2953305745122642, 0.26007084435812244, 0.24041142830061712, 0.24870066494372045, 0.25007552263727706, 0.2683928825453782, 0.303670483057492, 0.15346559977293983, 0.1447095516268011, 0.14474882655238797, 0.14682204719171565, 0.14541048011267288, 0.14678353780431608, 0.12451026505372886, 0.14629878020734632, 0.16477015094981795, 0.1497681715875422, 0.15322773688361635, 0.12610349255239894, 0.13138359625658835, 0.14312040398245063, 0.16747353158053735, 0.14723799654885128, 0.13723421195847407, 0.1461089701560162, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.003881359358109737, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924185486683504, 0.059307617871185325, 0.02895056386871897, 0.08405308668337963, 0.11420946976003377, 0.00891950723468582, 0.012674545413271288, 0.09047844169094732, 0.04427849308956644, 0.1000102844949392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299866673142828, 0.03668826499756339, 0.06940530518897303, 0.07688369362092329, 0.06511502596872853, 0.10275456721820242, 0.07469803177816392, 0.06286008885360139, 0.06538344460854772, 0.34205071526278463, 0.3684015656529417, 0.3700350545251695, 0.35743442240561396, 0.33527067274918265, 0.37912050000404196, 0.34759777866201325, 0.3529955327381811, 0.3470911517924231, 0.09665941402298972, 0.09533646123601702, 0.10607127424554585, 0.11745576632948829, 0.0980288033301806, 0.09184322167801728, 0.10318090279276715, 0.0989201949495413, 0.10721366882397088, 0.22536185688553123, 0.20040501195173233, 0.20154857321644837, 0.22450487355662962, 0.21585528858679393, 0.2069928640593326, 0.23908179974778232, 0.2665174367881512, 0.24138053229524414, 0.2622807783746146, 0.2501478825728658, 0.25742429800629074, 0.26423958634123335, 0.24368694457848827, 0.2760881045263355, 0.2571028594319912, 0.26225954549211694, 0.2521292830548637, 0.1841629070235723, 0.20901467358367476, 0.2034676953592397, 0.20278974546510276, 0.19730591246252382, 0.16733962217194676, 0.1668559949702887, 0.2070607522265171, 0.2172497613408999, 0.2119719920007057, 0.18227401791887743, 0.19300016195149905, 0.2020506685759289, 0.20627790011062663, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2239608834767145, 0.20082804547104538, 0.19860736375982124, 0.17303698005590817, 0.18526208160397994, 0.19513968120191116, 0.19550640304933586, 0.18997332327773864, 0.17291089465800247, 0.538872507219367, 0.19733415766982842, 0.15427373733338923, 0.2716377777047917, 0.1986257592844176, 0.19886997379428872, 0.3691159249161302, 0.17013844892602115, 0.5100516678299377, 0.5109533693195962, 0.1557362489196168, 0.2081250152798425, 0.46335503946786816, 0.16951017187019912, 0.2080246424666029, 0.10492309473493366, 0.10492025246060854, 0.4576937133023883, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.17330145918270823, 0.17866711363544707, 0.18199967015695562, 0.18008268279955542, 0.18850257835538975, 0.18274441759078364, 0.09052420112030957, 0.09040708048099677, 0.08801172644855693, 0.08045374604565259, 0.0871715566406821, 0.09228177040148, 0.0916070538856879, 0.0973146831289965, 0.11926825870526425]}, "mutation_prompt": null}
{"id": "8e52cbd4-ea14-4e32-bc55-3d7d9cfac159", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance the exploration by introducing a dynamic adjustment mechanism for the social weight during the optimization process.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.40052570598683046, 0.38665434379303854, 0.3511358168669183, 0.3549640800811814, 0.3631857959300051, 0.3769998046410866, 0.3671742583017379, 0.3487107833359343, 0.36829691933682773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.09814787272712888, 0.12782368099014496, 0.1041100699990144, 0.08635889854823686, 0.09260908041752902, 0.10111696654229785, 0.1117435863111661, 0.10605438801031253, 0.09784166179699749, 0.08888111730227577, 0.09035102758828906, 0.09795395229197912, 0.08943168741291252, 0.08653351716078506, 0.08727140295537705, 0.0794586137280765, 0.0908518986609893, 0.08648400050848637, 0.9914233632670114, 0.9926563919972974, 0.9912527337637672, 0.9883924450137075, 0.986839538448225, 0.9865656048167651, 0.988959762933399, 0.989817606679141, 0.9877441806982439, 0.2733729718927925, 0.24143533857162247, 0.23357737739968976, 0.2237696683267375, 0.23449987476096135, 0.2354110892560406, 0.25405618053250956, 0.24844549031218932, 0.2746567072520939, 0.29356291405480484, 0.25920703189740246, 0.2953305745122642, 0.26007084435812244, 0.24041142830061712, 0.24870066494372045, 0.25007552263727706, 0.2683928825453782, 0.303670483057492, 0.15346559977293983, 0.1447095516268011, 0.14474882655238797, 0.14682204719171565, 0.14541048011267288, 0.14678353780431608, 0.12451026505372886, 0.14629878020734632, 0.16477015094981795, 0.1497681715875422, 0.15322773688361635, 0.12610349255239894, 0.13138359625658835, 0.14312040398245063, 0.16747353158053735, 0.14723799654885128, 0.13723421195847407, 0.1461089701560162, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.003881359358109737, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924185486683504, 0.059307617871185325, 0.02895056386871897, 0.08405308668337963, 0.11420946976003377, 0.00891950723468582, 0.012674545413271288, 0.09047844169094732, 0.04427849308956644, 0.1000102844949392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299866673142828, 0.03668826499756339, 0.06940530518897303, 0.07688369362092329, 0.06511502596872853, 0.10275456721820242, 0.07469803177816392, 0.06286008885360139, 0.06538344460854772, 0.34205071526278463, 0.3684015656529417, 0.3700350545251695, 0.35743442240561396, 0.33527067274918265, 0.37912050000404196, 0.34759777866201325, 0.3529955327381811, 0.3470911517924231, 0.09665941402298972, 0.09533646123601702, 0.10607127424554585, 0.11745576632948829, 0.0980288033301806, 0.09184322167801728, 0.10318090279276715, 0.0989201949495413, 0.10721366882397088, 0.22536185688553123, 0.20040501195173233, 0.20154857321644837, 0.22450487355662962, 0.21585528858679393, 0.2069928640593326, 0.23908179974778232, 0.2665174367881512, 0.24138053229524414, 0.2622807783746146, 0.2501478825728658, 0.25742429800629074, 0.26423958634123335, 0.24368694457848827, 0.2760881045263355, 0.2571028594319912, 0.26225954549211694, 0.2521292830548637, 0.1841629070235723, 0.20901467358367476, 0.2034676953592397, 0.20278974546510276, 0.19730591246252382, 0.16733962217194676, 0.1668559949702887, 0.2070607522265171, 0.2172497613408999, 0.2119719920007057, 0.18227401791887743, 0.19300016195149905, 0.2020506685759289, 0.20627790011062663, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2239608834767145, 0.20082804547104538, 0.19860736375982124, 0.17303698005590817, 0.18526208160397994, 0.19513968120191116, 0.19550640304933586, 0.18997332327773864, 0.17291089465800247, 0.538872507219367, 0.19733415766982842, 0.15427373733338923, 0.2716377777047917, 0.1986257592844176, 0.19886997379428872, 0.3691159249161302, 0.17013844892602115, 0.5100516678299377, 0.5109533693195962, 0.1557362489196168, 0.2081250152798425, 0.46335503946786816, 0.16951017187019912, 0.2080246424666029, 0.10492309473493366, 0.10492025246060854, 0.4576937133023883, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.17330145918270823, 0.17866711363544707, 0.18199967015695562, 0.18008268279955542, 0.18850257835538975, 0.18274441759078364, 0.09052420112030957, 0.09040708048099677, 0.08801172644855693, 0.08045374604565259, 0.0871715566406821, 0.09228177040148, 0.0916070538856879, 0.0973146831289965, 0.11926825870526425]}, "mutation_prompt": null}
{"id": "8127083b-1399-45b8-9e1f-4f529b67fd28", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance the exploration by introducing a dynamic adjustment mechanism for the social weight during the optimization process.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.40052570598683046, 0.38665434379303854, 0.3511358168669183, 0.3549640800811814, 0.3631857959300051, 0.3769998046410866, 0.3671742583017379, 0.3487107833359343, 0.36829691933682773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.09814787272712888, 0.12782368099014496, 0.1041100699990144, 0.08635889854823686, 0.09260908041752902, 0.10111696654229785, 0.1117435863111661, 0.10605438801031253, 0.09784166179699749, 0.08888111730227577, 0.09035102758828906, 0.09795395229197912, 0.08943168741291252, 0.08653351716078506, 0.08727140295537705, 0.0794586137280765, 0.0908518986609893, 0.08648400050848637, 0.9914233632670114, 0.9926563919972974, 0.9912527337637672, 0.9883924450137075, 0.986839538448225, 0.9865656048167651, 0.988959762933399, 0.989817606679141, 0.9877441806982439, 0.2733729718927925, 0.24143533857162247, 0.23357737739968976, 0.2237696683267375, 0.23449987476096135, 0.2354110892560406, 0.25405618053250956, 0.24844549031218932, 0.2746567072520939, 0.29356291405480484, 0.25920703189740246, 0.2953305745122642, 0.26007084435812244, 0.24041142830061712, 0.24870066494372045, 0.25007552263727706, 0.2683928825453782, 0.303670483057492, 0.15346559977293983, 0.1447095516268011, 0.14474882655238797, 0.14682204719171565, 0.14541048011267288, 0.14678353780431608, 0.12451026505372886, 0.14629878020734632, 0.16477015094981795, 0.1497681715875422, 0.15322773688361635, 0.12610349255239894, 0.13138359625658835, 0.14312040398245063, 0.16747353158053735, 0.14723799654885128, 0.13723421195847407, 0.1461089701560162, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.003881359358109737, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924185486683504, 0.059307617871185325, 0.02895056386871897, 0.08405308668337963, 0.11420946976003377, 0.00891950723468582, 0.012674545413271288, 0.09047844169094732, 0.04427849308956644, 0.1000102844949392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299866673142828, 0.03668826499756339, 0.06940530518897303, 0.07688369362092329, 0.06511502596872853, 0.10275456721820242, 0.07469803177816392, 0.06286008885360139, 0.06538344460854772, 0.34205071526278463, 0.3684015656529417, 0.3700350545251695, 0.35743442240561396, 0.33527067274918265, 0.37912050000404196, 0.34759777866201325, 0.3529955327381811, 0.3470911517924231, 0.09665941402298972, 0.09533646123601702, 0.10607127424554585, 0.11745576632948829, 0.0980288033301806, 0.09184322167801728, 0.10318090279276715, 0.0989201949495413, 0.10721366882397088, 0.22536185688553123, 0.20040501195173233, 0.20154857321644837, 0.22450487355662962, 0.21585528858679393, 0.2069928640593326, 0.23908179974778232, 0.2665174367881512, 0.24138053229524414, 0.2622807783746146, 0.2501478825728658, 0.25742429800629074, 0.26423958634123335, 0.24368694457848827, 0.2760881045263355, 0.2571028594319912, 0.26225954549211694, 0.2521292830548637, 0.1841629070235723, 0.20901467358367476, 0.2034676953592397, 0.20278974546510276, 0.19730591246252382, 0.16733962217194676, 0.1668559949702887, 0.2070607522265171, 0.2172497613408999, 0.2119719920007057, 0.18227401791887743, 0.19300016195149905, 0.2020506685759289, 0.20627790011062663, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2239608834767145, 0.20082804547104538, 0.19860736375982124, 0.17303698005590817, 0.18526208160397994, 0.19513968120191116, 0.19550640304933586, 0.18997332327773864, 0.17291089465800247, 0.538872507219367, 0.19733415766982842, 0.15427373733338923, 0.2716377777047917, 0.1986257592844176, 0.19886997379428872, 0.3691159249161302, 0.17013844892602115, 0.5100516678299377, 0.5109533693195962, 0.1557362489196168, 0.2081250152798425, 0.46335503946786816, 0.16951017187019912, 0.2080246424666029, 0.10492309473493366, 0.10492025246060854, 0.4576937133023883, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.17330145918270823, 0.17866711363544707, 0.18199967015695562, 0.18008268279955542, 0.18850257835538975, 0.18274441759078364, 0.09052420112030957, 0.09040708048099677, 0.08801172644855693, 0.08045374604565259, 0.0871715566406821, 0.09228177040148, 0.0916070538856879, 0.0973146831289965, 0.11926825870526425]}, "mutation_prompt": null}
{"id": "3b9b87fe-98af-4a04-88cf-dc86fb044191", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance the exploration by introducing a dynamic adjustment mechanism for the social weight during the optimization process.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.40052570598683046, 0.38665434379303854, 0.3511358168669183, 0.3549640800811814, 0.3631857959300051, 0.3769998046410866, 0.3671742583017379, 0.3487107833359343, 0.36829691933682773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.09814787272712888, 0.12782368099014496, 0.1041100699990144, 0.08635889854823686, 0.09260908041752902, 0.10111696654229785, 0.1117435863111661, 0.10605438801031253, 0.09784166179699749, 0.08888111730227577, 0.09035102758828906, 0.09795395229197912, 0.08943168741291252, 0.08653351716078506, 0.08727140295537705, 0.0794586137280765, 0.0908518986609893, 0.08648400050848637, 0.9914233632670114, 0.9926563919972974, 0.9912527337637672, 0.9883924450137075, 0.986839538448225, 0.9865656048167651, 0.988959762933399, 0.989817606679141, 0.9877441806982439, 0.2733729718927925, 0.24143533857162247, 0.23357737739968976, 0.2237696683267375, 0.23449987476096135, 0.2354110892560406, 0.25405618053250956, 0.24844549031218932, 0.2746567072520939, 0.29356291405480484, 0.25920703189740246, 0.2953305745122642, 0.26007084435812244, 0.24041142830061712, 0.24870066494372045, 0.25007552263727706, 0.2683928825453782, 0.303670483057492, 0.15346559977293983, 0.1447095516268011, 0.14474882655238797, 0.14682204719171565, 0.14541048011267288, 0.14678353780431608, 0.12451026505372886, 0.14629878020734632, 0.16477015094981795, 0.1497681715875422, 0.15322773688361635, 0.12610349255239894, 0.13138359625658835, 0.14312040398245063, 0.16747353158053735, 0.14723799654885128, 0.13723421195847407, 0.1461089701560162, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.003881359358109737, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924185486683504, 0.059307617871185325, 0.02895056386871897, 0.08405308668337963, 0.11420946976003377, 0.00891950723468582, 0.012674545413271288, 0.09047844169094732, 0.04427849308956644, 0.1000102844949392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299866673142828, 0.03668826499756339, 0.06940530518897303, 0.07688369362092329, 0.06511502596872853, 0.10275456721820242, 0.07469803177816392, 0.06286008885360139, 0.06538344460854772, 0.34205071526278463, 0.3684015656529417, 0.3700350545251695, 0.35743442240561396, 0.33527067274918265, 0.37912050000404196, 0.34759777866201325, 0.3529955327381811, 0.3470911517924231, 0.09665941402298972, 0.09533646123601702, 0.10607127424554585, 0.11745576632948829, 0.0980288033301806, 0.09184322167801728, 0.10318090279276715, 0.0989201949495413, 0.10721366882397088, 0.22536185688553123, 0.20040501195173233, 0.20154857321644837, 0.22450487355662962, 0.21585528858679393, 0.2069928640593326, 0.23908179974778232, 0.2665174367881512, 0.24138053229524414, 0.2622807783746146, 0.2501478825728658, 0.25742429800629074, 0.26423958634123335, 0.24368694457848827, 0.2760881045263355, 0.2571028594319912, 0.26225954549211694, 0.2521292830548637, 0.1841629070235723, 0.20901467358367476, 0.2034676953592397, 0.20278974546510276, 0.19730591246252382, 0.16733962217194676, 0.1668559949702887, 0.2070607522265171, 0.2172497613408999, 0.2119719920007057, 0.18227401791887743, 0.19300016195149905, 0.2020506685759289, 0.20627790011062663, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2239608834767145, 0.20082804547104538, 0.19860736375982124, 0.17303698005590817, 0.18526208160397994, 0.19513968120191116, 0.19550640304933586, 0.18997332327773864, 0.17291089465800247, 0.538872507219367, 0.19733415766982842, 0.15427373733338923, 0.2716377777047917, 0.1986257592844176, 0.19886997379428872, 0.3691159249161302, 0.17013844892602115, 0.5100516678299377, 0.5109533693195962, 0.1557362489196168, 0.2081250152798425, 0.46335503946786816, 0.16951017187019912, 0.2080246424666029, 0.10492309473493366, 0.10492025246060854, 0.4576937133023883, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.17330145918270823, 0.17866711363544707, 0.18199967015695562, 0.18008268279955542, 0.18850257835538975, 0.18274441759078364, 0.09052420112030957, 0.09040708048099677, 0.08801172644855693, 0.08045374604565259, 0.0871715566406821, 0.09228177040148, 0.0916070538856879, 0.0973146831289965, 0.11926825870526425]}, "mutation_prompt": null}
{"id": "ea591f85-e389-4598-a699-d502551459f1", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance the exploration by introducing a dynamic adjustment mechanism for the social weight during the optimization process.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.40052570598683046, 0.38665434379303854, 0.3511358168669183, 0.3549640800811814, 0.3631857959300051, 0.3769998046410866, 0.3671742583017379, 0.3487107833359343, 0.36829691933682773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.09814787272712888, 0.12782368099014496, 0.1041100699990144, 0.08635889854823686, 0.09260908041752902, 0.10111696654229785, 0.1117435863111661, 0.10605438801031253, 0.09784166179699749, 0.08888111730227577, 0.09035102758828906, 0.09795395229197912, 0.08943168741291252, 0.08653351716078506, 0.08727140295537705, 0.0794586137280765, 0.0908518986609893, 0.08648400050848637, 0.9914233632670114, 0.9926563919972974, 0.9912527337637672, 0.9883924450137075, 0.986839538448225, 0.9865656048167651, 0.988959762933399, 0.989817606679141, 0.9877441806982439, 0.2733729718927925, 0.24143533857162247, 0.23357737739968976, 0.2237696683267375, 0.23449987476096135, 0.2354110892560406, 0.25405618053250956, 0.24844549031218932, 0.2746567072520939, 0.29356291405480484, 0.25920703189740246, 0.2953305745122642, 0.26007084435812244, 0.24041142830061712, 0.24870066494372045, 0.25007552263727706, 0.2683928825453782, 0.303670483057492, 0.15346559977293983, 0.1447095516268011, 0.14474882655238797, 0.14682204719171565, 0.14541048011267288, 0.14678353780431608, 0.12451026505372886, 0.14629878020734632, 0.16477015094981795, 0.1497681715875422, 0.15322773688361635, 0.12610349255239894, 0.13138359625658835, 0.14312040398245063, 0.16747353158053735, 0.14723799654885128, 0.13723421195847407, 0.1461089701560162, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.003881359358109737, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924185486683504, 0.059307617871185325, 0.02895056386871897, 0.08405308668337963, 0.11420946976003377, 0.00891950723468582, 0.012674545413271288, 0.09047844169094732, 0.04427849308956644, 0.1000102844949392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299866673142828, 0.03668826499756339, 0.06940530518897303, 0.07688369362092329, 0.06511502596872853, 0.10275456721820242, 0.07469803177816392, 0.06286008885360139, 0.06538344460854772, 0.34205071526278463, 0.3684015656529417, 0.3700350545251695, 0.35743442240561396, 0.33527067274918265, 0.37912050000404196, 0.34759777866201325, 0.3529955327381811, 0.3470911517924231, 0.09665941402298972, 0.09533646123601702, 0.10607127424554585, 0.11745576632948829, 0.0980288033301806, 0.09184322167801728, 0.10318090279276715, 0.0989201949495413, 0.10721366882397088, 0.22536185688553123, 0.20040501195173233, 0.20154857321644837, 0.22450487355662962, 0.21585528858679393, 0.2069928640593326, 0.23908179974778232, 0.2665174367881512, 0.24138053229524414, 0.2622807783746146, 0.2501478825728658, 0.25742429800629074, 0.26423958634123335, 0.24368694457848827, 0.2760881045263355, 0.2571028594319912, 0.26225954549211694, 0.2521292830548637, 0.1841629070235723, 0.20901467358367476, 0.2034676953592397, 0.20278974546510276, 0.19730591246252382, 0.16733962217194676, 0.1668559949702887, 0.2070607522265171, 0.2172497613408999, 0.2119719920007057, 0.18227401791887743, 0.19300016195149905, 0.2020506685759289, 0.20627790011062663, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2239608834767145, 0.20082804547104538, 0.19860736375982124, 0.17303698005590817, 0.18526208160397994, 0.19513968120191116, 0.19550640304933586, 0.18997332327773864, 0.17291089465800247, 0.538872507219367, 0.19733415766982842, 0.15427373733338923, 0.2716377777047917, 0.1986257592844176, 0.19886997379428872, 0.3691159249161302, 0.17013844892602115, 0.5100516678299377, 0.5109533693195962, 0.1557362489196168, 0.2081250152798425, 0.46335503946786816, 0.16951017187019912, 0.2080246424666029, 0.10492309473493366, 0.10492025246060854, 0.4576937133023883, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.17330145918270823, 0.17866711363544707, 0.18199967015695562, 0.18008268279955542, 0.18850257835538975, 0.18274441759078364, 0.09052420112030957, 0.09040708048099677, 0.08801172644855693, 0.08045374604565259, 0.0871715566406821, 0.09228177040148, 0.0916070538856879, 0.0973146831289965, 0.11926825870526425]}, "mutation_prompt": null}
{"id": "0db64596-680b-4fa3-bbe1-2653baa6ef04", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance the exploration by introducing a dynamic adjustment mechanism for the social weight during the optimization process.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.40052570598683046, 0.38665434379303854, 0.3511358168669183, 0.3549640800811814, 0.3631857959300051, 0.3769998046410866, 0.3671742583017379, 0.3487107833359343, 0.36829691933682773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.09814787272712888, 0.12782368099014496, 0.1041100699990144, 0.08635889854823686, 0.09260908041752902, 0.10111696654229785, 0.1117435863111661, 0.10605438801031253, 0.09784166179699749, 0.08888111730227577, 0.09035102758828906, 0.09795395229197912, 0.08943168741291252, 0.08653351716078506, 0.08727140295537705, 0.0794586137280765, 0.0908518986609893, 0.08648400050848637, 0.9914233632670114, 0.9926563919972974, 0.9912527337637672, 0.9883924450137075, 0.986839538448225, 0.9865656048167651, 0.988959762933399, 0.989817606679141, 0.9877441806982439, 0.2733729718927925, 0.24143533857162247, 0.23357737739968976, 0.2237696683267375, 0.23449987476096135, 0.2354110892560406, 0.25405618053250956, 0.24844549031218932, 0.2746567072520939, 0.29356291405480484, 0.25920703189740246, 0.2953305745122642, 0.26007084435812244, 0.24041142830061712, 0.24870066494372045, 0.25007552263727706, 0.2683928825453782, 0.303670483057492, 0.15346559977293983, 0.1447095516268011, 0.14474882655238797, 0.14682204719171565, 0.14541048011267288, 0.14678353780431608, 0.12451026505372886, 0.14629878020734632, 0.16477015094981795, 0.1497681715875422, 0.15322773688361635, 0.12610349255239894, 0.13138359625658835, 0.14312040398245063, 0.16747353158053735, 0.14723799654885128, 0.13723421195847407, 0.1461089701560162, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.003881359358109737, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924185486683504, 0.059307617871185325, 0.02895056386871897, 0.08405308668337963, 0.11420946976003377, 0.00891950723468582, 0.012674545413271288, 0.09047844169094732, 0.04427849308956644, 0.1000102844949392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299866673142828, 0.03668826499756339, 0.06940530518897303, 0.07688369362092329, 0.06511502596872853, 0.10275456721820242, 0.07469803177816392, 0.06286008885360139, 0.06538344460854772, 0.34205071526278463, 0.3684015656529417, 0.3700350545251695, 0.35743442240561396, 0.33527067274918265, 0.37912050000404196, 0.34759777866201325, 0.3529955327381811, 0.3470911517924231, 0.09665941402298972, 0.09533646123601702, 0.10607127424554585, 0.11745576632948829, 0.0980288033301806, 0.09184322167801728, 0.10318090279276715, 0.0989201949495413, 0.10721366882397088, 0.22536185688553123, 0.20040501195173233, 0.20154857321644837, 0.22450487355662962, 0.21585528858679393, 0.2069928640593326, 0.23908179974778232, 0.2665174367881512, 0.24138053229524414, 0.2622807783746146, 0.2501478825728658, 0.25742429800629074, 0.26423958634123335, 0.24368694457848827, 0.2760881045263355, 0.2571028594319912, 0.26225954549211694, 0.2521292830548637, 0.1841629070235723, 0.20901467358367476, 0.2034676953592397, 0.20278974546510276, 0.19730591246252382, 0.16733962217194676, 0.1668559949702887, 0.2070607522265171, 0.2172497613408999, 0.2119719920007057, 0.18227401791887743, 0.19300016195149905, 0.2020506685759289, 0.20627790011062663, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2239608834767145, 0.20082804547104538, 0.19860736375982124, 0.17303698005590817, 0.18526208160397994, 0.19513968120191116, 0.19550640304933586, 0.18997332327773864, 0.17291089465800247, 0.538872507219367, 0.19733415766982842, 0.15427373733338923, 0.2716377777047917, 0.1986257592844176, 0.19886997379428872, 0.3691159249161302, 0.17013844892602115, 0.5100516678299377, 0.5109533693195962, 0.1557362489196168, 0.2081250152798425, 0.46335503946786816, 0.16951017187019912, 0.2080246424666029, 0.10492309473493366, 0.10492025246060854, 0.4576937133023883, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.17330145918270823, 0.17866711363544707, 0.18199967015695562, 0.18008268279955542, 0.18850257835538975, 0.18274441759078364, 0.09052420112030957, 0.09040708048099677, 0.08801172644855693, 0.08045374604565259, 0.0871715566406821, 0.09228177040148, 0.0916070538856879, 0.0973146831289965, 0.11926825870526425]}, "mutation_prompt": null}
{"id": "72645dbe-16c5-44fc-b28d-5f51e6a83420", "solution": "import numpy as np\n\nclass EnhancedQIPSOWithLocalSearch(EnhancedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, mutation_prob=0.1, mutation_scale=0.1):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay)\n        self.mutation_prob = mutation_prob\n        self.mutation_scale = mutation_scale\n\n    def local_search(self, particle, func):\n        mutated_particle = np.clip(particle + np.random.normal(0, self.mutation_scale, size=self.dim), -5.0, 5.0)\n        if func(mutated_particle) < func(particle):\n            return mutated_particle\n        else:\n            return particle\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                particles[i] = self.local_search(particles[i], func) if np.random.rand() < self.mutation_prob else particles[i]\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSOWithLocalSearch", "description": "Incorporate a local search step using a mutation strategy to enhance exploitation of promising regions.", "configspace": "", "generation": 54, "fitness": 0.19446347640365602, "feedback": "The algorithm EnhancedQIPSOWithLocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.20.", "error": "", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.34258115972453584, 0.36616086636892053, 0.3517220955859499, 0.362668272991016, 0.35115625889773183, 0.40444459372075636, 0.34765141170621905, 0.38562928190860524, 0.3540110687110023, 0.00022740913448537903, 0.0031335346709571166, 9.999999999998899e-05, 9.999999999998899e-05, 0.019155515602705564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09695327667617826, 0.11607344345278803, 0.06807897324728474, 0.09275516436430753, 0.08872091441471963, 0.11643292371672342, 0.09449848956328011, 0.11296894611114638, 0.1248140559793679, 0.08827169990141315, 0.08485761097952549, 0.09183771310756872, 0.11861003310364071, 0.09987445488048174, 0.0817010445580525, 0.10028566068780997, 0.09071810592267471, 0.07383237314332691, 0.990432533988142, 0.9904725376898739, 0.9919431857418883, 0.9856724070167907, 0.9897513061918539, 0.9844074553029629, 0.9892333838969036, 0.9895775715089646, 0.98907038337889, 0.21983590641034378, 0.2452758932232353, 0.24481679587449645, 0.23653754178345365, 0.24616090353892595, 0.2433980063948763, 0.2273556952332726, 0.2268754027260217, 0.23607464867116446, 0.25227514689101405, 0.291440869329637, 0.28811242890451605, 0.23180103999121315, 0.26730808907702, 0.27348092228465104, 0.2282328749994288, 0.2854239183219196, 0.30590343430088573, 0.13104004505287814, 0.16014687097299196, 0.14451950235257405, 0.14095565179444225, 0.09555483801679909, 0.10022984731830908, 0.11026734550386375, 0.1312241879126652, 0.1389599485732098, 0.1456336233601514, 0.13190807116795533, 0.1594461659665607, 0.14038168758306724, 0.12617504531950452, 0.12760214045004703, 0.14061532308746705, 0.0834017524158045, 0.13575123393412036, 0.030659472789781983, 0.02850718222256532, 0.003757274787512088, 0.0182629769478051, 9.999999999998899e-05, 0.009029435205605063, 9.999999999998899e-05, 0.00011088471613640571, 0.003895709088231114, 0.0886873171206708, 0.1413378386914952, 0.1235026147133591, 0.08299853801620027, 0.012407474013625519, 0.03408031455670302, 0.11760658090197118, 0.09634055312821199, 0.06202089167485847, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05650407837870586, 0.071115814435456, 0.07396049712634778, 0.07845559087094045, 0.07541217304453951, 0.096078215944856, 0.06031375810585249, 0.04405901378852617, 0.06774467339132262, 0.3436701439644405, 0.33827903100232215, 0.35815360054030365, 0.3569674824042851, 0.3565266068782923, 0.35421264679053854, 0.34032215959495105, 0.33885439368713455, 0.333796860416377, 0.10513309113281977, 0.10656830869528533, 0.09498627934587967, 0.10977457320859263, 0.1180114570203541, 0.09572768738729431, 0.10820536190718444, 0.09569894818941904, 0.0968755952707403, 0.1557461510180339, 0.18055871117046407, 0.16740731220110483, 0.2247686262806029, 0.20908420832134866, 0.15375705988058141, 0.15592317497824948, 0.19180579942512932, 0.1885116736775948, 0.27076467526481773, 0.2593649410663573, 0.27541511525773943, 0.25204594156231075, 0.25564550152726073, 0.2592774939443028, 0.25881565357280534, 0.26095998228460615, 0.2562054492791397, 0.19599806015170984, 0.17635039559450105, 0.20164736981924059, 0.1705048664186436, 0.1984829218233214, 0.19676657504235595, 0.19644397658425838, 0.21133824242795274, 0.20502218356779822, 0.19132239274497098, 0.2222955617112552, 0.18628111174095652, 0.2092673701935963, 0.22060414037836595, 0.20308824184963625, 0.19719375401826233, 0.21668334678450252, 0.22187269039053892, 0.18694967781184246, 0.18130067784386916, 0.17834161201440712, 0.1764937900804454, 0.20629657609833696, 0.17719824115135419, 0.19892129473736708, 0.2053756597639047, 0.18902800437336187, 0.5127144159550752, 0.17507597874001823, 0.15434201067387932, 0.17133988147479795, 0.19726974069560088, 0.19897932236345328, 0.12434628841810358, 0.16985370759563034, 0.21028697707849764, 0.4718414546939431, 0.15520707897523411, 0.07311188717028194, 0.4338318884928283, 0.1692056957696525, 0.20930796820559727, 0.10482404632581477, 0.10485322263548347, 0.24667062583218113, 0.19937965982373684, 0.17976458684573393, 0.19434961591158262, 0.1839311529951505, 0.17963511422556655, 0.17902523254903813, 0.18119665348652447, 0.20364778163689756, 0.1731422367363573, 0.0999401497603789, 0.08628547821416777, 0.08944188869442293, 0.09413630628457437, 0.08162583469555851, 0.08426769963894398, 0.08964536502507203, 0.08117429197154413, 0.08851044038373712]}, "mutation_prompt": null}
{"id": "a29c2418-ce24-46ee-a87a-4787bcdefe4f", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance the exploration by introducing a dynamic adjustment mechanism for the social weight during the optimization process.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.40052570598683046, 0.38665434379303854, 0.3511358168669183, 0.3549640800811814, 0.3631857959300051, 0.3769998046410866, 0.3671742583017379, 0.3487107833359343, 0.36829691933682773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.09814787272712888, 0.12782368099014496, 0.1041100699990144, 0.08635889854823686, 0.09260908041752902, 0.10111696654229785, 0.1117435863111661, 0.10605438801031253, 0.09784166179699749, 0.08888111730227577, 0.09035102758828906, 0.09795395229197912, 0.08943168741291252, 0.08653351716078506, 0.08727140295537705, 0.0794586137280765, 0.0908518986609893, 0.08648400050848637, 0.9914233632670114, 0.9926563919972974, 0.9912527337637672, 0.9883924450137075, 0.986839538448225, 0.9865656048167651, 0.988959762933399, 0.989817606679141, 0.9877441806982439, 0.2733729718927925, 0.24143533857162247, 0.23357737739968976, 0.2237696683267375, 0.23449987476096135, 0.2354110892560406, 0.25405618053250956, 0.24844549031218932, 0.2746567072520939, 0.29356291405480484, 0.25920703189740246, 0.2953305745122642, 0.26007084435812244, 0.24041142830061712, 0.24870066494372045, 0.25007552263727706, 0.2683928825453782, 0.303670483057492, 0.15346559977293983, 0.1447095516268011, 0.14474882655238797, 0.14682204719171565, 0.14541048011267288, 0.14678353780431608, 0.12451026505372886, 0.14629878020734632, 0.16477015094981795, 0.1497681715875422, 0.15322773688361635, 0.12610349255239894, 0.13138359625658835, 0.14312040398245063, 0.16747353158053735, 0.14723799654885128, 0.13723421195847407, 0.1461089701560162, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.003881359358109737, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924185486683504, 0.059307617871185325, 0.02895056386871897, 0.08405308668337963, 0.11420946976003377, 0.00891950723468582, 0.012674545413271288, 0.09047844169094732, 0.04427849308956644, 0.1000102844949392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299866673142828, 0.03668826499756339, 0.06940530518897303, 0.07688369362092329, 0.06511502596872853, 0.10275456721820242, 0.07469803177816392, 0.06286008885360139, 0.06538344460854772, 0.34205071526278463, 0.3684015656529417, 0.3700350545251695, 0.35743442240561396, 0.33527067274918265, 0.37912050000404196, 0.34759777866201325, 0.3529955327381811, 0.3470911517924231, 0.09665941402298972, 0.09533646123601702, 0.10607127424554585, 0.11745576632948829, 0.0980288033301806, 0.09184322167801728, 0.10318090279276715, 0.0989201949495413, 0.10721366882397088, 0.22536185688553123, 0.20040501195173233, 0.20154857321644837, 0.22450487355662962, 0.21585528858679393, 0.2069928640593326, 0.23908179974778232, 0.2665174367881512, 0.24138053229524414, 0.2622807783746146, 0.2501478825728658, 0.25742429800629074, 0.26423958634123335, 0.24368694457848827, 0.2760881045263355, 0.2571028594319912, 0.26225954549211694, 0.2521292830548637, 0.1841629070235723, 0.20901467358367476, 0.2034676953592397, 0.20278974546510276, 0.19730591246252382, 0.16733962217194676, 0.1668559949702887, 0.2070607522265171, 0.2172497613408999, 0.2119719920007057, 0.18227401791887743, 0.19300016195149905, 0.2020506685759289, 0.20627790011062663, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2239608834767145, 0.20082804547104538, 0.19860736375982124, 0.17303698005590817, 0.18526208160397994, 0.19513968120191116, 0.19550640304933586, 0.18997332327773864, 0.17291089465800247, 0.538872507219367, 0.19733415766982842, 0.15427373733338923, 0.2716377777047917, 0.1986257592844176, 0.19886997379428872, 0.3691159249161302, 0.17013844892602115, 0.5100516678299377, 0.5109533693195962, 0.1557362489196168, 0.2081250152798425, 0.46335503946786816, 0.16951017187019912, 0.2080246424666029, 0.10492309473493366, 0.10492025246060854, 0.4576937133023883, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.17330145918270823, 0.17866711363544707, 0.18199967015695562, 0.18008268279955542, 0.18850257835538975, 0.18274441759078364, 0.09052420112030957, 0.09040708048099677, 0.08801172644855693, 0.08045374604565259, 0.0871715566406821, 0.09228177040148, 0.0916070538856879, 0.0973146831289965, 0.11926825870526425]}, "mutation_prompt": null}
{"id": "f5238c4e-b14d-4a16-8b29-67c514ddf59b", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance the exploration by introducing a dynamic adjustment mechanism for the social weight during the optimization process.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.40052570598683046, 0.38665434379303854, 0.3511358168669183, 0.3549640800811814, 0.3631857959300051, 0.3769998046410866, 0.3671742583017379, 0.3487107833359343, 0.36829691933682773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.09814787272712888, 0.12782368099014496, 0.1041100699990144, 0.08635889854823686, 0.09260908041752902, 0.10111696654229785, 0.1117435863111661, 0.10605438801031253, 0.09784166179699749, 0.08888111730227577, 0.09035102758828906, 0.09795395229197912, 0.08943168741291252, 0.08653351716078506, 0.08727140295537705, 0.0794586137280765, 0.0908518986609893, 0.08648400050848637, 0.9914233632670114, 0.9926563919972974, 0.9912527337637672, 0.9883924450137075, 0.986839538448225, 0.9865656048167651, 0.988959762933399, 0.989817606679141, 0.9877441806982439, 0.2733729718927925, 0.24143533857162247, 0.23357737739968976, 0.2237696683267375, 0.23449987476096135, 0.2354110892560406, 0.25405618053250956, 0.24844549031218932, 0.2746567072520939, 0.29356291405480484, 0.25920703189740246, 0.2953305745122642, 0.26007084435812244, 0.24041142830061712, 0.24870066494372045, 0.25007552263727706, 0.2683928825453782, 0.303670483057492, 0.15346559977293983, 0.1447095516268011, 0.14474882655238797, 0.14682204719171565, 0.14541048011267288, 0.14678353780431608, 0.12451026505372886, 0.14629878020734632, 0.16477015094981795, 0.1497681715875422, 0.15322773688361635, 0.12610349255239894, 0.13138359625658835, 0.14312040398245063, 0.16747353158053735, 0.14723799654885128, 0.13723421195847407, 0.1461089701560162, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.003881359358109737, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924185486683504, 0.059307617871185325, 0.02895056386871897, 0.08405308668337963, 0.11420946976003377, 0.00891950723468582, 0.012674545413271288, 0.09047844169094732, 0.04427849308956644, 0.1000102844949392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299866673142828, 0.03668826499756339, 0.06940530518897303, 0.07688369362092329, 0.06511502596872853, 0.10275456721820242, 0.07469803177816392, 0.06286008885360139, 0.06538344460854772, 0.34205071526278463, 0.3684015656529417, 0.3700350545251695, 0.35743442240561396, 0.33527067274918265, 0.37912050000404196, 0.34759777866201325, 0.3529955327381811, 0.3470911517924231, 0.09665941402298972, 0.09533646123601702, 0.10607127424554585, 0.11745576632948829, 0.0980288033301806, 0.09184322167801728, 0.10318090279276715, 0.0989201949495413, 0.10721366882397088, 0.22536185688553123, 0.20040501195173233, 0.20154857321644837, 0.22450487355662962, 0.21585528858679393, 0.2069928640593326, 0.23908179974778232, 0.2665174367881512, 0.24138053229524414, 0.2622807783746146, 0.2501478825728658, 0.25742429800629074, 0.26423958634123335, 0.24368694457848827, 0.2760881045263355, 0.2571028594319912, 0.26225954549211694, 0.2521292830548637, 0.1841629070235723, 0.20901467358367476, 0.2034676953592397, 0.20278974546510276, 0.19730591246252382, 0.16733962217194676, 0.1668559949702887, 0.2070607522265171, 0.2172497613408999, 0.2119719920007057, 0.18227401791887743, 0.19300016195149905, 0.2020506685759289, 0.20627790011062663, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2239608834767145, 0.20082804547104538, 0.19860736375982124, 0.17303698005590817, 0.18526208160397994, 0.19513968120191116, 0.19550640304933586, 0.18997332327773864, 0.17291089465800247, 0.538872507219367, 0.19733415766982842, 0.15427373733338923, 0.2716377777047917, 0.1986257592844176, 0.19886997379428872, 0.3691159249161302, 0.17013844892602115, 0.5100516678299377, 0.5109533693195962, 0.1557362489196168, 0.2081250152798425, 0.46335503946786816, 0.16951017187019912, 0.2080246424666029, 0.10492309473493366, 0.10492025246060854, 0.4576937133023883, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.17330145918270823, 0.17866711363544707, 0.18199967015695562, 0.18008268279955542, 0.18850257835538975, 0.18274441759078364, 0.09052420112030957, 0.09040708048099677, 0.08801172644855693, 0.08045374604565259, 0.0871715566406821, 0.09228177040148, 0.0916070538856879, 0.0973146831289965, 0.11926825870526425]}, "mutation_prompt": null}
{"id": "6908405c-da84-46bf-8c00-195fbe665037", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance the exploration by introducing a dynamic adjustment mechanism for the social weight during the optimization process.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.40052570598683046, 0.38665434379303854, 0.3511358168669183, 0.3549640800811814, 0.3631857959300051, 0.3769998046410866, 0.3671742583017379, 0.3487107833359343, 0.36829691933682773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.09814787272712888, 0.12782368099014496, 0.1041100699990144, 0.08635889854823686, 0.09260908041752902, 0.10111696654229785, 0.1117435863111661, 0.10605438801031253, 0.09784166179699749, 0.08888111730227577, 0.09035102758828906, 0.09795395229197912, 0.08943168741291252, 0.08653351716078506, 0.08727140295537705, 0.0794586137280765, 0.0908518986609893, 0.08648400050848637, 0.9914233632670114, 0.9926563919972974, 0.9912527337637672, 0.9883924450137075, 0.986839538448225, 0.9865656048167651, 0.988959762933399, 0.989817606679141, 0.9877441806982439, 0.2733729718927925, 0.24143533857162247, 0.23357737739968976, 0.2237696683267375, 0.23449987476096135, 0.2354110892560406, 0.25405618053250956, 0.24844549031218932, 0.2746567072520939, 0.29356291405480484, 0.25920703189740246, 0.2953305745122642, 0.26007084435812244, 0.24041142830061712, 0.24870066494372045, 0.25007552263727706, 0.2683928825453782, 0.303670483057492, 0.15346559977293983, 0.1447095516268011, 0.14474882655238797, 0.14682204719171565, 0.14541048011267288, 0.14678353780431608, 0.12451026505372886, 0.14629878020734632, 0.16477015094981795, 0.1497681715875422, 0.15322773688361635, 0.12610349255239894, 0.13138359625658835, 0.14312040398245063, 0.16747353158053735, 0.14723799654885128, 0.13723421195847407, 0.1461089701560162, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.003881359358109737, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924185486683504, 0.059307617871185325, 0.02895056386871897, 0.08405308668337963, 0.11420946976003377, 0.00891950723468582, 0.012674545413271288, 0.09047844169094732, 0.04427849308956644, 0.1000102844949392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299866673142828, 0.03668826499756339, 0.06940530518897303, 0.07688369362092329, 0.06511502596872853, 0.10275456721820242, 0.07469803177816392, 0.06286008885360139, 0.06538344460854772, 0.34205071526278463, 0.3684015656529417, 0.3700350545251695, 0.35743442240561396, 0.33527067274918265, 0.37912050000404196, 0.34759777866201325, 0.3529955327381811, 0.3470911517924231, 0.09665941402298972, 0.09533646123601702, 0.10607127424554585, 0.11745576632948829, 0.0980288033301806, 0.09184322167801728, 0.10318090279276715, 0.0989201949495413, 0.10721366882397088, 0.22536185688553123, 0.20040501195173233, 0.20154857321644837, 0.22450487355662962, 0.21585528858679393, 0.2069928640593326, 0.23908179974778232, 0.2665174367881512, 0.24138053229524414, 0.2622807783746146, 0.2501478825728658, 0.25742429800629074, 0.26423958634123335, 0.24368694457848827, 0.2760881045263355, 0.2571028594319912, 0.26225954549211694, 0.2521292830548637, 0.1841629070235723, 0.20901467358367476, 0.2034676953592397, 0.20278974546510276, 0.19730591246252382, 0.16733962217194676, 0.1668559949702887, 0.2070607522265171, 0.2172497613408999, 0.2119719920007057, 0.18227401791887743, 0.19300016195149905, 0.2020506685759289, 0.20627790011062663, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2239608834767145, 0.20082804547104538, 0.19860736375982124, 0.17303698005590817, 0.18526208160397994, 0.19513968120191116, 0.19550640304933586, 0.18997332327773864, 0.17291089465800247, 0.538872507219367, 0.19733415766982842, 0.15427373733338923, 0.2716377777047917, 0.1986257592844176, 0.19886997379428872, 0.3691159249161302, 0.17013844892602115, 0.5100516678299377, 0.5109533693195962, 0.1557362489196168, 0.2081250152798425, 0.46335503946786816, 0.16951017187019912, 0.2080246424666029, 0.10492309473493366, 0.10492025246060854, 0.4576937133023883, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.17330145918270823, 0.17866711363544707, 0.18199967015695562, 0.18008268279955542, 0.18850257835538975, 0.18274441759078364, 0.09052420112030957, 0.09040708048099677, 0.08801172644855693, 0.08045374604565259, 0.0871715566406821, 0.09228177040148, 0.0916070538856879, 0.0973146831289965, 0.11926825870526425]}, "mutation_prompt": null}
{"id": "05c154bb-427d-44b8-ab30-58af16877bb5", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance the exploration by introducing a dynamic adjustment mechanism for the social weight during the optimization process.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.40052570598683046, 0.38665434379303854, 0.3511358168669183, 0.3549640800811814, 0.3631857959300051, 0.3769998046410866, 0.3671742583017379, 0.3487107833359343, 0.36829691933682773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.09814787272712888, 0.12782368099014496, 0.1041100699990144, 0.08635889854823686, 0.09260908041752902, 0.10111696654229785, 0.1117435863111661, 0.10605438801031253, 0.09784166179699749, 0.08888111730227577, 0.09035102758828906, 0.09795395229197912, 0.08943168741291252, 0.08653351716078506, 0.08727140295537705, 0.0794586137280765, 0.0908518986609893, 0.08648400050848637, 0.9914233632670114, 0.9926563919972974, 0.9912527337637672, 0.9883924450137075, 0.986839538448225, 0.9865656048167651, 0.988959762933399, 0.989817606679141, 0.9877441806982439, 0.2733729718927925, 0.24143533857162247, 0.23357737739968976, 0.2237696683267375, 0.23449987476096135, 0.2354110892560406, 0.25405618053250956, 0.24844549031218932, 0.2746567072520939, 0.29356291405480484, 0.25920703189740246, 0.2953305745122642, 0.26007084435812244, 0.24041142830061712, 0.24870066494372045, 0.25007552263727706, 0.2683928825453782, 0.303670483057492, 0.15346559977293983, 0.1447095516268011, 0.14474882655238797, 0.14682204719171565, 0.14541048011267288, 0.14678353780431608, 0.12451026505372886, 0.14629878020734632, 0.16477015094981795, 0.1497681715875422, 0.15322773688361635, 0.12610349255239894, 0.13138359625658835, 0.14312040398245063, 0.16747353158053735, 0.14723799654885128, 0.13723421195847407, 0.1461089701560162, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.003881359358109737, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924185486683504, 0.059307617871185325, 0.02895056386871897, 0.08405308668337963, 0.11420946976003377, 0.00891950723468582, 0.012674545413271288, 0.09047844169094732, 0.04427849308956644, 0.1000102844949392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299866673142828, 0.03668826499756339, 0.06940530518897303, 0.07688369362092329, 0.06511502596872853, 0.10275456721820242, 0.07469803177816392, 0.06286008885360139, 0.06538344460854772, 0.34205071526278463, 0.3684015656529417, 0.3700350545251695, 0.35743442240561396, 0.33527067274918265, 0.37912050000404196, 0.34759777866201325, 0.3529955327381811, 0.3470911517924231, 0.09665941402298972, 0.09533646123601702, 0.10607127424554585, 0.11745576632948829, 0.0980288033301806, 0.09184322167801728, 0.10318090279276715, 0.0989201949495413, 0.10721366882397088, 0.22536185688553123, 0.20040501195173233, 0.20154857321644837, 0.22450487355662962, 0.21585528858679393, 0.2069928640593326, 0.23908179974778232, 0.2665174367881512, 0.24138053229524414, 0.2622807783746146, 0.2501478825728658, 0.25742429800629074, 0.26423958634123335, 0.24368694457848827, 0.2760881045263355, 0.2571028594319912, 0.26225954549211694, 0.2521292830548637, 0.1841629070235723, 0.20901467358367476, 0.2034676953592397, 0.20278974546510276, 0.19730591246252382, 0.16733962217194676, 0.1668559949702887, 0.2070607522265171, 0.2172497613408999, 0.2119719920007057, 0.18227401791887743, 0.19300016195149905, 0.2020506685759289, 0.20627790011062663, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2239608834767145, 0.20082804547104538, 0.19860736375982124, 0.17303698005590817, 0.18526208160397994, 0.19513968120191116, 0.19550640304933586, 0.18997332327773864, 0.17291089465800247, 0.538872507219367, 0.19733415766982842, 0.15427373733338923, 0.2716377777047917, 0.1986257592844176, 0.19886997379428872, 0.3691159249161302, 0.17013844892602115, 0.5100516678299377, 0.5109533693195962, 0.1557362489196168, 0.2081250152798425, 0.46335503946786816, 0.16951017187019912, 0.2080246424666029, 0.10492309473493366, 0.10492025246060854, 0.4576937133023883, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.17330145918270823, 0.17866711363544707, 0.18199967015695562, 0.18008268279955542, 0.18850257835538975, 0.18274441759078364, 0.09052420112030957, 0.09040708048099677, 0.08801172644855693, 0.08045374604565259, 0.0871715566406821, 0.09228177040148, 0.0916070538856879, 0.0973146831289965, 0.11926825870526425]}, "mutation_prompt": null}
{"id": "f2b6c945-2223-4709-a520-5e521c6b7559", "solution": "import numpy as np\n\nclass EnhancedQIPSO(QIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor)\n        self.quantum_factor_decay = quantum_factor_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n\n        return global_best", "name": "EnhancedQIPSO", "description": "Enhance the exploration by introducing a dynamic adjustment mechanism for the social weight during the optimization process.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.40052570598683046, 0.38665434379303854, 0.3511358168669183, 0.3549640800811814, 0.3631857959300051, 0.3769998046410866, 0.3671742583017379, 0.3487107833359343, 0.36829691933682773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.09814787272712888, 0.12782368099014496, 0.1041100699990144, 0.08635889854823686, 0.09260908041752902, 0.10111696654229785, 0.1117435863111661, 0.10605438801031253, 0.09784166179699749, 0.08888111730227577, 0.09035102758828906, 0.09795395229197912, 0.08943168741291252, 0.08653351716078506, 0.08727140295537705, 0.0794586137280765, 0.0908518986609893, 0.08648400050848637, 0.9914233632670114, 0.9926563919972974, 0.9912527337637672, 0.9883924450137075, 0.986839538448225, 0.9865656048167651, 0.988959762933399, 0.989817606679141, 0.9877441806982439, 0.2733729718927925, 0.24143533857162247, 0.23357737739968976, 0.2237696683267375, 0.23449987476096135, 0.2354110892560406, 0.25405618053250956, 0.24844549031218932, 0.2746567072520939, 0.29356291405480484, 0.25920703189740246, 0.2953305745122642, 0.26007084435812244, 0.24041142830061712, 0.24870066494372045, 0.25007552263727706, 0.2683928825453782, 0.303670483057492, 0.15346559977293983, 0.1447095516268011, 0.14474882655238797, 0.14682204719171565, 0.14541048011267288, 0.14678353780431608, 0.12451026505372886, 0.14629878020734632, 0.16477015094981795, 0.1497681715875422, 0.15322773688361635, 0.12610349255239894, 0.13138359625658835, 0.14312040398245063, 0.16747353158053735, 0.14723799654885128, 0.13723421195847407, 0.1461089701560162, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.003881359358109737, 9.999999999998899e-05, 9.999999999998899e-05, 0.0012924185486683504, 0.059307617871185325, 0.02895056386871897, 0.08405308668337963, 0.11420946976003377, 0.00891950723468582, 0.012674545413271288, 0.09047844169094732, 0.04427849308956644, 0.1000102844949392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05299866673142828, 0.03668826499756339, 0.06940530518897303, 0.07688369362092329, 0.06511502596872853, 0.10275456721820242, 0.07469803177816392, 0.06286008885360139, 0.06538344460854772, 0.34205071526278463, 0.3684015656529417, 0.3700350545251695, 0.35743442240561396, 0.33527067274918265, 0.37912050000404196, 0.34759777866201325, 0.3529955327381811, 0.3470911517924231, 0.09665941402298972, 0.09533646123601702, 0.10607127424554585, 0.11745576632948829, 0.0980288033301806, 0.09184322167801728, 0.10318090279276715, 0.0989201949495413, 0.10721366882397088, 0.22536185688553123, 0.20040501195173233, 0.20154857321644837, 0.22450487355662962, 0.21585528858679393, 0.2069928640593326, 0.23908179974778232, 0.2665174367881512, 0.24138053229524414, 0.2622807783746146, 0.2501478825728658, 0.25742429800629074, 0.26423958634123335, 0.24368694457848827, 0.2760881045263355, 0.2571028594319912, 0.26225954549211694, 0.2521292830548637, 0.1841629070235723, 0.20901467358367476, 0.2034676953592397, 0.20278974546510276, 0.19730591246252382, 0.16733962217194676, 0.1668559949702887, 0.2070607522265171, 0.2172497613408999, 0.2119719920007057, 0.18227401791887743, 0.19300016195149905, 0.2020506685759289, 0.20627790011062663, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.2239608834767145, 0.20082804547104538, 0.19860736375982124, 0.17303698005590817, 0.18526208160397994, 0.19513968120191116, 0.19550640304933586, 0.18997332327773864, 0.17291089465800247, 0.538872507219367, 0.19733415766982842, 0.15427373733338923, 0.2716377777047917, 0.1986257592844176, 0.19886997379428872, 0.3691159249161302, 0.17013844892602115, 0.5100516678299377, 0.5109533693195962, 0.1557362489196168, 0.2081250152798425, 0.46335503946786816, 0.16951017187019912, 0.2080246424666029, 0.10492309473493366, 0.10492025246060854, 0.4576937133023883, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.17330145918270823, 0.17866711363544707, 0.18199967015695562, 0.18008268279955542, 0.18850257835538975, 0.18274441759078364, 0.09052420112030957, 0.09040708048099677, 0.08801172644855693, 0.08045374604565259, 0.0871715566406821, 0.09228177040148, 0.0916070538856879, 0.0973146831289965, 0.11926825870526425]}, "mutation_prompt": null}
{"id": "45c2c5d6-d9a4-4bd3-a46f-bfa331fead00", "solution": "import numpy as np\n\nclass EnhancedImprovedQIPSO(EnhancedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay)\n        self.inertia_weight_decay = inertia_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n                            self.inertia_weight *= self.inertia_weight_decay  # Introduce dynamic inertia weight adjustment\n\n        return global_best", "name": "EnhancedImprovedQIPSO", "description": "Improve the exploration capability by adding a dynamic inertia weight adjustment mechanism based on the particle's performance.", "configspace": "", "generation": 60, "fitness": 0.2021882282792102, "feedback": "The algorithm EnhancedImprovedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "cc708a38-338f-4816-ad5d-34c78b80f5fb", "metadata": {"aucs": [0.40052570598683046, 0.36097111069000876, 0.3579485110286382, 0.35976874028918693, 0.37035034708574543, 0.37734003989316567, 0.35395632381150155, 0.35463034455067777, 0.3391796334695172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.08691078765402727, 0.1085593263600334, 0.09439815730888479, 0.09261119216656677, 0.09348719887410173, 0.10152211398477407, 0.1117435863111661, 0.12609104506243451, 0.1157925608892798, 0.08888111730227577, 0.08939927546128179, 0.09306267169627302, 0.0993087135505708, 0.10262595753090242, 0.09215490027522977, 0.0794586137280765, 0.10755528982476426, 0.10454058055352455, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.9878834449169077, 0.9863077675832157, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876242682874028, 0.23946902488718036, 0.227599640160841, 0.22829498532402304, 0.22948396839184437, 0.23449987476096135, 0.28383241689159733, 0.2505306921236893, 0.2681363515857874, 0.26668564845844356, 0.25149274745188277, 0.24572873101675552, 0.3470020863239188, 0.2534730519989521, 0.26710145353207104, 0.2480663430207729, 0.2654887439376743, 0.3113526314955747, 0.28493744975977164, 0.15346559977293983, 0.1422178199024947, 0.16121195136903665, 0.14358657064067903, 0.12418647211295886, 0.13543995439616863, 0.12451026505372886, 0.0957467245196556, 0.14232900407688154, 0.17519978812432857, 0.15807534482291052, 0.16421436727432936, 0.13138359625658835, 0.14521293098576848, 0.1395728028098543, 0.14723799654885128, 0.14529116267589015, 0.13171767133538137, 9.999999999998899e-05, 0.028927565017377255, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.02492080583520906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059307617871185325, 0.03356664278301047, 0.0842707502661797, 0.07694481454514934, 0.008735825374347028, 0.012808334682198441, 0.08328506266316493, 0.04427849308956644, 0.10096885372249764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05956729614573664, 0.06226532780475502, 0.08238376758337251, 0.07688369362092329, 0.07882039271095309, 0.055709107788088685, 0.07469803177816392, 0.062004816491835535, 0.06114589620611588, 0.3387072231502688, 0.35374415782224067, 0.3700350545251695, 0.3779193706951912, 0.33527067274918265, 0.37912050000404196, 0.3672429934754462, 0.3803169923638057, 0.3470911517924231, 0.09665941402298972, 0.09834574882760061, 0.10607127424554585, 0.12004860704212661, 0.11159287357939796, 0.09184322167801728, 0.11040953643218143, 0.08837161129134097, 0.10721366882397088, 0.18462863478314062, 0.20040501195173233, 0.20250040037070471, 0.24010650106463438, 0.21585528858679393, 0.20781586166038524, 0.19767397115097773, 0.23080381456126287, 0.22216851953660266, 0.2622807783746146, 0.2592587775707621, 0.26627018819382964, 0.26423958634123335, 0.2538406473103597, 0.2596648082049948, 0.25366063221882995, 0.25569662876369625, 0.24705954383563422, 0.1930026743296428, 0.20901467358367476, 0.19087017311789478, 0.1960014630221626, 0.20876623314442155, 0.15857179980574165, 0.1656203228305827, 0.21421936811074027, 0.2111275116837501, 0.2119719920007057, 0.17955648998485463, 0.19300016195149905, 0.2020506685759289, 0.20902711722615208, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1973802745420461, 0.19924907394880254, 0.19853371385127005, 0.1831419198123604, 0.18672086255504694, 0.1841165681534107, 0.20251122570862223, 0.18057774269118676, 0.18497130634562509, 0.5392357495221176, 0.1969991740391015, 0.1542060079892612, 0.2716377777047917, 0.20028649092460604, 0.19886997379428872, 0.5283600282242749, 0.17028467240458245, 0.5378838265823803, 0.48105932876672386, 0.1556515452809084, 0.20890487081871167, 0.4543998507598669, 0.16962165728683753, 0.20874643564806106, 0.1051880940880292, 0.10492025246060854, 0.4324579686130623, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1837314176478897, 0.1791778937447963, 0.18199967015695562, 0.18008268279955542, 0.18084016350316434, 0.18274441759078364, 0.0894705307363658, 0.07988929277091228, 0.08793678503977354, 0.07914375925033401, 0.08834359033207873, 0.08481143864609753, 0.09196643100144808, 0.08572851594799036, 0.0780993943513153]}, "mutation_prompt": null}
{"id": "7bb31f84-4a30-468c-ab11-e8418bf4a710", "solution": "import numpy as np\n\nclass EnhancedImprovedQIPSO(EnhancedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay)\n        self.inertia_weight_decay = inertia_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n                            self.inertia_weight *= self.inertia_weight_decay  # Introduce dynamic inertia weight adjustment\n\n        return global_best", "name": "EnhancedImprovedQIPSO", "description": "Improve the exploration capability by adding a dynamic inertia weight adjustment mechanism based on the particle's performance.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45c2c5d6-d9a4-4bd3-a46f-bfa331fead00", "metadata": {"aucs": [0.40052570598683046, 0.36097111069000876, 0.3579485110286382, 0.35976874028918693, 0.37035034708574543, 0.37734003989316567, 0.35395632381150155, 0.35463034455067777, 0.3391796334695172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.08691078765402727, 0.1085593263600334, 0.09439815730888479, 0.09261119216656677, 0.09348719887410173, 0.10152211398477407, 0.1117435863111661, 0.12609104506243451, 0.1157925608892798, 0.08888111730227577, 0.08939927546128179, 0.09306267169627302, 0.0993087135505708, 0.10262595753090242, 0.09215490027522977, 0.0794586137280765, 0.10755528982476426, 0.10454058055352455, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.9878834449169077, 0.9863077675832157, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876242682874028, 0.23946902488718036, 0.227599640160841, 0.22829498532402304, 0.22948396839184437, 0.23449987476096135, 0.28383241689159733, 0.2505306921236893, 0.2681363515857874, 0.26668564845844356, 0.25149274745188277, 0.24572873101675552, 0.3470020863239188, 0.2534730519989521, 0.26710145353207104, 0.2480663430207729, 0.2654887439376743, 0.3113526314955747, 0.28493744975977164, 0.15346559977293983, 0.1422178199024947, 0.16121195136903665, 0.14358657064067903, 0.12418647211295886, 0.13543995439616863, 0.12451026505372886, 0.0957467245196556, 0.14232900407688154, 0.17519978812432857, 0.15807534482291052, 0.16421436727432936, 0.13138359625658835, 0.14521293098576848, 0.1395728028098543, 0.14723799654885128, 0.14529116267589015, 0.13171767133538137, 9.999999999998899e-05, 0.028927565017377255, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.02492080583520906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059307617871185325, 0.03356664278301047, 0.0842707502661797, 0.07694481454514934, 0.008735825374347028, 0.012808334682198441, 0.08328506266316493, 0.04427849308956644, 0.10096885372249764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05956729614573664, 0.06226532780475502, 0.08238376758337251, 0.07688369362092329, 0.07882039271095309, 0.055709107788088685, 0.07469803177816392, 0.062004816491835535, 0.06114589620611588, 0.3387072231502688, 0.35374415782224067, 0.3700350545251695, 0.3779193706951912, 0.33527067274918265, 0.37912050000404196, 0.3672429934754462, 0.3803169923638057, 0.3470911517924231, 0.09665941402298972, 0.09834574882760061, 0.10607127424554585, 0.12004860704212661, 0.11159287357939796, 0.09184322167801728, 0.11040953643218143, 0.08837161129134097, 0.10721366882397088, 0.18462863478314062, 0.20040501195173233, 0.20250040037070471, 0.24010650106463438, 0.21585528858679393, 0.20781586166038524, 0.19767397115097773, 0.23080381456126287, 0.22216851953660266, 0.2622807783746146, 0.2592587775707621, 0.26627018819382964, 0.26423958634123335, 0.2538406473103597, 0.2596648082049948, 0.25366063221882995, 0.25569662876369625, 0.24705954383563422, 0.1930026743296428, 0.20901467358367476, 0.19087017311789478, 0.1960014630221626, 0.20876623314442155, 0.15857179980574165, 0.1656203228305827, 0.21421936811074027, 0.2111275116837501, 0.2119719920007057, 0.17955648998485463, 0.19300016195149905, 0.2020506685759289, 0.20902711722615208, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1973802745420461, 0.19924907394880254, 0.19853371385127005, 0.1831419198123604, 0.18672086255504694, 0.1841165681534107, 0.20251122570862223, 0.18057774269118676, 0.18497130634562509, 0.5392357495221176, 0.1969991740391015, 0.1542060079892612, 0.2716377777047917, 0.20028649092460604, 0.19886997379428872, 0.5283600282242749, 0.17028467240458245, 0.5378838265823803, 0.48105932876672386, 0.1556515452809084, 0.20890487081871167, 0.4543998507598669, 0.16962165728683753, 0.20874643564806106, 0.1051880940880292, 0.10492025246060854, 0.4324579686130623, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1837314176478897, 0.1791778937447963, 0.18199967015695562, 0.18008268279955542, 0.18084016350316434, 0.18274441759078364, 0.0894705307363658, 0.07988929277091228, 0.08793678503977354, 0.07914375925033401, 0.08834359033207873, 0.08481143864609753, 0.09196643100144808, 0.08572851594799036, 0.0780993943513153]}, "mutation_prompt": null}
{"id": "dac467be-9e28-4d3e-9f20-3e7d4cb7453e", "solution": "import numpy as np\n\nclass EnhancedImprovedQIPSO(EnhancedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay)\n        self.inertia_weight_decay = inertia_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n                            self.inertia_weight *= self.inertia_weight_decay  # Introduce dynamic inertia weight adjustment\n\n        return global_best", "name": "EnhancedImprovedQIPSO", "description": "Improve the exploration capability by adding a dynamic inertia weight adjustment mechanism based on the particle's performance.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45c2c5d6-d9a4-4bd3-a46f-bfa331fead00", "metadata": {"aucs": [0.40052570598683046, 0.36097111069000876, 0.3579485110286382, 0.35976874028918693, 0.37035034708574543, 0.37734003989316567, 0.35395632381150155, 0.35463034455067777, 0.3391796334695172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.08691078765402727, 0.1085593263600334, 0.09439815730888479, 0.09261119216656677, 0.09348719887410173, 0.10152211398477407, 0.1117435863111661, 0.12609104506243451, 0.1157925608892798, 0.08888111730227577, 0.08939927546128179, 0.09306267169627302, 0.0993087135505708, 0.10262595753090242, 0.09215490027522977, 0.0794586137280765, 0.10755528982476426, 0.10454058055352455, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.9878834449169077, 0.9863077675832157, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876242682874028, 0.23946902488718036, 0.227599640160841, 0.22829498532402304, 0.22948396839184437, 0.23449987476096135, 0.28383241689159733, 0.2505306921236893, 0.2681363515857874, 0.26668564845844356, 0.25149274745188277, 0.24572873101675552, 0.3470020863239188, 0.2534730519989521, 0.26710145353207104, 0.2480663430207729, 0.2654887439376743, 0.3113526314955747, 0.28493744975977164, 0.15346559977293983, 0.1422178199024947, 0.16121195136903665, 0.14358657064067903, 0.12418647211295886, 0.13543995439616863, 0.12451026505372886, 0.0957467245196556, 0.14232900407688154, 0.17519978812432857, 0.15807534482291052, 0.16421436727432936, 0.13138359625658835, 0.14521293098576848, 0.1395728028098543, 0.14723799654885128, 0.14529116267589015, 0.13171767133538137, 9.999999999998899e-05, 0.028927565017377255, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.02492080583520906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059307617871185325, 0.03356664278301047, 0.0842707502661797, 0.07694481454514934, 0.008735825374347028, 0.012808334682198441, 0.08328506266316493, 0.04427849308956644, 0.10096885372249764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05956729614573664, 0.06226532780475502, 0.08238376758337251, 0.07688369362092329, 0.07882039271095309, 0.055709107788088685, 0.07469803177816392, 0.062004816491835535, 0.06114589620611588, 0.3387072231502688, 0.35374415782224067, 0.3700350545251695, 0.3779193706951912, 0.33527067274918265, 0.37912050000404196, 0.3672429934754462, 0.3803169923638057, 0.3470911517924231, 0.09665941402298972, 0.09834574882760061, 0.10607127424554585, 0.12004860704212661, 0.11159287357939796, 0.09184322167801728, 0.11040953643218143, 0.08837161129134097, 0.10721366882397088, 0.18462863478314062, 0.20040501195173233, 0.20250040037070471, 0.24010650106463438, 0.21585528858679393, 0.20781586166038524, 0.19767397115097773, 0.23080381456126287, 0.22216851953660266, 0.2622807783746146, 0.2592587775707621, 0.26627018819382964, 0.26423958634123335, 0.2538406473103597, 0.2596648082049948, 0.25366063221882995, 0.25569662876369625, 0.24705954383563422, 0.1930026743296428, 0.20901467358367476, 0.19087017311789478, 0.1960014630221626, 0.20876623314442155, 0.15857179980574165, 0.1656203228305827, 0.21421936811074027, 0.2111275116837501, 0.2119719920007057, 0.17955648998485463, 0.19300016195149905, 0.2020506685759289, 0.20902711722615208, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1973802745420461, 0.19924907394880254, 0.19853371385127005, 0.1831419198123604, 0.18672086255504694, 0.1841165681534107, 0.20251122570862223, 0.18057774269118676, 0.18497130634562509, 0.5392357495221176, 0.1969991740391015, 0.1542060079892612, 0.2716377777047917, 0.20028649092460604, 0.19886997379428872, 0.5283600282242749, 0.17028467240458245, 0.5378838265823803, 0.48105932876672386, 0.1556515452809084, 0.20890487081871167, 0.4543998507598669, 0.16962165728683753, 0.20874643564806106, 0.1051880940880292, 0.10492025246060854, 0.4324579686130623, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1837314176478897, 0.1791778937447963, 0.18199967015695562, 0.18008268279955542, 0.18084016350316434, 0.18274441759078364, 0.0894705307363658, 0.07988929277091228, 0.08793678503977354, 0.07914375925033401, 0.08834359033207873, 0.08481143864609753, 0.09196643100144808, 0.08572851594799036, 0.0780993943513153]}, "mutation_prompt": null}
{"id": "3485366e-228f-4962-978b-79ed4b13028c", "solution": "import numpy as np\n\nclass EnhancedImprovedQIPSO(EnhancedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay)\n        self.inertia_weight_decay = inertia_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n                            self.inertia_weight *= self.inertia_weight_decay  # Introduce dynamic inertia weight adjustment\n\n        return global_best", "name": "EnhancedImprovedQIPSO", "description": "Improve the exploration capability by adding a dynamic inertia weight adjustment mechanism based on the particle's performance.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45c2c5d6-d9a4-4bd3-a46f-bfa331fead00", "metadata": {"aucs": [0.40052570598683046, 0.36097111069000876, 0.3579485110286382, 0.35976874028918693, 0.37035034708574543, 0.37734003989316567, 0.35395632381150155, 0.35463034455067777, 0.3391796334695172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.08691078765402727, 0.1085593263600334, 0.09439815730888479, 0.09261119216656677, 0.09348719887410173, 0.10152211398477407, 0.1117435863111661, 0.12609104506243451, 0.1157925608892798, 0.08888111730227577, 0.08939927546128179, 0.09306267169627302, 0.0993087135505708, 0.10262595753090242, 0.09215490027522977, 0.0794586137280765, 0.10755528982476426, 0.10454058055352455, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.9878834449169077, 0.9863077675832157, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876242682874028, 0.23946902488718036, 0.227599640160841, 0.22829498532402304, 0.22948396839184437, 0.23449987476096135, 0.28383241689159733, 0.2505306921236893, 0.2681363515857874, 0.26668564845844356, 0.25149274745188277, 0.24572873101675552, 0.3470020863239188, 0.2534730519989521, 0.26710145353207104, 0.2480663430207729, 0.2654887439376743, 0.3113526314955747, 0.28493744975977164, 0.15346559977293983, 0.1422178199024947, 0.16121195136903665, 0.14358657064067903, 0.12418647211295886, 0.13543995439616863, 0.12451026505372886, 0.0957467245196556, 0.14232900407688154, 0.17519978812432857, 0.15807534482291052, 0.16421436727432936, 0.13138359625658835, 0.14521293098576848, 0.1395728028098543, 0.14723799654885128, 0.14529116267589015, 0.13171767133538137, 9.999999999998899e-05, 0.028927565017377255, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.02492080583520906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059307617871185325, 0.03356664278301047, 0.0842707502661797, 0.07694481454514934, 0.008735825374347028, 0.012808334682198441, 0.08328506266316493, 0.04427849308956644, 0.10096885372249764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05956729614573664, 0.06226532780475502, 0.08238376758337251, 0.07688369362092329, 0.07882039271095309, 0.055709107788088685, 0.07469803177816392, 0.062004816491835535, 0.06114589620611588, 0.3387072231502688, 0.35374415782224067, 0.3700350545251695, 0.3779193706951912, 0.33527067274918265, 0.37912050000404196, 0.3672429934754462, 0.3803169923638057, 0.3470911517924231, 0.09665941402298972, 0.09834574882760061, 0.10607127424554585, 0.12004860704212661, 0.11159287357939796, 0.09184322167801728, 0.11040953643218143, 0.08837161129134097, 0.10721366882397088, 0.18462863478314062, 0.20040501195173233, 0.20250040037070471, 0.24010650106463438, 0.21585528858679393, 0.20781586166038524, 0.19767397115097773, 0.23080381456126287, 0.22216851953660266, 0.2622807783746146, 0.2592587775707621, 0.26627018819382964, 0.26423958634123335, 0.2538406473103597, 0.2596648082049948, 0.25366063221882995, 0.25569662876369625, 0.24705954383563422, 0.1930026743296428, 0.20901467358367476, 0.19087017311789478, 0.1960014630221626, 0.20876623314442155, 0.15857179980574165, 0.1656203228305827, 0.21421936811074027, 0.2111275116837501, 0.2119719920007057, 0.17955648998485463, 0.19300016195149905, 0.2020506685759289, 0.20902711722615208, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1973802745420461, 0.19924907394880254, 0.19853371385127005, 0.1831419198123604, 0.18672086255504694, 0.1841165681534107, 0.20251122570862223, 0.18057774269118676, 0.18497130634562509, 0.5392357495221176, 0.1969991740391015, 0.1542060079892612, 0.2716377777047917, 0.20028649092460604, 0.19886997379428872, 0.5283600282242749, 0.17028467240458245, 0.5378838265823803, 0.48105932876672386, 0.1556515452809084, 0.20890487081871167, 0.4543998507598669, 0.16962165728683753, 0.20874643564806106, 0.1051880940880292, 0.10492025246060854, 0.4324579686130623, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1837314176478897, 0.1791778937447963, 0.18199967015695562, 0.18008268279955542, 0.18084016350316434, 0.18274441759078364, 0.0894705307363658, 0.07988929277091228, 0.08793678503977354, 0.07914375925033401, 0.08834359033207873, 0.08481143864609753, 0.09196643100144808, 0.08572851594799036, 0.0780993943513153]}, "mutation_prompt": null}
{"id": "d337fbbe-175b-4558-a2a4-6d6b08422d7c", "solution": "class AdaptiveInertiaWeightQIPSO(EnhancedImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, inertia_weight_increase=1.05, inertia_weight_decrease=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay)\n        self.inertia_weight_increase = inertia_weight_increase\n        self.inertia_weight_decrease = inertia_weight_decrease\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n                            if current_value < func(best_positions[global_best_idx]):\n                                self.inertia_weight *= self.inertia_weight_increase\n                            else:\n                                self.inertia_weight *= self.inertia_weight_decrease\n\n        return global_best", "name": "AdaptiveInertiaWeightQIPSO", "description": "Introduce an adaptive inertia weight adjustment based on particle performance to enhance convergence speed.", "configspace": "", "generation": 64, "fitness": 0.20216859765788533, "feedback": "The algorithm AdaptiveInertiaWeightQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "45c2c5d6-d9a4-4bd3-a46f-bfa331fead00", "metadata": {"aucs": [0.40052570598683046, 0.3609183591985966, 0.35791926602197177, 0.359765399306025, 0.3703237252552912, 0.3773294494562853, 0.35394619687376616, 0.35460523635412844, 0.33915862372086114, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.08690755873568634, 0.10855098162575627, 0.09438492990796332, 0.09259835947451411, 0.09347663882757185, 0.10151908818637878, 0.1117435863111661, 0.12605017728153856, 0.11578873303606907, 0.08888111730227577, 0.08938958219943194, 0.09304637863770326, 0.09930383369059859, 0.10260920421329778, 0.0921458934632634, 0.0794586137280765, 0.10750708954729271, 0.10452685688543684, 0.9914233632670114, 0.992501860491205, 0.9904924017683294, 0.9877902926998596, 0.9860324949958831, 0.986478951528786, 0.9895024474824818, 0.9884794782305417, 0.9872631154260201, 0.23938092196432592, 0.22755225446053995, 0.22828327002581572, 0.22948082062985153, 0.23449987476096135, 0.2837162706273838, 0.25047867966829973, 0.2681116713987737, 0.26666318261062083, 0.2514794578240447, 0.24572873101675552, 0.34698986088970607, 0.25343918066709425, 0.2670850450672382, 0.24803391644647654, 0.26537452195810896, 0.3113274299215042, 0.28490893980018095, 0.15346559977293983, 0.14217251559877953, 0.16119500422867805, 0.14354428485229365, 0.1241770150695446, 0.13542359457077568, 0.12451026505372886, 0.09573501714341437, 0.14230901980016608, 0.17518061319203537, 0.1580348502074792, 0.16418052236334368, 0.13138359625658835, 0.14516808858701225, 0.13954949516210158, 0.14723799654885128, 0.1452228149238528, 0.13170275072044935, 9.999999999998899e-05, 0.028923935255980027, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.024916230672025863, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059307617871185325, 0.033564618142456815, 0.0842705223461977, 0.07694038271741266, 0.008735452334967309, 0.012807571716120014, 0.08328504276982063, 0.04427849308956644, 0.10096422553132378, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059546088721817214, 0.06225231969553591, 0.0823690911760665, 0.07688369362092329, 0.07878886231850468, 0.05570091053545334, 0.07469803177816392, 0.061998287183873235, 0.0611353339420051, 0.33868999085376283, 0.35373967974731946, 0.3700350545251695, 0.37789301203682424, 0.33527067274918265, 0.37912050000404196, 0.3672220624704692, 0.3802915192319811, 0.3470911517924231, 0.09665941402298972, 0.09832597552697153, 0.10607127424554585, 0.1200198983109394, 0.1115619043235111, 0.09184322167801728, 0.11039461668461514, 0.08834334678853317, 0.10721366882397088, 0.18461532834638195, 0.20040501195173233, 0.2024993892257302, 0.24009182467983425, 0.21585528858679393, 0.20779341534964768, 0.19767000399363577, 0.23079259912048178, 0.22214742620111383, 0.2622807783746146, 0.2592472138360844, 0.2662448728734734, 0.26423958634123335, 0.2538377794520821, 0.25965050669856526, 0.25363589505962447, 0.2556902994929927, 0.24704520054877532, 0.19299429781681687, 0.20901467358367476, 0.19086425425566533, 0.19599804168872814, 0.20874628357743752, 0.15857034418433047, 0.16561196292988534, 0.2141964496848453, 0.21109369693662405, 0.2119719920007057, 0.17954596776355425, 0.19300016195149905, 0.2020506685759289, 0.20901293185167547, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1973592621967194, 0.19920817341158725, 0.19852235354358017, 0.18313190298365867, 0.18670139117208606, 0.18409750983017525, 0.20249856624736173, 0.18055667603302805, 0.1849675996388147, 0.5392356751634066, 0.19698661392769545, 0.15420569215564772, 0.2716377777047917, 0.20028052598441393, 0.19886997379428872, 0.5282336333741808, 0.17027871715979803, 0.5378481087138507, 0.48101276024393547, 0.15565137029904785, 0.2088858783485502, 0.4543468381131396, 0.16960544548177314, 0.20871933258328612, 0.10518741527466646, 0.10492025246060854, 0.4324438562604045, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.18372463169119468, 0.1791740405484994, 0.18199967015695562, 0.18008268279955542, 0.18083988783407845, 0.18274441759078364, 0.08946899715464529, 0.07988306382427868, 0.08793674074103541, 0.07914308839820461, 0.08833907879422953, 0.0847997666743664, 0.0919597389091954, 0.08571384236570267, 0.07809443410243644]}, "mutation_prompt": null}
{"id": "db7ed169-2c4e-45bf-a6a8-07bc713b1c16", "solution": "import numpy as np\n\nclass EnhancedImprovedQIPSO(EnhancedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay)\n        self.inertia_weight_decay = inertia_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n                            self.inertia_weight *= self.inertia_weight_decay  # Introduce dynamic inertia weight adjustment\n\n        return global_best", "name": "EnhancedImprovedQIPSO", "description": "Improve the exploration capability by adding a dynamic inertia weight adjustment mechanism based on the particle's performance.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45c2c5d6-d9a4-4bd3-a46f-bfa331fead00", "metadata": {"aucs": [0.40052570598683046, 0.36097111069000876, 0.3579485110286382, 0.35976874028918693, 0.37035034708574543, 0.37734003989316567, 0.35395632381150155, 0.35463034455067777, 0.3391796334695172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.08691078765402727, 0.1085593263600334, 0.09439815730888479, 0.09261119216656677, 0.09348719887410173, 0.10152211398477407, 0.1117435863111661, 0.12609104506243451, 0.1157925608892798, 0.08888111730227577, 0.08939927546128179, 0.09306267169627302, 0.0993087135505708, 0.10262595753090242, 0.09215490027522977, 0.0794586137280765, 0.10755528982476426, 0.10454058055352455, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.9878834449169077, 0.9863077675832157, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876242682874028, 0.23946902488718036, 0.227599640160841, 0.22829498532402304, 0.22948396839184437, 0.23449987476096135, 0.28383241689159733, 0.2505306921236893, 0.2681363515857874, 0.26668564845844356, 0.25149274745188277, 0.24572873101675552, 0.3470020863239188, 0.2534730519989521, 0.26710145353207104, 0.2480663430207729, 0.2654887439376743, 0.3113526314955747, 0.28493744975977164, 0.15346559977293983, 0.1422178199024947, 0.16121195136903665, 0.14358657064067903, 0.12418647211295886, 0.13543995439616863, 0.12451026505372886, 0.0957467245196556, 0.14232900407688154, 0.17519978812432857, 0.15807534482291052, 0.16421436727432936, 0.13138359625658835, 0.14521293098576848, 0.1395728028098543, 0.14723799654885128, 0.14529116267589015, 0.13171767133538137, 9.999999999998899e-05, 0.028927565017377255, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.02492080583520906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059307617871185325, 0.03356664278301047, 0.0842707502661797, 0.07694481454514934, 0.008735825374347028, 0.012808334682198441, 0.08328506266316493, 0.04427849308956644, 0.10096885372249764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05956729614573664, 0.06226532780475502, 0.08238376758337251, 0.07688369362092329, 0.07882039271095309, 0.055709107788088685, 0.07469803177816392, 0.062004816491835535, 0.06114589620611588, 0.3387072231502688, 0.35374415782224067, 0.3700350545251695, 0.3779193706951912, 0.33527067274918265, 0.37912050000404196, 0.3672429934754462, 0.3803169923638057, 0.3470911517924231, 0.09665941402298972, 0.09834574882760061, 0.10607127424554585, 0.12004860704212661, 0.11159287357939796, 0.09184322167801728, 0.11040953643218143, 0.08837161129134097, 0.10721366882397088, 0.18462863478314062, 0.20040501195173233, 0.20250040037070471, 0.24010650106463438, 0.21585528858679393, 0.20781586166038524, 0.19767397115097773, 0.23080381456126287, 0.22216851953660266, 0.2622807783746146, 0.2592587775707621, 0.26627018819382964, 0.26423958634123335, 0.2538406473103597, 0.2596648082049948, 0.25366063221882995, 0.25569662876369625, 0.24705954383563422, 0.1930026743296428, 0.20901467358367476, 0.19087017311789478, 0.1960014630221626, 0.20876623314442155, 0.15857179980574165, 0.1656203228305827, 0.21421936811074027, 0.2111275116837501, 0.2119719920007057, 0.17955648998485463, 0.19300016195149905, 0.2020506685759289, 0.20902711722615208, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1973802745420461, 0.19924907394880254, 0.19853371385127005, 0.1831419198123604, 0.18672086255504694, 0.1841165681534107, 0.20251122570862223, 0.18057774269118676, 0.18497130634562509, 0.5392357495221176, 0.1969991740391015, 0.1542060079892612, 0.2716377777047917, 0.20028649092460604, 0.19886997379428872, 0.5283600282242749, 0.17028467240458245, 0.5378838265823803, 0.48105932876672386, 0.1556515452809084, 0.20890487081871167, 0.4543998507598669, 0.16962165728683753, 0.20874643564806106, 0.1051880940880292, 0.10492025246060854, 0.4324579686130623, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1837314176478897, 0.1791778937447963, 0.18199967015695562, 0.18008268279955542, 0.18084016350316434, 0.18274441759078364, 0.0894705307363658, 0.07988929277091228, 0.08793678503977354, 0.07914375925033401, 0.08834359033207873, 0.08481143864609753, 0.09196643100144808, 0.08572851594799036, 0.0780993943513153]}, "mutation_prompt": null}
{"id": "c7803215-978d-4b9c-a3eb-c24615c9b17a", "solution": "import numpy as np\n\nclass EnhancedImprovedQIPSO(EnhancedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay)\n        self.inertia_weight_decay = inertia_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n                            self.inertia_weight *= self.inertia_weight_decay  # Introduce dynamic inertia weight adjustment\n\n        return global_best", "name": "EnhancedImprovedQIPSO", "description": "Improve the exploration capability by adding a dynamic inertia weight adjustment mechanism based on the particle's performance.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45c2c5d6-d9a4-4bd3-a46f-bfa331fead00", "metadata": {"aucs": [0.40052570598683046, 0.36097111069000876, 0.3579485110286382, 0.35976874028918693, 0.37035034708574543, 0.37734003989316567, 0.35395632381150155, 0.35463034455067777, 0.3391796334695172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.08691078765402727, 0.1085593263600334, 0.09439815730888479, 0.09261119216656677, 0.09348719887410173, 0.10152211398477407, 0.1117435863111661, 0.12609104506243451, 0.1157925608892798, 0.08888111730227577, 0.08939927546128179, 0.09306267169627302, 0.0993087135505708, 0.10262595753090242, 0.09215490027522977, 0.0794586137280765, 0.10755528982476426, 0.10454058055352455, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.9878834449169077, 0.9863077675832157, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876242682874028, 0.23946902488718036, 0.227599640160841, 0.22829498532402304, 0.22948396839184437, 0.23449987476096135, 0.28383241689159733, 0.2505306921236893, 0.2681363515857874, 0.26668564845844356, 0.25149274745188277, 0.24572873101675552, 0.3470020863239188, 0.2534730519989521, 0.26710145353207104, 0.2480663430207729, 0.2654887439376743, 0.3113526314955747, 0.28493744975977164, 0.15346559977293983, 0.1422178199024947, 0.16121195136903665, 0.14358657064067903, 0.12418647211295886, 0.13543995439616863, 0.12451026505372886, 0.0957467245196556, 0.14232900407688154, 0.17519978812432857, 0.15807534482291052, 0.16421436727432936, 0.13138359625658835, 0.14521293098576848, 0.1395728028098543, 0.14723799654885128, 0.14529116267589015, 0.13171767133538137, 9.999999999998899e-05, 0.028927565017377255, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.02492080583520906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059307617871185325, 0.03356664278301047, 0.0842707502661797, 0.07694481454514934, 0.008735825374347028, 0.012808334682198441, 0.08328506266316493, 0.04427849308956644, 0.10096885372249764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05956729614573664, 0.06226532780475502, 0.08238376758337251, 0.07688369362092329, 0.07882039271095309, 0.055709107788088685, 0.07469803177816392, 0.062004816491835535, 0.06114589620611588, 0.3387072231502688, 0.35374415782224067, 0.3700350545251695, 0.3779193706951912, 0.33527067274918265, 0.37912050000404196, 0.3672429934754462, 0.3803169923638057, 0.3470911517924231, 0.09665941402298972, 0.09834574882760061, 0.10607127424554585, 0.12004860704212661, 0.11159287357939796, 0.09184322167801728, 0.11040953643218143, 0.08837161129134097, 0.10721366882397088, 0.18462863478314062, 0.20040501195173233, 0.20250040037070471, 0.24010650106463438, 0.21585528858679393, 0.20781586166038524, 0.19767397115097773, 0.23080381456126287, 0.22216851953660266, 0.2622807783746146, 0.2592587775707621, 0.26627018819382964, 0.26423958634123335, 0.2538406473103597, 0.2596648082049948, 0.25366063221882995, 0.25569662876369625, 0.24705954383563422, 0.1930026743296428, 0.20901467358367476, 0.19087017311789478, 0.1960014630221626, 0.20876623314442155, 0.15857179980574165, 0.1656203228305827, 0.21421936811074027, 0.2111275116837501, 0.2119719920007057, 0.17955648998485463, 0.19300016195149905, 0.2020506685759289, 0.20902711722615208, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1973802745420461, 0.19924907394880254, 0.19853371385127005, 0.1831419198123604, 0.18672086255504694, 0.1841165681534107, 0.20251122570862223, 0.18057774269118676, 0.18497130634562509, 0.5392357495221176, 0.1969991740391015, 0.1542060079892612, 0.2716377777047917, 0.20028649092460604, 0.19886997379428872, 0.5283600282242749, 0.17028467240458245, 0.5378838265823803, 0.48105932876672386, 0.1556515452809084, 0.20890487081871167, 0.4543998507598669, 0.16962165728683753, 0.20874643564806106, 0.1051880940880292, 0.10492025246060854, 0.4324579686130623, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1837314176478897, 0.1791778937447963, 0.18199967015695562, 0.18008268279955542, 0.18084016350316434, 0.18274441759078364, 0.0894705307363658, 0.07988929277091228, 0.08793678503977354, 0.07914375925033401, 0.08834359033207873, 0.08481143864609753, 0.09196643100144808, 0.08572851594799036, 0.0780993943513153]}, "mutation_prompt": null}
{"id": "19692533-99fa-4bc7-8df6-b20f989f3117", "solution": "import numpy as np\n\nclass EnhancedImprovedQIPSO(EnhancedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay)\n        self.inertia_weight_decay = inertia_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n                            self.inertia_weight *= self.inertia_weight_decay  # Introduce dynamic inertia weight adjustment\n\n        return global_best", "name": "EnhancedImprovedQIPSO", "description": "Improve the exploration capability by adding a dynamic inertia weight adjustment mechanism based on the particle's performance.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45c2c5d6-d9a4-4bd3-a46f-bfa331fead00", "metadata": {"aucs": [0.40052570598683046, 0.36097111069000876, 0.3579485110286382, 0.35976874028918693, 0.37035034708574543, 0.37734003989316567, 0.35395632381150155, 0.35463034455067777, 0.3391796334695172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.08691078765402727, 0.1085593263600334, 0.09439815730888479, 0.09261119216656677, 0.09348719887410173, 0.10152211398477407, 0.1117435863111661, 0.12609104506243451, 0.1157925608892798, 0.08888111730227577, 0.08939927546128179, 0.09306267169627302, 0.0993087135505708, 0.10262595753090242, 0.09215490027522977, 0.0794586137280765, 0.10755528982476426, 0.10454058055352455, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.9878834449169077, 0.9863077675832157, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876242682874028, 0.23946902488718036, 0.227599640160841, 0.22829498532402304, 0.22948396839184437, 0.23449987476096135, 0.28383241689159733, 0.2505306921236893, 0.2681363515857874, 0.26668564845844356, 0.25149274745188277, 0.24572873101675552, 0.3470020863239188, 0.2534730519989521, 0.26710145353207104, 0.2480663430207729, 0.2654887439376743, 0.3113526314955747, 0.28493744975977164, 0.15346559977293983, 0.1422178199024947, 0.16121195136903665, 0.14358657064067903, 0.12418647211295886, 0.13543995439616863, 0.12451026505372886, 0.0957467245196556, 0.14232900407688154, 0.17519978812432857, 0.15807534482291052, 0.16421436727432936, 0.13138359625658835, 0.14521293098576848, 0.1395728028098543, 0.14723799654885128, 0.14529116267589015, 0.13171767133538137, 9.999999999998899e-05, 0.028927565017377255, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.02492080583520906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059307617871185325, 0.03356664278301047, 0.0842707502661797, 0.07694481454514934, 0.008735825374347028, 0.012808334682198441, 0.08328506266316493, 0.04427849308956644, 0.10096885372249764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05956729614573664, 0.06226532780475502, 0.08238376758337251, 0.07688369362092329, 0.07882039271095309, 0.055709107788088685, 0.07469803177816392, 0.062004816491835535, 0.06114589620611588, 0.3387072231502688, 0.35374415782224067, 0.3700350545251695, 0.3779193706951912, 0.33527067274918265, 0.37912050000404196, 0.3672429934754462, 0.3803169923638057, 0.3470911517924231, 0.09665941402298972, 0.09834574882760061, 0.10607127424554585, 0.12004860704212661, 0.11159287357939796, 0.09184322167801728, 0.11040953643218143, 0.08837161129134097, 0.10721366882397088, 0.18462863478314062, 0.20040501195173233, 0.20250040037070471, 0.24010650106463438, 0.21585528858679393, 0.20781586166038524, 0.19767397115097773, 0.23080381456126287, 0.22216851953660266, 0.2622807783746146, 0.2592587775707621, 0.26627018819382964, 0.26423958634123335, 0.2538406473103597, 0.2596648082049948, 0.25366063221882995, 0.25569662876369625, 0.24705954383563422, 0.1930026743296428, 0.20901467358367476, 0.19087017311789478, 0.1960014630221626, 0.20876623314442155, 0.15857179980574165, 0.1656203228305827, 0.21421936811074027, 0.2111275116837501, 0.2119719920007057, 0.17955648998485463, 0.19300016195149905, 0.2020506685759289, 0.20902711722615208, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1973802745420461, 0.19924907394880254, 0.19853371385127005, 0.1831419198123604, 0.18672086255504694, 0.1841165681534107, 0.20251122570862223, 0.18057774269118676, 0.18497130634562509, 0.5392357495221176, 0.1969991740391015, 0.1542060079892612, 0.2716377777047917, 0.20028649092460604, 0.19886997379428872, 0.5283600282242749, 0.17028467240458245, 0.5378838265823803, 0.48105932876672386, 0.1556515452809084, 0.20890487081871167, 0.4543998507598669, 0.16962165728683753, 0.20874643564806106, 0.1051880940880292, 0.10492025246060854, 0.4324579686130623, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1837314176478897, 0.1791778937447963, 0.18199967015695562, 0.18008268279955542, 0.18084016350316434, 0.18274441759078364, 0.0894705307363658, 0.07988929277091228, 0.08793678503977354, 0.07914375925033401, 0.08834359033207873, 0.08481143864609753, 0.09196643100144808, 0.08572851594799036, 0.0780993943513153]}, "mutation_prompt": null}
{"id": "ded59bd3-be69-4133-a33d-e2b21bdcc46e", "solution": "import numpy as np\n\nclass EnhancedImprovedQIPSO(EnhancedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay)\n        self.inertia_weight_decay = inertia_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n                            self.inertia_weight *= self.inertia_weight_decay  # Introduce dynamic inertia weight adjustment\n\n        return global_best", "name": "EnhancedImprovedQIPSO", "description": "Improve the exploration capability by adding a dynamic inertia weight adjustment mechanism based on the particle's performance.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45c2c5d6-d9a4-4bd3-a46f-bfa331fead00", "metadata": {"aucs": [0.40052570598683046, 0.36097111069000876, 0.3579485110286382, 0.35976874028918693, 0.37035034708574543, 0.37734003989316567, 0.35395632381150155, 0.35463034455067777, 0.3391796334695172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.08691078765402727, 0.1085593263600334, 0.09439815730888479, 0.09261119216656677, 0.09348719887410173, 0.10152211398477407, 0.1117435863111661, 0.12609104506243451, 0.1157925608892798, 0.08888111730227577, 0.08939927546128179, 0.09306267169627302, 0.0993087135505708, 0.10262595753090242, 0.09215490027522977, 0.0794586137280765, 0.10755528982476426, 0.10454058055352455, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.9878834449169077, 0.9863077675832157, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876242682874028, 0.23946902488718036, 0.227599640160841, 0.22829498532402304, 0.22948396839184437, 0.23449987476096135, 0.28383241689159733, 0.2505306921236893, 0.2681363515857874, 0.26668564845844356, 0.25149274745188277, 0.24572873101675552, 0.3470020863239188, 0.2534730519989521, 0.26710145353207104, 0.2480663430207729, 0.2654887439376743, 0.3113526314955747, 0.28493744975977164, 0.15346559977293983, 0.1422178199024947, 0.16121195136903665, 0.14358657064067903, 0.12418647211295886, 0.13543995439616863, 0.12451026505372886, 0.0957467245196556, 0.14232900407688154, 0.17519978812432857, 0.15807534482291052, 0.16421436727432936, 0.13138359625658835, 0.14521293098576848, 0.1395728028098543, 0.14723799654885128, 0.14529116267589015, 0.13171767133538137, 9.999999999998899e-05, 0.028927565017377255, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.02492080583520906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059307617871185325, 0.03356664278301047, 0.0842707502661797, 0.07694481454514934, 0.008735825374347028, 0.012808334682198441, 0.08328506266316493, 0.04427849308956644, 0.10096885372249764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05956729614573664, 0.06226532780475502, 0.08238376758337251, 0.07688369362092329, 0.07882039271095309, 0.055709107788088685, 0.07469803177816392, 0.062004816491835535, 0.06114589620611588, 0.3387072231502688, 0.35374415782224067, 0.3700350545251695, 0.3779193706951912, 0.33527067274918265, 0.37912050000404196, 0.3672429934754462, 0.3803169923638057, 0.3470911517924231, 0.09665941402298972, 0.09834574882760061, 0.10607127424554585, 0.12004860704212661, 0.11159287357939796, 0.09184322167801728, 0.11040953643218143, 0.08837161129134097, 0.10721366882397088, 0.18462863478314062, 0.20040501195173233, 0.20250040037070471, 0.24010650106463438, 0.21585528858679393, 0.20781586166038524, 0.19767397115097773, 0.23080381456126287, 0.22216851953660266, 0.2622807783746146, 0.2592587775707621, 0.26627018819382964, 0.26423958634123335, 0.2538406473103597, 0.2596648082049948, 0.25366063221882995, 0.25569662876369625, 0.24705954383563422, 0.1930026743296428, 0.20901467358367476, 0.19087017311789478, 0.1960014630221626, 0.20876623314442155, 0.15857179980574165, 0.1656203228305827, 0.21421936811074027, 0.2111275116837501, 0.2119719920007057, 0.17955648998485463, 0.19300016195149905, 0.2020506685759289, 0.20902711722615208, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1973802745420461, 0.19924907394880254, 0.19853371385127005, 0.1831419198123604, 0.18672086255504694, 0.1841165681534107, 0.20251122570862223, 0.18057774269118676, 0.18497130634562509, 0.5392357495221176, 0.1969991740391015, 0.1542060079892612, 0.2716377777047917, 0.20028649092460604, 0.19886997379428872, 0.5283600282242749, 0.17028467240458245, 0.5378838265823803, 0.48105932876672386, 0.1556515452809084, 0.20890487081871167, 0.4543998507598669, 0.16962165728683753, 0.20874643564806106, 0.1051880940880292, 0.10492025246060854, 0.4324579686130623, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1837314176478897, 0.1791778937447963, 0.18199967015695562, 0.18008268279955542, 0.18084016350316434, 0.18274441759078364, 0.0894705307363658, 0.07988929277091228, 0.08793678503977354, 0.07914375925033401, 0.08834359033207873, 0.08481143864609753, 0.09196643100144808, 0.08572851594799036, 0.0780993943513153]}, "mutation_prompt": null}
{"id": "1b1d34b6-80b1-47ba-b9e2-81b686eae1ad", "solution": "import numpy as np\n\nclass EnhancedImprovedQIPSO(EnhancedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay)\n        self.inertia_weight_decay = inertia_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n                            self.inertia_weight *= self.inertia_weight_decay  # Introduce dynamic inertia weight adjustment\n\n        return global_best", "name": "EnhancedImprovedQIPSO", "description": "Improve the exploration capability by adding a dynamic inertia weight adjustment mechanism based on the particle's performance.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45c2c5d6-d9a4-4bd3-a46f-bfa331fead00", "metadata": {"aucs": [0.40052570598683046, 0.36097111069000876, 0.3579485110286382, 0.35976874028918693, 0.37035034708574543, 0.37734003989316567, 0.35395632381150155, 0.35463034455067777, 0.3391796334695172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.08691078765402727, 0.1085593263600334, 0.09439815730888479, 0.09261119216656677, 0.09348719887410173, 0.10152211398477407, 0.1117435863111661, 0.12609104506243451, 0.1157925608892798, 0.08888111730227577, 0.08939927546128179, 0.09306267169627302, 0.0993087135505708, 0.10262595753090242, 0.09215490027522977, 0.0794586137280765, 0.10755528982476426, 0.10454058055352455, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.9878834449169077, 0.9863077675832157, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876242682874028, 0.23946902488718036, 0.227599640160841, 0.22829498532402304, 0.22948396839184437, 0.23449987476096135, 0.28383241689159733, 0.2505306921236893, 0.2681363515857874, 0.26668564845844356, 0.25149274745188277, 0.24572873101675552, 0.3470020863239188, 0.2534730519989521, 0.26710145353207104, 0.2480663430207729, 0.2654887439376743, 0.3113526314955747, 0.28493744975977164, 0.15346559977293983, 0.1422178199024947, 0.16121195136903665, 0.14358657064067903, 0.12418647211295886, 0.13543995439616863, 0.12451026505372886, 0.0957467245196556, 0.14232900407688154, 0.17519978812432857, 0.15807534482291052, 0.16421436727432936, 0.13138359625658835, 0.14521293098576848, 0.1395728028098543, 0.14723799654885128, 0.14529116267589015, 0.13171767133538137, 9.999999999998899e-05, 0.028927565017377255, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.02492080583520906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059307617871185325, 0.03356664278301047, 0.0842707502661797, 0.07694481454514934, 0.008735825374347028, 0.012808334682198441, 0.08328506266316493, 0.04427849308956644, 0.10096885372249764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05956729614573664, 0.06226532780475502, 0.08238376758337251, 0.07688369362092329, 0.07882039271095309, 0.055709107788088685, 0.07469803177816392, 0.062004816491835535, 0.06114589620611588, 0.3387072231502688, 0.35374415782224067, 0.3700350545251695, 0.3779193706951912, 0.33527067274918265, 0.37912050000404196, 0.3672429934754462, 0.3803169923638057, 0.3470911517924231, 0.09665941402298972, 0.09834574882760061, 0.10607127424554585, 0.12004860704212661, 0.11159287357939796, 0.09184322167801728, 0.11040953643218143, 0.08837161129134097, 0.10721366882397088, 0.18462863478314062, 0.20040501195173233, 0.20250040037070471, 0.24010650106463438, 0.21585528858679393, 0.20781586166038524, 0.19767397115097773, 0.23080381456126287, 0.22216851953660266, 0.2622807783746146, 0.2592587775707621, 0.26627018819382964, 0.26423958634123335, 0.2538406473103597, 0.2596648082049948, 0.25366063221882995, 0.25569662876369625, 0.24705954383563422, 0.1930026743296428, 0.20901467358367476, 0.19087017311789478, 0.1960014630221626, 0.20876623314442155, 0.15857179980574165, 0.1656203228305827, 0.21421936811074027, 0.2111275116837501, 0.2119719920007057, 0.17955648998485463, 0.19300016195149905, 0.2020506685759289, 0.20902711722615208, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1973802745420461, 0.19924907394880254, 0.19853371385127005, 0.1831419198123604, 0.18672086255504694, 0.1841165681534107, 0.20251122570862223, 0.18057774269118676, 0.18497130634562509, 0.5392357495221176, 0.1969991740391015, 0.1542060079892612, 0.2716377777047917, 0.20028649092460604, 0.19886997379428872, 0.5283600282242749, 0.17028467240458245, 0.5378838265823803, 0.48105932876672386, 0.1556515452809084, 0.20890487081871167, 0.4543998507598669, 0.16962165728683753, 0.20874643564806106, 0.1051880940880292, 0.10492025246060854, 0.4324579686130623, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1837314176478897, 0.1791778937447963, 0.18199967015695562, 0.18008268279955542, 0.18084016350316434, 0.18274441759078364, 0.0894705307363658, 0.07988929277091228, 0.08793678503977354, 0.07914375925033401, 0.08834359033207873, 0.08481143864609753, 0.09196643100144808, 0.08572851594799036, 0.0780993943513153]}, "mutation_prompt": null}
{"id": "bd23c3bd-19ab-45c0-b73a-b40210d840c5", "solution": "import numpy as np\n\nclass EnhancedImprovedQIPSO(EnhancedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, diversity_weight=0.1):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay)\n        self.inertia_weight_decay = inertia_weight_decay\n        self.diversity_weight = diversity_weight\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n        population_diversity = np.mean(np.std(particles, axis=0))\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < self.diversity_weight:\n                            self.cognitive_weight += np.random.normal(0, 0.1)  # Introduce dynamic cognitive weight adjustment based on diversity\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment based on diversity\n                            self.inertia_weight *= self.inertia_weight_decay  # Introduce dynamic inertia weight adjustment based on diversity\n\n        return global_best", "name": "EnhancedImprovedQIPSO", "description": "Enhance the exploration capability by incorporating dynamic parameter adaptation based on population diversity.", "configspace": "", "generation": 70, "fitness": 0.1982732036811028, "feedback": "The algorithm EnhancedImprovedQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "45c2c5d6-d9a4-4bd3-a46f-bfa331fead00", "metadata": {"aucs": [0.40052570598683046, 0.34163994866297476, 0.3755787622404637, 0.356642748481791, 0.3422116967508462, 0.35395360929307584, 0.3825463270261391, 0.3718114333993129, 0.36884506790704286, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.02034440958888062, 9.999999999998899e-05, 0.07501292090421796, 0.1152191256992483, 0.10176349747989755, 0.10117378598272864, 0.06706942297099472, 0.0939484644931532, 0.1117435863111661, 0.0985890003177512, 0.12309088691348002, 0.08888111730227577, 0.09048271119586593, 0.07143730748755661, 0.1070787520112142, 0.07492655135833415, 0.09319905502612491, 0.0794586137280765, 0.09007618323654665, 0.08721189562663767, 0.9914233632670114, 0.9918615146994034, 0.9921735128125725, 0.988848507919891, 0.9884557784168471, 0.9809138158006665, 0.9920036269536482, 0.9901010254216627, 0.9900094745886338, 0.22845466351521027, 0.2516806190533508, 0.22382076669936057, 0.22181348783133958, 0.23449987476096135, 0.24446507626617986, 0.22722368622513378, 0.2573146029052924, 0.24860642324279625, 0.2804700757896539, 0.24572873101675552, 0.29728148455049463, 0.29522922360597637, 0.24947012603426488, 0.2357023469418441, 0.2285775241041612, 0.2698640602871063, 0.26334198458250635, 0.15346559977293983, 0.13961193429794916, 0.13182270899694104, 0.1466579432274464, 0.13836508405565295, 0.13894564156560807, 0.12451026505372886, 0.10779996657618307, 0.16265015447860154, 0.11835923292191042, 0.14121118793890652, 0.1272760588143088, 0.13138359625658835, 0.10719452784133432, 0.14342762064576475, 0.14723799654885128, 0.015994444473782954, 0.1356318071562097, 9.999999999998899e-05, 9.999999999998899e-05, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.016161277310436373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059307617871185325, 0.02637589132041862, 0.0928696876651266, 0.09260623985907457, 0.008686375097159527, 0.011599294590644016, 0.08781514065250906, 0.04427849308956644, 0.09067460806515937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05616177444778592, 0.04360236131437867, 0.07211490576855739, 0.07688369362092329, 0.07558183534739238, 0.080168326435762, 0.07469803177816392, 0.060984361941309406, 0.06232920761442162, 0.3565782925400104, 0.3658144141378492, 0.37089617475027203, 0.3574759757657249, 0.33527067274918265, 0.37912050000404196, 0.35698245078613766, 0.3481347322184215, 0.3470911517924231, 0.09665941402298972, 0.11843185170289128, 0.10607127424554585, 0.09355483584918223, 0.10143501686697787, 0.09184322167801728, 0.10608137562136877, 0.09698069560764311, 0.10721366882397088, 0.23897930682764623, 0.20040501195173233, 0.1993676528354995, 0.23006547859884852, 0.21585528858679393, 0.16483587120157683, 0.27432563225148665, 0.24115446049247247, 0.21155045836218067, 0.2622807783746146, 0.2662333323814635, 0.2655375437911547, 0.26423958634123335, 0.24670615703453724, 0.25555689625616484, 0.2594734709011486, 0.261911494788595, 0.25373556243336415, 0.18373858724669867, 0.20901467358367476, 0.1796893746976599, 0.18839124472212543, 0.18834237331515302, 0.17129430102420318, 0.1708744458425825, 0.21473964589055716, 0.20487355261291762, 0.2119719920007057, 0.17870618108042635, 0.19300016195149905, 0.2020506685759289, 0.18100725517854976, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.18001037112516916, 0.19456235122253251, 0.21144017806832838, 0.19778833515078287, 0.18265412990134533, 0.20250741054739896, 0.18436649220287016, 0.18177031346075867, 0.17162747493895114, 0.5405575507571612, 0.19766188532991813, 0.15387715032863125, 0.2716377777047917, 0.1985618622031674, 0.19886997379428872, 0.2973044070196106, 0.170187779913883, 0.49481793625737036, 0.4196657671030515, 0.15587724975313466, 0.07292089221059428, 0.38380584614592483, 0.42963933364851237, 0.2111595256778933, 0.10503153738709203, 0.10492025246060854, 0.38663996671716894, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.20315390900758634, 0.18165506104259932, 0.18199967015695562, 0.18008268279955542, 0.1861468123703035, 0.18274441759078364, 0.09180331199911307, 0.09379034091445826, 0.0928164021362492, 0.08720462847970722, 0.08314921260257346, 0.09781012056096938, 0.0951935833678903, 0.08932778291219123, 0.08000346542232073]}, "mutation_prompt": null}
{"id": "843e9a3e-6733-4f4f-be56-4c547128bdcb", "solution": "import numpy as np\n\nclass EnhancedImprovedQIPSO(EnhancedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay)\n        self.inertia_weight_decay = inertia_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n                            self.inertia_weight *= self.inertia_weight_decay  # Introduce dynamic inertia weight adjustment\n\n        return global_best", "name": "EnhancedImprovedQIPSO", "description": "Improve the exploration capability by adding a dynamic inertia weight adjustment mechanism based on the particle's performance.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45c2c5d6-d9a4-4bd3-a46f-bfa331fead00", "metadata": {"aucs": [0.40052570598683046, 0.36097111069000876, 0.3579485110286382, 0.35976874028918693, 0.37035034708574543, 0.37734003989316567, 0.35395632381150155, 0.35463034455067777, 0.3391796334695172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.08691078765402727, 0.1085593263600334, 0.09439815730888479, 0.09261119216656677, 0.09348719887410173, 0.10152211398477407, 0.1117435863111661, 0.12609104506243451, 0.1157925608892798, 0.08888111730227577, 0.08939927546128179, 0.09306267169627302, 0.0993087135505708, 0.10262595753090242, 0.09215490027522977, 0.0794586137280765, 0.10755528982476426, 0.10454058055352455, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.9878834449169077, 0.9863077675832157, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876242682874028, 0.23946902488718036, 0.227599640160841, 0.22829498532402304, 0.22948396839184437, 0.23449987476096135, 0.28383241689159733, 0.2505306921236893, 0.2681363515857874, 0.26668564845844356, 0.25149274745188277, 0.24572873101675552, 0.3470020863239188, 0.2534730519989521, 0.26710145353207104, 0.2480663430207729, 0.2654887439376743, 0.3113526314955747, 0.28493744975977164, 0.15346559977293983, 0.1422178199024947, 0.16121195136903665, 0.14358657064067903, 0.12418647211295886, 0.13543995439616863, 0.12451026505372886, 0.0957467245196556, 0.14232900407688154, 0.17519978812432857, 0.15807534482291052, 0.16421436727432936, 0.13138359625658835, 0.14521293098576848, 0.1395728028098543, 0.14723799654885128, 0.14529116267589015, 0.13171767133538137, 9.999999999998899e-05, 0.028927565017377255, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.02492080583520906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059307617871185325, 0.03356664278301047, 0.0842707502661797, 0.07694481454514934, 0.008735825374347028, 0.012808334682198441, 0.08328506266316493, 0.04427849308956644, 0.10096885372249764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05956729614573664, 0.06226532780475502, 0.08238376758337251, 0.07688369362092329, 0.07882039271095309, 0.055709107788088685, 0.07469803177816392, 0.062004816491835535, 0.06114589620611588, 0.3387072231502688, 0.35374415782224067, 0.3700350545251695, 0.3779193706951912, 0.33527067274918265, 0.37912050000404196, 0.3672429934754462, 0.3803169923638057, 0.3470911517924231, 0.09665941402298972, 0.09834574882760061, 0.10607127424554585, 0.12004860704212661, 0.11159287357939796, 0.09184322167801728, 0.11040953643218143, 0.08837161129134097, 0.10721366882397088, 0.18462863478314062, 0.20040501195173233, 0.20250040037070471, 0.24010650106463438, 0.21585528858679393, 0.20781586166038524, 0.19767397115097773, 0.23080381456126287, 0.22216851953660266, 0.2622807783746146, 0.2592587775707621, 0.26627018819382964, 0.26423958634123335, 0.2538406473103597, 0.2596648082049948, 0.25366063221882995, 0.25569662876369625, 0.24705954383563422, 0.1930026743296428, 0.20901467358367476, 0.19087017311789478, 0.1960014630221626, 0.20876623314442155, 0.15857179980574165, 0.1656203228305827, 0.21421936811074027, 0.2111275116837501, 0.2119719920007057, 0.17955648998485463, 0.19300016195149905, 0.2020506685759289, 0.20902711722615208, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1973802745420461, 0.19924907394880254, 0.19853371385127005, 0.1831419198123604, 0.18672086255504694, 0.1841165681534107, 0.20251122570862223, 0.18057774269118676, 0.18497130634562509, 0.5392357495221176, 0.1969991740391015, 0.1542060079892612, 0.2716377777047917, 0.20028649092460604, 0.19886997379428872, 0.5283600282242749, 0.17028467240458245, 0.5378838265823803, 0.48105932876672386, 0.1556515452809084, 0.20890487081871167, 0.4543998507598669, 0.16962165728683753, 0.20874643564806106, 0.1051880940880292, 0.10492025246060854, 0.4324579686130623, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1837314176478897, 0.1791778937447963, 0.18199967015695562, 0.18008268279955542, 0.18084016350316434, 0.18274441759078364, 0.0894705307363658, 0.07988929277091228, 0.08793678503977354, 0.07914375925033401, 0.08834359033207873, 0.08481143864609753, 0.09196643100144808, 0.08572851594799036, 0.0780993943513153]}, "mutation_prompt": null}
{"id": "3bddd169-2b52-4300-94d0-3059f0adeb91", "solution": "import numpy as np\n\nclass EnhancedImprovedQIPSO(EnhancedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay)\n        self.inertia_weight_decay = inertia_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n                            self.inertia_weight *= self.inertia_weight_decay  # Introduce dynamic inertia weight adjustment\n\n        return global_best", "name": "EnhancedImprovedQIPSO", "description": "Improve the exploration capability by adding a dynamic inertia weight adjustment mechanism based on the particle's performance.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45c2c5d6-d9a4-4bd3-a46f-bfa331fead00", "metadata": {"aucs": [0.40052570598683046, 0.36097111069000876, 0.3579485110286382, 0.35976874028918693, 0.37035034708574543, 0.37734003989316567, 0.35395632381150155, 0.35463034455067777, 0.3391796334695172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.08691078765402727, 0.1085593263600334, 0.09439815730888479, 0.09261119216656677, 0.09348719887410173, 0.10152211398477407, 0.1117435863111661, 0.12609104506243451, 0.1157925608892798, 0.08888111730227577, 0.08939927546128179, 0.09306267169627302, 0.0993087135505708, 0.10262595753090242, 0.09215490027522977, 0.0794586137280765, 0.10755528982476426, 0.10454058055352455, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.9878834449169077, 0.9863077675832157, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876242682874028, 0.23946902488718036, 0.227599640160841, 0.22829498532402304, 0.22948396839184437, 0.23449987476096135, 0.28383241689159733, 0.2505306921236893, 0.2681363515857874, 0.26668564845844356, 0.25149274745188277, 0.24572873101675552, 0.3470020863239188, 0.2534730519989521, 0.26710145353207104, 0.2480663430207729, 0.2654887439376743, 0.3113526314955747, 0.28493744975977164, 0.15346559977293983, 0.1422178199024947, 0.16121195136903665, 0.14358657064067903, 0.12418647211295886, 0.13543995439616863, 0.12451026505372886, 0.0957467245196556, 0.14232900407688154, 0.17519978812432857, 0.15807534482291052, 0.16421436727432936, 0.13138359625658835, 0.14521293098576848, 0.1395728028098543, 0.14723799654885128, 0.14529116267589015, 0.13171767133538137, 9.999999999998899e-05, 0.028927565017377255, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.02492080583520906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059307617871185325, 0.03356664278301047, 0.0842707502661797, 0.07694481454514934, 0.008735825374347028, 0.012808334682198441, 0.08328506266316493, 0.04427849308956644, 0.10096885372249764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05956729614573664, 0.06226532780475502, 0.08238376758337251, 0.07688369362092329, 0.07882039271095309, 0.055709107788088685, 0.07469803177816392, 0.062004816491835535, 0.06114589620611588, 0.3387072231502688, 0.35374415782224067, 0.3700350545251695, 0.3779193706951912, 0.33527067274918265, 0.37912050000404196, 0.3672429934754462, 0.3803169923638057, 0.3470911517924231, 0.09665941402298972, 0.09834574882760061, 0.10607127424554585, 0.12004860704212661, 0.11159287357939796, 0.09184322167801728, 0.11040953643218143, 0.08837161129134097, 0.10721366882397088, 0.18462863478314062, 0.20040501195173233, 0.20250040037070471, 0.24010650106463438, 0.21585528858679393, 0.20781586166038524, 0.19767397115097773, 0.23080381456126287, 0.22216851953660266, 0.2622807783746146, 0.2592587775707621, 0.26627018819382964, 0.26423958634123335, 0.2538406473103597, 0.2596648082049948, 0.25366063221882995, 0.25569662876369625, 0.24705954383563422, 0.1930026743296428, 0.20901467358367476, 0.19087017311789478, 0.1960014630221626, 0.20876623314442155, 0.15857179980574165, 0.1656203228305827, 0.21421936811074027, 0.2111275116837501, 0.2119719920007057, 0.17955648998485463, 0.19300016195149905, 0.2020506685759289, 0.20902711722615208, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1973802745420461, 0.19924907394880254, 0.19853371385127005, 0.1831419198123604, 0.18672086255504694, 0.1841165681534107, 0.20251122570862223, 0.18057774269118676, 0.18497130634562509, 0.5392357495221176, 0.1969991740391015, 0.1542060079892612, 0.2716377777047917, 0.20028649092460604, 0.19886997379428872, 0.5283600282242749, 0.17028467240458245, 0.5378838265823803, 0.48105932876672386, 0.1556515452809084, 0.20890487081871167, 0.4543998507598669, 0.16962165728683753, 0.20874643564806106, 0.1051880940880292, 0.10492025246060854, 0.4324579686130623, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1837314176478897, 0.1791778937447963, 0.18199967015695562, 0.18008268279955542, 0.18084016350316434, 0.18274441759078364, 0.0894705307363658, 0.07988929277091228, 0.08793678503977354, 0.07914375925033401, 0.08834359033207873, 0.08481143864609753, 0.09196643100144808, 0.08572851594799036, 0.0780993943513153]}, "mutation_prompt": null}
{"id": "ddd4d24f-49d8-4886-942b-be342e4f79ca", "solution": "import numpy as np\n\nclass EnhancedImprovedQIPSO(EnhancedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay)\n        self.inertia_weight_decay = inertia_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n                            self.inertia_weight *= self.inertia_weight_decay  # Introduce dynamic inertia weight adjustment\n\n        return global_best", "name": "EnhancedImprovedQIPSO", "description": "Improve the exploration capability by adding a dynamic inertia weight adjustment mechanism based on the particle's performance.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45c2c5d6-d9a4-4bd3-a46f-bfa331fead00", "metadata": {"aucs": [0.40052570598683046, 0.36097111069000876, 0.3579485110286382, 0.35976874028918693, 0.37035034708574543, 0.37734003989316567, 0.35395632381150155, 0.35463034455067777, 0.3391796334695172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.08691078765402727, 0.1085593263600334, 0.09439815730888479, 0.09261119216656677, 0.09348719887410173, 0.10152211398477407, 0.1117435863111661, 0.12609104506243451, 0.1157925608892798, 0.08888111730227577, 0.08939927546128179, 0.09306267169627302, 0.0993087135505708, 0.10262595753090242, 0.09215490027522977, 0.0794586137280765, 0.10755528982476426, 0.10454058055352455, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.9878834449169077, 0.9863077675832157, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876242682874028, 0.23946902488718036, 0.227599640160841, 0.22829498532402304, 0.22948396839184437, 0.23449987476096135, 0.28383241689159733, 0.2505306921236893, 0.2681363515857874, 0.26668564845844356, 0.25149274745188277, 0.24572873101675552, 0.3470020863239188, 0.2534730519989521, 0.26710145353207104, 0.2480663430207729, 0.2654887439376743, 0.3113526314955747, 0.28493744975977164, 0.15346559977293983, 0.1422178199024947, 0.16121195136903665, 0.14358657064067903, 0.12418647211295886, 0.13543995439616863, 0.12451026505372886, 0.0957467245196556, 0.14232900407688154, 0.17519978812432857, 0.15807534482291052, 0.16421436727432936, 0.13138359625658835, 0.14521293098576848, 0.1395728028098543, 0.14723799654885128, 0.14529116267589015, 0.13171767133538137, 9.999999999998899e-05, 0.028927565017377255, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.02492080583520906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059307617871185325, 0.03356664278301047, 0.0842707502661797, 0.07694481454514934, 0.008735825374347028, 0.012808334682198441, 0.08328506266316493, 0.04427849308956644, 0.10096885372249764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05956729614573664, 0.06226532780475502, 0.08238376758337251, 0.07688369362092329, 0.07882039271095309, 0.055709107788088685, 0.07469803177816392, 0.062004816491835535, 0.06114589620611588, 0.3387072231502688, 0.35374415782224067, 0.3700350545251695, 0.3779193706951912, 0.33527067274918265, 0.37912050000404196, 0.3672429934754462, 0.3803169923638057, 0.3470911517924231, 0.09665941402298972, 0.09834574882760061, 0.10607127424554585, 0.12004860704212661, 0.11159287357939796, 0.09184322167801728, 0.11040953643218143, 0.08837161129134097, 0.10721366882397088, 0.18462863478314062, 0.20040501195173233, 0.20250040037070471, 0.24010650106463438, 0.21585528858679393, 0.20781586166038524, 0.19767397115097773, 0.23080381456126287, 0.22216851953660266, 0.2622807783746146, 0.2592587775707621, 0.26627018819382964, 0.26423958634123335, 0.2538406473103597, 0.2596648082049948, 0.25366063221882995, 0.25569662876369625, 0.24705954383563422, 0.1930026743296428, 0.20901467358367476, 0.19087017311789478, 0.1960014630221626, 0.20876623314442155, 0.15857179980574165, 0.1656203228305827, 0.21421936811074027, 0.2111275116837501, 0.2119719920007057, 0.17955648998485463, 0.19300016195149905, 0.2020506685759289, 0.20902711722615208, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1973802745420461, 0.19924907394880254, 0.19853371385127005, 0.1831419198123604, 0.18672086255504694, 0.1841165681534107, 0.20251122570862223, 0.18057774269118676, 0.18497130634562509, 0.5392357495221176, 0.1969991740391015, 0.1542060079892612, 0.2716377777047917, 0.20028649092460604, 0.19886997379428872, 0.5283600282242749, 0.17028467240458245, 0.5378838265823803, 0.48105932876672386, 0.1556515452809084, 0.20890487081871167, 0.4543998507598669, 0.16962165728683753, 0.20874643564806106, 0.1051880940880292, 0.10492025246060854, 0.4324579686130623, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1837314176478897, 0.1791778937447963, 0.18199967015695562, 0.18008268279955542, 0.18084016350316434, 0.18274441759078364, 0.0894705307363658, 0.07988929277091228, 0.08793678503977354, 0.07914375925033401, 0.08834359033207873, 0.08481143864609753, 0.09196643100144808, 0.08572851594799036, 0.0780993943513153]}, "mutation_prompt": null}
{"id": "ba723041-74b2-4a79-b534-c046cb217fd0", "solution": "import numpy as np\n\nclass EnhancedImprovedQIPSO(EnhancedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay)\n        self.inertia_weight_decay = inertia_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic social weight adjustment\n                            self.inertia_weight *= self.inertia_weight_decay  # Introduce dynamic inertia weight adjustment\n\n        return global_best", "name": "EnhancedImprovedQIPSO", "description": "Improve the exploration capability by adding a dynamic inertia weight adjustment mechanism based on the particle's performance.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "45c2c5d6-d9a4-4bd3-a46f-bfa331fead00", "metadata": {"aucs": [0.40052570598683046, 0.36097111069000876, 0.3579485110286382, 0.35976874028918693, 0.37035034708574543, 0.37734003989316567, 0.35395632381150155, 0.35463034455067777, 0.3391796334695172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 9.999999999998899e-05, 9.999999999998899e-05, 0.08691078765402727, 0.1085593263600334, 0.09439815730888479, 0.09261119216656677, 0.09348719887410173, 0.10152211398477407, 0.1117435863111661, 0.12609104506243451, 0.1157925608892798, 0.08888111730227577, 0.08939927546128179, 0.09306267169627302, 0.0993087135505708, 0.10262595753090242, 0.09215490027522977, 0.0794586137280765, 0.10755528982476426, 0.10454058055352455, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.9878834449169077, 0.9863077675832157, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876242682874028, 0.23946902488718036, 0.227599640160841, 0.22829498532402304, 0.22948396839184437, 0.23449987476096135, 0.28383241689159733, 0.2505306921236893, 0.2681363515857874, 0.26668564845844356, 0.25149274745188277, 0.24572873101675552, 0.3470020863239188, 0.2534730519989521, 0.26710145353207104, 0.2480663430207729, 0.2654887439376743, 0.3113526314955747, 0.28493744975977164, 0.15346559977293983, 0.1422178199024947, 0.16121195136903665, 0.14358657064067903, 0.12418647211295886, 0.13543995439616863, 0.12451026505372886, 0.0957467245196556, 0.14232900407688154, 0.17519978812432857, 0.15807534482291052, 0.16421436727432936, 0.13138359625658835, 0.14521293098576848, 0.1395728028098543, 0.14723799654885128, 0.14529116267589015, 0.13171767133538137, 9.999999999998899e-05, 0.028927565017377255, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.02492080583520906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059307617871185325, 0.03356664278301047, 0.0842707502661797, 0.07694481454514934, 0.008735825374347028, 0.012808334682198441, 0.08328506266316493, 0.04427849308956644, 0.10096885372249764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05956729614573664, 0.06226532780475502, 0.08238376758337251, 0.07688369362092329, 0.07882039271095309, 0.055709107788088685, 0.07469803177816392, 0.062004816491835535, 0.06114589620611588, 0.3387072231502688, 0.35374415782224067, 0.3700350545251695, 0.3779193706951912, 0.33527067274918265, 0.37912050000404196, 0.3672429934754462, 0.3803169923638057, 0.3470911517924231, 0.09665941402298972, 0.09834574882760061, 0.10607127424554585, 0.12004860704212661, 0.11159287357939796, 0.09184322167801728, 0.11040953643218143, 0.08837161129134097, 0.10721366882397088, 0.18462863478314062, 0.20040501195173233, 0.20250040037070471, 0.24010650106463438, 0.21585528858679393, 0.20781586166038524, 0.19767397115097773, 0.23080381456126287, 0.22216851953660266, 0.2622807783746146, 0.2592587775707621, 0.26627018819382964, 0.26423958634123335, 0.2538406473103597, 0.2596648082049948, 0.25366063221882995, 0.25569662876369625, 0.24705954383563422, 0.1930026743296428, 0.20901467358367476, 0.19087017311789478, 0.1960014630221626, 0.20876623314442155, 0.15857179980574165, 0.1656203228305827, 0.21421936811074027, 0.2111275116837501, 0.2119719920007057, 0.17955648998485463, 0.19300016195149905, 0.2020506685759289, 0.20902711722615208, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1973802745420461, 0.19924907394880254, 0.19853371385127005, 0.1831419198123604, 0.18672086255504694, 0.1841165681534107, 0.20251122570862223, 0.18057774269118676, 0.18497130634562509, 0.5392357495221176, 0.1969991740391015, 0.1542060079892612, 0.2716377777047917, 0.20028649092460604, 0.19886997379428872, 0.5283600282242749, 0.17028467240458245, 0.5378838265823803, 0.48105932876672386, 0.1556515452809084, 0.20890487081871167, 0.4543998507598669, 0.16962165728683753, 0.20874643564806106, 0.1051880940880292, 0.10492025246060854, 0.4324579686130623, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1837314176478897, 0.1791778937447963, 0.18199967015695562, 0.18008268279955542, 0.18084016350316434, 0.18274441759078364, 0.0894705307363658, 0.07988929277091228, 0.08793678503977354, 0.07914375925033401, 0.08834359033207873, 0.08481143864609753, 0.09196643100144808, 0.08572851594799036, 0.0780993943513153]}, "mutation_prompt": null}
{"id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "solution": "import numpy as np\n\nclass AdaptiveCognitiveWeightQIPSO(EnhancedImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, cognitive_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay)\n        self.cognitive_weight_decay = cognitive_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay  # Introduce adaptive cognitive weight adjustment based on performance\n\n        return global_best", "name": "AdaptiveCognitiveWeightQIPSO", "description": "Improve exploration by incorporating a novel adaptive mechanism to adjust the cognitive weight based on individual particle performance.", "configspace": "", "generation": 75, "fitness": 0.20284243488811105, "feedback": "The algorithm AdaptiveCognitiveWeightQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "45c2c5d6-d9a4-4bd3-a46f-bfa331fead00", "metadata": {"aucs": [0.40052570598683046, 0.3635689218873116, 0.3696925131814689, 0.3593374062214625, 0.3641113789930517, 0.36584703561553455, 0.3680985535142539, 0.36158412220662794, 0.3632234210461318, 9.999999999998899e-05, 0.0013050465738250194, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003838722993740329, 9.999999999998899e-05, 0.0912080008598305, 0.09753435619205886, 0.09009078309795038, 0.08942776140367337, 0.1400803969083445, 0.09213859004361968, 0.1117435863111661, 0.10388509815965263, 0.11580006465641568, 0.08888111730227577, 0.10150110380201927, 0.09063284462639654, 0.10772546664316074, 0.0932747408261525, 0.09376497663357042, 0.0794586137280765, 0.07237252899613866, 0.11435691935094561, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.987881597686031, 0.9868989440722035, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876225050961304, 0.2771267796880197, 0.24557874704774485, 0.23788557685073697, 0.2295565490700021, 0.23449987476096135, 0.25872284807789014, 0.23743643468444675, 0.2646448754066678, 0.2451291339257734, 0.29986636187978843, 0.2538649527805076, 0.3042692090121989, 0.25839843512321303, 0.2528157147706027, 0.24907270222422617, 0.23650550743311782, 0.33073811263710495, 0.33862703073067946, 0.15346559977293983, 0.15833799056609643, 0.13470563773215527, 0.12227443085505985, 0.11679840952347853, 0.14462506128372987, 0.12451026505372886, 0.15601130909497518, 0.13851306225496718, 0.1499502969320876, 0.1437370222782971, 0.14832285359924313, 0.13138359625658835, 0.14072274264958828, 0.14354973437039786, 0.14723799654885128, 0.14051028808929855, 0.1301308379281112, 9.999999999998899e-05, 0.00620091089050534, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.012613735053924047, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021947000496680413, 0.059307617871185325, 0.027976382934820188, 0.08405308668337963, 0.08937587503570354, 0.008686375097159527, 0.014148999200052303, 0.10171694161217126, 0.04427849308956644, 0.09726520321999776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061323362462292974, 0.031633009103468446, 0.08984798887473333, 0.07688369362092329, 0.08631636094209627, 0.07947523398036083, 0.07469803177816392, 0.08618024481296582, 0.06602059764246682, 0.4104924861934157, 0.33937179380229243, 0.3700350545251695, 0.35203120302487045, 0.33527067274918265, 0.37912050000404196, 0.3661816189075343, 0.3757028763652934, 0.3470911517924231, 0.09665941402298972, 0.1000895891065049, 0.10607127424554585, 0.10648017656804709, 0.11275175105260093, 0.09184322167801728, 0.10269098081558792, 0.11533655664920295, 0.10721366882397088, 0.13806499806007266, 0.20040501195173233, 0.19948949410082462, 0.24260481813641233, 0.21585528858679393, 0.20632388586936035, 0.20966501113909308, 0.2332598249235025, 0.22651184046867312, 0.2622807783746146, 0.24922455452995085, 0.25606333104554113, 0.26423958634123335, 0.24578150161171586, 0.2660502607719436, 0.25646446900054154, 0.2647842431678208, 0.2782121756213153, 0.19159767032949393, 0.20901467358367476, 0.18187336280950472, 0.19297279555936975, 0.20693931922048714, 0.17417051505165837, 0.18433071936913492, 0.19753752929680446, 0.1778541778670949, 0.2119719920007057, 0.18608846146634594, 0.19300016195149905, 0.2020506685759289, 0.20161888363775238, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1905209893546752, 0.20879524452090148, 0.18854991468070537, 0.21257680158239234, 0.17601686267597905, 0.19631790371983548, 0.19508774886332825, 0.20929520206480834, 0.1739777150581271, 0.538872507219367, 0.19813847871029056, 0.1542942838476683, 0.2716377777047917, 0.20014906252793363, 0.19886997379428872, 0.2901325542201686, 0.17035826300691004, 0.49612074800833883, 0.45663795931922835, 0.15591907025611074, 0.2104652009487118, 0.4718135275452623, 0.1697204255361876, 0.5149281205622993, 0.10495207351750668, 0.10492025246060854, 0.41105830049903713, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1808295937801222, 0.18263205346989797, 0.18199967015695562, 0.18008268279955542, 0.1826910774826196, 0.18274441759078364, 0.09012463989466013, 0.09326532502151863, 0.09026291310001766, 0.07891370314408852, 0.08037210833555053, 0.09016635781501825, 0.09759343356782424, 0.0877656436182962, 0.09064137963990637]}, "mutation_prompt": null}
{"id": "bf465fe5-f14c-4264-957b-2a2b0462c6f3", "solution": "import numpy as np\n\nclass AdaptiveCognitiveWeightQIPSO(EnhancedImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, cognitive_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay)\n        self.cognitive_weight_decay = cognitive_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay  # Introduce adaptive cognitive weight adjustment based on performance\n\n        return global_best", "name": "AdaptiveCognitiveWeightQIPSO", "description": "Improve exploration by incorporating a novel adaptive mechanism to adjust the cognitive weight based on individual particle performance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {"aucs": [0.40052570598683046, 0.3635689218873116, 0.3696925131814689, 0.3593374062214625, 0.3641113789930517, 0.36584703561553455, 0.3680985535142539, 0.36158412220662794, 0.3632234210461318, 9.999999999998899e-05, 0.0013050465738250194, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003838722993740329, 9.999999999998899e-05, 0.0912080008598305, 0.09753435619205886, 0.09009078309795038, 0.08942776140367337, 0.1400803969083445, 0.09213859004361968, 0.1117435863111661, 0.10388509815965263, 0.11580006465641568, 0.08888111730227577, 0.10150110380201927, 0.09063284462639654, 0.10772546664316074, 0.0932747408261525, 0.09376497663357042, 0.0794586137280765, 0.07237252899613866, 0.11435691935094561, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.987881597686031, 0.9868989440722035, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876225050961304, 0.2771267796880197, 0.24557874704774485, 0.23788557685073697, 0.2295565490700021, 0.23449987476096135, 0.25872284807789014, 0.23743643468444675, 0.2646448754066678, 0.2451291339257734, 0.29986636187978843, 0.2538649527805076, 0.3042692090121989, 0.25839843512321303, 0.2528157147706027, 0.24907270222422617, 0.23650550743311782, 0.33073811263710495, 0.33862703073067946, 0.15346559977293983, 0.15833799056609643, 0.13470563773215527, 0.12227443085505985, 0.11679840952347853, 0.14462506128372987, 0.12451026505372886, 0.15601130909497518, 0.13851306225496718, 0.1499502969320876, 0.1437370222782971, 0.14832285359924313, 0.13138359625658835, 0.14072274264958828, 0.14354973437039786, 0.14723799654885128, 0.14051028808929855, 0.1301308379281112, 9.999999999998899e-05, 0.00620091089050534, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.012613735053924047, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021947000496680413, 0.059307617871185325, 0.027976382934820188, 0.08405308668337963, 0.08937587503570354, 0.008686375097159527, 0.014148999200052303, 0.10171694161217126, 0.04427849308956644, 0.09726520321999776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061323362462292974, 0.031633009103468446, 0.08984798887473333, 0.07688369362092329, 0.08631636094209627, 0.07947523398036083, 0.07469803177816392, 0.08618024481296582, 0.06602059764246682, 0.4104924861934157, 0.33937179380229243, 0.3700350545251695, 0.35203120302487045, 0.33527067274918265, 0.37912050000404196, 0.3661816189075343, 0.3757028763652934, 0.3470911517924231, 0.09665941402298972, 0.1000895891065049, 0.10607127424554585, 0.10648017656804709, 0.11275175105260093, 0.09184322167801728, 0.10269098081558792, 0.11533655664920295, 0.10721366882397088, 0.13806499806007266, 0.20040501195173233, 0.19948949410082462, 0.24260481813641233, 0.21585528858679393, 0.20632388586936035, 0.20966501113909308, 0.2332598249235025, 0.22651184046867312, 0.2622807783746146, 0.24922455452995085, 0.25606333104554113, 0.26423958634123335, 0.24578150161171586, 0.2660502607719436, 0.25646446900054154, 0.2647842431678208, 0.2782121756213153, 0.19159767032949393, 0.20901467358367476, 0.18187336280950472, 0.19297279555936975, 0.20693931922048714, 0.17417051505165837, 0.18433071936913492, 0.19753752929680446, 0.1778541778670949, 0.2119719920007057, 0.18608846146634594, 0.19300016195149905, 0.2020506685759289, 0.20161888363775238, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1905209893546752, 0.20879524452090148, 0.18854991468070537, 0.21257680158239234, 0.17601686267597905, 0.19631790371983548, 0.19508774886332825, 0.20929520206480834, 0.1739777150581271, 0.538872507219367, 0.19813847871029056, 0.1542942838476683, 0.2716377777047917, 0.20014906252793363, 0.19886997379428872, 0.2901325542201686, 0.17035826300691004, 0.49612074800833883, 0.45663795931922835, 0.15591907025611074, 0.2104652009487118, 0.4718135275452623, 0.1697204255361876, 0.5149281205622993, 0.10495207351750668, 0.10492025246060854, 0.41105830049903713, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1808295937801222, 0.18263205346989797, 0.18199967015695562, 0.18008268279955542, 0.1826910774826196, 0.18274441759078364, 0.09012463989466013, 0.09326532502151863, 0.09026291310001766, 0.07891370314408852, 0.08037210833555053, 0.09016635781501825, 0.09759343356782424, 0.0877656436182962, 0.09064137963990637]}, "mutation_prompt": null}
{"id": "dcda4a62-3107-48a2-9952-9ccfbbcbb4a5", "solution": "class DynamicInertiaWeightQIPSO(AdaptiveCognitiveWeightQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight_min=0.1, inertia_weight_max=0.9, inertia_weight_decay=0.95, **kwargs):\n        super().__init__(budget, dim, num_particles, inertia_weight_decay=inertia_weight_decay, **kwargs)\n        self.inertia_weight_min = inertia_weight_min\n        self.inertia_weight_max = inertia_weight_max\n\n    def __call__(self, func):\n        inertia_weight = self.inertia_weight\n        for _ in range(self.budget):\n            # Update inertia weight dynamically\n            inertia_weight = max(self.inertia_weight_min, inertia_weight * self.inertia_weight_decay)\n            # Other optimization steps remain unchanged\n            # ...", "name": "DynamicInertiaWeightQIPSO", "description": "Implement a dynamic inertia weight strategy to enhance the exploration and exploitation balance in the algorithm.", "configspace": "", "generation": 77, "fitness": 0.0, "feedback": "The algorithm DynamicInertiaWeightQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "5cc979fa-d12f-467e-9987-d27c81471bdc", "solution": "import numpy as np\n\nclass AdaptiveCognitiveWeightQIPSO(EnhancedImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, cognitive_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay)\n        self.cognitive_weight_decay = cognitive_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay  # Introduce adaptive cognitive weight adjustment based on performance\n\n        return global_best", "name": "AdaptiveCognitiveWeightQIPSO", "description": "Improve exploration by incorporating a novel adaptive mechanism to adjust the cognitive weight based on individual particle performance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {"aucs": [0.40052570598683046, 0.3635689218873116, 0.3696925131814689, 0.3593374062214625, 0.3641113789930517, 0.36584703561553455, 0.3680985535142539, 0.36158412220662794, 0.3632234210461318, 9.999999999998899e-05, 0.0013050465738250194, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003838722993740329, 9.999999999998899e-05, 0.0912080008598305, 0.09753435619205886, 0.09009078309795038, 0.08942776140367337, 0.1400803969083445, 0.09213859004361968, 0.1117435863111661, 0.10388509815965263, 0.11580006465641568, 0.08888111730227577, 0.10150110380201927, 0.09063284462639654, 0.10772546664316074, 0.0932747408261525, 0.09376497663357042, 0.0794586137280765, 0.07237252899613866, 0.11435691935094561, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.987881597686031, 0.9868989440722035, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876225050961304, 0.2771267796880197, 0.24557874704774485, 0.23788557685073697, 0.2295565490700021, 0.23449987476096135, 0.25872284807789014, 0.23743643468444675, 0.2646448754066678, 0.2451291339257734, 0.29986636187978843, 0.2538649527805076, 0.3042692090121989, 0.25839843512321303, 0.2528157147706027, 0.24907270222422617, 0.23650550743311782, 0.33073811263710495, 0.33862703073067946, 0.15346559977293983, 0.15833799056609643, 0.13470563773215527, 0.12227443085505985, 0.11679840952347853, 0.14462506128372987, 0.12451026505372886, 0.15601130909497518, 0.13851306225496718, 0.1499502969320876, 0.1437370222782971, 0.14832285359924313, 0.13138359625658835, 0.14072274264958828, 0.14354973437039786, 0.14723799654885128, 0.14051028808929855, 0.1301308379281112, 9.999999999998899e-05, 0.00620091089050534, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.012613735053924047, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021947000496680413, 0.059307617871185325, 0.027976382934820188, 0.08405308668337963, 0.08937587503570354, 0.008686375097159527, 0.014148999200052303, 0.10171694161217126, 0.04427849308956644, 0.09726520321999776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061323362462292974, 0.031633009103468446, 0.08984798887473333, 0.07688369362092329, 0.08631636094209627, 0.07947523398036083, 0.07469803177816392, 0.08618024481296582, 0.06602059764246682, 0.4104924861934157, 0.33937179380229243, 0.3700350545251695, 0.35203120302487045, 0.33527067274918265, 0.37912050000404196, 0.3661816189075343, 0.3757028763652934, 0.3470911517924231, 0.09665941402298972, 0.1000895891065049, 0.10607127424554585, 0.10648017656804709, 0.11275175105260093, 0.09184322167801728, 0.10269098081558792, 0.11533655664920295, 0.10721366882397088, 0.13806499806007266, 0.20040501195173233, 0.19948949410082462, 0.24260481813641233, 0.21585528858679393, 0.20632388586936035, 0.20966501113909308, 0.2332598249235025, 0.22651184046867312, 0.2622807783746146, 0.24922455452995085, 0.25606333104554113, 0.26423958634123335, 0.24578150161171586, 0.2660502607719436, 0.25646446900054154, 0.2647842431678208, 0.2782121756213153, 0.19159767032949393, 0.20901467358367476, 0.18187336280950472, 0.19297279555936975, 0.20693931922048714, 0.17417051505165837, 0.18433071936913492, 0.19753752929680446, 0.1778541778670949, 0.2119719920007057, 0.18608846146634594, 0.19300016195149905, 0.2020506685759289, 0.20161888363775238, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1905209893546752, 0.20879524452090148, 0.18854991468070537, 0.21257680158239234, 0.17601686267597905, 0.19631790371983548, 0.19508774886332825, 0.20929520206480834, 0.1739777150581271, 0.538872507219367, 0.19813847871029056, 0.1542942838476683, 0.2716377777047917, 0.20014906252793363, 0.19886997379428872, 0.2901325542201686, 0.17035826300691004, 0.49612074800833883, 0.45663795931922835, 0.15591907025611074, 0.2104652009487118, 0.4718135275452623, 0.1697204255361876, 0.5149281205622993, 0.10495207351750668, 0.10492025246060854, 0.41105830049903713, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1808295937801222, 0.18263205346989797, 0.18199967015695562, 0.18008268279955542, 0.1826910774826196, 0.18274441759078364, 0.09012463989466013, 0.09326532502151863, 0.09026291310001766, 0.07891370314408852, 0.08037210833555053, 0.09016635781501825, 0.09759343356782424, 0.0877656436182962, 0.09064137963990637]}, "mutation_prompt": null}
{"id": "5a9eadff-18e9-4f48-8632-7e85633e9f77", "solution": "import numpy as np\n\nclass AdaptiveCognitiveWeightQIPSO(EnhancedImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, cognitive_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay)\n        self.cognitive_weight_decay = cognitive_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay  # Introduce adaptive cognitive weight adjustment based on performance\n\n        return global_best", "name": "AdaptiveCognitiveWeightQIPSO", "description": "Improve exploration by incorporating a novel adaptive mechanism to adjust the cognitive weight based on individual particle performance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {"aucs": [0.40052570598683046, 0.3635689218873116, 0.3696925131814689, 0.3593374062214625, 0.3641113789930517, 0.36584703561553455, 0.3680985535142539, 0.36158412220662794, 0.3632234210461318, 9.999999999998899e-05, 0.0013050465738250194, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003838722993740329, 9.999999999998899e-05, 0.0912080008598305, 0.09753435619205886, 0.09009078309795038, 0.08942776140367337, 0.1400803969083445, 0.09213859004361968, 0.1117435863111661, 0.10388509815965263, 0.11580006465641568, 0.08888111730227577, 0.10150110380201927, 0.09063284462639654, 0.10772546664316074, 0.0932747408261525, 0.09376497663357042, 0.0794586137280765, 0.07237252899613866, 0.11435691935094561, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.987881597686031, 0.9868989440722035, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876225050961304, 0.2771267796880197, 0.24557874704774485, 0.23788557685073697, 0.2295565490700021, 0.23449987476096135, 0.25872284807789014, 0.23743643468444675, 0.2646448754066678, 0.2451291339257734, 0.29986636187978843, 0.2538649527805076, 0.3042692090121989, 0.25839843512321303, 0.2528157147706027, 0.24907270222422617, 0.23650550743311782, 0.33073811263710495, 0.33862703073067946, 0.15346559977293983, 0.15833799056609643, 0.13470563773215527, 0.12227443085505985, 0.11679840952347853, 0.14462506128372987, 0.12451026505372886, 0.15601130909497518, 0.13851306225496718, 0.1499502969320876, 0.1437370222782971, 0.14832285359924313, 0.13138359625658835, 0.14072274264958828, 0.14354973437039786, 0.14723799654885128, 0.14051028808929855, 0.1301308379281112, 9.999999999998899e-05, 0.00620091089050534, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.012613735053924047, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021947000496680413, 0.059307617871185325, 0.027976382934820188, 0.08405308668337963, 0.08937587503570354, 0.008686375097159527, 0.014148999200052303, 0.10171694161217126, 0.04427849308956644, 0.09726520321999776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061323362462292974, 0.031633009103468446, 0.08984798887473333, 0.07688369362092329, 0.08631636094209627, 0.07947523398036083, 0.07469803177816392, 0.08618024481296582, 0.06602059764246682, 0.4104924861934157, 0.33937179380229243, 0.3700350545251695, 0.35203120302487045, 0.33527067274918265, 0.37912050000404196, 0.3661816189075343, 0.3757028763652934, 0.3470911517924231, 0.09665941402298972, 0.1000895891065049, 0.10607127424554585, 0.10648017656804709, 0.11275175105260093, 0.09184322167801728, 0.10269098081558792, 0.11533655664920295, 0.10721366882397088, 0.13806499806007266, 0.20040501195173233, 0.19948949410082462, 0.24260481813641233, 0.21585528858679393, 0.20632388586936035, 0.20966501113909308, 0.2332598249235025, 0.22651184046867312, 0.2622807783746146, 0.24922455452995085, 0.25606333104554113, 0.26423958634123335, 0.24578150161171586, 0.2660502607719436, 0.25646446900054154, 0.2647842431678208, 0.2782121756213153, 0.19159767032949393, 0.20901467358367476, 0.18187336280950472, 0.19297279555936975, 0.20693931922048714, 0.17417051505165837, 0.18433071936913492, 0.19753752929680446, 0.1778541778670949, 0.2119719920007057, 0.18608846146634594, 0.19300016195149905, 0.2020506685759289, 0.20161888363775238, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1905209893546752, 0.20879524452090148, 0.18854991468070537, 0.21257680158239234, 0.17601686267597905, 0.19631790371983548, 0.19508774886332825, 0.20929520206480834, 0.1739777150581271, 0.538872507219367, 0.19813847871029056, 0.1542942838476683, 0.2716377777047917, 0.20014906252793363, 0.19886997379428872, 0.2901325542201686, 0.17035826300691004, 0.49612074800833883, 0.45663795931922835, 0.15591907025611074, 0.2104652009487118, 0.4718135275452623, 0.1697204255361876, 0.5149281205622993, 0.10495207351750668, 0.10492025246060854, 0.41105830049903713, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1808295937801222, 0.18263205346989797, 0.18199967015695562, 0.18008268279955542, 0.1826910774826196, 0.18274441759078364, 0.09012463989466013, 0.09326532502151863, 0.09026291310001766, 0.07891370314408852, 0.08037210833555053, 0.09016635781501825, 0.09759343356782424, 0.0877656436182962, 0.09064137963990637]}, "mutation_prompt": null}
{"id": "3f406540-14ae-43a6-b917-d249bec65506", "solution": "import numpy as np\n\nclass EnhancedAdaptiveCognitiveWeightQIPSO(EnhancedImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, cognitive_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay)\n        self.cognitive_weight_decay = cognitive_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)  # Introduce dynamic adjustment of social weight based on population diversity\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay\n\n        return global_best", "name": "EnhancedAdaptiveCognitiveWeightQIPSO", "description": "Improve exploration further by introducing a dynamic mechanism to adapt the social weight based on population diversity.", "configspace": "", "generation": 80, "fitness": 0.20284243488811105, "feedback": "The algorithm EnhancedAdaptiveCognitiveWeightQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {"aucs": [0.40052570598683046, 0.3635689218873116, 0.3696925131814689, 0.3593374062214625, 0.3641113789930517, 0.36584703561553455, 0.3680985535142539, 0.36158412220662794, 0.3632234210461318, 9.999999999998899e-05, 0.0013050465738250194, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003838722993740329, 9.999999999998899e-05, 0.0912080008598305, 0.09753435619205886, 0.09009078309795038, 0.08942776140367337, 0.1400803969083445, 0.09213859004361968, 0.1117435863111661, 0.10388509815965263, 0.11580006465641568, 0.08888111730227577, 0.10150110380201927, 0.09063284462639654, 0.10772546664316074, 0.0932747408261525, 0.09376497663357042, 0.0794586137280765, 0.07237252899613866, 0.11435691935094561, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.987881597686031, 0.9868989440722035, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876225050961304, 0.2771267796880197, 0.24557874704774485, 0.23788557685073697, 0.2295565490700021, 0.23449987476096135, 0.25872284807789014, 0.23743643468444675, 0.2646448754066678, 0.2451291339257734, 0.29986636187978843, 0.2538649527805076, 0.3042692090121989, 0.25839843512321303, 0.2528157147706027, 0.24907270222422617, 0.23650550743311782, 0.33073811263710495, 0.33862703073067946, 0.15346559977293983, 0.15833799056609643, 0.13470563773215527, 0.12227443085505985, 0.11679840952347853, 0.14462506128372987, 0.12451026505372886, 0.15601130909497518, 0.13851306225496718, 0.1499502969320876, 0.1437370222782971, 0.14832285359924313, 0.13138359625658835, 0.14072274264958828, 0.14354973437039786, 0.14723799654885128, 0.14051028808929855, 0.1301308379281112, 9.999999999998899e-05, 0.00620091089050534, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.012613735053924047, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021947000496680413, 0.059307617871185325, 0.027976382934820188, 0.08405308668337963, 0.08937587503570354, 0.008686375097159527, 0.014148999200052303, 0.10171694161217126, 0.04427849308956644, 0.09726520321999776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061323362462292974, 0.031633009103468446, 0.08984798887473333, 0.07688369362092329, 0.08631636094209627, 0.07947523398036083, 0.07469803177816392, 0.08618024481296582, 0.06602059764246682, 0.4104924861934157, 0.33937179380229243, 0.3700350545251695, 0.35203120302487045, 0.33527067274918265, 0.37912050000404196, 0.3661816189075343, 0.3757028763652934, 0.3470911517924231, 0.09665941402298972, 0.1000895891065049, 0.10607127424554585, 0.10648017656804709, 0.11275175105260093, 0.09184322167801728, 0.10269098081558792, 0.11533655664920295, 0.10721366882397088, 0.13806499806007266, 0.20040501195173233, 0.19948949410082462, 0.24260481813641233, 0.21585528858679393, 0.20632388586936035, 0.20966501113909308, 0.2332598249235025, 0.22651184046867312, 0.2622807783746146, 0.24922455452995085, 0.25606333104554113, 0.26423958634123335, 0.24578150161171586, 0.2660502607719436, 0.25646446900054154, 0.2647842431678208, 0.2782121756213153, 0.19159767032949393, 0.20901467358367476, 0.18187336280950472, 0.19297279555936975, 0.20693931922048714, 0.17417051505165837, 0.18433071936913492, 0.19753752929680446, 0.1778541778670949, 0.2119719920007057, 0.18608846146634594, 0.19300016195149905, 0.2020506685759289, 0.20161888363775238, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1905209893546752, 0.20879524452090148, 0.18854991468070537, 0.21257680158239234, 0.17601686267597905, 0.19631790371983548, 0.19508774886332825, 0.20929520206480834, 0.1739777150581271, 0.538872507219367, 0.19813847871029056, 0.1542942838476683, 0.2716377777047917, 0.20014906252793363, 0.19886997379428872, 0.2901325542201686, 0.17035826300691004, 0.49612074800833883, 0.45663795931922835, 0.15591907025611074, 0.2104652009487118, 0.4718135275452623, 0.1697204255361876, 0.5149281205622993, 0.10495207351750668, 0.10492025246060854, 0.41105830049903713, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1808295937801222, 0.18263205346989797, 0.18199967015695562, 0.18008268279955542, 0.1826910774826196, 0.18274441759078364, 0.09012463989466013, 0.09326532502151863, 0.09026291310001766, 0.07891370314408852, 0.08037210833555053, 0.09016635781501825, 0.09759343356782424, 0.0877656436182962, 0.09064137963990637]}, "mutation_prompt": null}
{"id": "596fd8ca-7c07-43c7-b21b-f5c2887adbec", "solution": "import numpy as np\n\nclass AdaptiveCognitiveWeightQIPSO(EnhancedImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, cognitive_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay)\n        self.cognitive_weight_decay = cognitive_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay  # Introduce adaptive cognitive weight adjustment based on performance\n\n        return global_best", "name": "AdaptiveCognitiveWeightQIPSO", "description": "Improve exploration by incorporating a novel adaptive mechanism to adjust the cognitive weight based on individual particle performance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {"aucs": [0.40052570598683046, 0.3635689218873116, 0.3696925131814689, 0.3593374062214625, 0.3641113789930517, 0.36584703561553455, 0.3680985535142539, 0.36158412220662794, 0.3632234210461318, 9.999999999998899e-05, 0.0013050465738250194, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003838722993740329, 9.999999999998899e-05, 0.0912080008598305, 0.09753435619205886, 0.09009078309795038, 0.08942776140367337, 0.1400803969083445, 0.09213859004361968, 0.1117435863111661, 0.10388509815965263, 0.11580006465641568, 0.08888111730227577, 0.10150110380201927, 0.09063284462639654, 0.10772546664316074, 0.0932747408261525, 0.09376497663357042, 0.0794586137280765, 0.07237252899613866, 0.11435691935094561, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.987881597686031, 0.9868989440722035, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876225050961304, 0.2771267796880197, 0.24557874704774485, 0.23788557685073697, 0.2295565490700021, 0.23449987476096135, 0.25872284807789014, 0.23743643468444675, 0.2646448754066678, 0.2451291339257734, 0.29986636187978843, 0.2538649527805076, 0.3042692090121989, 0.25839843512321303, 0.2528157147706027, 0.24907270222422617, 0.23650550743311782, 0.33073811263710495, 0.33862703073067946, 0.15346559977293983, 0.15833799056609643, 0.13470563773215527, 0.12227443085505985, 0.11679840952347853, 0.14462506128372987, 0.12451026505372886, 0.15601130909497518, 0.13851306225496718, 0.1499502969320876, 0.1437370222782971, 0.14832285359924313, 0.13138359625658835, 0.14072274264958828, 0.14354973437039786, 0.14723799654885128, 0.14051028808929855, 0.1301308379281112, 9.999999999998899e-05, 0.00620091089050534, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.012613735053924047, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021947000496680413, 0.059307617871185325, 0.027976382934820188, 0.08405308668337963, 0.08937587503570354, 0.008686375097159527, 0.014148999200052303, 0.10171694161217126, 0.04427849308956644, 0.09726520321999776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061323362462292974, 0.031633009103468446, 0.08984798887473333, 0.07688369362092329, 0.08631636094209627, 0.07947523398036083, 0.07469803177816392, 0.08618024481296582, 0.06602059764246682, 0.4104924861934157, 0.33937179380229243, 0.3700350545251695, 0.35203120302487045, 0.33527067274918265, 0.37912050000404196, 0.3661816189075343, 0.3757028763652934, 0.3470911517924231, 0.09665941402298972, 0.1000895891065049, 0.10607127424554585, 0.10648017656804709, 0.11275175105260093, 0.09184322167801728, 0.10269098081558792, 0.11533655664920295, 0.10721366882397088, 0.13806499806007266, 0.20040501195173233, 0.19948949410082462, 0.24260481813641233, 0.21585528858679393, 0.20632388586936035, 0.20966501113909308, 0.2332598249235025, 0.22651184046867312, 0.2622807783746146, 0.24922455452995085, 0.25606333104554113, 0.26423958634123335, 0.24578150161171586, 0.2660502607719436, 0.25646446900054154, 0.2647842431678208, 0.2782121756213153, 0.19159767032949393, 0.20901467358367476, 0.18187336280950472, 0.19297279555936975, 0.20693931922048714, 0.17417051505165837, 0.18433071936913492, 0.19753752929680446, 0.1778541778670949, 0.2119719920007057, 0.18608846146634594, 0.19300016195149905, 0.2020506685759289, 0.20161888363775238, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1905209893546752, 0.20879524452090148, 0.18854991468070537, 0.21257680158239234, 0.17601686267597905, 0.19631790371983548, 0.19508774886332825, 0.20929520206480834, 0.1739777150581271, 0.538872507219367, 0.19813847871029056, 0.1542942838476683, 0.2716377777047917, 0.20014906252793363, 0.19886997379428872, 0.2901325542201686, 0.17035826300691004, 0.49612074800833883, 0.45663795931922835, 0.15591907025611074, 0.2104652009487118, 0.4718135275452623, 0.1697204255361876, 0.5149281205622993, 0.10495207351750668, 0.10492025246060854, 0.41105830049903713, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1808295937801222, 0.18263205346989797, 0.18199967015695562, 0.18008268279955542, 0.1826910774826196, 0.18274441759078364, 0.09012463989466013, 0.09326532502151863, 0.09026291310001766, 0.07891370314408852, 0.08037210833555053, 0.09016635781501825, 0.09759343356782424, 0.0877656436182962, 0.09064137963990637]}, "mutation_prompt": null}
{"id": "759c99ff-cc3c-4416-8c7b-1f37782a6525", "solution": "import numpy as np\n\nclass AdaptiveCognitiveWeightQIPSO(EnhancedImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, cognitive_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay)\n        self.cognitive_weight_decay = cognitive_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay  # Introduce adaptive cognitive weight adjustment based on performance\n\n        return global_best", "name": "AdaptiveCognitiveWeightQIPSO", "description": "Improve exploration by incorporating a novel adaptive mechanism to adjust the cognitive weight based on individual particle performance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {"aucs": [0.40052570598683046, 0.3635689218873116, 0.3696925131814689, 0.3593374062214625, 0.3641113789930517, 0.36584703561553455, 0.3680985535142539, 0.36158412220662794, 0.3632234210461318, 9.999999999998899e-05, 0.0013050465738250194, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003838722993740329, 9.999999999998899e-05, 0.0912080008598305, 0.09753435619205886, 0.09009078309795038, 0.08942776140367337, 0.1400803969083445, 0.09213859004361968, 0.1117435863111661, 0.10388509815965263, 0.11580006465641568, 0.08888111730227577, 0.10150110380201927, 0.09063284462639654, 0.10772546664316074, 0.0932747408261525, 0.09376497663357042, 0.0794586137280765, 0.07237252899613866, 0.11435691935094561, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.987881597686031, 0.9868989440722035, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876225050961304, 0.2771267796880197, 0.24557874704774485, 0.23788557685073697, 0.2295565490700021, 0.23449987476096135, 0.25872284807789014, 0.23743643468444675, 0.2646448754066678, 0.2451291339257734, 0.29986636187978843, 0.2538649527805076, 0.3042692090121989, 0.25839843512321303, 0.2528157147706027, 0.24907270222422617, 0.23650550743311782, 0.33073811263710495, 0.33862703073067946, 0.15346559977293983, 0.15833799056609643, 0.13470563773215527, 0.12227443085505985, 0.11679840952347853, 0.14462506128372987, 0.12451026505372886, 0.15601130909497518, 0.13851306225496718, 0.1499502969320876, 0.1437370222782971, 0.14832285359924313, 0.13138359625658835, 0.14072274264958828, 0.14354973437039786, 0.14723799654885128, 0.14051028808929855, 0.1301308379281112, 9.999999999998899e-05, 0.00620091089050534, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.012613735053924047, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021947000496680413, 0.059307617871185325, 0.027976382934820188, 0.08405308668337963, 0.08937587503570354, 0.008686375097159527, 0.014148999200052303, 0.10171694161217126, 0.04427849308956644, 0.09726520321999776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061323362462292974, 0.031633009103468446, 0.08984798887473333, 0.07688369362092329, 0.08631636094209627, 0.07947523398036083, 0.07469803177816392, 0.08618024481296582, 0.06602059764246682, 0.4104924861934157, 0.33937179380229243, 0.3700350545251695, 0.35203120302487045, 0.33527067274918265, 0.37912050000404196, 0.3661816189075343, 0.3757028763652934, 0.3470911517924231, 0.09665941402298972, 0.1000895891065049, 0.10607127424554585, 0.10648017656804709, 0.11275175105260093, 0.09184322167801728, 0.10269098081558792, 0.11533655664920295, 0.10721366882397088, 0.13806499806007266, 0.20040501195173233, 0.19948949410082462, 0.24260481813641233, 0.21585528858679393, 0.20632388586936035, 0.20966501113909308, 0.2332598249235025, 0.22651184046867312, 0.2622807783746146, 0.24922455452995085, 0.25606333104554113, 0.26423958634123335, 0.24578150161171586, 0.2660502607719436, 0.25646446900054154, 0.2647842431678208, 0.2782121756213153, 0.19159767032949393, 0.20901467358367476, 0.18187336280950472, 0.19297279555936975, 0.20693931922048714, 0.17417051505165837, 0.18433071936913492, 0.19753752929680446, 0.1778541778670949, 0.2119719920007057, 0.18608846146634594, 0.19300016195149905, 0.2020506685759289, 0.20161888363775238, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1905209893546752, 0.20879524452090148, 0.18854991468070537, 0.21257680158239234, 0.17601686267597905, 0.19631790371983548, 0.19508774886332825, 0.20929520206480834, 0.1739777150581271, 0.538872507219367, 0.19813847871029056, 0.1542942838476683, 0.2716377777047917, 0.20014906252793363, 0.19886997379428872, 0.2901325542201686, 0.17035826300691004, 0.49612074800833883, 0.45663795931922835, 0.15591907025611074, 0.2104652009487118, 0.4718135275452623, 0.1697204255361876, 0.5149281205622993, 0.10495207351750668, 0.10492025246060854, 0.41105830049903713, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1808295937801222, 0.18263205346989797, 0.18199967015695562, 0.18008268279955542, 0.1826910774826196, 0.18274441759078364, 0.09012463989466013, 0.09326532502151863, 0.09026291310001766, 0.07891370314408852, 0.08037210833555053, 0.09016635781501825, 0.09759343356782424, 0.0877656436182962, 0.09064137963990637]}, "mutation_prompt": null}
{"id": "0c24e240-5d90-49f9-87f5-9058ac6ee08a", "solution": "import numpy as np\n\nclass AdaptiveCognitiveWeightQIPSO(EnhancedImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, cognitive_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay)\n        self.cognitive_weight_decay = cognitive_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay  # Introduce adaptive cognitive weight adjustment based on performance\n\n        return global_best", "name": "AdaptiveCognitiveWeightQIPSO", "description": "Improve exploration by incorporating a novel adaptive mechanism to adjust the cognitive weight based on individual particle performance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {"aucs": [0.40052570598683046, 0.3635689218873116, 0.3696925131814689, 0.3593374062214625, 0.3641113789930517, 0.36584703561553455, 0.3680985535142539, 0.36158412220662794, 0.3632234210461318, 9.999999999998899e-05, 0.0013050465738250194, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003838722993740329, 9.999999999998899e-05, 0.0912080008598305, 0.09753435619205886, 0.09009078309795038, 0.08942776140367337, 0.1400803969083445, 0.09213859004361968, 0.1117435863111661, 0.10388509815965263, 0.11580006465641568, 0.08888111730227577, 0.10150110380201927, 0.09063284462639654, 0.10772546664316074, 0.0932747408261525, 0.09376497663357042, 0.0794586137280765, 0.07237252899613866, 0.11435691935094561, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.987881597686031, 0.9868989440722035, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876225050961304, 0.2771267796880197, 0.24557874704774485, 0.23788557685073697, 0.2295565490700021, 0.23449987476096135, 0.25872284807789014, 0.23743643468444675, 0.2646448754066678, 0.2451291339257734, 0.29986636187978843, 0.2538649527805076, 0.3042692090121989, 0.25839843512321303, 0.2528157147706027, 0.24907270222422617, 0.23650550743311782, 0.33073811263710495, 0.33862703073067946, 0.15346559977293983, 0.15833799056609643, 0.13470563773215527, 0.12227443085505985, 0.11679840952347853, 0.14462506128372987, 0.12451026505372886, 0.15601130909497518, 0.13851306225496718, 0.1499502969320876, 0.1437370222782971, 0.14832285359924313, 0.13138359625658835, 0.14072274264958828, 0.14354973437039786, 0.14723799654885128, 0.14051028808929855, 0.1301308379281112, 9.999999999998899e-05, 0.00620091089050534, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.012613735053924047, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021947000496680413, 0.059307617871185325, 0.027976382934820188, 0.08405308668337963, 0.08937587503570354, 0.008686375097159527, 0.014148999200052303, 0.10171694161217126, 0.04427849308956644, 0.09726520321999776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061323362462292974, 0.031633009103468446, 0.08984798887473333, 0.07688369362092329, 0.08631636094209627, 0.07947523398036083, 0.07469803177816392, 0.08618024481296582, 0.06602059764246682, 0.4104924861934157, 0.33937179380229243, 0.3700350545251695, 0.35203120302487045, 0.33527067274918265, 0.37912050000404196, 0.3661816189075343, 0.3757028763652934, 0.3470911517924231, 0.09665941402298972, 0.1000895891065049, 0.10607127424554585, 0.10648017656804709, 0.11275175105260093, 0.09184322167801728, 0.10269098081558792, 0.11533655664920295, 0.10721366882397088, 0.13806499806007266, 0.20040501195173233, 0.19948949410082462, 0.24260481813641233, 0.21585528858679393, 0.20632388586936035, 0.20966501113909308, 0.2332598249235025, 0.22651184046867312, 0.2622807783746146, 0.24922455452995085, 0.25606333104554113, 0.26423958634123335, 0.24578150161171586, 0.2660502607719436, 0.25646446900054154, 0.2647842431678208, 0.2782121756213153, 0.19159767032949393, 0.20901467358367476, 0.18187336280950472, 0.19297279555936975, 0.20693931922048714, 0.17417051505165837, 0.18433071936913492, 0.19753752929680446, 0.1778541778670949, 0.2119719920007057, 0.18608846146634594, 0.19300016195149905, 0.2020506685759289, 0.20161888363775238, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1905209893546752, 0.20879524452090148, 0.18854991468070537, 0.21257680158239234, 0.17601686267597905, 0.19631790371983548, 0.19508774886332825, 0.20929520206480834, 0.1739777150581271, 0.538872507219367, 0.19813847871029056, 0.1542942838476683, 0.2716377777047917, 0.20014906252793363, 0.19886997379428872, 0.2901325542201686, 0.17035826300691004, 0.49612074800833883, 0.45663795931922835, 0.15591907025611074, 0.2104652009487118, 0.4718135275452623, 0.1697204255361876, 0.5149281205622993, 0.10495207351750668, 0.10492025246060854, 0.41105830049903713, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1808295937801222, 0.18263205346989797, 0.18199967015695562, 0.18008268279955542, 0.1826910774826196, 0.18274441759078364, 0.09012463989466013, 0.09326532502151863, 0.09026291310001766, 0.07891370314408852, 0.08037210833555053, 0.09016635781501825, 0.09759343356782424, 0.0877656436182962, 0.09064137963990637]}, "mutation_prompt": null}
{"id": "14b1fdb1-0211-47a8-8d4a-ee80db188f61", "solution": "import numpy as np\n\nclass AdaptiveCognitiveWeightQIPSO(EnhancedImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, cognitive_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay)\n        self.cognitive_weight_decay = cognitive_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay  # Introduce adaptive cognitive weight adjustment based on performance\n\n        return global_best", "name": "AdaptiveCognitiveWeightQIPSO", "description": "Improve exploration by incorporating a novel adaptive mechanism to adjust the cognitive weight based on individual particle performance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {"aucs": [0.40052570598683046, 0.3635689218873116, 0.3696925131814689, 0.3593374062214625, 0.3641113789930517, 0.36584703561553455, 0.3680985535142539, 0.36158412220662794, 0.3632234210461318, 9.999999999998899e-05, 0.0013050465738250194, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003838722993740329, 9.999999999998899e-05, 0.0912080008598305, 0.09753435619205886, 0.09009078309795038, 0.08942776140367337, 0.1400803969083445, 0.09213859004361968, 0.1117435863111661, 0.10388509815965263, 0.11580006465641568, 0.08888111730227577, 0.10150110380201927, 0.09063284462639654, 0.10772546664316074, 0.0932747408261525, 0.09376497663357042, 0.0794586137280765, 0.07237252899613866, 0.11435691935094561, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.987881597686031, 0.9868989440722035, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876225050961304, 0.2771267796880197, 0.24557874704774485, 0.23788557685073697, 0.2295565490700021, 0.23449987476096135, 0.25872284807789014, 0.23743643468444675, 0.2646448754066678, 0.2451291339257734, 0.29986636187978843, 0.2538649527805076, 0.3042692090121989, 0.25839843512321303, 0.2528157147706027, 0.24907270222422617, 0.23650550743311782, 0.33073811263710495, 0.33862703073067946, 0.15346559977293983, 0.15833799056609643, 0.13470563773215527, 0.12227443085505985, 0.11679840952347853, 0.14462506128372987, 0.12451026505372886, 0.15601130909497518, 0.13851306225496718, 0.1499502969320876, 0.1437370222782971, 0.14832285359924313, 0.13138359625658835, 0.14072274264958828, 0.14354973437039786, 0.14723799654885128, 0.14051028808929855, 0.1301308379281112, 9.999999999998899e-05, 0.00620091089050534, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.012613735053924047, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021947000496680413, 0.059307617871185325, 0.027976382934820188, 0.08405308668337963, 0.08937587503570354, 0.008686375097159527, 0.014148999200052303, 0.10171694161217126, 0.04427849308956644, 0.09726520321999776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061323362462292974, 0.031633009103468446, 0.08984798887473333, 0.07688369362092329, 0.08631636094209627, 0.07947523398036083, 0.07469803177816392, 0.08618024481296582, 0.06602059764246682, 0.4104924861934157, 0.33937179380229243, 0.3700350545251695, 0.35203120302487045, 0.33527067274918265, 0.37912050000404196, 0.3661816189075343, 0.3757028763652934, 0.3470911517924231, 0.09665941402298972, 0.1000895891065049, 0.10607127424554585, 0.10648017656804709, 0.11275175105260093, 0.09184322167801728, 0.10269098081558792, 0.11533655664920295, 0.10721366882397088, 0.13806499806007266, 0.20040501195173233, 0.19948949410082462, 0.24260481813641233, 0.21585528858679393, 0.20632388586936035, 0.20966501113909308, 0.2332598249235025, 0.22651184046867312, 0.2622807783746146, 0.24922455452995085, 0.25606333104554113, 0.26423958634123335, 0.24578150161171586, 0.2660502607719436, 0.25646446900054154, 0.2647842431678208, 0.2782121756213153, 0.19159767032949393, 0.20901467358367476, 0.18187336280950472, 0.19297279555936975, 0.20693931922048714, 0.17417051505165837, 0.18433071936913492, 0.19753752929680446, 0.1778541778670949, 0.2119719920007057, 0.18608846146634594, 0.19300016195149905, 0.2020506685759289, 0.20161888363775238, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1905209893546752, 0.20879524452090148, 0.18854991468070537, 0.21257680158239234, 0.17601686267597905, 0.19631790371983548, 0.19508774886332825, 0.20929520206480834, 0.1739777150581271, 0.538872507219367, 0.19813847871029056, 0.1542942838476683, 0.2716377777047917, 0.20014906252793363, 0.19886997379428872, 0.2901325542201686, 0.17035826300691004, 0.49612074800833883, 0.45663795931922835, 0.15591907025611074, 0.2104652009487118, 0.4718135275452623, 0.1697204255361876, 0.5149281205622993, 0.10495207351750668, 0.10492025246060854, 0.41105830049903713, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1808295937801222, 0.18263205346989797, 0.18199967015695562, 0.18008268279955542, 0.1826910774826196, 0.18274441759078364, 0.09012463989466013, 0.09326532502151863, 0.09026291310001766, 0.07891370314408852, 0.08037210833555053, 0.09016635781501825, 0.09759343356782424, 0.0877656436182962, 0.09064137963990637]}, "mutation_prompt": null}
{"id": "1a2066f0-ce9a-4c4d-9db3-451c6c50f5fd", "solution": "import numpy as np\n\nclass DynamicScalingAdaptiveCognitiveWeightQIPSO(EnhancedImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, cognitive_weight_decay=0.95, scaling_factor=1.0):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay)\n        self.cognitive_weight_decay = cognitive_weight_decay\n        self.scaling_factor = scaling_factor\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0 * self.scaling_factor, 5.0 * self.scaling_factor, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0 * self.scaling_factor, 5.0 * self.scaling_factor)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay  # Introduce adaptive cognitive weight adjustment based on performance\n\n        return global_best", "name": "DynamicScalingAdaptiveCognitiveWeightQIPSO", "description": "Introduce a dynamic scaling factor to adaptively adjust the search space based on particle performance.", "configspace": "", "generation": 85, "fitness": 0.20284243488811105, "feedback": "The algorithm DynamicScalingAdaptiveCognitiveWeightQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {"aucs": [0.40052570598683046, 0.3635689218873116, 0.3696925131814689, 0.3593374062214625, 0.3641113789930517, 0.36584703561553455, 0.3680985535142539, 0.36158412220662794, 0.3632234210461318, 9.999999999998899e-05, 0.0013050465738250194, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003838722993740329, 9.999999999998899e-05, 0.0912080008598305, 0.09753435619205886, 0.09009078309795038, 0.08942776140367337, 0.1400803969083445, 0.09213859004361968, 0.1117435863111661, 0.10388509815965263, 0.11580006465641568, 0.08888111730227577, 0.10150110380201927, 0.09063284462639654, 0.10772546664316074, 0.0932747408261525, 0.09376497663357042, 0.0794586137280765, 0.07237252899613866, 0.11435691935094561, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.987881597686031, 0.9868989440722035, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876225050961304, 0.2771267796880197, 0.24557874704774485, 0.23788557685073697, 0.2295565490700021, 0.23449987476096135, 0.25872284807789014, 0.23743643468444675, 0.2646448754066678, 0.2451291339257734, 0.29986636187978843, 0.2538649527805076, 0.3042692090121989, 0.25839843512321303, 0.2528157147706027, 0.24907270222422617, 0.23650550743311782, 0.33073811263710495, 0.33862703073067946, 0.15346559977293983, 0.15833799056609643, 0.13470563773215527, 0.12227443085505985, 0.11679840952347853, 0.14462506128372987, 0.12451026505372886, 0.15601130909497518, 0.13851306225496718, 0.1499502969320876, 0.1437370222782971, 0.14832285359924313, 0.13138359625658835, 0.14072274264958828, 0.14354973437039786, 0.14723799654885128, 0.14051028808929855, 0.1301308379281112, 9.999999999998899e-05, 0.00620091089050534, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.012613735053924047, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021947000496680413, 0.059307617871185325, 0.027976382934820188, 0.08405308668337963, 0.08937587503570354, 0.008686375097159527, 0.014148999200052303, 0.10171694161217126, 0.04427849308956644, 0.09726520321999776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061323362462292974, 0.031633009103468446, 0.08984798887473333, 0.07688369362092329, 0.08631636094209627, 0.07947523398036083, 0.07469803177816392, 0.08618024481296582, 0.06602059764246682, 0.4104924861934157, 0.33937179380229243, 0.3700350545251695, 0.35203120302487045, 0.33527067274918265, 0.37912050000404196, 0.3661816189075343, 0.3757028763652934, 0.3470911517924231, 0.09665941402298972, 0.1000895891065049, 0.10607127424554585, 0.10648017656804709, 0.11275175105260093, 0.09184322167801728, 0.10269098081558792, 0.11533655664920295, 0.10721366882397088, 0.13806499806007266, 0.20040501195173233, 0.19948949410082462, 0.24260481813641233, 0.21585528858679393, 0.20632388586936035, 0.20966501113909308, 0.2332598249235025, 0.22651184046867312, 0.2622807783746146, 0.24922455452995085, 0.25606333104554113, 0.26423958634123335, 0.24578150161171586, 0.2660502607719436, 0.25646446900054154, 0.2647842431678208, 0.2782121756213153, 0.19159767032949393, 0.20901467358367476, 0.18187336280950472, 0.19297279555936975, 0.20693931922048714, 0.17417051505165837, 0.18433071936913492, 0.19753752929680446, 0.1778541778670949, 0.2119719920007057, 0.18608846146634594, 0.19300016195149905, 0.2020506685759289, 0.20161888363775238, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1905209893546752, 0.20879524452090148, 0.18854991468070537, 0.21257680158239234, 0.17601686267597905, 0.19631790371983548, 0.19508774886332825, 0.20929520206480834, 0.1739777150581271, 0.538872507219367, 0.19813847871029056, 0.1542942838476683, 0.2716377777047917, 0.20014906252793363, 0.19886997379428872, 0.2901325542201686, 0.17035826300691004, 0.49612074800833883, 0.45663795931922835, 0.15591907025611074, 0.2104652009487118, 0.4718135275452623, 0.1697204255361876, 0.5149281205622993, 0.10495207351750668, 0.10492025246060854, 0.41105830049903713, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1808295937801222, 0.18263205346989797, 0.18199967015695562, 0.18008268279955542, 0.1826910774826196, 0.18274441759078364, 0.09012463989466013, 0.09326532502151863, 0.09026291310001766, 0.07891370314408852, 0.08037210833555053, 0.09016635781501825, 0.09759343356782424, 0.0877656436182962, 0.09064137963990637]}, "mutation_prompt": null}
{"id": "c575d7f3-5ebb-41d5-ad78-48c559218be4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveCognitiveWeightQIPSO(AdaptiveCognitiveWeightQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, cognitive_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay, cognitive_weight_decay)\n        self.diversity_threshold = 0.1\n\n    def __call__(self, func):\n        def calculate_diversity(particles):\n            centroid = np.mean(particles, axis=0)\n            distance_to_centroid = np.linalg.norm(particles - centroid, axis=1)\n            return np.mean(distance_to_centroid)\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            diversity = calculate_diversity(particles)\n            self.inertia_weight = max(0.3, min(1, 1 - diversity / self.diversity_threshold))  # Dynamic adjustment of inertia weight based on diversity\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay\n\n        return global_best", "name": "EnhancedAdaptiveCognitiveWeightQIPSO", "description": "Enhance the exploration by introducing a dynamic mechanism to adjust the inertia weight based on population diversity.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_particles' is not defined\").", "error": "NameError(\"name 'initialize_particles' is not defined\")", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {}, "mutation_prompt": null}
{"id": "d2ee2a61-9dfe-4074-bbb2-6d9bf2e5c1d3", "solution": "import numpy as np\n\nclass AdaptiveCognitiveWeightQIPSO(EnhancedImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, cognitive_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay)\n        self.cognitive_weight_decay = cognitive_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay  # Introduce adaptive cognitive weight adjustment based on performance\n\n        return global_best", "name": "AdaptiveCognitiveWeightQIPSO", "description": "Improve exploration by incorporating a novel adaptive mechanism to adjust the cognitive weight based on individual particle performance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {"aucs": [0.40052570598683046, 0.3635689218873116, 0.3696925131814689, 0.3593374062214625, 0.3641113789930517, 0.36584703561553455, 0.3680985535142539, 0.36158412220662794, 0.3632234210461318, 9.999999999998899e-05, 0.0013050465738250194, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003838722993740329, 9.999999999998899e-05, 0.0912080008598305, 0.09753435619205886, 0.09009078309795038, 0.08942776140367337, 0.1400803969083445, 0.09213859004361968, 0.1117435863111661, 0.10388509815965263, 0.11580006465641568, 0.08888111730227577, 0.10150110380201927, 0.09063284462639654, 0.10772546664316074, 0.0932747408261525, 0.09376497663357042, 0.0794586137280765, 0.07237252899613866, 0.11435691935094561, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.987881597686031, 0.9868989440722035, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876225050961304, 0.2771267796880197, 0.24557874704774485, 0.23788557685073697, 0.2295565490700021, 0.23449987476096135, 0.25872284807789014, 0.23743643468444675, 0.2646448754066678, 0.2451291339257734, 0.29986636187978843, 0.2538649527805076, 0.3042692090121989, 0.25839843512321303, 0.2528157147706027, 0.24907270222422617, 0.23650550743311782, 0.33073811263710495, 0.33862703073067946, 0.15346559977293983, 0.15833799056609643, 0.13470563773215527, 0.12227443085505985, 0.11679840952347853, 0.14462506128372987, 0.12451026505372886, 0.15601130909497518, 0.13851306225496718, 0.1499502969320876, 0.1437370222782971, 0.14832285359924313, 0.13138359625658835, 0.14072274264958828, 0.14354973437039786, 0.14723799654885128, 0.14051028808929855, 0.1301308379281112, 9.999999999998899e-05, 0.00620091089050534, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.012613735053924047, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021947000496680413, 0.059307617871185325, 0.027976382934820188, 0.08405308668337963, 0.08937587503570354, 0.008686375097159527, 0.014148999200052303, 0.10171694161217126, 0.04427849308956644, 0.09726520321999776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061323362462292974, 0.031633009103468446, 0.08984798887473333, 0.07688369362092329, 0.08631636094209627, 0.07947523398036083, 0.07469803177816392, 0.08618024481296582, 0.06602059764246682, 0.4104924861934157, 0.33937179380229243, 0.3700350545251695, 0.35203120302487045, 0.33527067274918265, 0.37912050000404196, 0.3661816189075343, 0.3757028763652934, 0.3470911517924231, 0.09665941402298972, 0.1000895891065049, 0.10607127424554585, 0.10648017656804709, 0.11275175105260093, 0.09184322167801728, 0.10269098081558792, 0.11533655664920295, 0.10721366882397088, 0.13806499806007266, 0.20040501195173233, 0.19948949410082462, 0.24260481813641233, 0.21585528858679393, 0.20632388586936035, 0.20966501113909308, 0.2332598249235025, 0.22651184046867312, 0.2622807783746146, 0.24922455452995085, 0.25606333104554113, 0.26423958634123335, 0.24578150161171586, 0.2660502607719436, 0.25646446900054154, 0.2647842431678208, 0.2782121756213153, 0.19159767032949393, 0.20901467358367476, 0.18187336280950472, 0.19297279555936975, 0.20693931922048714, 0.17417051505165837, 0.18433071936913492, 0.19753752929680446, 0.1778541778670949, 0.2119719920007057, 0.18608846146634594, 0.19300016195149905, 0.2020506685759289, 0.20161888363775238, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1905209893546752, 0.20879524452090148, 0.18854991468070537, 0.21257680158239234, 0.17601686267597905, 0.19631790371983548, 0.19508774886332825, 0.20929520206480834, 0.1739777150581271, 0.538872507219367, 0.19813847871029056, 0.1542942838476683, 0.2716377777047917, 0.20014906252793363, 0.19886997379428872, 0.2901325542201686, 0.17035826300691004, 0.49612074800833883, 0.45663795931922835, 0.15591907025611074, 0.2104652009487118, 0.4718135275452623, 0.1697204255361876, 0.5149281205622993, 0.10495207351750668, 0.10492025246060854, 0.41105830049903713, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1808295937801222, 0.18263205346989797, 0.18199967015695562, 0.18008268279955542, 0.1826910774826196, 0.18274441759078364, 0.09012463989466013, 0.09326532502151863, 0.09026291310001766, 0.07891370314408852, 0.08037210833555053, 0.09016635781501825, 0.09759343356782424, 0.0877656436182962, 0.09064137963990637]}, "mutation_prompt": null}
{"id": "7c9e1ccf-744c-4cdb-af86-94354d53e3c5", "solution": "import numpy as np\n\nclass AdaptiveCognitiveWeightQIPSO(EnhancedImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, cognitive_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay)\n        self.cognitive_weight_decay = cognitive_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay  # Introduce adaptive cognitive weight adjustment based on performance\n\n        return global_best", "name": "AdaptiveCognitiveWeightQIPSO", "description": "Improve exploration by incorporating a novel adaptive mechanism to adjust the cognitive weight based on individual particle performance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {"aucs": [0.40052570598683046, 0.3635689218873116, 0.3696925131814689, 0.3593374062214625, 0.3641113789930517, 0.36584703561553455, 0.3680985535142539, 0.36158412220662794, 0.3632234210461318, 9.999999999998899e-05, 0.0013050465738250194, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003838722993740329, 9.999999999998899e-05, 0.0912080008598305, 0.09753435619205886, 0.09009078309795038, 0.08942776140367337, 0.1400803969083445, 0.09213859004361968, 0.1117435863111661, 0.10388509815965263, 0.11580006465641568, 0.08888111730227577, 0.10150110380201927, 0.09063284462639654, 0.10772546664316074, 0.0932747408261525, 0.09376497663357042, 0.0794586137280765, 0.07237252899613866, 0.11435691935094561, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.987881597686031, 0.9868989440722035, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876225050961304, 0.2771267796880197, 0.24557874704774485, 0.23788557685073697, 0.2295565490700021, 0.23449987476096135, 0.25872284807789014, 0.23743643468444675, 0.2646448754066678, 0.2451291339257734, 0.29986636187978843, 0.2538649527805076, 0.3042692090121989, 0.25839843512321303, 0.2528157147706027, 0.24907270222422617, 0.23650550743311782, 0.33073811263710495, 0.33862703073067946, 0.15346559977293983, 0.15833799056609643, 0.13470563773215527, 0.12227443085505985, 0.11679840952347853, 0.14462506128372987, 0.12451026505372886, 0.15601130909497518, 0.13851306225496718, 0.1499502969320876, 0.1437370222782971, 0.14832285359924313, 0.13138359625658835, 0.14072274264958828, 0.14354973437039786, 0.14723799654885128, 0.14051028808929855, 0.1301308379281112, 9.999999999998899e-05, 0.00620091089050534, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.012613735053924047, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021947000496680413, 0.059307617871185325, 0.027976382934820188, 0.08405308668337963, 0.08937587503570354, 0.008686375097159527, 0.014148999200052303, 0.10171694161217126, 0.04427849308956644, 0.09726520321999776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061323362462292974, 0.031633009103468446, 0.08984798887473333, 0.07688369362092329, 0.08631636094209627, 0.07947523398036083, 0.07469803177816392, 0.08618024481296582, 0.06602059764246682, 0.4104924861934157, 0.33937179380229243, 0.3700350545251695, 0.35203120302487045, 0.33527067274918265, 0.37912050000404196, 0.3661816189075343, 0.3757028763652934, 0.3470911517924231, 0.09665941402298972, 0.1000895891065049, 0.10607127424554585, 0.10648017656804709, 0.11275175105260093, 0.09184322167801728, 0.10269098081558792, 0.11533655664920295, 0.10721366882397088, 0.13806499806007266, 0.20040501195173233, 0.19948949410082462, 0.24260481813641233, 0.21585528858679393, 0.20632388586936035, 0.20966501113909308, 0.2332598249235025, 0.22651184046867312, 0.2622807783746146, 0.24922455452995085, 0.25606333104554113, 0.26423958634123335, 0.24578150161171586, 0.2660502607719436, 0.25646446900054154, 0.2647842431678208, 0.2782121756213153, 0.19159767032949393, 0.20901467358367476, 0.18187336280950472, 0.19297279555936975, 0.20693931922048714, 0.17417051505165837, 0.18433071936913492, 0.19753752929680446, 0.1778541778670949, 0.2119719920007057, 0.18608846146634594, 0.19300016195149905, 0.2020506685759289, 0.20161888363775238, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1905209893546752, 0.20879524452090148, 0.18854991468070537, 0.21257680158239234, 0.17601686267597905, 0.19631790371983548, 0.19508774886332825, 0.20929520206480834, 0.1739777150581271, 0.538872507219367, 0.19813847871029056, 0.1542942838476683, 0.2716377777047917, 0.20014906252793363, 0.19886997379428872, 0.2901325542201686, 0.17035826300691004, 0.49612074800833883, 0.45663795931922835, 0.15591907025611074, 0.2104652009487118, 0.4718135275452623, 0.1697204255361876, 0.5149281205622993, 0.10495207351750668, 0.10492025246060854, 0.41105830049903713, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1808295937801222, 0.18263205346989797, 0.18199967015695562, 0.18008268279955542, 0.1826910774826196, 0.18274441759078364, 0.09012463989466013, 0.09326532502151863, 0.09026291310001766, 0.07891370314408852, 0.08037210833555053, 0.09016635781501825, 0.09759343356782424, 0.0877656436182962, 0.09064137963990637]}, "mutation_prompt": null}
{"id": "abc01301-30e5-40ca-b327-179599f721b2", "solution": "import numpy as np\n\nclass EnhancedAdaptiveCognitiveWeightQIPSO(AdaptiveCognitiveWeightQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, cognitive_weight_decay=0.95, social_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay, cognitive_weight_decay)\n        self.social_weight_decay = social_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)\n                            self.social_weight *= self.social_weight_decay  # Introduce adaptive social weight adjustment based on performance\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay\n\n        return global_best", "name": "EnhancedAdaptiveCognitiveWeightQIPSO", "description": "Enhance exploration by introducing a dynamic mechanism to adapt the social weight based on individual particle performance.", "configspace": "", "generation": 89, "fitness": 0.20100871347862057, "feedback": "The algorithm EnhancedAdaptiveCognitiveWeightQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {"aucs": [0.40052570598683046, 0.3735325572299374, 0.35079171154038236, 0.37172244862410153, 0.37614757351989236, 0.3667146678806057, 0.371729911849102, 0.38577844919302506, 0.34790025957631576, 0.006250349802251143, 0.005105289383844913, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.013117791254235955, 9.999999999998899e-05, 0.08180934894684544, 0.13164568921456088, 0.08718673871251681, 0.09903194935917636, 0.10071999751883709, 0.09780702989604872, 0.1117435863111661, 0.10236414081472811, 0.1259356005354142, 0.08888111730227577, 0.08102426929771955, 0.08382939603505823, 0.10445219727970412, 0.11492784935850231, 0.07981402442870245, 0.0794586137280765, 0.10474582920703579, 0.10123246669201125, 0.9914233632670114, 0.9918411376044571, 0.9908645843784617, 0.9815971990461744, 0.9894734662248865, 0.9874972718588874, 0.9885150344922023, 0.987634344365981, 0.9870820517252366, 0.25152328489263553, 0.24863687983174743, 0.2657417365333328, 0.22981222015338687, 0.23449987476096135, 0.2457716329771451, 0.2534424535876415, 0.26058174176348925, 0.22577345904075274, 0.29627213593748913, 0.2506680298403816, 0.30962540049335663, 0.2845840139318432, 0.27160770898969944, 0.31748110706903165, 0.24915077899993698, 0.2627862245572603, 0.2560897761018086, 0.15346559977293983, 0.15681875434440917, 0.14778029823347372, 0.16275485523623778, 0.13895205740287142, 0.14332612004432432, 0.12451026505372886, 0.08675362587925284, 0.15167138480119813, 0.13531098105579253, 0.1572005139992576, 0.08615493149990383, 0.13138359625658835, 0.11516103994930271, 0.1742126672269373, 0.14723799654885128, 0.1431146111882321, 0.13253744176631976, 9.999999999998899e-05, 0.04183247030467796, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.016659858296587893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059307617871185325, 0.03285993982953228, 0.08849560116701183, 0.10040816990382828, 0.008686375097159527, 0.013775743256574935, 0.08469959623111722, 0.04427849308956644, 0.09825331054862385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04330809604795327, 0.04994675772610868, 0.07956052387047163, 0.07688369362092329, 0.07045621598037999, 0.07565877648707431, 0.07469803177816392, 0.09939366884808642, 0.06259755786217847, 0.35825070640597834, 0.3684996650004123, 0.37095904945341585, 0.3814092948702833, 0.33527067274918265, 0.37912050000404196, 0.3854454633073966, 0.3797579961025972, 0.3470911517924231, 0.09665941402298972, 0.11461449973528548, 0.10607127424554585, 0.0917009009471772, 0.11057105411274437, 0.09184322167801728, 0.1289050627590459, 0.09551550038186452, 0.10721366882397088, 0.16649980084708582, 0.20040501195173233, 0.2123483659983637, 0.21650986001264716, 0.21585528858679393, 0.19820458861000678, 0.21919981074410644, 0.24371710872664465, 0.19955044034816816, 0.2622807783746146, 0.2680016074652942, 0.2610514865365461, 0.26423958634123335, 0.24520372715578265, 0.27107437091646136, 0.2612715566139747, 0.25853331260752266, 0.2768141809727698, 0.18513211942172048, 0.20901467358367476, 0.17983723879014346, 0.20369151349976167, 0.19743507434195517, 0.1628291728430863, 0.1686303451761072, 0.2054032710378615, 0.2177225239271554, 0.2119719920007057, 0.19560982573941532, 0.19300016195149905, 0.2020506685759289, 0.2257424844676259, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1819497275609031, 0.19079526604104813, 0.18946942069121064, 0.19237533110245542, 0.20546832660461034, 0.18713711351926499, 0.19855889823199713, 0.196665829056619, 0.18334434653823084, 0.538872507219367, 0.16980512363753875, 0.15400082226843492, 0.2716377777047917, 0.19934830805946435, 0.19886997379428872, 0.12172300662529101, 0.17023355097601456, 0.5020550152324075, 0.5229130149681218, 0.1561587003721524, 0.2081868018035904, 0.41278958236536156, 0.16942555373730173, 0.20942005923372153, 0.10492633550282393, 0.10492025246060854, 0.39976676152694546, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.18019186212025817, 0.18953330496345044, 0.18199967015695562, 0.18008268279955542, 0.19492395295559506, 0.18274441759078364, 0.08924873749413997, 0.08497919677266252, 0.08992778791054878, 0.08947150287787131, 0.09621518010079033, 0.08426148694170499, 0.1021564882404824, 0.09465241976906613, 0.08675443497378565]}, "mutation_prompt": null}
{"id": "5239f78a-4384-4a71-90c7-7bbf496ec5e0", "solution": "import numpy as np\n\nclass AdaptiveCognitiveWeightQIPSO(EnhancedImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, cognitive_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay)\n        self.cognitive_weight_decay = cognitive_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay  # Introduce adaptive cognitive weight adjustment based on performance\n\n        return global_best", "name": "AdaptiveCognitiveWeightQIPSO", "description": "Improve exploration by incorporating a novel adaptive mechanism to adjust the cognitive weight based on individual particle performance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {"aucs": [0.40052570598683046, 0.3635689218873116, 0.3696925131814689, 0.3593374062214625, 0.3641113789930517, 0.36584703561553455, 0.3680985535142539, 0.36158412220662794, 0.3632234210461318, 9.999999999998899e-05, 0.0013050465738250194, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003838722993740329, 9.999999999998899e-05, 0.0912080008598305, 0.09753435619205886, 0.09009078309795038, 0.08942776140367337, 0.1400803969083445, 0.09213859004361968, 0.1117435863111661, 0.10388509815965263, 0.11580006465641568, 0.08888111730227577, 0.10150110380201927, 0.09063284462639654, 0.10772546664316074, 0.0932747408261525, 0.09376497663357042, 0.0794586137280765, 0.07237252899613866, 0.11435691935094561, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.987881597686031, 0.9868989440722035, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876225050961304, 0.2771267796880197, 0.24557874704774485, 0.23788557685073697, 0.2295565490700021, 0.23449987476096135, 0.25872284807789014, 0.23743643468444675, 0.2646448754066678, 0.2451291339257734, 0.29986636187978843, 0.2538649527805076, 0.3042692090121989, 0.25839843512321303, 0.2528157147706027, 0.24907270222422617, 0.23650550743311782, 0.33073811263710495, 0.33862703073067946, 0.15346559977293983, 0.15833799056609643, 0.13470563773215527, 0.12227443085505985, 0.11679840952347853, 0.14462506128372987, 0.12451026505372886, 0.15601130909497518, 0.13851306225496718, 0.1499502969320876, 0.1437370222782971, 0.14832285359924313, 0.13138359625658835, 0.14072274264958828, 0.14354973437039786, 0.14723799654885128, 0.14051028808929855, 0.1301308379281112, 9.999999999998899e-05, 0.00620091089050534, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.012613735053924047, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021947000496680413, 0.059307617871185325, 0.027976382934820188, 0.08405308668337963, 0.08937587503570354, 0.008686375097159527, 0.014148999200052303, 0.10171694161217126, 0.04427849308956644, 0.09726520321999776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061323362462292974, 0.031633009103468446, 0.08984798887473333, 0.07688369362092329, 0.08631636094209627, 0.07947523398036083, 0.07469803177816392, 0.08618024481296582, 0.06602059764246682, 0.4104924861934157, 0.33937179380229243, 0.3700350545251695, 0.35203120302487045, 0.33527067274918265, 0.37912050000404196, 0.3661816189075343, 0.3757028763652934, 0.3470911517924231, 0.09665941402298972, 0.1000895891065049, 0.10607127424554585, 0.10648017656804709, 0.11275175105260093, 0.09184322167801728, 0.10269098081558792, 0.11533655664920295, 0.10721366882397088, 0.13806499806007266, 0.20040501195173233, 0.19948949410082462, 0.24260481813641233, 0.21585528858679393, 0.20632388586936035, 0.20966501113909308, 0.2332598249235025, 0.22651184046867312, 0.2622807783746146, 0.24922455452995085, 0.25606333104554113, 0.26423958634123335, 0.24578150161171586, 0.2660502607719436, 0.25646446900054154, 0.2647842431678208, 0.2782121756213153, 0.19159767032949393, 0.20901467358367476, 0.18187336280950472, 0.19297279555936975, 0.20693931922048714, 0.17417051505165837, 0.18433071936913492, 0.19753752929680446, 0.1778541778670949, 0.2119719920007057, 0.18608846146634594, 0.19300016195149905, 0.2020506685759289, 0.20161888363775238, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1905209893546752, 0.20879524452090148, 0.18854991468070537, 0.21257680158239234, 0.17601686267597905, 0.19631790371983548, 0.19508774886332825, 0.20929520206480834, 0.1739777150581271, 0.538872507219367, 0.19813847871029056, 0.1542942838476683, 0.2716377777047917, 0.20014906252793363, 0.19886997379428872, 0.2901325542201686, 0.17035826300691004, 0.49612074800833883, 0.45663795931922835, 0.15591907025611074, 0.2104652009487118, 0.4718135275452623, 0.1697204255361876, 0.5149281205622993, 0.10495207351750668, 0.10492025246060854, 0.41105830049903713, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1808295937801222, 0.18263205346989797, 0.18199967015695562, 0.18008268279955542, 0.1826910774826196, 0.18274441759078364, 0.09012463989466013, 0.09326532502151863, 0.09026291310001766, 0.07891370314408852, 0.08037210833555053, 0.09016635781501825, 0.09759343356782424, 0.0877656436182962, 0.09064137963990637]}, "mutation_prompt": null}
{"id": "342e4ae3-e403-4d25-8703-c889ec88cf31", "solution": "import numpy as np\n\nclass EnhancedAdaptiveCognitiveWeightQIPSO(AdaptiveCognitiveWeightQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, cognitive_weight_decay=0.95, diversity_factor=0.1):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay, cognitive_weight_decay)\n        self.diversity_factor = diversity_factor\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            population_std = np.std(particles)\n            self.inertia_weight = max(0.1, min(1.0, self.inertia_weight + self.diversity_factor * population_std))\n\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay  # Introduce adaptive cognitive weight adjustment based on performance\n\n        return global_best", "name": "EnhancedAdaptiveCognitiveWeightQIPSO", "description": "Enhance exploration by introducing a dynamic mechanism to adjust the inertia weight based on population diversity.", "configspace": "", "generation": 91, "fitness": 0.1409845171468645, "feedback": "The algorithm EnhancedAdaptiveCognitiveWeightQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {"aucs": [0.1951219343916628, 0.2780755027154119, 0.26881582813406124, 0.24757192827535868, 0.18847429953565287, 0.23987455416139725, 0.22832903090572398, 0.27020775660189167, 0.24884286898990882, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07078810869067442, 0.05915302821252266, 0.04663422843830378, 0.05193878289116671, 0.05876775274905999, 0.05891562679136719, 0.06538972546200805, 0.05873258360920297, 0.06669648416458962, 0.045334559783557826, 0.0395827424343248, 0.04571847471228707, 0.06664441120785591, 0.06574581097458998, 0.03569436721117458, 0.0451969551730006, 0.03926757007609083, 0.04450190914719021, 0.9925979788840601, 0.9938514814812167, 0.9914485283868296, 0.9848731070415895, 0.9887670407420426, 0.9855175417599715, 0.99168740035143, 0.9909495984427026, 0.9908881960014277, 0.10811470081607188, 0.08009402038115188, 0.11446261372019784, 0.11290981476743545, 0.11903185092381008, 0.13522227931587016, 0.08106818411006766, 0.10833529203400316, 0.11308833690535047, 0.15991079634652394, 0.12728028057289542, 0.12422581999924476, 0.14756804004696822, 0.14424129186385404, 0.16064292304354855, 0.11076913993017401, 0.1267856825553999, 0.17265760888691717, 0.06410565679838143, 0.02822463523983154, 0.009679416952161568, 0.0063461246411999905, 0.07851801142247461, 0.04711727306538638, 0.061598563119813154, 9.999999999998899e-05, 0.026350534649423718, 0.0763022429591842, 0.03429391355054945, 9.999999999998899e-05, 0.0019040590319132633, 0.009140374084936953, 0.025373754396224246, 0.03174630878864393, 0.04951710737396775, 0.021710673510152434, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03635469094915478, 0.0031631672845930936, 0.0367428887003145, 0.08006053086578979, 9.999999999998899e-05, 9.999999999998899e-05, 0.0674060646073642, 0.08495704932294701, 0.032321472739613055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005475920665152123, 0.0007059833927615111, 0.04232028536434407, 0.008157169093539585, 0.012092509697238851, 0.007046802231194138, 0.0035374618275755276, 0.03665506325375789, 0.008257800083414257, 0.2547923986065176, 0.23176897903106486, 0.22912922135763725, 0.24392720150201352, 0.24633669822383697, 0.2502589534607268, 0.22955734223072, 0.2404067799163122, 0.20717029356171746, 0.04804008516107061, 0.050699093622046165, 0.0626441610380516, 0.06228735765405924, 0.050576684761195256, 0.05815226840157861, 0.060049145484503574, 0.04482094515691082, 0.04877804022094512, 0.128177377859517, 0.15622804801365164, 0.14664565187144196, 0.24024856158966224, 0.14187084913305792, 0.17168906863011124, 0.1477081974807003, 0.1480369884927022, 0.1373736421886892, 0.16795858370309957, 0.16890932935643665, 0.17232619852094633, 0.1845564089505518, 0.1850377216848439, 0.1940632664472859, 0.18366588960861963, 0.20185516826441408, 0.16408879834033174, 0.12734111717741614, 0.12978967916780038, 0.14754675916011695, 0.12918795795154525, 0.1271347059983342, 0.12938730472001514, 0.12112588929032941, 0.14170797470237118, 0.11557293536695834, 0.1721628987628201, 0.13644715134275354, 0.17856630521157824, 0.15317610737834053, 0.1500023122954599, 0.15731390873356121, 0.16231362309282427, 0.17482702340649992, 0.1701803418128056, 0.15431631468299423, 0.1605762369363225, 0.17129901652271984, 0.14977868396261762, 0.14972695984812467, 0.14524774753938785, 0.15569938049051202, 0.17226233083386544, 0.1580683399491194, 0.2535214492736514, 0.1634274936893224, 0.14344160148737195, 0.181845188819455, 0.1673476972382738, 0.19836120383690226, 0.09757472632793596, 0.1635812751979041, 0.17311915367755593, 0.17652924100468903, 0.16066344509141695, 0.10917562254539248, 0.26900835336494444, 0.18100447650533924, 0.16915833993466878, 0.19388403975893365, 0.18998454771587725, 0.19208705006133064, 0.18043295739083898, 0.2046282086493425, 0.1916535981895221, 0.1839733793300936, 0.1903483448153811, 0.18071760607341203, 0.16975013145995743, 0.21058773307105372, 0.18768479176678665, 0.06181777552437984, 0.053570579783586814, 0.08097896202235333, 0.05484317769350455, 0.06277223218448202, 0.06768840933951104, 0.051277554211329734, 0.057938466157881896, 0.05039260025039549]}, "mutation_prompt": null}
{"id": "8d87a0c2-713b-429c-87b4-489a6ab32638", "solution": "import numpy as np\n\nclass EnhancedAdaptiveCognitiveWeightQIPSO(EnhancedImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, cognitive_weight_decay=0.95, mutation_rate=0.1):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay)\n        self.cognitive_weight_decay = cognitive_weight_decay\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                if np.random.rand() < self.mutation_rate:\n                    particles[i] = np.clip(particles[i] + np.random.normal(0, 0.1, size=self.dim), -5.0, 5.0)  # Introduce mutation based on historical performance\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay  # Introduce adaptive cognitive weight adjustment based on performance\n\n        return global_best", "name": "EnhancedAdaptiveCognitiveWeightQIPSO", "description": "Enhance the exploration capability by introducing a dynamic mutation mechanism that perturbs particle positions based on their historical performance.", "configspace": "", "generation": 92, "fitness": 0.19867316706599936, "feedback": "The algorithm EnhancedAdaptiveCognitiveWeightQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {"aucs": [0.35504846864310424, 0.3560090161096219, 0.4329947722294605, 0.35176972248689475, 0.35719059200641523, 0.39499395293927486, 0.3645477826982303, 0.3983587077193309, 0.3593958329135304, 0.03067353770065495, 0.014080966898579406, 0.001619478483292136, 0.017717138942902055, 0.010379401913404918, 9.999999999998899e-05, 0.020453206251263345, 9.999999999998899e-05, 9.999999999998899e-05, 0.10888783432954985, 0.12309389197555554, 0.07062086837975201, 0.09183047363550889, 0.09156176314412712, 0.10692199861325358, 0.11267719789625585, 0.08991558826216695, 0.11785146759822707, 0.09020920989162862, 0.08673905427300865, 0.09248132728314562, 0.10214233542020323, 0.09614877972990321, 0.07322301792768082, 0.08756568068794857, 0.10818939438145625, 0.08843474893399073, 0.9917142809846972, 0.9920796922467069, 0.9922496958465424, 0.9852066849771749, 0.9908675555269891, 0.9870310493340007, 0.9906970137286993, 0.9906138139357028, 0.9906974695602978, 0.2503641460258118, 0.22487457320240667, 0.21695350553288395, 0.27957770998035325, 0.2947782159287907, 0.25288467791483227, 0.25308322079616674, 0.23223422411584338, 0.2301140434137311, 0.2606569332369736, 0.23265177057438435, 0.2693343831242996, 0.2740356439655677, 0.21574862894534952, 0.32213745820289164, 0.28210952996324434, 0.2969566857174828, 0.26049723947117587, 0.1468416931123776, 0.14452564545692403, 0.13270884851334408, 0.13461732475710575, 0.12983026307221224, 0.120519187841575, 0.13260030438238213, 0.1430778378645149, 0.14250893552795263, 0.14076413664752163, 0.1455358159791762, 0.14548251074658292, 0.13783483628415139, 0.09486277398337184, 0.12084923722215879, 0.14131675776714292, 0.13661826572609626, 0.1495474392972599, 0.00043820768029545487, 9.999999999998899e-05, 9.999999999998899e-05, 0.007265471720227512, 9.999999999998899e-05, 0.0036427482750719387, 9.999999999998899e-05, 9.999999999998899e-05, 0.007141262565700135, 0.22610021048965667, 0.09249712212526195, 0.12448142864572187, 0.06829051781813811, 0.018361465716361658, 0.0346147638211014, 0.11946977163905592, 0.09334045746404229, 0.038854547444205134, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06679197384203939, 0.052244516145097286, 0.08307807597404626, 0.07189566528231295, 0.06455009989429616, 0.11979298549327155, 0.06994903342492276, 0.047755874026001566, 0.060652196374037515, 0.3582749859095965, 0.3902968985793964, 0.3734700791097191, 0.382127640668777, 0.35652066841168684, 0.37777884517504945, 0.35391258926278213, 0.37461968084067876, 0.3403733048730303, 0.12811863844669902, 0.0878580023400467, 0.10949641495889739, 0.09955627156321256, 0.09570807168677475, 0.13503851023228453, 0.08247655731162395, 0.12119964091784119, 0.09948936925060847, 0.1732364786983066, 0.17045656567952394, 0.18454615096877547, 0.21397050174088916, 0.21571861403022097, 0.15269144411733737, 0.17040205824115706, 0.22233503207292882, 0.21572514304771917, 0.261117442787944, 0.2545146231175087, 0.2641275212249249, 0.276995127664187, 0.23388177172387237, 0.26147854127948456, 0.2541955113072233, 0.25589169635747244, 0.18900086980493414, 0.20059911365850125, 0.1919911160782516, 0.19295372622353157, 0.15775367396202022, 0.2189307923852426, 0.21310505290394932, 0.20423997880758338, 0.18888435202603238, 0.16809524215068827, 0.2375728242206494, 0.19676212420497985, 0.22282360531537782, 0.2099791198457316, 0.22093001068363605, 0.2042949212057198, 0.20220485464534588, 0.19928135941147718, 0.21360350387870652, 0.19349064902248658, 0.19683399932320722, 0.1838431026094801, 0.18549490025419313, 0.1880204817967318, 0.19824578111375768, 0.19899660407444097, 0.19476780531408688, 0.1877720191463207, 0.4965023935209564, 0.17619490087988654, 0.15403498375412183, 0.4937797405469254, 0.1994636741645951, 0.19783513085128823, 0.1247048441154418, 0.1698699159787227, 0.21205128822661712, 0.5211611386965929, 0.15525486095138386, 0.07328045009143935, 0.10479249904180066, 0.3916231113731654, 0.21032573932405507, 0.10476942644511478, 0.10492584440765296, 0.25289049606102787, 0.17964700220540475, 0.18666098161617173, 0.17787492825900642, 0.18854885851159764, 0.18119508612478796, 0.1755873963058986, 0.2010039881664688, 0.20371654675547313, 0.19170165318683152, 0.09216496415208852, 0.08656261732569348, 0.09369301459824186, 0.09947710248780184, 0.08123257658749095, 0.09269360465926679, 0.08667734028387108, 0.08136345982564652, 0.08524328251304836]}, "mutation_prompt": null}
{"id": "14346d84-c436-486b-a34f-d633dbc29739", "solution": "import numpy as np\n\nclass EnhancedAdaptiveCognitiveWeightQIPSO(AdaptiveCognitiveWeightQIPSO):\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1) * np.tanh((best_values[i] - best_values[global_best_idx]) * 10)  # Adjust social weight dynamically\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay\n\n        return global_best", "name": "EnhancedAdaptiveCognitiveWeightQIPSO", "description": "Introduce a dynamic adjustment to the social weight based on the population performance to enhance global search capability.", "configspace": "", "generation": 93, "fitness": 0.2014149356544731, "feedback": "The algorithm EnhancedAdaptiveCognitiveWeightQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {"aucs": [0.40052570598683046, 0.4231864723524741, 0.3613538314124938, 0.3738892335888273, 0.36984810317312555, 0.36568949875265566, 0.38248556262869393, 0.3612720339372373, 0.37093515980602665, 0.015925643474292372, 0.010707263183769689, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.020896585653334077, 9.999999999998899e-05, 0.0834927913672564, 0.10733655678319887, 0.0954174046919487, 0.08930265659018677, 0.07693861295463544, 0.10168799920579263, 0.1117435863111661, 0.12311278442770146, 0.11557734578718082, 0.08888111730227577, 0.08686488571979711, 0.08996679398689866, 0.09782525113991192, 0.09664836323466408, 0.07940841283812605, 0.0794586137280765, 0.10897486536212075, 0.10664951536338574, 0.9914233632670114, 0.9925989938146544, 0.9917956025862992, 0.988812223287089, 0.9871875458470184, 0.9869557827026451, 0.9890093525983336, 0.9895714646962552, 0.9877017874636261, 0.2862260250460905, 0.2861663308361101, 0.2574348162247133, 0.23088218724412168, 0.23449987476096135, 0.25791884457711167, 0.26268975949423434, 0.248008011229368, 0.26783487001829775, 0.29150084313462676, 0.24579475806172713, 0.3234382518236487, 0.21289054426568632, 0.26525008665303584, 0.26777789910188965, 0.2666054430689413, 0.28157616929960394, 0.2760556192393734, 0.15346559977293983, 0.14145905630251832, 0.13957002627172077, 0.166692361429286, 0.13046376687479277, 0.14789617093036944, 0.12451026505372886, 0.0924221427360804, 0.15120851857144513, 0.1295768856938424, 0.15530641855152627, 0.14914768944098755, 0.13138359625658835, 0.14620818817441983, 0.11953482278335359, 0.14723799654885128, 0.16154461993220504, 0.13712198059288494, 9.999999999998899e-05, 0.026281937120524734, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.05984648980284346, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059307617871185325, 0.029327667306143446, 0.08405308668337963, 0.11122371263248132, 0.008686375097159527, 0.01591213091899446, 0.0832572915546852, 0.04427849308956644, 0.09067045084267034, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.047211657603068446, 0.05324213710683656, 0.07540945409405286, 0.07688369362092329, 0.06001446841001001, 0.07891310368843119, 0.07469803177816392, 0.07319490201601597, 0.0636215910014909, 0.3519982274564183, 0.35480899736243854, 0.3700350545251695, 0.3409943119366933, 0.33527067274918265, 0.37912050000404196, 0.3606461128670313, 0.361040172524968, 0.3470911517924231, 0.09665941402298972, 0.103395403984055, 0.10607127424554585, 0.10695640630908654, 0.1097400240828158, 0.09184322167801728, 0.09162230239586444, 0.09985874615450663, 0.10721366882397088, 0.15463325905312775, 0.20040501195173233, 0.20368866321225887, 0.22530555931979257, 0.21585528858679393, 0.1801711744794695, 0.22859813147707442, 0.24811427547195908, 0.22113705286062424, 0.2622807783746146, 0.2714332115401892, 0.25544086783038156, 0.26423958634123335, 0.25319357886011307, 0.2695732322073042, 0.24044474656531423, 0.2657432583877716, 0.2717132605390108, 0.19136105954170968, 0.20901467358367476, 0.18025010600729363, 0.21848984337565858, 0.20669188492738977, 0.16280241554581554, 0.20173473211179493, 0.2069132522142566, 0.20337129878524052, 0.2119719920007057, 0.18850068183001367, 0.19300016195149905, 0.2020506685759289, 0.1960171874290807, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.19133915266582568, 0.20647167577755443, 0.188830545352348, 0.18398609510580255, 0.20783888261469374, 0.17817442316079923, 0.21629197166931358, 0.19680653069486265, 0.18900036733917824, 0.538872507219367, 0.19768275736887275, 0.15387421378581168, 0.2716377777047917, 0.1979691540613231, 0.19886997379428872, 0.12189273824839364, 0.17023371601850357, 0.5057969988800494, 0.42739457354539223, 0.15617230310411978, 0.21010590889262215, 0.46149709386061244, 0.16976256055246575, 0.21029235214360031, 0.1051801247504236, 0.10492025246060854, 0.4530630522039293, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.184459493914509, 0.21234443656712232, 0.18199967015695562, 0.18008268279955542, 0.20066955287543475, 0.18274441759078364, 0.0901226645418266, 0.08882766071644765, 0.0891714663366302, 0.07526538850514697, 0.08873167850081898, 0.08987063475989254, 0.09336381149482875, 0.07984584227840752, 0.09508911691537503]}, "mutation_prompt": null}
{"id": "deb4148e-d48e-4425-b958-592bddadaf6d", "solution": "import numpy as np\n\nclass AdaptiveCognitiveWeightQIPSO(EnhancedImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, cognitive_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay)\n        self.cognitive_weight_decay = cognitive_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay  # Introduce adaptive cognitive weight adjustment based on performance\n\n        return global_best", "name": "AdaptiveCognitiveWeightQIPSO", "description": "Improve exploration by incorporating a novel adaptive mechanism to adjust the cognitive weight based on individual particle performance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {"aucs": [0.40052570598683046, 0.3635689218873116, 0.3696925131814689, 0.3593374062214625, 0.3641113789930517, 0.36584703561553455, 0.3680985535142539, 0.36158412220662794, 0.3632234210461318, 9.999999999998899e-05, 0.0013050465738250194, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003838722993740329, 9.999999999998899e-05, 0.0912080008598305, 0.09753435619205886, 0.09009078309795038, 0.08942776140367337, 0.1400803969083445, 0.09213859004361968, 0.1117435863111661, 0.10388509815965263, 0.11580006465641568, 0.08888111730227577, 0.10150110380201927, 0.09063284462639654, 0.10772546664316074, 0.0932747408261525, 0.09376497663357042, 0.0794586137280765, 0.07237252899613866, 0.11435691935094561, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.987881597686031, 0.9868989440722035, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876225050961304, 0.2771267796880197, 0.24557874704774485, 0.23788557685073697, 0.2295565490700021, 0.23449987476096135, 0.25872284807789014, 0.23743643468444675, 0.2646448754066678, 0.2451291339257734, 0.29986636187978843, 0.2538649527805076, 0.3042692090121989, 0.25839843512321303, 0.2528157147706027, 0.24907270222422617, 0.23650550743311782, 0.33073811263710495, 0.33862703073067946, 0.15346559977293983, 0.15833799056609643, 0.13470563773215527, 0.12227443085505985, 0.11679840952347853, 0.14462506128372987, 0.12451026505372886, 0.15601130909497518, 0.13851306225496718, 0.1499502969320876, 0.1437370222782971, 0.14832285359924313, 0.13138359625658835, 0.14072274264958828, 0.14354973437039786, 0.14723799654885128, 0.14051028808929855, 0.1301308379281112, 9.999999999998899e-05, 0.00620091089050534, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.012613735053924047, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021947000496680413, 0.059307617871185325, 0.027976382934820188, 0.08405308668337963, 0.08937587503570354, 0.008686375097159527, 0.014148999200052303, 0.10171694161217126, 0.04427849308956644, 0.09726520321999776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061323362462292974, 0.031633009103468446, 0.08984798887473333, 0.07688369362092329, 0.08631636094209627, 0.07947523398036083, 0.07469803177816392, 0.08618024481296582, 0.06602059764246682, 0.4104924861934157, 0.33937179380229243, 0.3700350545251695, 0.35203120302487045, 0.33527067274918265, 0.37912050000404196, 0.3661816189075343, 0.3757028763652934, 0.3470911517924231, 0.09665941402298972, 0.1000895891065049, 0.10607127424554585, 0.10648017656804709, 0.11275175105260093, 0.09184322167801728, 0.10269098081558792, 0.11533655664920295, 0.10721366882397088, 0.13806499806007266, 0.20040501195173233, 0.19948949410082462, 0.24260481813641233, 0.21585528858679393, 0.20632388586936035, 0.20966501113909308, 0.2332598249235025, 0.22651184046867312, 0.2622807783746146, 0.24922455452995085, 0.25606333104554113, 0.26423958634123335, 0.24578150161171586, 0.2660502607719436, 0.25646446900054154, 0.2647842431678208, 0.2782121756213153, 0.19159767032949393, 0.20901467358367476, 0.18187336280950472, 0.19297279555936975, 0.20693931922048714, 0.17417051505165837, 0.18433071936913492, 0.19753752929680446, 0.1778541778670949, 0.2119719920007057, 0.18608846146634594, 0.19300016195149905, 0.2020506685759289, 0.20161888363775238, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1905209893546752, 0.20879524452090148, 0.18854991468070537, 0.21257680158239234, 0.17601686267597905, 0.19631790371983548, 0.19508774886332825, 0.20929520206480834, 0.1739777150581271, 0.538872507219367, 0.19813847871029056, 0.1542942838476683, 0.2716377777047917, 0.20014906252793363, 0.19886997379428872, 0.2901325542201686, 0.17035826300691004, 0.49612074800833883, 0.45663795931922835, 0.15591907025611074, 0.2104652009487118, 0.4718135275452623, 0.1697204255361876, 0.5149281205622993, 0.10495207351750668, 0.10492025246060854, 0.41105830049903713, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1808295937801222, 0.18263205346989797, 0.18199967015695562, 0.18008268279955542, 0.1826910774826196, 0.18274441759078364, 0.09012463989466013, 0.09326532502151863, 0.09026291310001766, 0.07891370314408852, 0.08037210833555053, 0.09016635781501825, 0.09759343356782424, 0.0877656436182962, 0.09064137963990637]}, "mutation_prompt": null}
{"id": "1464c0a0-3821-4453-b2f8-78b93b36dede", "solution": "import numpy as np\n\nclass AdaptiveCognitiveWeightQIPSO(EnhancedImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, cognitive_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay)\n        self.cognitive_weight_decay = cognitive_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay  # Introduce adaptive cognitive weight adjustment based on performance\n\n        return global_best", "name": "AdaptiveCognitiveWeightQIPSO", "description": "Improve exploration by incorporating a novel adaptive mechanism to adjust the cognitive weight based on individual particle performance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {"aucs": [0.40052570598683046, 0.3635689218873116, 0.3696925131814689, 0.3593374062214625, 0.3641113789930517, 0.36584703561553455, 0.3680985535142539, 0.36158412220662794, 0.3632234210461318, 9.999999999998899e-05, 0.0013050465738250194, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003838722993740329, 9.999999999998899e-05, 0.0912080008598305, 0.09753435619205886, 0.09009078309795038, 0.08942776140367337, 0.1400803969083445, 0.09213859004361968, 0.1117435863111661, 0.10388509815965263, 0.11580006465641568, 0.08888111730227577, 0.10150110380201927, 0.09063284462639654, 0.10772546664316074, 0.0932747408261525, 0.09376497663357042, 0.0794586137280765, 0.07237252899613866, 0.11435691935094561, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.987881597686031, 0.9868989440722035, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876225050961304, 0.2771267796880197, 0.24557874704774485, 0.23788557685073697, 0.2295565490700021, 0.23449987476096135, 0.25872284807789014, 0.23743643468444675, 0.2646448754066678, 0.2451291339257734, 0.29986636187978843, 0.2538649527805076, 0.3042692090121989, 0.25839843512321303, 0.2528157147706027, 0.24907270222422617, 0.23650550743311782, 0.33073811263710495, 0.33862703073067946, 0.15346559977293983, 0.15833799056609643, 0.13470563773215527, 0.12227443085505985, 0.11679840952347853, 0.14462506128372987, 0.12451026505372886, 0.15601130909497518, 0.13851306225496718, 0.1499502969320876, 0.1437370222782971, 0.14832285359924313, 0.13138359625658835, 0.14072274264958828, 0.14354973437039786, 0.14723799654885128, 0.14051028808929855, 0.1301308379281112, 9.999999999998899e-05, 0.00620091089050534, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.012613735053924047, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021947000496680413, 0.059307617871185325, 0.027976382934820188, 0.08405308668337963, 0.08937587503570354, 0.008686375097159527, 0.014148999200052303, 0.10171694161217126, 0.04427849308956644, 0.09726520321999776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061323362462292974, 0.031633009103468446, 0.08984798887473333, 0.07688369362092329, 0.08631636094209627, 0.07947523398036083, 0.07469803177816392, 0.08618024481296582, 0.06602059764246682, 0.4104924861934157, 0.33937179380229243, 0.3700350545251695, 0.35203120302487045, 0.33527067274918265, 0.37912050000404196, 0.3661816189075343, 0.3757028763652934, 0.3470911517924231, 0.09665941402298972, 0.1000895891065049, 0.10607127424554585, 0.10648017656804709, 0.11275175105260093, 0.09184322167801728, 0.10269098081558792, 0.11533655664920295, 0.10721366882397088, 0.13806499806007266, 0.20040501195173233, 0.19948949410082462, 0.24260481813641233, 0.21585528858679393, 0.20632388586936035, 0.20966501113909308, 0.2332598249235025, 0.22651184046867312, 0.2622807783746146, 0.24922455452995085, 0.25606333104554113, 0.26423958634123335, 0.24578150161171586, 0.2660502607719436, 0.25646446900054154, 0.2647842431678208, 0.2782121756213153, 0.19159767032949393, 0.20901467358367476, 0.18187336280950472, 0.19297279555936975, 0.20693931922048714, 0.17417051505165837, 0.18433071936913492, 0.19753752929680446, 0.1778541778670949, 0.2119719920007057, 0.18608846146634594, 0.19300016195149905, 0.2020506685759289, 0.20161888363775238, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1905209893546752, 0.20879524452090148, 0.18854991468070537, 0.21257680158239234, 0.17601686267597905, 0.19631790371983548, 0.19508774886332825, 0.20929520206480834, 0.1739777150581271, 0.538872507219367, 0.19813847871029056, 0.1542942838476683, 0.2716377777047917, 0.20014906252793363, 0.19886997379428872, 0.2901325542201686, 0.17035826300691004, 0.49612074800833883, 0.45663795931922835, 0.15591907025611074, 0.2104652009487118, 0.4718135275452623, 0.1697204255361876, 0.5149281205622993, 0.10495207351750668, 0.10492025246060854, 0.41105830049903713, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1808295937801222, 0.18263205346989797, 0.18199967015695562, 0.18008268279955542, 0.1826910774826196, 0.18274441759078364, 0.09012463989466013, 0.09326532502151863, 0.09026291310001766, 0.07891370314408852, 0.08037210833555053, 0.09016635781501825, 0.09759343356782424, 0.0877656436182962, 0.09064137963990637]}, "mutation_prompt": null}
{"id": "ea8200b4-f9c7-47b1-b47a-07b54ec2a7a6", "solution": "import numpy as np\n\nclass EnhancedAdaptiveCognitiveWeightQIPSO(EnhancedImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, cognitive_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay)\n        self.cognitive_weight_decay = cognitive_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            diversity = np.std(particles)\n            inertia_weight = np.clip(1 / diversity, 0.1, 0.9)  # Adapt inertia weight based on population diversity\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay  # Introduce adaptive cognitive weight adjustment based on performance\n\n        return global_best", "name": "EnhancedAdaptiveCognitiveWeightQIPSO", "description": "Enhance exploration by introducing a dynamic mechanism to adaptively adjust the inertia weight based on the population's diversity.", "configspace": "", "generation": 96, "fitness": 0.19618720771112208, "feedback": "The algorithm EnhancedAdaptiveCognitiveWeightQIPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {"aucs": [0.3691994326484156, 0.3323537173437934, 0.35245306503009766, 0.3623799199937606, 0.3455170092707013, 0.4035377090396758, 0.36070206605237365, 0.3465682845993332, 0.3446225985255038, 0.005229805165821055, 9.999999999998899e-05, 9.999999999998899e-05, 0.025373737952044784, 0.038342389899455154, 9.999999999998899e-05, 9.999999999998899e-05, 0.0323540615014859, 9.999999999998899e-05, 0.10344548397194775, 0.10319453368395737, 0.09152506212273293, 0.11844586229696175, 0.08958682389851269, 0.12559273536686977, 0.07638644925034788, 0.09618328977479884, 0.09328170065508334, 0.07848898298426155, 0.10159564871030091, 0.08046267386679351, 0.08425329490457156, 0.07543058443231043, 0.08970640608055003, 0.08668632325044223, 0.10216644411308351, 0.08322068727693277, 0.9907299279669931, 0.9912769885313895, 0.990900210645311, 0.9810751546309695, 0.9878726002915972, 0.9850061875041606, 0.988233195426609, 0.98639865590897, 0.9881312227825306, 0.23782268104199078, 0.2539210569323903, 0.2475557979710068, 0.22838672191823528, 0.2519747005335564, 0.28584317447273644, 0.23476689890590152, 0.24850653705500458, 0.22470134382036222, 0.2469523869780642, 0.2565534312581519, 0.21822408320899245, 0.2763441732943366, 0.24648934511354925, 0.24967409190644907, 0.2609116119652689, 0.26693126774008546, 0.23143001642498606, 0.1433064572354249, 0.13594340744033306, 0.16714333455490882, 0.11915440387284781, 0.14034133340700772, 0.12776877149707466, 0.14282946948126574, 0.10293585100030855, 0.14544321907479496, 0.09997646914220715, 0.11347636371005887, 0.10058818321853547, 0.09959256691355789, 0.09175383578274265, 0.12027192570396639, 0.13281670605858276, 0.1266468721040388, 0.13146587364222595, 9.999999999998899e-05, 0.00678751134834199, 0.01755290857586711, 0.00031429206462851855, 9.999999999998899e-05, 0.02290160068991809, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07756823281253744, 0.040417898810775066, 0.08592020439415793, 0.09965839267749976, 0.003040718098827555, 0.01808112403736728, 0.09582468261187571, 0.06847574831535785, 0.06287338952317878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06940540323683453, 0.06514700674815155, 0.08367948608837683, 0.06798211612028138, 0.08999110985080894, 0.08545147028093103, 0.07133341182523689, 0.07618196172781877, 0.07214836577052808, 0.3350797672243463, 0.3621746145659225, 0.33914177140120705, 0.3518803641072398, 0.3521323918132385, 0.3703571939061041, 0.331666180302008, 0.35953834765264936, 0.3308400620510884, 0.16151750196038195, 0.09397962023538531, 0.11073023841742702, 0.11613880143090849, 0.08971702802105896, 0.09846355100701798, 0.09769905896781017, 0.1063987366435869, 0.10719288390478143, 0.1995625625377283, 0.21865853522718937, 0.14487452206202323, 0.16649019708263235, 0.1836111204419646, 0.1977320467337006, 0.20731645275579402, 0.17663557684390763, 0.2064595793928684, 0.2595915137511666, 0.23023207744567886, 0.255483601010426, 0.24605421487415458, 0.24451064015793078, 0.25419861099238084, 0.2645258214362408, 0.2576910413160325, 0.2529704060708867, 0.20432447912619423, 0.19521306198704347, 0.20047220501258933, 0.2066424956513383, 0.19293223311805874, 0.17157820281378022, 0.14192185572180283, 0.21112316050981628, 0.20937531064006665, 0.19512320295195518, 0.19144999109997207, 0.21998490752166233, 0.23517439577393928, 0.19832510656334512, 0.17118374576481743, 0.20791549041316315, 0.22305734778879738, 0.19324483782617574, 0.19933701194152031, 0.18947308035376176, 0.2038933028244314, 0.2022584606202703, 0.2044656627014605, 0.19764245986351714, 0.20084259200841292, 0.19272693796036877, 0.18253217911268382, 0.5294960045140844, 0.168090833120501, 0.15406848128244288, 0.4672356904621392, 0.20120028931825507, 0.1970262074739536, 0.12078449599267893, 0.1701912757702061, 0.5182713350742603, 0.36542760410940966, 0.15605832158806987, 0.11142541656683846, 0.45536391161188383, 0.16970619569032985, 0.21040980509565865, 0.10508742878582777, 0.10511621258247328, 0.3907119247241855, 0.1855277996174951, 0.17703100505393354, 0.18437303072566713, 0.1763537749602434, 0.20116193530834448, 0.19661218138903136, 0.1895297248221839, 0.18002762352032387, 0.18785053802199048, 0.07439217895170891, 0.09545899805240299, 0.08314981305387958, 0.08551552131338636, 0.08219179621603889, 0.09132287025055918, 0.09048449908633216, 0.09908677096616625, 0.09824269177196276]}, "mutation_prompt": null}
{"id": "c3930520-6d96-4371-9fa4-5781fdc63cfe", "solution": "import numpy as np\n\nclass EnhancedAdaptiveCognitiveWeightQIPSO(EnhancedImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, cognitive_weight_decay=0.95, cognitive_scaling_factor=0.1):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay)\n        self.cognitive_weight_decay = cognitive_weight_decay\n        self.cognitive_scaling_factor = cognitive_scaling_factor\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_scaling = self.cognitive_weight * self.cognitive_scaling_factor * (best_values[i] - current_value)  # Dynamic cognitive weight scaling based on particle performance\n                cognitive_component = cognitive_scaling * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay  # Introduce adaptive cognitive weight adjustment based on performance\n\n        return global_best\n", "name": "EnhancedAdaptiveCognitiveWeightQIPSO", "description": "Enhance the exploration-exploitation balance by introducing a dynamic scaling factor for the cognitive weight based on the particle performance. ", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'current_value' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'current_value' referenced before assignment\")", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {}, "mutation_prompt": null}
{"id": "1d669462-3992-4ee9-9621-8c4ab46e985b", "solution": "import numpy as np\n\nclass DynamicAdjustmentQIPSO(EnhancedImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, cognitive_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay)\n        self.social_weight_decay = 0.95\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight *= self.social_weight_decay\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay\n                            if current_value < 0.7:  # Dynamic adjustment based on performance\n                                self.social_weight += 0.1\n                                self.quantum_factor_decay = max(0.9, self.quantum_factor_decay - 0.05)\n                                self.cognitive_weight_decay = max(0.9, self.cognitive_weight_decay - 0.05)\n\n        return global_best", "name": "DynamicAdjustmentQIPSO", "description": "Refine the algorithm by introducing dynamic adjustment of social weight and quantum factor based on individual particle performance.", "configspace": "", "generation": 98, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'DynamicAdjustmentQIPSO' object has no attribute 'cognitive_weight_decay'\").", "error": "AttributeError(\"'DynamicAdjustmentQIPSO' object has no attribute 'cognitive_weight_decay'\")", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {}, "mutation_prompt": null}
{"id": "d753d1f8-cc39-4b49-8054-cf38595c2316", "solution": "import numpy as np\n\nclass AdaptiveCognitiveWeightQIPSO(EnhancedImprovedQIPSO):\n    def __init__(self, budget, dim, num_particles=30, inertia_weight=0.5, cognitive_weight=1.5, social_weight=1.5, quantum_factor=0.5, quantum_factor_decay=0.95, inertia_weight_decay=0.95, cognitive_weight_decay=0.95):\n        super().__init__(budget, dim, num_particles, inertia_weight, cognitive_weight, social_weight, quantum_factor, quantum_factor_decay, inertia_weight_decay)\n        self.cognitive_weight_decay = cognitive_weight_decay\n\n    def __call__(self, func):\n        def initialize_particles():\n            return np.random.uniform(-5.0, 5.0, size=(self.num_particles, self.dim))\n\n        particles = initialize_particles()\n        velocities = np.zeros((self.num_particles, self.dim))\n        best_positions = particles.copy()\n        best_values = np.array([func(p) for p in best_positions])\n        global_best_idx = np.argmin(best_values)\n        global_best = best_positions[global_best_idx].copy()\n\n        for _ in range(self.budget):\n            for i in range(self.num_particles):\n                cognitive_component = self.cognitive_weight * np.random.rand(self.dim) * (best_positions[i] - particles[i])\n                social_component = self.social_weight * np.random.rand(self.dim) * (global_best - particles[i])\n                quantum_influence = self.quantum_factor * np.random.uniform(-1, 1, size=self.dim)\n                velocities[i] = self.inertia_weight * velocities[i] + cognitive_component + social_component + quantum_influence\n                particles[i] = np.clip(particles[i] + velocities[i], -5.0, 5.0)\n                current_value = func(particles[i])\n                if current_value < best_values[i]:\n                    best_values[i] = current_value\n                    best_positions[i] = particles[i].copy()\n                    if current_value < best_values[global_best_idx]:\n                        global_best_idx = i\n                        global_best = particles[i].copy()\n                        if np.random.rand() < 0.1:  # 10% chance\n                            self.quantum_factor *= self.quantum_factor_decay\n                            self.social_weight += np.random.normal(0, 0.1)\n                            self.inertia_weight *= self.inertia_weight_decay\n                            self.cognitive_weight *= self.cognitive_weight_decay  # Introduce adaptive cognitive weight adjustment based on performance\n\n        return global_best", "name": "AdaptiveCognitiveWeightQIPSO", "description": "Improve exploration by incorporating a novel adaptive mechanism to adjust the cognitive weight based on individual particle performance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0691578a-6b30-49c9-b91f-a4226cd0c0fb", "metadata": {"aucs": [0.40052570598683046, 0.3635689218873116, 0.3696925131814689, 0.3593374062214625, 0.3641113789930517, 0.36584703561553455, 0.3680985535142539, 0.36158412220662794, 0.3632234210461318, 9.999999999998899e-05, 0.0013050465738250194, 9.999999999998899e-05, 9.999999999998899e-05, 0.010410662151413952, 9.999999999998899e-05, 0.00013303892551053131, 0.003838722993740329, 9.999999999998899e-05, 0.0912080008598305, 0.09753435619205886, 0.09009078309795038, 0.08942776140367337, 0.1400803969083445, 0.09213859004361968, 0.1117435863111661, 0.10388509815965263, 0.11580006465641568, 0.08888111730227577, 0.10150110380201927, 0.09063284462639654, 0.10772546664316074, 0.0932747408261525, 0.09376497663357042, 0.0794586137280765, 0.07237252899613866, 0.11435691935094561, 0.9914233632670114, 0.9925958748130473, 0.9905869509598011, 0.987881597686031, 0.9868989440722035, 0.986569891249799, 0.9897715843701209, 0.9887548419975831, 0.9876225050961304, 0.2771267796880197, 0.24557874704774485, 0.23788557685073697, 0.2295565490700021, 0.23449987476096135, 0.25872284807789014, 0.23743643468444675, 0.2646448754066678, 0.2451291339257734, 0.29986636187978843, 0.2538649527805076, 0.3042692090121989, 0.25839843512321303, 0.2528157147706027, 0.24907270222422617, 0.23650550743311782, 0.33073811263710495, 0.33862703073067946, 0.15346559977293983, 0.15833799056609643, 0.13470563773215527, 0.12227443085505985, 0.11679840952347853, 0.14462506128372987, 0.12451026505372886, 0.15601130909497518, 0.13851306225496718, 0.1499502969320876, 0.1437370222782971, 0.14832285359924313, 0.13138359625658835, 0.14072274264958828, 0.14354973437039786, 0.14723799654885128, 0.14051028808929855, 0.1301308379281112, 9.999999999998899e-05, 0.00620091089050534, 0.01952811775324592, 0.006477183664151509, 9.999999999998899e-05, 0.012613735053924047, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021947000496680413, 0.059307617871185325, 0.027976382934820188, 0.08405308668337963, 0.08937587503570354, 0.008686375097159527, 0.014148999200052303, 0.10171694161217126, 0.04427849308956644, 0.09726520321999776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.061323362462292974, 0.031633009103468446, 0.08984798887473333, 0.07688369362092329, 0.08631636094209627, 0.07947523398036083, 0.07469803177816392, 0.08618024481296582, 0.06602059764246682, 0.4104924861934157, 0.33937179380229243, 0.3700350545251695, 0.35203120302487045, 0.33527067274918265, 0.37912050000404196, 0.3661816189075343, 0.3757028763652934, 0.3470911517924231, 0.09665941402298972, 0.1000895891065049, 0.10607127424554585, 0.10648017656804709, 0.11275175105260093, 0.09184322167801728, 0.10269098081558792, 0.11533655664920295, 0.10721366882397088, 0.13806499806007266, 0.20040501195173233, 0.19948949410082462, 0.24260481813641233, 0.21585528858679393, 0.20632388586936035, 0.20966501113909308, 0.2332598249235025, 0.22651184046867312, 0.2622807783746146, 0.24922455452995085, 0.25606333104554113, 0.26423958634123335, 0.24578150161171586, 0.2660502607719436, 0.25646446900054154, 0.2647842431678208, 0.2782121756213153, 0.19159767032949393, 0.20901467358367476, 0.18187336280950472, 0.19297279555936975, 0.20693931922048714, 0.17417051505165837, 0.18433071936913492, 0.19753752929680446, 0.1778541778670949, 0.2119719920007057, 0.18608846146634594, 0.19300016195149905, 0.2020506685759289, 0.20161888363775238, 0.20080284947141724, 0.1967628692209581, 0.2210815254819295, 0.23159566280676458, 0.1905209893546752, 0.20879524452090148, 0.18854991468070537, 0.21257680158239234, 0.17601686267597905, 0.19631790371983548, 0.19508774886332825, 0.20929520206480834, 0.1739777150581271, 0.538872507219367, 0.19813847871029056, 0.1542942838476683, 0.2716377777047917, 0.20014906252793363, 0.19886997379428872, 0.2901325542201686, 0.17035826300691004, 0.49612074800833883, 0.45663795931922835, 0.15591907025611074, 0.2104652009487118, 0.4718135275452623, 0.1697204255361876, 0.5149281205622993, 0.10495207351750668, 0.10492025246060854, 0.41105830049903713, 0.17907136231118215, 0.17646193484878636, 0.19205461670476887, 0.1808295937801222, 0.18263205346989797, 0.18199967015695562, 0.18008268279955542, 0.1826910774826196, 0.18274441759078364, 0.09012463989466013, 0.09326532502151863, 0.09026291310001766, 0.07891370314408852, 0.08037210833555053, 0.09016635781501825, 0.09759343356782424, 0.0877656436182962, 0.09064137963990637]}, "mutation_prompt": null}
