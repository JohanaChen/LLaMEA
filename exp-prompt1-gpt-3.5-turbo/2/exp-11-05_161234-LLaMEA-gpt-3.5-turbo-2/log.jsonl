{"id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 0, "fitness": 0.14658502147727714, "feedback": "The algorithm BirdSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.13.", "error": "", "parent_id": null, "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "7b91085e-fd8b-4ade-b5f3-02bcd0ca9a3c", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "0295952e-e6f0-4400-bb44-32448546587f", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "67bc072d-2ed9-4f53-907a-ad8400372c65", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "7c4f04b3-09e8-4697-b3cd-5a5f483f7815", "solution": "class EnhancedBirdSwarmOptimization(BirdSwarmOptimization):\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                if np.random.uniform() < 0.1:  # Random restart with 10% probability\n                    birds[i] = np.random.uniform(-5.0, 5.0, self.dim)\n                    \n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "EnhancedBirdSwarmOptimization", "description": "Enhancing exploration by introducing random restarts to escape local optima more effectively.", "configspace": "", "generation": 4, "fitness": 0.0888304584322985, "feedback": "The algorithm EnhancedBirdSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.1608259146209019, 0.19502980733764919, 0.15727346875879378, 0.1305660872326947, 0.1562379152448128, 0.14914794881263693, 0.15344616524070587, 0.156741104136492, 0.16144206209467915, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05416106999201509, 0.06855564936877778, 0.07025161030134242, 0.058166337296353565, 0.06203472002654309, 0.06868988535630649, 0.04903532122955845, 0.04323619374790777, 0.05876253978480417, 0.039986090470172875, 0.043067778671968204, 0.03989442635454288, 0.03584872189140387, 0.038575521722777784, 0.04549393816023206, 0.043007147138637625, 0.03416814287401593, 0.05043525909388191, 0.07734606922508247, 0.08737071247430372, 0.06112833498703785, 0.06068103900068522, 0.06459445385612783, 0.05640530519777587, 0.07228439581182033, 0.06351745197802317, 0.05521871319545768, 0.028168021899283135, 0.08141418067396156, 0.053177460025557455, 0.06342721993770917, 0.06900802861850375, 0.05097279796920573, 0.0377331534595009, 0.04429425843484747, 0.05945505482824487, 0.1602511416046265, 0.11117310454651175, 0.14426574959957617, 0.08726289654755748, 0.1409045988374985, 0.1021010638291544, 0.10518259543840525, 0.10556768083774881, 0.11752491629726558, 0.0010122569473401954, 0.00012966315186802024, 0.005093060465680033, 9.999999999998899e-05, 9.999999999998899e-05, 0.011188589558259632, 0.010965197429080975, 9.999999999998899e-05, 0.004703791830100057, 0.03653873943326602, 0.07670437608760183, 0.02134527703038036, 0.022848368619114434, 0.04309502763735107, 0.05242304086950533, 0.042969851162865225, 0.024171333981493848, 0.05233510295508981, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059981916945716196, 0.08734991722508312, 0.0573473498932493, 0.03802473847304788, 0.02258684302359959, 0.05546029142365527, 0.024745591168281345, 0.08915419203209407, 0.03373581784994095, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003078333899071528, 9.999999999998899e-05, 0.0014864561025736966, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.22428606400070328, 0.18736944911920128, 0.2041882901739488, 0.16369950496589158, 0.18331141849074528, 0.18866481082572495, 0.2325190635363391, 0.22550199208327648, 0.215971622980084, 0.04755595449196648, 0.02945017323900523, 0.03591956558008513, 0.06530777141172006, 0.04049633250162388, 0.053311745842750335, 0.055709148635118666, 0.04011220782471969, 0.046726183911266705, 0.1276455264117583, 0.13529771622594633, 0.13240479174633568, 0.11716169230498164, 0.19438225208320226, 0.13339240529899066, 0.10826770289550058, 0.13519704634500107, 0.12460440977767318, 0.15315333141945264, 0.16136917807625673, 0.15977097721131173, 0.18292511543968126, 0.20356244114146327, 0.1680506338178519, 0.15906841517095782, 0.1920790523040723, 0.15415695861495682, 0.0970127010073768, 0.10335808779699562, 0.12292361140195573, 0.11500600429191254, 0.13349223168202118, 0.13920123501927595, 0.10758335533079166, 0.12361759335709344, 0.1002004757105136, 0.16338873877152038, 0.18610346039182746, 0.1901496523066537, 0.1911713499393708, 0.17853677929439749, 0.17130181405353995, 0.16503791124884792, 0.15450148173684342, 0.1654858489078027, 0.12349004666434904, 0.14689228082521333, 0.15316862373862727, 0.1554950805609162, 0.14311056109903642, 0.13852925064037658, 0.13884672498667294, 0.14594424744308931, 0.14679618902526748, 0.12629123174356538, 0.14498977330737894, 0.15320580117768368, 0.1486043458232369, 0.22822356149706446, 0.14875508733866027, 0.1565325621601953, 0.18630541339883022, 0.1459009694804585, 0.19432774725250224, 0.14278502848508146, 0.14023574311447828, 0.16909572750258395, 0.14379665008592746, 0.13953817104455268, 0.18211281530690138, 0.169134762787446, 0.09909742371227437, 0.17902120209774164, 0.17747673490856375, 0.1695251770176276, 0.17902977080582128, 0.1712989158643633, 0.170260530130955, 0.17777808006272955, 0.1786708916036014, 0.18014218512160374, 0.06014887077975761, 0.057903510404420544, 0.06904884703202918, 0.05697965122086701, 0.058598747063285384, 0.06237374222231973, 0.05049215545737151, 0.07070475112281516, 0.04936980884253861]}, "mutation_prompt": null}
{"id": "1c7ce66f-6e14-4cf0-86a0-559e6c3a199f", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "75957de6-8e6e-4e69-baa7-834c9cdfcd71", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "8d5204db-817c-4399-8c7f-d40e57f12e91", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "5b07c27c-5744-4a21-b65b-8ac83126e5c2", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "297c9289-d2d0-4d2e-9780-acd2c57ee008", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n        self.inertia = inertia\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.inertia * velocities[i] + self.alpha * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "Implementing dynamic inertia weight to balance exploration and exploitation.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 19, 9, '        for _ in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 19, 9, '        for _ in range(self.budget):\\n'))", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {}, "mutation_prompt": null}
{"id": "4f580ba9-abf5-45ef-a3f8-21e071a71669", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "146a01c6-f419-4563-95b4-9fad254e15ad", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "32b1b74d-0189-4551-a542-db40887de425", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "73804b96-3fee-4a83-a0db-a2a83a8bc38e", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "6669adba-1ab1-4845-a091-e4cc3f0eaabe", "solution": "import numpy as np\n\nclass DynamicBirdSwarmOptimization(BirdSwarmOptimization):\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia_min=0.4, inertia_max=0.9):\n        super().__init__(budget, dim, num_birds, max_speed, alpha, beta)\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])\n        inertia_weight = self.inertia_max\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = inertia_weight * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n            # Update inertia weight dynamically\n            inertia_weight = self.inertia_min + (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return best_position", "name": "DynamicBirdSwarmOptimization", "description": "Enhance the exploration-exploitation balance by introducing a dynamic inertia weight for velocity updates.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 14, 9, '        inertia_weight = self.inertia_max\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 14, 9, '        inertia_weight = self.inertia_max\\n'))", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {}, "mutation_prompt": null}
{"id": "031ef6ea-a9d7-40ee-836e-063846fa6ecf", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "6fa0bcd1-fc44-4f3c-981e-4445388f3304", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "af978daf-d682-41ef-b8bd-1bed67b071fb", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "ff9f08a8-7980-4eb6-a72c-875cf2bd9efb", "solution": "import numpy as np\n\nclass ImprovedBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, init_alpha=1.0, init_beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.init_alpha = init_alpha\n        self.init_beta = init_beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        alpha = self.init_alpha\n        beta = self.init_beta\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = alpha * velocities[i] + beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n            \n            # Update alpha and beta dynamically\n            alpha = max(0.9 * alpha, 0.1)\n            beta = min(1.1 * beta, 0.9)\n                    \n        return best_position", "name": "ImprovedBirdSwarmOptimization", "description": "Improved BirdSwarmOptimization algorithm with dynamic alpha and beta values for better exploration and exploitation trade-off.", "configspace": "", "generation": 18, "fitness": 0.08829116906045281, "feedback": "The algorithm ImprovedBirdSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.1621210713340253, 0.2614018055076387, 0.2683251101899964, 0.09055396325558573, 0.07818556664658372, 0.12748901585750005, 0.11361126742533711, 0.1273864347920185, 0.07397108278833497, 0.010373109808349046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027446745708057496, 0.10383336330691417, 0.04729633635050645, 0.06343652785443665, 0.13951099219742813, 0.11609153230708613, 0.06616517380611753, 0.07374275887408932, 0.1146602037444987, 0.02589452141464732, 0.07633362267882293, 0.03941611519643995, 0.10268908892763084, 0.048306764465378405, 0.028170665314357968, 0.023259552210400436, 0.043238881885105496, 0.05529637099884388, 0.046629793655790674, 0.03591161207445037, 0.04301105971113961, 0.05356267939850767, 0.05156543616388376, 0.03963350580601932, 0.06404695707135977, 0.050237945642432, 0.040612980855307956, 0.09202727343228512, 0.02203550267562604, 0.053676939669865864, 0.10158837132240628, 0.08032033009421069, 0.06262775515973007, 0.11311361873686132, 0.023666308693954252, 9.999999999998899e-05, 0.1393243110044523, 0.12290638366277395, 0.08752232015336903, 0.03385914396370393, 0.06049449794133255, 0.019007239663436315, 0.12370529839910582, 0.13414890304622018, 0.13760745395512386, 0.12019869679777717, 0.0663139614014795, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0847158934318688, 0.01876076577948893, 9.999999999998899e-05, 0.04217048162554016, 9.999999999998899e-05, 0.08730728217296768, 0.04656239115514671, 9.999999999998899e-05, 0.053949234451798445, 0.11524218146155596, 9.999999999998899e-05, 0.04429920545319588, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03221375790076231, 0.045715305021468144, 0.030042087768986092, 0.01962922132209155, 0.009712988236436293, 9.999999999998899e-05, 0.07620559483020695, 0.07058736508440433, 0.02503293414059593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0035019410093797276, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2867435483801075, 0.20626553340449705, 0.17149202549258225, 0.13652700751297508, 0.1117039709770512, 0.11444498738111741, 0.19280548068733583, 0.2939878287084322, 0.24078351370464135, 0.01192853067085975, 0.019860571243978442, 9.999999999998899e-05, 0.05505124006392803, 0.02086960909062785, 0.03913029805271506, 0.06980717021489968, 0.06526235800978153, 0.06461404175374974, 0.19222164606278247, 0.13312048091362538, 0.1307856705685585, 0.12335951863249539, 0.18754599524413162, 0.16196017037110455, 0.09653981738632034, 0.1502505777129589, 0.128543868765434, 0.13715472239342086, 0.16938009762327033, 0.13738422043952903, 0.19850000553469505, 0.1808081166595754, 0.1549255121854225, 0.1346097537775337, 0.22746269976251388, 0.12079162750783545, 0.08559798333614654, 0.12444028882746339, 0.09326104648199363, 0.14130939010770305, 0.17372707395732634, 0.1493153513983383, 0.08331325358269626, 0.15169643802303612, 0.05831783872873253, 0.20193629353557452, 0.22038335260888464, 0.18626676680039456, 0.20645874093821015, 0.20715051377154903, 0.18606269413646714, 0.1988051573564682, 0.22623861842136295, 0.18219352141023082, 0.16659213426548047, 0.1716948735131253, 0.17823875314937576, 0.15957407442051263, 0.17578946557882247, 0.16806024726934754, 0.15698995525459036, 0.16551426834225025, 0.01463023159705501, 0.10518134234555998, 0.10711051389197745, 0.08954870405061266, 0.15949717164033428, 0.161198173837226, 0.23678518801713944, 0.08521296903682019, 0.1825822376249302, 0.1417742852668249, 0.10427900153666847, 0.08007140453863704, 0.1623637601299459, 0.10272408560260426, 0.12279930377199799, 0.07965893108452637, 0.11643961938327652, 0.1904677730761526, 0.07981664447029657, 0.16405355946270195, 0.18606401906087655, 0.18243916219136525, 0.17154011463330576, 0.23151150348319194, 0.1760219092740557, 0.1732186218772116, 0.18222237637568628, 0.19195311702925233, 0.0765598185714147, 0.04276029583070906, 0.07161845913932541, 0.07100707045207799, 0.07939353602509158, 0.1224779817802788, 0.0714977663116304, 0.06358024349557378, 0.06756875321026823]}, "mutation_prompt": null}
{"id": "27724e4f-8766-458a-bf15-f1600b2bc2d7", "solution": "import numpy as np\n\nclass EnhancedBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, chaos_map_scale=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n        self.chaos_map_scale = chaos_map_scale\n\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        chaos_map = lambda x: 4.0 * x * (1 - x)\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i]) + self.chaos_map_scale * chaos_map(np.random.uniform())\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "EnhancedBirdSwarmOptimization", "description": "Enhancing exploration by incorporating diversity through a chaotic map for dynamic adaptation of search behavior.", "configspace": "", "generation": 19, "fitness": 0.07402297928786067, "feedback": "The algorithm EnhancedBirdSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.06.", "error": "", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.13622373264279652, 0.14849554529246056, 0.16020172722189163, 0.08952233024927114, 0.06609371873241743, 0.08690339954568316, 0.1006506477709942, 0.09331654423879432, 0.06711154613058024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03784099408791208, 0.05006219206350093, 0.038549391476699, 0.04202696210199086, 0.04456710763391403, 0.04850200293747131, 0.02634038367808711, 0.024990059423210753, 0.020985806672028096, 0.05673147463815853, 0.04984428960343901, 0.0434556752040588, 0.047039630407032185, 0.042172440035093905, 0.07452935869967348, 0.058025556776966525, 0.035925528818434915, 0.058625267811523774, 0.04651929507124786, 0.035416587080628004, 0.045519909521841706, 0.053340261193588256, 0.04687545855643349, 0.037428727900089886, 0.0638860334912611, 0.048986754550083944, 0.0392018832149682, 0.08931110004136167, 0.017287121824133056, 9.999999999998899e-05, 0.08969864683559392, 0.054869944712287566, 9.999999999998899e-05, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.1369459511675628, 0.12409062721874675, 0.09863016879786524, 0.04819297195075756, 0.04862501069310421, 0.08054641137424512, 0.08035316056546238, 0.10548976349694461, 0.10869452742633368, 0.019758562086363285, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08701127112999907, 0.026998294675849355, 9.999999999998899e-05, 0.04239037170323323, 0.0060450881470048845, 9.999999999998899e-05, 0.05010507296107514, 0.04996328939309147, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007884730996251532, 0.015570105563857961, 0.01416809239246175, 0.044766149311237124, 0.029201825208567733, 0.028340813207360593, 0.07594950946317969, 0.06008334471593768, 0.020893218088968046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1848467475017076, 0.14736422016352368, 0.19249916684275525, 0.1720084688378658, 0.12748238694272496, 0.15007209701167978, 0.1578333047462004, 0.16610782838645066, 0.18503369957898064, 0.030062137634870867, 0.038015280401193396, 0.022709127381635663, 0.03861144895623225, 0.028201939194770653, 0.025060218141016, 0.03396335791324345, 0.02847866922713782, 0.03392431853494926, 0.14228369373796945, 0.09964415585373843, 0.14088340205220062, 0.1404284683770597, 0.11065048019041501, 0.09415499736194921, 0.1218720739128274, 0.12016894076766771, 0.12490611394576678, 0.1449566760289812, 0.14988731110787845, 0.13984196548733985, 0.1870189972551599, 0.1569374924623269, 0.15741310633019134, 0.16183820292505047, 0.17377774300845283, 0.14964309505032236, 0.07937086975606422, 0.10899193134421836, 0.08668516795313075, 0.10993534724291387, 0.10926146969551354, 0.09205622381823142, 0.09721889549973384, 0.11441848071595251, 0.08916638528678633, 0.1470412981887872, 0.20256899982156895, 0.1848837091209914, 0.1936977451264048, 0.1682042118289594, 0.16540154383695882, 0.19139445327264826, 0.18414434891548714, 0.15015638317082902, 9.999999999998899e-05, 0.15282704385284218, 0.1176787533987046, 0.1401587025317369, 0.15656393121622691, 0.11893645944613818, 0.13705824352573104, 0.16893213600769708, 0.13501044607162893, 0.0951689575438831, 0.09831079289276135, 0.09653852160336096, 0.10272416395326467, 0.15845055795049012, 0.1465499991837027, 0.07345887950944285, 0.10998497322828282, 0.13031243038428986, 0.14867139632543658, 0.07328175657390379, 0.10748584568263597, 0.09459122200751369, 0.07522041674943625, 0.09767640011001733, 0.16587115117764972, 0.2172274580877711, 0.1387580395139556, 0.16526765109355313, 0.17978255016767286, 0.17743831008923738, 0.1724602173073443, 0.16498346550341558, 0.18835513671300885, 0.1817793061938925, 0.19167408088187832, 0.1718425199076542, 0.06661321179488533, 0.048177433396826785, 0.045401320981317106, 0.061699502880831814, 0.08656378555148203, 0.04810723745381562, 0.04899545262605731, 0.05090620731547313, 0.09111821452267743]}, "mutation_prompt": null}
{"id": "132ad16b-d54e-4e2e-8990-85343cc18d9c", "solution": "import numpy as np\n\nclass EnhancedBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, exploration_prob=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n        self.exploration_prob = exploration_prob\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])\n                \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Random perturbation for exploration\n                if np.random.rand() < self.exploration_prob:\n                    birds[i] = np.random.uniform(-5.0, 5.0, self.dim)\n                else:\n                    # Update position\n                    birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "EnhancedBirdSwarmOptimization", "description": "Enhance exploration by introducing random perturbations in the search space to escape local optima.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 19, 9, '        for _ in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 19, 9, '        for _ in range(self.budget):\\n'))", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {}, "mutation_prompt": null}
{"id": "966c9fe3-11a2-4387-9ab5-ed9449f42ad6", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "536c6dbd-64dc-46ca-a666-f2b51a0eca55", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "0fdf5c48-8d26-47ac-b9eb-7e835a433951", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "438adaa9-84c8-4f17-95bc-c33c488d331a", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "6f21e318-976a-4d14-8b60-983196b31f3e", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "71d5bb86-bbbe-4825-a532-4fbc7b622de3", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "e243a2a3-cae7-4f11-a86e-8542e88a4573", "solution": "import numpy as np\n\nclass EnhancedBirdSwarmOptimization(BirdSwarmOptimization):\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])\n        inertia_weight = 0.5\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity with dynamic inertia weight\n                velocities[i] = inertia_weight * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n            \n            inertia_weight = 0.5 + 0.5 * (self.budget - _) / self.budget # Update inertia weight\n\n        return best_position", "name": "EnhancedBirdSwarmOptimization", "description": "Enhancing the BirdSwarmOptimization algorithm by incorporating a dynamic inertia weight to balance exploration and exploitation in the search process.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 9, 9, '        inertia_weight = 0.5\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 9, 9, '        inertia_weight = 0.5\\n'))", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {}, "mutation_prompt": null}
{"id": "c079bf6d-cfaa-4b00-bca2-08fd8db68da7", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "0d0664db-a89f-499d-978a-14c82c5d8637", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "0456b91a-312a-4ae6-b162-18cf553d82d7", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "eb6ba7fb-73a9-4217-ac66-7b2281db8054", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "2ad3af38-29a7-43ef-8828-126329714e84", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "8c555dce-75af-4c7b-a7e8-d2bd5b6fb69a", "solution": "import numpy as np\n\nclass EnhancedBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, gamma=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n        self.gamma = gamma\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i]) + self.gamma * np.random.uniform(-1, 1, self.dim)\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "EnhancedBirdSwarmOptimization", "description": "Enhancing exploration by introducing individual exploration factor for each bird.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 19, 9, '        for _ in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 19, 9, '        for _ in range(self.budget):\\n'))", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {}, "mutation_prompt": null}
{"id": "87ffa44e-980c-47f8-85ea-1bad6b2ebd62", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "29b22b1e-4e16-4bcb-91b0-10e2e707546f", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "7a313f1f-c952-4fdc-842d-b76d921ba1a7", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "aa46aa5a-a7a8-468f-9b66-3689e56ff6c9", "solution": "import numpy as np\n\nclass EnhancedBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n        self.step_sizes = np.full(dim, max_speed)\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.step_sizes, self.step_sizes)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n                # Update step sizes\n                self.step_sizes = np.abs(velocities[i]) + 0.01  # Adaptive step size for exploration diversity\n                \n        return best_position", "name": "EnhancedBirdSwarmOptimization", "description": "Enhancing the exploration diversity by incorporating adaptive step size for each dimension during the optimization process.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 19, 9, '        for _ in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 19, 9, '        for _ in range(self.budget):\\n'))", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {}, "mutation_prompt": null}
{"id": "ccae83cb-7cf1-4251-a5c0-bd0def264546", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "af4c907a-f12d-4d39-93bd-a947b8235263", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "8c6f53da-a87c-4995-98e5-0c9266309fb7", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "07c5ba68-e4c8-410f-87d4-9fef2a4d5321", "solution": "import numpy as np\n\nclass DynamicBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, initial_alpha=1.0, initial_beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = initial_alpha\n        self.beta = initial_beta\n\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])\n        \n        for _ in range(self.budget):\n            improvement_rate = sum(func(birds[i]) < func(best_position) for i in range(self.num_birds)) / self.num_birds\n            self.alpha = 1.0 - improvement_rate\n            self.beta = 0.5 + improvement_rate\n            \n            for i in range(self.num_birds):\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "DynamicBirdSwarmOptimization", "description": "Improving convergence by dynamically adjusting alpha and beta based on the progress.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 17, 9, '        for _ in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 17, 9, '        for _ in range(self.budget):\\n'))", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {}, "mutation_prompt": null}
{"id": "2047b79b-de47-4593-a9cc-37869c5d355d", "solution": "import numpy as np\n\nclass EnhancedBirdSwarmOptimization(BirdSwarmOptimization):\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, gamma=0.1):\n        super().__init__(budget, dim, num_birds, max_speed, alpha, beta)\n        self.gamma = gamma\n\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])\n        prev_best_position = best_position.copy()  # Store previous best position\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n\n                # Introducing diversity-based exploration\n                if np.random.uniform() < self.gamma:\n                    birds[i] = np.random.uniform(-5.0, 5.0, self.dim)\n                else:\n                    birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n\n            # Update gamma to decrease exploration as optimization progresses\n            self.gamma *= 0.99\n\n            # Reinitialize if best position doesn't change\n            if np.array_equal(best_position, prev_best_position):\n                birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n                prev_best_position = best_position.copy()\n\n        return best_position", "name": "EnhancedBirdSwarmOptimization", "description": "Enhancing exploration by introducing a diversity-based mechanism to encourage exploration of different regions in the search space.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 12, 9, '        prev_best_position = best_position.copy()  # Store previous best position\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 12, 9, '        prev_best_position = best_position.copy()  # Store previous best position\\n'))", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {}, "mutation_prompt": null}
{"id": "93125b42-e322-486d-bc7f-d322a6f4417e", "solution": "import numpy as np\n\nclass EnhancedBirdSwarmOptimization(BirdSwarmOptimization):\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia_min=0.4, inertia_max=0.9):\n        super().__init__(budget, dim, num_birds, max_speed, alpha, beta)\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity with dynamic inertia weight\n                velocities[i] = inertia_weight * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n            # Update inertia weight dynamically\n            inertia_weight = self.inertia_min + (_ / self.budget) * (self.inertia_max - self.inertia_min)\n                    \n        return best_position", "name": "EnhancedBirdSwarmOptimization", "description": "Enhancing exploration-exploitation balance by introducing dynamic inertia weight for velocity updates.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 14, 9, '        inertia_weight = self.inertia_max\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 14, 9, '        inertia_weight = self.inertia_max\\n'))", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {}, "mutation_prompt": null}
{"id": "922f5b37-fbb6-455b-8b58-1b18c3ed1172", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "9a06746f-1bdf-466f-a18f-377709bfbf7f", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "2814d291-73af-4a79-b2cb-501475efd27c", "solution": "import numpy as np\n\nclass RefinedBirdSwarmOptimization(BirdSwarmOptimization):\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia_weight=0.9):\n        super().__init__(budget, dim, num_birds, max_speed, alpha, beta)\n        self.inertia_weight = inertia_weight\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.inertia_weight * velocities[i] + self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "RefinedBirdSwarmOptimization", "description": "Refine the velocity update mechanism by incorporating inertia weight to balance exploration and exploitation.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 14, 9, '        for _ in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 14, 9, '        for _ in range(self.budget):\\n'))", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {}, "mutation_prompt": null}
{"id": "1e04fb9a-b710-48d6-b661-0157d283e0ad", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "5e4fb40f-f62d-43b6-ae83-023df9712a82", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "91ef0021-fcb1-449b-b38c-672d98e29de5", "solution": "import numpy as np\n\nclass EnhancedBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, diversity_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n        self.diversity_rate = diversity_rate\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Introduce diversity mechanism\n                if np.random.uniform() < self.diversity_rate:\n                    birds[i] = np.random.uniform(-5.0, 5.0, self.dim)\n                else:\n                    # Update position\n                    birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "EnhancedBirdSwarmOptimization", "description": "Enhance the exploration by introducing a diversity mechanism to encourage exploration of diverse regions of the search space.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 19, 9, '        for _ in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 19, 9, '        for _ in range(self.budget):\\n'))", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {}, "mutation_prompt": null}
{"id": "e3352652-2918-46d6-ab98-bc4aabf4f7cf", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "0ca3f149-be94-43d8-8dac-aaff3abdd9f4", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "9ba67288-01e1-4d8c-a5c5-de6907bac496", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "e8d7330e-b20e-443c-8055-f843b862588f", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "3e668396-3ebe-4882-a676-fa013a7751ea", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "ee4fddbb-d838-41cb-8c93-e5f07fc4eb28", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "0c840d2a-8789-4907-998f-44571d364006", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "1c998c5e-0696-4bcf-8f1f-1ca62cad5b8c", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "f41125a8-222d-43df-ab84-f70c4ad01e44", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "e6a76f31-9f58-455e-a7fe-e14f4947b56b", "solution": "import numpy as np\n\nclass EnhancedBirdSwarmOptimization(BirdSwarmOptimization):\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, mutation_rate=0.05):\n        super().__init__(budget, dim, num_birds, max_speed, alpha, beta)\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Mutation\n                if np.random.uniform() < self.mutation_rate:\n                    birds[i] = np.random.uniform(-5.0, 5.0, self.dim)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "EnhancedBirdSwarmOptimization", "description": "Enhancing exploration by incorporating individuality through mutation of a small fraction of the population.", "configspace": "", "generation": 59, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 14, 9, '        for _ in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 14, 9, '        for _ in range(self.budget):\\n'))", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {}, "mutation_prompt": null}
{"id": "993383b7-d6ee-4183-9cdc-1872b799cfb0", "solution": "import numpy as np\n\nclass EnrichedBirdSwarmOptimization(BirdSwarmOptimization):\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n\n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n\n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n\n            # Introduce diversity\n            if np.random.rand() < 0.05:\n                birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n\n        return best_position", "name": "EnrichedBirdSwarmOptimization", "description": "Enhancing exploration by introducing a diversity mechanism to prevent premature convergence.", "configspace": "", "generation": 60, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 10, 9, '        for _ in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 10, 9, '        for _ in range(self.budget):\\n'))", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {}, "mutation_prompt": null}
{"id": "611b5cef-dd9c-4a07-a048-d67acf2c871b", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "857053b0-8ac5-45cc-ba45-c665ad85965c", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "2439e9b9-7bb5-4e98-a469-a1d7e4c0ecdf", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "64986ca9-c33b-4847-a08d-7c7ccc60a7c3", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "60f7ee83-9513-40b9-9740-943f88aa637c", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "97ee9b8c-78fd-4d92-a433-756515d6174b", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "79609b20-2c56-424a-b714-dc77720d3e9c", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "c9ab7b70-1af6-426e-a4cd-4079b32df4c1", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "d5603d97-75ef-458f-93f9-190c7b21c6aa", "solution": "import numpy as np\n\nclass EnhancedBirdSwarmOptimization(BirdSwarmOptimization):\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])\n        global_best_position = best_position  # Initialize global best\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * \\\n                                (global_best_position - birds[i])  # Update velocity with global best\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                if func(birds[i]) < func(global_best_position):  # Update global best\n                    global_best_position = birds[i]\n        \n        return best_position", "name": "EnhancedBirdSwarmOptimization", "description": "Enhancing exploration by incorporating global best position update in BirdSwarmOptimization.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 8, 9, '        global_best_position = best_position  # Initialize global best\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 8, 9, '        global_best_position = best_position  # Initialize global best\\n'))", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {}, "mutation_prompt": null}
{"id": "e9e441e1-c22b-43a6-a5e8-7fe47fff4069", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "a4ecdfa1-6e68-45be-a446-0eb6d2366b16", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "4aafac8c-5022-4574-bb6b-6860062d02d9", "solution": "import numpy as np\n\nclass ImprovedBirdSwarmOptimization(BirdSwarmOptimization):\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha_min=0.5, beta_min=0.3, alpha_max=1.5, beta_max=0.7):\n        super().__init__(budget, dim, num_birds, max_speed)\n        self.alpha_min = alpha_min\n        self.beta_min = beta_min\n        self.alpha_max = alpha_max\n        self.beta_max = beta_max\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                self.alpha = self.alpha_min + (self.alpha_max - self.alpha_min) * (self.budget - _) / self.budget\n                self.beta = self.beta_min + (self.beta_max - self.beta_min) * (self.budget - _) / self.budget\n                \n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "ImprovedBirdSwarmOptimization", "description": "Improved BirdSwarmOptimization with dynamic alpha and beta coefficients for better convergence behavior.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 17, 9, '        for _ in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 17, 9, '        for _ in range(self.budget):\\n'))", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {}, "mutation_prompt": null}
{"id": "90c82ae7-6127-4d67-ba27-6c25600bc280", "solution": "import numpy as np\n\nclass EnhancedBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                if np.random.uniform() < 0.2:  # 2% chance for Levy flight\n                    # Levy flight\n                    step_size = 0.01 * np.random.randn() / (np.random.rand() ** (1.0 / self.alpha))\n                    velocities[i] = np.clip(step_size * (birds[i] - best_position), -self.max_speed, self.max_speed)\n                else:\n                    velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                    velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "EnhancedBirdSwarmOptimization", "description": "Enhance exploration by incorporating Levy flights for global search capability.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 17, 9, '        for _ in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 17, 9, '        for _ in range(self.budget):\\n'))", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {}, "mutation_prompt": null}
{"id": "864d1533-825a-4d9c-ae2d-755bdbdfe23c", "solution": "import numpy as np\n\nclass ImprovedBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia_min=0.4, inertia_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n        self.inertia_min = inertia_min  # New parameter\n        self.inertia_max = inertia_max  # New parameter\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = inertia_weight * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n            # Update inertia weight dynamically\n            inertia_weight = self.inertia_min + (_ / self.budget) * (self.inertia_max - self.inertia_min)\n                    \n        return best_position", "name": "ImprovedBirdSwarmOptimization", "description": "Introducing dynamic inertia weight to balance exploration and exploitation.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 19, 9, '        inertia_weight = self.inertia_max\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 19, 9, '        inertia_weight = self.inertia_max\\n'))", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {}, "mutation_prompt": null}
{"id": "48463063-5b92-4429-a8ee-d5fbe6d06faa", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "7de277e5-6149-4d1e-89c4-a82d22e1ecdb", "solution": "import numpy as np\n\nclass EnhancedBirdSwarmOptimization(BirdSwarmOptimization):\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia_weight=0.5):\n        super().__init__(budget, dim, num_birds, max_speed, alpha, beta)\n        self.inertia_weight = inertia_weight\n\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                weights = np.random.uniform(-1.0, 1.0, self.dim)\n                opp_position = 2.0 * best_position - birds[i]\n                velocities[i] = self.inertia_weight * velocities[i] + self.alpha * weights * (best_position - birds[i]) + self.beta * weights * (opp_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n\n        return best_position", "name": "EnhancedBirdSwarmOptimization", "description": "Enhanced BirdSwarmOptimization with dynamic inertia weight and opposition-based learning to improve exploration and exploitation balance.", "configspace": "", "generation": 76, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 13, 9, '        for _ in range(self.budget):\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 13, 9, '        for _ in range(self.budget):\\n'))", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {}, "mutation_prompt": null}
{"id": "f8623873-6668-483f-827d-1f7650d41b1e", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "736d446e-b2cf-4dcc-b550-83886b8f12b3", "solution": "import numpy as np\n\nclass ImprovedBirdSwarmOptimization(BirdSwarmOptimization):\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])\n        inertia_weight = 0.5 + 0.5 * np.cos(np.linspace(0, np.pi, self.budget))  # Dynamic inertia weight\n\n        for t in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = inertia_weight[t] * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "ImprovedBirdSwarmOptimization", "description": "Utilizing dynamic inertia weight to balance exploration and exploitation in BirdSwarmOptimization", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 9, 9, '        inertia_weight = 0.5 + 0.5 * np.cos(np.linspace(0, np.pi, self.budget))  # Dynamic inertia weight\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 9, 9, '        inertia_weight = 0.5 + 0.5 * np.cos(np.linspace(0, np.pi, self.budget))  # Dynamic inertia weight\\n'))", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {}, "mutation_prompt": null}
{"id": "7dea83cc-92a1-46ba-b1f1-5ff1a35471d1", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "8616a28f-123f-470f-9cc2-50b08ade3565", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "0d05639d-c094-474f-8390-d304049c3118", "solution": "import numpy as np\n\nclass BirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        # Initialization\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        \n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                # Update velocity\n                velocities[i] = self.alpha * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                \n                # Update position\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                \n                # Update best position\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n        return best_position", "name": "BirdSwarmOptimization", "description": "A novel metaheuristic algorithm inspired by the social behavior of birds, using the concept of \"cohesion\" to guide the search towards optimal solutions.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3148302838417728, 0.338653343658296, 0.278835866309163, 0.27242072948484963, 0.305296259669546, 0.2907750083398263, 0.3472428862143958, 0.33049267032057583, 0.30611217248942935, 0.007431595798835455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049492825867991086, 0.10504189243137463, 0.044797459121896144, 0.07371744649806766, 0.09090108729115032, 0.08485653974521123, 0.07750168103505584, 0.051935754483528385, 0.06528995047868846, 0.06365117282674038, 0.04907895526690409, 0.06190590370967897, 0.09666856930562118, 0.0642658096847264, 0.033749827150523215, 0.07749882037620504, 0.05245570500430308, 0.046287139143832645, 0.5207784464619267, 0.5225939026725898, 0.6148313254166055, 0.5533267898044755, 0.7282330376455683, 0.48705026964178844, 0.6997284281178124, 0.6240109740324342, 0.4378742717864058, 0.20675472054492328, 0.0642514164126391, 0.24558347787397483, 0.1905871016519015, 0.15957578454542853, 0.21785559655515685, 0.10962196645812039, 0.15690939823785444, 0.12285225407214606, 0.20432401919858934, 0.13325862370702357, 0.11586685530485008, 0.1591458610901162, 0.11123901010686388, 0.08792639364178634, 0.15424428255210387, 0.1937401593431579, 0.14100241961410775, 0.1186840908077269, 0.09730844630930047, 0.11925726203356535, 0.17483993235791373, 0.10217810617863143, 0.10074959612678192, 0.16599100591056126, 0.052690633849392876, 0.08217827863230398, 0.1237207838445582, 0.08899178352484338, 0.1392650602101454, 0.13514865910296125, 0.1199623138303546, 0.0996414038414909, 0.15039244333703994, 0.09015391936719497, 0.15202534614906293, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002088011341808693, 0.06291810252370544, 0.09558590322929517, 0.032191435904039056, 0.010799445683402187, 9.999999999998899e-05, 0.06582538229226065, 0.07419902589084248, 0.02408321287175874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.060670074279694064, 0.04303569257265938, 0.004153072849533812, 9.999999999998899e-05, 0.018140550800044175, 0.014546780429453787, 0.04198861324784953, 0.039343697764512076, 0.04737877606373042, 0.2977299168500659, 0.3025866436246444, 0.2975249155374109, 0.30562335246689165, 0.2871959669821106, 0.29390066630231415, 0.2997262305809858, 0.2914622153957396, 0.32486278282486414, 0.0769036063372932, 0.07593975764084537, 0.03936959390691641, 0.052645181581727374, 0.06332256180341445, 0.05787024505479299, 0.07960561726851467, 0.06394769645795206, 0.06226146332080662, 0.190051356004323, 0.16089712238755038, 0.1857167601910099, 0.15595507004493725, 0.19289755131223618, 0.12991229374135416, 0.14089006729831677, 0.14148544020782028, 0.11535887059574346, 0.15491261375380072, 0.20723561818673775, 0.14818578146388373, 0.17242148956268832, 0.19309927319504805, 0.22697812811897622, 0.16768922558666233, 0.21274406546222357, 0.12125435494687808, 0.09784718511685586, 0.14824694747225908, 0.11717552904600526, 0.13625423981319074, 0.15446565815663138, 0.15703284629935366, 0.09790786168800314, 0.16618125241151538, 0.06441574838851372, 0.1838367782639616, 0.20061353763404655, 0.24862057048312047, 0.20094178593974188, 0.2204997646600787, 0.19444889381092456, 0.21018482815440753, 0.20950167218477256, 0.20399815615290595, 0.1522616916422016, 0.18722931081869387, 0.1678651711302489, 0.15711100370193531, 0.1602832236462466, 0.1619564329134604, 0.16096733544481445, 0.15498576566564204, 0.16168469009169362, 0.2596480126641313, 0.10880398342171593, 0.16781783501821468, 0.29127234855368966, 0.18966323734069812, 0.5216972732918499, 0.11509594135130008, 0.16476748349018855, 0.16075628841194445, 0.3570872605282692, 0.1771005915420064, 0.25237210108737107, 0.18403725135976634, 0.1546565481533968, 0.2469652439250416, 0.10010205762730562, 0.20151368585431817, 0.3056716842431578, 0.18539898708382596, 0.17910769879059263, 0.1855813902907224, 0.1924096049161661, 0.17264872637864048, 0.17581285497810406, 0.18291187221747163, 0.16136502824717258, 0.19024822745080505, 0.0933695949415887, 0.06957221698966642, 0.04948849304201852, 0.05533275567439466, 0.07439495945966779, 0.09556948668786847, 0.06769416580286436, 0.0564512180500486, 0.0520161683002176]}, "mutation_prompt": null}
{"id": "49a26358-de69-4772-be78-f290f8c8f1e9", "solution": "import numpy as np\n\nclass EnhancedBirdSwarmOptimization(BirdSwarmOptimization):\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia_min=0.4, inertia_max=0.9):\n        super().__init__(budget, dim, num_birds, max_speed, alpha, beta)\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                velocities[i] = inertia_weight * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n            \n            inertia_weight = self.inertia_min + (_ / self.budget) * (self.inertia_max - self.inertia_min)\n\n        return best_position", "name": "EnhancedBirdSwarmOptimization", "description": "Enhanced Bird Swarm Optimization algorithm with adaptive inertia weight and dynamic neighborhood topology.", "configspace": "", "generation": 82, "fitness": 0.09088998271195728, "feedback": "The algorithm EnhancedBirdSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.08.", "error": "", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.16039761115112527, 0.2478679060002641, 0.37127363806596614, 0.09179624431151556, 0.07848719221186551, 0.12966093661817468, 0.11668118744343103, 0.1293226220387036, 0.07627471801620578, 0.013013828912261105, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009461901510751547, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0358094689810845, 0.08783507292080561, 0.05052854148186492, 0.08346976511234006, 0.09956625044978651, 0.11017089156503512, 0.07979677407173513, 0.06124139763049785, 0.10486783020437451, 0.0321898657730495, 0.07112211269794766, 0.035951947379724514, 0.08947686154966739, 0.06564439492075547, 0.02116390023844339, 0.03016617394656329, 0.03734019290471369, 0.05247989056434377, 0.048347794596176, 0.03639379087650674, 0.04446368506492704, 0.05505112957314573, 0.05264980962194421, 0.039960678328669785, 0.06612678460673671, 0.053029519070723063, 0.04244190084805599, 0.104437651226158, 0.02339109406743245, 0.05075971552204106, 0.09203954580871687, 0.08043801174979581, 0.06642401142168541, 0.11275211655467099, 0.023863990254637812, 9.999999999998899e-05, 0.13282613799561804, 0.12406389336967172, 0.09050017666508225, 0.03651610132908245, 0.06049118088411376, 0.019877943163347456, 0.12301925518252976, 0.13406598965343386, 0.12854525593099952, 0.14137897932221544, 0.06934336399012375, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10101511689004761, 9.999999999998899e-05, 9.999999999998899e-05, 0.01692399813386125, 9.999999999998899e-05, 0.05456581112750447, 0.08638157559426962, 9.999999999998899e-05, 0.07398370421956713, 0.0979672642553262, 0.0019795600011819348, 0.05243491128311073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06736043777198808, 0.0809471397831012, 0.046778719036576155, 0.02313638424231612, 0.002704863624626852, 9.999999999998899e-05, 0.07481850126795819, 0.08829857334070312, 0.030404164317526905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006221117534392917, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2854068784942355, 0.19011286444860698, 0.17153669440175212, 0.13820095010962563, 0.1131145589410335, 0.11145809061049328, 0.19219876557407123, 0.25973098683162177, 0.23673476241868452, 0.015146026940120794, 0.020506933542305372, 9.999999999998899e-05, 0.04614076299736136, 0.04764528631830822, 0.04833419599955813, 0.08050304268003616, 0.09891165165816806, 0.06920504455008558, 0.12048714488475598, 0.13875464391406045, 0.16561551280419462, 0.1543876783799275, 0.22580836850969943, 0.12769474454885565, 0.17344631560678758, 0.12584357859205064, 0.1326799117506221, 0.13758081747175643, 0.16625561866373972, 0.14319923615519947, 0.18650248707412953, 0.18829628044929236, 0.18088077878758568, 0.1416622549175468, 0.23897444845181315, 0.12325039056996012, 0.08218744919477106, 0.1313484997120895, 0.08617292842624413, 0.1496833281334482, 0.14557287829669963, 0.10797358222589681, 0.10716197984715525, 0.15231810230034848, 0.05548075418792775, 0.2468174912283837, 0.24918035258051363, 0.25341258036729597, 0.22734678069537795, 0.23013421497389397, 0.20629339381224532, 0.1681603721253334, 0.22564235622349993, 0.20422288159263546, 0.16905173927920736, 0.1625030408155813, 0.1648187482945399, 0.16029678344784748, 0.16589471840265158, 0.16936789778127803, 0.1560922586736453, 0.16308808918662143, 0.038499701922008356, 0.10706187046958582, 0.11278429259479728, 0.08980367380741827, 0.13376763838831485, 0.16305584419781194, 0.28800391575965734, 0.09255042370658206, 0.2096957882389927, 0.15080940244955432, 0.10586042178302302, 0.08351215321794903, 0.1502238675242905, 0.10209211738762969, 0.13417273145960384, 0.09422010707126283, 0.11267398357987135, 0.19142665375061552, 0.0860047990559677, 0.17971871023819874, 0.18497408126727344, 0.20380208170045389, 0.18791192814803426, 0.19910561068031296, 0.16523477297389144, 0.20740812354662996, 0.18631479672351348, 0.18605291745245767, 0.07427135567833554, 0.06592677674199388, 0.05662761804042915, 0.07161820054703272, 0.08462872116186859, 0.07850292945937254, 0.06589488509860186, 0.055882908309248025, 0.05912908402171524]}, "mutation_prompt": null}
{"id": "cea29686-9a36-4358-b1f0-ae91ad3a3f28", "solution": "import numpy as np\n\nclass DynamicBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia_min=0.4, inertia_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                velocities[i] = inertia_weight * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return best_position", "name": "DynamicBirdSwarmOptimization", "description": "Enhancing exploration with dynamic inertia weight and adaptive search space modification to improve convergence speed and solution quality.", "configspace": "", "generation": 83, "fitness": 0.14809952104100027, "feedback": "The algorithm DynamicBirdSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.13.", "error": "", "parent_id": "3cc38220-efa4-4981-93fc-06c8e5a102e1", "metadata": {"aucs": [0.3149080982116308, 0.3459915759961375, 0.31150435619808525, 0.3353847002664404, 0.32537064415125505, 0.36408072436402406, 0.29019077310330554, 0.29139055700724703, 0.25866859285687627, 0.03314505065965623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028578873774350533, 0.039606724186367126, 9.999999999998899e-05, 0.036387229075731886, 9.999999999998899e-05, 0.059679210345565115, 0.08750643471376807, 0.04125933059064113, 0.07497501199474976, 0.08352569822431377, 0.07179650068296106, 0.08046955036439118, 0.07062436350799539, 0.05840701808872362, 0.060105205569932485, 0.054211538624458266, 0.04415647448003779, 0.05965590462329817, 0.06879014097223246, 0.028578190963244432, 0.06432887493376782, 0.019660272370818133, 0.033782534527734054, 0.7222284295535433, 0.4828698791604692, 0.5940126074252994, 0.5284489670296174, 0.5944408516276574, 0.7038427660018844, 0.6627269390089798, 0.6094432857291601, 0.4670666392901749, 0.19791847217818737, 0.14124656164384253, 0.16249570478758046, 0.13261188436278593, 0.11613644392359324, 0.14168631309356317, 0.12537480823889924, 0.12132427865349271, 0.18332220865969717, 0.16847351353816142, 0.1670004239364482, 0.12129741202628375, 0.07780830124210447, 0.13900437824535006, 0.11062317151369605, 0.12550895964527642, 0.1180906973523026, 0.1616959398528326, 0.08145058739378697, 0.08610897079976798, 0.0846475468111354, 0.1404058810730665, 0.11963822940502522, 9.999999999998899e-05, 0.1364089593361163, 0.11480995224396373, 0.051755285298559106, 0.1379069464090471, 0.10085580504892555, 0.16655412171613682, 0.1620467922035801, 0.12277784603366049, 0.09591912884320519, 0.12006595148036414, 0.05480650495962314, 0.1680741763969258, 9.999999999998899e-05, 9.999999999998899e-05, 0.016955662626896073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08852964384046647, 0.07317210292249643, 0.026158622539829035, 0.044535666602998014, 0.0667408883329843, 0.04145279271348279, 0.07182642692895946, 0.11484847130339715, 0.033443648351585975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03440391879653293, 0.07759811232754399, 0.06578524617587955, 0.02131208002540952, 0.05990334496479921, 0.05450039449254296, 0.07272355396625574, 0.032267945373800844, 0.052935731569516475, 0.27284929588282325, 0.2843114151568691, 0.29057549179783015, 0.2630166876712535, 0.29972202000661585, 0.25506113584184664, 0.3241951656543878, 0.3029005888060283, 0.32810020866126355, 0.02571643683788838, 0.058199026874940274, 0.05024339462669036, 0.05598246413653285, 0.10517230043491965, 0.05920293235698049, 0.06664946305615504, 0.04689700168485811, 0.0607361261190148, 0.12944307566038582, 0.1901229090940545, 0.11296003357046902, 0.2063829142824537, 0.22988241196988501, 0.1550084168120055, 0.1452329913140129, 0.1237113589971034, 0.1583631794548941, 0.15882553678495082, 0.2344790634020838, 0.13966679674083293, 0.1688299951236426, 0.18240064438582126, 0.21267335328557202, 0.16295529193096536, 0.18820790988224212, 0.1312618689943389, 0.09487396426469352, 0.13311435798327387, 0.1263413937122254, 0.12036406057833415, 0.13597646440222866, 0.13836323192794697, 0.10049250002057053, 0.13824214860711692, 0.05950675700105568, 0.24652059058898035, 0.21118261294755314, 0.2454581578064403, 0.18653023917954992, 0.24930197321513237, 0.1817728844087494, 0.21126215523740965, 0.18908995018658825, 0.19225696208654874, 0.157419958935208, 0.1574011924945431, 0.16223202282000582, 0.17677241556941403, 0.17481897351892772, 0.1592898651569018, 0.15469083253687843, 0.14922341050265553, 0.1451867678310813, 0.11859978140123495, 0.11879445226365459, 0.17020848899223562, 0.39098103606277956, 0.18462402258456956, 0.5734706044494258, 0.09743030149386489, 0.2895200068532938, 0.15807875389562664, 0.2881229561640043, 0.18758210862972646, 0.4163246349851484, 0.18687087591795615, 0.15593487674196882, 0.22524262316265264, 0.10361996174713639, 0.3815337805282971, 0.2331292008277146, 0.17254033618923081, 0.16507376512644512, 0.18243916219136525, 0.17377819304413855, 0.17017751703345585, 0.1820551032231501, 0.1801695321398059, 0.1738348670371893, 0.16870776571478274, 0.093175956668622, 0.044753820166141156, 0.06785647045560306, 0.0630738856863492, 0.07022355494646892, 0.0811080853554269, 0.07536726916220848, 0.0866351620885909, 0.0717859486542799]}, "mutation_prompt": null}
{"id": "2c2100aa-4b1b-4102-ace4-f2d704a8bb8a", "solution": "import numpy as np\n\nclass EnhancedDynamicBirdSwarmOptimization(DynamicBirdSwarmOptimization):\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia_min=0.4, inertia_max=0.9, levy_prob=0.05):\n        super().__init__(budget, dim, num_birds, max_speed, alpha, beta, inertia_min, inertia_max)\n        self.levy_prob = levy_prob\n\n    def levy_flight(self, position):\n        levy_alpha = 1.5\n        levy_beta = 0.5\n        sigma = ((math.gamma(1 + levy_alpha) * np.sin(np.pi * levy_alpha / 2)) / (math.gamma((1 + levy_alpha) / 2) * levy_alpha * 2 ** ((levy_alpha - 1) / 2))) ** (1 / levy_alpha)\n        u = np.random.normal(0, sigma ** 2)\n        v = np.random.normal(0, 1)\n        step = u / abs(v) ** (1 / levy_alpha)\n        position += step\n        return np.clip(position, -5.0, 5.0)\n\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                if np.random.rand() < self.levy_prob:\n                    birds[i] = self.levy_flight(birds[i])\n                else:\n                    velocities[i] = inertia_weight * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                    velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                    birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                    if func(birds[i]) < func(best_position):\n                        best_position = birds[i]\n                    \n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return best_position", "name": "EnhancedDynamicBirdSwarmOptimization", "description": "Introducing Levy flights to enhance exploration and escape local optima during optimization.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'math' is not defined\").", "error": "NameError(\"name 'math' is not defined\")", "parent_id": "cea29686-9a36-4358-b1f0-ae91ad3a3f28", "metadata": {}, "mutation_prompt": null}
{"id": "1e25b385-ce29-4d4e-8164-310511547f60", "solution": "import numpy as np\n\nclass DynamicBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia_min=0.4, inertia_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                velocities[i] = inertia_weight * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return best_position", "name": "DynamicBirdSwarmOptimization", "description": "Enhancing exploration with dynamic inertia weight and adaptive search space modification to improve convergence speed and solution quality.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cea29686-9a36-4358-b1f0-ae91ad3a3f28", "metadata": {"aucs": [0.3149080982116308, 0.3459915759961375, 0.31150435619808525, 0.3353847002664404, 0.32537064415125505, 0.36408072436402406, 0.29019077310330554, 0.29139055700724703, 0.25866859285687627, 0.03314505065965623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028578873774350533, 0.039606724186367126, 9.999999999998899e-05, 0.036387229075731886, 9.999999999998899e-05, 0.059679210345565115, 0.08750643471376807, 0.04125933059064113, 0.07497501199474976, 0.08352569822431377, 0.07179650068296106, 0.08046955036439118, 0.07062436350799539, 0.05840701808872362, 0.060105205569932485, 0.054211538624458266, 0.04415647448003779, 0.05965590462329817, 0.06879014097223246, 0.028578190963244432, 0.06432887493376782, 0.019660272370818133, 0.033782534527734054, 0.7222284295535433, 0.4828698791604692, 0.5940126074252994, 0.5284489670296174, 0.5944408516276574, 0.7038427660018844, 0.6627269390089798, 0.6094432857291601, 0.4670666392901749, 0.19791847217818737, 0.14124656164384253, 0.16249570478758046, 0.13261188436278593, 0.11613644392359324, 0.14168631309356317, 0.12537480823889924, 0.12132427865349271, 0.18332220865969717, 0.16847351353816142, 0.1670004239364482, 0.12129741202628375, 0.07780830124210447, 0.13900437824535006, 0.11062317151369605, 0.12550895964527642, 0.1180906973523026, 0.1616959398528326, 0.08145058739378697, 0.08610897079976798, 0.0846475468111354, 0.1404058810730665, 0.11963822940502522, 9.999999999998899e-05, 0.1364089593361163, 0.11480995224396373, 0.051755285298559106, 0.1379069464090471, 0.10085580504892555, 0.16655412171613682, 0.1620467922035801, 0.12277784603366049, 0.09591912884320519, 0.12006595148036414, 0.05480650495962314, 0.1680741763969258, 9.999999999998899e-05, 9.999999999998899e-05, 0.016955662626896073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08852964384046647, 0.07317210292249643, 0.026158622539829035, 0.044535666602998014, 0.0667408883329843, 0.04145279271348279, 0.07182642692895946, 0.11484847130339715, 0.033443648351585975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03440391879653293, 0.07759811232754399, 0.06578524617587955, 0.02131208002540952, 0.05990334496479921, 0.05450039449254296, 0.07272355396625574, 0.032267945373800844, 0.052935731569516475, 0.27284929588282325, 0.2843114151568691, 0.29057549179783015, 0.2630166876712535, 0.29972202000661585, 0.25506113584184664, 0.3241951656543878, 0.3029005888060283, 0.32810020866126355, 0.02571643683788838, 0.058199026874940274, 0.05024339462669036, 0.05598246413653285, 0.10517230043491965, 0.05920293235698049, 0.06664946305615504, 0.04689700168485811, 0.0607361261190148, 0.12944307566038582, 0.1901229090940545, 0.11296003357046902, 0.2063829142824537, 0.22988241196988501, 0.1550084168120055, 0.1452329913140129, 0.1237113589971034, 0.1583631794548941, 0.15882553678495082, 0.2344790634020838, 0.13966679674083293, 0.1688299951236426, 0.18240064438582126, 0.21267335328557202, 0.16295529193096536, 0.18820790988224212, 0.1312618689943389, 0.09487396426469352, 0.13311435798327387, 0.1263413937122254, 0.12036406057833415, 0.13597646440222866, 0.13836323192794697, 0.10049250002057053, 0.13824214860711692, 0.05950675700105568, 0.24652059058898035, 0.21118261294755314, 0.2454581578064403, 0.18653023917954992, 0.24930197321513237, 0.1817728844087494, 0.21126215523740965, 0.18908995018658825, 0.19225696208654874, 0.157419958935208, 0.1574011924945431, 0.16223202282000582, 0.17677241556941403, 0.17481897351892772, 0.1592898651569018, 0.15469083253687843, 0.14922341050265553, 0.1451867678310813, 0.11859978140123495, 0.11879445226365459, 0.17020848899223562, 0.39098103606277956, 0.18462402258456956, 0.5734706044494258, 0.09743030149386489, 0.2895200068532938, 0.15807875389562664, 0.2881229561640043, 0.18758210862972646, 0.4163246349851484, 0.18687087591795615, 0.15593487674196882, 0.22524262316265264, 0.10361996174713639, 0.3815337805282971, 0.2331292008277146, 0.17254033618923081, 0.16507376512644512, 0.18243916219136525, 0.17377819304413855, 0.17017751703345585, 0.1820551032231501, 0.1801695321398059, 0.1738348670371893, 0.16870776571478274, 0.093175956668622, 0.044753820166141156, 0.06785647045560306, 0.0630738856863492, 0.07022355494646892, 0.0811080853554269, 0.07536726916220848, 0.0866351620885909, 0.0717859486542799]}, "mutation_prompt": null}
{"id": "40fad08a-490b-46f7-b809-dfdcd9399b61", "solution": "import numpy as np\n\nclass DynamicBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia_min=0.4, inertia_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                velocities[i] = inertia_weight * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return best_position", "name": "DynamicBirdSwarmOptimization", "description": "Enhancing exploration with dynamic inertia weight and adaptive search space modification to improve convergence speed and solution quality.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cea29686-9a36-4358-b1f0-ae91ad3a3f28", "metadata": {"aucs": [0.3149080982116308, 0.3459915759961375, 0.31150435619808525, 0.3353847002664404, 0.32537064415125505, 0.36408072436402406, 0.29019077310330554, 0.29139055700724703, 0.25866859285687627, 0.03314505065965623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028578873774350533, 0.039606724186367126, 9.999999999998899e-05, 0.036387229075731886, 9.999999999998899e-05, 0.059679210345565115, 0.08750643471376807, 0.04125933059064113, 0.07497501199474976, 0.08352569822431377, 0.07179650068296106, 0.08046955036439118, 0.07062436350799539, 0.05840701808872362, 0.060105205569932485, 0.054211538624458266, 0.04415647448003779, 0.05965590462329817, 0.06879014097223246, 0.028578190963244432, 0.06432887493376782, 0.019660272370818133, 0.033782534527734054, 0.7222284295535433, 0.4828698791604692, 0.5940126074252994, 0.5284489670296174, 0.5944408516276574, 0.7038427660018844, 0.6627269390089798, 0.6094432857291601, 0.4670666392901749, 0.19791847217818737, 0.14124656164384253, 0.16249570478758046, 0.13261188436278593, 0.11613644392359324, 0.14168631309356317, 0.12537480823889924, 0.12132427865349271, 0.18332220865969717, 0.16847351353816142, 0.1670004239364482, 0.12129741202628375, 0.07780830124210447, 0.13900437824535006, 0.11062317151369605, 0.12550895964527642, 0.1180906973523026, 0.1616959398528326, 0.08145058739378697, 0.08610897079976798, 0.0846475468111354, 0.1404058810730665, 0.11963822940502522, 9.999999999998899e-05, 0.1364089593361163, 0.11480995224396373, 0.051755285298559106, 0.1379069464090471, 0.10085580504892555, 0.16655412171613682, 0.1620467922035801, 0.12277784603366049, 0.09591912884320519, 0.12006595148036414, 0.05480650495962314, 0.1680741763969258, 9.999999999998899e-05, 9.999999999998899e-05, 0.016955662626896073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08852964384046647, 0.07317210292249643, 0.026158622539829035, 0.044535666602998014, 0.0667408883329843, 0.04145279271348279, 0.07182642692895946, 0.11484847130339715, 0.033443648351585975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03440391879653293, 0.07759811232754399, 0.06578524617587955, 0.02131208002540952, 0.05990334496479921, 0.05450039449254296, 0.07272355396625574, 0.032267945373800844, 0.052935731569516475, 0.27284929588282325, 0.2843114151568691, 0.29057549179783015, 0.2630166876712535, 0.29972202000661585, 0.25506113584184664, 0.3241951656543878, 0.3029005888060283, 0.32810020866126355, 0.02571643683788838, 0.058199026874940274, 0.05024339462669036, 0.05598246413653285, 0.10517230043491965, 0.05920293235698049, 0.06664946305615504, 0.04689700168485811, 0.0607361261190148, 0.12944307566038582, 0.1901229090940545, 0.11296003357046902, 0.2063829142824537, 0.22988241196988501, 0.1550084168120055, 0.1452329913140129, 0.1237113589971034, 0.1583631794548941, 0.15882553678495082, 0.2344790634020838, 0.13966679674083293, 0.1688299951236426, 0.18240064438582126, 0.21267335328557202, 0.16295529193096536, 0.18820790988224212, 0.1312618689943389, 0.09487396426469352, 0.13311435798327387, 0.1263413937122254, 0.12036406057833415, 0.13597646440222866, 0.13836323192794697, 0.10049250002057053, 0.13824214860711692, 0.05950675700105568, 0.24652059058898035, 0.21118261294755314, 0.2454581578064403, 0.18653023917954992, 0.24930197321513237, 0.1817728844087494, 0.21126215523740965, 0.18908995018658825, 0.19225696208654874, 0.157419958935208, 0.1574011924945431, 0.16223202282000582, 0.17677241556941403, 0.17481897351892772, 0.1592898651569018, 0.15469083253687843, 0.14922341050265553, 0.1451867678310813, 0.11859978140123495, 0.11879445226365459, 0.17020848899223562, 0.39098103606277956, 0.18462402258456956, 0.5734706044494258, 0.09743030149386489, 0.2895200068532938, 0.15807875389562664, 0.2881229561640043, 0.18758210862972646, 0.4163246349851484, 0.18687087591795615, 0.15593487674196882, 0.22524262316265264, 0.10361996174713639, 0.3815337805282971, 0.2331292008277146, 0.17254033618923081, 0.16507376512644512, 0.18243916219136525, 0.17377819304413855, 0.17017751703345585, 0.1820551032231501, 0.1801695321398059, 0.1738348670371893, 0.16870776571478274, 0.093175956668622, 0.044753820166141156, 0.06785647045560306, 0.0630738856863492, 0.07022355494646892, 0.0811080853554269, 0.07536726916220848, 0.0866351620885909, 0.0717859486542799]}, "mutation_prompt": null}
{"id": "e5da8839-e8f6-409d-8389-9dcf0627c7f8", "solution": "import numpy as np\n\nclass DynamicBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia_min=0.4, inertia_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                velocities[i] = inertia_weight * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return best_position", "name": "DynamicBirdSwarmOptimization", "description": "Enhancing exploration with dynamic inertia weight and adaptive search space modification to improve convergence speed and solution quality.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cea29686-9a36-4358-b1f0-ae91ad3a3f28", "metadata": {"aucs": [0.3149080982116308, 0.3459915759961375, 0.31150435619808525, 0.3353847002664404, 0.32537064415125505, 0.36408072436402406, 0.29019077310330554, 0.29139055700724703, 0.25866859285687627, 0.03314505065965623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028578873774350533, 0.039606724186367126, 9.999999999998899e-05, 0.036387229075731886, 9.999999999998899e-05, 0.059679210345565115, 0.08750643471376807, 0.04125933059064113, 0.07497501199474976, 0.08352569822431377, 0.07179650068296106, 0.08046955036439118, 0.07062436350799539, 0.05840701808872362, 0.060105205569932485, 0.054211538624458266, 0.04415647448003779, 0.05965590462329817, 0.06879014097223246, 0.028578190963244432, 0.06432887493376782, 0.019660272370818133, 0.033782534527734054, 0.7222284295535433, 0.4828698791604692, 0.5940126074252994, 0.5284489670296174, 0.5944408516276574, 0.7038427660018844, 0.6627269390089798, 0.6094432857291601, 0.4670666392901749, 0.19791847217818737, 0.14124656164384253, 0.16249570478758046, 0.13261188436278593, 0.11613644392359324, 0.14168631309356317, 0.12537480823889924, 0.12132427865349271, 0.18332220865969717, 0.16847351353816142, 0.1670004239364482, 0.12129741202628375, 0.07780830124210447, 0.13900437824535006, 0.11062317151369605, 0.12550895964527642, 0.1180906973523026, 0.1616959398528326, 0.08145058739378697, 0.08610897079976798, 0.0846475468111354, 0.1404058810730665, 0.11963822940502522, 9.999999999998899e-05, 0.1364089593361163, 0.11480995224396373, 0.051755285298559106, 0.1379069464090471, 0.10085580504892555, 0.16655412171613682, 0.1620467922035801, 0.12277784603366049, 0.09591912884320519, 0.12006595148036414, 0.05480650495962314, 0.1680741763969258, 9.999999999998899e-05, 9.999999999998899e-05, 0.016955662626896073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08852964384046647, 0.07317210292249643, 0.026158622539829035, 0.044535666602998014, 0.0667408883329843, 0.04145279271348279, 0.07182642692895946, 0.11484847130339715, 0.033443648351585975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03440391879653293, 0.07759811232754399, 0.06578524617587955, 0.02131208002540952, 0.05990334496479921, 0.05450039449254296, 0.07272355396625574, 0.032267945373800844, 0.052935731569516475, 0.27284929588282325, 0.2843114151568691, 0.29057549179783015, 0.2630166876712535, 0.29972202000661585, 0.25506113584184664, 0.3241951656543878, 0.3029005888060283, 0.32810020866126355, 0.02571643683788838, 0.058199026874940274, 0.05024339462669036, 0.05598246413653285, 0.10517230043491965, 0.05920293235698049, 0.06664946305615504, 0.04689700168485811, 0.0607361261190148, 0.12944307566038582, 0.1901229090940545, 0.11296003357046902, 0.2063829142824537, 0.22988241196988501, 0.1550084168120055, 0.1452329913140129, 0.1237113589971034, 0.1583631794548941, 0.15882553678495082, 0.2344790634020838, 0.13966679674083293, 0.1688299951236426, 0.18240064438582126, 0.21267335328557202, 0.16295529193096536, 0.18820790988224212, 0.1312618689943389, 0.09487396426469352, 0.13311435798327387, 0.1263413937122254, 0.12036406057833415, 0.13597646440222866, 0.13836323192794697, 0.10049250002057053, 0.13824214860711692, 0.05950675700105568, 0.24652059058898035, 0.21118261294755314, 0.2454581578064403, 0.18653023917954992, 0.24930197321513237, 0.1817728844087494, 0.21126215523740965, 0.18908995018658825, 0.19225696208654874, 0.157419958935208, 0.1574011924945431, 0.16223202282000582, 0.17677241556941403, 0.17481897351892772, 0.1592898651569018, 0.15469083253687843, 0.14922341050265553, 0.1451867678310813, 0.11859978140123495, 0.11879445226365459, 0.17020848899223562, 0.39098103606277956, 0.18462402258456956, 0.5734706044494258, 0.09743030149386489, 0.2895200068532938, 0.15807875389562664, 0.2881229561640043, 0.18758210862972646, 0.4163246349851484, 0.18687087591795615, 0.15593487674196882, 0.22524262316265264, 0.10361996174713639, 0.3815337805282971, 0.2331292008277146, 0.17254033618923081, 0.16507376512644512, 0.18243916219136525, 0.17377819304413855, 0.17017751703345585, 0.1820551032231501, 0.1801695321398059, 0.1738348670371893, 0.16870776571478274, 0.093175956668622, 0.044753820166141156, 0.06785647045560306, 0.0630738856863492, 0.07022355494646892, 0.0811080853554269, 0.07536726916220848, 0.0866351620885909, 0.0717859486542799]}, "mutation_prompt": null}
{"id": "d7dade41-7afc-4a57-887a-b4650b95d40b", "solution": "import numpy as np\n\nclass EnhancedDynamicBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia_min=0.4, inertia_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                chaos = np.random.uniform(-1, 1, self.dim)\n                velocities[i] = inertia_weight * velocities[i] + self.beta * chaos * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return best_position", "name": "EnhancedDynamicBirdSwarmOptimization", "description": "Improving convergence speed and exploration by incorporating chaotic dynamics into the velocity update equation.", "configspace": "", "generation": 88, "fitness": 0.05949868635744947, "feedback": "The algorithm EnhancedDynamicBirdSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "cea29686-9a36-4358-b1f0-ae91ad3a3f28", "metadata": {"aucs": [0.11263009508380906, 0.08400002394339756, 0.12597627041105153, 0.08952233024927114, 0.07344231659692035, 0.09378312739992967, 0.12241230795586722, 0.10617394611682718, 0.07370856629354294, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024663119740091166, 0.023652503307695083, 0.019506656242158527, 0.02429197029857677, 0.02990519975833683, 0.03851080547127328, 0.018248263482334326, 0.004675047977711566, 0.019850305419015113, 0.012050947150387348, 0.0029481582714036003, 0.0010174666001592225, 0.01959972157639278, 9.999999999998899e-05, 0.008330811620577472, 9.999999999998899e-05, 0.004873229354634856, 9.999999999998899e-05, 0.0690609260980466, 0.04625014041168729, 0.04287777107098589, 0.053340261193588256, 0.05134545679218905, 0.057564672807294825, 0.0638860334912611, 0.050885482586458974, 0.05875172855616584, 0.002762894344588096, 0.001364850251216576, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 0.04919927726922646, 9.999999999998899e-05, 0.011293333694524565, 9.999999999998899e-05, 0.10027683525177622, 0.07038880813461224, 0.08111007088336031, 0.06326681559820369, 0.0837442828452819, 0.03537266815339257, 0.10591792679212053, 0.05931056463008866, 0.0673570121730378, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006296792653353478, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032370196259934314, 0.06576486563185557, 0.011578037773628092, 0.04225659875194143, 0.006282908406783805, 0.01975702526740175, 0.02658524130742046, 0.03519277795664255, 0.012814707656331525, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.124077760389248, 0.16944371395653557, 0.14838054695461433, 0.15534364088547026, 0.10299352150603625, 0.10172935991898469, 0.12486334841013413, 0.10472323973416697, 0.1822035987331595, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044157146053036556, 0.03309547595081408, 0.01892014109731266, 0.02760609399497893, 0.03887230639072892, 0.020941073617418815, 0.03798260737473502, 0.12316141704212191, 0.11096306899617137, 0.11391093587022261, 0.16397864618883196, 0.15087455512067938, 0.13516662271542468, 0.12744145146860486, 0.13312074966643517, 0.11628898692701861, 0.1334015173610058, 0.12359285423790078, 0.13864447169601046, 0.13690097420233727, 0.14143148191964483, 0.1425573193862596, 0.12829502613711263, 0.17377774300845283, 0.12710059452892442, 0.070004172272502, 0.06481285620174693, 0.0975753005122828, 0.09121249903801054, 0.08056010803482405, 0.07081825730858438, 0.0985624923997348, 0.10344749868536296, 0.058296621920977176, 0.1393141984729227, 0.12710977074257557, 0.14664298463436842, 0.1877412989664714, 0.1306889530157277, 0.14551723518159465, 0.15392447861309178, 0.1184185335060649, 0.13760943510249068, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09321594353020823, 9.999999999998899e-05, 9.999999999998899e-05, 0.13113910852609556, 0.09860318352450359, 0.10306464837806284, 0.11477972228503674, 0.11363717778464721, 0.1285534590043821, 0.09753568566467508, 0.13051671522129293, 0.10821017528957166, 0.11191558998767503, 0.10298747139878339, 0.11182121101065245, 0.15702084433059627, 0.11919937917750323, 0.05014048466441978, 0.09342156239191668, 0.08582860285869387, 0.10164531288662115, 0.07034792558787051, 0.04938601691836231, 0.20214126086812945, 0.1792581371468579, 0.1751140869169796, 0.1924305623352648, 0.17345201748425643, 0.18139449542666808, 0.1913360039850781, 0.16981009022102067, 0.17471696683355453, 0.1826208389688445, 0.037653513327742805, 0.04971347907015711, 0.05197427310022851, 0.04119563928317782, 0.05733900651474266, 0.03546178981691461, 0.046331302418785913, 0.032782297481840916, 0.044521508570637525]}, "mutation_prompt": null}
{"id": "453c14a0-984a-47ed-8589-c128034a770d", "solution": "import numpy as np\n\nclass DynamicBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia_min=0.4, inertia_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                velocities[i] = inertia_weight * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return best_position", "name": "DynamicBirdSwarmOptimization", "description": "Enhancing exploration with dynamic inertia weight and adaptive search space modification to improve convergence speed and solution quality.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cea29686-9a36-4358-b1f0-ae91ad3a3f28", "metadata": {"aucs": [0.3149080982116308, 0.3459915759961375, 0.31150435619808525, 0.3353847002664404, 0.32537064415125505, 0.36408072436402406, 0.29019077310330554, 0.29139055700724703, 0.25866859285687627, 0.03314505065965623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028578873774350533, 0.039606724186367126, 9.999999999998899e-05, 0.036387229075731886, 9.999999999998899e-05, 0.059679210345565115, 0.08750643471376807, 0.04125933059064113, 0.07497501199474976, 0.08352569822431377, 0.07179650068296106, 0.08046955036439118, 0.07062436350799539, 0.05840701808872362, 0.060105205569932485, 0.054211538624458266, 0.04415647448003779, 0.05965590462329817, 0.06879014097223246, 0.028578190963244432, 0.06432887493376782, 0.019660272370818133, 0.033782534527734054, 0.7222284295535433, 0.4828698791604692, 0.5940126074252994, 0.5284489670296174, 0.5944408516276574, 0.7038427660018844, 0.6627269390089798, 0.6094432857291601, 0.4670666392901749, 0.19791847217818737, 0.14124656164384253, 0.16249570478758046, 0.13261188436278593, 0.11613644392359324, 0.14168631309356317, 0.12537480823889924, 0.12132427865349271, 0.18332220865969717, 0.16847351353816142, 0.1670004239364482, 0.12129741202628375, 0.07780830124210447, 0.13900437824535006, 0.11062317151369605, 0.12550895964527642, 0.1180906973523026, 0.1616959398528326, 0.08145058739378697, 0.08610897079976798, 0.0846475468111354, 0.1404058810730665, 0.11963822940502522, 9.999999999998899e-05, 0.1364089593361163, 0.11480995224396373, 0.051755285298559106, 0.1379069464090471, 0.10085580504892555, 0.16655412171613682, 0.1620467922035801, 0.12277784603366049, 0.09591912884320519, 0.12006595148036414, 0.05480650495962314, 0.1680741763969258, 9.999999999998899e-05, 9.999999999998899e-05, 0.016955662626896073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08852964384046647, 0.07317210292249643, 0.026158622539829035, 0.044535666602998014, 0.0667408883329843, 0.04145279271348279, 0.07182642692895946, 0.11484847130339715, 0.033443648351585975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03440391879653293, 0.07759811232754399, 0.06578524617587955, 0.02131208002540952, 0.05990334496479921, 0.05450039449254296, 0.07272355396625574, 0.032267945373800844, 0.052935731569516475, 0.27284929588282325, 0.2843114151568691, 0.29057549179783015, 0.2630166876712535, 0.29972202000661585, 0.25506113584184664, 0.3241951656543878, 0.3029005888060283, 0.32810020866126355, 0.02571643683788838, 0.058199026874940274, 0.05024339462669036, 0.05598246413653285, 0.10517230043491965, 0.05920293235698049, 0.06664946305615504, 0.04689700168485811, 0.0607361261190148, 0.12944307566038582, 0.1901229090940545, 0.11296003357046902, 0.2063829142824537, 0.22988241196988501, 0.1550084168120055, 0.1452329913140129, 0.1237113589971034, 0.1583631794548941, 0.15882553678495082, 0.2344790634020838, 0.13966679674083293, 0.1688299951236426, 0.18240064438582126, 0.21267335328557202, 0.16295529193096536, 0.18820790988224212, 0.1312618689943389, 0.09487396426469352, 0.13311435798327387, 0.1263413937122254, 0.12036406057833415, 0.13597646440222866, 0.13836323192794697, 0.10049250002057053, 0.13824214860711692, 0.05950675700105568, 0.24652059058898035, 0.21118261294755314, 0.2454581578064403, 0.18653023917954992, 0.24930197321513237, 0.1817728844087494, 0.21126215523740965, 0.18908995018658825, 0.19225696208654874, 0.157419958935208, 0.1574011924945431, 0.16223202282000582, 0.17677241556941403, 0.17481897351892772, 0.1592898651569018, 0.15469083253687843, 0.14922341050265553, 0.1451867678310813, 0.11859978140123495, 0.11879445226365459, 0.17020848899223562, 0.39098103606277956, 0.18462402258456956, 0.5734706044494258, 0.09743030149386489, 0.2895200068532938, 0.15807875389562664, 0.2881229561640043, 0.18758210862972646, 0.4163246349851484, 0.18687087591795615, 0.15593487674196882, 0.22524262316265264, 0.10361996174713639, 0.3815337805282971, 0.2331292008277146, 0.17254033618923081, 0.16507376512644512, 0.18243916219136525, 0.17377819304413855, 0.17017751703345585, 0.1820551032231501, 0.1801695321398059, 0.1738348670371893, 0.16870776571478274, 0.093175956668622, 0.044753820166141156, 0.06785647045560306, 0.0630738856863492, 0.07022355494646892, 0.0811080853554269, 0.07536726916220848, 0.0866351620885909, 0.0717859486542799]}, "mutation_prompt": null}
{"id": "7c7da485-eab4-4c65-912a-9fb6b2205883", "solution": "import numpy as np\n\nclass DynamicBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia_min=0.4, inertia_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                velocities[i] = inertia_weight * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return best_position", "name": "DynamicBirdSwarmOptimization", "description": "Enhancing exploration with dynamic inertia weight and adaptive search space modification to improve convergence speed and solution quality.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cea29686-9a36-4358-b1f0-ae91ad3a3f28", "metadata": {"aucs": [0.3149080982116308, 0.3459915759961375, 0.31150435619808525, 0.3353847002664404, 0.32537064415125505, 0.36408072436402406, 0.29019077310330554, 0.29139055700724703, 0.25866859285687627, 0.03314505065965623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028578873774350533, 0.039606724186367126, 9.999999999998899e-05, 0.036387229075731886, 9.999999999998899e-05, 0.059679210345565115, 0.08750643471376807, 0.04125933059064113, 0.07497501199474976, 0.08352569822431377, 0.07179650068296106, 0.08046955036439118, 0.07062436350799539, 0.05840701808872362, 0.060105205569932485, 0.054211538624458266, 0.04415647448003779, 0.05965590462329817, 0.06879014097223246, 0.028578190963244432, 0.06432887493376782, 0.019660272370818133, 0.033782534527734054, 0.7222284295535433, 0.4828698791604692, 0.5940126074252994, 0.5284489670296174, 0.5944408516276574, 0.7038427660018844, 0.6627269390089798, 0.6094432857291601, 0.4670666392901749, 0.19791847217818737, 0.14124656164384253, 0.16249570478758046, 0.13261188436278593, 0.11613644392359324, 0.14168631309356317, 0.12537480823889924, 0.12132427865349271, 0.18332220865969717, 0.16847351353816142, 0.1670004239364482, 0.12129741202628375, 0.07780830124210447, 0.13900437824535006, 0.11062317151369605, 0.12550895964527642, 0.1180906973523026, 0.1616959398528326, 0.08145058739378697, 0.08610897079976798, 0.0846475468111354, 0.1404058810730665, 0.11963822940502522, 9.999999999998899e-05, 0.1364089593361163, 0.11480995224396373, 0.051755285298559106, 0.1379069464090471, 0.10085580504892555, 0.16655412171613682, 0.1620467922035801, 0.12277784603366049, 0.09591912884320519, 0.12006595148036414, 0.05480650495962314, 0.1680741763969258, 9.999999999998899e-05, 9.999999999998899e-05, 0.016955662626896073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08852964384046647, 0.07317210292249643, 0.026158622539829035, 0.044535666602998014, 0.0667408883329843, 0.04145279271348279, 0.07182642692895946, 0.11484847130339715, 0.033443648351585975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03440391879653293, 0.07759811232754399, 0.06578524617587955, 0.02131208002540952, 0.05990334496479921, 0.05450039449254296, 0.07272355396625574, 0.032267945373800844, 0.052935731569516475, 0.27284929588282325, 0.2843114151568691, 0.29057549179783015, 0.2630166876712535, 0.29972202000661585, 0.25506113584184664, 0.3241951656543878, 0.3029005888060283, 0.32810020866126355, 0.02571643683788838, 0.058199026874940274, 0.05024339462669036, 0.05598246413653285, 0.10517230043491965, 0.05920293235698049, 0.06664946305615504, 0.04689700168485811, 0.0607361261190148, 0.12944307566038582, 0.1901229090940545, 0.11296003357046902, 0.2063829142824537, 0.22988241196988501, 0.1550084168120055, 0.1452329913140129, 0.1237113589971034, 0.1583631794548941, 0.15882553678495082, 0.2344790634020838, 0.13966679674083293, 0.1688299951236426, 0.18240064438582126, 0.21267335328557202, 0.16295529193096536, 0.18820790988224212, 0.1312618689943389, 0.09487396426469352, 0.13311435798327387, 0.1263413937122254, 0.12036406057833415, 0.13597646440222866, 0.13836323192794697, 0.10049250002057053, 0.13824214860711692, 0.05950675700105568, 0.24652059058898035, 0.21118261294755314, 0.2454581578064403, 0.18653023917954992, 0.24930197321513237, 0.1817728844087494, 0.21126215523740965, 0.18908995018658825, 0.19225696208654874, 0.157419958935208, 0.1574011924945431, 0.16223202282000582, 0.17677241556941403, 0.17481897351892772, 0.1592898651569018, 0.15469083253687843, 0.14922341050265553, 0.1451867678310813, 0.11859978140123495, 0.11879445226365459, 0.17020848899223562, 0.39098103606277956, 0.18462402258456956, 0.5734706044494258, 0.09743030149386489, 0.2895200068532938, 0.15807875389562664, 0.2881229561640043, 0.18758210862972646, 0.4163246349851484, 0.18687087591795615, 0.15593487674196882, 0.22524262316265264, 0.10361996174713639, 0.3815337805282971, 0.2331292008277146, 0.17254033618923081, 0.16507376512644512, 0.18243916219136525, 0.17377819304413855, 0.17017751703345585, 0.1820551032231501, 0.1801695321398059, 0.1738348670371893, 0.16870776571478274, 0.093175956668622, 0.044753820166141156, 0.06785647045560306, 0.0630738856863492, 0.07022355494646892, 0.0811080853554269, 0.07536726916220848, 0.0866351620885909, 0.0717859486542799]}, "mutation_prompt": null}
{"id": "803597a0-17d0-4864-a0f6-5ff2150ec2a3", "solution": "import numpy as np\n\nclass DynamicBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia_min=0.4, inertia_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                velocities[i] = inertia_weight * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return best_position", "name": "DynamicBirdSwarmOptimization", "description": "Enhancing exploration with dynamic inertia weight and adaptive search space modification to improve convergence speed and solution quality.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cea29686-9a36-4358-b1f0-ae91ad3a3f28", "metadata": {"aucs": [0.3149080982116308, 0.3459915759961375, 0.31150435619808525, 0.3353847002664404, 0.32537064415125505, 0.36408072436402406, 0.29019077310330554, 0.29139055700724703, 0.25866859285687627, 0.03314505065965623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028578873774350533, 0.039606724186367126, 9.999999999998899e-05, 0.036387229075731886, 9.999999999998899e-05, 0.059679210345565115, 0.08750643471376807, 0.04125933059064113, 0.07497501199474976, 0.08352569822431377, 0.07179650068296106, 0.08046955036439118, 0.07062436350799539, 0.05840701808872362, 0.060105205569932485, 0.054211538624458266, 0.04415647448003779, 0.05965590462329817, 0.06879014097223246, 0.028578190963244432, 0.06432887493376782, 0.019660272370818133, 0.033782534527734054, 0.7222284295535433, 0.4828698791604692, 0.5940126074252994, 0.5284489670296174, 0.5944408516276574, 0.7038427660018844, 0.6627269390089798, 0.6094432857291601, 0.4670666392901749, 0.19791847217818737, 0.14124656164384253, 0.16249570478758046, 0.13261188436278593, 0.11613644392359324, 0.14168631309356317, 0.12537480823889924, 0.12132427865349271, 0.18332220865969717, 0.16847351353816142, 0.1670004239364482, 0.12129741202628375, 0.07780830124210447, 0.13900437824535006, 0.11062317151369605, 0.12550895964527642, 0.1180906973523026, 0.1616959398528326, 0.08145058739378697, 0.08610897079976798, 0.0846475468111354, 0.1404058810730665, 0.11963822940502522, 9.999999999998899e-05, 0.1364089593361163, 0.11480995224396373, 0.051755285298559106, 0.1379069464090471, 0.10085580504892555, 0.16655412171613682, 0.1620467922035801, 0.12277784603366049, 0.09591912884320519, 0.12006595148036414, 0.05480650495962314, 0.1680741763969258, 9.999999999998899e-05, 9.999999999998899e-05, 0.016955662626896073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08852964384046647, 0.07317210292249643, 0.026158622539829035, 0.044535666602998014, 0.0667408883329843, 0.04145279271348279, 0.07182642692895946, 0.11484847130339715, 0.033443648351585975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03440391879653293, 0.07759811232754399, 0.06578524617587955, 0.02131208002540952, 0.05990334496479921, 0.05450039449254296, 0.07272355396625574, 0.032267945373800844, 0.052935731569516475, 0.27284929588282325, 0.2843114151568691, 0.29057549179783015, 0.2630166876712535, 0.29972202000661585, 0.25506113584184664, 0.3241951656543878, 0.3029005888060283, 0.32810020866126355, 0.02571643683788838, 0.058199026874940274, 0.05024339462669036, 0.05598246413653285, 0.10517230043491965, 0.05920293235698049, 0.06664946305615504, 0.04689700168485811, 0.0607361261190148, 0.12944307566038582, 0.1901229090940545, 0.11296003357046902, 0.2063829142824537, 0.22988241196988501, 0.1550084168120055, 0.1452329913140129, 0.1237113589971034, 0.1583631794548941, 0.15882553678495082, 0.2344790634020838, 0.13966679674083293, 0.1688299951236426, 0.18240064438582126, 0.21267335328557202, 0.16295529193096536, 0.18820790988224212, 0.1312618689943389, 0.09487396426469352, 0.13311435798327387, 0.1263413937122254, 0.12036406057833415, 0.13597646440222866, 0.13836323192794697, 0.10049250002057053, 0.13824214860711692, 0.05950675700105568, 0.24652059058898035, 0.21118261294755314, 0.2454581578064403, 0.18653023917954992, 0.24930197321513237, 0.1817728844087494, 0.21126215523740965, 0.18908995018658825, 0.19225696208654874, 0.157419958935208, 0.1574011924945431, 0.16223202282000582, 0.17677241556941403, 0.17481897351892772, 0.1592898651569018, 0.15469083253687843, 0.14922341050265553, 0.1451867678310813, 0.11859978140123495, 0.11879445226365459, 0.17020848899223562, 0.39098103606277956, 0.18462402258456956, 0.5734706044494258, 0.09743030149386489, 0.2895200068532938, 0.15807875389562664, 0.2881229561640043, 0.18758210862972646, 0.4163246349851484, 0.18687087591795615, 0.15593487674196882, 0.22524262316265264, 0.10361996174713639, 0.3815337805282971, 0.2331292008277146, 0.17254033618923081, 0.16507376512644512, 0.18243916219136525, 0.17377819304413855, 0.17017751703345585, 0.1820551032231501, 0.1801695321398059, 0.1738348670371893, 0.16870776571478274, 0.093175956668622, 0.044753820166141156, 0.06785647045560306, 0.0630738856863492, 0.07022355494646892, 0.0811080853554269, 0.07536726916220848, 0.0866351620885909, 0.0717859486542799]}, "mutation_prompt": null}
{"id": "f39a2595-3c19-425e-97e2-67315810a95a", "solution": "import numpy as np\n\nclass DynamicBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia_min=0.4, inertia_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                velocities[i] = inertia_weight * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return best_position", "name": "DynamicBirdSwarmOptimization", "description": "Enhancing exploration with dynamic inertia weight and adaptive search space modification to improve convergence speed and solution quality.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cea29686-9a36-4358-b1f0-ae91ad3a3f28", "metadata": {"aucs": [0.3149080982116308, 0.3459915759961375, 0.31150435619808525, 0.3353847002664404, 0.32537064415125505, 0.36408072436402406, 0.29019077310330554, 0.29139055700724703, 0.25866859285687627, 0.03314505065965623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028578873774350533, 0.039606724186367126, 9.999999999998899e-05, 0.036387229075731886, 9.999999999998899e-05, 0.059679210345565115, 0.08750643471376807, 0.04125933059064113, 0.07497501199474976, 0.08352569822431377, 0.07179650068296106, 0.08046955036439118, 0.07062436350799539, 0.05840701808872362, 0.060105205569932485, 0.054211538624458266, 0.04415647448003779, 0.05965590462329817, 0.06879014097223246, 0.028578190963244432, 0.06432887493376782, 0.019660272370818133, 0.033782534527734054, 0.7222284295535433, 0.4828698791604692, 0.5940126074252994, 0.5284489670296174, 0.5944408516276574, 0.7038427660018844, 0.6627269390089798, 0.6094432857291601, 0.4670666392901749, 0.19791847217818737, 0.14124656164384253, 0.16249570478758046, 0.13261188436278593, 0.11613644392359324, 0.14168631309356317, 0.12537480823889924, 0.12132427865349271, 0.18332220865969717, 0.16847351353816142, 0.1670004239364482, 0.12129741202628375, 0.07780830124210447, 0.13900437824535006, 0.11062317151369605, 0.12550895964527642, 0.1180906973523026, 0.1616959398528326, 0.08145058739378697, 0.08610897079976798, 0.0846475468111354, 0.1404058810730665, 0.11963822940502522, 9.999999999998899e-05, 0.1364089593361163, 0.11480995224396373, 0.051755285298559106, 0.1379069464090471, 0.10085580504892555, 0.16655412171613682, 0.1620467922035801, 0.12277784603366049, 0.09591912884320519, 0.12006595148036414, 0.05480650495962314, 0.1680741763969258, 9.999999999998899e-05, 9.999999999998899e-05, 0.016955662626896073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08852964384046647, 0.07317210292249643, 0.026158622539829035, 0.044535666602998014, 0.0667408883329843, 0.04145279271348279, 0.07182642692895946, 0.11484847130339715, 0.033443648351585975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03440391879653293, 0.07759811232754399, 0.06578524617587955, 0.02131208002540952, 0.05990334496479921, 0.05450039449254296, 0.07272355396625574, 0.032267945373800844, 0.052935731569516475, 0.27284929588282325, 0.2843114151568691, 0.29057549179783015, 0.2630166876712535, 0.29972202000661585, 0.25506113584184664, 0.3241951656543878, 0.3029005888060283, 0.32810020866126355, 0.02571643683788838, 0.058199026874940274, 0.05024339462669036, 0.05598246413653285, 0.10517230043491965, 0.05920293235698049, 0.06664946305615504, 0.04689700168485811, 0.0607361261190148, 0.12944307566038582, 0.1901229090940545, 0.11296003357046902, 0.2063829142824537, 0.22988241196988501, 0.1550084168120055, 0.1452329913140129, 0.1237113589971034, 0.1583631794548941, 0.15882553678495082, 0.2344790634020838, 0.13966679674083293, 0.1688299951236426, 0.18240064438582126, 0.21267335328557202, 0.16295529193096536, 0.18820790988224212, 0.1312618689943389, 0.09487396426469352, 0.13311435798327387, 0.1263413937122254, 0.12036406057833415, 0.13597646440222866, 0.13836323192794697, 0.10049250002057053, 0.13824214860711692, 0.05950675700105568, 0.24652059058898035, 0.21118261294755314, 0.2454581578064403, 0.18653023917954992, 0.24930197321513237, 0.1817728844087494, 0.21126215523740965, 0.18908995018658825, 0.19225696208654874, 0.157419958935208, 0.1574011924945431, 0.16223202282000582, 0.17677241556941403, 0.17481897351892772, 0.1592898651569018, 0.15469083253687843, 0.14922341050265553, 0.1451867678310813, 0.11859978140123495, 0.11879445226365459, 0.17020848899223562, 0.39098103606277956, 0.18462402258456956, 0.5734706044494258, 0.09743030149386489, 0.2895200068532938, 0.15807875389562664, 0.2881229561640043, 0.18758210862972646, 0.4163246349851484, 0.18687087591795615, 0.15593487674196882, 0.22524262316265264, 0.10361996174713639, 0.3815337805282971, 0.2331292008277146, 0.17254033618923081, 0.16507376512644512, 0.18243916219136525, 0.17377819304413855, 0.17017751703345585, 0.1820551032231501, 0.1801695321398059, 0.1738348670371893, 0.16870776571478274, 0.093175956668622, 0.044753820166141156, 0.06785647045560306, 0.0630738856863492, 0.07022355494646892, 0.0811080853554269, 0.07536726916220848, 0.0866351620885909, 0.0717859486542799]}, "mutation_prompt": null}
{"id": "dd5cbd3a-a937-499f-9fbc-708fd1c11150", "solution": "import numpy as np\n\nclass DynamicBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia_min=0.4, inertia_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                velocities[i] = inertia_weight * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return best_position", "name": "DynamicBirdSwarmOptimization", "description": "Enhancing exploration with dynamic inertia weight and adaptive search space modification to improve convergence speed and solution quality.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cea29686-9a36-4358-b1f0-ae91ad3a3f28", "metadata": {"aucs": [0.3149080982116308, 0.3459915759961375, 0.31150435619808525, 0.3353847002664404, 0.32537064415125505, 0.36408072436402406, 0.29019077310330554, 0.29139055700724703, 0.25866859285687627, 0.03314505065965623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028578873774350533, 0.039606724186367126, 9.999999999998899e-05, 0.036387229075731886, 9.999999999998899e-05, 0.059679210345565115, 0.08750643471376807, 0.04125933059064113, 0.07497501199474976, 0.08352569822431377, 0.07179650068296106, 0.08046955036439118, 0.07062436350799539, 0.05840701808872362, 0.060105205569932485, 0.054211538624458266, 0.04415647448003779, 0.05965590462329817, 0.06879014097223246, 0.028578190963244432, 0.06432887493376782, 0.019660272370818133, 0.033782534527734054, 0.7222284295535433, 0.4828698791604692, 0.5940126074252994, 0.5284489670296174, 0.5944408516276574, 0.7038427660018844, 0.6627269390089798, 0.6094432857291601, 0.4670666392901749, 0.19791847217818737, 0.14124656164384253, 0.16249570478758046, 0.13261188436278593, 0.11613644392359324, 0.14168631309356317, 0.12537480823889924, 0.12132427865349271, 0.18332220865969717, 0.16847351353816142, 0.1670004239364482, 0.12129741202628375, 0.07780830124210447, 0.13900437824535006, 0.11062317151369605, 0.12550895964527642, 0.1180906973523026, 0.1616959398528326, 0.08145058739378697, 0.08610897079976798, 0.0846475468111354, 0.1404058810730665, 0.11963822940502522, 9.999999999998899e-05, 0.1364089593361163, 0.11480995224396373, 0.051755285298559106, 0.1379069464090471, 0.10085580504892555, 0.16655412171613682, 0.1620467922035801, 0.12277784603366049, 0.09591912884320519, 0.12006595148036414, 0.05480650495962314, 0.1680741763969258, 9.999999999998899e-05, 9.999999999998899e-05, 0.016955662626896073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08852964384046647, 0.07317210292249643, 0.026158622539829035, 0.044535666602998014, 0.0667408883329843, 0.04145279271348279, 0.07182642692895946, 0.11484847130339715, 0.033443648351585975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03440391879653293, 0.07759811232754399, 0.06578524617587955, 0.02131208002540952, 0.05990334496479921, 0.05450039449254296, 0.07272355396625574, 0.032267945373800844, 0.052935731569516475, 0.27284929588282325, 0.2843114151568691, 0.29057549179783015, 0.2630166876712535, 0.29972202000661585, 0.25506113584184664, 0.3241951656543878, 0.3029005888060283, 0.32810020866126355, 0.02571643683788838, 0.058199026874940274, 0.05024339462669036, 0.05598246413653285, 0.10517230043491965, 0.05920293235698049, 0.06664946305615504, 0.04689700168485811, 0.0607361261190148, 0.12944307566038582, 0.1901229090940545, 0.11296003357046902, 0.2063829142824537, 0.22988241196988501, 0.1550084168120055, 0.1452329913140129, 0.1237113589971034, 0.1583631794548941, 0.15882553678495082, 0.2344790634020838, 0.13966679674083293, 0.1688299951236426, 0.18240064438582126, 0.21267335328557202, 0.16295529193096536, 0.18820790988224212, 0.1312618689943389, 0.09487396426469352, 0.13311435798327387, 0.1263413937122254, 0.12036406057833415, 0.13597646440222866, 0.13836323192794697, 0.10049250002057053, 0.13824214860711692, 0.05950675700105568, 0.24652059058898035, 0.21118261294755314, 0.2454581578064403, 0.18653023917954992, 0.24930197321513237, 0.1817728844087494, 0.21126215523740965, 0.18908995018658825, 0.19225696208654874, 0.157419958935208, 0.1574011924945431, 0.16223202282000582, 0.17677241556941403, 0.17481897351892772, 0.1592898651569018, 0.15469083253687843, 0.14922341050265553, 0.1451867678310813, 0.11859978140123495, 0.11879445226365459, 0.17020848899223562, 0.39098103606277956, 0.18462402258456956, 0.5734706044494258, 0.09743030149386489, 0.2895200068532938, 0.15807875389562664, 0.2881229561640043, 0.18758210862972646, 0.4163246349851484, 0.18687087591795615, 0.15593487674196882, 0.22524262316265264, 0.10361996174713639, 0.3815337805282971, 0.2331292008277146, 0.17254033618923081, 0.16507376512644512, 0.18243916219136525, 0.17377819304413855, 0.17017751703345585, 0.1820551032231501, 0.1801695321398059, 0.1738348670371893, 0.16870776571478274, 0.093175956668622, 0.044753820166141156, 0.06785647045560306, 0.0630738856863492, 0.07022355494646892, 0.0811080853554269, 0.07536726916220848, 0.0866351620885909, 0.0717859486542799]}, "mutation_prompt": null}
{"id": "6e2b5168-a771-4c29-a6c0-02dc03d5ab67", "solution": "import numpy as np\n\nclass DynamicBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia_min=0.4, inertia_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                velocities[i] = inertia_weight * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return best_position", "name": "DynamicBirdSwarmOptimization", "description": "Enhancing exploration with dynamic inertia weight and adaptive search space modification to improve convergence speed and solution quality.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cea29686-9a36-4358-b1f0-ae91ad3a3f28", "metadata": {"aucs": [0.3149080982116308, 0.3459915759961375, 0.31150435619808525, 0.3353847002664404, 0.32537064415125505, 0.36408072436402406, 0.29019077310330554, 0.29139055700724703, 0.25866859285687627, 0.03314505065965623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028578873774350533, 0.039606724186367126, 9.999999999998899e-05, 0.036387229075731886, 9.999999999998899e-05, 0.059679210345565115, 0.08750643471376807, 0.04125933059064113, 0.07497501199474976, 0.08352569822431377, 0.07179650068296106, 0.08046955036439118, 0.07062436350799539, 0.05840701808872362, 0.060105205569932485, 0.054211538624458266, 0.04415647448003779, 0.05965590462329817, 0.06879014097223246, 0.028578190963244432, 0.06432887493376782, 0.019660272370818133, 0.033782534527734054, 0.7222284295535433, 0.4828698791604692, 0.5940126074252994, 0.5284489670296174, 0.5944408516276574, 0.7038427660018844, 0.6627269390089798, 0.6094432857291601, 0.4670666392901749, 0.19791847217818737, 0.14124656164384253, 0.16249570478758046, 0.13261188436278593, 0.11613644392359324, 0.14168631309356317, 0.12537480823889924, 0.12132427865349271, 0.18332220865969717, 0.16847351353816142, 0.1670004239364482, 0.12129741202628375, 0.07780830124210447, 0.13900437824535006, 0.11062317151369605, 0.12550895964527642, 0.1180906973523026, 0.1616959398528326, 0.08145058739378697, 0.08610897079976798, 0.0846475468111354, 0.1404058810730665, 0.11963822940502522, 9.999999999998899e-05, 0.1364089593361163, 0.11480995224396373, 0.051755285298559106, 0.1379069464090471, 0.10085580504892555, 0.16655412171613682, 0.1620467922035801, 0.12277784603366049, 0.09591912884320519, 0.12006595148036414, 0.05480650495962314, 0.1680741763969258, 9.999999999998899e-05, 9.999999999998899e-05, 0.016955662626896073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08852964384046647, 0.07317210292249643, 0.026158622539829035, 0.044535666602998014, 0.0667408883329843, 0.04145279271348279, 0.07182642692895946, 0.11484847130339715, 0.033443648351585975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03440391879653293, 0.07759811232754399, 0.06578524617587955, 0.02131208002540952, 0.05990334496479921, 0.05450039449254296, 0.07272355396625574, 0.032267945373800844, 0.052935731569516475, 0.27284929588282325, 0.2843114151568691, 0.29057549179783015, 0.2630166876712535, 0.29972202000661585, 0.25506113584184664, 0.3241951656543878, 0.3029005888060283, 0.32810020866126355, 0.02571643683788838, 0.058199026874940274, 0.05024339462669036, 0.05598246413653285, 0.10517230043491965, 0.05920293235698049, 0.06664946305615504, 0.04689700168485811, 0.0607361261190148, 0.12944307566038582, 0.1901229090940545, 0.11296003357046902, 0.2063829142824537, 0.22988241196988501, 0.1550084168120055, 0.1452329913140129, 0.1237113589971034, 0.1583631794548941, 0.15882553678495082, 0.2344790634020838, 0.13966679674083293, 0.1688299951236426, 0.18240064438582126, 0.21267335328557202, 0.16295529193096536, 0.18820790988224212, 0.1312618689943389, 0.09487396426469352, 0.13311435798327387, 0.1263413937122254, 0.12036406057833415, 0.13597646440222866, 0.13836323192794697, 0.10049250002057053, 0.13824214860711692, 0.05950675700105568, 0.24652059058898035, 0.21118261294755314, 0.2454581578064403, 0.18653023917954992, 0.24930197321513237, 0.1817728844087494, 0.21126215523740965, 0.18908995018658825, 0.19225696208654874, 0.157419958935208, 0.1574011924945431, 0.16223202282000582, 0.17677241556941403, 0.17481897351892772, 0.1592898651569018, 0.15469083253687843, 0.14922341050265553, 0.1451867678310813, 0.11859978140123495, 0.11879445226365459, 0.17020848899223562, 0.39098103606277956, 0.18462402258456956, 0.5734706044494258, 0.09743030149386489, 0.2895200068532938, 0.15807875389562664, 0.2881229561640043, 0.18758210862972646, 0.4163246349851484, 0.18687087591795615, 0.15593487674196882, 0.22524262316265264, 0.10361996174713639, 0.3815337805282971, 0.2331292008277146, 0.17254033618923081, 0.16507376512644512, 0.18243916219136525, 0.17377819304413855, 0.17017751703345585, 0.1820551032231501, 0.1801695321398059, 0.1738348670371893, 0.16870776571478274, 0.093175956668622, 0.044753820166141156, 0.06785647045560306, 0.0630738856863492, 0.07022355494646892, 0.0811080853554269, 0.07536726916220848, 0.0866351620885909, 0.0717859486542799]}, "mutation_prompt": null}
{"id": "35f9f0ac-d416-4ad2-af94-1315776b5383", "solution": "import numpy as np\n\nclass DynamicBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia_min=0.4, inertia_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                velocities[i] = inertia_weight * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                if func(birds[i]) < func(best_position):\n                    best_position = birds[i]\n                    \n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return best_position", "name": "DynamicBirdSwarmOptimization", "description": "Enhancing exploration with dynamic inertia weight and adaptive search space modification to improve convergence speed and solution quality.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cea29686-9a36-4358-b1f0-ae91ad3a3f28", "metadata": {"aucs": [0.3149080982116308, 0.3459915759961375, 0.31150435619808525, 0.3353847002664404, 0.32537064415125505, 0.36408072436402406, 0.29019077310330554, 0.29139055700724703, 0.25866859285687627, 0.03314505065965623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028578873774350533, 0.039606724186367126, 9.999999999998899e-05, 0.036387229075731886, 9.999999999998899e-05, 0.059679210345565115, 0.08750643471376807, 0.04125933059064113, 0.07497501199474976, 0.08352569822431377, 0.07179650068296106, 0.08046955036439118, 0.07062436350799539, 0.05840701808872362, 0.060105205569932485, 0.054211538624458266, 0.04415647448003779, 0.05965590462329817, 0.06879014097223246, 0.028578190963244432, 0.06432887493376782, 0.019660272370818133, 0.033782534527734054, 0.7222284295535433, 0.4828698791604692, 0.5940126074252994, 0.5284489670296174, 0.5944408516276574, 0.7038427660018844, 0.6627269390089798, 0.6094432857291601, 0.4670666392901749, 0.19791847217818737, 0.14124656164384253, 0.16249570478758046, 0.13261188436278593, 0.11613644392359324, 0.14168631309356317, 0.12537480823889924, 0.12132427865349271, 0.18332220865969717, 0.16847351353816142, 0.1670004239364482, 0.12129741202628375, 0.07780830124210447, 0.13900437824535006, 0.11062317151369605, 0.12550895964527642, 0.1180906973523026, 0.1616959398528326, 0.08145058739378697, 0.08610897079976798, 0.0846475468111354, 0.1404058810730665, 0.11963822940502522, 9.999999999998899e-05, 0.1364089593361163, 0.11480995224396373, 0.051755285298559106, 0.1379069464090471, 0.10085580504892555, 0.16655412171613682, 0.1620467922035801, 0.12277784603366049, 0.09591912884320519, 0.12006595148036414, 0.05480650495962314, 0.1680741763969258, 9.999999999998899e-05, 9.999999999998899e-05, 0.016955662626896073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08852964384046647, 0.07317210292249643, 0.026158622539829035, 0.044535666602998014, 0.0667408883329843, 0.04145279271348279, 0.07182642692895946, 0.11484847130339715, 0.033443648351585975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03440391879653293, 0.07759811232754399, 0.06578524617587955, 0.02131208002540952, 0.05990334496479921, 0.05450039449254296, 0.07272355396625574, 0.032267945373800844, 0.052935731569516475, 0.27284929588282325, 0.2843114151568691, 0.29057549179783015, 0.2630166876712535, 0.29972202000661585, 0.25506113584184664, 0.3241951656543878, 0.3029005888060283, 0.32810020866126355, 0.02571643683788838, 0.058199026874940274, 0.05024339462669036, 0.05598246413653285, 0.10517230043491965, 0.05920293235698049, 0.06664946305615504, 0.04689700168485811, 0.0607361261190148, 0.12944307566038582, 0.1901229090940545, 0.11296003357046902, 0.2063829142824537, 0.22988241196988501, 0.1550084168120055, 0.1452329913140129, 0.1237113589971034, 0.1583631794548941, 0.15882553678495082, 0.2344790634020838, 0.13966679674083293, 0.1688299951236426, 0.18240064438582126, 0.21267335328557202, 0.16295529193096536, 0.18820790988224212, 0.1312618689943389, 0.09487396426469352, 0.13311435798327387, 0.1263413937122254, 0.12036406057833415, 0.13597646440222866, 0.13836323192794697, 0.10049250002057053, 0.13824214860711692, 0.05950675700105568, 0.24652059058898035, 0.21118261294755314, 0.2454581578064403, 0.18653023917954992, 0.24930197321513237, 0.1817728844087494, 0.21126215523740965, 0.18908995018658825, 0.19225696208654874, 0.157419958935208, 0.1574011924945431, 0.16223202282000582, 0.17677241556941403, 0.17481897351892772, 0.1592898651569018, 0.15469083253687843, 0.14922341050265553, 0.1451867678310813, 0.11859978140123495, 0.11879445226365459, 0.17020848899223562, 0.39098103606277956, 0.18462402258456956, 0.5734706044494258, 0.09743030149386489, 0.2895200068532938, 0.15807875389562664, 0.2881229561640043, 0.18758210862972646, 0.4163246349851484, 0.18687087591795615, 0.15593487674196882, 0.22524262316265264, 0.10361996174713639, 0.3815337805282971, 0.2331292008277146, 0.17254033618923081, 0.16507376512644512, 0.18243916219136525, 0.17377819304413855, 0.17017751703345585, 0.1820551032231501, 0.1801695321398059, 0.1738348670371893, 0.16870776571478274, 0.093175956668622, 0.044753820166141156, 0.06785647045560306, 0.0630738856863492, 0.07022355494646892, 0.0811080853554269, 0.07536726916220848, 0.0866351620885909, 0.0717859486542799]}, "mutation_prompt": null}
{"id": "d2b423cc-6eb9-4198-b27f-7f7c124d3c89", "solution": "import numpy as np\n\nclass EnhancedBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia_min=0.4, inertia_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                local_search_space = 0.2\n                if np.random.uniform() < local_search_space:\n                    birds[i] = np.clip(birds[i] + np.random.normal(0, 0.1, self.dim), -5.0, 5.0)\n                else:\n                    velocities[i] = inertia_weight * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                    velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                    birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                    if func(birds[i]) < func(best_position):\n                        best_position = birds[i]\n                    \n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return best_position", "name": "EnhancedBirdSwarmOptimization", "description": "Enhancing exploration with dynamic inertia weight, adaptive search space modification, and local search for improved exploitation-exploration balance.", "configspace": "", "generation": 96, "fitness": 0.18009000109666873, "feedback": "The algorithm EnhancedBirdSwarmOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.15.", "error": "", "parent_id": "cea29686-9a36-4358-b1f0-ae91ad3a3f28", "metadata": {"aucs": [0.39842226813232207, 0.4023693399617979, 0.4381755712168568, 0.3778035542255468, 0.3852060568625202, 0.3982425913553075, 0.38235891182950643, 0.40661142770327197, 0.3816146179760077, 0.02543675849218996, 0.02168625758987941, 9.999999999998899e-05, 0.033346237508237175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010225644317362281, 0.050555793416917516, 0.07754916420285496, 0.04628493171813075, 0.0730776235625753, 0.09400983403635987, 0.0943420646425267, 0.07999118403017369, 0.09063345237082321, 0.08379803549447096, 0.06254375151416136, 0.06266792767710794, 0.04196603076404226, 0.08148622826524465, 0.08726583946559874, 0.05669560905005788, 0.07252655059954216, 0.06672745651711542, 0.05457385814852356, 0.5861870748499157, 0.5356836010075672, 0.6150258998086955, 0.5620486044574521, 0.6011443125823319, 0.6466251441140556, 0.6244305101365918, 0.5579575303397468, 0.6075283035970238, 0.2547672502051195, 0.205740798942182, 0.2499139404055405, 0.2610924969802798, 0.22520558211660768, 0.24633258454359086, 0.23866004418762055, 0.2044787351749161, 0.2304603924562214, 0.20743786462126745, 0.13346668019986518, 0.21067943629170371, 0.2635601416595462, 0.27619620256145816, 0.2512992138363065, 0.14837681091123955, 0.1514557771474152, 0.19540497817943547, 0.1584292483371137, 0.14893159678285062, 0.1737593501257657, 0.12451394850070896, 0.16745807568313376, 0.15260132537792992, 0.16639721829038767, 0.16211474413467963, 0.1212665206933321, 0.11358867906306425, 0.17061162140880892, 0.1291407910780732, 0.20262314269578063, 0.17037048414439326, 0.17226094872687592, 0.1873615294505364, 0.1343012543308203, 0.16078032670835507, 9.999999999998899e-05, 0.05206394575071682, 0.023008003567963398, 0.0017926622201526188, 0.007062876553010522, 0.004560209933624715, 0.03410156879011961, 0.005787069692437585, 0.029897642042762573, 0.14974116173970797, 0.10942670766858442, 0.0850619049916701, 0.03337660634676742, 0.0021528109092052716, 0.05170218781819458, 0.1256336372247746, 0.11268206797740699, 0.0633650421924653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07148245217874405, 0.10076108877412715, 0.07218207061296711, 0.08244166704564249, 0.07856735207076093, 0.07714854954131478, 0.08080667747961456, 0.07347628739654388, 0.09314985873005022, 0.385118446726064, 0.3746017359963403, 0.38523536782633017, 0.35849473118742037, 0.3683874029578875, 0.34085399166863495, 0.37853327767754663, 0.36876686673983516, 0.3499650092243214, 0.037749808320805434, 0.04980121273632465, 0.031001796871880316, 0.08959047968483169, 0.05727977324795741, 0.08681916295833669, 0.11654948293718992, 0.0826253117687471, 0.06175065284963077, 0.23266149437048134, 0.21891908078539057, 0.17971987698709257, 0.14680013966904348, 0.22141636686278665, 0.2096480143888526, 0.20252257775721139, 0.2524226984082224, 0.22442149622382546, 0.17416310221347775, 0.2660998121924295, 0.16088564269482664, 0.19069045925002204, 0.26090454814230823, 0.2196727582213026, 0.18322995734624614, 0.2493121915446177, 0.12336636167550785, 0.0918448599722087, 0.1955329051795499, 0.1329709867413572, 0.18735268587080822, 0.22447548815385265, 0.16702897245641612, 0.15914645653935877, 0.19751196190115083, 0.06563240181904717, 0.21027059829605454, 0.22784396692751674, 0.20854554234324785, 0.23229963577229829, 0.19289001516378046, 0.19700141388267267, 0.18949846139206883, 0.2153722529982931, 0.1787130569240829, 0.1534505958314638, 0.16760320330106293, 0.17701275666660876, 0.16647896225180414, 0.17488597966673292, 0.16740770710642805, 0.16083203895827314, 0.17194330610035036, 0.15395438674441886, 0.12119114195140246, 0.16632677873850166, 0.16897209379287892, 0.6006740452062194, 0.19435156169976464, 0.6067662897686215, 0.09773964839309468, 0.5611442996790483, 0.15688079318214043, 0.44560117988060677, 0.19672239980826567, 0.47946548671251, 0.1844030620407605, 0.15626332759345518, 0.5108278126118619, 0.09932807569704605, 0.39309550892606737, 0.3860493363841878, 0.19413893007421967, 0.16733621329724224, 0.17741021865243434, 0.1808259414618919, 0.18471810064115102, 0.18979612337579876, 0.16918776826959747, 0.2044185186516979, 0.16854560956717723, 0.07920476440670554, 0.0655235523825699, 0.06330272374083612, 0.05887851270042843, 0.07330955310091469, 0.09264551395123777, 0.07907236464465206, 0.07563551507232802, 0.07340838300582597]}, "mutation_prompt": null}
{"id": "9825ba6a-128f-4012-9f80-c19cb95d7319", "solution": "import numpy as np\n\nclass EnhancedBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia_min=0.4, inertia_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                local_search_space = 0.2\n                if np.random.uniform() < local_search_space:\n                    birds[i] = np.clip(birds[i] + np.random.normal(0, 0.1, self.dim), -5.0, 5.0)\n                else:\n                    velocities[i] = inertia_weight * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                    velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                    birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                    if func(birds[i]) < func(best_position):\n                        best_position = birds[i]\n                    \n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return best_position", "name": "EnhancedBirdSwarmOptimization", "description": "Enhancing exploration with dynamic inertia weight, adaptive search space modification, and local search for improved exploitation-exploration balance.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d2b423cc-6eb9-4198-b27f-7f7c124d3c89", "metadata": {"aucs": [0.39842226813232207, 0.4023693399617979, 0.4381755712168568, 0.3778035542255468, 0.3852060568625202, 0.3982425913553075, 0.38235891182950643, 0.40661142770327197, 0.3816146179760077, 0.02543675849218996, 0.02168625758987941, 9.999999999998899e-05, 0.033346237508237175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010225644317362281, 0.050555793416917516, 0.07754916420285496, 0.04628493171813075, 0.0730776235625753, 0.09400983403635987, 0.0943420646425267, 0.07999118403017369, 0.09063345237082321, 0.08379803549447096, 0.06254375151416136, 0.06266792767710794, 0.04196603076404226, 0.08148622826524465, 0.08726583946559874, 0.05669560905005788, 0.07252655059954216, 0.06672745651711542, 0.05457385814852356, 0.5861870748499157, 0.5356836010075672, 0.6150258998086955, 0.5620486044574521, 0.6011443125823319, 0.6466251441140556, 0.6244305101365918, 0.5579575303397468, 0.6075283035970238, 0.2547672502051195, 0.205740798942182, 0.2499139404055405, 0.2610924969802798, 0.22520558211660768, 0.24633258454359086, 0.23866004418762055, 0.2044787351749161, 0.2304603924562214, 0.20743786462126745, 0.13346668019986518, 0.21067943629170371, 0.2635601416595462, 0.27619620256145816, 0.2512992138363065, 0.14837681091123955, 0.1514557771474152, 0.19540497817943547, 0.1584292483371137, 0.14893159678285062, 0.1737593501257657, 0.12451394850070896, 0.16745807568313376, 0.15260132537792992, 0.16639721829038767, 0.16211474413467963, 0.1212665206933321, 0.11358867906306425, 0.17061162140880892, 0.1291407910780732, 0.20262314269578063, 0.17037048414439326, 0.17226094872687592, 0.1873615294505364, 0.1343012543308203, 0.16078032670835507, 9.999999999998899e-05, 0.05206394575071682, 0.023008003567963398, 0.0017926622201526188, 0.007062876553010522, 0.004560209933624715, 0.03410156879011961, 0.005787069692437585, 0.029897642042762573, 0.14974116173970797, 0.10942670766858442, 0.0850619049916701, 0.03337660634676742, 0.0021528109092052716, 0.05170218781819458, 0.1256336372247746, 0.11268206797740699, 0.0633650421924653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07148245217874405, 0.10076108877412715, 0.07218207061296711, 0.08244166704564249, 0.07856735207076093, 0.07714854954131478, 0.08080667747961456, 0.07347628739654388, 0.09314985873005022, 0.385118446726064, 0.3746017359963403, 0.38523536782633017, 0.35849473118742037, 0.3683874029578875, 0.34085399166863495, 0.37853327767754663, 0.36876686673983516, 0.3499650092243214, 0.037749808320805434, 0.04980121273632465, 0.031001796871880316, 0.08959047968483169, 0.05727977324795741, 0.08681916295833669, 0.11654948293718992, 0.0826253117687471, 0.06175065284963077, 0.23266149437048134, 0.21891908078539057, 0.17971987698709257, 0.14680013966904348, 0.22141636686278665, 0.2096480143888526, 0.20252257775721139, 0.2524226984082224, 0.22442149622382546, 0.17416310221347775, 0.2660998121924295, 0.16088564269482664, 0.19069045925002204, 0.26090454814230823, 0.2196727582213026, 0.18322995734624614, 0.2493121915446177, 0.12336636167550785, 0.0918448599722087, 0.1955329051795499, 0.1329709867413572, 0.18735268587080822, 0.22447548815385265, 0.16702897245641612, 0.15914645653935877, 0.19751196190115083, 0.06563240181904717, 0.21027059829605454, 0.22784396692751674, 0.20854554234324785, 0.23229963577229829, 0.19289001516378046, 0.19700141388267267, 0.18949846139206883, 0.2153722529982931, 0.1787130569240829, 0.1534505958314638, 0.16760320330106293, 0.17701275666660876, 0.16647896225180414, 0.17488597966673292, 0.16740770710642805, 0.16083203895827314, 0.17194330610035036, 0.15395438674441886, 0.12119114195140246, 0.16632677873850166, 0.16897209379287892, 0.6006740452062194, 0.19435156169976464, 0.6067662897686215, 0.09773964839309468, 0.5611442996790483, 0.15688079318214043, 0.44560117988060677, 0.19672239980826567, 0.47946548671251, 0.1844030620407605, 0.15626332759345518, 0.5108278126118619, 0.09932807569704605, 0.39309550892606737, 0.3860493363841878, 0.19413893007421967, 0.16733621329724224, 0.17741021865243434, 0.1808259414618919, 0.18471810064115102, 0.18979612337579876, 0.16918776826959747, 0.2044185186516979, 0.16854560956717723, 0.07920476440670554, 0.0655235523825699, 0.06330272374083612, 0.05887851270042843, 0.07330955310091469, 0.09264551395123777, 0.07907236464465206, 0.07563551507232802, 0.07340838300582597]}, "mutation_prompt": null}
{"id": "3451d623-16f9-4aaa-9557-882c9be99533", "solution": "import numpy as np\n\nclass EnhancedBirdSwarmOptimizationImproved:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia_min=0.4, inertia_max=0.9, mutation_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n        self.mutation_rate = mutation_rate\n\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                local_search_space = 0.2\n                if np.random.uniform() < local_search_space:\n                    birds[i] = np.clip(birds[i] + np.random.normal(0, 0.1, self.dim), -5.0, 5.0)\n                else:\n                    if np.random.uniform() < self.mutation_rate:\n                        birds[i] = np.random.uniform(-5.0, 5.0, self.dim)\n                    else:\n                        velocities[i] = inertia_weight * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                        velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                        birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                        if func(birds[i]) < func(best_position):\n                            best_position = birds[i]\n                    \n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return best_position", "name": "EnhancedBirdSwarmOptimizationImproved", "description": "Improving population diversity by incorporating a mutation mechanism to explore new regions in the search space.", "configspace": "", "generation": 98, "fitness": 0.08998544885002183, "feedback": "The algorithm EnhancedBirdSwarmOptimizationImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "d2b423cc-6eb9-4198-b27f-7f7c124d3c89", "metadata": {"aucs": [0.221000908507487, 0.19884234611467133, 0.18671640035386272, 0.1380014860486437, 0.13200004601311666, 0.1461279828021057, 0.14815641831126436, 0.12483054613094335, 0.1718631903868454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06247074418319498, 0.0694481896741922, 0.05070381829924242, 0.061729725017839465, 0.04869136459226808, 0.059666684237580925, 0.08612428663637761, 0.05766254192164655, 0.04451262648663501, 0.0467385425739798, 0.05095350902733631, 0.04315682177094915, 0.03212250319280152, 0.066411273544426, 0.042337492172256685, 0.03922352017897501, 0.06572629281333797, 0.033712464768840045, 0.07060205210531079, 0.0871184772773127, 0.059883934324655774, 0.05958615990722771, 0.06895094370034727, 0.05749962100674433, 0.06534329750354406, 0.05646728686489255, 0.05578292465451029, 0.07038264245261439, 0.06954494692486402, 0.04909712346186157, 0.05616479703789734, 0.02402368080165418, 0.055671241243680725, 0.029965297981355943, 0.05878383226882089, 0.03678237696919262, 0.11569343290195833, 0.13443264269569077, 0.1210630268202374, 0.1117122885581523, 0.11378135517103527, 0.16079846181728097, 0.07451218297957152, 0.11955929067300053, 0.10910457842582821, 0.02197752138462805, 0.02053680716331585, 0.005071067640949556, 0.003153252919567251, 0.015962656637212413, 9.999999999998899e-05, 0.012366865834891216, 9.999999999998899e-05, 0.0061641733490789274, 0.036240085683492684, 0.010429632167598735, 0.030063769313016353, 0.024331255559528864, 0.02455768261344038, 0.050251319701057895, 0.03339537131665127, 0.03784185247330474, 0.02010638715930857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07397001549549642, 0.05500743070023584, 0.05821092834245445, 0.057534875216639025, 0.06596190092795728, 0.061998286503373135, 0.08095685672110542, 0.06552381652861805, 0.09214250936285806, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00876261434758785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2415396171376577, 0.20840636815025215, 0.2390531229691636, 0.22266538190099883, 0.162998220612673, 0.18429229569967287, 0.17974148635714737, 0.19753921883247272, 0.21770684975082655, 0.026957066278388786, 0.03234087228234761, 0.03419081057521167, 0.0719336083696791, 0.033410176072536935, 0.04419933576822899, 0.0655396675644595, 0.04246292761046966, 0.05531719345943331, 0.16799541416465347, 0.12964945595299704, 0.13697700117423706, 0.1471167162243291, 0.1273515091816051, 0.12672308350553196, 0.11968354526819824, 0.11084603547063632, 0.1226188340340304, 0.15174647608113012, 0.17379652135313828, 0.1858313545524295, 0.1897782828365424, 0.17003386550183186, 0.1990270947624888, 0.1515514035373886, 0.19196799670811993, 0.20289299333664745, 0.08725062541776352, 0.11311700215716369, 0.11729154962938393, 0.11069325767176341, 0.1338660382762168, 0.14561558422133036, 0.10246531629048461, 0.14410688505078761, 0.1329286194945718, 0.1826956491597851, 0.19403913034504927, 0.17355294395823495, 0.1513738725778916, 0.16106242628419587, 0.17302768986149808, 0.18065874741246313, 0.17445242581946818, 0.18897000177764622, 0.13920449033394255, 0.150623611786738, 0.14925821374533677, 0.1586364990353546, 0.1324404616068865, 0.14997746767617282, 0.1442076113572751, 0.13448628425971165, 0.15207687489972976, 0.11189111106765703, 0.15732189567013288, 0.14447145058945976, 0.15616621689191545, 0.2035566004180358, 0.17256173209884895, 0.12012627316788016, 0.167092527805351, 0.1724107985347797, 0.11975178754818028, 0.10633012918283236, 0.24924314470804576, 0.12537906998625836, 0.11887033848290651, 0.12840777157602956, 0.14158995018264064, 0.13292935881418055, 0.1562053244019791, 0.18317133755762016, 0.1971187761583063, 0.18030198053159618, 0.18579835319094462, 0.17230529992179422, 0.19758548335645132, 0.17134183877008458, 0.17669031884808484, 0.17556047941565067, 0.04607321583174562, 0.0609883899955006, 0.05865802030512346, 0.06559592836136452, 0.06937021588477532, 0.06251505824827241, 0.08016563727841819, 0.06871895323902355, 0.0591725430850103]}, "mutation_prompt": null}
{"id": "3278a861-c6cd-4003-a127-a90599b55b8f", "solution": "import numpy as np\n\nclass EnhancedBirdSwarmOptimization:\n    def __init__(self, budget, dim, num_birds=20, max_speed=0.1, alpha=1.0, beta=0.5, inertia_min=0.4, inertia_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.num_birds = num_birds\n        self.max_speed = max_speed\n        self.alpha = alpha\n        self.beta = beta\n        self.inertia_min = inertia_min\n        self.inertia_max = inertia_max\n\n    def __call__(self, func):\n        birds = np.random.uniform(-5.0, 5.0, (self.num_birds, self.dim))\n        velocities = np.zeros((self.num_birds, self.dim))\n        best_position = birds[np.argmin([func(bird) for bird in birds])]\n        inertia_weight = self.inertia_max\n\n        for _ in range(self.budget):\n            for i in range(self.num_birds):\n                local_search_space = 0.2\n                if np.random.uniform() < local_search_space:\n                    birds[i] = np.clip(birds[i] + np.random.normal(0, 0.1, self.dim), -5.0, 5.0)\n                else:\n                    velocities[i] = inertia_weight * velocities[i] + self.beta * np.random.uniform() * (best_position - birds[i])\n                    velocities[i] = np.clip(velocities[i], -self.max_speed, self.max_speed)\n                    birds[i] = np.clip(birds[i] + velocities[i], -5.0, 5.0)\n                    if func(birds[i]) < func(best_position):\n                        best_position = birds[i]\n                    \n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        \n        return best_position", "name": "EnhancedBirdSwarmOptimization", "description": "Enhancing exploration with dynamic inertia weight, adaptive search space modification, and local search for improved exploitation-exploration balance.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d2b423cc-6eb9-4198-b27f-7f7c124d3c89", "metadata": {"aucs": [0.39842226813232207, 0.4023693399617979, 0.4381755712168568, 0.3778035542255468, 0.3852060568625202, 0.3982425913553075, 0.38235891182950643, 0.40661142770327197, 0.3816146179760077, 0.02543675849218996, 0.02168625758987941, 9.999999999998899e-05, 0.033346237508237175, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010225644317362281, 0.050555793416917516, 0.07754916420285496, 0.04628493171813075, 0.0730776235625753, 0.09400983403635987, 0.0943420646425267, 0.07999118403017369, 0.09063345237082321, 0.08379803549447096, 0.06254375151416136, 0.06266792767710794, 0.04196603076404226, 0.08148622826524465, 0.08726583946559874, 0.05669560905005788, 0.07252655059954216, 0.06672745651711542, 0.05457385814852356, 0.5861870748499157, 0.5356836010075672, 0.6150258998086955, 0.5620486044574521, 0.6011443125823319, 0.6466251441140556, 0.6244305101365918, 0.5579575303397468, 0.6075283035970238, 0.2547672502051195, 0.205740798942182, 0.2499139404055405, 0.2610924969802798, 0.22520558211660768, 0.24633258454359086, 0.23866004418762055, 0.2044787351749161, 0.2304603924562214, 0.20743786462126745, 0.13346668019986518, 0.21067943629170371, 0.2635601416595462, 0.27619620256145816, 0.2512992138363065, 0.14837681091123955, 0.1514557771474152, 0.19540497817943547, 0.1584292483371137, 0.14893159678285062, 0.1737593501257657, 0.12451394850070896, 0.16745807568313376, 0.15260132537792992, 0.16639721829038767, 0.16211474413467963, 0.1212665206933321, 0.11358867906306425, 0.17061162140880892, 0.1291407910780732, 0.20262314269578063, 0.17037048414439326, 0.17226094872687592, 0.1873615294505364, 0.1343012543308203, 0.16078032670835507, 9.999999999998899e-05, 0.05206394575071682, 0.023008003567963398, 0.0017926622201526188, 0.007062876553010522, 0.004560209933624715, 0.03410156879011961, 0.005787069692437585, 0.029897642042762573, 0.14974116173970797, 0.10942670766858442, 0.0850619049916701, 0.03337660634676742, 0.0021528109092052716, 0.05170218781819458, 0.1256336372247746, 0.11268206797740699, 0.0633650421924653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07148245217874405, 0.10076108877412715, 0.07218207061296711, 0.08244166704564249, 0.07856735207076093, 0.07714854954131478, 0.08080667747961456, 0.07347628739654388, 0.09314985873005022, 0.385118446726064, 0.3746017359963403, 0.38523536782633017, 0.35849473118742037, 0.3683874029578875, 0.34085399166863495, 0.37853327767754663, 0.36876686673983516, 0.3499650092243214, 0.037749808320805434, 0.04980121273632465, 0.031001796871880316, 0.08959047968483169, 0.05727977324795741, 0.08681916295833669, 0.11654948293718992, 0.0826253117687471, 0.06175065284963077, 0.23266149437048134, 0.21891908078539057, 0.17971987698709257, 0.14680013966904348, 0.22141636686278665, 0.2096480143888526, 0.20252257775721139, 0.2524226984082224, 0.22442149622382546, 0.17416310221347775, 0.2660998121924295, 0.16088564269482664, 0.19069045925002204, 0.26090454814230823, 0.2196727582213026, 0.18322995734624614, 0.2493121915446177, 0.12336636167550785, 0.0918448599722087, 0.1955329051795499, 0.1329709867413572, 0.18735268587080822, 0.22447548815385265, 0.16702897245641612, 0.15914645653935877, 0.19751196190115083, 0.06563240181904717, 0.21027059829605454, 0.22784396692751674, 0.20854554234324785, 0.23229963577229829, 0.19289001516378046, 0.19700141388267267, 0.18949846139206883, 0.2153722529982931, 0.1787130569240829, 0.1534505958314638, 0.16760320330106293, 0.17701275666660876, 0.16647896225180414, 0.17488597966673292, 0.16740770710642805, 0.16083203895827314, 0.17194330610035036, 0.15395438674441886, 0.12119114195140246, 0.16632677873850166, 0.16897209379287892, 0.6006740452062194, 0.19435156169976464, 0.6067662897686215, 0.09773964839309468, 0.5611442996790483, 0.15688079318214043, 0.44560117988060677, 0.19672239980826567, 0.47946548671251, 0.1844030620407605, 0.15626332759345518, 0.5108278126118619, 0.09932807569704605, 0.39309550892606737, 0.3860493363841878, 0.19413893007421967, 0.16733621329724224, 0.17741021865243434, 0.1808259414618919, 0.18471810064115102, 0.18979612337579876, 0.16918776826959747, 0.2044185186516979, 0.16854560956717723, 0.07920476440670554, 0.0655235523825699, 0.06330272374083612, 0.05887851270042843, 0.07330955310091469, 0.09264551395123777, 0.07907236464465206, 0.07563551507232802, 0.07340838300582597]}, "mutation_prompt": null}
