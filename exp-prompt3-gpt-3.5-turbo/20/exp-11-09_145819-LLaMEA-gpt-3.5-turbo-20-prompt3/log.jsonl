{"id": "384ed180-ba5a-4a48-a852-7bf3c9aa6963", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.Cr = Cr\n        self.F = F\n        self.pop_size = pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n\n        return best_solution", "name": "DifferentialEvolution", "description": "An Evolutionary Algorithm with Differential Evolution (DE) strategy for solving black box optimization problems efficiently.", "configspace": "", "generation": 0, "fitness": 0.261332256345072, "feedback": "The algorithm DifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": null, "metadata": {"aucs": [0.6303508354012273, 0.5881740726649367, 0.5891367376365919, 0.6568358532205242, 0.6555401612365537, 0.65296100072555, 0.6637250105621948, 0.6265200288477026, 0.6187073213074975, 0.37439341304077844, 0.3800832742909276, 0.40121637057003157, 0.36186636213755163, 0.39349809186942775, 0.37504237839940546, 0.3676173354635739, 0.4193998164447448, 0.37875790113541397, 0.08457234728953755, 0.09768538036614738, 0.09939994212135517, 0.09869526375611914, 0.10221110508964115, 0.09338603933660983, 0.09402119400699771, 0.08731927456072386, 0.0975070629226138, 0.0846779025785136, 0.08475860204237373, 0.10875946924860236, 0.08593690562373735, 0.09274532457230034, 0.08477075380675247, 0.08852976634851817, 0.08869646286835409, 0.09196649997552997, 0.9806164642140757, 0.9131818418276485, 0.9674545387139455, 0.9574454447453314, 0.9162789564746359, 0.937231638163827, 0.9708179656152067, 0.9572804101259852, 0.9689147118055341, 0.28767841534904903, 0.27664866878666927, 0.2767787090641307, 0.2923089614211929, 0.2936114022452716, 0.2978810074614271, 0.3049580789019337, 0.2947505647469819, 0.3244318716073322, 0.4526956263143981, 0.5248197934116622, 0.41221304718668095, 0.5446581167637885, 0.5107403124377873, 0.5252956318567661, 0.48803742374257464, 0.5922773014258165, 0.505131848408342, 0.18994771786815068, 0.17033309018921095, 0.18962320003970023, 0.1910976729789471, 0.20456379799817226, 0.2070114110775435, 0.20124931116062617, 0.15631712961686228, 0.1529920834026519, 0.3055112677980847, 0.1845900816905398, 0.2276708148330614, 0.18309171089383114, 0.1441194727355769, 0.1969768063407772, 0.14134762277706048, 0.1792125223003732, 0.19596984723449518, 0.10801259564742283, 0.10967396084522951, 0.13301285818910424, 0.12525735077891154, 0.12275425545154262, 0.11890239086965615, 0.133685315045173, 0.11501453728025224, 0.11283451563224478, 0.2539429787238767, 0.25896604227405284, 0.25913870931783944, 0.24087463892121008, 0.2149830053963011, 0.2187834475285385, 0.27922647490104313, 0.2924978657640861, 0.28086858341926335, 0.028143112581165197, 0.039852708190292296, 0.017294577783444454, 0.043772841013424824, 0.02461714117929914, 0.04127468037370052, 0.04327819683910983, 0.04587756189208636, 0.05844591588151238, 0.16455666449639217, 0.15526429165349842, 0.15266820615463972, 0.16384632922330133, 0.15995796486835245, 0.16239319887670844, 0.15369415611647597, 0.15767720857427558, 0.16742728621304837, 0.45465858219947897, 0.47302634420768974, 0.48483373588285883, 0.5086286141823626, 0.4832328721843345, 0.4946498136198044, 0.4602369260347182, 0.48678270611797436, 0.48532356754305794, 0.0844803077644134, 0.08415303633101867, 0.10025593786815001, 0.08432894306818195, 0.09502256669064424, 0.08987697026955177, 0.08039373434577479, 0.07934987507880142, 0.09686658210897281, 0.16801503062757928, 0.17302141451976039, 0.15502553429251453, 0.16352084702203262, 0.13602443403332198, 0.13638572837206264, 0.16024913837653498, 0.12693231315176212, 0.16391225786162578, 0.2874423904336383, 0.25031984715689437, 0.2840692816521003, 0.24230536005838954, 0.23905103299313368, 0.2594671564596721, 0.27418700571780275, 0.294969186889666, 0.28426947115397716, 0.21751662185266252, 0.19659104531943938, 0.1939266368330259, 0.19054678573538264, 0.190122406672665, 0.20111429963049443, 0.19993247051676832, 0.2110290629383278, 0.21386775057452556, 0.18996915365687672, 0.1663641699353139, 0.19324255631970033, 0.17364760462161344, 0.1870411048485292, 0.19408361306047373, 0.19284687291941127, 0.17892342692630614, 0.20398711381524892, 0.17165340471788326, 0.1967187745695591, 0.18302442806360586, 0.17590332188346436, 0.1765885235593807, 0.17347456612798162, 0.1776861424187095, 0.17522357168451674, 0.18793134262210875, 0.15921784572767506, 0.6129508645813364, 0.6642467290753948, 0.1786883177057873, 0.18378424769521984, 0.18073628786737195, 0.15403689036891155, 0.20886084501698632, 0.342656479443594, 0.18670770639170065, 0.19405961062195598, 0.18446824984255095, 0.35460133867526933, 0.2680880141132066, 0.18146512164890416, 0.20313234900068633, 0.4998942066599751, 0.20536619896909192, 0.18783732924635088, 0.18023815829916234, 0.20220339461419934, 0.18749187771032993, 0.16688167222158756, 0.19104640338469214, 0.1754204263818494, 0.18923353842363744, 0.17298381898649295, 0.06350994990888392, 0.07711820996947749, 0.06395195290550271, 0.07669306676589549, 0.07181442078783418, 0.06805418663340457, 0.07552370055913327, 0.06568610617668169, 0.07719139294140276]}, "mutation_prompt": null}
{"id": "6347bf92-522d-489b-a00d-99402b9b5ece", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.Cr = Cr\n        self.F = F\n        self.pop_size = pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n\n        return best_solution", "name": "DifferentialEvolution", "description": "An Evolutionary Algorithm with Differential Evolution (DE) strategy for solving black box optimization problems efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "384ed180-ba5a-4a48-a852-7bf3c9aa6963", "metadata": {"aucs": [0.6303508354012273, 0.5881740726649367, 0.5891367376365919, 0.6568358532205242, 0.6555401612365537, 0.65296100072555, 0.6637250105621948, 0.6265200288477026, 0.6187073213074975, 0.37439341304077844, 0.3800832742909276, 0.40121637057003157, 0.36186636213755163, 0.39349809186942775, 0.37504237839940546, 0.3676173354635739, 0.4193998164447448, 0.37875790113541397, 0.08457234728953755, 0.09768538036614738, 0.09939994212135517, 0.09869526375611914, 0.10221110508964115, 0.09338603933660983, 0.09402119400699771, 0.08731927456072386, 0.0975070629226138, 0.0846779025785136, 0.08475860204237373, 0.10875946924860236, 0.08593690562373735, 0.09274532457230034, 0.08477075380675247, 0.08852976634851817, 0.08869646286835409, 0.09196649997552997, 0.9806164642140757, 0.9131818418276485, 0.9674545387139455, 0.9574454447453314, 0.9162789564746359, 0.937231638163827, 0.9708179656152067, 0.9572804101259852, 0.9689147118055341, 0.28767841534904903, 0.27664866878666927, 0.2767787090641307, 0.2923089614211929, 0.2936114022452716, 0.2978810074614271, 0.3049580789019337, 0.2947505647469819, 0.3244318716073322, 0.4526956263143981, 0.5248197934116622, 0.41221304718668095, 0.5446581167637885, 0.5107403124377873, 0.5252956318567661, 0.48803742374257464, 0.5922773014258165, 0.505131848408342, 0.18994771786815068, 0.17033309018921095, 0.18962320003970023, 0.1910976729789471, 0.20456379799817226, 0.2070114110775435, 0.20124931116062617, 0.15631712961686228, 0.1529920834026519, 0.3055112677980847, 0.1845900816905398, 0.2276708148330614, 0.18309171089383114, 0.1441194727355769, 0.1969768063407772, 0.14134762277706048, 0.1792125223003732, 0.19596984723449518, 0.10801259564742283, 0.10967396084522951, 0.13301285818910424, 0.12525735077891154, 0.12275425545154262, 0.11890239086965615, 0.133685315045173, 0.11501453728025224, 0.11283451563224478, 0.2539429787238767, 0.25896604227405284, 0.25913870931783944, 0.24087463892121008, 0.2149830053963011, 0.2187834475285385, 0.27922647490104313, 0.2924978657640861, 0.28086858341926335, 0.028143112581165197, 0.039852708190292296, 0.017294577783444454, 0.043772841013424824, 0.02461714117929914, 0.04127468037370052, 0.04327819683910983, 0.04587756189208636, 0.05844591588151238, 0.16455666449639217, 0.15526429165349842, 0.15266820615463972, 0.16384632922330133, 0.15995796486835245, 0.16239319887670844, 0.15369415611647597, 0.15767720857427558, 0.16742728621304837, 0.45465858219947897, 0.47302634420768974, 0.48483373588285883, 0.5086286141823626, 0.4832328721843345, 0.4946498136198044, 0.4602369260347182, 0.48678270611797436, 0.48532356754305794, 0.0844803077644134, 0.08415303633101867, 0.10025593786815001, 0.08432894306818195, 0.09502256669064424, 0.08987697026955177, 0.08039373434577479, 0.07934987507880142, 0.09686658210897281, 0.16801503062757928, 0.17302141451976039, 0.15502553429251453, 0.16352084702203262, 0.13602443403332198, 0.13638572837206264, 0.16024913837653498, 0.12693231315176212, 0.16391225786162578, 0.2874423904336383, 0.25031984715689437, 0.2840692816521003, 0.24230536005838954, 0.23905103299313368, 0.2594671564596721, 0.27418700571780275, 0.294969186889666, 0.28426947115397716, 0.21751662185266252, 0.19659104531943938, 0.1939266368330259, 0.19054678573538264, 0.190122406672665, 0.20111429963049443, 0.19993247051676832, 0.2110290629383278, 0.21386775057452556, 0.18996915365687672, 0.1663641699353139, 0.19324255631970033, 0.17364760462161344, 0.1870411048485292, 0.19408361306047373, 0.19284687291941127, 0.17892342692630614, 0.20398711381524892, 0.17165340471788326, 0.1967187745695591, 0.18302442806360586, 0.17590332188346436, 0.1765885235593807, 0.17347456612798162, 0.1776861424187095, 0.17522357168451674, 0.18793134262210875, 0.15921784572767506, 0.6129508645813364, 0.6642467290753948, 0.1786883177057873, 0.18378424769521984, 0.18073628786737195, 0.15403689036891155, 0.20886084501698632, 0.342656479443594, 0.18670770639170065, 0.19405961062195598, 0.18446824984255095, 0.35460133867526933, 0.2680880141132066, 0.18146512164890416, 0.20313234900068633, 0.4998942066599751, 0.20536619896909192, 0.18783732924635088, 0.18023815829916234, 0.20220339461419934, 0.18749187771032993, 0.16688167222158756, 0.19104640338469214, 0.1754204263818494, 0.18923353842363744, 0.17298381898649295, 0.06350994990888392, 0.07711820996947749, 0.06395195290550271, 0.07669306676589549, 0.07181442078783418, 0.06805418663340457, 0.07552370055913327, 0.06568610617668169, 0.07719139294140276]}, "mutation_prompt": null}
{"id": "e5a9f36a-47c5-47d0-b308-838a3f1cc4c8", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50):\n        self.budget = budget\n        self.dim = dim\n        self.Cr = Cr\n        self.F = F\n        self.pop_size = pop_size\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n\n        return best_solution", "name": "DifferentialEvolution", "description": "An Evolutionary Algorithm with Differential Evolution (DE) strategy for solving black box optimization problems efficiently.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "384ed180-ba5a-4a48-a852-7bf3c9aa6963", "metadata": {"aucs": [0.6303508354012273, 0.5881740726649367, 0.5891367376365919, 0.6568358532205242, 0.6555401612365537, 0.65296100072555, 0.6637250105621948, 0.6265200288477026, 0.6187073213074975, 0.37439341304077844, 0.3800832742909276, 0.40121637057003157, 0.36186636213755163, 0.39349809186942775, 0.37504237839940546, 0.3676173354635739, 0.4193998164447448, 0.37875790113541397, 0.08457234728953755, 0.09768538036614738, 0.09939994212135517, 0.09869526375611914, 0.10221110508964115, 0.09338603933660983, 0.09402119400699771, 0.08731927456072386, 0.0975070629226138, 0.0846779025785136, 0.08475860204237373, 0.10875946924860236, 0.08593690562373735, 0.09274532457230034, 0.08477075380675247, 0.08852976634851817, 0.08869646286835409, 0.09196649997552997, 0.9806164642140757, 0.9131818418276485, 0.9674545387139455, 0.9574454447453314, 0.9162789564746359, 0.937231638163827, 0.9708179656152067, 0.9572804101259852, 0.9689147118055341, 0.28767841534904903, 0.27664866878666927, 0.2767787090641307, 0.2923089614211929, 0.2936114022452716, 0.2978810074614271, 0.3049580789019337, 0.2947505647469819, 0.3244318716073322, 0.4526956263143981, 0.5248197934116622, 0.41221304718668095, 0.5446581167637885, 0.5107403124377873, 0.5252956318567661, 0.48803742374257464, 0.5922773014258165, 0.505131848408342, 0.18994771786815068, 0.17033309018921095, 0.18962320003970023, 0.1910976729789471, 0.20456379799817226, 0.2070114110775435, 0.20124931116062617, 0.15631712961686228, 0.1529920834026519, 0.3055112677980847, 0.1845900816905398, 0.2276708148330614, 0.18309171089383114, 0.1441194727355769, 0.1969768063407772, 0.14134762277706048, 0.1792125223003732, 0.19596984723449518, 0.10801259564742283, 0.10967396084522951, 0.13301285818910424, 0.12525735077891154, 0.12275425545154262, 0.11890239086965615, 0.133685315045173, 0.11501453728025224, 0.11283451563224478, 0.2539429787238767, 0.25896604227405284, 0.25913870931783944, 0.24087463892121008, 0.2149830053963011, 0.2187834475285385, 0.27922647490104313, 0.2924978657640861, 0.28086858341926335, 0.028143112581165197, 0.039852708190292296, 0.017294577783444454, 0.043772841013424824, 0.02461714117929914, 0.04127468037370052, 0.04327819683910983, 0.04587756189208636, 0.05844591588151238, 0.16455666449639217, 0.15526429165349842, 0.15266820615463972, 0.16384632922330133, 0.15995796486835245, 0.16239319887670844, 0.15369415611647597, 0.15767720857427558, 0.16742728621304837, 0.45465858219947897, 0.47302634420768974, 0.48483373588285883, 0.5086286141823626, 0.4832328721843345, 0.4946498136198044, 0.4602369260347182, 0.48678270611797436, 0.48532356754305794, 0.0844803077644134, 0.08415303633101867, 0.10025593786815001, 0.08432894306818195, 0.09502256669064424, 0.08987697026955177, 0.08039373434577479, 0.07934987507880142, 0.09686658210897281, 0.16801503062757928, 0.17302141451976039, 0.15502553429251453, 0.16352084702203262, 0.13602443403332198, 0.13638572837206264, 0.16024913837653498, 0.12693231315176212, 0.16391225786162578, 0.2874423904336383, 0.25031984715689437, 0.2840692816521003, 0.24230536005838954, 0.23905103299313368, 0.2594671564596721, 0.27418700571780275, 0.294969186889666, 0.28426947115397716, 0.21751662185266252, 0.19659104531943938, 0.1939266368330259, 0.19054678573538264, 0.190122406672665, 0.20111429963049443, 0.19993247051676832, 0.2110290629383278, 0.21386775057452556, 0.18996915365687672, 0.1663641699353139, 0.19324255631970033, 0.17364760462161344, 0.1870411048485292, 0.19408361306047373, 0.19284687291941127, 0.17892342692630614, 0.20398711381524892, 0.17165340471788326, 0.1967187745695591, 0.18302442806360586, 0.17590332188346436, 0.1765885235593807, 0.17347456612798162, 0.1776861424187095, 0.17522357168451674, 0.18793134262210875, 0.15921784572767506, 0.6129508645813364, 0.6642467290753948, 0.1786883177057873, 0.18378424769521984, 0.18073628786737195, 0.15403689036891155, 0.20886084501698632, 0.342656479443594, 0.18670770639170065, 0.19405961062195598, 0.18446824984255095, 0.35460133867526933, 0.2680880141132066, 0.18146512164890416, 0.20313234900068633, 0.4998942066599751, 0.20536619896909192, 0.18783732924635088, 0.18023815829916234, 0.20220339461419934, 0.18749187771032993, 0.16688167222158756, 0.19104640338469214, 0.1754204263818494, 0.18923353842363744, 0.17298381898649295, 0.06350994990888392, 0.07711820996947749, 0.06395195290550271, 0.07669306676589549, 0.07181442078783418, 0.06805418663340457, 0.07552370055913327, 0.06568610617668169, 0.07719139294140276]}, "mutation_prompt": null}
{"id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "solution": "import numpy as np\n\nclass AdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n\n        return best_solution", "name": "AdaptiveDE", "description": "Integrate a novel adaptive mutation strategy based on self-adaptation of mutation factor F during the optimization process to enhance exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": 0.3475094758857426, "feedback": "The algorithm AdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "384ed180-ba5a-4a48-a852-7bf3c9aa6963", "metadata": {"aucs": [0.831148284950614, 0.83318019711314, 0.6607244044686424, 0.8495063464675087, 0.8519308515209606, 0.7026665281047638, 0.8426282524800252, 0.8303075448280007, 0.715378807462465, 0.697773604579557, 0.7467584022429838, 0.5273537816881422, 0.5015308189487535, 0.7298720064542665, 0.5153002978143013, 0.7015637355309743, 0.7399645433034743, 0.5369544376772666, 0.2580231436297492, 0.15297397601500307, 0.11124065917930426, 0.36443388801373255, 0.12239841815453345, 0.08430554893213904, 0.522936866944081, 0.1318803267771146, 0.10149922979671788, 0.12879032488630526, 0.14770483237793464, 0.10248959443538586, 0.1342545715729777, 0.16147175465827368, 0.10364805289385715, 0.11925402809016128, 0.1101969461418455, 0.08552798943071871, 0.7635205967281682, 0.871997082510644, 0.9413740021449605, 0.8998826316901585, 0.9370627702978682, 0.9413965664878168, 0.9688862766394543, 0.8858591326328384, 0.955457382167406, 0.1939264839457442, 0.22266230052514424, 0.35996891523860164, 0.26181445223676847, 0.20361777425996885, 0.34260297631091163, 0.2546702295355707, 0.20425336821901396, 0.38088025662710134, 0.8297509097193929, 0.8128894457746949, 0.5815064183152875, 0.7605897763021063, 0.8413459090253004, 0.6600445846218826, 0.37655218978656946, 0.8098809355190146, 0.6490378486945227, 0.15568827318836198, 0.1348642057305226, 0.1893955876536102, 0.19740454634173776, 0.13445480195652293, 0.18787820295418722, 0.3502015119395665, 0.16184137376479835, 0.18172672910324295, 0.10043581715191108, 0.28110969425148324, 0.187140803662173, 0.2565947531499031, 0.21027228914061336, 0.20786453501337532, 0.15566819154218026, 0.20344336901309323, 0.27073795782963717, 0.09946022882658057, 0.5323881740431908, 0.29947661510934354, 0.09761265815472853, 0.2028642226282492, 0.25696695171990924, 0.11210094996550779, 0.2549297579952273, 0.23984051208135315, 0.16071628789824355, 0.2800059877792097, 0.37160705522000914, 0.3205459633382035, 0.17320609105800144, 0.35623143139372737, 0.2049339990997473, 0.227677793637718, 0.4381918116043215, 0.08247519556156935, 0.11841212978308979, 0.0994380252814302, 0.2357769301639, 0.12114043225061721, 0.1182544695278811, 0.26795176793652953, 0.25128068432191963, 0.0859429556338106, 0.18399870730897228, 0.39293606162180317, 0.22945578616195805, 0.375380122741939, 0.28886558298443266, 0.23704608585589848, 0.1118953848406602, 0.28097015484966315, 0.2327968057828822, 0.5741411562251069, 0.6078796243382882, 0.6078487870754321, 0.5449604317851683, 0.7507816150125274, 0.5982879121891092, 0.5270903674140796, 0.5956475700561232, 0.5824838209360796, 0.12778052746828272, 0.14111101874024756, 0.10000608241807785, 0.15715722879765004, 0.13387797854181427, 0.09924293782602778, 0.11657300827462236, 0.14205739654471305, 0.09093198616500453, 0.17923073454952287, 0.16359993740251233, 0.16060481111851854, 0.33573681636373054, 0.14139811916766265, 0.1372754550612244, 0.2948159905200355, 0.17834747318687827, 0.16234326007311362, 0.5354542480162376, 0.3982154342774342, 0.33843504959165116, 0.47240882482489077, 0.5080124063784728, 0.3220991148267327, 0.5540282067468423, 0.5881147412161865, 0.3411494992286461, 0.4387252417577885, 0.43445263324284356, 0.254387117798742, 0.4076101784668633, 0.39924687063190734, 0.24738337730170212, 0.303498667262177, 0.4508453298258466, 0.27217003778450466, 0.2005549032398508, 0.2029293972288908, 0.1850798754444284, 0.19899721828180683, 0.17931796331770078, 0.17853257943769463, 0.2076503171316867, 0.1960047783160349, 0.1949160294625608, 0.23151322653092843, 0.5753361375965498, 0.19171465709441382, 0.5842387248103178, 0.44783173427774114, 0.17964930490792175, 0.5191509213693534, 0.4921615812228114, 0.18588596848825567, 0.15131059161432092, 0.35179633443457936, 0.6885859709042568, 0.7028971406627906, 0.3651944647262815, 0.5957086287840363, 0.7778849067474878, 0.6180795553032119, 0.5309913765021737, 0.5220216137791177, 0.20488566727417212, 0.5657950644991916, 0.19742182117357876, 0.1596408586294158, 0.4476677856009673, 0.16393342567043878, 0.2035864882330215, 0.20869639196529555, 0.19681476863221958, 0.18285531238890274, 0.19637062051335374, 0.19218684545427567, 0.1831680045529842, 0.17597241862717006, 0.17822527274589106, 0.17465084370490913, 0.1589351175088335, 0.07861184429213974, 0.09139145757126277, 0.07585538466069686, 0.08834664635709122, 0.09015352346393901, 0.06712718977866827, 0.07707823357288113, 0.0779559816071671, 0.07283426372195934]}, "mutation_prompt": null}
{"id": "7ad5428e-9755-4194-9eb3-a85e6a40224b", "solution": "import numpy as np\n\nclass AdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n\n        return best_solution", "name": "AdaptiveDE", "description": "Integrate a novel adaptive mutation strategy based on self-adaptation of mutation factor F during the optimization process to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {"aucs": [0.831148284950614, 0.83318019711314, 0.6607244044686424, 0.8495063464675087, 0.8519308515209606, 0.7026665281047638, 0.8426282524800252, 0.8303075448280007, 0.715378807462465, 0.697773604579557, 0.7467584022429838, 0.5273537816881422, 0.5015308189487535, 0.7298720064542665, 0.5153002978143013, 0.7015637355309743, 0.7399645433034743, 0.5369544376772666, 0.2580231436297492, 0.15297397601500307, 0.11124065917930426, 0.36443388801373255, 0.12239841815453345, 0.08430554893213904, 0.522936866944081, 0.1318803267771146, 0.10149922979671788, 0.12879032488630526, 0.14770483237793464, 0.10248959443538586, 0.1342545715729777, 0.16147175465827368, 0.10364805289385715, 0.11925402809016128, 0.1101969461418455, 0.08552798943071871, 0.7635205967281682, 0.871997082510644, 0.9413740021449605, 0.8998826316901585, 0.9370627702978682, 0.9413965664878168, 0.9688862766394543, 0.8858591326328384, 0.955457382167406, 0.1939264839457442, 0.22266230052514424, 0.35996891523860164, 0.26181445223676847, 0.20361777425996885, 0.34260297631091163, 0.2546702295355707, 0.20425336821901396, 0.38088025662710134, 0.8297509097193929, 0.8128894457746949, 0.5815064183152875, 0.7605897763021063, 0.8413459090253004, 0.6600445846218826, 0.37655218978656946, 0.8098809355190146, 0.6490378486945227, 0.15568827318836198, 0.1348642057305226, 0.1893955876536102, 0.19740454634173776, 0.13445480195652293, 0.18787820295418722, 0.3502015119395665, 0.16184137376479835, 0.18172672910324295, 0.10043581715191108, 0.28110969425148324, 0.187140803662173, 0.2565947531499031, 0.21027228914061336, 0.20786453501337532, 0.15566819154218026, 0.20344336901309323, 0.27073795782963717, 0.09946022882658057, 0.5323881740431908, 0.29947661510934354, 0.09761265815472853, 0.2028642226282492, 0.25696695171990924, 0.11210094996550779, 0.2549297579952273, 0.23984051208135315, 0.16071628789824355, 0.2800059877792097, 0.37160705522000914, 0.3205459633382035, 0.17320609105800144, 0.35623143139372737, 0.2049339990997473, 0.227677793637718, 0.4381918116043215, 0.08247519556156935, 0.11841212978308979, 0.0994380252814302, 0.2357769301639, 0.12114043225061721, 0.1182544695278811, 0.26795176793652953, 0.25128068432191963, 0.0859429556338106, 0.18399870730897228, 0.39293606162180317, 0.22945578616195805, 0.375380122741939, 0.28886558298443266, 0.23704608585589848, 0.1118953848406602, 0.28097015484966315, 0.2327968057828822, 0.5741411562251069, 0.6078796243382882, 0.6078487870754321, 0.5449604317851683, 0.7507816150125274, 0.5982879121891092, 0.5270903674140796, 0.5956475700561232, 0.5824838209360796, 0.12778052746828272, 0.14111101874024756, 0.10000608241807785, 0.15715722879765004, 0.13387797854181427, 0.09924293782602778, 0.11657300827462236, 0.14205739654471305, 0.09093198616500453, 0.17923073454952287, 0.16359993740251233, 0.16060481111851854, 0.33573681636373054, 0.14139811916766265, 0.1372754550612244, 0.2948159905200355, 0.17834747318687827, 0.16234326007311362, 0.5354542480162376, 0.3982154342774342, 0.33843504959165116, 0.47240882482489077, 0.5080124063784728, 0.3220991148267327, 0.5540282067468423, 0.5881147412161865, 0.3411494992286461, 0.4387252417577885, 0.43445263324284356, 0.254387117798742, 0.4076101784668633, 0.39924687063190734, 0.24738337730170212, 0.303498667262177, 0.4508453298258466, 0.27217003778450466, 0.2005549032398508, 0.2029293972288908, 0.1850798754444284, 0.19899721828180683, 0.17931796331770078, 0.17853257943769463, 0.2076503171316867, 0.1960047783160349, 0.1949160294625608, 0.23151322653092843, 0.5753361375965498, 0.19171465709441382, 0.5842387248103178, 0.44783173427774114, 0.17964930490792175, 0.5191509213693534, 0.4921615812228114, 0.18588596848825567, 0.15131059161432092, 0.35179633443457936, 0.6885859709042568, 0.7028971406627906, 0.3651944647262815, 0.5957086287840363, 0.7778849067474878, 0.6180795553032119, 0.5309913765021737, 0.5220216137791177, 0.20488566727417212, 0.5657950644991916, 0.19742182117357876, 0.1596408586294158, 0.4476677856009673, 0.16393342567043878, 0.2035864882330215, 0.20869639196529555, 0.19681476863221958, 0.18285531238890274, 0.19637062051335374, 0.19218684545427567, 0.1831680045529842, 0.17597241862717006, 0.17822527274589106, 0.17465084370490913, 0.1589351175088335, 0.07861184429213974, 0.09139145757126277, 0.07585538466069686, 0.08834664635709122, 0.09015352346393901, 0.06712718977866827, 0.07707823357288113, 0.0779559816071671, 0.07283426372195934]}, "mutation_prompt": null}
{"id": "35a8a961-640f-470a-b33e-79385f702f96", "solution": "import numpy as np\n\nclass AdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n\n        return best_solution", "name": "AdaptiveDE", "description": "Integrate a novel adaptive mutation strategy based on self-adaptation of mutation factor F during the optimization process to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {"aucs": [0.831148284950614, 0.83318019711314, 0.6607244044686424, 0.8495063464675087, 0.8519308515209606, 0.7026665281047638, 0.8426282524800252, 0.8303075448280007, 0.715378807462465, 0.697773604579557, 0.7467584022429838, 0.5273537816881422, 0.5015308189487535, 0.7298720064542665, 0.5153002978143013, 0.7015637355309743, 0.7399645433034743, 0.5369544376772666, 0.2580231436297492, 0.15297397601500307, 0.11124065917930426, 0.36443388801373255, 0.12239841815453345, 0.08430554893213904, 0.522936866944081, 0.1318803267771146, 0.10149922979671788, 0.12879032488630526, 0.14770483237793464, 0.10248959443538586, 0.1342545715729777, 0.16147175465827368, 0.10364805289385715, 0.11925402809016128, 0.1101969461418455, 0.08552798943071871, 0.7635205967281682, 0.871997082510644, 0.9413740021449605, 0.8998826316901585, 0.9370627702978682, 0.9413965664878168, 0.9688862766394543, 0.8858591326328384, 0.955457382167406, 0.1939264839457442, 0.22266230052514424, 0.35996891523860164, 0.26181445223676847, 0.20361777425996885, 0.34260297631091163, 0.2546702295355707, 0.20425336821901396, 0.38088025662710134, 0.8297509097193929, 0.8128894457746949, 0.5815064183152875, 0.7605897763021063, 0.8413459090253004, 0.6600445846218826, 0.37655218978656946, 0.8098809355190146, 0.6490378486945227, 0.15568827318836198, 0.1348642057305226, 0.1893955876536102, 0.19740454634173776, 0.13445480195652293, 0.18787820295418722, 0.3502015119395665, 0.16184137376479835, 0.18172672910324295, 0.10043581715191108, 0.28110969425148324, 0.187140803662173, 0.2565947531499031, 0.21027228914061336, 0.20786453501337532, 0.15566819154218026, 0.20344336901309323, 0.27073795782963717, 0.09946022882658057, 0.5323881740431908, 0.29947661510934354, 0.09761265815472853, 0.2028642226282492, 0.25696695171990924, 0.11210094996550779, 0.2549297579952273, 0.23984051208135315, 0.16071628789824355, 0.2800059877792097, 0.37160705522000914, 0.3205459633382035, 0.17320609105800144, 0.35623143139372737, 0.2049339990997473, 0.227677793637718, 0.4381918116043215, 0.08247519556156935, 0.11841212978308979, 0.0994380252814302, 0.2357769301639, 0.12114043225061721, 0.1182544695278811, 0.26795176793652953, 0.25128068432191963, 0.0859429556338106, 0.18399870730897228, 0.39293606162180317, 0.22945578616195805, 0.375380122741939, 0.28886558298443266, 0.23704608585589848, 0.1118953848406602, 0.28097015484966315, 0.2327968057828822, 0.5741411562251069, 0.6078796243382882, 0.6078487870754321, 0.5449604317851683, 0.7507816150125274, 0.5982879121891092, 0.5270903674140796, 0.5956475700561232, 0.5824838209360796, 0.12778052746828272, 0.14111101874024756, 0.10000608241807785, 0.15715722879765004, 0.13387797854181427, 0.09924293782602778, 0.11657300827462236, 0.14205739654471305, 0.09093198616500453, 0.17923073454952287, 0.16359993740251233, 0.16060481111851854, 0.33573681636373054, 0.14139811916766265, 0.1372754550612244, 0.2948159905200355, 0.17834747318687827, 0.16234326007311362, 0.5354542480162376, 0.3982154342774342, 0.33843504959165116, 0.47240882482489077, 0.5080124063784728, 0.3220991148267327, 0.5540282067468423, 0.5881147412161865, 0.3411494992286461, 0.4387252417577885, 0.43445263324284356, 0.254387117798742, 0.4076101784668633, 0.39924687063190734, 0.24738337730170212, 0.303498667262177, 0.4508453298258466, 0.27217003778450466, 0.2005549032398508, 0.2029293972288908, 0.1850798754444284, 0.19899721828180683, 0.17931796331770078, 0.17853257943769463, 0.2076503171316867, 0.1960047783160349, 0.1949160294625608, 0.23151322653092843, 0.5753361375965498, 0.19171465709441382, 0.5842387248103178, 0.44783173427774114, 0.17964930490792175, 0.5191509213693534, 0.4921615812228114, 0.18588596848825567, 0.15131059161432092, 0.35179633443457936, 0.6885859709042568, 0.7028971406627906, 0.3651944647262815, 0.5957086287840363, 0.7778849067474878, 0.6180795553032119, 0.5309913765021737, 0.5220216137791177, 0.20488566727417212, 0.5657950644991916, 0.19742182117357876, 0.1596408586294158, 0.4476677856009673, 0.16393342567043878, 0.2035864882330215, 0.20869639196529555, 0.19681476863221958, 0.18285531238890274, 0.19637062051335374, 0.19218684545427567, 0.1831680045529842, 0.17597241862717006, 0.17822527274589106, 0.17465084370490913, 0.1589351175088335, 0.07861184429213974, 0.09139145757126277, 0.07585538466069686, 0.08834664635709122, 0.09015352346393901, 0.06712718977866827, 0.07707823357288113, 0.0779559816071671, 0.07283426372195934]}, "mutation_prompt": null}
{"id": "51281c4d-8a08-4829-94c9-3f90720f323a", "solution": "import numpy as np\n\nclass DynamicPopSizeDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n            \n            if evals < self.budget:\n                population = np.vstack((population, create_population()))\n                fitness_values = np.concatenate((fitness_values, np.array([func(ind) for ind in population[self.pop_size:]]))\n                self.pop_size = len(population)\n\n        return best_solution", "name": "DynamicPopSizeDE", "description": "Enhance the diversity of the population by incorporating a mechanism for dynamic population sizing.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 46, 17, '                self.pop_size = len(population)\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 46, 17, '                self.pop_size = len(population)\\n'))", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {}, "mutation_prompt": null}
{"id": "5cff01ef-2ee2-45e9-8426-870c0f8110f9", "solution": "import numpy as np\n\nclass AdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n\n        return best_solution", "name": "AdaptiveDE", "description": "Integrate a novel adaptive mutation strategy based on self-adaptation of mutation factor F during the optimization process to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {"aucs": [0.831148284950614, 0.83318019711314, 0.6607244044686424, 0.8495063464675087, 0.8519308515209606, 0.7026665281047638, 0.8426282524800252, 0.8303075448280007, 0.715378807462465, 0.697773604579557, 0.7467584022429838, 0.5273537816881422, 0.5015308189487535, 0.7298720064542665, 0.5153002978143013, 0.7015637355309743, 0.7399645433034743, 0.5369544376772666, 0.2580231436297492, 0.15297397601500307, 0.11124065917930426, 0.36443388801373255, 0.12239841815453345, 0.08430554893213904, 0.522936866944081, 0.1318803267771146, 0.10149922979671788, 0.12879032488630526, 0.14770483237793464, 0.10248959443538586, 0.1342545715729777, 0.16147175465827368, 0.10364805289385715, 0.11925402809016128, 0.1101969461418455, 0.08552798943071871, 0.7635205967281682, 0.871997082510644, 0.9413740021449605, 0.8998826316901585, 0.9370627702978682, 0.9413965664878168, 0.9688862766394543, 0.8858591326328384, 0.955457382167406, 0.1939264839457442, 0.22266230052514424, 0.35996891523860164, 0.26181445223676847, 0.20361777425996885, 0.34260297631091163, 0.2546702295355707, 0.20425336821901396, 0.38088025662710134, 0.8297509097193929, 0.8128894457746949, 0.5815064183152875, 0.7605897763021063, 0.8413459090253004, 0.6600445846218826, 0.37655218978656946, 0.8098809355190146, 0.6490378486945227, 0.15568827318836198, 0.1348642057305226, 0.1893955876536102, 0.19740454634173776, 0.13445480195652293, 0.18787820295418722, 0.3502015119395665, 0.16184137376479835, 0.18172672910324295, 0.10043581715191108, 0.28110969425148324, 0.187140803662173, 0.2565947531499031, 0.21027228914061336, 0.20786453501337532, 0.15566819154218026, 0.20344336901309323, 0.27073795782963717, 0.09946022882658057, 0.5323881740431908, 0.29947661510934354, 0.09761265815472853, 0.2028642226282492, 0.25696695171990924, 0.11210094996550779, 0.2549297579952273, 0.23984051208135315, 0.16071628789824355, 0.2800059877792097, 0.37160705522000914, 0.3205459633382035, 0.17320609105800144, 0.35623143139372737, 0.2049339990997473, 0.227677793637718, 0.4381918116043215, 0.08247519556156935, 0.11841212978308979, 0.0994380252814302, 0.2357769301639, 0.12114043225061721, 0.1182544695278811, 0.26795176793652953, 0.25128068432191963, 0.0859429556338106, 0.18399870730897228, 0.39293606162180317, 0.22945578616195805, 0.375380122741939, 0.28886558298443266, 0.23704608585589848, 0.1118953848406602, 0.28097015484966315, 0.2327968057828822, 0.5741411562251069, 0.6078796243382882, 0.6078487870754321, 0.5449604317851683, 0.7507816150125274, 0.5982879121891092, 0.5270903674140796, 0.5956475700561232, 0.5824838209360796, 0.12778052746828272, 0.14111101874024756, 0.10000608241807785, 0.15715722879765004, 0.13387797854181427, 0.09924293782602778, 0.11657300827462236, 0.14205739654471305, 0.09093198616500453, 0.17923073454952287, 0.16359993740251233, 0.16060481111851854, 0.33573681636373054, 0.14139811916766265, 0.1372754550612244, 0.2948159905200355, 0.17834747318687827, 0.16234326007311362, 0.5354542480162376, 0.3982154342774342, 0.33843504959165116, 0.47240882482489077, 0.5080124063784728, 0.3220991148267327, 0.5540282067468423, 0.5881147412161865, 0.3411494992286461, 0.4387252417577885, 0.43445263324284356, 0.254387117798742, 0.4076101784668633, 0.39924687063190734, 0.24738337730170212, 0.303498667262177, 0.4508453298258466, 0.27217003778450466, 0.2005549032398508, 0.2029293972288908, 0.1850798754444284, 0.19899721828180683, 0.17931796331770078, 0.17853257943769463, 0.2076503171316867, 0.1960047783160349, 0.1949160294625608, 0.23151322653092843, 0.5753361375965498, 0.19171465709441382, 0.5842387248103178, 0.44783173427774114, 0.17964930490792175, 0.5191509213693534, 0.4921615812228114, 0.18588596848825567, 0.15131059161432092, 0.35179633443457936, 0.6885859709042568, 0.7028971406627906, 0.3651944647262815, 0.5957086287840363, 0.7778849067474878, 0.6180795553032119, 0.5309913765021737, 0.5220216137791177, 0.20488566727417212, 0.5657950644991916, 0.19742182117357876, 0.1596408586294158, 0.4476677856009673, 0.16393342567043878, 0.2035864882330215, 0.20869639196529555, 0.19681476863221958, 0.18285531238890274, 0.19637062051335374, 0.19218684545427567, 0.1831680045529842, 0.17597241862717006, 0.17822527274589106, 0.17465084370490913, 0.1589351175088335, 0.07861184429213974, 0.09139145757126277, 0.07585538466069686, 0.08834664635709122, 0.09015352346393901, 0.06712718977866827, 0.07707823357288113, 0.0779559816071671, 0.07283426372195934]}, "mutation_prompt": null}
{"id": "3c2bb74e-16bb-4637-bdb1-c84bc998687a", "solution": "import numpy as np\n\nclass ImprovedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n            \n            # Dynamic population size adaptation\n            if evals < self.budget * 0.5 and self.pop_size > 10:\n                self.pop_size -= 1\n            elif evals > self.budget * 0.5 and self.pop_size < 100:\n                self.pop_size += 1\n\n        return best_solution", "name": "ImprovedAdaptiveDE", "description": "Integrate a dynamic population size adaptation mechanism to control diversity and convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 50 is out of bounds for axis 0 with size 50').", "error": "IndexError('index 50 is out of bounds for axis 0 with size 50')", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {}, "mutation_prompt": null}
{"id": "4dd92ac1-00be-4aec-8107-d655a388f549", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size, F_lb, F_ub, F_adapt)\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_population_size(evals):\n            return int(self.pop_size * (1 + self.adapt_rate * np.sin(np.pi * evals / self.budget)))\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            self.pop_size = adapt_population_size(evals)\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the AdaptiveDE algorithm by incorporating a dynamic population size adjustment mechanism to adapt to the problem landscape better.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'adapt_mutation_factor' is not defined\").", "error": "NameError(\"name 'adapt_mutation_factor' is not defined\")", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {}, "mutation_prompt": null}
{"id": "85aec407-fe03-4100-960f-69257d5fd57b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(AdaptiveDE):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, Cr_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size, F_lb, F_ub, F_adapt)\n        self.Cr_adapt = Cr_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n\n        def adapt_crossover_rate(Cr):\n            return np.clip(Cr + np.random.uniform(-self.Cr_adapt, self.Cr_adapt), 0.0, 1.0)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < adapt_crossover_rate(self.Cr)\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n            self.Cr = adapt_crossover_rate(self.Cr)\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation strategy by incorporating a dynamic adjustment of the crossover rate during the optimization process to improve the exploration and exploitation balance.", "configspace": "", "generation": 10, "fitness": 0.2942220631282266, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {"aucs": [0.7130097151689447, 0.8322639394534379, 0.6936718010691546, 0.7184167484476813, 0.8069013493725375, 0.729207363844365, 0.7186270872764149, 0.8160329697229285, 0.7023766849682549, 0.5572314570540784, 0.6749856090793522, 0.534698685684613, 0.5458737771222815, 0.6839759338987417, 0.5626962934511962, 0.554761263396697, 0.6699591108225955, 0.5603473810984902, 0.2298778913873668, 0.40693838117960646, 0.12326807694018627, 0.289089546779824, 0.3873210632644002, 0.14825100530074775, 0.3262613982896624, 0.3254575841174193, 0.12121822471606736, 0.2172091606761557, 0.2716731528932169, 0.11570799968990908, 0.2152616714284149, 0.15434678225798037, 0.10858890597799986, 0.17402178725127126, 0.24795857950252376, 0.10763471969019922, 0.9557573577514532, 0.9484973303435201, 0.9422647827176388, 0.959267542999687, 0.90920189480048, 0.9494186404958683, 0.9571461187741764, 0.9457289003934466, 0.992151112181941, 0.24720116569230965, 0.25560688930770925, 0.3323772938925377, 0.2443454761541679, 0.3745267866681664, 0.3681996529971794, 0.2704177600205899, 0.28438140676378043, 0.33940781919298635, 0.23799314077643496, 0.8003944331437981, 0.6376059390490116, 0.2875870764304065, 0.7661880940614242, 0.6325835344853947, 0.2527666288600332, 0.7601223038083926, 0.671077320430512, 0.15038763896294605, 0.1742394247072312, 0.17882299291317816, 0.14728483056563657, 0.1700147569983952, 0.1607639357750379, 0.17327014915131767, 0.1879830145014867, 0.17828437237831918, 0.11963714980715978, 0.11559538785154055, 0.21632366504285494, 0.12210122555391079, 0.1596978632154311, 0.1432445031511843, 0.10975560461713885, 0.15818425277433112, 0.1808880300516148, 0.047685017642462246, 0.21428721922309246, 0.1637454905534712, 0.0005251020259700034, 0.1690213019259712, 0.16923722875599234, 0.021063172168708455, 0.10438665134878466, 0.1688281542326716, 0.10551822578912018, 0.2872634308625788, 0.2837934332364428, 0.08040866183000506, 0.21770964823598282, 0.25927613635311597, 0.08995915681567634, 0.39637351726422776, 0.3484185308961991, 9.999999999998899e-05, 0.044402228098675, 0.03893216142081657, 0.0007518712624591251, 0.061584165831048976, 0.08807733263139794, 0.035391625986471276, 0.10666689407778462, 0.05663189364134591, 0.10928835851802199, 0.1894558852513838, 0.16922837283484438, 0.11567362019616045, 0.21720307585948873, 0.1953424787094873, 0.07828817367652918, 0.1825095728734818, 0.19408718661299906, 0.437732357770503, 0.564820915717775, 0.5547669018127593, 0.46254771638032055, 0.5346081600411043, 0.5185802783230442, 0.4652009476981842, 0.5582520155665525, 0.5174025852252859, 0.0848619632187474, 0.11103506943227126, 0.09410122225281126, 0.08886793088353484, 0.12767511638628315, 0.11055194059994011, 0.09412170829493371, 0.1111954259526905, 0.10019324418598008, 0.19207490539692906, 0.15217831324282838, 0.14240441698798245, 0.14416287037182196, 0.20172970072404883, 0.18121008901393898, 0.13491166188945058, 0.16171876002439944, 0.1360255654837048, 0.25143036307233224, 0.3849716100645971, 0.28931933876103844, 0.25364970521979624, 0.38072629011224346, 0.32244577050624845, 0.3271583002650241, 0.43438200122770687, 0.347723061399688, 0.20572092127115704, 0.2832187575082924, 0.2445992121898528, 0.18027310308732702, 0.23430480810435483, 0.24035752591937876, 0.24105645297029754, 0.29580521083094413, 0.2446208849395196, 0.18435972624422603, 0.18906281259084767, 0.19228924434193295, 0.21238347717115935, 0.18762550515961451, 0.1935452878973296, 0.17780347728676293, 0.19576435826064176, 0.18291018419882887, 0.21032960966454328, 0.3105207593269729, 0.209283411883182, 0.23909250680410754, 0.2067471239352855, 0.18714409085543637, 0.22001538593107772, 0.36952012500526876, 0.1904474173841758, 0.20956127218749065, 0.1686996229224229, 0.7122429193044872, 0.21794449887589673, 0.4353583869389622, 0.5670540524149873, 0.1957728507701576, 0.19432794673456422, 0.25009062335143806, 0.160385359201077, 0.204404209555466, 0.18062118749360523, 0.20418568981296814, 0.1855553634863567, 0.4156235890317367, 0.2077705177062117, 0.20462657058341616, 0.20367671492423867, 0.1992375640584113, 0.17844102194298306, 0.19192075947845788, 0.2003737936843759, 0.1916431562372798, 0.18000459016014447, 0.20263966105436682, 0.1902777454868576, 0.17876451203083166, 0.07029747398186281, 0.07631644320006203, 0.07048325150102042, 0.07979174442506176, 0.08614899589176928, 0.07098026220310094, 0.08233677237416892, 0.0839728569581275, 0.07196077233421272]}, "mutation_prompt": null}
{"id": "a08f8458-16b4-4568-8356-5642a2ad5c07", "solution": "import numpy as np\n\nclass AdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n\n        return best_solution", "name": "AdaptiveDE", "description": "Integrate a novel adaptive mutation strategy based on self-adaptation of mutation factor F during the optimization process to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {"aucs": [0.831148284950614, 0.83318019711314, 0.6607244044686424, 0.8495063464675087, 0.8519308515209606, 0.7026665281047638, 0.8426282524800252, 0.8303075448280007, 0.715378807462465, 0.697773604579557, 0.7467584022429838, 0.5273537816881422, 0.5015308189487535, 0.7298720064542665, 0.5153002978143013, 0.7015637355309743, 0.7399645433034743, 0.5369544376772666, 0.2580231436297492, 0.15297397601500307, 0.11124065917930426, 0.36443388801373255, 0.12239841815453345, 0.08430554893213904, 0.522936866944081, 0.1318803267771146, 0.10149922979671788, 0.12879032488630526, 0.14770483237793464, 0.10248959443538586, 0.1342545715729777, 0.16147175465827368, 0.10364805289385715, 0.11925402809016128, 0.1101969461418455, 0.08552798943071871, 0.7635205967281682, 0.871997082510644, 0.9413740021449605, 0.8998826316901585, 0.9370627702978682, 0.9413965664878168, 0.9688862766394543, 0.8858591326328384, 0.955457382167406, 0.1939264839457442, 0.22266230052514424, 0.35996891523860164, 0.26181445223676847, 0.20361777425996885, 0.34260297631091163, 0.2546702295355707, 0.20425336821901396, 0.38088025662710134, 0.8297509097193929, 0.8128894457746949, 0.5815064183152875, 0.7605897763021063, 0.8413459090253004, 0.6600445846218826, 0.37655218978656946, 0.8098809355190146, 0.6490378486945227, 0.15568827318836198, 0.1348642057305226, 0.1893955876536102, 0.19740454634173776, 0.13445480195652293, 0.18787820295418722, 0.3502015119395665, 0.16184137376479835, 0.18172672910324295, 0.10043581715191108, 0.28110969425148324, 0.187140803662173, 0.2565947531499031, 0.21027228914061336, 0.20786453501337532, 0.15566819154218026, 0.20344336901309323, 0.27073795782963717, 0.09946022882658057, 0.5323881740431908, 0.29947661510934354, 0.09761265815472853, 0.2028642226282492, 0.25696695171990924, 0.11210094996550779, 0.2549297579952273, 0.23984051208135315, 0.16071628789824355, 0.2800059877792097, 0.37160705522000914, 0.3205459633382035, 0.17320609105800144, 0.35623143139372737, 0.2049339990997473, 0.227677793637718, 0.4381918116043215, 0.08247519556156935, 0.11841212978308979, 0.0994380252814302, 0.2357769301639, 0.12114043225061721, 0.1182544695278811, 0.26795176793652953, 0.25128068432191963, 0.0859429556338106, 0.18399870730897228, 0.39293606162180317, 0.22945578616195805, 0.375380122741939, 0.28886558298443266, 0.23704608585589848, 0.1118953848406602, 0.28097015484966315, 0.2327968057828822, 0.5741411562251069, 0.6078796243382882, 0.6078487870754321, 0.5449604317851683, 0.7507816150125274, 0.5982879121891092, 0.5270903674140796, 0.5956475700561232, 0.5824838209360796, 0.12778052746828272, 0.14111101874024756, 0.10000608241807785, 0.15715722879765004, 0.13387797854181427, 0.09924293782602778, 0.11657300827462236, 0.14205739654471305, 0.09093198616500453, 0.17923073454952287, 0.16359993740251233, 0.16060481111851854, 0.33573681636373054, 0.14139811916766265, 0.1372754550612244, 0.2948159905200355, 0.17834747318687827, 0.16234326007311362, 0.5354542480162376, 0.3982154342774342, 0.33843504959165116, 0.47240882482489077, 0.5080124063784728, 0.3220991148267327, 0.5540282067468423, 0.5881147412161865, 0.3411494992286461, 0.4387252417577885, 0.43445263324284356, 0.254387117798742, 0.4076101784668633, 0.39924687063190734, 0.24738337730170212, 0.303498667262177, 0.4508453298258466, 0.27217003778450466, 0.2005549032398508, 0.2029293972288908, 0.1850798754444284, 0.19899721828180683, 0.17931796331770078, 0.17853257943769463, 0.2076503171316867, 0.1960047783160349, 0.1949160294625608, 0.23151322653092843, 0.5753361375965498, 0.19171465709441382, 0.5842387248103178, 0.44783173427774114, 0.17964930490792175, 0.5191509213693534, 0.4921615812228114, 0.18588596848825567, 0.15131059161432092, 0.35179633443457936, 0.6885859709042568, 0.7028971406627906, 0.3651944647262815, 0.5957086287840363, 0.7778849067474878, 0.6180795553032119, 0.5309913765021737, 0.5220216137791177, 0.20488566727417212, 0.5657950644991916, 0.19742182117357876, 0.1596408586294158, 0.4476677856009673, 0.16393342567043878, 0.2035864882330215, 0.20869639196529555, 0.19681476863221958, 0.18285531238890274, 0.19637062051335374, 0.19218684545427567, 0.1831680045529842, 0.17597241862717006, 0.17822527274589106, 0.17465084370490913, 0.1589351175088335, 0.07861184429213974, 0.09139145757126277, 0.07585538466069686, 0.08834664635709122, 0.09015352346393901, 0.06712718977866827, 0.07707823357288113, 0.0779559816071671, 0.07283426372195934]}, "mutation_prompt": null}
{"id": "ccce7a4a-20e7-45d5-988c-e494907ae554", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, F_scale=0.5):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.F_scale = F_scale\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_vals):\n            mean_fitness = np.mean(fitness_vals)\n            if mean_fitness != 0:\n                scaling_factor = self.F_scale / mean_fitness\n                return np.clip(F * scaling_factor, self.F_lb, self.F_ub)\n            return F\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F, fitness_values)\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the mutation strategy by incorporating a dynamic scaling factor based on the fitness landscape to adapt mutation intensities efficiently.", "configspace": "", "generation": 12, "fitness": 0.24859833682305887, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.20.", "error": "", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {"aucs": [0.34003880381275475, 0.8223706889827876, 0.4696431152048822, 0.4905354318739029, 0.33135843150899413, 0.6747138267977715, 0.8632625133066747, 0.8453962186238709, 0.8427820544980242, 9.999999999998899e-05, 0.32342785188338863, 0.10508221359466641, 0.07151645033652276, 0.2163636256639324, 0.039442114575465315, 9.999999999998899e-05, 0.15335840800077583, 0.5336654415307351, 0.17450655034154838, 0.43568598860243923, 0.321084259725688, 0.18087010952144633, 0.17030119731488436, 0.1703296351397201, 0.27709487484299156, 0.17403503299523404, 0.22310989333719922, 0.13442040326172244, 0.14588552371143892, 0.09501552715611161, 0.12327764478114955, 0.1452817715957091, 0.11465336705644025, 0.14555148791113426, 0.14558319449264123, 0.11847553531626709, 0.6866138093064045, 0.21791941476829257, 0.5932830642877498, 0.8238257226592967, 0.6765311529974343, 0.2259493924905337, 0.8233167088537187, 0.9361773776824868, 0.764470255870461, 0.11295260290112874, 0.13760237537766973, 0.060579002897247713, 0.11303741962803993, 0.11728068701290484, 0.08245096745744485, 0.2514237237783692, 0.12425765469967409, 0.07101571762584791, 0.17087342637353053, 0.3275890173524906, 0.13727551867050136, 0.8782794707063182, 0.8951555064453285, 0.8726625608273563, 0.16825503129198294, 0.17122152690349246, 0.22640546466329192, 0.2139674743331953, 0.1055529218492417, 9.999999999998899e-05, 0.13288566756158593, 0.12905438021224092, 0.13142029658555, 0.20218393781484445, 0.31233917547142054, 0.16403004927493525, 0.1812394592741785, 0.16640575997246265, 0.16175728345500395, 0.06682592767956863, 0.22605091188414295, 0.14429598673011712, 0.08669078071305192, 0.13748572747709875, 0.20422069583398317, 0.07009944160101422, 0.08836645589254244, 9.999999999998899e-05, 0.10058438656456115, 9.999999999998899e-05, 9.999999999998899e-05, 0.03300649069540018, 9.999999999998899e-05, 0.034829182244619394, 0.15891827917341583, 0.11536561778579157, 0.18127600843925984, 0.0884079833296777, 0.06366200489424922, 0.049701194590441644, 0.11639875981687198, 0.1750198410004914, 0.1735097959551284, 0.05226219117299569, 0.17642924405390348, 0.05872776274916247, 0.10066567767027101, 0.2745498038431994, 9.999999999998899e-05, 0.17992786208113687, 0.20520257481007065, 0.13496999272230092, 0.1817352219098365, 0.1165066559925475, 0.13849119702735246, 0.11702143343817573, 0.16359136831930432, 0.21774722937492785, 0.11612934103062922, 0.08708155292724296, 0.10105970405630904, 0.46585886406243404, 0.3607618486443175, 0.4649279564601677, 0.35178235233422916, 0.4480900859169701, 0.4908619930098136, 0.47591302472105135, 0.4447194015400976, 0.39597020707238817, 0.1236157940062318, 0.2414203109246017, 0.12775942886227587, 0.1322032143289551, 0.0963309968530982, 0.1357679421818655, 0.12452653975991324, 0.1455559793488752, 0.14204992347088774, 0.17098620979257628, 0.2124845812224706, 0.22454220423593862, 0.18129025815362043, 0.32735555358108515, 0.191243586431048, 0.2248063191639792, 0.221534236521579, 0.2630760262513063, 0.5398169030393232, 0.3435584238412617, 0.37704204452063816, 0.49354418971256, 0.41286711685363275, 0.30021029933904475, 0.3201823105692879, 0.4332665582443693, 0.2721163379710212, 0.34389941510562017, 0.43156940273171884, 0.2992574706662988, 0.29227694583642616, 0.23339985541133068, 0.23222847004496439, 0.18526150800551477, 0.32243044676153065, 0.471804678682205, 0.22378585257552375, 0.20780552192167723, 0.213182925862048, 0.2129292256441756, 0.2068357470797516, 0.22961163277655128, 0.22611146328629783, 0.1946296405085437, 0.23937841409888638, 0.18637897946608106, 0.40973841849356185, 0.22050913028589447, 0.20309204472717823, 0.2187902452341154, 0.22095460500735076, 0.2034970198959022, 0.23453814755219204, 0.19310209288361246, 0.1848837497893695, 0.7365281536604971, 0.15308964296163052, 0.46127025951223, 0.8487990021333013, 0.19698622607737604, 0.17306482286451896, 0.1690257473483613, 0.5312819097102084, 0.4794954455577517, 0.20723179340872355, 0.21713467719716328, 0.1647226277444006, 0.1271438318117356, 0.16608231364226556, 0.204769593027332, 0.19597413476575298, 0.7067833184518257, 0.19112576787070967, 0.20734565543898142, 0.21192395037410972, 0.19120679833014276, 0.1812377992306572, 0.17877955319403882, 0.20463111283891233, 0.17312337616845175, 0.18372397188239087, 0.08785853699057622, 0.0814278919008733, 0.09827672178045144, 0.07581795186596352, 0.08705258992899378, 0.08989462552876071, 0.10952708417065093, 0.08011804826793012, 0.08188929275243828]}, "mutation_prompt": null}
{"id": "03ef7f3a-83e1-4a58-9217-e3c2191df011", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        def chaotic_sequence(length, x0, a=1.4, b=0.3, c=0.2):\n            chaotic_seq = [x0]\n            for _ in range(length-1):\n                x_next = np.sin(a * chaotic_seq[-1]) + b * np.sin(a * chaotic_seq[-1]) * np.cos(chaotic_seq[-1]) + c * np.cos(a * chaotic_seq[-1])\n                chaotic_seq.append(x_next)\n            return chaotic_seq\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the population diversity by incorporating a novel mutation strategy based on chaotic sequences to improve exploration.", "configspace": "", "generation": 13, "fitness": 0.3475094758857426, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {"aucs": [0.831148284950614, 0.83318019711314, 0.6607244044686424, 0.8495063464675087, 0.8519308515209606, 0.7026665281047638, 0.8426282524800252, 0.8303075448280007, 0.715378807462465, 0.697773604579557, 0.7467584022429838, 0.5273537816881422, 0.5015308189487535, 0.7298720064542665, 0.5153002978143013, 0.7015637355309743, 0.7399645433034743, 0.5369544376772666, 0.2580231436297492, 0.15297397601500307, 0.11124065917930426, 0.36443388801373255, 0.12239841815453345, 0.08430554893213904, 0.522936866944081, 0.1318803267771146, 0.10149922979671788, 0.12879032488630526, 0.14770483237793464, 0.10248959443538586, 0.1342545715729777, 0.16147175465827368, 0.10364805289385715, 0.11925402809016128, 0.1101969461418455, 0.08552798943071871, 0.7635205967281682, 0.871997082510644, 0.9413740021449605, 0.8998826316901585, 0.9370627702978682, 0.9413965664878168, 0.9688862766394543, 0.8858591326328384, 0.955457382167406, 0.1939264839457442, 0.22266230052514424, 0.35996891523860164, 0.26181445223676847, 0.20361777425996885, 0.34260297631091163, 0.2546702295355707, 0.20425336821901396, 0.38088025662710134, 0.8297509097193929, 0.8128894457746949, 0.5815064183152875, 0.7605897763021063, 0.8413459090253004, 0.6600445846218826, 0.37655218978656946, 0.8098809355190146, 0.6490378486945227, 0.15568827318836198, 0.1348642057305226, 0.1893955876536102, 0.19740454634173776, 0.13445480195652293, 0.18787820295418722, 0.3502015119395665, 0.16184137376479835, 0.18172672910324295, 0.10043581715191108, 0.28110969425148324, 0.187140803662173, 0.2565947531499031, 0.21027228914061336, 0.20786453501337532, 0.15566819154218026, 0.20344336901309323, 0.27073795782963717, 0.09946022882658057, 0.5323881740431908, 0.29947661510934354, 0.09761265815472853, 0.2028642226282492, 0.25696695171990924, 0.11210094996550779, 0.2549297579952273, 0.23984051208135315, 0.16071628789824355, 0.2800059877792097, 0.37160705522000914, 0.3205459633382035, 0.17320609105800144, 0.35623143139372737, 0.2049339990997473, 0.227677793637718, 0.4381918116043215, 0.08247519556156935, 0.11841212978308979, 0.0994380252814302, 0.2357769301639, 0.12114043225061721, 0.1182544695278811, 0.26795176793652953, 0.25128068432191963, 0.0859429556338106, 0.18399870730897228, 0.39293606162180317, 0.22945578616195805, 0.375380122741939, 0.28886558298443266, 0.23704608585589848, 0.1118953848406602, 0.28097015484966315, 0.2327968057828822, 0.5741411562251069, 0.6078796243382882, 0.6078487870754321, 0.5449604317851683, 0.7507816150125274, 0.5982879121891092, 0.5270903674140796, 0.5956475700561232, 0.5824838209360796, 0.12778052746828272, 0.14111101874024756, 0.10000608241807785, 0.15715722879765004, 0.13387797854181427, 0.09924293782602778, 0.11657300827462236, 0.14205739654471305, 0.09093198616500453, 0.17923073454952287, 0.16359993740251233, 0.16060481111851854, 0.33573681636373054, 0.14139811916766265, 0.1372754550612244, 0.2948159905200355, 0.17834747318687827, 0.16234326007311362, 0.5354542480162376, 0.3982154342774342, 0.33843504959165116, 0.47240882482489077, 0.5080124063784728, 0.3220991148267327, 0.5540282067468423, 0.5881147412161865, 0.3411494992286461, 0.4387252417577885, 0.43445263324284356, 0.254387117798742, 0.4076101784668633, 0.39924687063190734, 0.24738337730170212, 0.303498667262177, 0.4508453298258466, 0.27217003778450466, 0.2005549032398508, 0.2029293972288908, 0.1850798754444284, 0.19899721828180683, 0.17931796331770078, 0.17853257943769463, 0.2076503171316867, 0.1960047783160349, 0.1949160294625608, 0.23151322653092843, 0.5753361375965498, 0.19171465709441382, 0.5842387248103178, 0.44783173427774114, 0.17964930490792175, 0.5191509213693534, 0.4921615812228114, 0.18588596848825567, 0.15131059161432092, 0.35179633443457936, 0.6885859709042568, 0.7028971406627906, 0.3651944647262815, 0.5957086287840363, 0.7778849067474878, 0.6180795553032119, 0.5309913765021737, 0.5220216137791177, 0.20488566727417212, 0.5657950644991916, 0.19742182117357876, 0.1596408586294158, 0.4476677856009673, 0.16393342567043878, 0.2035864882330215, 0.20869639196529555, 0.19681476863221958, 0.18285531238890274, 0.19637062051335374, 0.19218684545427567, 0.1831680045529842, 0.17597241862717006, 0.17822527274589106, 0.17465084370490913, 0.1589351175088335, 0.07861184429213974, 0.09139145757126277, 0.07585538466069686, 0.08834664635709122, 0.09015352346393901, 0.06712718977866827, 0.07707823357288113, 0.0779559816071671, 0.07283426372195934]}, "mutation_prompt": null}
{"id": "76a9103b-85e5-4783-8631-f98fc8efcbed", "solution": "import numpy as np\n\nclass AdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n\n        return best_solution", "name": "AdaptiveDE", "description": "Integrate a novel adaptive mutation strategy based on self-adaptation of mutation factor F during the optimization process to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {"aucs": [0.831148284950614, 0.83318019711314, 0.6607244044686424, 0.8495063464675087, 0.8519308515209606, 0.7026665281047638, 0.8426282524800252, 0.8303075448280007, 0.715378807462465, 0.697773604579557, 0.7467584022429838, 0.5273537816881422, 0.5015308189487535, 0.7298720064542665, 0.5153002978143013, 0.7015637355309743, 0.7399645433034743, 0.5369544376772666, 0.2580231436297492, 0.15297397601500307, 0.11124065917930426, 0.36443388801373255, 0.12239841815453345, 0.08430554893213904, 0.522936866944081, 0.1318803267771146, 0.10149922979671788, 0.12879032488630526, 0.14770483237793464, 0.10248959443538586, 0.1342545715729777, 0.16147175465827368, 0.10364805289385715, 0.11925402809016128, 0.1101969461418455, 0.08552798943071871, 0.7635205967281682, 0.871997082510644, 0.9413740021449605, 0.8998826316901585, 0.9370627702978682, 0.9413965664878168, 0.9688862766394543, 0.8858591326328384, 0.955457382167406, 0.1939264839457442, 0.22266230052514424, 0.35996891523860164, 0.26181445223676847, 0.20361777425996885, 0.34260297631091163, 0.2546702295355707, 0.20425336821901396, 0.38088025662710134, 0.8297509097193929, 0.8128894457746949, 0.5815064183152875, 0.7605897763021063, 0.8413459090253004, 0.6600445846218826, 0.37655218978656946, 0.8098809355190146, 0.6490378486945227, 0.15568827318836198, 0.1348642057305226, 0.1893955876536102, 0.19740454634173776, 0.13445480195652293, 0.18787820295418722, 0.3502015119395665, 0.16184137376479835, 0.18172672910324295, 0.10043581715191108, 0.28110969425148324, 0.187140803662173, 0.2565947531499031, 0.21027228914061336, 0.20786453501337532, 0.15566819154218026, 0.20344336901309323, 0.27073795782963717, 0.09946022882658057, 0.5323881740431908, 0.29947661510934354, 0.09761265815472853, 0.2028642226282492, 0.25696695171990924, 0.11210094996550779, 0.2549297579952273, 0.23984051208135315, 0.16071628789824355, 0.2800059877792097, 0.37160705522000914, 0.3205459633382035, 0.17320609105800144, 0.35623143139372737, 0.2049339990997473, 0.227677793637718, 0.4381918116043215, 0.08247519556156935, 0.11841212978308979, 0.0994380252814302, 0.2357769301639, 0.12114043225061721, 0.1182544695278811, 0.26795176793652953, 0.25128068432191963, 0.0859429556338106, 0.18399870730897228, 0.39293606162180317, 0.22945578616195805, 0.375380122741939, 0.28886558298443266, 0.23704608585589848, 0.1118953848406602, 0.28097015484966315, 0.2327968057828822, 0.5741411562251069, 0.6078796243382882, 0.6078487870754321, 0.5449604317851683, 0.7507816150125274, 0.5982879121891092, 0.5270903674140796, 0.5956475700561232, 0.5824838209360796, 0.12778052746828272, 0.14111101874024756, 0.10000608241807785, 0.15715722879765004, 0.13387797854181427, 0.09924293782602778, 0.11657300827462236, 0.14205739654471305, 0.09093198616500453, 0.17923073454952287, 0.16359993740251233, 0.16060481111851854, 0.33573681636373054, 0.14139811916766265, 0.1372754550612244, 0.2948159905200355, 0.17834747318687827, 0.16234326007311362, 0.5354542480162376, 0.3982154342774342, 0.33843504959165116, 0.47240882482489077, 0.5080124063784728, 0.3220991148267327, 0.5540282067468423, 0.5881147412161865, 0.3411494992286461, 0.4387252417577885, 0.43445263324284356, 0.254387117798742, 0.4076101784668633, 0.39924687063190734, 0.24738337730170212, 0.303498667262177, 0.4508453298258466, 0.27217003778450466, 0.2005549032398508, 0.2029293972288908, 0.1850798754444284, 0.19899721828180683, 0.17931796331770078, 0.17853257943769463, 0.2076503171316867, 0.1960047783160349, 0.1949160294625608, 0.23151322653092843, 0.5753361375965498, 0.19171465709441382, 0.5842387248103178, 0.44783173427774114, 0.17964930490792175, 0.5191509213693534, 0.4921615812228114, 0.18588596848825567, 0.15131059161432092, 0.35179633443457936, 0.6885859709042568, 0.7028971406627906, 0.3651944647262815, 0.5957086287840363, 0.7778849067474878, 0.6180795553032119, 0.5309913765021737, 0.5220216137791177, 0.20488566727417212, 0.5657950644991916, 0.19742182117357876, 0.1596408586294158, 0.4476677856009673, 0.16393342567043878, 0.2035864882330215, 0.20869639196529555, 0.19681476863221958, 0.18285531238890274, 0.19637062051335374, 0.19218684545427567, 0.1831680045529842, 0.17597241862717006, 0.17822527274589106, 0.17465084370490913, 0.1589351175088335, 0.07861184429213974, 0.09139145757126277, 0.07585538466069686, 0.08834664635709122, 0.09015352346393901, 0.06712718977866827, 0.07707823357288113, 0.0779559816071671, 0.07283426372195934]}, "mutation_prompt": null}
{"id": "48d8b0a3-5ba8-43b1-9679-6199d00b721d", "solution": "import numpy as np\n\nclass AdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n\n        return best_solution", "name": "AdaptiveDE", "description": "Integrate a novel adaptive mutation strategy based on self-adaptation of mutation factor F during the optimization process to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {"aucs": [0.831148284950614, 0.83318019711314, 0.6607244044686424, 0.8495063464675087, 0.8519308515209606, 0.7026665281047638, 0.8426282524800252, 0.8303075448280007, 0.715378807462465, 0.697773604579557, 0.7467584022429838, 0.5273537816881422, 0.5015308189487535, 0.7298720064542665, 0.5153002978143013, 0.7015637355309743, 0.7399645433034743, 0.5369544376772666, 0.2580231436297492, 0.15297397601500307, 0.11124065917930426, 0.36443388801373255, 0.12239841815453345, 0.08430554893213904, 0.522936866944081, 0.1318803267771146, 0.10149922979671788, 0.12879032488630526, 0.14770483237793464, 0.10248959443538586, 0.1342545715729777, 0.16147175465827368, 0.10364805289385715, 0.11925402809016128, 0.1101969461418455, 0.08552798943071871, 0.7635205967281682, 0.871997082510644, 0.9413740021449605, 0.8998826316901585, 0.9370627702978682, 0.9413965664878168, 0.9688862766394543, 0.8858591326328384, 0.955457382167406, 0.1939264839457442, 0.22266230052514424, 0.35996891523860164, 0.26181445223676847, 0.20361777425996885, 0.34260297631091163, 0.2546702295355707, 0.20425336821901396, 0.38088025662710134, 0.8297509097193929, 0.8128894457746949, 0.5815064183152875, 0.7605897763021063, 0.8413459090253004, 0.6600445846218826, 0.37655218978656946, 0.8098809355190146, 0.6490378486945227, 0.15568827318836198, 0.1348642057305226, 0.1893955876536102, 0.19740454634173776, 0.13445480195652293, 0.18787820295418722, 0.3502015119395665, 0.16184137376479835, 0.18172672910324295, 0.10043581715191108, 0.28110969425148324, 0.187140803662173, 0.2565947531499031, 0.21027228914061336, 0.20786453501337532, 0.15566819154218026, 0.20344336901309323, 0.27073795782963717, 0.09946022882658057, 0.5323881740431908, 0.29947661510934354, 0.09761265815472853, 0.2028642226282492, 0.25696695171990924, 0.11210094996550779, 0.2549297579952273, 0.23984051208135315, 0.16071628789824355, 0.2800059877792097, 0.37160705522000914, 0.3205459633382035, 0.17320609105800144, 0.35623143139372737, 0.2049339990997473, 0.227677793637718, 0.4381918116043215, 0.08247519556156935, 0.11841212978308979, 0.0994380252814302, 0.2357769301639, 0.12114043225061721, 0.1182544695278811, 0.26795176793652953, 0.25128068432191963, 0.0859429556338106, 0.18399870730897228, 0.39293606162180317, 0.22945578616195805, 0.375380122741939, 0.28886558298443266, 0.23704608585589848, 0.1118953848406602, 0.28097015484966315, 0.2327968057828822, 0.5741411562251069, 0.6078796243382882, 0.6078487870754321, 0.5449604317851683, 0.7507816150125274, 0.5982879121891092, 0.5270903674140796, 0.5956475700561232, 0.5824838209360796, 0.12778052746828272, 0.14111101874024756, 0.10000608241807785, 0.15715722879765004, 0.13387797854181427, 0.09924293782602778, 0.11657300827462236, 0.14205739654471305, 0.09093198616500453, 0.17923073454952287, 0.16359993740251233, 0.16060481111851854, 0.33573681636373054, 0.14139811916766265, 0.1372754550612244, 0.2948159905200355, 0.17834747318687827, 0.16234326007311362, 0.5354542480162376, 0.3982154342774342, 0.33843504959165116, 0.47240882482489077, 0.5080124063784728, 0.3220991148267327, 0.5540282067468423, 0.5881147412161865, 0.3411494992286461, 0.4387252417577885, 0.43445263324284356, 0.254387117798742, 0.4076101784668633, 0.39924687063190734, 0.24738337730170212, 0.303498667262177, 0.4508453298258466, 0.27217003778450466, 0.2005549032398508, 0.2029293972288908, 0.1850798754444284, 0.19899721828180683, 0.17931796331770078, 0.17853257943769463, 0.2076503171316867, 0.1960047783160349, 0.1949160294625608, 0.23151322653092843, 0.5753361375965498, 0.19171465709441382, 0.5842387248103178, 0.44783173427774114, 0.17964930490792175, 0.5191509213693534, 0.4921615812228114, 0.18588596848825567, 0.15131059161432092, 0.35179633443457936, 0.6885859709042568, 0.7028971406627906, 0.3651944647262815, 0.5957086287840363, 0.7778849067474878, 0.6180795553032119, 0.5309913765021737, 0.5220216137791177, 0.20488566727417212, 0.5657950644991916, 0.19742182117357876, 0.1596408586294158, 0.4476677856009673, 0.16393342567043878, 0.2035864882330215, 0.20869639196529555, 0.19681476863221958, 0.18285531238890274, 0.19637062051335374, 0.19218684545427567, 0.1831680045529842, 0.17597241862717006, 0.17822527274589106, 0.17465084370490913, 0.1589351175088335, 0.07861184429213974, 0.09139145757126277, 0.07585538466069686, 0.08834664635709122, 0.09015352346393901, 0.06712718977866827, 0.07707823357288113, 0.0779559816071671, 0.07283426372195934]}, "mutation_prompt": null}
{"id": "eef731a2-4dec-4b51-9b97-2c9e6a489782", "solution": "import numpy as np\n\nclass AdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n\n        return best_solution", "name": "AdaptiveDE", "description": "Integrate a novel adaptive mutation strategy based on self-adaptation of mutation factor F during the optimization process to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {"aucs": [0.831148284950614, 0.83318019711314, 0.6607244044686424, 0.8495063464675087, 0.8519308515209606, 0.7026665281047638, 0.8426282524800252, 0.8303075448280007, 0.715378807462465, 0.697773604579557, 0.7467584022429838, 0.5273537816881422, 0.5015308189487535, 0.7298720064542665, 0.5153002978143013, 0.7015637355309743, 0.7399645433034743, 0.5369544376772666, 0.2580231436297492, 0.15297397601500307, 0.11124065917930426, 0.36443388801373255, 0.12239841815453345, 0.08430554893213904, 0.522936866944081, 0.1318803267771146, 0.10149922979671788, 0.12879032488630526, 0.14770483237793464, 0.10248959443538586, 0.1342545715729777, 0.16147175465827368, 0.10364805289385715, 0.11925402809016128, 0.1101969461418455, 0.08552798943071871, 0.7635205967281682, 0.871997082510644, 0.9413740021449605, 0.8998826316901585, 0.9370627702978682, 0.9413965664878168, 0.9688862766394543, 0.8858591326328384, 0.955457382167406, 0.1939264839457442, 0.22266230052514424, 0.35996891523860164, 0.26181445223676847, 0.20361777425996885, 0.34260297631091163, 0.2546702295355707, 0.20425336821901396, 0.38088025662710134, 0.8297509097193929, 0.8128894457746949, 0.5815064183152875, 0.7605897763021063, 0.8413459090253004, 0.6600445846218826, 0.37655218978656946, 0.8098809355190146, 0.6490378486945227, 0.15568827318836198, 0.1348642057305226, 0.1893955876536102, 0.19740454634173776, 0.13445480195652293, 0.18787820295418722, 0.3502015119395665, 0.16184137376479835, 0.18172672910324295, 0.10043581715191108, 0.28110969425148324, 0.187140803662173, 0.2565947531499031, 0.21027228914061336, 0.20786453501337532, 0.15566819154218026, 0.20344336901309323, 0.27073795782963717, 0.09946022882658057, 0.5323881740431908, 0.29947661510934354, 0.09761265815472853, 0.2028642226282492, 0.25696695171990924, 0.11210094996550779, 0.2549297579952273, 0.23984051208135315, 0.16071628789824355, 0.2800059877792097, 0.37160705522000914, 0.3205459633382035, 0.17320609105800144, 0.35623143139372737, 0.2049339990997473, 0.227677793637718, 0.4381918116043215, 0.08247519556156935, 0.11841212978308979, 0.0994380252814302, 0.2357769301639, 0.12114043225061721, 0.1182544695278811, 0.26795176793652953, 0.25128068432191963, 0.0859429556338106, 0.18399870730897228, 0.39293606162180317, 0.22945578616195805, 0.375380122741939, 0.28886558298443266, 0.23704608585589848, 0.1118953848406602, 0.28097015484966315, 0.2327968057828822, 0.5741411562251069, 0.6078796243382882, 0.6078487870754321, 0.5449604317851683, 0.7507816150125274, 0.5982879121891092, 0.5270903674140796, 0.5956475700561232, 0.5824838209360796, 0.12778052746828272, 0.14111101874024756, 0.10000608241807785, 0.15715722879765004, 0.13387797854181427, 0.09924293782602778, 0.11657300827462236, 0.14205739654471305, 0.09093198616500453, 0.17923073454952287, 0.16359993740251233, 0.16060481111851854, 0.33573681636373054, 0.14139811916766265, 0.1372754550612244, 0.2948159905200355, 0.17834747318687827, 0.16234326007311362, 0.5354542480162376, 0.3982154342774342, 0.33843504959165116, 0.47240882482489077, 0.5080124063784728, 0.3220991148267327, 0.5540282067468423, 0.5881147412161865, 0.3411494992286461, 0.4387252417577885, 0.43445263324284356, 0.254387117798742, 0.4076101784668633, 0.39924687063190734, 0.24738337730170212, 0.303498667262177, 0.4508453298258466, 0.27217003778450466, 0.2005549032398508, 0.2029293972288908, 0.1850798754444284, 0.19899721828180683, 0.17931796331770078, 0.17853257943769463, 0.2076503171316867, 0.1960047783160349, 0.1949160294625608, 0.23151322653092843, 0.5753361375965498, 0.19171465709441382, 0.5842387248103178, 0.44783173427774114, 0.17964930490792175, 0.5191509213693534, 0.4921615812228114, 0.18588596848825567, 0.15131059161432092, 0.35179633443457936, 0.6885859709042568, 0.7028971406627906, 0.3651944647262815, 0.5957086287840363, 0.7778849067474878, 0.6180795553032119, 0.5309913765021737, 0.5220216137791177, 0.20488566727417212, 0.5657950644991916, 0.19742182117357876, 0.1596408586294158, 0.4476677856009673, 0.16393342567043878, 0.2035864882330215, 0.20869639196529555, 0.19681476863221958, 0.18285531238890274, 0.19637062051335374, 0.19218684545427567, 0.1831680045529842, 0.17597241862717006, 0.17822527274589106, 0.17465084370490913, 0.1589351175088335, 0.07861184429213974, 0.09139145757126277, 0.07585538466069686, 0.08834664635709122, 0.09015352346393901, 0.06712718977866827, 0.07707823357288113, 0.0779559816071671, 0.07283426372195934]}, "mutation_prompt": null}
{"id": "a41ee521-0abd-4059-9a1f-341c42cc5fc1", "solution": "import numpy as np\n\nclass AdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n\n        return best_solution", "name": "AdaptiveDE", "description": "Integrate a novel adaptive mutation strategy based on self-adaptation of mutation factor F during the optimization process to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {"aucs": [0.831148284950614, 0.83318019711314, 0.6607244044686424, 0.8495063464675087, 0.8519308515209606, 0.7026665281047638, 0.8426282524800252, 0.8303075448280007, 0.715378807462465, 0.697773604579557, 0.7467584022429838, 0.5273537816881422, 0.5015308189487535, 0.7298720064542665, 0.5153002978143013, 0.7015637355309743, 0.7399645433034743, 0.5369544376772666, 0.2580231436297492, 0.15297397601500307, 0.11124065917930426, 0.36443388801373255, 0.12239841815453345, 0.08430554893213904, 0.522936866944081, 0.1318803267771146, 0.10149922979671788, 0.12879032488630526, 0.14770483237793464, 0.10248959443538586, 0.1342545715729777, 0.16147175465827368, 0.10364805289385715, 0.11925402809016128, 0.1101969461418455, 0.08552798943071871, 0.7635205967281682, 0.871997082510644, 0.9413740021449605, 0.8998826316901585, 0.9370627702978682, 0.9413965664878168, 0.9688862766394543, 0.8858591326328384, 0.955457382167406, 0.1939264839457442, 0.22266230052514424, 0.35996891523860164, 0.26181445223676847, 0.20361777425996885, 0.34260297631091163, 0.2546702295355707, 0.20425336821901396, 0.38088025662710134, 0.8297509097193929, 0.8128894457746949, 0.5815064183152875, 0.7605897763021063, 0.8413459090253004, 0.6600445846218826, 0.37655218978656946, 0.8098809355190146, 0.6490378486945227, 0.15568827318836198, 0.1348642057305226, 0.1893955876536102, 0.19740454634173776, 0.13445480195652293, 0.18787820295418722, 0.3502015119395665, 0.16184137376479835, 0.18172672910324295, 0.10043581715191108, 0.28110969425148324, 0.187140803662173, 0.2565947531499031, 0.21027228914061336, 0.20786453501337532, 0.15566819154218026, 0.20344336901309323, 0.27073795782963717, 0.09946022882658057, 0.5323881740431908, 0.29947661510934354, 0.09761265815472853, 0.2028642226282492, 0.25696695171990924, 0.11210094996550779, 0.2549297579952273, 0.23984051208135315, 0.16071628789824355, 0.2800059877792097, 0.37160705522000914, 0.3205459633382035, 0.17320609105800144, 0.35623143139372737, 0.2049339990997473, 0.227677793637718, 0.4381918116043215, 0.08247519556156935, 0.11841212978308979, 0.0994380252814302, 0.2357769301639, 0.12114043225061721, 0.1182544695278811, 0.26795176793652953, 0.25128068432191963, 0.0859429556338106, 0.18399870730897228, 0.39293606162180317, 0.22945578616195805, 0.375380122741939, 0.28886558298443266, 0.23704608585589848, 0.1118953848406602, 0.28097015484966315, 0.2327968057828822, 0.5741411562251069, 0.6078796243382882, 0.6078487870754321, 0.5449604317851683, 0.7507816150125274, 0.5982879121891092, 0.5270903674140796, 0.5956475700561232, 0.5824838209360796, 0.12778052746828272, 0.14111101874024756, 0.10000608241807785, 0.15715722879765004, 0.13387797854181427, 0.09924293782602778, 0.11657300827462236, 0.14205739654471305, 0.09093198616500453, 0.17923073454952287, 0.16359993740251233, 0.16060481111851854, 0.33573681636373054, 0.14139811916766265, 0.1372754550612244, 0.2948159905200355, 0.17834747318687827, 0.16234326007311362, 0.5354542480162376, 0.3982154342774342, 0.33843504959165116, 0.47240882482489077, 0.5080124063784728, 0.3220991148267327, 0.5540282067468423, 0.5881147412161865, 0.3411494992286461, 0.4387252417577885, 0.43445263324284356, 0.254387117798742, 0.4076101784668633, 0.39924687063190734, 0.24738337730170212, 0.303498667262177, 0.4508453298258466, 0.27217003778450466, 0.2005549032398508, 0.2029293972288908, 0.1850798754444284, 0.19899721828180683, 0.17931796331770078, 0.17853257943769463, 0.2076503171316867, 0.1960047783160349, 0.1949160294625608, 0.23151322653092843, 0.5753361375965498, 0.19171465709441382, 0.5842387248103178, 0.44783173427774114, 0.17964930490792175, 0.5191509213693534, 0.4921615812228114, 0.18588596848825567, 0.15131059161432092, 0.35179633443457936, 0.6885859709042568, 0.7028971406627906, 0.3651944647262815, 0.5957086287840363, 0.7778849067474878, 0.6180795553032119, 0.5309913765021737, 0.5220216137791177, 0.20488566727417212, 0.5657950644991916, 0.19742182117357876, 0.1596408586294158, 0.4476677856009673, 0.16393342567043878, 0.2035864882330215, 0.20869639196529555, 0.19681476863221958, 0.18285531238890274, 0.19637062051335374, 0.19218684545427567, 0.1831680045529842, 0.17597241862717006, 0.17822527274589106, 0.17465084370490913, 0.1589351175088335, 0.07861184429213974, 0.09139145757126277, 0.07585538466069686, 0.08834664635709122, 0.09015352346393901, 0.06712718977866827, 0.07707823357288113, 0.0779559816071671, 0.07283426372195934]}, "mutation_prompt": null}
{"id": "4ed80f66-5b2f-493f-9cbf-25cfbcda4df3", "solution": "import numpy as np\n\nclass AdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n\n        return best_solution", "name": "AdaptiveDE", "description": "Integrate a novel adaptive mutation strategy based on self-adaptation of mutation factor F during the optimization process to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {"aucs": [0.831148284950614, 0.83318019711314, 0.6607244044686424, 0.8495063464675087, 0.8519308515209606, 0.7026665281047638, 0.8426282524800252, 0.8303075448280007, 0.715378807462465, 0.697773604579557, 0.7467584022429838, 0.5273537816881422, 0.5015308189487535, 0.7298720064542665, 0.5153002978143013, 0.7015637355309743, 0.7399645433034743, 0.5369544376772666, 0.2580231436297492, 0.15297397601500307, 0.11124065917930426, 0.36443388801373255, 0.12239841815453345, 0.08430554893213904, 0.522936866944081, 0.1318803267771146, 0.10149922979671788, 0.12879032488630526, 0.14770483237793464, 0.10248959443538586, 0.1342545715729777, 0.16147175465827368, 0.10364805289385715, 0.11925402809016128, 0.1101969461418455, 0.08552798943071871, 0.7635205967281682, 0.871997082510644, 0.9413740021449605, 0.8998826316901585, 0.9370627702978682, 0.9413965664878168, 0.9688862766394543, 0.8858591326328384, 0.955457382167406, 0.1939264839457442, 0.22266230052514424, 0.35996891523860164, 0.26181445223676847, 0.20361777425996885, 0.34260297631091163, 0.2546702295355707, 0.20425336821901396, 0.38088025662710134, 0.8297509097193929, 0.8128894457746949, 0.5815064183152875, 0.7605897763021063, 0.8413459090253004, 0.6600445846218826, 0.37655218978656946, 0.8098809355190146, 0.6490378486945227, 0.15568827318836198, 0.1348642057305226, 0.1893955876536102, 0.19740454634173776, 0.13445480195652293, 0.18787820295418722, 0.3502015119395665, 0.16184137376479835, 0.18172672910324295, 0.10043581715191108, 0.28110969425148324, 0.187140803662173, 0.2565947531499031, 0.21027228914061336, 0.20786453501337532, 0.15566819154218026, 0.20344336901309323, 0.27073795782963717, 0.09946022882658057, 0.5323881740431908, 0.29947661510934354, 0.09761265815472853, 0.2028642226282492, 0.25696695171990924, 0.11210094996550779, 0.2549297579952273, 0.23984051208135315, 0.16071628789824355, 0.2800059877792097, 0.37160705522000914, 0.3205459633382035, 0.17320609105800144, 0.35623143139372737, 0.2049339990997473, 0.227677793637718, 0.4381918116043215, 0.08247519556156935, 0.11841212978308979, 0.0994380252814302, 0.2357769301639, 0.12114043225061721, 0.1182544695278811, 0.26795176793652953, 0.25128068432191963, 0.0859429556338106, 0.18399870730897228, 0.39293606162180317, 0.22945578616195805, 0.375380122741939, 0.28886558298443266, 0.23704608585589848, 0.1118953848406602, 0.28097015484966315, 0.2327968057828822, 0.5741411562251069, 0.6078796243382882, 0.6078487870754321, 0.5449604317851683, 0.7507816150125274, 0.5982879121891092, 0.5270903674140796, 0.5956475700561232, 0.5824838209360796, 0.12778052746828272, 0.14111101874024756, 0.10000608241807785, 0.15715722879765004, 0.13387797854181427, 0.09924293782602778, 0.11657300827462236, 0.14205739654471305, 0.09093198616500453, 0.17923073454952287, 0.16359993740251233, 0.16060481111851854, 0.33573681636373054, 0.14139811916766265, 0.1372754550612244, 0.2948159905200355, 0.17834747318687827, 0.16234326007311362, 0.5354542480162376, 0.3982154342774342, 0.33843504959165116, 0.47240882482489077, 0.5080124063784728, 0.3220991148267327, 0.5540282067468423, 0.5881147412161865, 0.3411494992286461, 0.4387252417577885, 0.43445263324284356, 0.254387117798742, 0.4076101784668633, 0.39924687063190734, 0.24738337730170212, 0.303498667262177, 0.4508453298258466, 0.27217003778450466, 0.2005549032398508, 0.2029293972288908, 0.1850798754444284, 0.19899721828180683, 0.17931796331770078, 0.17853257943769463, 0.2076503171316867, 0.1960047783160349, 0.1949160294625608, 0.23151322653092843, 0.5753361375965498, 0.19171465709441382, 0.5842387248103178, 0.44783173427774114, 0.17964930490792175, 0.5191509213693534, 0.4921615812228114, 0.18588596848825567, 0.15131059161432092, 0.35179633443457936, 0.6885859709042568, 0.7028971406627906, 0.3651944647262815, 0.5957086287840363, 0.7778849067474878, 0.6180795553032119, 0.5309913765021737, 0.5220216137791177, 0.20488566727417212, 0.5657950644991916, 0.19742182117357876, 0.1596408586294158, 0.4476677856009673, 0.16393342567043878, 0.2035864882330215, 0.20869639196529555, 0.19681476863221958, 0.18285531238890274, 0.19637062051335374, 0.19218684545427567, 0.1831680045529842, 0.17597241862717006, 0.17822527274589106, 0.17465084370490913, 0.1589351175088335, 0.07861184429213974, 0.09139145757126277, 0.07585538466069686, 0.08834664635709122, 0.09015352346393901, 0.06712718977866827, 0.07707823357288113, 0.0779559816071671, 0.07283426372195934]}, "mutation_prompt": null}
{"id": "a3b5730e-8341-4357-9feb-a76cb5452e9f", "solution": "import numpy as np\n\nclass AdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n\n        return best_solution", "name": "AdaptiveDE", "description": "Integrate a novel adaptive mutation strategy based on self-adaptation of mutation factor F during the optimization process to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {"aucs": [0.831148284950614, 0.83318019711314, 0.6607244044686424, 0.8495063464675087, 0.8519308515209606, 0.7026665281047638, 0.8426282524800252, 0.8303075448280007, 0.715378807462465, 0.697773604579557, 0.7467584022429838, 0.5273537816881422, 0.5015308189487535, 0.7298720064542665, 0.5153002978143013, 0.7015637355309743, 0.7399645433034743, 0.5369544376772666, 0.2580231436297492, 0.15297397601500307, 0.11124065917930426, 0.36443388801373255, 0.12239841815453345, 0.08430554893213904, 0.522936866944081, 0.1318803267771146, 0.10149922979671788, 0.12879032488630526, 0.14770483237793464, 0.10248959443538586, 0.1342545715729777, 0.16147175465827368, 0.10364805289385715, 0.11925402809016128, 0.1101969461418455, 0.08552798943071871, 0.7635205967281682, 0.871997082510644, 0.9413740021449605, 0.8998826316901585, 0.9370627702978682, 0.9413965664878168, 0.9688862766394543, 0.8858591326328384, 0.955457382167406, 0.1939264839457442, 0.22266230052514424, 0.35996891523860164, 0.26181445223676847, 0.20361777425996885, 0.34260297631091163, 0.2546702295355707, 0.20425336821901396, 0.38088025662710134, 0.8297509097193929, 0.8128894457746949, 0.5815064183152875, 0.7605897763021063, 0.8413459090253004, 0.6600445846218826, 0.37655218978656946, 0.8098809355190146, 0.6490378486945227, 0.15568827318836198, 0.1348642057305226, 0.1893955876536102, 0.19740454634173776, 0.13445480195652293, 0.18787820295418722, 0.3502015119395665, 0.16184137376479835, 0.18172672910324295, 0.10043581715191108, 0.28110969425148324, 0.187140803662173, 0.2565947531499031, 0.21027228914061336, 0.20786453501337532, 0.15566819154218026, 0.20344336901309323, 0.27073795782963717, 0.09946022882658057, 0.5323881740431908, 0.29947661510934354, 0.09761265815472853, 0.2028642226282492, 0.25696695171990924, 0.11210094996550779, 0.2549297579952273, 0.23984051208135315, 0.16071628789824355, 0.2800059877792097, 0.37160705522000914, 0.3205459633382035, 0.17320609105800144, 0.35623143139372737, 0.2049339990997473, 0.227677793637718, 0.4381918116043215, 0.08247519556156935, 0.11841212978308979, 0.0994380252814302, 0.2357769301639, 0.12114043225061721, 0.1182544695278811, 0.26795176793652953, 0.25128068432191963, 0.0859429556338106, 0.18399870730897228, 0.39293606162180317, 0.22945578616195805, 0.375380122741939, 0.28886558298443266, 0.23704608585589848, 0.1118953848406602, 0.28097015484966315, 0.2327968057828822, 0.5741411562251069, 0.6078796243382882, 0.6078487870754321, 0.5449604317851683, 0.7507816150125274, 0.5982879121891092, 0.5270903674140796, 0.5956475700561232, 0.5824838209360796, 0.12778052746828272, 0.14111101874024756, 0.10000608241807785, 0.15715722879765004, 0.13387797854181427, 0.09924293782602778, 0.11657300827462236, 0.14205739654471305, 0.09093198616500453, 0.17923073454952287, 0.16359993740251233, 0.16060481111851854, 0.33573681636373054, 0.14139811916766265, 0.1372754550612244, 0.2948159905200355, 0.17834747318687827, 0.16234326007311362, 0.5354542480162376, 0.3982154342774342, 0.33843504959165116, 0.47240882482489077, 0.5080124063784728, 0.3220991148267327, 0.5540282067468423, 0.5881147412161865, 0.3411494992286461, 0.4387252417577885, 0.43445263324284356, 0.254387117798742, 0.4076101784668633, 0.39924687063190734, 0.24738337730170212, 0.303498667262177, 0.4508453298258466, 0.27217003778450466, 0.2005549032398508, 0.2029293972288908, 0.1850798754444284, 0.19899721828180683, 0.17931796331770078, 0.17853257943769463, 0.2076503171316867, 0.1960047783160349, 0.1949160294625608, 0.23151322653092843, 0.5753361375965498, 0.19171465709441382, 0.5842387248103178, 0.44783173427774114, 0.17964930490792175, 0.5191509213693534, 0.4921615812228114, 0.18588596848825567, 0.15131059161432092, 0.35179633443457936, 0.6885859709042568, 0.7028971406627906, 0.3651944647262815, 0.5957086287840363, 0.7778849067474878, 0.6180795553032119, 0.5309913765021737, 0.5220216137791177, 0.20488566727417212, 0.5657950644991916, 0.19742182117357876, 0.1596408586294158, 0.4476677856009673, 0.16393342567043878, 0.2035864882330215, 0.20869639196529555, 0.19681476863221958, 0.18285531238890274, 0.19637062051335374, 0.19218684545427567, 0.1831680045529842, 0.17597241862717006, 0.17822527274589106, 0.17465084370490913, 0.1589351175088335, 0.07861184429213974, 0.09139145757126277, 0.07585538466069686, 0.08834664635709122, 0.09015352346393901, 0.06712718977866827, 0.07707823357288113, 0.0779559816071671, 0.07283426372195934]}, "mutation_prompt": null}
{"id": "03318f9b-ffc1-424d-843e-36ba0f18fcd1", "solution": "import numpy as np\n\nclass AdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n\n        return best_solution", "name": "AdaptiveDE", "description": "Integrate a novel adaptive mutation strategy based on self-adaptation of mutation factor F during the optimization process to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {"aucs": [0.831148284950614, 0.83318019711314, 0.6607244044686424, 0.8495063464675087, 0.8519308515209606, 0.7026665281047638, 0.8426282524800252, 0.8303075448280007, 0.715378807462465, 0.697773604579557, 0.7467584022429838, 0.5273537816881422, 0.5015308189487535, 0.7298720064542665, 0.5153002978143013, 0.7015637355309743, 0.7399645433034743, 0.5369544376772666, 0.2580231436297492, 0.15297397601500307, 0.11124065917930426, 0.36443388801373255, 0.12239841815453345, 0.08430554893213904, 0.522936866944081, 0.1318803267771146, 0.10149922979671788, 0.12879032488630526, 0.14770483237793464, 0.10248959443538586, 0.1342545715729777, 0.16147175465827368, 0.10364805289385715, 0.11925402809016128, 0.1101969461418455, 0.08552798943071871, 0.7635205967281682, 0.871997082510644, 0.9413740021449605, 0.8998826316901585, 0.9370627702978682, 0.9413965664878168, 0.9688862766394543, 0.8858591326328384, 0.955457382167406, 0.1939264839457442, 0.22266230052514424, 0.35996891523860164, 0.26181445223676847, 0.20361777425996885, 0.34260297631091163, 0.2546702295355707, 0.20425336821901396, 0.38088025662710134, 0.8297509097193929, 0.8128894457746949, 0.5815064183152875, 0.7605897763021063, 0.8413459090253004, 0.6600445846218826, 0.37655218978656946, 0.8098809355190146, 0.6490378486945227, 0.15568827318836198, 0.1348642057305226, 0.1893955876536102, 0.19740454634173776, 0.13445480195652293, 0.18787820295418722, 0.3502015119395665, 0.16184137376479835, 0.18172672910324295, 0.10043581715191108, 0.28110969425148324, 0.187140803662173, 0.2565947531499031, 0.21027228914061336, 0.20786453501337532, 0.15566819154218026, 0.20344336901309323, 0.27073795782963717, 0.09946022882658057, 0.5323881740431908, 0.29947661510934354, 0.09761265815472853, 0.2028642226282492, 0.25696695171990924, 0.11210094996550779, 0.2549297579952273, 0.23984051208135315, 0.16071628789824355, 0.2800059877792097, 0.37160705522000914, 0.3205459633382035, 0.17320609105800144, 0.35623143139372737, 0.2049339990997473, 0.227677793637718, 0.4381918116043215, 0.08247519556156935, 0.11841212978308979, 0.0994380252814302, 0.2357769301639, 0.12114043225061721, 0.1182544695278811, 0.26795176793652953, 0.25128068432191963, 0.0859429556338106, 0.18399870730897228, 0.39293606162180317, 0.22945578616195805, 0.375380122741939, 0.28886558298443266, 0.23704608585589848, 0.1118953848406602, 0.28097015484966315, 0.2327968057828822, 0.5741411562251069, 0.6078796243382882, 0.6078487870754321, 0.5449604317851683, 0.7507816150125274, 0.5982879121891092, 0.5270903674140796, 0.5956475700561232, 0.5824838209360796, 0.12778052746828272, 0.14111101874024756, 0.10000608241807785, 0.15715722879765004, 0.13387797854181427, 0.09924293782602778, 0.11657300827462236, 0.14205739654471305, 0.09093198616500453, 0.17923073454952287, 0.16359993740251233, 0.16060481111851854, 0.33573681636373054, 0.14139811916766265, 0.1372754550612244, 0.2948159905200355, 0.17834747318687827, 0.16234326007311362, 0.5354542480162376, 0.3982154342774342, 0.33843504959165116, 0.47240882482489077, 0.5080124063784728, 0.3220991148267327, 0.5540282067468423, 0.5881147412161865, 0.3411494992286461, 0.4387252417577885, 0.43445263324284356, 0.254387117798742, 0.4076101784668633, 0.39924687063190734, 0.24738337730170212, 0.303498667262177, 0.4508453298258466, 0.27217003778450466, 0.2005549032398508, 0.2029293972288908, 0.1850798754444284, 0.19899721828180683, 0.17931796331770078, 0.17853257943769463, 0.2076503171316867, 0.1960047783160349, 0.1949160294625608, 0.23151322653092843, 0.5753361375965498, 0.19171465709441382, 0.5842387248103178, 0.44783173427774114, 0.17964930490792175, 0.5191509213693534, 0.4921615812228114, 0.18588596848825567, 0.15131059161432092, 0.35179633443457936, 0.6885859709042568, 0.7028971406627906, 0.3651944647262815, 0.5957086287840363, 0.7778849067474878, 0.6180795553032119, 0.5309913765021737, 0.5220216137791177, 0.20488566727417212, 0.5657950644991916, 0.19742182117357876, 0.1596408586294158, 0.4476677856009673, 0.16393342567043878, 0.2035864882330215, 0.20869639196529555, 0.19681476863221958, 0.18285531238890274, 0.19637062051335374, 0.19218684545427567, 0.1831680045529842, 0.17597241862717006, 0.17822527274589106, 0.17465084370490913, 0.1589351175088335, 0.07861184429213974, 0.09139145757126277, 0.07585538466069686, 0.08834664635709122, 0.09015352346393901, 0.06712718977866827, 0.07707823357288113, 0.0779559816071671, 0.07283426372195934]}, "mutation_prompt": null}
{"id": "7c00d1e9-f5bc-4d3a-a137-fc21d9e23c23", "solution": "import numpy as np\n\nclass AdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n\n        return best_solution", "name": "AdaptiveDE", "description": "Integrate a novel adaptive mutation strategy based on self-adaptation of mutation factor F during the optimization process to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {"aucs": [0.831148284950614, 0.83318019711314, 0.6607244044686424, 0.8495063464675087, 0.8519308515209606, 0.7026665281047638, 0.8426282524800252, 0.8303075448280007, 0.715378807462465, 0.697773604579557, 0.7467584022429838, 0.5273537816881422, 0.5015308189487535, 0.7298720064542665, 0.5153002978143013, 0.7015637355309743, 0.7399645433034743, 0.5369544376772666, 0.2580231436297492, 0.15297397601500307, 0.11124065917930426, 0.36443388801373255, 0.12239841815453345, 0.08430554893213904, 0.522936866944081, 0.1318803267771146, 0.10149922979671788, 0.12879032488630526, 0.14770483237793464, 0.10248959443538586, 0.1342545715729777, 0.16147175465827368, 0.10364805289385715, 0.11925402809016128, 0.1101969461418455, 0.08552798943071871, 0.7635205967281682, 0.871997082510644, 0.9413740021449605, 0.8998826316901585, 0.9370627702978682, 0.9413965664878168, 0.9688862766394543, 0.8858591326328384, 0.955457382167406, 0.1939264839457442, 0.22266230052514424, 0.35996891523860164, 0.26181445223676847, 0.20361777425996885, 0.34260297631091163, 0.2546702295355707, 0.20425336821901396, 0.38088025662710134, 0.8297509097193929, 0.8128894457746949, 0.5815064183152875, 0.7605897763021063, 0.8413459090253004, 0.6600445846218826, 0.37655218978656946, 0.8098809355190146, 0.6490378486945227, 0.15568827318836198, 0.1348642057305226, 0.1893955876536102, 0.19740454634173776, 0.13445480195652293, 0.18787820295418722, 0.3502015119395665, 0.16184137376479835, 0.18172672910324295, 0.10043581715191108, 0.28110969425148324, 0.187140803662173, 0.2565947531499031, 0.21027228914061336, 0.20786453501337532, 0.15566819154218026, 0.20344336901309323, 0.27073795782963717, 0.09946022882658057, 0.5323881740431908, 0.29947661510934354, 0.09761265815472853, 0.2028642226282492, 0.25696695171990924, 0.11210094996550779, 0.2549297579952273, 0.23984051208135315, 0.16071628789824355, 0.2800059877792097, 0.37160705522000914, 0.3205459633382035, 0.17320609105800144, 0.35623143139372737, 0.2049339990997473, 0.227677793637718, 0.4381918116043215, 0.08247519556156935, 0.11841212978308979, 0.0994380252814302, 0.2357769301639, 0.12114043225061721, 0.1182544695278811, 0.26795176793652953, 0.25128068432191963, 0.0859429556338106, 0.18399870730897228, 0.39293606162180317, 0.22945578616195805, 0.375380122741939, 0.28886558298443266, 0.23704608585589848, 0.1118953848406602, 0.28097015484966315, 0.2327968057828822, 0.5741411562251069, 0.6078796243382882, 0.6078487870754321, 0.5449604317851683, 0.7507816150125274, 0.5982879121891092, 0.5270903674140796, 0.5956475700561232, 0.5824838209360796, 0.12778052746828272, 0.14111101874024756, 0.10000608241807785, 0.15715722879765004, 0.13387797854181427, 0.09924293782602778, 0.11657300827462236, 0.14205739654471305, 0.09093198616500453, 0.17923073454952287, 0.16359993740251233, 0.16060481111851854, 0.33573681636373054, 0.14139811916766265, 0.1372754550612244, 0.2948159905200355, 0.17834747318687827, 0.16234326007311362, 0.5354542480162376, 0.3982154342774342, 0.33843504959165116, 0.47240882482489077, 0.5080124063784728, 0.3220991148267327, 0.5540282067468423, 0.5881147412161865, 0.3411494992286461, 0.4387252417577885, 0.43445263324284356, 0.254387117798742, 0.4076101784668633, 0.39924687063190734, 0.24738337730170212, 0.303498667262177, 0.4508453298258466, 0.27217003778450466, 0.2005549032398508, 0.2029293972288908, 0.1850798754444284, 0.19899721828180683, 0.17931796331770078, 0.17853257943769463, 0.2076503171316867, 0.1960047783160349, 0.1949160294625608, 0.23151322653092843, 0.5753361375965498, 0.19171465709441382, 0.5842387248103178, 0.44783173427774114, 0.17964930490792175, 0.5191509213693534, 0.4921615812228114, 0.18588596848825567, 0.15131059161432092, 0.35179633443457936, 0.6885859709042568, 0.7028971406627906, 0.3651944647262815, 0.5957086287840363, 0.7778849067474878, 0.6180795553032119, 0.5309913765021737, 0.5220216137791177, 0.20488566727417212, 0.5657950644991916, 0.19742182117357876, 0.1596408586294158, 0.4476677856009673, 0.16393342567043878, 0.2035864882330215, 0.20869639196529555, 0.19681476863221958, 0.18285531238890274, 0.19637062051335374, 0.19218684545427567, 0.1831680045529842, 0.17597241862717006, 0.17822527274589106, 0.17465084370490913, 0.1589351175088335, 0.07861184429213974, 0.09139145757126277, 0.07585538466069686, 0.08834664635709122, 0.09015352346393901, 0.06712718977866827, 0.07707823357288113, 0.0779559816071671, 0.07283426372195934]}, "mutation_prompt": null}
{"id": "ade95c2c-3fa0-4559-839f-74958d58ca17", "solution": "import numpy as np\n\nclass AdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n\n        return best_solution", "name": "AdaptiveDE", "description": "Integrate a novel adaptive mutation strategy based on self-adaptation of mutation factor F during the optimization process to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {"aucs": [0.831148284950614, 0.83318019711314, 0.6607244044686424, 0.8495063464675087, 0.8519308515209606, 0.7026665281047638, 0.8426282524800252, 0.8303075448280007, 0.715378807462465, 0.697773604579557, 0.7467584022429838, 0.5273537816881422, 0.5015308189487535, 0.7298720064542665, 0.5153002978143013, 0.7015637355309743, 0.7399645433034743, 0.5369544376772666, 0.2580231436297492, 0.15297397601500307, 0.11124065917930426, 0.36443388801373255, 0.12239841815453345, 0.08430554893213904, 0.522936866944081, 0.1318803267771146, 0.10149922979671788, 0.12879032488630526, 0.14770483237793464, 0.10248959443538586, 0.1342545715729777, 0.16147175465827368, 0.10364805289385715, 0.11925402809016128, 0.1101969461418455, 0.08552798943071871, 0.7635205967281682, 0.871997082510644, 0.9413740021449605, 0.8998826316901585, 0.9370627702978682, 0.9413965664878168, 0.9688862766394543, 0.8858591326328384, 0.955457382167406, 0.1939264839457442, 0.22266230052514424, 0.35996891523860164, 0.26181445223676847, 0.20361777425996885, 0.34260297631091163, 0.2546702295355707, 0.20425336821901396, 0.38088025662710134, 0.8297509097193929, 0.8128894457746949, 0.5815064183152875, 0.7605897763021063, 0.8413459090253004, 0.6600445846218826, 0.37655218978656946, 0.8098809355190146, 0.6490378486945227, 0.15568827318836198, 0.1348642057305226, 0.1893955876536102, 0.19740454634173776, 0.13445480195652293, 0.18787820295418722, 0.3502015119395665, 0.16184137376479835, 0.18172672910324295, 0.10043581715191108, 0.28110969425148324, 0.187140803662173, 0.2565947531499031, 0.21027228914061336, 0.20786453501337532, 0.15566819154218026, 0.20344336901309323, 0.27073795782963717, 0.09946022882658057, 0.5323881740431908, 0.29947661510934354, 0.09761265815472853, 0.2028642226282492, 0.25696695171990924, 0.11210094996550779, 0.2549297579952273, 0.23984051208135315, 0.16071628789824355, 0.2800059877792097, 0.37160705522000914, 0.3205459633382035, 0.17320609105800144, 0.35623143139372737, 0.2049339990997473, 0.227677793637718, 0.4381918116043215, 0.08247519556156935, 0.11841212978308979, 0.0994380252814302, 0.2357769301639, 0.12114043225061721, 0.1182544695278811, 0.26795176793652953, 0.25128068432191963, 0.0859429556338106, 0.18399870730897228, 0.39293606162180317, 0.22945578616195805, 0.375380122741939, 0.28886558298443266, 0.23704608585589848, 0.1118953848406602, 0.28097015484966315, 0.2327968057828822, 0.5741411562251069, 0.6078796243382882, 0.6078487870754321, 0.5449604317851683, 0.7507816150125274, 0.5982879121891092, 0.5270903674140796, 0.5956475700561232, 0.5824838209360796, 0.12778052746828272, 0.14111101874024756, 0.10000608241807785, 0.15715722879765004, 0.13387797854181427, 0.09924293782602778, 0.11657300827462236, 0.14205739654471305, 0.09093198616500453, 0.17923073454952287, 0.16359993740251233, 0.16060481111851854, 0.33573681636373054, 0.14139811916766265, 0.1372754550612244, 0.2948159905200355, 0.17834747318687827, 0.16234326007311362, 0.5354542480162376, 0.3982154342774342, 0.33843504959165116, 0.47240882482489077, 0.5080124063784728, 0.3220991148267327, 0.5540282067468423, 0.5881147412161865, 0.3411494992286461, 0.4387252417577885, 0.43445263324284356, 0.254387117798742, 0.4076101784668633, 0.39924687063190734, 0.24738337730170212, 0.303498667262177, 0.4508453298258466, 0.27217003778450466, 0.2005549032398508, 0.2029293972288908, 0.1850798754444284, 0.19899721828180683, 0.17931796331770078, 0.17853257943769463, 0.2076503171316867, 0.1960047783160349, 0.1949160294625608, 0.23151322653092843, 0.5753361375965498, 0.19171465709441382, 0.5842387248103178, 0.44783173427774114, 0.17964930490792175, 0.5191509213693534, 0.4921615812228114, 0.18588596848825567, 0.15131059161432092, 0.35179633443457936, 0.6885859709042568, 0.7028971406627906, 0.3651944647262815, 0.5957086287840363, 0.7778849067474878, 0.6180795553032119, 0.5309913765021737, 0.5220216137791177, 0.20488566727417212, 0.5657950644991916, 0.19742182117357876, 0.1596408586294158, 0.4476677856009673, 0.16393342567043878, 0.2035864882330215, 0.20869639196529555, 0.19681476863221958, 0.18285531238890274, 0.19637062051335374, 0.19218684545427567, 0.1831680045529842, 0.17597241862717006, 0.17822527274589106, 0.17465084370490913, 0.1589351175088335, 0.07861184429213974, 0.09139145757126277, 0.07585538466069686, 0.08834664635709122, 0.09015352346393901, 0.06712718977866827, 0.07707823357288113, 0.0779559816071671, 0.07283426372195934]}, "mutation_prompt": null}
{"id": "23a26927-32ba-438e-8d81-aacfdf83b81c", "solution": "import numpy as np\n\nclass AdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n\n        return best_solution", "name": "AdaptiveDE", "description": "Integrate a novel adaptive mutation strategy based on self-adaptation of mutation factor F during the optimization process to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {"aucs": [0.831148284950614, 0.83318019711314, 0.6607244044686424, 0.8495063464675087, 0.8519308515209606, 0.7026665281047638, 0.8426282524800252, 0.8303075448280007, 0.715378807462465, 0.697773604579557, 0.7467584022429838, 0.5273537816881422, 0.5015308189487535, 0.7298720064542665, 0.5153002978143013, 0.7015637355309743, 0.7399645433034743, 0.5369544376772666, 0.2580231436297492, 0.15297397601500307, 0.11124065917930426, 0.36443388801373255, 0.12239841815453345, 0.08430554893213904, 0.522936866944081, 0.1318803267771146, 0.10149922979671788, 0.12879032488630526, 0.14770483237793464, 0.10248959443538586, 0.1342545715729777, 0.16147175465827368, 0.10364805289385715, 0.11925402809016128, 0.1101969461418455, 0.08552798943071871, 0.7635205967281682, 0.871997082510644, 0.9413740021449605, 0.8998826316901585, 0.9370627702978682, 0.9413965664878168, 0.9688862766394543, 0.8858591326328384, 0.955457382167406, 0.1939264839457442, 0.22266230052514424, 0.35996891523860164, 0.26181445223676847, 0.20361777425996885, 0.34260297631091163, 0.2546702295355707, 0.20425336821901396, 0.38088025662710134, 0.8297509097193929, 0.8128894457746949, 0.5815064183152875, 0.7605897763021063, 0.8413459090253004, 0.6600445846218826, 0.37655218978656946, 0.8098809355190146, 0.6490378486945227, 0.15568827318836198, 0.1348642057305226, 0.1893955876536102, 0.19740454634173776, 0.13445480195652293, 0.18787820295418722, 0.3502015119395665, 0.16184137376479835, 0.18172672910324295, 0.10043581715191108, 0.28110969425148324, 0.187140803662173, 0.2565947531499031, 0.21027228914061336, 0.20786453501337532, 0.15566819154218026, 0.20344336901309323, 0.27073795782963717, 0.09946022882658057, 0.5323881740431908, 0.29947661510934354, 0.09761265815472853, 0.2028642226282492, 0.25696695171990924, 0.11210094996550779, 0.2549297579952273, 0.23984051208135315, 0.16071628789824355, 0.2800059877792097, 0.37160705522000914, 0.3205459633382035, 0.17320609105800144, 0.35623143139372737, 0.2049339990997473, 0.227677793637718, 0.4381918116043215, 0.08247519556156935, 0.11841212978308979, 0.0994380252814302, 0.2357769301639, 0.12114043225061721, 0.1182544695278811, 0.26795176793652953, 0.25128068432191963, 0.0859429556338106, 0.18399870730897228, 0.39293606162180317, 0.22945578616195805, 0.375380122741939, 0.28886558298443266, 0.23704608585589848, 0.1118953848406602, 0.28097015484966315, 0.2327968057828822, 0.5741411562251069, 0.6078796243382882, 0.6078487870754321, 0.5449604317851683, 0.7507816150125274, 0.5982879121891092, 0.5270903674140796, 0.5956475700561232, 0.5824838209360796, 0.12778052746828272, 0.14111101874024756, 0.10000608241807785, 0.15715722879765004, 0.13387797854181427, 0.09924293782602778, 0.11657300827462236, 0.14205739654471305, 0.09093198616500453, 0.17923073454952287, 0.16359993740251233, 0.16060481111851854, 0.33573681636373054, 0.14139811916766265, 0.1372754550612244, 0.2948159905200355, 0.17834747318687827, 0.16234326007311362, 0.5354542480162376, 0.3982154342774342, 0.33843504959165116, 0.47240882482489077, 0.5080124063784728, 0.3220991148267327, 0.5540282067468423, 0.5881147412161865, 0.3411494992286461, 0.4387252417577885, 0.43445263324284356, 0.254387117798742, 0.4076101784668633, 0.39924687063190734, 0.24738337730170212, 0.303498667262177, 0.4508453298258466, 0.27217003778450466, 0.2005549032398508, 0.2029293972288908, 0.1850798754444284, 0.19899721828180683, 0.17931796331770078, 0.17853257943769463, 0.2076503171316867, 0.1960047783160349, 0.1949160294625608, 0.23151322653092843, 0.5753361375965498, 0.19171465709441382, 0.5842387248103178, 0.44783173427774114, 0.17964930490792175, 0.5191509213693534, 0.4921615812228114, 0.18588596848825567, 0.15131059161432092, 0.35179633443457936, 0.6885859709042568, 0.7028971406627906, 0.3651944647262815, 0.5957086287840363, 0.7778849067474878, 0.6180795553032119, 0.5309913765021737, 0.5220216137791177, 0.20488566727417212, 0.5657950644991916, 0.19742182117357876, 0.1596408586294158, 0.4476677856009673, 0.16393342567043878, 0.2035864882330215, 0.20869639196529555, 0.19681476863221958, 0.18285531238890274, 0.19637062051335374, 0.19218684545427567, 0.1831680045529842, 0.17597241862717006, 0.17822527274589106, 0.17465084370490913, 0.1589351175088335, 0.07861184429213974, 0.09139145757126277, 0.07585538466069686, 0.08834664635709122, 0.09015352346393901, 0.06712718977866827, 0.07707823357288113, 0.0779559816071671, 0.07283426372195934]}, "mutation_prompt": null}
{"id": "a65cad29-2730-4541-84f5-9922d46ff649", "solution": "import numpy as np\n\nclass AdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n\n        return best_solution", "name": "AdaptiveDE", "description": "Integrate a novel adaptive mutation strategy based on self-adaptation of mutation factor F during the optimization process to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {"aucs": [0.831148284950614, 0.83318019711314, 0.6607244044686424, 0.8495063464675087, 0.8519308515209606, 0.7026665281047638, 0.8426282524800252, 0.8303075448280007, 0.715378807462465, 0.697773604579557, 0.7467584022429838, 0.5273537816881422, 0.5015308189487535, 0.7298720064542665, 0.5153002978143013, 0.7015637355309743, 0.7399645433034743, 0.5369544376772666, 0.2580231436297492, 0.15297397601500307, 0.11124065917930426, 0.36443388801373255, 0.12239841815453345, 0.08430554893213904, 0.522936866944081, 0.1318803267771146, 0.10149922979671788, 0.12879032488630526, 0.14770483237793464, 0.10248959443538586, 0.1342545715729777, 0.16147175465827368, 0.10364805289385715, 0.11925402809016128, 0.1101969461418455, 0.08552798943071871, 0.7635205967281682, 0.871997082510644, 0.9413740021449605, 0.8998826316901585, 0.9370627702978682, 0.9413965664878168, 0.9688862766394543, 0.8858591326328384, 0.955457382167406, 0.1939264839457442, 0.22266230052514424, 0.35996891523860164, 0.26181445223676847, 0.20361777425996885, 0.34260297631091163, 0.2546702295355707, 0.20425336821901396, 0.38088025662710134, 0.8297509097193929, 0.8128894457746949, 0.5815064183152875, 0.7605897763021063, 0.8413459090253004, 0.6600445846218826, 0.37655218978656946, 0.8098809355190146, 0.6490378486945227, 0.15568827318836198, 0.1348642057305226, 0.1893955876536102, 0.19740454634173776, 0.13445480195652293, 0.18787820295418722, 0.3502015119395665, 0.16184137376479835, 0.18172672910324295, 0.10043581715191108, 0.28110969425148324, 0.187140803662173, 0.2565947531499031, 0.21027228914061336, 0.20786453501337532, 0.15566819154218026, 0.20344336901309323, 0.27073795782963717, 0.09946022882658057, 0.5323881740431908, 0.29947661510934354, 0.09761265815472853, 0.2028642226282492, 0.25696695171990924, 0.11210094996550779, 0.2549297579952273, 0.23984051208135315, 0.16071628789824355, 0.2800059877792097, 0.37160705522000914, 0.3205459633382035, 0.17320609105800144, 0.35623143139372737, 0.2049339990997473, 0.227677793637718, 0.4381918116043215, 0.08247519556156935, 0.11841212978308979, 0.0994380252814302, 0.2357769301639, 0.12114043225061721, 0.1182544695278811, 0.26795176793652953, 0.25128068432191963, 0.0859429556338106, 0.18399870730897228, 0.39293606162180317, 0.22945578616195805, 0.375380122741939, 0.28886558298443266, 0.23704608585589848, 0.1118953848406602, 0.28097015484966315, 0.2327968057828822, 0.5741411562251069, 0.6078796243382882, 0.6078487870754321, 0.5449604317851683, 0.7507816150125274, 0.5982879121891092, 0.5270903674140796, 0.5956475700561232, 0.5824838209360796, 0.12778052746828272, 0.14111101874024756, 0.10000608241807785, 0.15715722879765004, 0.13387797854181427, 0.09924293782602778, 0.11657300827462236, 0.14205739654471305, 0.09093198616500453, 0.17923073454952287, 0.16359993740251233, 0.16060481111851854, 0.33573681636373054, 0.14139811916766265, 0.1372754550612244, 0.2948159905200355, 0.17834747318687827, 0.16234326007311362, 0.5354542480162376, 0.3982154342774342, 0.33843504959165116, 0.47240882482489077, 0.5080124063784728, 0.3220991148267327, 0.5540282067468423, 0.5881147412161865, 0.3411494992286461, 0.4387252417577885, 0.43445263324284356, 0.254387117798742, 0.4076101784668633, 0.39924687063190734, 0.24738337730170212, 0.303498667262177, 0.4508453298258466, 0.27217003778450466, 0.2005549032398508, 0.2029293972288908, 0.1850798754444284, 0.19899721828180683, 0.17931796331770078, 0.17853257943769463, 0.2076503171316867, 0.1960047783160349, 0.1949160294625608, 0.23151322653092843, 0.5753361375965498, 0.19171465709441382, 0.5842387248103178, 0.44783173427774114, 0.17964930490792175, 0.5191509213693534, 0.4921615812228114, 0.18588596848825567, 0.15131059161432092, 0.35179633443457936, 0.6885859709042568, 0.7028971406627906, 0.3651944647262815, 0.5957086287840363, 0.7778849067474878, 0.6180795553032119, 0.5309913765021737, 0.5220216137791177, 0.20488566727417212, 0.5657950644991916, 0.19742182117357876, 0.1596408586294158, 0.4476677856009673, 0.16393342567043878, 0.2035864882330215, 0.20869639196529555, 0.19681476863221958, 0.18285531238890274, 0.19637062051335374, 0.19218684545427567, 0.1831680045529842, 0.17597241862717006, 0.17822527274589106, 0.17465084370490913, 0.1589351175088335, 0.07861184429213974, 0.09139145757126277, 0.07585538466069686, 0.08834664635709122, 0.09015352346393901, 0.06712718977866827, 0.07707823357288113, 0.0779559816071671, 0.07283426372195934]}, "mutation_prompt": null}
{"id": "e0055894-adb7-4e87-9e08-1bc62f5eaa00", "solution": "import numpy as np\n\nclass AdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n\n        return best_solution", "name": "AdaptiveDE", "description": "Integrate a novel adaptive mutation strategy based on self-adaptation of mutation factor F during the optimization process to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {"aucs": [0.831148284950614, 0.83318019711314, 0.6607244044686424, 0.8495063464675087, 0.8519308515209606, 0.7026665281047638, 0.8426282524800252, 0.8303075448280007, 0.715378807462465, 0.697773604579557, 0.7467584022429838, 0.5273537816881422, 0.5015308189487535, 0.7298720064542665, 0.5153002978143013, 0.7015637355309743, 0.7399645433034743, 0.5369544376772666, 0.2580231436297492, 0.15297397601500307, 0.11124065917930426, 0.36443388801373255, 0.12239841815453345, 0.08430554893213904, 0.522936866944081, 0.1318803267771146, 0.10149922979671788, 0.12879032488630526, 0.14770483237793464, 0.10248959443538586, 0.1342545715729777, 0.16147175465827368, 0.10364805289385715, 0.11925402809016128, 0.1101969461418455, 0.08552798943071871, 0.7635205967281682, 0.871997082510644, 0.9413740021449605, 0.8998826316901585, 0.9370627702978682, 0.9413965664878168, 0.9688862766394543, 0.8858591326328384, 0.955457382167406, 0.1939264839457442, 0.22266230052514424, 0.35996891523860164, 0.26181445223676847, 0.20361777425996885, 0.34260297631091163, 0.2546702295355707, 0.20425336821901396, 0.38088025662710134, 0.8297509097193929, 0.8128894457746949, 0.5815064183152875, 0.7605897763021063, 0.8413459090253004, 0.6600445846218826, 0.37655218978656946, 0.8098809355190146, 0.6490378486945227, 0.15568827318836198, 0.1348642057305226, 0.1893955876536102, 0.19740454634173776, 0.13445480195652293, 0.18787820295418722, 0.3502015119395665, 0.16184137376479835, 0.18172672910324295, 0.10043581715191108, 0.28110969425148324, 0.187140803662173, 0.2565947531499031, 0.21027228914061336, 0.20786453501337532, 0.15566819154218026, 0.20344336901309323, 0.27073795782963717, 0.09946022882658057, 0.5323881740431908, 0.29947661510934354, 0.09761265815472853, 0.2028642226282492, 0.25696695171990924, 0.11210094996550779, 0.2549297579952273, 0.23984051208135315, 0.16071628789824355, 0.2800059877792097, 0.37160705522000914, 0.3205459633382035, 0.17320609105800144, 0.35623143139372737, 0.2049339990997473, 0.227677793637718, 0.4381918116043215, 0.08247519556156935, 0.11841212978308979, 0.0994380252814302, 0.2357769301639, 0.12114043225061721, 0.1182544695278811, 0.26795176793652953, 0.25128068432191963, 0.0859429556338106, 0.18399870730897228, 0.39293606162180317, 0.22945578616195805, 0.375380122741939, 0.28886558298443266, 0.23704608585589848, 0.1118953848406602, 0.28097015484966315, 0.2327968057828822, 0.5741411562251069, 0.6078796243382882, 0.6078487870754321, 0.5449604317851683, 0.7507816150125274, 0.5982879121891092, 0.5270903674140796, 0.5956475700561232, 0.5824838209360796, 0.12778052746828272, 0.14111101874024756, 0.10000608241807785, 0.15715722879765004, 0.13387797854181427, 0.09924293782602778, 0.11657300827462236, 0.14205739654471305, 0.09093198616500453, 0.17923073454952287, 0.16359993740251233, 0.16060481111851854, 0.33573681636373054, 0.14139811916766265, 0.1372754550612244, 0.2948159905200355, 0.17834747318687827, 0.16234326007311362, 0.5354542480162376, 0.3982154342774342, 0.33843504959165116, 0.47240882482489077, 0.5080124063784728, 0.3220991148267327, 0.5540282067468423, 0.5881147412161865, 0.3411494992286461, 0.4387252417577885, 0.43445263324284356, 0.254387117798742, 0.4076101784668633, 0.39924687063190734, 0.24738337730170212, 0.303498667262177, 0.4508453298258466, 0.27217003778450466, 0.2005549032398508, 0.2029293972288908, 0.1850798754444284, 0.19899721828180683, 0.17931796331770078, 0.17853257943769463, 0.2076503171316867, 0.1960047783160349, 0.1949160294625608, 0.23151322653092843, 0.5753361375965498, 0.19171465709441382, 0.5842387248103178, 0.44783173427774114, 0.17964930490792175, 0.5191509213693534, 0.4921615812228114, 0.18588596848825567, 0.15131059161432092, 0.35179633443457936, 0.6885859709042568, 0.7028971406627906, 0.3651944647262815, 0.5957086287840363, 0.7778849067474878, 0.6180795553032119, 0.5309913765021737, 0.5220216137791177, 0.20488566727417212, 0.5657950644991916, 0.19742182117357876, 0.1596408586294158, 0.4476677856009673, 0.16393342567043878, 0.2035864882330215, 0.20869639196529555, 0.19681476863221958, 0.18285531238890274, 0.19637062051335374, 0.19218684545427567, 0.1831680045529842, 0.17597241862717006, 0.17822527274589106, 0.17465084370490913, 0.1589351175088335, 0.07861184429213974, 0.09139145757126277, 0.07585538466069686, 0.08834664635709122, 0.09015352346393901, 0.06712718977866827, 0.07707823357288113, 0.0779559816071671, 0.07283426372195934]}, "mutation_prompt": null}
{"id": "ef8fd400-005c-4e46-b9af-2817af12e8f6", "solution": "import numpy as np\n\nclass EnhancedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        def calculate_crowding_distance(fitness_values):\n            crowding_distance = np.zeros(self.pop_size)\n            sorted_indices = np.argsort(fitness_values)\n            crowding_distance[sorted_indices[[0, -1]]] = np.inf\n            norm_fitness = (fitness_values - np.min(fitness_values)) / (np.max(fitness_values) - np.min(fitness_values))\n            for i in range(1, self.pop_size - 1):\n                crowding_distance[sorted_indices[i]] += norm_fitness[sorted_indices[i+1]] - norm_fitness[sorted_indices[i-1]]\n            return crowding_distance\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            crowding_distance = calculate_crowding_distance(fitness_values)\n            \n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n\n        return best_solution", "name": "EnhancedDE", "description": "Enhancing population diversity by introducing a novel diversity maintenance mechanism based on crowding distance to prevent premature convergence.", "configspace": "", "generation": 26, "fitness": 0.3475094758857426, "feedback": "The algorithm EnhancedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {"aucs": [0.831148284950614, 0.83318019711314, 0.6607244044686424, 0.8495063464675087, 0.8519308515209606, 0.7026665281047638, 0.8426282524800252, 0.8303075448280007, 0.715378807462465, 0.697773604579557, 0.7467584022429838, 0.5273537816881422, 0.5015308189487535, 0.7298720064542665, 0.5153002978143013, 0.7015637355309743, 0.7399645433034743, 0.5369544376772666, 0.2580231436297492, 0.15297397601500307, 0.11124065917930426, 0.36443388801373255, 0.12239841815453345, 0.08430554893213904, 0.522936866944081, 0.1318803267771146, 0.10149922979671788, 0.12879032488630526, 0.14770483237793464, 0.10248959443538586, 0.1342545715729777, 0.16147175465827368, 0.10364805289385715, 0.11925402809016128, 0.1101969461418455, 0.08552798943071871, 0.7635205967281682, 0.871997082510644, 0.9413740021449605, 0.8998826316901585, 0.9370627702978682, 0.9413965664878168, 0.9688862766394543, 0.8858591326328384, 0.955457382167406, 0.1939264839457442, 0.22266230052514424, 0.35996891523860164, 0.26181445223676847, 0.20361777425996885, 0.34260297631091163, 0.2546702295355707, 0.20425336821901396, 0.38088025662710134, 0.8297509097193929, 0.8128894457746949, 0.5815064183152875, 0.7605897763021063, 0.8413459090253004, 0.6600445846218826, 0.37655218978656946, 0.8098809355190146, 0.6490378486945227, 0.15568827318836198, 0.1348642057305226, 0.1893955876536102, 0.19740454634173776, 0.13445480195652293, 0.18787820295418722, 0.3502015119395665, 0.16184137376479835, 0.18172672910324295, 0.10043581715191108, 0.28110969425148324, 0.187140803662173, 0.2565947531499031, 0.21027228914061336, 0.20786453501337532, 0.15566819154218026, 0.20344336901309323, 0.27073795782963717, 0.09946022882658057, 0.5323881740431908, 0.29947661510934354, 0.09761265815472853, 0.2028642226282492, 0.25696695171990924, 0.11210094996550779, 0.2549297579952273, 0.23984051208135315, 0.16071628789824355, 0.2800059877792097, 0.37160705522000914, 0.3205459633382035, 0.17320609105800144, 0.35623143139372737, 0.2049339990997473, 0.227677793637718, 0.4381918116043215, 0.08247519556156935, 0.11841212978308979, 0.0994380252814302, 0.2357769301639, 0.12114043225061721, 0.1182544695278811, 0.26795176793652953, 0.25128068432191963, 0.0859429556338106, 0.18399870730897228, 0.39293606162180317, 0.22945578616195805, 0.375380122741939, 0.28886558298443266, 0.23704608585589848, 0.1118953848406602, 0.28097015484966315, 0.2327968057828822, 0.5741411562251069, 0.6078796243382882, 0.6078487870754321, 0.5449604317851683, 0.7507816150125274, 0.5982879121891092, 0.5270903674140796, 0.5956475700561232, 0.5824838209360796, 0.12778052746828272, 0.14111101874024756, 0.10000608241807785, 0.15715722879765004, 0.13387797854181427, 0.09924293782602778, 0.11657300827462236, 0.14205739654471305, 0.09093198616500453, 0.17923073454952287, 0.16359993740251233, 0.16060481111851854, 0.33573681636373054, 0.14139811916766265, 0.1372754550612244, 0.2948159905200355, 0.17834747318687827, 0.16234326007311362, 0.5354542480162376, 0.3982154342774342, 0.33843504959165116, 0.47240882482489077, 0.5080124063784728, 0.3220991148267327, 0.5540282067468423, 0.5881147412161865, 0.3411494992286461, 0.4387252417577885, 0.43445263324284356, 0.254387117798742, 0.4076101784668633, 0.39924687063190734, 0.24738337730170212, 0.303498667262177, 0.4508453298258466, 0.27217003778450466, 0.2005549032398508, 0.2029293972288908, 0.1850798754444284, 0.19899721828180683, 0.17931796331770078, 0.17853257943769463, 0.2076503171316867, 0.1960047783160349, 0.1949160294625608, 0.23151322653092843, 0.5753361375965498, 0.19171465709441382, 0.5842387248103178, 0.44783173427774114, 0.17964930490792175, 0.5191509213693534, 0.4921615812228114, 0.18588596848825567, 0.15131059161432092, 0.35179633443457936, 0.6885859709042568, 0.7028971406627906, 0.3651944647262815, 0.5957086287840363, 0.7778849067474878, 0.6180795553032119, 0.5309913765021737, 0.5220216137791177, 0.20488566727417212, 0.5657950644991916, 0.19742182117357876, 0.1596408586294158, 0.4476677856009673, 0.16393342567043878, 0.2035864882330215, 0.20869639196529555, 0.19681476863221958, 0.18285531238890274, 0.19637062051335374, 0.19218684545427567, 0.1831680045529842, 0.17597241862717006, 0.17822527274589106, 0.17465084370490913, 0.1589351175088335, 0.07861184429213974, 0.09139145757126277, 0.07585538466069686, 0.08834664635709122, 0.09015352346393901, 0.06712718977866827, 0.07707823357288113, 0.0779559816071671, 0.07283426372195934]}, "mutation_prompt": null}
{"id": "827442bc-723a-43d7-9c15-105873d85fb8", "solution": "import numpy as np\n\nclass ImprovedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, Cr_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.Cr_adapt = Cr_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n        \n        def adapt_crossover_probability(Cr):\n            return np.clip(Cr + np.random.uniform(-self.Cr_adapt, self.Cr_adapt), 0.1, 0.9)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < adapt_crossover_probability(self.Cr)\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n\n        return best_solution", "name": "ImprovedAdaptiveDE", "description": "Enhance the mutation strategy by incorporating a dynamic adaptation of crossover probability to balance exploration and exploitation effectively.", "configspace": "", "generation": 27, "fitness": 0.32777823550968754, "feedback": "The algorithm ImprovedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.24.", "error": "", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {"aucs": [0.7165439545209628, 0.7852091771884862, 0.6936006012726621, 0.7438455248537157, 0.7935180937134545, 0.727877191591257, 0.7324416941019523, 0.8086473453886741, 0.7197227397465799, 0.5034181187440174, 0.6666141466021924, 0.5565178290912494, 0.5431184983693083, 0.6797387273452727, 0.532900891198312, 0.5266840937068635, 0.6609404471136009, 0.5391868833045966, 0.09216248135270177, 0.12284105577631521, 0.09815293366313649, 0.08854627491515787, 0.11561561843568902, 0.1077488773587093, 0.12292697338207059, 0.12117993519756987, 0.11113139813031869, 0.09658966615680564, 0.09536184781606627, 0.09831757603423541, 0.10040870771210286, 0.1012881133066943, 0.09019360154456135, 0.09433877830995752, 0.10863686766082514, 0.09681420466393842, 0.9572606087196653, 0.9679844313654865, 0.9556630757246087, 0.9426790298836967, 0.9204541747347942, 0.9577162834720616, 0.9580702988586981, 0.9464984009075394, 0.992151112181941, 0.3214402266961661, 0.4551328637034253, 0.3196362172306152, 0.3549130833696186, 0.4845160491032724, 0.3834410532436118, 0.3811324098634272, 0.37160658533433877, 0.3158236075518829, 0.6545416564008897, 0.7366007975200163, 0.5326775040192608, 0.6143319783098027, 0.7776081957061761, 0.5983424788426879, 0.695991655017635, 0.7506779519893407, 0.6347278019456344, 0.16783523825755386, 0.24472618673655278, 0.15832027074795663, 0.23249944481838225, 0.18375359274840475, 0.15870156384110468, 0.23886052547413972, 0.18920866788794732, 0.20506132439543145, 0.19980644974194184, 0.184873915852386, 0.28505239343438593, 0.21255360303962212, 0.4488389577134917, 0.1451981778824375, 0.24884763250775455, 0.22798861471761134, 0.14057819815860895, 0.18009969729446462, 0.4256317404248513, 0.26039377531659313, 0.18805102739164437, 0.33370335576535504, 0.15434326670970622, 0.1738904709648581, 0.3877554626909737, 0.19628207497254324, 0.3167141661782049, 0.4838447346813113, 0.35826731098830933, 0.2933680031388307, 0.5329543899969292, 0.38006633634630593, 0.3440831790185961, 0.5284682641136405, 0.31065985162402987, 0.07183246429947343, 0.12870882429344255, 0.0923311022659864, 0.055441019312131856, 0.241141265795482, 0.08964275713856185, 0.11005714294930369, 0.1471022042167024, 0.12663758518394175, 0.18695156047182204, 0.31373016577679336, 0.2101932284256347, 0.20421969334598278, 0.327453994287492, 0.24181368839106376, 0.22959659385853803, 0.308765525497277, 0.22932723458223514, 0.5488425963293466, 0.7045122511627705, 0.6009885442877687, 0.5400191560254937, 0.7136798646717485, 0.6204205000201695, 0.5668251623591213, 0.6603048895773322, 0.606897407962039, 0.08800251891200428, 0.09081302943420322, 0.11189082371781367, 0.08482616071492599, 0.0980446174093389, 0.08736636755711147, 0.08867294895672861, 0.12087682968949498, 0.09712730275588366, 0.16547151073924216, 0.16291048415976328, 0.1489762059982782, 0.17816981578582158, 0.21057172716863515, 0.19993818912694072, 0.1662717761521011, 0.17578416401419195, 0.1456863629569034, 0.3032055381080425, 0.42509073544622744, 0.3150039498012791, 0.3124355601586387, 0.39592298286075533, 0.33185234893675497, 0.3242542136786857, 0.46981293793179457, 0.37220525775408886, 0.2301040605177399, 0.28135615721043983, 0.2527799000056662, 0.2388097525667554, 0.3023701518214713, 0.24292792283959985, 0.2311453032431341, 0.38399256142974914, 0.27752008448364995, 0.1730878622124361, 0.18975125616160327, 0.18638904874674755, 0.207936655488286, 0.20459170808579596, 0.17071357475086513, 0.1800796204890155, 0.19787804524375596, 0.19453608912350528, 0.17475995082377904, 0.18112167938755186, 0.2067998387829283, 0.17779631933064066, 0.193741710986567, 0.1964557801780341, 0.198058205420929, 0.18462804203649152, 0.18352074122691786, 0.5423356377335657, 0.6565537456683044, 0.16168706011438938, 0.44302962113027977, 0.6397795127352414, 0.1753696284249685, 0.549562078031467, 0.19361973159079648, 0.5738015839856483, 0.5560317138894676, 0.3717493793145529, 0.16947131788053615, 0.1859195664991401, 0.1936350732502038, 0.5378190863680881, 0.19905863325134365, 0.201518414836798, 0.19947854101674545, 0.18828379627820724, 0.19622928899858139, 0.22164630733603674, 0.1877772776725094, 0.17910807990407318, 0.175289489515975, 0.18884545684150034, 0.17064931426601238, 0.17889667537035114, 0.072787219145517, 0.07141726510443114, 0.07560553641564771, 0.07135183660077404, 0.08513191704117129, 0.07034032411585844, 0.06777264558006935, 0.08027944092010786, 0.08111160171762477]}, "mutation_prompt": null}
{"id": "cb71bba7-2a62-4ec9-aad4-635a8accd931", "solution": "import numpy as np\n\nclass AdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F):\n            return np.clip(F + np.random.uniform(-self.F_adapt, self.F_adapt), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n            best_idx = np.argmin(fitness_values)\n            best_solution = population[best_idx]\n            self.F = adapt_mutation_factor(self.F)\n\n        return best_solution", "name": "AdaptiveDE", "description": "Integrate a novel adaptive mutation strategy based on self-adaptation of mutation factor F during the optimization process to enhance exploration and exploitation balance.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {"aucs": [0.831148284950614, 0.83318019711314, 0.6607244044686424, 0.8495063464675087, 0.8519308515209606, 0.7026665281047638, 0.8426282524800252, 0.8303075448280007, 0.715378807462465, 0.697773604579557, 0.7467584022429838, 0.5273537816881422, 0.5015308189487535, 0.7298720064542665, 0.5153002978143013, 0.7015637355309743, 0.7399645433034743, 0.5369544376772666, 0.2580231436297492, 0.15297397601500307, 0.11124065917930426, 0.36443388801373255, 0.12239841815453345, 0.08430554893213904, 0.522936866944081, 0.1318803267771146, 0.10149922979671788, 0.12879032488630526, 0.14770483237793464, 0.10248959443538586, 0.1342545715729777, 0.16147175465827368, 0.10364805289385715, 0.11925402809016128, 0.1101969461418455, 0.08552798943071871, 0.7635205967281682, 0.871997082510644, 0.9413740021449605, 0.8998826316901585, 0.9370627702978682, 0.9413965664878168, 0.9688862766394543, 0.8858591326328384, 0.955457382167406, 0.1939264839457442, 0.22266230052514424, 0.35996891523860164, 0.26181445223676847, 0.20361777425996885, 0.34260297631091163, 0.2546702295355707, 0.20425336821901396, 0.38088025662710134, 0.8297509097193929, 0.8128894457746949, 0.5815064183152875, 0.7605897763021063, 0.8413459090253004, 0.6600445846218826, 0.37655218978656946, 0.8098809355190146, 0.6490378486945227, 0.15568827318836198, 0.1348642057305226, 0.1893955876536102, 0.19740454634173776, 0.13445480195652293, 0.18787820295418722, 0.3502015119395665, 0.16184137376479835, 0.18172672910324295, 0.10043581715191108, 0.28110969425148324, 0.187140803662173, 0.2565947531499031, 0.21027228914061336, 0.20786453501337532, 0.15566819154218026, 0.20344336901309323, 0.27073795782963717, 0.09946022882658057, 0.5323881740431908, 0.29947661510934354, 0.09761265815472853, 0.2028642226282492, 0.25696695171990924, 0.11210094996550779, 0.2549297579952273, 0.23984051208135315, 0.16071628789824355, 0.2800059877792097, 0.37160705522000914, 0.3205459633382035, 0.17320609105800144, 0.35623143139372737, 0.2049339990997473, 0.227677793637718, 0.4381918116043215, 0.08247519556156935, 0.11841212978308979, 0.0994380252814302, 0.2357769301639, 0.12114043225061721, 0.1182544695278811, 0.26795176793652953, 0.25128068432191963, 0.0859429556338106, 0.18399870730897228, 0.39293606162180317, 0.22945578616195805, 0.375380122741939, 0.28886558298443266, 0.23704608585589848, 0.1118953848406602, 0.28097015484966315, 0.2327968057828822, 0.5741411562251069, 0.6078796243382882, 0.6078487870754321, 0.5449604317851683, 0.7507816150125274, 0.5982879121891092, 0.5270903674140796, 0.5956475700561232, 0.5824838209360796, 0.12778052746828272, 0.14111101874024756, 0.10000608241807785, 0.15715722879765004, 0.13387797854181427, 0.09924293782602778, 0.11657300827462236, 0.14205739654471305, 0.09093198616500453, 0.17923073454952287, 0.16359993740251233, 0.16060481111851854, 0.33573681636373054, 0.14139811916766265, 0.1372754550612244, 0.2948159905200355, 0.17834747318687827, 0.16234326007311362, 0.5354542480162376, 0.3982154342774342, 0.33843504959165116, 0.47240882482489077, 0.5080124063784728, 0.3220991148267327, 0.5540282067468423, 0.5881147412161865, 0.3411494992286461, 0.4387252417577885, 0.43445263324284356, 0.254387117798742, 0.4076101784668633, 0.39924687063190734, 0.24738337730170212, 0.303498667262177, 0.4508453298258466, 0.27217003778450466, 0.2005549032398508, 0.2029293972288908, 0.1850798754444284, 0.19899721828180683, 0.17931796331770078, 0.17853257943769463, 0.2076503171316867, 0.1960047783160349, 0.1949160294625608, 0.23151322653092843, 0.5753361375965498, 0.19171465709441382, 0.5842387248103178, 0.44783173427774114, 0.17964930490792175, 0.5191509213693534, 0.4921615812228114, 0.18588596848825567, 0.15131059161432092, 0.35179633443457936, 0.6885859709042568, 0.7028971406627906, 0.3651944647262815, 0.5957086287840363, 0.7778849067474878, 0.6180795553032119, 0.5309913765021737, 0.5220216137791177, 0.20488566727417212, 0.5657950644991916, 0.19742182117357876, 0.1596408586294158, 0.4476677856009673, 0.16393342567043878, 0.2035864882330215, 0.20869639196529555, 0.19681476863221958, 0.18285531238890274, 0.19637062051335374, 0.19218684545427567, 0.1831680045529842, 0.17597241862717006, 0.17822527274589106, 0.17465084370490913, 0.1589351175088335, 0.07861184429213974, 0.09139145757126277, 0.07585538466069686, 0.08834664635709122, 0.09015352346393901, 0.06712718977866827, 0.07707823357288113, 0.0779559816071671, 0.07283426372195934]}, "mutation_prompt": null}
{"id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 29, "fitness": 0.3846455405047629, "feedback": "The algorithm EnhancedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.25.", "error": "", "parent_id": "44491ab3-cd3c-41c1-a918-bc9e3944d48a", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "761b478b-c65d-4ade-a284-84c84c76166d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "a568f0ab-bbed-4db5-b991-165741ca68e8", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "925b38fc-d2b4-450f-9f59-68072ecc18e9", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "f97d2c2e-c82f-46f9-bdf0-8c6fb8057e95", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "98d768cc-a4c9-432d-a63b-186960013434", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "1692e3d9-b439-4c2c-9acd-98e70f21a85a", "solution": "import numpy as np\n\nclass CrowdedEnhancedAdaptiveDE(EnhancedAdaptiveDE):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05, crowding_rate=0.3):\n        super().__init__(budget, dim, Cr, F, pop_size, F_lb, F_ub, F_adapt, adapt_rate)\n        self.crowding_rate = crowding_rate\n\n    def __call__(self, func):\n        def crowding_selection(population, fitness_values):\n            sorted_indices = np.argsort(fitness_values)\n            num_crowd = int(self.pop_size * self.crowding_rate)\n            selected_indices = sorted_indices[:num_crowd]\n            return population[selected_indices]\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            crowded_population = crowding_selection(population, fitness_values)\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(crowded_population.shape[0], 3, replace=False)\n                mutant = clip_to_bounds(crowded_population[a] + self.F * (crowded_population[b] - crowded_population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "CrowdedEnhancedAdaptiveDE", "description": "Enhance the population diversity by incorporating a novel crowding-based selection mechanism to maintain a balance between exploration and exploitation.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'create_population' is not defined\").", "error": "NameError(\"name 'create_population' is not defined\")", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {}, "mutation_prompt": null}
{"id": "f7a2ea74-be79-4935-bc01-f305d3c9ad1e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "7f440c96-8d6b-4e85-8261-bd2282175d8c", "solution": "import numpy as np\n\nclass EnhancedImprovedADE(EnhancedAdaptiveDE):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05, adapt_range_multiplier=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size, F_lb, F_ub, F_adapt, adapt_rate)\n        self.adapt_range_multiplier = adapt_range_multiplier\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress, best_fitness):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate * np.abs(best_fitness)\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness, best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedImprovedADE", "description": "Improve adaptive mutation factor adjustment by incorporating a fitness-dependent dynamic adaptation range for better convergence.", "configspace": "", "generation": 37, "fitness": 0.3773668751089233, "feedback": "The algorithm EnhancedImprovedADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.38 with standard deviation 0.25.", "error": "", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.7824787116933762, 0.8145026493145395, 0.7725683538769862, 0.7876320790699809, 0.7808791386347506, 0.8209328982228534, 0.7754404490298512, 0.7712103696355272, 0.7903335674484756, 0.6108259952669939, 0.6474672870844682, 0.6447686168085184, 0.5984464243127741, 0.6528934772942685, 0.6534350639172912, 0.6184984856197215, 0.6369913655717938, 0.6620380158949852, 0.21614586960350413, 0.11969298073790813, 0.1437199430586994, 0.1269780765809283, 0.14452979944321565, 0.11964096914319522, 0.12379027947810861, 0.15340881830354725, 0.13199417578866834, 0.11223501691943472, 0.1283830237681035, 0.1253710507731357, 0.11168559686186275, 0.15831619433747657, 0.1203518434520946, 0.1145993376534099, 0.12212110941943943, 0.11327427776602705, 0.8995758557297369, 0.9337773221592863, 0.8587239954960977, 0.9674587105909366, 0.928236400803679, 0.915263790915803, 0.95346712877453, 0.9259094998552957, 0.924348125607091, 0.44101212537118517, 0.47583545949788464, 0.4476892256215689, 0.42657296694482405, 0.46674267183880147, 0.46299683316501605, 0.43095247919995683, 0.45178031598324775, 0.5106462373798318, 0.7860557370445921, 0.7336289814857708, 0.780773279877071, 0.7940613475055482, 0.33603375273583724, 0.7763663756859551, 0.7522736400739422, 0.7310785943150856, 0.7910699518397426, 0.29261982245844365, 0.1259355800559917, 0.28887336650989126, 0.12841508183301542, 0.1932555109556784, 0.5183761242089889, 0.25592350206305814, 0.46048155721327344, 0.2997186140674326, 0.2365458659963201, 0.1254379035613865, 0.2641721502440658, 0.24334467293979856, 0.4095596883396524, 0.38210100156883986, 0.3478270267097212, 0.24047171653059574, 0.21274584257599205, 0.386893522094801, 0.3883107336293927, 0.4074726335289882, 0.33145042110183554, 0.4218605392891055, 0.20728980057599877, 0.33233135332748287, 0.4804916871142314, 0.12122281481293318, 0.43350541769511985, 0.5313720849333237, 0.5371415466170029, 0.5194954088773197, 0.4607594826365451, 0.5119557990954504, 0.5847944861095635, 0.5831474687628994, 0.5562374595245029, 0.08872018577086949, 0.2542586487929822, 0.23100149570061945, 0.27228576370836144, 0.1425866055953655, 0.16070827864204928, 0.1170788673047457, 0.08831582351214329, 0.23512920555983197, 0.283306204727062, 0.32608215526823503, 0.313275542155781, 0.32778173409039946, 0.3222115096662296, 0.35874439113275625, 0.34142068860403174, 0.2985294867551691, 0.2577073978593786, 0.6883782818708915, 0.713984105411603, 0.7194076471893324, 0.6893086784301805, 0.6743767359505728, 0.7137256892133612, 0.6865774016861985, 0.6738169398693705, 0.7245885791203581, 0.10264858074362893, 0.12543317073835591, 0.12244804499307738, 0.12862240480643117, 0.12043539824607086, 0.13309340323019547, 0.11058776976067586, 0.11352851060309099, 0.10804235699023435, 0.1447865556447988, 0.21132530860203125, 0.1558817553777202, 0.3845778288668361, 0.15219800731858268, 0.19744783440439706, 0.20066056488654027, 0.16721054000087365, 0.1905630779318791, 0.4171987013917019, 0.4386926928057463, 0.44768713179035535, 0.40357639753287944, 0.39703737577206244, 0.47757211319235515, 0.4536084607918923, 0.45946293818793216, 0.4890106765542874, 0.31813619142068206, 0.3885320533182989, 0.36714077284131863, 0.3298248128926623, 0.37799266246189644, 0.33672845043792, 0.38975256489170185, 0.3681098117569812, 0.3196753389530864, 0.18559608289886353, 0.19577198147547215, 0.18736751875463242, 0.19336030971308904, 0.19560865962461038, 0.1986967320222911, 0.2040120430496336, 0.19065343961676062, 0.2169558442290499, 0.44389596146876165, 0.2750632442605433, 0.2193235397179174, 0.21250943390806365, 0.24423632039942533, 0.2317882108581798, 0.21820579361242076, 0.2012640022158909, 0.22867407340325785, 0.2022466248107212, 0.7333567025022221, 0.8173994860777047, 0.17457022537444988, 0.18974450190093717, 0.8358429330048756, 0.17971912254880973, 0.7788164783612004, 0.5812464463738274, 0.7396315310731387, 0.20233063785935024, 0.20008951390953844, 0.19494893118161327, 0.2073847079107325, 0.1617387499557994, 0.2049148927694494, 0.7302631851348556, 0.20771435818057982, 0.18830361510776583, 0.1709156073203114, 0.19159398066089273, 0.17090313302281268, 0.19133695703237208, 0.18791491297547602, 0.1944981661766927, 0.19600591107459053, 0.18757144238703616, 0.07953248920195188, 0.09660639022484097, 0.08642256487834543, 0.08686076100516438, 0.08441877501000705, 0.07906573981562648, 0.08606955755922518, 0.08095004505727044, 0.08334464628846383]}, "mutation_prompt": null}
{"id": "c513b77b-6bb6-4c71-9e51-49de4004c7e8", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "f43e018c-05e2-4455-a99b-e5a0232ffa92", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "4a9440a1-dfc6-44d7-b25e-1924f393c3cc", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "aef37c14-1d3a-4cff-badc-a5e008ff425e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "84068c18-e93a-4ac4-8145-81be24fd8667", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "428af464-ac48-46e0-afa5-99a2467e3d47", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "93a09a82-6f98-4baf-aefa-f8878b23e70b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "a0145fe9-bde9-4607-8d70-8db165a764ab", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "7a096c93-339b-4a58-beb1-9f225c87dd51", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "b161106a-a3bc-4756-8743-b5d55740c710", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "2e85a180-18d5-4e5c-8780-e530f72c212f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "c3857971-9f80-4696-ba1e-9df029e3af81", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "7fcc8497-a591-43e7-aee6-eb0d4a2f3081", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "33c6f7dd-75db-4a22-a763-a0fb743929cb", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "3375f34b-99cc-45d1-8c54-f1e3ea399ae5", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "221d91e6-e8e0-4948-8c7d-4b18615a7939", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "87d7f74f-d2ee-4293-a9da-c7fcc8d27f0e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "0548fe1e-ff16-47ce-ae09-29884e53671e", "solution": "import numpy as np\n\nclass EnhancedChaoticDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        def chaotic_map(x, a=1.4, b=2.3, c=1.7):\n            return np.mod(a * x * (1 - x), 1) + b * x + c\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * chaotic_map(population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedChaoticDE", "description": "Enhance the population diversity by introducing a novel mutation strategy based on chaotic maps to explore the search space more efficiently.", "configspace": "", "generation": 55, "fitness": 0.1306477377080276, "feedback": "The algorithm EnhancedChaoticDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.15.", "error": "", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.23614414137034945, 0.2757897842606949, 0.21588509093882968, 0.1830267348620096, 0.24858916861296798, 0.24411947963975078, 0.2846637244082846, 0.2559637185736565, 0.2767330166023283, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0647117470373243, 0.05504456627297749, 0.06309378818794209, 0.06870239378050935, 0.05470959961428401, 0.08223092645878405, 0.06844087106626773, 0.049762586272006804, 0.07691507909315642, 0.059402899575107915, 0.06602018222020523, 0.06946541214005497, 0.05820682239507591, 0.06379183070341865, 0.051360745934218355, 0.06480586859801929, 0.048634912933810504, 0.065597269008974, 0.9901280008772596, 0.9849469129774163, 0.9432408796456586, 0.2546356796308743, 0.7043926285367768, 0.9282423789077706, 0.2095041799433699, 0.19020263596921883, 0.9595963471206846, 0.15873388106793918, 0.10676630331531978, 0.12962397329105102, 0.14204794248839314, 0.11688946596251804, 0.11578471780130162, 0.07592325305649228, 0.08042155117578875, 0.08043822119805755, 0.1659164823256859, 0.1882366357330969, 0.18534340629684642, 0.16580779236028886, 0.18251647436343388, 0.16675869696579937, 0.14388011202757245, 0.14507129952470676, 0.12356895729936823, 0.010145827529697948, 0.06844292804751695, 0.057961701394177, 0.06338027216287834, 0.040546982012246935, 0.05135140373487235, 0.08399587452266732, 0.05836835977327304, 0.0955318850527288, 0.0667781904016228, 0.01931394777146689, 0.01653167213709328, 0.04692986010860967, 0.07559593598523384, 0.06117148135602679, 0.06372087050321007, 0.045187029734628736, 0.029693415409514423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017817094017965607, 0.018315393416757253, 0.0783752074952192, 0.03866425421909736, 0.025382565810719293, 0.062454945614710544, 0.03973568165612651, 0.024788237117493228, 0.04071630550295291, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012119193461324729, 0.010871478618267427, 0.0023170618871632964, 0.0070380754901889775, 0.015180724375332244, 0.005563580183986283, 0.0022761459236584347, 0.012672311674076453, 0.004090369032455632, 0.23405331969051846, 0.2244277283411904, 0.2339845200196764, 0.2192079366316041, 0.1991257631450556, 0.20558569321478615, 0.24797445755798253, 0.23089072348969308, 0.2711973341263074, 0.06558089813678947, 0.06449614723326735, 0.061099199275112315, 0.06310160388612873, 0.06304469926974221, 0.05349707977334206, 0.06896339923577655, 0.058608089154039256, 0.05717394184746083, 0.13459673003202277, 0.1483166769058194, 0.13421464517512682, 0.1781496990426854, 0.1337476026024046, 0.1849803757854418, 0.1475610479772098, 0.1342739730035819, 0.14147178119539183, 0.17776701622453672, 0.1909499738140249, 0.184948702420487, 0.17563159209821677, 0.17314174784076164, 0.1894469207984235, 0.17839191801369125, 0.18944889864807168, 0.18161465180976055, 0.12682906784158843, 0.12386921163713904, 0.12968759497048632, 0.13379002583573785, 0.14331609940925116, 0.12710611052596688, 0.1317424054493409, 0.12360704560907798, 0.1362392041053041, 0.17025782716811533, 0.1959728295762142, 0.1703141651719321, 0.1536531518338783, 0.15366131689467222, 0.1540931770198729, 0.1550634120774248, 0.17174319452106956, 0.18193161090665766, 0.1636569129119243, 0.17661172630476885, 0.1617520878702362, 0.153902574731146, 0.16280935818232078, 0.1552948289163012, 0.14915170575987524, 0.16570697230625753, 0.15706152283725128, 0.18005333974939353, 0.1613153578419002, 0.16072381321631268, 0.15645627740700752, 0.17459986267729743, 0.15973728912556784, 0.13327117872078886, 0.1595842051125772, 0.15021916135234403, 0.20353849813500113, 0.165512284874213, 0.13487890189879548, 0.15704110674509209, 0.13683836258540472, 0.12257147695371418, 0.1904359885117154, 0.18111511162017913, 0.2058497180778177, 0.17574691486568916, 0.18312673615301978, 0.1792654533149387, 0.1751331852854482, 0.18086369492948395, 0.1858065443745075, 0.19169594342237783, 0.18342186017766327, 0.1928874545559086, 0.05453606039594705, 0.0629273713982419, 0.05614672143043897, 0.05993948382445846, 0.06671452919434018, 0.05262824292424051, 0.06183145547161917, 0.05849192614612042, 0.0693567711157953]}, "mutation_prompt": null}
{"id": "4a5ed000-93d0-4f6c-a2c8-913d9870db83", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05, weight_lb=0.5, weight_ub=1.5, weight_adapt=0.2):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n        self.weight_lb = weight_lb\n        self.weight_ub = weight_ub\n        self.weight_adapt = weight_adapt\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def adapt_weight_factor(weight, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.weight_adapt\n            return np.clip(weight + np.random.uniform(-adapt_range, adapt_range), self.weight_lb, self.weight_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                weight = adapt_weight_factor(self.weight_adapt, (best_fitness - fitness_values[i]) / best_fitness)\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover] + weight * np.random.normal(size=self.dim)\n                trial = clip_to_bounds(trial)\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Improve the mutation strategy by incorporating a differential weight adjustment based on fitness progression to enhance diversity and exploration.", "configspace": "", "generation": 56, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (4,) (5,) ').", "error": "ValueError('operands could not be broadcast together with shapes (4,) (5,) ')", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {}, "mutation_prompt": null}
{"id": "62ec2229-a7f6-4a12-ad74-604f91720f97", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "bd260571-f172-4b84-8337-ddde1ddc94bd", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "9bba709a-01ef-423c-b1d9-37df171cb99e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[i]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveDE", "description": "Enhance the adaptive mutation factor update mechanism by incorporating a dynamic range adjustment based on fitness progression.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8170882034351445, 0.8161703770219535, 0.7962708289337113, 0.7952166047241276, 0.8187713287703122, 0.8176039154157997, 0.8235335004816208, 0.82707213443229, 0.8258665081385876, 0.6638596209657663, 0.6389991404426076, 0.6259283704379953, 0.6102539750814567, 0.6360838477858739, 0.6562329984061148, 0.6328720356095411, 0.62696959940884, 0.728636172653196, 0.11976013537192598, 0.11714294364009437, 0.12717527432720566, 0.11814726865263891, 0.10629725138975099, 0.12060576168612547, 0.1273656378119682, 0.12203384080221835, 0.12706764035127638, 0.10614085642396787, 0.1145881113094922, 0.14023676793122342, 0.10779100037875722, 0.11320576860146081, 0.11672986411634301, 0.10364105612178942, 0.11556948705797243, 0.13619026396826417, 0.9390241160241998, 0.8459883642498354, 0.8701630113103552, 0.8627839066192456, 0.8872026892434905, 0.8314688750108888, 0.888754863412409, 0.9739766788922318, 0.9444737149713753, 0.46809332108081825, 0.42295900196864356, 0.30456421883642937, 0.4199796815821988, 0.44399411228867103, 0.4758367974766765, 0.45018491073128575, 0.43240206530925074, 0.4113116072504055, 0.7953910515405412, 0.8099718457133755, 0.7470679111130544, 0.8060290875790506, 0.8128600018003146, 0.7194619376866036, 0.7678739311168207, 0.7911702059636653, 0.803332585411172, 0.1668034483407349, 0.3006870182267104, 0.23162544638135196, 0.2052145728176511, 0.43477069573456706, 0.12086067189314231, 0.41207463110629294, 0.24119476940861662, 0.372158763747922, 0.21199119211678508, 0.43850325353698105, 0.2668556860387342, 0.4217651314128671, 0.24339149735704635, 0.22126946383846935, 0.2470864630173215, 0.18040598024937804, 0.3581437801433661, 0.3588757341190111, 0.36269863720870354, 0.40105638787866327, 0.36848745321391396, 0.3753358147648119, 0.36638831746573575, 0.39216883595079555, 0.4728096242224107, 0.3991973925293517, 0.4896475224085187, 0.4886306696065722, 0.571165639090958, 0.41102499925484537, 0.5217232048147527, 0.5408462212763726, 0.5105588120778292, 0.5079327765304156, 0.5024582539969047, 0.06729442442986622, 0.08695892556759754, 0.21037273798332468, 0.27665133291331667, 0.1477987452324483, 0.21732539297330566, 0.16356094543344302, 0.21931362910104368, 0.22234401324961817, 0.31203465887975257, 0.33509197160117654, 0.32185353343296697, 0.33923152146978286, 0.31637178774687347, 0.3167372225636631, 0.2884864709807168, 0.3433869539739416, 0.3010737633418842, 0.7069351959029868, 0.7060438271577751, 0.7296949521270211, 0.6871925975956512, 0.7015964205978243, 0.7213114045773223, 0.7158118875151356, 0.7326730338100658, 0.7304977918200439, 0.10101528594164066, 0.10239109491953258, 0.09717295794734127, 0.10353712906607893, 0.09865186029167616, 0.10433240587082304, 0.09818864460248244, 0.09301300254122924, 0.11987756527804272, 0.17804773975332677, 0.17473813937140237, 0.1633580887395315, 0.17053729443098886, 0.16486241586665618, 0.13134706036188504, 0.1860296873952374, 0.137106028026029, 0.14739282164382672, 0.4263735747185572, 0.42259996754415574, 0.3914107022483492, 0.4298556018469373, 0.4412151219555047, 0.42887047369927744, 0.44717462738113345, 0.4428245967790204, 0.39921257879662475, 0.37534341746048017, 0.3043371035895426, 0.31553502667965183, 0.32209717506949964, 0.34555022800220225, 0.29422644527112485, 0.3609875198995076, 0.3579298457127257, 0.323592122992055, 0.19769794726364875, 0.20591757445188152, 0.2088843520449828, 0.1982025226074161, 0.1905364104567432, 0.21101430941509192, 0.2034316545408893, 0.1956177229628282, 0.2045804711491559, 0.18644754102239836, 0.36609693515657626, 0.19893479938587066, 0.25993629628005643, 0.19274932670558942, 0.2140255435151377, 0.18591037796408405, 0.19510697287864875, 0.2427991547153482, 0.15070615147180433, 0.7669438001424277, 0.8254943147048188, 0.764087562182318, 0.7922348481724946, 0.7222593696696346, 0.6475024377593623, 0.7142775312015683, 0.6140391666942122, 0.8073523429555718, 0.20938384266342103, 0.19375311712921783, 0.162099685497746, 0.19991971719280677, 0.6473025481265693, 0.20707828018890972, 0.6976466254803475, 0.2054836302157611, 0.18382635587038998, 0.19884434378610205, 0.1967482039252082, 0.183940675944951, 0.18474445691749297, 0.18418299258219528, 0.17814836895162256, 0.18477814274673132, 0.20131487484527355, 0.0825225379239255, 0.07803673499625641, 0.08452296173489615, 0.0848900765488968, 0.0869484201013071, 0.0770271400105601, 0.09015995183952241, 0.08310097553886231, 0.0766168090777053]}, "mutation_prompt": null}
{"id": "564c754c-c500-413b-b259-6740010f19aa", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 60, "fitness": 0.39101421784689117, "feedback": "The algorithm EnhancedCrowdedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.25.", "error": "", "parent_id": "357a5a45-ad50-4a7a-802f-172c6cc0c51f", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "dafb6f6b-6e06-4e48-a559-7b8429026200", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "dd592fac-d121-4eec-9ee2-0cf1895e5004", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "753edc05-8aac-40e2-a972-801f1c5333e2", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "c7a38baa-d54b-4665-bc22-043693b64eca", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass ImprovedCrowdedDE(EnhancedCrowdedDE):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05, mutation_prob=0.5):\n        super().__init__(budget, dim, Cr, F, pop_size, F_lb, F_ub, F_adapt, adapt_rate)\n        self.mutation_prob = mutation_prob\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n                self.Cr = np.random.rand() if np.random.rand() < self.mutation_prob else self.Cr\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "ImprovedCrowdedDE", "description": "Improve mutation strategy in EnhancedCrowdedDE by adding a parameter to control the mutation probability.", "configspace": "", "generation": 64, "fitness": 0.2710787589804615, "feedback": "The algorithm ImprovedCrowdedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.7521956781579033, 0.7426737107907802, 0.7249845285520982, 0.7321432960606117, 0.7408830019403794, 0.7697079960250879, 0.7483738812811389, 0.7392084283350897, 0.7400042913889762, 0.5418330243251468, 0.5636507687826213, 0.5440522543250859, 0.49996583155147534, 0.5257248832103812, 0.5289282676457114, 0.5307296973761536, 0.5310098097953933, 0.5282919234227866, 0.19485377750949606, 0.20591595479816216, 0.1762127501109373, 0.17862753416804866, 0.25274787689739053, 0.13695770113185335, 0.18568078606182647, 0.14122486089686337, 0.136244183794208, 0.15348542322338943, 0.15579191100862666, 0.1468357306516842, 0.15689297173201033, 0.14759237842061534, 0.14002254998490793, 0.14859176709009336, 0.13864102912645726, 0.20533022336858164, 0.9668233306149656, 0.929222536169765, 0.9497339279206851, 0.9734048593949495, 0.9210336314275624, 0.9387073365047772, 0.9363717701162646, 0.8955239174146115, 0.9692652015841405, 0.2934314608656885, 0.3058259086518712, 0.291098734098858, 0.2673645855558574, 0.3033108241352155, 0.2853339219752111, 0.2620750227353258, 0.276012286508176, 0.30899433083304284, 0.4462777180993561, 0.5505743284112883, 0.465005740954345, 0.44258088005170226, 0.6959285890868057, 0.20068216687345852, 0.5551141524594763, 0.284754942102349, 0.530576998882337, 0.16829192038495788, 0.18263862269994557, 0.19736489346104713, 0.1678895545485639, 0.19487822416164258, 0.15561556156907896, 0.18505859910125, 0.1714203479187758, 0.16455898760160692, 0.138768457177892, 0.11376005393927258, 0.16934549050756365, 0.14518952741580282, 0.14367812084027642, 0.24264999260283215, 0.1585241059422111, 0.1377743913677104, 0.1177896503838407, 0.04430740851411996, 0.04215156544263665, 0.03385102232601256, 0.04190565852577888, 0.014010335276538943, 0.0579678261233908, 0.040843838766757457, 0.054315488794708155, 0.055694549735883614, 0.17182568510227214, 0.12719274019885962, 0.14605762715334458, 0.15422660850145586, 0.11826784594789119, 0.15325486404632627, 0.1897885063124567, 0.12906771428892239, 0.18687777564238006, 0.019172672019382886, 0.018427910279428805, 0.01955632910628624, 0.01153297008917109, 0.030981443545851306, 0.03609300569929497, 0.046317950545793574, 0.01761620058927016, 0.030584503061621193, 0.1309929523692226, 0.1147934950281071, 0.13070895356903944, 0.13560463405887513, 0.14161255795997674, 0.14846758978844388, 0.1357542250517586, 0.13377086499300095, 0.13338394174967239, 0.492457381309346, 0.5048145442749933, 0.510263202113362, 0.4971893238800146, 0.505538635590076, 0.5161326558798687, 0.5015906725124792, 0.49413712344116933, 0.4933635915159479, 0.09423452958873735, 0.10206068545399938, 0.08183006804410142, 0.09225865857225768, 0.08491224960352306, 0.08758765756286835, 0.10005084808543485, 0.10605965091564085, 0.09193288541610367, 0.1472813479238575, 0.14700383223458446, 0.14622743051810883, 0.13766371797231225, 0.15691779861038324, 0.15178589484489025, 0.14753401455212056, 0.14137038078696418, 0.14526630028176846, 0.31392984352034403, 0.3081741196054427, 0.29748645522820283, 0.28918203148673305, 0.30487823258063573, 0.31444171621416994, 0.3082458641699618, 0.35081390965672843, 0.3484168661309782, 0.2108238029226942, 0.19292999091728924, 0.2071492741355221, 0.20148053110466835, 0.21116006117231167, 0.20178504321489532, 0.2349508987056086, 0.24255541241293033, 0.23262880631145988, 0.2004219982469304, 0.20868305976430912, 0.17993121934294964, 0.19266106317604204, 0.17450259554448622, 0.18018607221579241, 0.19497411181809388, 0.1881509866209341, 0.2029265953451399, 0.1934982083015675, 0.23704793364217625, 0.1958042301114571, 0.20676005241987927, 0.1908574361324803, 0.19407593330933148, 0.2137479686466901, 0.19570264948691452, 0.2010898798430223, 0.1764713996056616, 0.5140153641442748, 0.17613154814568277, 0.4291263193982495, 0.4713467775414675, 0.18791861910017993, 0.4291340072252432, 0.18996434521072092, 0.20030262857735648, 0.27483107772747817, 0.2509922959326334, 0.18419116671350955, 0.17506905171849652, 0.24386797371049374, 0.35160066318096084, 0.22704157776289513, 0.2906686474681456, 0.4811395729031398, 0.2483766803356786, 0.17179233289676654, 0.1945129175096979, 0.18095760690959029, 0.18194168916449793, 0.1808918722733135, 0.17332611397455877, 0.16703413647315501, 0.20043592096807028, 0.07390743026123892, 0.073296154017086, 0.08747745668858165, 0.0799994546626025, 0.08534881804520045, 0.07923740448100602, 0.07332395860282415, 0.08410266063448801, 0.08050081267278997]}, "mutation_prompt": null}
{"id": "d003f66e-ab27-423e-b475-865ac47059f6", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "8dbf55be-e0e4-45c2-baf9-7b6c3137b9c4", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE_VNS(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                \n                # Variable Neighborhood Search\n                mutation_operator = np.random.choice(['current-to-best/1', 'rand/2', 'rand/1'], p=[0.3, 0.4, 0.3])\n                if mutation_operator == 'current-to-best/1':\n                    mutant = clip_to_bounds(population[i] + self.F * (population[a] - population[i]) + self.F * (population[b] - population[c]))\n                elif mutation_operator == 'rand/2':\n                    d = np.random.choice([self.F, np.random.uniform(self.F_lb, self.F_ub)])\n                    e = np.random.choice([self.F, np.random.uniform(self.F_lb, self.F_ub)])\n                    mutant = clip_to_bounds(population[a] + d * (population[b] - population[c]) + e * (population[i] - population[a]))\n                else:  # 'rand/1'\n                    mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]) + self.F * (population[a] - population[i]))\n\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE_VNS", "description": "Enhance the mutation strategy by incorporating a variable neighborhood search to explore different mutation operators based on the population diversity.", "configspace": "", "generation": 66, "fitness": 0.3577735585279607, "feedback": "The algorithm EnhancedCrowdedDE_VNS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.7773449885166419, 0.8027355215743741, 0.7899094255067438, 0.8063338950969507, 0.8055462118402652, 0.7990921681189385, 0.8046365999358555, 0.7937570375880422, 0.7962779147437895, 0.631465849563667, 0.6416909449879501, 0.6195018719759101, 0.6215332129670722, 0.631477614253177, 0.6532798141788437, 0.6457036148396027, 0.6184633565961016, 0.6340280620547544, 0.10710526562804212, 0.11558595316491571, 0.11373140897590162, 0.1090609753854147, 0.11750442471108113, 0.11136506367490906, 0.12519569354085502, 0.09966123828965245, 0.1118942089102064, 0.09001807517109228, 0.09298404984118802, 0.0857486804401969, 0.0933159540152737, 0.0985070195701574, 0.09292352174492335, 0.08762167978066904, 0.0945847048191204, 0.09255815651642585, 0.8588012469618429, 0.8914726144108677, 0.9134101170438936, 0.9354335747993164, 0.9883993899111967, 0.9541110027280233, 0.929161393031517, 0.9289660011929712, 0.98757372145976, 0.40317233776147654, 0.3861990135120721, 0.36186537888500436, 0.35670533130300397, 0.39825259172678407, 0.42155243726427694, 0.3887082522724745, 0.3831430262115999, 0.36643774181809174, 0.7349215248153111, 0.7875470760218283, 0.7661810649780496, 0.7890732164307628, 0.7935209912907792, 0.7673003369689805, 0.7426790780512288, 0.7994036211526385, 0.7474154944023343, 0.20564102886824664, 0.2588491029076554, 0.19884316535340085, 0.20659016767641614, 0.19276436461570312, 0.1707789420442548, 0.26154259199503227, 0.29900352227737537, 0.21579122736653278, 0.14393668331430576, 0.1961891728409042, 0.21157571080516846, 0.16112215922352024, 0.2600445289915545, 0.14593704804154672, 0.1864884694279787, 0.21262616131935497, 0.24927379103157488, 0.4617471022943427, 0.44136196191837473, 0.4687544261697594, 0.3996837995914251, 0.41512489922795703, 0.4537583461516044, 0.4826551850103076, 0.40796561514658813, 0.41071263908967015, 0.5549044628478519, 0.5526874557847566, 0.5885202173249835, 0.5548031247669303, 0.5400649127024071, 0.5346046040340251, 0.5907679031759783, 0.5831560875541807, 0.6206076670073859, 0.11938635427320243, 0.08888916426959281, 0.1855049070970647, 0.25665714359042124, 0.2924488145379618, 0.31545330283232687, 0.19546449217933282, 0.15276036796762216, 0.20428254196144302, 0.3534795626965044, 0.3290390669515084, 0.32051098513405196, 0.3943082621873537, 0.3419382782586273, 0.36022974450352396, 0.3415696166356915, 0.34065446499978247, 0.3947141210355041, 0.7141635816876012, 0.7167209037589246, 0.7265679326940759, 0.7147830278400507, 0.7235487623225734, 0.6885804102451416, 0.7016273782223021, 0.7207719160094808, 0.6954241618581857, 0.11657271376155298, 0.0984225446812741, 0.0956294859173813, 0.0992782467468678, 0.09907006544312447, 0.0883381309138127, 0.0925291825563378, 0.11352509908765296, 0.10453870805785137, 0.14414950086245593, 0.13812033573648408, 0.1478020087689047, 0.1305757177283896, 0.15685585556208026, 0.18392017920909431, 0.13628491268949672, 0.15368634111916313, 0.17070269341971467, 0.36221542767060433, 0.3842816196106137, 0.38652190641531714, 0.4074080556616786, 0.3942738263573614, 0.4056768370491455, 0.39954367579609895, 0.40309686305008685, 0.40958249638168287, 0.30202482815136633, 0.29799191501277145, 0.27474856295120387, 0.2995234286609282, 0.28747937485137687, 0.2972228092256223, 0.28514875130436246, 0.32682220981593013, 0.2984848309748671, 0.2030477828396583, 0.2086834840259819, 0.18846723230022877, 0.20370310936277658, 0.21591660087252507, 0.1909326527353956, 0.2232153419286229, 0.2145383017887318, 0.20399665993746008, 0.19103312487863522, 0.18357505645531735, 0.17765545839276142, 0.1923261187313302, 0.17822765546422958, 0.1759784071527185, 0.1819855406996722, 0.17968814957829726, 0.1872737316326184, 0.167480030286568, 0.17956817817312165, 0.28873039305359494, 0.6660590559219951, 0.19064419811490363, 0.2629323381182951, 0.34405631048980545, 0.37958118568798305, 0.44141649850995524, 0.3013491038438555, 0.30569425664648064, 0.1713280452022251, 0.3024214138490402, 0.19799707388432142, 0.22002819423606856, 0.20661965498843815, 0.19959038754030123, 0.25443588862619293, 0.1867133966282254, 0.20738883450613754, 0.19814989729461596, 0.18656526768519233, 0.19171208778841442, 0.20364597925151684, 0.1936209164319741, 0.20140723080644385, 0.18372676475726069, 0.07621923150668264, 0.08148224317536301, 0.07652466347305653, 0.08743280562038691, 0.08831294178826266, 0.07953285582361547, 0.081345197026224, 0.08041218925199867, 0.08076111349767057]}, "mutation_prompt": null}
{"id": "2b1aa55a-9031-4e97-a233-03f96a50e36d", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "3726fdd7-989b-49b5-9a7d-58152640096b", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "bd8945b0-c9a9-4348-abfe-f80157cba252", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "e9dfd37b-d792-4ca5-a1e8-afe399e43047", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "8c1de984-4dac-42c0-8e0d-0a441c754002", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass LevyCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05, levy_scale=1.0):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n        self.levy_scale = levy_scale\n\n    def __call__(self, func):\n        def levy_flight():\n            # Levy flight generation\n            sigma = (gamma(1 + self.levy_scale) * np.sin(np.pi * self.levy_scale / 2) / (gamma((1 + self.levy_scale) / 2) * self.levy_scale * 2 ** ((self.levy_scale - 1) / 2))) ** (1 / self.levy_scale)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            levy = u / np.abs(v) ** (1 / self.levy_scale)\n            return levy\n\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                levy = levy_flight()\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c])) + levy\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "LevyCrowdedDE", "description": "Introducing a mutation strategy based on Levy flights to enhance exploration capability while maintaining diversity in the population.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gamma' is not defined\").", "error": "NameError(\"name 'gamma' is not defined\")", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {}, "mutation_prompt": null}
{"id": "42e90996-3b9a-4dea-88eb-900bd6d35b0d", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05, p=0.1):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n        self.p = p\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                r = np.random.random(self.dim)\n                mask = r < self.p\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]) + np.random.uniform(-1, 1, self.dim) * mask)\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Improve diversity maintenance by introducing a new mutation strategy based on a differential evolution approach.", "configspace": "", "generation": 72, "fitness": 0.32268418280572925, "feedback": "The algorithm EnhancedCrowdedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.23.", "error": "", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.7041965854659655, 0.7203103060586653, 0.7255583887456489, 0.7565287328666259, 0.7248567941651384, 0.7464513973110981, 0.7188281052513792, 0.735349980790549, 0.7436813384134959, 0.4886667914862556, 0.46302028735821854, 0.5108000039702022, 0.5147989422686443, 0.48231637956551643, 0.5377174326958423, 0.4463422302831289, 0.5012696412785069, 0.5329242985201621, 0.10848103964483746, 0.13128110017928196, 0.12116668092987726, 0.10231171986375032, 0.11048070627370943, 0.11266826057147628, 0.11439579767244801, 0.11177104813814365, 0.10834363064374408, 0.10242203668456784, 0.10970093340391052, 0.11467236619193844, 0.09653630238645183, 0.09593580826231285, 0.11375637281980522, 0.0941455571659855, 0.09688805985750859, 0.11398559595585389, 0.9107033282798793, 0.9185340318070008, 0.9173347734749194, 0.938044625554741, 0.9549634047591561, 0.937548909206228, 0.9587293897043534, 0.9344818790178296, 0.9199136747031268, 0.3442365999153254, 0.3402433538091877, 0.3537139696766264, 0.33520092089254305, 0.36431026616573836, 0.3484300651196345, 0.3356827940358371, 0.3684497701235958, 0.3721507773427589, 0.7489420493299496, 0.6732436852891526, 0.6765208037603563, 0.7667540849937406, 0.7317378916083646, 0.7685917301010177, 0.6975097523891132, 0.736519918545598, 0.7234089770262697, 0.2150169557441275, 0.19606909686877283, 0.21296870781010224, 0.1835661530578182, 0.2010590738289817, 0.2624422362059887, 0.2849501236253654, 0.17373034775555152, 0.19369135100409818, 0.22342319280116452, 0.20503548852177356, 0.24208139253978678, 0.18100670295362897, 0.23634294040275394, 0.22026162097683144, 0.24772773237595247, 0.26896652249973185, 0.2888723335242994, 0.10818919373852243, 0.20014884785150977, 0.191574835316056, 0.14994007714118052, 0.22359722511677194, 0.1625314642370529, 0.2342591452867293, 0.2015601432729095, 0.19099244248107694, 0.36457993079112805, 0.35089767485578627, 0.38279241214573656, 0.31146533842337143, 0.27953350934360854, 0.3637139279897106, 0.3894318999498606, 0.3327453529345282, 0.39289090504321467, 0.10364637207586769, 0.08898436973218682, 0.04817180062717541, 0.11776392880047737, 0.1390015279508645, 0.17880314775392347, 0.13697634017771465, 0.08093098049413894, 0.14232896419550578, 0.19425419928810495, 0.21687374315770203, 0.23771152646368765, 0.21198257134372578, 0.18793013184031238, 0.253408569768683, 0.22311270152183615, 0.1920269472872569, 0.20254828955737003, 0.5397919095717525, 0.5523634617005415, 0.5860799114008035, 0.5636120659195707, 0.5494822570851368, 0.595160345739175, 0.5520758729981569, 0.6066131524094929, 0.5958959070900735, 0.10602437886596927, 0.09626479878124483, 0.10961937815378564, 0.09261117370195338, 0.09304272607191089, 0.144434429131151, 0.08437316109988968, 0.09746188950119083, 0.09634660601403444, 0.14642103385492977, 0.19104673350452295, 0.17180251823856907, 0.13383614006576905, 0.12146678189940463, 0.1570427296827096, 0.15898721317668973, 0.142233232979612, 0.1641256036602433, 0.3301523054582465, 0.31885089512947673, 0.35521741257528106, 0.3187539088343059, 0.31953689512357586, 0.37405882309850413, 0.357135686244624, 0.3579802152895186, 0.3657972422459125, 0.2530168686467831, 0.2829857852302814, 0.2830409413323166, 0.2618971444220527, 0.24029040049191142, 0.25502852053595926, 0.2938591723395739, 0.2878358742471636, 0.3074957349621015, 0.17809475048425571, 0.206931659105835, 0.20700290620431305, 0.19212238717112262, 0.18485074859087625, 0.18214002652410077, 0.21468012844715356, 0.18533107931602621, 0.19414624071528142, 0.19381730072889658, 0.18673514466454433, 0.21368356014416023, 0.1940052282820599, 0.191141106750492, 0.2023181860801716, 0.18934428996345787, 0.20836664480310407, 0.22842367723406776, 0.650437797322676, 0.20894945922706143, 0.8089229320265787, 0.1732683787389525, 0.7371300769907968, 0.6654352556820307, 0.6993854816887173, 0.5973786267579764, 0.6732016193455472, 0.20573829543902855, 0.20075447739027596, 0.20042715277800072, 0.20318996677710155, 0.19142756485776502, 0.6187355204240312, 0.2086394427631938, 0.5466232205328865, 0.20409029817985025, 0.17246799097299514, 0.17789591044808695, 0.19679404088282215, 0.19388156855731842, 0.1955737120657962, 0.19982545660631879, 0.18593059066914974, 0.1998924782426389, 0.1883600258811704, 0.08300245101776837, 0.08737644027066327, 0.0832398271765018, 0.07475497932967246, 0.07704905416997876, 0.07264105022709644, 0.08290869451595062, 0.0840350873224166, 0.0731597668181968]}, "mutation_prompt": null}
{"id": "a01c7877-15e5-4459-9e26-fa829c3b6cf0", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "13d67ef9-7a48-4f7b-a191-64e6ff42eaef", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "ea8b4fe2-7daf-4fcb-a549-59ab4e34a56f", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "1a15d514-401c-4f3a-8639-c77e936e1e16", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "9b531cdb-2689-4bf0-9e8f-74fa7d60db15", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "42fc7d8c-9dab-4b9d-b8cb-338f56a4e8bb", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05, tournament_size=3):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n        self.tournament_size = tournament_size\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                tournament_indices = np.random.choice(self.pop_size, self.tournament_size, replace=False)\n                winner_idx = tournament_indices[np.argmin(fitness_values[tournament_indices])]\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[winner_idx].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[winner_idx]:\n                    population[winner_idx] = trial\n                    fitness_values[winner_idx] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the selection mechanism by incorporating a tournament selection process based on fitness values.", "configspace": "", "generation": 78, "fitness": 0.2410502692795453, "feedback": "The algorithm EnhancedCrowdedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.5269378205984623, 0.47611606466660783, 0.4964450666157846, 0.5447401494497663, 0.49092814138708973, 0.5417983709630292, 0.5180449041342243, 0.5213147998405563, 0.5312404799706076, 0.2719137192820511, 0.18328298779143215, 0.2218662459384959, 0.23497183163806812, 0.2148951512202515, 0.23137366745960852, 0.209073215676582, 0.20995365137859046, 0.23859589293627936, 0.09761863261879422, 0.10314139421363033, 0.10358959495070608, 0.1011101649043028, 0.09317135984691538, 0.11051895764488984, 0.0975654546057303, 0.10729420800828993, 0.1262456723719373, 0.08418783426228671, 0.0823105152418393, 0.10748800974789774, 0.09640933439706734, 0.10108730415113698, 0.09941806497507133, 0.09721390131123353, 0.09321585622724438, 0.09100493581729208, 0.9575339102061663, 0.950470091086031, 0.9702615086145118, 0.952103161166273, 0.9663814186606463, 0.9659243760667816, 0.975031490583926, 0.9535662670822861, 0.9705188445095485, 0.2487056065685871, 0.22500916681263994, 0.23273449954926595, 0.26766202750045465, 0.2571071030385077, 0.2826138315857504, 0.28226659693923006, 0.27975549327381755, 0.2823766819404504, 0.5479455552943309, 0.3284879574605857, 0.4426437820402416, 0.20631210674199796, 0.53655778276477, 0.5151681327566923, 0.5771579004197154, 0.5490654744836813, 0.6165676316327711, 0.1471990849850343, 0.1491732036203237, 0.13713814420963955, 0.14985925240537312, 0.20072646289935292, 0.11365267068090257, 0.21804932840071045, 0.1447563184718541, 0.1701394952954326, 0.1178369590273396, 0.13641062049683483, 0.14952715291823315, 0.1690654503344402, 0.1904320787131829, 0.1505591365227743, 0.1590313509068354, 0.17388223270730763, 0.1670871984299902, 0.04963950356487601, 0.10357737207532247, 0.04367421173143082, 0.07924091634069885, 0.05875121218068258, 0.11963086654307042, 0.04210043704069344, 0.06795024197516364, 0.05124864559886044, 0.2111938499057584, 0.18080968967806843, 0.1670536659475481, 0.17054384221036367, 0.12901627189764442, 0.16343982247367983, 0.19198999810697426, 0.19205569546501133, 0.20197928797705045, 0.0078781756756513, 0.02387425132341847, 0.019360529346309496, 0.03566308636177329, 0.0774343366522302, 0.03677697732260554, 0.04366219379143421, 0.036589274913185865, 0.07911771124653644, 0.10528962336939662, 0.12897731088776254, 0.1388257784138106, 0.12248928879714893, 0.08714300154342292, 0.14367256537165396, 0.1127816486287716, 0.10837536930758052, 0.11817502970772598, 0.42063527701441406, 0.41937748817938003, 0.44286651091805185, 0.43389208717035055, 0.43183374447834144, 0.3962994902632089, 0.41010836374089454, 0.38954758450363614, 0.4175098593284594, 0.09423851798910343, 0.0768135366088456, 0.08995358510846796, 0.09448586337106457, 0.09051724804214423, 0.10019339445630815, 0.09151529493945598, 0.08817330863352413, 0.10257961076909361, 0.14537049290106518, 0.13631804875317888, 0.14356772432110776, 0.13236454229043904, 0.1537065447904914, 0.13725565462398248, 0.14885105291165313, 0.1691215266919941, 0.17305962149006715, 0.26470779402008826, 0.2629776611168234, 0.28391995999276964, 0.2847967796502312, 0.270212671597294, 0.2767344963512912, 0.2825267189632026, 0.27033683081233073, 0.30621391616973004, 0.1874817518018187, 0.2100328353742611, 0.22294987420229473, 0.20024259576144954, 0.2312782556389691, 0.21246810890467605, 0.21713730960408306, 0.21180291812686824, 0.22561294825085187, 0.18544430772180542, 0.2221983995704544, 0.18909295284740013, 0.17048759670507296, 0.17303164812510985, 0.22263298160403378, 0.1864843001538916, 0.1763526974896784, 0.195869145672258, 0.19233853179848093, 0.2063587129097083, 0.2298633677175559, 0.18557386409448096, 0.21095773330289924, 0.21700099806753081, 0.1879462809898661, 0.18948099462133128, 0.18491750845080757, 0.40372171139134794, 0.2934137862395081, 0.5415630776612305, 0.18052638597361492, 0.3290751988954035, 0.16892753822157702, 0.5306882012810751, 0.35923543516573886, 0.18252791938212853, 0.4503404644324174, 0.2420962883857093, 0.28458122548845133, 0.18009678639586857, 0.5194804877834408, 0.37538629105512344, 0.20953069363448806, 0.20414188294802915, 0.20174841297452806, 0.1946034472307543, 0.1823708601710391, 0.18027079347762498, 0.17627383696694143, 0.17450043683934524, 0.17301225269312048, 0.19904511106819567, 0.17482026485321034, 0.18695577252887108, 0.0656480161545907, 0.06607273074936548, 0.07093871813411701, 0.07223147224921889, 0.06799408436579124, 0.06340509406030448, 0.0662151013873239, 0.06458161951695607, 0.06269576273291766]}, "mutation_prompt": null}
{"id": "727b5794-e45d-4888-83ed-7f3d5756cebf", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "4448fb48-e96c-4211-91ae-a1e66a81d561", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "01e8efcd-776e-4451-ba41-da9626169503", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "dba43ffe-7b01-4e31-85ab-e6d5b62b0ff3", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass DynamicCrossoverDE(EnhancedCrowdedDE):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05, Cr_adapt=0.1, Cr_lb=0.1, Cr_ub=0.9):\n        super().__init__(budget, dim, Cr, F, pop_size, F_lb, F_ub, F_adapt, adapt_rate)\n        self.Cr_adapt = Cr_adapt\n        self.Cr_lb = Cr_lb\n        self.Cr_ub = Cr_ub\n\n    def __call__(self, func):\n        def adapt_crossover_rate(Cr, diversity_progress):\n            adapt_range = (diversity_progress - 1) * self.Cr_adapt\n            return np.clip(Cr + np.random.uniform(-adapt_range, adapt_range), self.Cr_lb, self.Cr_ub)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n                self.Cr = adapt_crossover_rate(self.Cr, np.std(population))\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "DynamicCrossoverDE", "description": "Improve convergence speed by dynamically adapting the crossover rate during the optimization process based on the population diversity.", "configspace": "", "generation": 82, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'create_population' is not defined\").", "error": "NameError(\"name 'create_population' is not defined\")", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {}, "mutation_prompt": null}
{"id": "a7d6c9ac-9b66-488d-b7eb-8daea3a95d88", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "4ced1fdf-0a96-4c4d-9d82-6b364fac2e5d", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "65c31eea-0bd3-4d44-9cbf-3de2e50db61d", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "9d50eb41-a0c9-4046-96bd-de28db2bbef4", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "21590c5b-0541-4152-b99e-3609ebfa290c", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "5b506a49-63dd-4ba2-8d84-cf395ab15d67", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "ceefe8b4-2c72-4a61-b032-fe8f0d89b863", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "c35c8927-ad6a-4d2d-bdec-58fd12608a3a", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "daf7ad56-fd60-4263-abe5-72ffc55fb2c0", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "cff665a5-5cca-4ec9-a7d5-4e75de4aed9e", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "e363600c-7e3c-40ba-8099-fe083d6e0426", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "f7163c4f-5a9d-43a2-bf20-1a47b0f8c9c0", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedDynamicCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05, adapt_window=0.2):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n        self.adapt_window = adapt_window\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress, window):\n            adapt_range = window * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness, self.adapt_window)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution\n", "name": "EnhancedDynamicCrowdedDE", "description": "Improve adaptability of mutation factor by incorporating a dynamic adaptation based on the fitness progress.", "configspace": "", "generation": 94, "fitness": 0.35126191596448575, "feedback": "The algorithm EnhancedDynamicCrowdedDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.24.", "error": "", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.7551491969381957, 0.7524897960517086, 0.7687681686173016, 0.7669700692176472, 0.773645567996227, 0.7991583138481329, 0.7685993156258215, 0.7570697165319287, 0.7754182220733035, 0.5917586692480039, 0.5521550426977891, 0.6471831940236185, 0.5886097448454819, 0.5242125756610723, 0.6434043543284933, 0.5913493261096961, 0.5453227849312131, 0.6393631091705971, 0.10351585393423646, 0.12453104072468957, 0.1076472818234242, 0.09906055520738266, 0.11452381275456214, 0.11982782811139481, 0.09909907826104958, 0.11083662975196928, 0.11700895278000678, 0.10641140236713131, 0.10522316531278897, 0.13039426564391632, 0.10080770804946437, 0.11001653499311392, 0.10160596383435372, 0.12107509787759207, 0.09811047701453257, 0.10077629961644763, 0.9486541846907879, 0.9172188041487385, 0.9278236448641266, 0.9454470323903449, 0.9676869060180183, 0.9358930268982267, 0.9568262345429105, 0.9372168450616253, 0.9348641671792576, 0.4020712697906651, 0.35785246827365125, 0.3800315641678582, 0.38243846562449824, 0.3715442782763979, 0.4112835672076014, 0.4216632975647123, 0.406788578097403, 0.4247430466511528, 0.7848036179029934, 0.6563305489456546, 0.7113662567761969, 0.7508557659656259, 0.6807608252781929, 0.7620152131172023, 0.7268760198361488, 0.7120622914197436, 0.7686049039514934, 0.33689024102016796, 0.39363587829934066, 0.30869120001296857, 0.29766262260110066, 0.32573789029537414, 0.22201601734871923, 0.3575972110192025, 0.34880568910271736, 0.25458397524283016, 0.39784199965996037, 0.38156622650704153, 0.2167442351049922, 0.283429926233565, 0.23161507358098243, 0.2472519525165996, 0.3245776573269531, 0.3378684340574514, 0.23256180412643102, 0.21037369979841936, 0.25487431256785664, 0.30121436580534633, 0.2984701686766077, 0.2961013101253043, 0.28566315267168463, 0.27916677369546594, 0.26119150707053096, 0.30949297623414984, 0.45620792314056857, 0.45474719548475373, 0.4589108382879147, 0.4122432299218334, 0.4232212276569052, 0.433270672602447, 0.4210167395720904, 0.452638455028456, 0.508155075543486, 0.1216786486882564, 0.07832861270906089, 0.16697838710250668, 0.12732506782510278, 0.12240484708737276, 0.2077199824483248, 0.14617404675327939, 0.09583836847410077, 0.1813695354043351, 0.25222132344372694, 0.22874899948812077, 0.2785408800923398, 0.2446485974549829, 0.2527100283341085, 0.29394640140528694, 0.26119397025950997, 0.24410026158944875, 0.2698581320156809, 0.61052858060222, 0.6391402386922449, 0.6672724331772528, 0.6335302860420606, 0.6165196764136884, 0.6761286528961642, 0.6022675320007709, 0.6324821794040603, 0.6897972638959091, 0.0924627941525461, 0.10636414341130263, 0.09916137409423642, 0.10574955911994188, 0.11978491652351209, 0.1133208182175438, 0.09293291566848327, 0.0960502176504413, 0.11516422247651203, 0.18821615005333836, 0.12443343693977027, 0.18183435642084467, 0.1441744103804744, 0.1260137840524247, 0.1445208893231249, 0.16765725855848068, 0.14938451237129136, 0.13350466722000442, 0.35580935691022164, 0.3578249560474629, 0.3809365898324041, 0.32496674084484745, 0.3508220508025317, 0.3732675179373599, 0.3625302393104264, 0.3821383898486286, 0.3984427355522897, 0.2653518059850727, 0.27574878945091974, 0.30755997790037537, 0.26398300245597417, 0.28886812290654384, 0.26383633853408217, 0.29328670244993504, 0.2808766759401581, 0.31206973137004, 0.18890979790948637, 0.19647190464291864, 0.19780167024721906, 0.1813075284360024, 0.20453129063737385, 0.19977990613639873, 0.1969079819188222, 0.18394490024391374, 0.19336590824065147, 0.29193830656370756, 0.17839224508350648, 0.19486080184105348, 0.24026159089072052, 0.18684901826797518, 0.20840557857216058, 0.19272227174574696, 0.18983771044024422, 0.18157555809114623, 0.6236355921230847, 0.6842410156604504, 0.188671065458754, 0.1721959527370429, 0.17792094382232515, 0.5983380963559108, 0.3579376274215308, 0.45075827463422113, 0.658754440699045, 0.7643068398339091, 0.20201682617661287, 0.16311314974807156, 0.5115245694832904, 0.5306996256560412, 0.4086847445505807, 0.7003716536551341, 0.20537810706875148, 0.20657869832380205, 0.1924096727403386, 0.18742080095650515, 0.17811286741386634, 0.19595894850002682, 0.1836482937667161, 0.1830911843104589, 0.18730705697054395, 0.18979595341251032, 0.16441920237345042, 0.07381746994058358, 0.0732772490026764, 0.08790353549013852, 0.0771514135260637, 0.0834641762482854, 0.07494092263874919, 0.08038558989878386, 0.0812416163348264, 0.07387401851759456]}, "mutation_prompt": null}
{"id": "07068ccf-11f0-4819-9964-96c5194b34be", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass DynamicCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, min_pop_size=10, max_pop_size=100, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, min_pop_size)\n        self.max_pop_size = max_pop_size\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        def update_population(population, fitness_values):\n            if len(population) < self.max_pop_size:\n                new_individual = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                population = np.vstack((population, new_individual))\n                fitness_values = np.append(fitness_values, func(new_individual))\n            return population, fitness_values\n\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.min_pop_size, self.dim))\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.min_pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            population, fitness_values = update_population(population, fitness_values)\n\n            for i in range(len(population)):\n                a, b, c = np.random.choice(len(population), 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(len(population)):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "DynamicCrowdedDE", "description": "Utilize a dynamic population size strategy to adaptively adjust the number of individuals in the population during optimization.", "configspace": "", "generation": 95, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'DynamicCrowdedDE' object has no attribute 'min_pop_size'\").", "error": "AttributeError(\"'DynamicCrowdedDE' object has no attribute 'min_pop_size'\")", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {}, "mutation_prompt": null}
{"id": "670706e9-d4c2-495d-b7c2-51616590485d", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "23e79d82-8cce-4c1c-8d08-d9b4ce8a2790", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "51d9e157-5f78-4d06-8080-bebe358ce1e8", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
{"id": "021a0c9e-9f81-4e5e-86d3-36c9d0e6f8c0", "solution": "import numpy as np\nfrom scipy.spatial.distance import cdist\n\nclass EnhancedCrowdedDE(DifferentialEvolution):\n    def __init__(self, budget, dim, Cr=0.9, F=0.8, pop_size=50, F_lb=0.2, F_ub=0.9, F_adapt=0.1, adapt_rate=0.05):\n        super().__init__(budget, dim, Cr, F, pop_size)\n        self.F_lb = F_lb\n        self.F_ub = F_ub\n        self.F_adapt = F_adapt\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def adapt_mutation_factor(F, fitness_progress):\n            adapt_range = (1 - fitness_progress) * self.adapt_rate\n            return np.clip(F + np.random.uniform(-adapt_range, adapt_range), self.F_lb, self.F_ub)\n\n        def create_population():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n\n        def clip_to_bounds(x):\n            return np.clip(x, self.lower_bound, self.upper_bound)\n\n        population = create_population()\n        fitness_values = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_fitness = np.min(fitness_values)\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = clip_to_bounds(population[a] + self.F * (population[b] - population[c]))\n                crossover = np.random.rand(self.dim) < self.Cr\n                trial = population[i].copy()\n                trial[crossover] = mutant[crossover]\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness_values[i]:\n                    population[i] = trial\n                    fitness_values[i] = trial_fitness\n\n                best_fitness = min(best_fitness, trial_fitness)\n\n            crowding_dist = cdist(population, population, 'euclidean')\n            sorted_indices = np.argsort(crowding_dist.sum(axis=1))\n            for i in range(self.pop_size):\n                self.F = adapt_mutation_factor(self.F, (best_fitness - fitness_values[sorted_indices[i]]) / best_fitness)\n\n        best_idx = np.argmin(fitness_values)\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedCrowdedDE", "description": "Enhance the diversity maintenance by incorporating a crowding distance measure in the selection process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "564c754c-c500-413b-b259-6740010f19aa", "metadata": {"aucs": [0.8225359067800564, 0.8134839923059936, 0.8055070232364139, 0.81013744426135, 0.8067244913074196, 0.8323441708522284, 0.8249235597554903, 0.808851623311316, 0.8155782011820589, 0.6110608501860268, 0.6589007206614669, 0.6447942142749632, 0.6130211488468131, 0.6107098988539637, 0.6710555887054718, 0.5831358629006336, 0.6658467831304251, 0.6612665471185982, 0.11706096013795653, 0.11605941218239457, 0.11815910652228523, 0.12403701848865278, 0.11632604036237626, 0.11635068090354272, 0.11979601525302619, 0.10135165945627145, 0.11931747240893242, 0.15314575588132306, 0.10691904757883042, 0.10282864509265588, 0.12403397875177014, 0.12802490104189235, 0.12678144779970713, 0.13745955934490373, 0.10953334304865314, 0.104573953079798, 0.9722234661406461, 0.9022467633336774, 0.8562044553046629, 0.916380748819735, 0.8832525719692423, 0.9354871688469665, 0.8723791102051681, 0.9740557096809993, 0.8913136579166582, 0.4440102361703677, 0.410207088902408, 0.40697720393217074, 0.43735960212861, 0.432547378798127, 0.43723954702529777, 0.3407945284272037, 0.4208888784929322, 0.46557796552717046, 0.8216735212205182, 0.7943805725985658, 0.8116906433102439, 0.8050421584634915, 0.8189051107764901, 0.8125375591904606, 0.7922188220088735, 0.74137813032508, 0.7894830659902385, 0.39866444461399664, 0.24332141061776424, 0.37583862465805706, 0.18277116480926703, 0.5719198217045175, 0.3545054478449502, 0.2662033924599875, 0.228861152827043, 0.20700063292030535, 0.19211326276531904, 0.34897570163024505, 0.3723982491970175, 0.2604630316157278, 0.4177225905557099, 0.3315674179091267, 0.2961966588530367, 0.2089469115973286, 0.3089002688993525, 0.4106691705197806, 0.3911072882847719, 0.23109951284451724, 0.3359318692558986, 0.4492304882021235, 0.43133892070883906, 0.3302929335382565, 0.4330038790003762, 0.38651152510067155, 0.5177877025852233, 0.5794759275686564, 0.5313849528195247, 0.49598528190045277, 0.5847574956821626, 0.44238654597308913, 0.5811213978757503, 0.5551801342858975, 0.5649769620440308, 0.08899462526020196, 0.19881961159902017, 0.14932270885890409, 0.3276406025733586, 0.25436492521302845, 0.16390782809001392, 0.12700309561871959, 0.11739431325401817, 0.22523582037461076, 0.3234657308330615, 0.30608368752060766, 0.2989264126907689, 0.29015431202423836, 0.35047698336135125, 0.3201202595571324, 0.3210953219718359, 0.3373550484968628, 0.29409958081734255, 0.7399406431036591, 0.7207186343506682, 0.6955006805492264, 0.6928444187807661, 0.7071963621222742, 0.6719841001431658, 0.7241253963829097, 0.7124161414777481, 0.6810916049932603, 0.09508838313866674, 0.1042549201015025, 0.10400629685564056, 0.09663420886025342, 0.10205564756822683, 0.08595259639801012, 0.10562220740034123, 0.08632170332185163, 0.127593866810788, 0.21765798163409134, 0.1332065244910846, 0.17698450443914138, 0.29752036741398635, 0.1541076074656592, 0.1438560157193327, 0.20494063322537937, 0.172316964479602, 0.13865120415644228, 0.42415815643897437, 0.41526599822216037, 0.41435000793739685, 0.39875159802268734, 0.4522536104331675, 0.41016720062776835, 0.46525382215912303, 0.4462408440870185, 0.43614878706553795, 0.2992690466408703, 0.3272925184380061, 0.33295684026204364, 0.32566573306616997, 0.32509125542829387, 0.31713497476714125, 0.36285454740455414, 0.3796906206530781, 0.37597877131038104, 0.22040467456989765, 0.20158528904831596, 0.1891424197324476, 0.2128350393880467, 0.19835960330815317, 0.21827608420828049, 0.2099060851245782, 0.1906438319221746, 0.18901130453046655, 0.40155423035093707, 0.21664440264037177, 0.324141136913195, 0.194073112156686, 0.18214889851603955, 0.47843328818491193, 0.42471066363295795, 0.22720883346135157, 0.1945689580302341, 0.19086415703228887, 0.7410513396778879, 0.7699636264022629, 0.19203452057420867, 0.6746436693932447, 0.6644688019823641, 0.7515722008912068, 0.6407553909639644, 0.7255563142908472, 0.7852111987192542, 0.20827348022693215, 0.5422025545522455, 0.6901666871792326, 0.19819866762701333, 0.6529137451412049, 0.20368892115572612, 0.2082285093911439, 0.20397614306308665, 0.17608373765081464, 0.1917354642700877, 0.2025083609922711, 0.1870377841107731, 0.18248972029441268, 0.18945421641570437, 0.18164082243076196, 0.19971982655039333, 0.186185787862729, 0.08266200014498426, 0.08449712919542085, 0.08762754573386466, 0.08205214159914864, 0.08710315770620292, 0.07346883208698762, 0.07369441444517266, 0.0855019274385006, 0.08591072137352729]}, "mutation_prompt": null}
