{"id": "137c3180-aa36-4df0-b7ab-96d30b9cf5c2", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "1f76960a-3a68-498e-a6cd-ab03d745622d", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "137c3180-aa36-4df0-b7ab-96d30b9cf5c2", "metadata": {}, "mutation_prompt": null}
{"id": "75f53422-b4c7-4bbb-821e-9e59d106b2ab", "solution": "import numpy as np\n\nclass DynamicDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10\n        self.F = 0.5\n        self.CR = 0.9\n        self.min_mutation = 0.5\n        self.max_mutation = 2.0\n\n    def __call__(self, func):\n        def mutate(x, u, v):\n            mutant = x + self.F * (u - v)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def dynamic_mutation_scale(iteration, max_iterations):\n            return self.min_mutation + (self.max_mutation - self.min_mutation) * (1 - iteration / max_iterations)\n\n        best_solution = np.random.uniform(-5.0, 5.0, self.dim)\n        best_fitness = func(best_solution)\n        for _ in range(self.budget // self.population_size):\n            for _ in range(self.population_size):\n                target = np.random.choice(self.population)\n                r1, r2, r3 = np.random.choice(self.population, 3, replace=False)\n                mutation_scale = dynamic_mutation_scale(_, self.budget // self.population_size)\n                mutant = mutate(target, r1, r2)\n                trial = np.where(np.random.uniform(size=self.dim) < self.CR, mutant, target)\n                fitness = func(trial)\n                if fitness < best_fitness:\n                    best_solution, best_fitness = trial, fitness\n            self.population.append(best_solution)\n        return best_solution", "name": "DynamicDE", "description": "Utilizing a modified version of Differential Evolution (DE) with a dynamic mutation strategy to enhance exploration and exploitation balance.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'DynamicDE' object has no attribute 'population'\").", "error": "AttributeError(\"'DynamicDE' object has no attribute 'population'\")", "parent_id": "137c3180-aa36-4df0-b7ab-96d30b9cf5c2", "metadata": {}, "mutation_prompt": null}
{"id": "af9f3c3a-b8f3-4bb6-bb34-5a4808cc0802", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "137c3180-aa36-4df0-b7ab-96d30b9cf5c2", "metadata": {}, "mutation_prompt": null}
{"id": "d3b2a026-1704-483a-befa-3b24799cc8cb", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n            \n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                population[i] = np.clip(v, -5.0, 5.0)\n        \n        return best_solution", "name": "HybridPSODE", "description": "A novel hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) for efficient exploration and exploitation in black box optimization.", "configspace": "", "generation": 4, "fitness": 0.1277481801885216, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.17.", "error": "", "parent_id": "137c3180-aa36-4df0-b7ab-96d30b9cf5c2", "metadata": {"aucs": [0.18757297678500195, 0.2290833532849078, 0.18253881161238084, 0.181530112250177, 0.23279267822082472, 0.21094993740621715, 0.20256220363860278, 0.1964402974948033, 0.17963075949373597, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04262291701961507, 0.059964171720667925, 0.049325030288696725, 0.04690943634539235, 0.05714055274766183, 0.06652052727671054, 0.04981613194997969, 0.04370216297012053, 0.09747595144292387, 0.04838851220790252, 0.0339283611806388, 0.04748635683639879, 0.04723758790757071, 0.03605000166891026, 0.053204898255804434, 0.043370920640179444, 0.04440866401243815, 0.03745934900451953, 0.9139631407010486, 0.4579566915799591, 0.9891103807507783, 0.9790681368756068, 0.9737410317783545, 0.7983055632070716, 0.8343248229219713, 0.9523535048333305, 0.8205494070619266, 0.09513454957709833, 0.08470361230380763, 0.08639441481583765, 0.0800678081206555, 0.10161182615578634, 0.07439680079996447, 0.08622872670132398, 0.11006527162329327, 0.11334486982019953, 0.14368735987397407, 0.12603075311931355, 0.14286832377858882, 0.15679942550905068, 0.11499232237677492, 0.12240772315865067, 0.12345788972280303, 0.12930562011591573, 0.12755466255822445, 0.03603830784604656, 0.04885123206627029, 9.999999999998899e-05, 0.013490159258685352, 0.0008639578506859369, 9.999999999998899e-05, 0.015892121318106578, 0.01160580334430783, 0.0008715454889083318, 9.999999999998899e-05, 0.04987416910495446, 0.058880362012112886, 9.999999999998899e-05, 0.0062635444497164405, 9.999999999998899e-05, 0.0017095885416867906, 0.030012758791246652, 0.056465791077981886, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06959080891049418, 0.11159099159472208, 0.07889082759325372, 0.04852499072273708, 0.05770240405493676, 0.0401260819174698, 0.06480594054731825, 0.05069518961303643, 0.07272827723306019, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001066142470736442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00044525156490071716, 9.999999999998899e-05, 0.004371844588448637, 9.999999999998899e-05, 0.0031914587832174712, 0.22759551022795088, 0.2147395221309656, 0.19214934597278566, 0.19064689471918583, 0.23846178444281885, 0.20322714379426987, 0.21961755458749044, 0.19639994463490318, 0.21204486337253048, 0.045918734733028765, 0.057361714180439005, 0.04941410707105365, 0.04595192535510029, 0.04986782673884227, 0.05462998931723195, 0.061118209043036775, 0.043106314353356545, 0.05220190176511075, 0.12480201053056494, 0.13470471167400322, 0.12810964137122827, 0.13664020526546394, 0.12755449011574094, 0.14162365775555374, 0.12957097606707535, 0.1334065278890495, 0.12122393792577257, 0.16520320263988342, 0.17413953951489636, 0.1747509328887651, 0.16643693990192865, 0.1658629249125666, 0.16914025884544792, 0.17336688160384728, 0.17377774300845283, 0.18688312890027414, 0.12040591163980785, 0.10088612735329372, 0.11547993456384142, 0.14415039015300968, 0.10648619208307941, 0.13704425675523346, 0.11326743179526033, 0.13579541614638402, 0.11254293547952532, 0.16219101328916363, 0.1781890807771186, 0.14624454439673684, 0.1552408659464367, 0.19232065259868458, 0.1616621191068247, 0.1591013963965544, 0.16060090740877242, 0.15494079787140858, 0.16132314417500582, 0.16653546259492047, 0.16237907431890675, 0.16531660864413023, 0.14672712766483254, 0.1731097720719479, 0.14670215765507422, 0.16134928401375692, 0.15792334240097372, 0.18698454768866068, 0.14712712393145555, 0.15882968815204224, 0.16071934484397277, 0.1790981668616991, 0.18598175159962216, 0.19260876107855596, 0.18657656428951475, 0.14965869242102237, 0.1439052414268397, 0.21720556331814767, 0.21331830147181996, 0.13020066340385505, 0.17271934038836312, 0.1420016646048311, 0.16194955396090605, 0.1437384750925621, 0.12906386780763457, 0.1738029778761384, 0.17249275173877776, 0.17970966271353994, 0.1903006809981127, 0.18496843624670845, 0.18859465215568405, 0.18586505477929283, 0.1861722940617101, 0.18104169615468058, 0.05130790986793088, 0.05073930563688667, 0.05016407195657535, 0.05854787405323747, 0.05609678822710307, 0.05063057113727176, 0.05453194523075455, 0.05566303470305034, 0.056936102041274306]}, "mutation_prompt": null}
{"id": "3bb3595a-fdb4-4a19-914b-73e6334d3721", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE algorithm with adaptive mutation control for improved exploration in black box optimization.", "configspace": "", "generation": 5, "fitness": 0.13040235443698908, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.18.", "error": "", "parent_id": "d3b2a026-1704-483a-befa-3b24799cc8cb", "metadata": {"aucs": [0.20098048909411792, 0.20573021905134736, 0.19569949884186644, 0.17686681136764293, 0.19330557799636294, 0.18361402698576745, 0.17611679563351368, 0.2064080566482107, 0.17957974359629514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04698728160387766, 0.04475532342410515, 0.04415528428024551, 0.044349292751383995, 0.049804112385253174, 0.06137592339367659, 0.058914996743807735, 0.04721045671551305, 0.05531932943188744, 0.041533876472293896, 0.034420918962542735, 0.038799361126421905, 0.05791763843916431, 0.04003936959915211, 0.040855171407668034, 0.05138416113503241, 0.04033249409639106, 0.045339945163163975, 0.9917839677505349, 0.9678429691504106, 0.8061316101636835, 0.9848291281586559, 0.8537353478262611, 0.9687971358847782, 0.9897625616988035, 0.9873273082357434, 0.9109843793545118, 0.07668712550099732, 0.09078518391723722, 0.09628568473540566, 0.07374639707399233, 0.07670465940029148, 0.07873999590384739, 0.09380602914207525, 0.0984508982274328, 0.10708980419275471, 0.17547806117325748, 0.1455279082452109, 0.12168967731152902, 0.12419947367959216, 0.14198112877478053, 0.12817173083118127, 0.14555512770411383, 0.17259356876940746, 0.12065266354148885, 0.027578788571598345, 0.015305236235636954, 9.999999999998899e-05, 0.03649372568107501, 9.999999999998899e-05, 9.999999999998899e-05, 0.003783782651808232, 9.999999999998899e-05, 0.0020166795199721976, 0.017417397428916792, 0.006276049479007062, 0.0004849421007353527, 0.008573337805524717, 9.999999999998899e-05, 0.02720695628823655, 0.0005181825996783962, 0.005604099167090815, 0.03405110728432392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07072014181750474, 0.07256985478296774, 0.14790779907398843, 0.04899690400355561, 0.027692531873897308, 0.04761147975174096, 0.05917519323206111, 0.026413840976532987, 0.044039150421360085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01456208238752188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003583207558934376, 0.21724307737809978, 0.2109542746966473, 0.2058210074288268, 0.20316395626731143, 0.21528875645119472, 0.19282650257784895, 0.19493609688456603, 0.2385618586053756, 0.21910320927760552, 0.053976664539057806, 0.048659923414963724, 0.05953241120290509, 0.052991857568291945, 0.054667176133613826, 0.05283447035839994, 0.05915672420288609, 0.04914200217938236, 0.04057490559193977, 0.1172402134699203, 0.11879245075917899, 0.12711745254215634, 0.12534221660527345, 0.12533400367018044, 0.1432081552460519, 0.13260495250399218, 0.1183406877843991, 0.13318427162164714, 0.16912517830091944, 0.1840101875196818, 0.1754351983170629, 0.1677363677090885, 0.17456131148801846, 0.17486490427588164, 0.1772688011184539, 0.17707317223501706, 0.1757079693785215, 0.10827197074669326, 0.1369846589402579, 0.10404804446299187, 0.12484807721716373, 0.13167755407310322, 0.12476696052570901, 0.12514110858872574, 0.13123253163934567, 0.11056472504145409, 0.19175468299881282, 0.16223407695608405, 0.15491172900831063, 0.15132273249504835, 0.1579398829731712, 0.1586736027153305, 0.16667638354615932, 0.15673616887648656, 0.16221861312447616, 0.14755770903918453, 0.15408458208323317, 0.14863617256021666, 0.15504472925132906, 0.15530689426538824, 0.1654305554387493, 0.15841018598238932, 0.16534510070400976, 0.15587946024967425, 0.15700527609150827, 0.1570947099832014, 0.14115602559884188, 0.22054046636046665, 0.17492021807675406, 0.1815044791587035, 0.21692653471831058, 0.1716452763344658, 0.18937193122249707, 0.1485414260023712, 0.19326983373295026, 0.21860544655326453, 0.16644248631503866, 0.19132781246257657, 0.1866340485739315, 0.16407474271992328, 0.13668254334231655, 0.1177362438503089, 0.1773366915636374, 0.20680015644031013, 0.16486767331187202, 0.16729983536278836, 0.18145573371256807, 0.17247189022822496, 0.1930311739730236, 0.1896183077319853, 0.17439441098001585, 0.05446218143954906, 0.06630409530855264, 0.05615525712078073, 0.047339229078536826, 0.056414763586123406, 0.05759092725044013, 0.05291773406302491, 0.047937438555365364, 0.07133214138919941]}, "mutation_prompt": null}
{"id": "178cb62d-44a1-45c6-a147-25ac720ba712", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE algorithm with adaptive mutation control for improved exploration in black box optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3bb3595a-fdb4-4a19-914b-73e6334d3721", "metadata": {"aucs": [0.20098048909411792, 0.20573021905134736, 0.19569949884186644, 0.17686681136764293, 0.19330557799636294, 0.18361402698576745, 0.17611679563351368, 0.2064080566482107, 0.17957974359629514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04698728160387766, 0.04475532342410515, 0.04415528428024551, 0.044349292751383995, 0.049804112385253174, 0.06137592339367659, 0.058914996743807735, 0.04721045671551305, 0.05531932943188744, 0.041533876472293896, 0.034420918962542735, 0.038799361126421905, 0.05791763843916431, 0.04003936959915211, 0.040855171407668034, 0.05138416113503241, 0.04033249409639106, 0.045339945163163975, 0.9917839677505349, 0.9678429691504106, 0.8061316101636835, 0.9848291281586559, 0.8537353478262611, 0.9687971358847782, 0.9897625616988035, 0.9873273082357434, 0.9109843793545118, 0.07668712550099732, 0.09078518391723722, 0.09628568473540566, 0.07374639707399233, 0.07670465940029148, 0.07873999590384739, 0.09380602914207525, 0.0984508982274328, 0.10708980419275471, 0.17547806117325748, 0.1455279082452109, 0.12168967731152902, 0.12419947367959216, 0.14198112877478053, 0.12817173083118127, 0.14555512770411383, 0.17259356876940746, 0.12065266354148885, 0.027578788571598345, 0.015305236235636954, 9.999999999998899e-05, 0.03649372568107501, 9.999999999998899e-05, 9.999999999998899e-05, 0.003783782651808232, 9.999999999998899e-05, 0.0020166795199721976, 0.017417397428916792, 0.006276049479007062, 0.0004849421007353527, 0.008573337805524717, 9.999999999998899e-05, 0.02720695628823655, 0.0005181825996783962, 0.005604099167090815, 0.03405110728432392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07072014181750474, 0.07256985478296774, 0.14790779907398843, 0.04899690400355561, 0.027692531873897308, 0.04761147975174096, 0.05917519323206111, 0.026413840976532987, 0.044039150421360085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01456208238752188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003583207558934376, 0.21724307737809978, 0.2109542746966473, 0.2058210074288268, 0.20316395626731143, 0.21528875645119472, 0.19282650257784895, 0.19493609688456603, 0.2385618586053756, 0.21910320927760552, 0.053976664539057806, 0.048659923414963724, 0.05953241120290509, 0.052991857568291945, 0.054667176133613826, 0.05283447035839994, 0.05915672420288609, 0.04914200217938236, 0.04057490559193977, 0.1172402134699203, 0.11879245075917899, 0.12711745254215634, 0.12534221660527345, 0.12533400367018044, 0.1432081552460519, 0.13260495250399218, 0.1183406877843991, 0.13318427162164714, 0.16912517830091944, 0.1840101875196818, 0.1754351983170629, 0.1677363677090885, 0.17456131148801846, 0.17486490427588164, 0.1772688011184539, 0.17707317223501706, 0.1757079693785215, 0.10827197074669326, 0.1369846589402579, 0.10404804446299187, 0.12484807721716373, 0.13167755407310322, 0.12476696052570901, 0.12514110858872574, 0.13123253163934567, 0.11056472504145409, 0.19175468299881282, 0.16223407695608405, 0.15491172900831063, 0.15132273249504835, 0.1579398829731712, 0.1586736027153305, 0.16667638354615932, 0.15673616887648656, 0.16221861312447616, 0.14755770903918453, 0.15408458208323317, 0.14863617256021666, 0.15504472925132906, 0.15530689426538824, 0.1654305554387493, 0.15841018598238932, 0.16534510070400976, 0.15587946024967425, 0.15700527609150827, 0.1570947099832014, 0.14115602559884188, 0.22054046636046665, 0.17492021807675406, 0.1815044791587035, 0.21692653471831058, 0.1716452763344658, 0.18937193122249707, 0.1485414260023712, 0.19326983373295026, 0.21860544655326453, 0.16644248631503866, 0.19132781246257657, 0.1866340485739315, 0.16407474271992328, 0.13668254334231655, 0.1177362438503089, 0.1773366915636374, 0.20680015644031013, 0.16486767331187202, 0.16729983536278836, 0.18145573371256807, 0.17247189022822496, 0.1930311739730236, 0.1896183077319853, 0.17439441098001585, 0.05446218143954906, 0.06630409530855264, 0.05615525712078073, 0.047339229078536826, 0.056414763586123406, 0.05759092725044013, 0.05291773406302491, 0.047937438555365364, 0.07133214138919941]}, "mutation_prompt": null}
{"id": "f32edef5-70b3-458c-b57a-c5723f45e18a", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE algorithm with adaptive mutation control for improved exploration in black box optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3bb3595a-fdb4-4a19-914b-73e6334d3721", "metadata": {"aucs": [0.20098048909411792, 0.20573021905134736, 0.19569949884186644, 0.17686681136764293, 0.19330557799636294, 0.18361402698576745, 0.17611679563351368, 0.2064080566482107, 0.17957974359629514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04698728160387766, 0.04475532342410515, 0.04415528428024551, 0.044349292751383995, 0.049804112385253174, 0.06137592339367659, 0.058914996743807735, 0.04721045671551305, 0.05531932943188744, 0.041533876472293896, 0.034420918962542735, 0.038799361126421905, 0.05791763843916431, 0.04003936959915211, 0.040855171407668034, 0.05138416113503241, 0.04033249409639106, 0.045339945163163975, 0.9917839677505349, 0.9678429691504106, 0.8061316101636835, 0.9848291281586559, 0.8537353478262611, 0.9687971358847782, 0.9897625616988035, 0.9873273082357434, 0.9109843793545118, 0.07668712550099732, 0.09078518391723722, 0.09628568473540566, 0.07374639707399233, 0.07670465940029148, 0.07873999590384739, 0.09380602914207525, 0.0984508982274328, 0.10708980419275471, 0.17547806117325748, 0.1455279082452109, 0.12168967731152902, 0.12419947367959216, 0.14198112877478053, 0.12817173083118127, 0.14555512770411383, 0.17259356876940746, 0.12065266354148885, 0.027578788571598345, 0.015305236235636954, 9.999999999998899e-05, 0.03649372568107501, 9.999999999998899e-05, 9.999999999998899e-05, 0.003783782651808232, 9.999999999998899e-05, 0.0020166795199721976, 0.017417397428916792, 0.006276049479007062, 0.0004849421007353527, 0.008573337805524717, 9.999999999998899e-05, 0.02720695628823655, 0.0005181825996783962, 0.005604099167090815, 0.03405110728432392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07072014181750474, 0.07256985478296774, 0.14790779907398843, 0.04899690400355561, 0.027692531873897308, 0.04761147975174096, 0.05917519323206111, 0.026413840976532987, 0.044039150421360085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01456208238752188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003583207558934376, 0.21724307737809978, 0.2109542746966473, 0.2058210074288268, 0.20316395626731143, 0.21528875645119472, 0.19282650257784895, 0.19493609688456603, 0.2385618586053756, 0.21910320927760552, 0.053976664539057806, 0.048659923414963724, 0.05953241120290509, 0.052991857568291945, 0.054667176133613826, 0.05283447035839994, 0.05915672420288609, 0.04914200217938236, 0.04057490559193977, 0.1172402134699203, 0.11879245075917899, 0.12711745254215634, 0.12534221660527345, 0.12533400367018044, 0.1432081552460519, 0.13260495250399218, 0.1183406877843991, 0.13318427162164714, 0.16912517830091944, 0.1840101875196818, 0.1754351983170629, 0.1677363677090885, 0.17456131148801846, 0.17486490427588164, 0.1772688011184539, 0.17707317223501706, 0.1757079693785215, 0.10827197074669326, 0.1369846589402579, 0.10404804446299187, 0.12484807721716373, 0.13167755407310322, 0.12476696052570901, 0.12514110858872574, 0.13123253163934567, 0.11056472504145409, 0.19175468299881282, 0.16223407695608405, 0.15491172900831063, 0.15132273249504835, 0.1579398829731712, 0.1586736027153305, 0.16667638354615932, 0.15673616887648656, 0.16221861312447616, 0.14755770903918453, 0.15408458208323317, 0.14863617256021666, 0.15504472925132906, 0.15530689426538824, 0.1654305554387493, 0.15841018598238932, 0.16534510070400976, 0.15587946024967425, 0.15700527609150827, 0.1570947099832014, 0.14115602559884188, 0.22054046636046665, 0.17492021807675406, 0.1815044791587035, 0.21692653471831058, 0.1716452763344658, 0.18937193122249707, 0.1485414260023712, 0.19326983373295026, 0.21860544655326453, 0.16644248631503866, 0.19132781246257657, 0.1866340485739315, 0.16407474271992328, 0.13668254334231655, 0.1177362438503089, 0.1773366915636374, 0.20680015644031013, 0.16486767331187202, 0.16729983536278836, 0.18145573371256807, 0.17247189022822496, 0.1930311739730236, 0.1896183077319853, 0.17439441098001585, 0.05446218143954906, 0.06630409530855264, 0.05615525712078073, 0.047339229078536826, 0.056414763586123406, 0.05759092725044013, 0.05291773406302491, 0.047937438555365364, 0.07133214138919941]}, "mutation_prompt": null}
{"id": "73136f92-fbf5-46b8-860e-13a9278fde85", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE algorithm with adaptive mutation control for improved exploration in black box optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3bb3595a-fdb4-4a19-914b-73e6334d3721", "metadata": {"aucs": [0.20098048909411792, 0.20573021905134736, 0.19569949884186644, 0.17686681136764293, 0.19330557799636294, 0.18361402698576745, 0.17611679563351368, 0.2064080566482107, 0.17957974359629514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04698728160387766, 0.04475532342410515, 0.04415528428024551, 0.044349292751383995, 0.049804112385253174, 0.06137592339367659, 0.058914996743807735, 0.04721045671551305, 0.05531932943188744, 0.041533876472293896, 0.034420918962542735, 0.038799361126421905, 0.05791763843916431, 0.04003936959915211, 0.040855171407668034, 0.05138416113503241, 0.04033249409639106, 0.045339945163163975, 0.9917839677505349, 0.9678429691504106, 0.8061316101636835, 0.9848291281586559, 0.8537353478262611, 0.9687971358847782, 0.9897625616988035, 0.9873273082357434, 0.9109843793545118, 0.07668712550099732, 0.09078518391723722, 0.09628568473540566, 0.07374639707399233, 0.07670465940029148, 0.07873999590384739, 0.09380602914207525, 0.0984508982274328, 0.10708980419275471, 0.17547806117325748, 0.1455279082452109, 0.12168967731152902, 0.12419947367959216, 0.14198112877478053, 0.12817173083118127, 0.14555512770411383, 0.17259356876940746, 0.12065266354148885, 0.027578788571598345, 0.015305236235636954, 9.999999999998899e-05, 0.03649372568107501, 9.999999999998899e-05, 9.999999999998899e-05, 0.003783782651808232, 9.999999999998899e-05, 0.0020166795199721976, 0.017417397428916792, 0.006276049479007062, 0.0004849421007353527, 0.008573337805524717, 9.999999999998899e-05, 0.02720695628823655, 0.0005181825996783962, 0.005604099167090815, 0.03405110728432392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07072014181750474, 0.07256985478296774, 0.14790779907398843, 0.04899690400355561, 0.027692531873897308, 0.04761147975174096, 0.05917519323206111, 0.026413840976532987, 0.044039150421360085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01456208238752188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003583207558934376, 0.21724307737809978, 0.2109542746966473, 0.2058210074288268, 0.20316395626731143, 0.21528875645119472, 0.19282650257784895, 0.19493609688456603, 0.2385618586053756, 0.21910320927760552, 0.053976664539057806, 0.048659923414963724, 0.05953241120290509, 0.052991857568291945, 0.054667176133613826, 0.05283447035839994, 0.05915672420288609, 0.04914200217938236, 0.04057490559193977, 0.1172402134699203, 0.11879245075917899, 0.12711745254215634, 0.12534221660527345, 0.12533400367018044, 0.1432081552460519, 0.13260495250399218, 0.1183406877843991, 0.13318427162164714, 0.16912517830091944, 0.1840101875196818, 0.1754351983170629, 0.1677363677090885, 0.17456131148801846, 0.17486490427588164, 0.1772688011184539, 0.17707317223501706, 0.1757079693785215, 0.10827197074669326, 0.1369846589402579, 0.10404804446299187, 0.12484807721716373, 0.13167755407310322, 0.12476696052570901, 0.12514110858872574, 0.13123253163934567, 0.11056472504145409, 0.19175468299881282, 0.16223407695608405, 0.15491172900831063, 0.15132273249504835, 0.1579398829731712, 0.1586736027153305, 0.16667638354615932, 0.15673616887648656, 0.16221861312447616, 0.14755770903918453, 0.15408458208323317, 0.14863617256021666, 0.15504472925132906, 0.15530689426538824, 0.1654305554387493, 0.15841018598238932, 0.16534510070400976, 0.15587946024967425, 0.15700527609150827, 0.1570947099832014, 0.14115602559884188, 0.22054046636046665, 0.17492021807675406, 0.1815044791587035, 0.21692653471831058, 0.1716452763344658, 0.18937193122249707, 0.1485414260023712, 0.19326983373295026, 0.21860544655326453, 0.16644248631503866, 0.19132781246257657, 0.1866340485739315, 0.16407474271992328, 0.13668254334231655, 0.1177362438503089, 0.1773366915636374, 0.20680015644031013, 0.16486767331187202, 0.16729983536278836, 0.18145573371256807, 0.17247189022822496, 0.1930311739730236, 0.1896183077319853, 0.17439441098001585, 0.05446218143954906, 0.06630409530855264, 0.05615525712078073, 0.047339229078536826, 0.056414763586123406, 0.05759092725044013, 0.05291773406302491, 0.047937438555365364, 0.07133214138919941]}, "mutation_prompt": null}
{"id": "8f2303e4-dd2b-4173-a10c-1a4f5c84cdeb", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE algorithm with adaptive mutation control for improved exploration in black box optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3bb3595a-fdb4-4a19-914b-73e6334d3721", "metadata": {"aucs": [0.20098048909411792, 0.20573021905134736, 0.19569949884186644, 0.17686681136764293, 0.19330557799636294, 0.18361402698576745, 0.17611679563351368, 0.2064080566482107, 0.17957974359629514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04698728160387766, 0.04475532342410515, 0.04415528428024551, 0.044349292751383995, 0.049804112385253174, 0.06137592339367659, 0.058914996743807735, 0.04721045671551305, 0.05531932943188744, 0.041533876472293896, 0.034420918962542735, 0.038799361126421905, 0.05791763843916431, 0.04003936959915211, 0.040855171407668034, 0.05138416113503241, 0.04033249409639106, 0.045339945163163975, 0.9917839677505349, 0.9678429691504106, 0.8061316101636835, 0.9848291281586559, 0.8537353478262611, 0.9687971358847782, 0.9897625616988035, 0.9873273082357434, 0.9109843793545118, 0.07668712550099732, 0.09078518391723722, 0.09628568473540566, 0.07374639707399233, 0.07670465940029148, 0.07873999590384739, 0.09380602914207525, 0.0984508982274328, 0.10708980419275471, 0.17547806117325748, 0.1455279082452109, 0.12168967731152902, 0.12419947367959216, 0.14198112877478053, 0.12817173083118127, 0.14555512770411383, 0.17259356876940746, 0.12065266354148885, 0.027578788571598345, 0.015305236235636954, 9.999999999998899e-05, 0.03649372568107501, 9.999999999998899e-05, 9.999999999998899e-05, 0.003783782651808232, 9.999999999998899e-05, 0.0020166795199721976, 0.017417397428916792, 0.006276049479007062, 0.0004849421007353527, 0.008573337805524717, 9.999999999998899e-05, 0.02720695628823655, 0.0005181825996783962, 0.005604099167090815, 0.03405110728432392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07072014181750474, 0.07256985478296774, 0.14790779907398843, 0.04899690400355561, 0.027692531873897308, 0.04761147975174096, 0.05917519323206111, 0.026413840976532987, 0.044039150421360085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01456208238752188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003583207558934376, 0.21724307737809978, 0.2109542746966473, 0.2058210074288268, 0.20316395626731143, 0.21528875645119472, 0.19282650257784895, 0.19493609688456603, 0.2385618586053756, 0.21910320927760552, 0.053976664539057806, 0.048659923414963724, 0.05953241120290509, 0.052991857568291945, 0.054667176133613826, 0.05283447035839994, 0.05915672420288609, 0.04914200217938236, 0.04057490559193977, 0.1172402134699203, 0.11879245075917899, 0.12711745254215634, 0.12534221660527345, 0.12533400367018044, 0.1432081552460519, 0.13260495250399218, 0.1183406877843991, 0.13318427162164714, 0.16912517830091944, 0.1840101875196818, 0.1754351983170629, 0.1677363677090885, 0.17456131148801846, 0.17486490427588164, 0.1772688011184539, 0.17707317223501706, 0.1757079693785215, 0.10827197074669326, 0.1369846589402579, 0.10404804446299187, 0.12484807721716373, 0.13167755407310322, 0.12476696052570901, 0.12514110858872574, 0.13123253163934567, 0.11056472504145409, 0.19175468299881282, 0.16223407695608405, 0.15491172900831063, 0.15132273249504835, 0.1579398829731712, 0.1586736027153305, 0.16667638354615932, 0.15673616887648656, 0.16221861312447616, 0.14755770903918453, 0.15408458208323317, 0.14863617256021666, 0.15504472925132906, 0.15530689426538824, 0.1654305554387493, 0.15841018598238932, 0.16534510070400976, 0.15587946024967425, 0.15700527609150827, 0.1570947099832014, 0.14115602559884188, 0.22054046636046665, 0.17492021807675406, 0.1815044791587035, 0.21692653471831058, 0.1716452763344658, 0.18937193122249707, 0.1485414260023712, 0.19326983373295026, 0.21860544655326453, 0.16644248631503866, 0.19132781246257657, 0.1866340485739315, 0.16407474271992328, 0.13668254334231655, 0.1177362438503089, 0.1773366915636374, 0.20680015644031013, 0.16486767331187202, 0.16729983536278836, 0.18145573371256807, 0.17247189022822496, 0.1930311739730236, 0.1896183077319853, 0.17439441098001585, 0.05446218143954906, 0.06630409530855264, 0.05615525712078073, 0.047339229078536826, 0.056414763586123406, 0.05759092725044013, 0.05291773406302491, 0.047937438555365364, 0.07133214138919941]}, "mutation_prompt": null}
{"id": "86ef7cd0-23c2-4b0b-be13-4cd893941922", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE algorithm with adaptive mutation control for improved exploration in black box optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3bb3595a-fdb4-4a19-914b-73e6334d3721", "metadata": {"aucs": [0.20098048909411792, 0.20573021905134736, 0.19569949884186644, 0.17686681136764293, 0.19330557799636294, 0.18361402698576745, 0.17611679563351368, 0.2064080566482107, 0.17957974359629514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04698728160387766, 0.04475532342410515, 0.04415528428024551, 0.044349292751383995, 0.049804112385253174, 0.06137592339367659, 0.058914996743807735, 0.04721045671551305, 0.05531932943188744, 0.041533876472293896, 0.034420918962542735, 0.038799361126421905, 0.05791763843916431, 0.04003936959915211, 0.040855171407668034, 0.05138416113503241, 0.04033249409639106, 0.045339945163163975, 0.9917839677505349, 0.9678429691504106, 0.8061316101636835, 0.9848291281586559, 0.8537353478262611, 0.9687971358847782, 0.9897625616988035, 0.9873273082357434, 0.9109843793545118, 0.07668712550099732, 0.09078518391723722, 0.09628568473540566, 0.07374639707399233, 0.07670465940029148, 0.07873999590384739, 0.09380602914207525, 0.0984508982274328, 0.10708980419275471, 0.17547806117325748, 0.1455279082452109, 0.12168967731152902, 0.12419947367959216, 0.14198112877478053, 0.12817173083118127, 0.14555512770411383, 0.17259356876940746, 0.12065266354148885, 0.027578788571598345, 0.015305236235636954, 9.999999999998899e-05, 0.03649372568107501, 9.999999999998899e-05, 9.999999999998899e-05, 0.003783782651808232, 9.999999999998899e-05, 0.0020166795199721976, 0.017417397428916792, 0.006276049479007062, 0.0004849421007353527, 0.008573337805524717, 9.999999999998899e-05, 0.02720695628823655, 0.0005181825996783962, 0.005604099167090815, 0.03405110728432392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07072014181750474, 0.07256985478296774, 0.14790779907398843, 0.04899690400355561, 0.027692531873897308, 0.04761147975174096, 0.05917519323206111, 0.026413840976532987, 0.044039150421360085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01456208238752188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003583207558934376, 0.21724307737809978, 0.2109542746966473, 0.2058210074288268, 0.20316395626731143, 0.21528875645119472, 0.19282650257784895, 0.19493609688456603, 0.2385618586053756, 0.21910320927760552, 0.053976664539057806, 0.048659923414963724, 0.05953241120290509, 0.052991857568291945, 0.054667176133613826, 0.05283447035839994, 0.05915672420288609, 0.04914200217938236, 0.04057490559193977, 0.1172402134699203, 0.11879245075917899, 0.12711745254215634, 0.12534221660527345, 0.12533400367018044, 0.1432081552460519, 0.13260495250399218, 0.1183406877843991, 0.13318427162164714, 0.16912517830091944, 0.1840101875196818, 0.1754351983170629, 0.1677363677090885, 0.17456131148801846, 0.17486490427588164, 0.1772688011184539, 0.17707317223501706, 0.1757079693785215, 0.10827197074669326, 0.1369846589402579, 0.10404804446299187, 0.12484807721716373, 0.13167755407310322, 0.12476696052570901, 0.12514110858872574, 0.13123253163934567, 0.11056472504145409, 0.19175468299881282, 0.16223407695608405, 0.15491172900831063, 0.15132273249504835, 0.1579398829731712, 0.1586736027153305, 0.16667638354615932, 0.15673616887648656, 0.16221861312447616, 0.14755770903918453, 0.15408458208323317, 0.14863617256021666, 0.15504472925132906, 0.15530689426538824, 0.1654305554387493, 0.15841018598238932, 0.16534510070400976, 0.15587946024967425, 0.15700527609150827, 0.1570947099832014, 0.14115602559884188, 0.22054046636046665, 0.17492021807675406, 0.1815044791587035, 0.21692653471831058, 0.1716452763344658, 0.18937193122249707, 0.1485414260023712, 0.19326983373295026, 0.21860544655326453, 0.16644248631503866, 0.19132781246257657, 0.1866340485739315, 0.16407474271992328, 0.13668254334231655, 0.1177362438503089, 0.1773366915636374, 0.20680015644031013, 0.16486767331187202, 0.16729983536278836, 0.18145573371256807, 0.17247189022822496, 0.1930311739730236, 0.1896183077319853, 0.17439441098001585, 0.05446218143954906, 0.06630409530855264, 0.05615525712078073, 0.047339229078536826, 0.056414763586123406, 0.05759092725044013, 0.05291773406302491, 0.047937438555365364, 0.07133214138919941]}, "mutation_prompt": null}
{"id": "5a6c8095-36fa-4679-82d8-f9f11c15f50c", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE algorithm with adaptive mutation control for improved exploration in black box optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3bb3595a-fdb4-4a19-914b-73e6334d3721", "metadata": {"aucs": [0.20098048909411792, 0.20573021905134736, 0.19569949884186644, 0.17686681136764293, 0.19330557799636294, 0.18361402698576745, 0.17611679563351368, 0.2064080566482107, 0.17957974359629514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04698728160387766, 0.04475532342410515, 0.04415528428024551, 0.044349292751383995, 0.049804112385253174, 0.06137592339367659, 0.058914996743807735, 0.04721045671551305, 0.05531932943188744, 0.041533876472293896, 0.034420918962542735, 0.038799361126421905, 0.05791763843916431, 0.04003936959915211, 0.040855171407668034, 0.05138416113503241, 0.04033249409639106, 0.045339945163163975, 0.9917839677505349, 0.9678429691504106, 0.8061316101636835, 0.9848291281586559, 0.8537353478262611, 0.9687971358847782, 0.9897625616988035, 0.9873273082357434, 0.9109843793545118, 0.07668712550099732, 0.09078518391723722, 0.09628568473540566, 0.07374639707399233, 0.07670465940029148, 0.07873999590384739, 0.09380602914207525, 0.0984508982274328, 0.10708980419275471, 0.17547806117325748, 0.1455279082452109, 0.12168967731152902, 0.12419947367959216, 0.14198112877478053, 0.12817173083118127, 0.14555512770411383, 0.17259356876940746, 0.12065266354148885, 0.027578788571598345, 0.015305236235636954, 9.999999999998899e-05, 0.03649372568107501, 9.999999999998899e-05, 9.999999999998899e-05, 0.003783782651808232, 9.999999999998899e-05, 0.0020166795199721976, 0.017417397428916792, 0.006276049479007062, 0.0004849421007353527, 0.008573337805524717, 9.999999999998899e-05, 0.02720695628823655, 0.0005181825996783962, 0.005604099167090815, 0.03405110728432392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07072014181750474, 0.07256985478296774, 0.14790779907398843, 0.04899690400355561, 0.027692531873897308, 0.04761147975174096, 0.05917519323206111, 0.026413840976532987, 0.044039150421360085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01456208238752188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003583207558934376, 0.21724307737809978, 0.2109542746966473, 0.2058210074288268, 0.20316395626731143, 0.21528875645119472, 0.19282650257784895, 0.19493609688456603, 0.2385618586053756, 0.21910320927760552, 0.053976664539057806, 0.048659923414963724, 0.05953241120290509, 0.052991857568291945, 0.054667176133613826, 0.05283447035839994, 0.05915672420288609, 0.04914200217938236, 0.04057490559193977, 0.1172402134699203, 0.11879245075917899, 0.12711745254215634, 0.12534221660527345, 0.12533400367018044, 0.1432081552460519, 0.13260495250399218, 0.1183406877843991, 0.13318427162164714, 0.16912517830091944, 0.1840101875196818, 0.1754351983170629, 0.1677363677090885, 0.17456131148801846, 0.17486490427588164, 0.1772688011184539, 0.17707317223501706, 0.1757079693785215, 0.10827197074669326, 0.1369846589402579, 0.10404804446299187, 0.12484807721716373, 0.13167755407310322, 0.12476696052570901, 0.12514110858872574, 0.13123253163934567, 0.11056472504145409, 0.19175468299881282, 0.16223407695608405, 0.15491172900831063, 0.15132273249504835, 0.1579398829731712, 0.1586736027153305, 0.16667638354615932, 0.15673616887648656, 0.16221861312447616, 0.14755770903918453, 0.15408458208323317, 0.14863617256021666, 0.15504472925132906, 0.15530689426538824, 0.1654305554387493, 0.15841018598238932, 0.16534510070400976, 0.15587946024967425, 0.15700527609150827, 0.1570947099832014, 0.14115602559884188, 0.22054046636046665, 0.17492021807675406, 0.1815044791587035, 0.21692653471831058, 0.1716452763344658, 0.18937193122249707, 0.1485414260023712, 0.19326983373295026, 0.21860544655326453, 0.16644248631503866, 0.19132781246257657, 0.1866340485739315, 0.16407474271992328, 0.13668254334231655, 0.1177362438503089, 0.1773366915636374, 0.20680015644031013, 0.16486767331187202, 0.16729983536278836, 0.18145573371256807, 0.17247189022822496, 0.1930311739730236, 0.1896183077319853, 0.17439441098001585, 0.05446218143954906, 0.06630409530855264, 0.05615525712078073, 0.047339229078536826, 0.056414763586123406, 0.05759092725044013, 0.05291773406302491, 0.047937438555365364, 0.07133214138919941]}, "mutation_prompt": null}
{"id": "04d463e4-0a59-4eeb-8ee7-8c4bda06a331", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                population[i] = np.clip(v, -5.0, 5.0)\n                \n            # Dynamic population resizing\n            if np.random.rand() < 0.1:  # 2% code change\n                self.pop_size = int(min(50, self.pop_size * 1.1))  # Increase population size up to a limit\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Introducing dynamic population resizing to adapt to the optimization problem's characteristics.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 32 is out of bounds for axis 0 with size 30').", "error": "IndexError('index 32 is out of bounds for axis 0 with size 30')", "parent_id": "3bb3595a-fdb4-4a19-914b-73e6334d3721", "metadata": {}, "mutation_prompt": null}
{"id": "2a56bb51-cac5-45f8-b4bc-2ebdd845cbc7", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE algorithm with adaptive mutation control for improved exploration in black box optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3bb3595a-fdb4-4a19-914b-73e6334d3721", "metadata": {"aucs": [0.20098048909411792, 0.20573021905134736, 0.19569949884186644, 0.17686681136764293, 0.19330557799636294, 0.18361402698576745, 0.17611679563351368, 0.2064080566482107, 0.17957974359629514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04698728160387766, 0.04475532342410515, 0.04415528428024551, 0.044349292751383995, 0.049804112385253174, 0.06137592339367659, 0.058914996743807735, 0.04721045671551305, 0.05531932943188744, 0.041533876472293896, 0.034420918962542735, 0.038799361126421905, 0.05791763843916431, 0.04003936959915211, 0.040855171407668034, 0.05138416113503241, 0.04033249409639106, 0.045339945163163975, 0.9917839677505349, 0.9678429691504106, 0.8061316101636835, 0.9848291281586559, 0.8537353478262611, 0.9687971358847782, 0.9897625616988035, 0.9873273082357434, 0.9109843793545118, 0.07668712550099732, 0.09078518391723722, 0.09628568473540566, 0.07374639707399233, 0.07670465940029148, 0.07873999590384739, 0.09380602914207525, 0.0984508982274328, 0.10708980419275471, 0.17547806117325748, 0.1455279082452109, 0.12168967731152902, 0.12419947367959216, 0.14198112877478053, 0.12817173083118127, 0.14555512770411383, 0.17259356876940746, 0.12065266354148885, 0.027578788571598345, 0.015305236235636954, 9.999999999998899e-05, 0.03649372568107501, 9.999999999998899e-05, 9.999999999998899e-05, 0.003783782651808232, 9.999999999998899e-05, 0.0020166795199721976, 0.017417397428916792, 0.006276049479007062, 0.0004849421007353527, 0.008573337805524717, 9.999999999998899e-05, 0.02720695628823655, 0.0005181825996783962, 0.005604099167090815, 0.03405110728432392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07072014181750474, 0.07256985478296774, 0.14790779907398843, 0.04899690400355561, 0.027692531873897308, 0.04761147975174096, 0.05917519323206111, 0.026413840976532987, 0.044039150421360085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01456208238752188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003583207558934376, 0.21724307737809978, 0.2109542746966473, 0.2058210074288268, 0.20316395626731143, 0.21528875645119472, 0.19282650257784895, 0.19493609688456603, 0.2385618586053756, 0.21910320927760552, 0.053976664539057806, 0.048659923414963724, 0.05953241120290509, 0.052991857568291945, 0.054667176133613826, 0.05283447035839994, 0.05915672420288609, 0.04914200217938236, 0.04057490559193977, 0.1172402134699203, 0.11879245075917899, 0.12711745254215634, 0.12534221660527345, 0.12533400367018044, 0.1432081552460519, 0.13260495250399218, 0.1183406877843991, 0.13318427162164714, 0.16912517830091944, 0.1840101875196818, 0.1754351983170629, 0.1677363677090885, 0.17456131148801846, 0.17486490427588164, 0.1772688011184539, 0.17707317223501706, 0.1757079693785215, 0.10827197074669326, 0.1369846589402579, 0.10404804446299187, 0.12484807721716373, 0.13167755407310322, 0.12476696052570901, 0.12514110858872574, 0.13123253163934567, 0.11056472504145409, 0.19175468299881282, 0.16223407695608405, 0.15491172900831063, 0.15132273249504835, 0.1579398829731712, 0.1586736027153305, 0.16667638354615932, 0.15673616887648656, 0.16221861312447616, 0.14755770903918453, 0.15408458208323317, 0.14863617256021666, 0.15504472925132906, 0.15530689426538824, 0.1654305554387493, 0.15841018598238932, 0.16534510070400976, 0.15587946024967425, 0.15700527609150827, 0.1570947099832014, 0.14115602559884188, 0.22054046636046665, 0.17492021807675406, 0.1815044791587035, 0.21692653471831058, 0.1716452763344658, 0.18937193122249707, 0.1485414260023712, 0.19326983373295026, 0.21860544655326453, 0.16644248631503866, 0.19132781246257657, 0.1866340485739315, 0.16407474271992328, 0.13668254334231655, 0.1177362438503089, 0.1773366915636374, 0.20680015644031013, 0.16486767331187202, 0.16729983536278836, 0.18145573371256807, 0.17247189022822496, 0.1930311739730236, 0.1896183077319853, 0.17439441098001585, 0.05446218143954906, 0.06630409530855264, 0.05615525712078073, 0.047339229078536826, 0.056414763586123406, 0.05759092725044013, 0.05291773406302491, 0.047937438555365364, 0.07133214138919941]}, "mutation_prompt": null}
{"id": "d3e71e3d-70f4-48f3-9245-a5cd4f8ccf6f", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE algorithm with adaptive mutation control for improved exploration in black box optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3bb3595a-fdb4-4a19-914b-73e6334d3721", "metadata": {"aucs": [0.20098048909411792, 0.20573021905134736, 0.19569949884186644, 0.17686681136764293, 0.19330557799636294, 0.18361402698576745, 0.17611679563351368, 0.2064080566482107, 0.17957974359629514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04698728160387766, 0.04475532342410515, 0.04415528428024551, 0.044349292751383995, 0.049804112385253174, 0.06137592339367659, 0.058914996743807735, 0.04721045671551305, 0.05531932943188744, 0.041533876472293896, 0.034420918962542735, 0.038799361126421905, 0.05791763843916431, 0.04003936959915211, 0.040855171407668034, 0.05138416113503241, 0.04033249409639106, 0.045339945163163975, 0.9917839677505349, 0.9678429691504106, 0.8061316101636835, 0.9848291281586559, 0.8537353478262611, 0.9687971358847782, 0.9897625616988035, 0.9873273082357434, 0.9109843793545118, 0.07668712550099732, 0.09078518391723722, 0.09628568473540566, 0.07374639707399233, 0.07670465940029148, 0.07873999590384739, 0.09380602914207525, 0.0984508982274328, 0.10708980419275471, 0.17547806117325748, 0.1455279082452109, 0.12168967731152902, 0.12419947367959216, 0.14198112877478053, 0.12817173083118127, 0.14555512770411383, 0.17259356876940746, 0.12065266354148885, 0.027578788571598345, 0.015305236235636954, 9.999999999998899e-05, 0.03649372568107501, 9.999999999998899e-05, 9.999999999998899e-05, 0.003783782651808232, 9.999999999998899e-05, 0.0020166795199721976, 0.017417397428916792, 0.006276049479007062, 0.0004849421007353527, 0.008573337805524717, 9.999999999998899e-05, 0.02720695628823655, 0.0005181825996783962, 0.005604099167090815, 0.03405110728432392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07072014181750474, 0.07256985478296774, 0.14790779907398843, 0.04899690400355561, 0.027692531873897308, 0.04761147975174096, 0.05917519323206111, 0.026413840976532987, 0.044039150421360085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01456208238752188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003583207558934376, 0.21724307737809978, 0.2109542746966473, 0.2058210074288268, 0.20316395626731143, 0.21528875645119472, 0.19282650257784895, 0.19493609688456603, 0.2385618586053756, 0.21910320927760552, 0.053976664539057806, 0.048659923414963724, 0.05953241120290509, 0.052991857568291945, 0.054667176133613826, 0.05283447035839994, 0.05915672420288609, 0.04914200217938236, 0.04057490559193977, 0.1172402134699203, 0.11879245075917899, 0.12711745254215634, 0.12534221660527345, 0.12533400367018044, 0.1432081552460519, 0.13260495250399218, 0.1183406877843991, 0.13318427162164714, 0.16912517830091944, 0.1840101875196818, 0.1754351983170629, 0.1677363677090885, 0.17456131148801846, 0.17486490427588164, 0.1772688011184539, 0.17707317223501706, 0.1757079693785215, 0.10827197074669326, 0.1369846589402579, 0.10404804446299187, 0.12484807721716373, 0.13167755407310322, 0.12476696052570901, 0.12514110858872574, 0.13123253163934567, 0.11056472504145409, 0.19175468299881282, 0.16223407695608405, 0.15491172900831063, 0.15132273249504835, 0.1579398829731712, 0.1586736027153305, 0.16667638354615932, 0.15673616887648656, 0.16221861312447616, 0.14755770903918453, 0.15408458208323317, 0.14863617256021666, 0.15504472925132906, 0.15530689426538824, 0.1654305554387493, 0.15841018598238932, 0.16534510070400976, 0.15587946024967425, 0.15700527609150827, 0.1570947099832014, 0.14115602559884188, 0.22054046636046665, 0.17492021807675406, 0.1815044791587035, 0.21692653471831058, 0.1716452763344658, 0.18937193122249707, 0.1485414260023712, 0.19326983373295026, 0.21860544655326453, 0.16644248631503866, 0.19132781246257657, 0.1866340485739315, 0.16407474271992328, 0.13668254334231655, 0.1177362438503089, 0.1773366915636374, 0.20680015644031013, 0.16486767331187202, 0.16729983536278836, 0.18145573371256807, 0.17247189022822496, 0.1930311739730236, 0.1896183077319853, 0.17439441098001585, 0.05446218143954906, 0.06630409530855264, 0.05615525712078073, 0.047339229078536826, 0.056414763586123406, 0.05759092725044013, 0.05291773406302491, 0.047937438555365364, 0.07133214138919941]}, "mutation_prompt": null}
{"id": "b864fea7-7050-45b4-ab8c-3758bbf25a1f", "solution": "import numpy as np\n\nclass ImprovedEnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1, mut_prob=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = mut_prob\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "ImprovedEnhancedHybridPSODE", "description": "Improved Enhanced HybridPSODE algorithm with adaptive mutation control and dynamic population size for enhanced exploration and exploitation in black box optimization.", "configspace": "", "generation": 15, "fitness": 0.13040235443698908, "feedback": "The algorithm ImprovedEnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.18.", "error": "", "parent_id": "3bb3595a-fdb4-4a19-914b-73e6334d3721", "metadata": {"aucs": [0.20098048909411792, 0.20573021905134736, 0.19569949884186644, 0.17686681136764293, 0.19330557799636294, 0.18361402698576745, 0.17611679563351368, 0.2064080566482107, 0.17957974359629514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04698728160387766, 0.04475532342410515, 0.04415528428024551, 0.044349292751383995, 0.049804112385253174, 0.06137592339367659, 0.058914996743807735, 0.04721045671551305, 0.05531932943188744, 0.041533876472293896, 0.034420918962542735, 0.038799361126421905, 0.05791763843916431, 0.04003936959915211, 0.040855171407668034, 0.05138416113503241, 0.04033249409639106, 0.045339945163163975, 0.9917839677505349, 0.9678429691504106, 0.8061316101636835, 0.9848291281586559, 0.8537353478262611, 0.9687971358847782, 0.9897625616988035, 0.9873273082357434, 0.9109843793545118, 0.07668712550099732, 0.09078518391723722, 0.09628568473540566, 0.07374639707399233, 0.07670465940029148, 0.07873999590384739, 0.09380602914207525, 0.0984508982274328, 0.10708980419275471, 0.17547806117325748, 0.1455279082452109, 0.12168967731152902, 0.12419947367959216, 0.14198112877478053, 0.12817173083118127, 0.14555512770411383, 0.17259356876940746, 0.12065266354148885, 0.027578788571598345, 0.015305236235636954, 9.999999999998899e-05, 0.03649372568107501, 9.999999999998899e-05, 9.999999999998899e-05, 0.003783782651808232, 9.999999999998899e-05, 0.0020166795199721976, 0.017417397428916792, 0.006276049479007062, 0.0004849421007353527, 0.008573337805524717, 9.999999999998899e-05, 0.02720695628823655, 0.0005181825996783962, 0.005604099167090815, 0.03405110728432392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07072014181750474, 0.07256985478296774, 0.14790779907398843, 0.04899690400355561, 0.027692531873897308, 0.04761147975174096, 0.05917519323206111, 0.026413840976532987, 0.044039150421360085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01456208238752188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003583207558934376, 0.21724307737809978, 0.2109542746966473, 0.2058210074288268, 0.20316395626731143, 0.21528875645119472, 0.19282650257784895, 0.19493609688456603, 0.2385618586053756, 0.21910320927760552, 0.053976664539057806, 0.048659923414963724, 0.05953241120290509, 0.052991857568291945, 0.054667176133613826, 0.05283447035839994, 0.05915672420288609, 0.04914200217938236, 0.04057490559193977, 0.1172402134699203, 0.11879245075917899, 0.12711745254215634, 0.12534221660527345, 0.12533400367018044, 0.1432081552460519, 0.13260495250399218, 0.1183406877843991, 0.13318427162164714, 0.16912517830091944, 0.1840101875196818, 0.1754351983170629, 0.1677363677090885, 0.17456131148801846, 0.17486490427588164, 0.1772688011184539, 0.17707317223501706, 0.1757079693785215, 0.10827197074669326, 0.1369846589402579, 0.10404804446299187, 0.12484807721716373, 0.13167755407310322, 0.12476696052570901, 0.12514110858872574, 0.13123253163934567, 0.11056472504145409, 0.19175468299881282, 0.16223407695608405, 0.15491172900831063, 0.15132273249504835, 0.1579398829731712, 0.1586736027153305, 0.16667638354615932, 0.15673616887648656, 0.16221861312447616, 0.14755770903918453, 0.15408458208323317, 0.14863617256021666, 0.15504472925132906, 0.15530689426538824, 0.1654305554387493, 0.15841018598238932, 0.16534510070400976, 0.15587946024967425, 0.15700527609150827, 0.1570947099832014, 0.14115602559884188, 0.22054046636046665, 0.17492021807675406, 0.1815044791587035, 0.21692653471831058, 0.1716452763344658, 0.18937193122249707, 0.1485414260023712, 0.19326983373295026, 0.21860544655326453, 0.16644248631503866, 0.19132781246257657, 0.1866340485739315, 0.16407474271992328, 0.13668254334231655, 0.1177362438503089, 0.1773366915636374, 0.20680015644031013, 0.16486767331187202, 0.16729983536278836, 0.18145573371256807, 0.17247189022822496, 0.1930311739730236, 0.1896183077319853, 0.17439441098001585, 0.05446218143954906, 0.06630409530855264, 0.05615525712078073, 0.047339229078536826, 0.056414763586123406, 0.05759092725044013, 0.05291773406302491, 0.047937438555365364, 0.07133214138919941]}, "mutation_prompt": null}
{"id": "162020fc-cef0-4306-953e-d25ed0d452f7", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE algorithm with adaptive mutation control for improved exploration in black box optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3bb3595a-fdb4-4a19-914b-73e6334d3721", "metadata": {"aucs": [0.20098048909411792, 0.20573021905134736, 0.19569949884186644, 0.17686681136764293, 0.19330557799636294, 0.18361402698576745, 0.17611679563351368, 0.2064080566482107, 0.17957974359629514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04698728160387766, 0.04475532342410515, 0.04415528428024551, 0.044349292751383995, 0.049804112385253174, 0.06137592339367659, 0.058914996743807735, 0.04721045671551305, 0.05531932943188744, 0.041533876472293896, 0.034420918962542735, 0.038799361126421905, 0.05791763843916431, 0.04003936959915211, 0.040855171407668034, 0.05138416113503241, 0.04033249409639106, 0.045339945163163975, 0.9917839677505349, 0.9678429691504106, 0.8061316101636835, 0.9848291281586559, 0.8537353478262611, 0.9687971358847782, 0.9897625616988035, 0.9873273082357434, 0.9109843793545118, 0.07668712550099732, 0.09078518391723722, 0.09628568473540566, 0.07374639707399233, 0.07670465940029148, 0.07873999590384739, 0.09380602914207525, 0.0984508982274328, 0.10708980419275471, 0.17547806117325748, 0.1455279082452109, 0.12168967731152902, 0.12419947367959216, 0.14198112877478053, 0.12817173083118127, 0.14555512770411383, 0.17259356876940746, 0.12065266354148885, 0.027578788571598345, 0.015305236235636954, 9.999999999998899e-05, 0.03649372568107501, 9.999999999998899e-05, 9.999999999998899e-05, 0.003783782651808232, 9.999999999998899e-05, 0.0020166795199721976, 0.017417397428916792, 0.006276049479007062, 0.0004849421007353527, 0.008573337805524717, 9.999999999998899e-05, 0.02720695628823655, 0.0005181825996783962, 0.005604099167090815, 0.03405110728432392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07072014181750474, 0.07256985478296774, 0.14790779907398843, 0.04899690400355561, 0.027692531873897308, 0.04761147975174096, 0.05917519323206111, 0.026413840976532987, 0.044039150421360085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01456208238752188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003583207558934376, 0.21724307737809978, 0.2109542746966473, 0.2058210074288268, 0.20316395626731143, 0.21528875645119472, 0.19282650257784895, 0.19493609688456603, 0.2385618586053756, 0.21910320927760552, 0.053976664539057806, 0.048659923414963724, 0.05953241120290509, 0.052991857568291945, 0.054667176133613826, 0.05283447035839994, 0.05915672420288609, 0.04914200217938236, 0.04057490559193977, 0.1172402134699203, 0.11879245075917899, 0.12711745254215634, 0.12534221660527345, 0.12533400367018044, 0.1432081552460519, 0.13260495250399218, 0.1183406877843991, 0.13318427162164714, 0.16912517830091944, 0.1840101875196818, 0.1754351983170629, 0.1677363677090885, 0.17456131148801846, 0.17486490427588164, 0.1772688011184539, 0.17707317223501706, 0.1757079693785215, 0.10827197074669326, 0.1369846589402579, 0.10404804446299187, 0.12484807721716373, 0.13167755407310322, 0.12476696052570901, 0.12514110858872574, 0.13123253163934567, 0.11056472504145409, 0.19175468299881282, 0.16223407695608405, 0.15491172900831063, 0.15132273249504835, 0.1579398829731712, 0.1586736027153305, 0.16667638354615932, 0.15673616887648656, 0.16221861312447616, 0.14755770903918453, 0.15408458208323317, 0.14863617256021666, 0.15504472925132906, 0.15530689426538824, 0.1654305554387493, 0.15841018598238932, 0.16534510070400976, 0.15587946024967425, 0.15700527609150827, 0.1570947099832014, 0.14115602559884188, 0.22054046636046665, 0.17492021807675406, 0.1815044791587035, 0.21692653471831058, 0.1716452763344658, 0.18937193122249707, 0.1485414260023712, 0.19326983373295026, 0.21860544655326453, 0.16644248631503866, 0.19132781246257657, 0.1866340485739315, 0.16407474271992328, 0.13668254334231655, 0.1177362438503089, 0.1773366915636374, 0.20680015644031013, 0.16486767331187202, 0.16729983536278836, 0.18145573371256807, 0.17247189022822496, 0.1930311739730236, 0.1896183077319853, 0.17439441098001585, 0.05446218143954906, 0.06630409530855264, 0.05615525712078073, 0.047339229078536826, 0.056414763586123406, 0.05759092725044013, 0.05291773406302491, 0.047937438555365364, 0.07133214138919941]}, "mutation_prompt": null}
{"id": "0c9cfc8c-e4cb-4827-a406-91f29fb5a340", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE algorithm with adaptive mutation control for improved exploration in black box optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3bb3595a-fdb4-4a19-914b-73e6334d3721", "metadata": {"aucs": [0.20098048909411792, 0.20573021905134736, 0.19569949884186644, 0.17686681136764293, 0.19330557799636294, 0.18361402698576745, 0.17611679563351368, 0.2064080566482107, 0.17957974359629514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04698728160387766, 0.04475532342410515, 0.04415528428024551, 0.044349292751383995, 0.049804112385253174, 0.06137592339367659, 0.058914996743807735, 0.04721045671551305, 0.05531932943188744, 0.041533876472293896, 0.034420918962542735, 0.038799361126421905, 0.05791763843916431, 0.04003936959915211, 0.040855171407668034, 0.05138416113503241, 0.04033249409639106, 0.045339945163163975, 0.9917839677505349, 0.9678429691504106, 0.8061316101636835, 0.9848291281586559, 0.8537353478262611, 0.9687971358847782, 0.9897625616988035, 0.9873273082357434, 0.9109843793545118, 0.07668712550099732, 0.09078518391723722, 0.09628568473540566, 0.07374639707399233, 0.07670465940029148, 0.07873999590384739, 0.09380602914207525, 0.0984508982274328, 0.10708980419275471, 0.17547806117325748, 0.1455279082452109, 0.12168967731152902, 0.12419947367959216, 0.14198112877478053, 0.12817173083118127, 0.14555512770411383, 0.17259356876940746, 0.12065266354148885, 0.027578788571598345, 0.015305236235636954, 9.999999999998899e-05, 0.03649372568107501, 9.999999999998899e-05, 9.999999999998899e-05, 0.003783782651808232, 9.999999999998899e-05, 0.0020166795199721976, 0.017417397428916792, 0.006276049479007062, 0.0004849421007353527, 0.008573337805524717, 9.999999999998899e-05, 0.02720695628823655, 0.0005181825996783962, 0.005604099167090815, 0.03405110728432392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07072014181750474, 0.07256985478296774, 0.14790779907398843, 0.04899690400355561, 0.027692531873897308, 0.04761147975174096, 0.05917519323206111, 0.026413840976532987, 0.044039150421360085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01456208238752188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003583207558934376, 0.21724307737809978, 0.2109542746966473, 0.2058210074288268, 0.20316395626731143, 0.21528875645119472, 0.19282650257784895, 0.19493609688456603, 0.2385618586053756, 0.21910320927760552, 0.053976664539057806, 0.048659923414963724, 0.05953241120290509, 0.052991857568291945, 0.054667176133613826, 0.05283447035839994, 0.05915672420288609, 0.04914200217938236, 0.04057490559193977, 0.1172402134699203, 0.11879245075917899, 0.12711745254215634, 0.12534221660527345, 0.12533400367018044, 0.1432081552460519, 0.13260495250399218, 0.1183406877843991, 0.13318427162164714, 0.16912517830091944, 0.1840101875196818, 0.1754351983170629, 0.1677363677090885, 0.17456131148801846, 0.17486490427588164, 0.1772688011184539, 0.17707317223501706, 0.1757079693785215, 0.10827197074669326, 0.1369846589402579, 0.10404804446299187, 0.12484807721716373, 0.13167755407310322, 0.12476696052570901, 0.12514110858872574, 0.13123253163934567, 0.11056472504145409, 0.19175468299881282, 0.16223407695608405, 0.15491172900831063, 0.15132273249504835, 0.1579398829731712, 0.1586736027153305, 0.16667638354615932, 0.15673616887648656, 0.16221861312447616, 0.14755770903918453, 0.15408458208323317, 0.14863617256021666, 0.15504472925132906, 0.15530689426538824, 0.1654305554387493, 0.15841018598238932, 0.16534510070400976, 0.15587946024967425, 0.15700527609150827, 0.1570947099832014, 0.14115602559884188, 0.22054046636046665, 0.17492021807675406, 0.1815044791587035, 0.21692653471831058, 0.1716452763344658, 0.18937193122249707, 0.1485414260023712, 0.19326983373295026, 0.21860544655326453, 0.16644248631503866, 0.19132781246257657, 0.1866340485739315, 0.16407474271992328, 0.13668254334231655, 0.1177362438503089, 0.1773366915636374, 0.20680015644031013, 0.16486767331187202, 0.16729983536278836, 0.18145573371256807, 0.17247189022822496, 0.1930311739730236, 0.1896183077319853, 0.17439441098001585, 0.05446218143954906, 0.06630409530855264, 0.05615525712078073, 0.047339229078536826, 0.056414763586123406, 0.05759092725044013, 0.05291773406302491, 0.047937438555365364, 0.07133214138919941]}, "mutation_prompt": null}
{"id": "77be778f-0e68-4482-a673-028250ec2ad9", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE algorithm with adaptive mutation control for improved exploration in black box optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3bb3595a-fdb4-4a19-914b-73e6334d3721", "metadata": {"aucs": [0.20098048909411792, 0.20573021905134736, 0.19569949884186644, 0.17686681136764293, 0.19330557799636294, 0.18361402698576745, 0.17611679563351368, 0.2064080566482107, 0.17957974359629514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04698728160387766, 0.04475532342410515, 0.04415528428024551, 0.044349292751383995, 0.049804112385253174, 0.06137592339367659, 0.058914996743807735, 0.04721045671551305, 0.05531932943188744, 0.041533876472293896, 0.034420918962542735, 0.038799361126421905, 0.05791763843916431, 0.04003936959915211, 0.040855171407668034, 0.05138416113503241, 0.04033249409639106, 0.045339945163163975, 0.9917839677505349, 0.9678429691504106, 0.8061316101636835, 0.9848291281586559, 0.8537353478262611, 0.9687971358847782, 0.9897625616988035, 0.9873273082357434, 0.9109843793545118, 0.07668712550099732, 0.09078518391723722, 0.09628568473540566, 0.07374639707399233, 0.07670465940029148, 0.07873999590384739, 0.09380602914207525, 0.0984508982274328, 0.10708980419275471, 0.17547806117325748, 0.1455279082452109, 0.12168967731152902, 0.12419947367959216, 0.14198112877478053, 0.12817173083118127, 0.14555512770411383, 0.17259356876940746, 0.12065266354148885, 0.027578788571598345, 0.015305236235636954, 9.999999999998899e-05, 0.03649372568107501, 9.999999999998899e-05, 9.999999999998899e-05, 0.003783782651808232, 9.999999999998899e-05, 0.0020166795199721976, 0.017417397428916792, 0.006276049479007062, 0.0004849421007353527, 0.008573337805524717, 9.999999999998899e-05, 0.02720695628823655, 0.0005181825996783962, 0.005604099167090815, 0.03405110728432392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07072014181750474, 0.07256985478296774, 0.14790779907398843, 0.04899690400355561, 0.027692531873897308, 0.04761147975174096, 0.05917519323206111, 0.026413840976532987, 0.044039150421360085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01456208238752188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003583207558934376, 0.21724307737809978, 0.2109542746966473, 0.2058210074288268, 0.20316395626731143, 0.21528875645119472, 0.19282650257784895, 0.19493609688456603, 0.2385618586053756, 0.21910320927760552, 0.053976664539057806, 0.048659923414963724, 0.05953241120290509, 0.052991857568291945, 0.054667176133613826, 0.05283447035839994, 0.05915672420288609, 0.04914200217938236, 0.04057490559193977, 0.1172402134699203, 0.11879245075917899, 0.12711745254215634, 0.12534221660527345, 0.12533400367018044, 0.1432081552460519, 0.13260495250399218, 0.1183406877843991, 0.13318427162164714, 0.16912517830091944, 0.1840101875196818, 0.1754351983170629, 0.1677363677090885, 0.17456131148801846, 0.17486490427588164, 0.1772688011184539, 0.17707317223501706, 0.1757079693785215, 0.10827197074669326, 0.1369846589402579, 0.10404804446299187, 0.12484807721716373, 0.13167755407310322, 0.12476696052570901, 0.12514110858872574, 0.13123253163934567, 0.11056472504145409, 0.19175468299881282, 0.16223407695608405, 0.15491172900831063, 0.15132273249504835, 0.1579398829731712, 0.1586736027153305, 0.16667638354615932, 0.15673616887648656, 0.16221861312447616, 0.14755770903918453, 0.15408458208323317, 0.14863617256021666, 0.15504472925132906, 0.15530689426538824, 0.1654305554387493, 0.15841018598238932, 0.16534510070400976, 0.15587946024967425, 0.15700527609150827, 0.1570947099832014, 0.14115602559884188, 0.22054046636046665, 0.17492021807675406, 0.1815044791587035, 0.21692653471831058, 0.1716452763344658, 0.18937193122249707, 0.1485414260023712, 0.19326983373295026, 0.21860544655326453, 0.16644248631503866, 0.19132781246257657, 0.1866340485739315, 0.16407474271992328, 0.13668254334231655, 0.1177362438503089, 0.1773366915636374, 0.20680015644031013, 0.16486767331187202, 0.16729983536278836, 0.18145573371256807, 0.17247189022822496, 0.1930311739730236, 0.1896183077319853, 0.17439441098001585, 0.05446218143954906, 0.06630409530855264, 0.05615525712078073, 0.047339229078536826, 0.056414763586123406, 0.05759092725044013, 0.05291773406302491, 0.047937438555365364, 0.07133214138919941]}, "mutation_prompt": null}
{"id": "59f7da7b-778f-4599-81fe-b8a44d90d658", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE algorithm with adaptive mutation control for improved exploration in black box optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3bb3595a-fdb4-4a19-914b-73e6334d3721", "metadata": {"aucs": [0.20098048909411792, 0.20573021905134736, 0.19569949884186644, 0.17686681136764293, 0.19330557799636294, 0.18361402698576745, 0.17611679563351368, 0.2064080566482107, 0.17957974359629514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04698728160387766, 0.04475532342410515, 0.04415528428024551, 0.044349292751383995, 0.049804112385253174, 0.06137592339367659, 0.058914996743807735, 0.04721045671551305, 0.05531932943188744, 0.041533876472293896, 0.034420918962542735, 0.038799361126421905, 0.05791763843916431, 0.04003936959915211, 0.040855171407668034, 0.05138416113503241, 0.04033249409639106, 0.045339945163163975, 0.9917839677505349, 0.9678429691504106, 0.8061316101636835, 0.9848291281586559, 0.8537353478262611, 0.9687971358847782, 0.9897625616988035, 0.9873273082357434, 0.9109843793545118, 0.07668712550099732, 0.09078518391723722, 0.09628568473540566, 0.07374639707399233, 0.07670465940029148, 0.07873999590384739, 0.09380602914207525, 0.0984508982274328, 0.10708980419275471, 0.17547806117325748, 0.1455279082452109, 0.12168967731152902, 0.12419947367959216, 0.14198112877478053, 0.12817173083118127, 0.14555512770411383, 0.17259356876940746, 0.12065266354148885, 0.027578788571598345, 0.015305236235636954, 9.999999999998899e-05, 0.03649372568107501, 9.999999999998899e-05, 9.999999999998899e-05, 0.003783782651808232, 9.999999999998899e-05, 0.0020166795199721976, 0.017417397428916792, 0.006276049479007062, 0.0004849421007353527, 0.008573337805524717, 9.999999999998899e-05, 0.02720695628823655, 0.0005181825996783962, 0.005604099167090815, 0.03405110728432392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07072014181750474, 0.07256985478296774, 0.14790779907398843, 0.04899690400355561, 0.027692531873897308, 0.04761147975174096, 0.05917519323206111, 0.026413840976532987, 0.044039150421360085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01456208238752188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003583207558934376, 0.21724307737809978, 0.2109542746966473, 0.2058210074288268, 0.20316395626731143, 0.21528875645119472, 0.19282650257784895, 0.19493609688456603, 0.2385618586053756, 0.21910320927760552, 0.053976664539057806, 0.048659923414963724, 0.05953241120290509, 0.052991857568291945, 0.054667176133613826, 0.05283447035839994, 0.05915672420288609, 0.04914200217938236, 0.04057490559193977, 0.1172402134699203, 0.11879245075917899, 0.12711745254215634, 0.12534221660527345, 0.12533400367018044, 0.1432081552460519, 0.13260495250399218, 0.1183406877843991, 0.13318427162164714, 0.16912517830091944, 0.1840101875196818, 0.1754351983170629, 0.1677363677090885, 0.17456131148801846, 0.17486490427588164, 0.1772688011184539, 0.17707317223501706, 0.1757079693785215, 0.10827197074669326, 0.1369846589402579, 0.10404804446299187, 0.12484807721716373, 0.13167755407310322, 0.12476696052570901, 0.12514110858872574, 0.13123253163934567, 0.11056472504145409, 0.19175468299881282, 0.16223407695608405, 0.15491172900831063, 0.15132273249504835, 0.1579398829731712, 0.1586736027153305, 0.16667638354615932, 0.15673616887648656, 0.16221861312447616, 0.14755770903918453, 0.15408458208323317, 0.14863617256021666, 0.15504472925132906, 0.15530689426538824, 0.1654305554387493, 0.15841018598238932, 0.16534510070400976, 0.15587946024967425, 0.15700527609150827, 0.1570947099832014, 0.14115602559884188, 0.22054046636046665, 0.17492021807675406, 0.1815044791587035, 0.21692653471831058, 0.1716452763344658, 0.18937193122249707, 0.1485414260023712, 0.19326983373295026, 0.21860544655326453, 0.16644248631503866, 0.19132781246257657, 0.1866340485739315, 0.16407474271992328, 0.13668254334231655, 0.1177362438503089, 0.1773366915636374, 0.20680015644031013, 0.16486767331187202, 0.16729983536278836, 0.18145573371256807, 0.17247189022822496, 0.1930311739730236, 0.1896183077319853, 0.17439441098001585, 0.05446218143954906, 0.06630409530855264, 0.05615525712078073, 0.047339229078536826, 0.056414763586123406, 0.05759092725044013, 0.05291773406302491, 0.047937438555365364, 0.07133214138919941]}, "mutation_prompt": null}
{"id": "3070883f-8b8d-4b34-969e-9838e9a9d2d6", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE algorithm with adaptive mutation control for improved exploration in black box optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3bb3595a-fdb4-4a19-914b-73e6334d3721", "metadata": {"aucs": [0.20098048909411792, 0.20573021905134736, 0.19569949884186644, 0.17686681136764293, 0.19330557799636294, 0.18361402698576745, 0.17611679563351368, 0.2064080566482107, 0.17957974359629514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04698728160387766, 0.04475532342410515, 0.04415528428024551, 0.044349292751383995, 0.049804112385253174, 0.06137592339367659, 0.058914996743807735, 0.04721045671551305, 0.05531932943188744, 0.041533876472293896, 0.034420918962542735, 0.038799361126421905, 0.05791763843916431, 0.04003936959915211, 0.040855171407668034, 0.05138416113503241, 0.04033249409639106, 0.045339945163163975, 0.9917839677505349, 0.9678429691504106, 0.8061316101636835, 0.9848291281586559, 0.8537353478262611, 0.9687971358847782, 0.9897625616988035, 0.9873273082357434, 0.9109843793545118, 0.07668712550099732, 0.09078518391723722, 0.09628568473540566, 0.07374639707399233, 0.07670465940029148, 0.07873999590384739, 0.09380602914207525, 0.0984508982274328, 0.10708980419275471, 0.17547806117325748, 0.1455279082452109, 0.12168967731152902, 0.12419947367959216, 0.14198112877478053, 0.12817173083118127, 0.14555512770411383, 0.17259356876940746, 0.12065266354148885, 0.027578788571598345, 0.015305236235636954, 9.999999999998899e-05, 0.03649372568107501, 9.999999999998899e-05, 9.999999999998899e-05, 0.003783782651808232, 9.999999999998899e-05, 0.0020166795199721976, 0.017417397428916792, 0.006276049479007062, 0.0004849421007353527, 0.008573337805524717, 9.999999999998899e-05, 0.02720695628823655, 0.0005181825996783962, 0.005604099167090815, 0.03405110728432392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07072014181750474, 0.07256985478296774, 0.14790779907398843, 0.04899690400355561, 0.027692531873897308, 0.04761147975174096, 0.05917519323206111, 0.026413840976532987, 0.044039150421360085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01456208238752188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003583207558934376, 0.21724307737809978, 0.2109542746966473, 0.2058210074288268, 0.20316395626731143, 0.21528875645119472, 0.19282650257784895, 0.19493609688456603, 0.2385618586053756, 0.21910320927760552, 0.053976664539057806, 0.048659923414963724, 0.05953241120290509, 0.052991857568291945, 0.054667176133613826, 0.05283447035839994, 0.05915672420288609, 0.04914200217938236, 0.04057490559193977, 0.1172402134699203, 0.11879245075917899, 0.12711745254215634, 0.12534221660527345, 0.12533400367018044, 0.1432081552460519, 0.13260495250399218, 0.1183406877843991, 0.13318427162164714, 0.16912517830091944, 0.1840101875196818, 0.1754351983170629, 0.1677363677090885, 0.17456131148801846, 0.17486490427588164, 0.1772688011184539, 0.17707317223501706, 0.1757079693785215, 0.10827197074669326, 0.1369846589402579, 0.10404804446299187, 0.12484807721716373, 0.13167755407310322, 0.12476696052570901, 0.12514110858872574, 0.13123253163934567, 0.11056472504145409, 0.19175468299881282, 0.16223407695608405, 0.15491172900831063, 0.15132273249504835, 0.1579398829731712, 0.1586736027153305, 0.16667638354615932, 0.15673616887648656, 0.16221861312447616, 0.14755770903918453, 0.15408458208323317, 0.14863617256021666, 0.15504472925132906, 0.15530689426538824, 0.1654305554387493, 0.15841018598238932, 0.16534510070400976, 0.15587946024967425, 0.15700527609150827, 0.1570947099832014, 0.14115602559884188, 0.22054046636046665, 0.17492021807675406, 0.1815044791587035, 0.21692653471831058, 0.1716452763344658, 0.18937193122249707, 0.1485414260023712, 0.19326983373295026, 0.21860544655326453, 0.16644248631503866, 0.19132781246257657, 0.1866340485739315, 0.16407474271992328, 0.13668254334231655, 0.1177362438503089, 0.1773366915636374, 0.20680015644031013, 0.16486767331187202, 0.16729983536278836, 0.18145573371256807, 0.17247189022822496, 0.1930311739730236, 0.1896183077319853, 0.17439441098001585, 0.05446218143954906, 0.06630409530855264, 0.05615525712078073, 0.047339229078536826, 0.056414763586123406, 0.05759092725044013, 0.05291773406302491, 0.047937438555365364, 0.07133214138919941]}, "mutation_prompt": null}
{"id": "8005220f-73b4-4fc0-b770-77a070e04f86", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1, mut_prob=0.5, diversify_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = mut_prob\n        self.diversify_rate = diversify_rate\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob]) \n                population[i] = np.clip(v, -5.0, 5.0)\n\n            if np.random.rand() < self.diversify_rate:\n                population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE algorithm with adaptive mutation control and diversity preservation to enhance exploration and exploitation balance in black box optimization.", "configspace": "", "generation": 21, "fitness": 0.12632419277431572, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.17.", "error": "", "parent_id": "3bb3595a-fdb4-4a19-914b-73e6334d3721", "metadata": {"aucs": [0.17213273104457472, 0.21450330360440717, 0.17951508315167886, 0.1944492391737731, 0.17512797504497668, 0.16120899525011134, 0.17282564939538048, 0.1756088666349147, 0.17369300415926214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038108513502378316, 0.05486904013703675, 0.05114749479151992, 0.055727087265639574, 0.060781581824599584, 0.06244031137244632, 0.04841983880290612, 0.05776571129219521, 0.04332916747752624, 0.03784023970890926, 0.03707659329832147, 0.038229305945982395, 0.01959972157639278, 0.037790529413989304, 0.036529494386838834, 0.03866936237976892, 0.041728423732661946, 0.06600435725125386, 0.9259568683915429, 0.8794387034525578, 0.8908511807660983, 0.8592111220860295, 0.5054274363660047, 0.8917142544646466, 0.9689292859796438, 0.9323741875592144, 0.9151576349871362, 0.11550066036528095, 0.08971940643973908, 0.09127550072764357, 0.1006845330854601, 0.0986097061117458, 0.09831024670619404, 0.1262827227901897, 0.08739482641495655, 0.10641398109024869, 0.13727613032291297, 0.11910500178240324, 0.10771497780889727, 0.10888081875549283, 0.12216514382561361, 0.13311429906582983, 0.1367718089339025, 0.14021144354313897, 0.14314218398819045, 9.999999999998899e-05, 0.003325805267080484, 9.999999999998899e-05, 0.03062733690598507, 9.999999999998899e-05, 0.008718944114738059, 9.999999999998899e-05, 0.007273244904085874, 0.01919921484163356, 0.03426837177168729, 0.02694154525878223, 0.023687581743033093, 0.03879228189703676, 9.999999999998899e-05, 0.005734873221468262, 0.021243896858734845, 0.027029444106064116, 0.0008931647805496823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027875908231875468, 0.0227292688025289, 0.06656370352256347, 0.06684556022311539, 0.02802422988499731, 0.07694934896833783, 0.06165062895200624, 0.025168370518914296, 0.037074716761823945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004516092020265372, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006799378543235091, 0.009783247649131743, 0.22049107482124342, 0.20996071517834602, 0.20655910111789955, 0.21910045956390722, 0.21358177705215764, 0.2259845547666126, 0.2197788859419444, 0.1939509103731374, 0.21182055277309386, 0.04976184546980478, 0.06425481289416579, 0.05442347153079374, 0.05732636993759044, 0.051012648744131694, 0.042400821693133195, 0.0652405018769876, 0.05420954834559344, 0.04568687235672497, 0.13863896224776784, 0.13001009307118638, 0.13277493002893803, 0.1272094949071627, 0.14857331668507745, 0.13159252858864834, 0.1221812541448477, 0.12173149783072368, 0.11777367217091739, 0.17751778831687026, 0.1640432080874612, 0.16402473732365375, 0.16385475955532036, 0.1649433006002028, 0.16002585288188054, 0.1723443118409803, 0.17377774300845283, 0.1646881640833362, 0.10491634700868813, 0.11572633392918541, 0.11094558736398996, 0.1284401470413561, 0.13067845582197535, 0.12829815492794283, 0.13148962339266823, 0.1154177032185475, 0.11781768247005298, 0.1548031933493056, 0.18424829245652075, 0.1832860974500673, 0.1836447019770281, 0.16042437640409501, 0.17403850068171545, 0.16093560021909037, 0.15514584157977274, 0.19771579777630222, 0.14353397479587715, 0.1521256031707351, 0.15158227341991937, 0.1451810022111918, 0.13888382058138182, 0.15104869469795013, 0.1511077883720211, 0.1469024523883914, 0.14858295029975455, 0.13553035699035043, 0.18559818422171126, 0.14692375246584977, 0.1624906477786926, 0.1609090813590679, 0.22386920010858347, 0.1765546164330697, 0.196089893429506, 0.16755511347591945, 0.16205715548387256, 0.18159528981285133, 0.15528839237115244, 0.1294833240957869, 0.18330518147820318, 0.16725900566613383, 0.18610102898004943, 0.14957558695010298, 0.23540873642779536, 0.18614918954054505, 0.19192034395005098, 0.16997116893865072, 0.17816893766588615, 0.1970192346658839, 0.197387766033443, 0.18338230591011628, 0.16835915262752055, 0.17564490886328044, 0.05350636860948965, 0.044882097775165164, 0.07932402194293775, 0.05637859433497505, 0.060742139173971754, 0.05619094566241334, 0.053174906961773516, 0.06243780882912975, 0.05534781624220664]}, "mutation_prompt": null}
{"id": "330a163c-f0f0-44cd-9309-f3d5239ee62f", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE algorithm with adaptive mutation control for improved exploration in black box optimization.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3bb3595a-fdb4-4a19-914b-73e6334d3721", "metadata": {"aucs": [0.20098048909411792, 0.20573021905134736, 0.19569949884186644, 0.17686681136764293, 0.19330557799636294, 0.18361402698576745, 0.17611679563351368, 0.2064080566482107, 0.17957974359629514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04698728160387766, 0.04475532342410515, 0.04415528428024551, 0.044349292751383995, 0.049804112385253174, 0.06137592339367659, 0.058914996743807735, 0.04721045671551305, 0.05531932943188744, 0.041533876472293896, 0.034420918962542735, 0.038799361126421905, 0.05791763843916431, 0.04003936959915211, 0.040855171407668034, 0.05138416113503241, 0.04033249409639106, 0.045339945163163975, 0.9917839677505349, 0.9678429691504106, 0.8061316101636835, 0.9848291281586559, 0.8537353478262611, 0.9687971358847782, 0.9897625616988035, 0.9873273082357434, 0.9109843793545118, 0.07668712550099732, 0.09078518391723722, 0.09628568473540566, 0.07374639707399233, 0.07670465940029148, 0.07873999590384739, 0.09380602914207525, 0.0984508982274328, 0.10708980419275471, 0.17547806117325748, 0.1455279082452109, 0.12168967731152902, 0.12419947367959216, 0.14198112877478053, 0.12817173083118127, 0.14555512770411383, 0.17259356876940746, 0.12065266354148885, 0.027578788571598345, 0.015305236235636954, 9.999999999998899e-05, 0.03649372568107501, 9.999999999998899e-05, 9.999999999998899e-05, 0.003783782651808232, 9.999999999998899e-05, 0.0020166795199721976, 0.017417397428916792, 0.006276049479007062, 0.0004849421007353527, 0.008573337805524717, 9.999999999998899e-05, 0.02720695628823655, 0.0005181825996783962, 0.005604099167090815, 0.03405110728432392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07072014181750474, 0.07256985478296774, 0.14790779907398843, 0.04899690400355561, 0.027692531873897308, 0.04761147975174096, 0.05917519323206111, 0.026413840976532987, 0.044039150421360085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01456208238752188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003583207558934376, 0.21724307737809978, 0.2109542746966473, 0.2058210074288268, 0.20316395626731143, 0.21528875645119472, 0.19282650257784895, 0.19493609688456603, 0.2385618586053756, 0.21910320927760552, 0.053976664539057806, 0.048659923414963724, 0.05953241120290509, 0.052991857568291945, 0.054667176133613826, 0.05283447035839994, 0.05915672420288609, 0.04914200217938236, 0.04057490559193977, 0.1172402134699203, 0.11879245075917899, 0.12711745254215634, 0.12534221660527345, 0.12533400367018044, 0.1432081552460519, 0.13260495250399218, 0.1183406877843991, 0.13318427162164714, 0.16912517830091944, 0.1840101875196818, 0.1754351983170629, 0.1677363677090885, 0.17456131148801846, 0.17486490427588164, 0.1772688011184539, 0.17707317223501706, 0.1757079693785215, 0.10827197074669326, 0.1369846589402579, 0.10404804446299187, 0.12484807721716373, 0.13167755407310322, 0.12476696052570901, 0.12514110858872574, 0.13123253163934567, 0.11056472504145409, 0.19175468299881282, 0.16223407695608405, 0.15491172900831063, 0.15132273249504835, 0.1579398829731712, 0.1586736027153305, 0.16667638354615932, 0.15673616887648656, 0.16221861312447616, 0.14755770903918453, 0.15408458208323317, 0.14863617256021666, 0.15504472925132906, 0.15530689426538824, 0.1654305554387493, 0.15841018598238932, 0.16534510070400976, 0.15587946024967425, 0.15700527609150827, 0.1570947099832014, 0.14115602559884188, 0.22054046636046665, 0.17492021807675406, 0.1815044791587035, 0.21692653471831058, 0.1716452763344658, 0.18937193122249707, 0.1485414260023712, 0.19326983373295026, 0.21860544655326453, 0.16644248631503866, 0.19132781246257657, 0.1866340485739315, 0.16407474271992328, 0.13668254334231655, 0.1177362438503089, 0.1773366915636374, 0.20680015644031013, 0.16486767331187202, 0.16729983536278836, 0.18145573371256807, 0.17247189022822496, 0.1930311739730236, 0.1896183077319853, 0.17439441098001585, 0.05446218143954906, 0.06630409530855264, 0.05615525712078073, 0.047339229078536826, 0.056414763586123406, 0.05759092725044013, 0.05291773406302491, 0.047937438555365364, 0.07133214138919941]}, "mutation_prompt": null}
{"id": "0c0fb67e-bcda-485a-9295-8408fa588b93", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Improved Enhanced HybridPSODE algorithm by dynamically adjusting mutation probability during the search process.", "configspace": "", "generation": 23, "fitness": 0.13095322973683376, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.18.", "error": "", "parent_id": "3bb3595a-fdb4-4a19-914b-73e6334d3721", "metadata": {"aucs": [0.1823525159600763, 0.18773614307351594, 0.19769917154988859, 0.18950678045717917, 0.18860193510271261, 0.18214405810114676, 0.17685870879401921, 0.17715925177119518, 0.19584193831897734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07646951551250347, 0.06588652284744545, 0.052463982681689614, 0.0503735379143474, 0.05945876654993176, 0.07851793829823761, 0.05730823407432095, 0.04932470337700867, 0.05307415821549699, 0.04891628710393292, 0.042260352590922756, 0.03587732429412116, 0.0406182158484345, 0.03315872855814361, 0.044342315155961654, 0.05319416681728506, 0.03601238774394255, 0.0461997160051566, 0.99230868365182, 0.899970008577843, 0.9642580790672407, 0.7116068303896368, 0.9584775389493663, 0.9667310686202306, 0.9504591622140656, 0.920192042575977, 0.9579138303061554, 0.0838306199576635, 0.08461231005265968, 0.11068577789791234, 0.12385498146469831, 0.10940701697800814, 0.05928925554706821, 0.08783999063871395, 0.07588316092923464, 0.12498965601051548, 0.11641958095622462, 0.19261879243444147, 0.15094205031368746, 0.12550759325874128, 0.15852688435894435, 0.11958360081167063, 0.15071367399348423, 0.1313132125772103, 0.1581641173629812, 0.04526377667785442, 0.014230312137955337, 0.011584419542196356, 0.014327808350187876, 0.005145991455398291, 0.00022964033700811903, 0.013691991372335677, 0.022862653203638228, 0.04602580892271513, 0.007243000860356008, 0.00029938113978356107, 0.03934633610952898, 0.012715263907227214, 9.999999999998899e-05, 0.009397251735239864, 0.041572138020132265, 0.030896954851167502, 0.017593937918076508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03824957846117272, 0.023575416312733077, 0.04683404186108875, 0.08823141074250829, 0.04258899012333772, 0.04798877547997615, 0.0759291477514984, 0.05252861775261641, 0.05747928147404002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003922308612809178, 9.999999999998899e-05, 0.005527310342403835, 0.0001013114516917879, 9.999999999998899e-05, 0.0011747610797537833, 0.0078970542783674, 0.005180554323758191, 0.00010446582414080918, 0.25298557671220556, 0.21062955673265282, 0.22251812694953121, 0.232840477232386, 0.2067790052476346, 0.26034558125216, 0.2205878817068303, 0.2032522964121467, 0.22103172158212436, 0.0520420093416778, 0.04956748876700845, 0.06602157598344438, 0.04977861476796008, 0.03637076871672851, 0.055469011988337424, 0.05204410620616984, 0.047952849550456866, 0.06595980594889683, 0.12865184933378515, 0.12893014826085314, 0.15198428836935296, 0.1314264909524554, 0.16079433310790792, 0.1305240713954665, 0.19058112548008987, 0.14307390916189655, 0.14032306362670877, 0.16933131961439463, 0.1700079795025895, 0.1715055085429632, 0.1725716591120403, 0.163312096720577, 0.1738832539533769, 0.1625263104561736, 0.17568024950184058, 0.16534188705535013, 0.1200484947779753, 0.141002038703554, 0.12304952594331975, 0.13050257282520394, 0.11717542729101371, 0.13408844745640525, 0.12079403512833231, 0.12639291475662162, 0.12101949641505994, 0.175600056024386, 0.1521447035609812, 0.15912988216364587, 0.15546379693203993, 0.1659252663136076, 0.1723859290274259, 0.1457026773031339, 0.15894495487379878, 0.17172488034031597, 0.15542449361984345, 0.14642348117992465, 0.15288818759866574, 0.1470239061142885, 0.1769708665503693, 0.16015809684972482, 0.1623049248545998, 0.1562233785946031, 0.1476365757594985, 0.14882805955174971, 0.1509168937040738, 0.1759559725515295, 0.16816419543366612, 0.1581370072389029, 0.19949415326765907, 0.17034473650249693, 0.15720557832826276, 0.15711353808476414, 0.14238797764814048, 0.18732018300336462, 0.1407772026451476, 0.1557574351279727, 0.21596859192807671, 0.1785230858351935, 0.13448009634621594, 0.14456063619225024, 0.14034812832038046, 0.17887187597400045, 0.17717519093108514, 0.1737028857614611, 0.17533951698739347, 0.17758206166596524, 0.18199401603317322, 0.18086288429759934, 0.17695090626400756, 0.2035598583525522, 0.050968822569014804, 0.058815586880731296, 0.05364759718082146, 0.0487215997556244, 0.0531033487321807, 0.04717830109051391, 0.047012710140103775, 0.05929759168581894, 0.06185781791320499]}, "mutation_prompt": null}
{"id": "87e2fe08-5950-477f-a93b-264703ca2cd6", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Improved Enhanced HybridPSODE algorithm by dynamically adjusting mutation probability during the search process.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c0fb67e-bcda-485a-9295-8408fa588b93", "metadata": {"aucs": [0.1823525159600763, 0.18773614307351594, 0.19769917154988859, 0.18950678045717917, 0.18860193510271261, 0.18214405810114676, 0.17685870879401921, 0.17715925177119518, 0.19584193831897734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07646951551250347, 0.06588652284744545, 0.052463982681689614, 0.0503735379143474, 0.05945876654993176, 0.07851793829823761, 0.05730823407432095, 0.04932470337700867, 0.05307415821549699, 0.04891628710393292, 0.042260352590922756, 0.03587732429412116, 0.0406182158484345, 0.03315872855814361, 0.044342315155961654, 0.05319416681728506, 0.03601238774394255, 0.0461997160051566, 0.99230868365182, 0.899970008577843, 0.9642580790672407, 0.7116068303896368, 0.9584775389493663, 0.9667310686202306, 0.9504591622140656, 0.920192042575977, 0.9579138303061554, 0.0838306199576635, 0.08461231005265968, 0.11068577789791234, 0.12385498146469831, 0.10940701697800814, 0.05928925554706821, 0.08783999063871395, 0.07588316092923464, 0.12498965601051548, 0.11641958095622462, 0.19261879243444147, 0.15094205031368746, 0.12550759325874128, 0.15852688435894435, 0.11958360081167063, 0.15071367399348423, 0.1313132125772103, 0.1581641173629812, 0.04526377667785442, 0.014230312137955337, 0.011584419542196356, 0.014327808350187876, 0.005145991455398291, 0.00022964033700811903, 0.013691991372335677, 0.022862653203638228, 0.04602580892271513, 0.007243000860356008, 0.00029938113978356107, 0.03934633610952898, 0.012715263907227214, 9.999999999998899e-05, 0.009397251735239864, 0.041572138020132265, 0.030896954851167502, 0.017593937918076508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03824957846117272, 0.023575416312733077, 0.04683404186108875, 0.08823141074250829, 0.04258899012333772, 0.04798877547997615, 0.0759291477514984, 0.05252861775261641, 0.05747928147404002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003922308612809178, 9.999999999998899e-05, 0.005527310342403835, 0.0001013114516917879, 9.999999999998899e-05, 0.0011747610797537833, 0.0078970542783674, 0.005180554323758191, 0.00010446582414080918, 0.25298557671220556, 0.21062955673265282, 0.22251812694953121, 0.232840477232386, 0.2067790052476346, 0.26034558125216, 0.2205878817068303, 0.2032522964121467, 0.22103172158212436, 0.0520420093416778, 0.04956748876700845, 0.06602157598344438, 0.04977861476796008, 0.03637076871672851, 0.055469011988337424, 0.05204410620616984, 0.047952849550456866, 0.06595980594889683, 0.12865184933378515, 0.12893014826085314, 0.15198428836935296, 0.1314264909524554, 0.16079433310790792, 0.1305240713954665, 0.19058112548008987, 0.14307390916189655, 0.14032306362670877, 0.16933131961439463, 0.1700079795025895, 0.1715055085429632, 0.1725716591120403, 0.163312096720577, 0.1738832539533769, 0.1625263104561736, 0.17568024950184058, 0.16534188705535013, 0.1200484947779753, 0.141002038703554, 0.12304952594331975, 0.13050257282520394, 0.11717542729101371, 0.13408844745640525, 0.12079403512833231, 0.12639291475662162, 0.12101949641505994, 0.175600056024386, 0.1521447035609812, 0.15912988216364587, 0.15546379693203993, 0.1659252663136076, 0.1723859290274259, 0.1457026773031339, 0.15894495487379878, 0.17172488034031597, 0.15542449361984345, 0.14642348117992465, 0.15288818759866574, 0.1470239061142885, 0.1769708665503693, 0.16015809684972482, 0.1623049248545998, 0.1562233785946031, 0.1476365757594985, 0.14882805955174971, 0.1509168937040738, 0.1759559725515295, 0.16816419543366612, 0.1581370072389029, 0.19949415326765907, 0.17034473650249693, 0.15720557832826276, 0.15711353808476414, 0.14238797764814048, 0.18732018300336462, 0.1407772026451476, 0.1557574351279727, 0.21596859192807671, 0.1785230858351935, 0.13448009634621594, 0.14456063619225024, 0.14034812832038046, 0.17887187597400045, 0.17717519093108514, 0.1737028857614611, 0.17533951698739347, 0.17758206166596524, 0.18199401603317322, 0.18086288429759934, 0.17695090626400756, 0.2035598583525522, 0.050968822569014804, 0.058815586880731296, 0.05364759718082146, 0.0487215997556244, 0.0531033487321807, 0.04717830109051391, 0.047012710140103775, 0.05929759168581894, 0.06185781791320499]}, "mutation_prompt": null}
{"id": "178fe082-29fc-4dd2-ba0f-0e37f6985708", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def crowding_distance(self, population, fitness):\n        sort_order = np.argsort(fitness)\n        crowding_dist = np.zeros(self.pop_size)\n        crowding_dist[sort_order[0]] = crowding_dist[sort_order[-1]] = np.inf\n        for i in range(1, self.pop_size - 1):\n            crowding_dist[sort_order[i]] += fitness[sort_order[i + 1]] - fitness[sort_order[i - 1]]\n        return crowding_dist\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            crowding_dist = self.crowding_distance(population, fitness)\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i] or crowding_dist[i] < crowding_dist[np.argmax(crowding_dist)]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Enhancing diversity maintenance by incorporating crowding distance measure into selection mechanism.", "configspace": "", "generation": 25, "fitness": 0.12175340918759837, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "0c0fb67e-bcda-485a-9295-8408fa588b93", "metadata": {"aucs": [0.15768974131642377, 0.16176735200470593, 0.18650773880449412, 0.15210491704870366, 0.16836496730357775, 0.18605980366368335, 0.1697704336260495, 0.20113877202140806, 0.1853158269134828, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042950094231147706, 0.03734418540514528, 0.04550208444625936, 0.03835790137663331, 0.034452677603465265, 0.03508299975936702, 0.04749537672241588, 0.037798380031210055, 0.0355457337073507, 0.025064970898230454, 0.02995993666742447, 0.04452478641441815, 0.04022177919654224, 0.02770894894987741, 0.03477165967051554, 0.0189678683769664, 0.02950813763520277, 0.025128398794013296, 0.9870903050145183, 0.9933946542200859, 0.9371885410630332, 0.9910673600610372, 0.9736135609845353, 0.9625358023377358, 0.9880168253004409, 0.9891027867372104, 0.9608708231373064, 0.12267757978560434, 0.07092207818448404, 0.053732710379398085, 0.08013986003152263, 0.07683978265198643, 0.06374960368470839, 0.06864188261632098, 0.0912955481696135, 0.08255207112445462, 0.1360887265920313, 0.12775971249877294, 0.13761760514929888, 0.12825856340540087, 0.11933053463430732, 0.12186383579434856, 0.12321233446104729, 0.09822316845058798, 0.1220097801791391, 0.0013839432156129705, 0.010189223438255235, 9.999999999998899e-05, 0.020055457131650467, 0.001950485742948871, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0030404928426198685, 0.0052410189696471265, 0.008540368964695566, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004953949438715188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09649938417744564, 0.0414078948531762, 0.07207308434851278, 0.006792701252501088, 0.026500284922768902, 0.05191678169609881, 0.032655678164266844, 0.04357155638878363, 0.03983232759582589, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014750836137614742, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1688224658275711, 0.18510421545924793, 0.18864309411106905, 0.2024731313168574, 0.17878934293724635, 0.1911622543260656, 0.20040695712833334, 0.1815205196185692, 0.22249899156859965, 0.044588575201153446, 0.05878082656490191, 0.04521561089635884, 0.03920375248328034, 0.04328375606835466, 0.050742805834920746, 0.03481690823289374, 0.05680267775216452, 0.04292395295181339, 0.11601273926070066, 0.14937240654675932, 0.11613439784668367, 0.13444045702157548, 0.14999749398780182, 0.1345135855423223, 0.11606406566725802, 0.12275168022340588, 0.1481935905222299, 0.18069553289432294, 0.14938764193495513, 0.16402035548343952, 0.14668988196629928, 0.15972023378969968, 0.16777853653790442, 0.1467639937654669, 0.17377774300845283, 0.1934886390887265, 0.10138828665267463, 0.11138807789795757, 0.09371585657680048, 0.1161750662055876, 0.10303561945270134, 0.10849162843112903, 0.10927770846602403, 0.10819610983501204, 0.10899169916279206, 0.19989599511963363, 0.1502013782846392, 0.13656810901614758, 0.1404710304182648, 0.14910733381621832, 0.1400678651146896, 0.1362012382302903, 0.15073894985705205, 0.14587036812826515, 0.14223431485698745, 0.1078221241020818, 0.1489645959742435, 0.12531367672104132, 0.1578350216276262, 0.14851188401048043, 0.11933422932351956, 0.1356214185737079, 0.10807903687839715, 0.11511998102555221, 0.1452456993407084, 0.1365150320990901, 0.13561066340604921, 0.15516510926497307, 0.13258063201377313, 0.1478228733639435, 0.18715118937994946, 0.1657506935579942, 0.13813352607092333, 0.12261138194922372, 0.143746218514196, 0.11127682123105498, 0.15937977230056988, 0.16884167623997925, 0.1563987712114746, 0.2543416271191815, 0.16141944085049853, 0.1772422281131667, 0.18170978185576236, 0.16428678337890235, 0.18011888517767016, 0.1711303899542691, 0.16248771099014425, 0.18858725259762665, 0.17247824047014182, 0.17027061854368786, 0.04305230978765817, 0.03931467208063677, 0.04886955742735877, 0.045373217760731666, 0.0411500336310483, 0.04603223406237811, 0.04197947413136427, 0.05899942137643188, 0.044438356641677834]}, "mutation_prompt": null}
{"id": "5be3f8fc-f36c-4ea8-ae84-4604bc39e3cc", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Improved Enhanced HybridPSODE algorithm by dynamically adjusting mutation probability during the search process.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c0fb67e-bcda-485a-9295-8408fa588b93", "metadata": {"aucs": [0.1823525159600763, 0.18773614307351594, 0.19769917154988859, 0.18950678045717917, 0.18860193510271261, 0.18214405810114676, 0.17685870879401921, 0.17715925177119518, 0.19584193831897734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07646951551250347, 0.06588652284744545, 0.052463982681689614, 0.0503735379143474, 0.05945876654993176, 0.07851793829823761, 0.05730823407432095, 0.04932470337700867, 0.05307415821549699, 0.04891628710393292, 0.042260352590922756, 0.03587732429412116, 0.0406182158484345, 0.03315872855814361, 0.044342315155961654, 0.05319416681728506, 0.03601238774394255, 0.0461997160051566, 0.99230868365182, 0.899970008577843, 0.9642580790672407, 0.7116068303896368, 0.9584775389493663, 0.9667310686202306, 0.9504591622140656, 0.920192042575977, 0.9579138303061554, 0.0838306199576635, 0.08461231005265968, 0.11068577789791234, 0.12385498146469831, 0.10940701697800814, 0.05928925554706821, 0.08783999063871395, 0.07588316092923464, 0.12498965601051548, 0.11641958095622462, 0.19261879243444147, 0.15094205031368746, 0.12550759325874128, 0.15852688435894435, 0.11958360081167063, 0.15071367399348423, 0.1313132125772103, 0.1581641173629812, 0.04526377667785442, 0.014230312137955337, 0.011584419542196356, 0.014327808350187876, 0.005145991455398291, 0.00022964033700811903, 0.013691991372335677, 0.022862653203638228, 0.04602580892271513, 0.007243000860356008, 0.00029938113978356107, 0.03934633610952898, 0.012715263907227214, 9.999999999998899e-05, 0.009397251735239864, 0.041572138020132265, 0.030896954851167502, 0.017593937918076508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03824957846117272, 0.023575416312733077, 0.04683404186108875, 0.08823141074250829, 0.04258899012333772, 0.04798877547997615, 0.0759291477514984, 0.05252861775261641, 0.05747928147404002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003922308612809178, 9.999999999998899e-05, 0.005527310342403835, 0.0001013114516917879, 9.999999999998899e-05, 0.0011747610797537833, 0.0078970542783674, 0.005180554323758191, 0.00010446582414080918, 0.25298557671220556, 0.21062955673265282, 0.22251812694953121, 0.232840477232386, 0.2067790052476346, 0.26034558125216, 0.2205878817068303, 0.2032522964121467, 0.22103172158212436, 0.0520420093416778, 0.04956748876700845, 0.06602157598344438, 0.04977861476796008, 0.03637076871672851, 0.055469011988337424, 0.05204410620616984, 0.047952849550456866, 0.06595980594889683, 0.12865184933378515, 0.12893014826085314, 0.15198428836935296, 0.1314264909524554, 0.16079433310790792, 0.1305240713954665, 0.19058112548008987, 0.14307390916189655, 0.14032306362670877, 0.16933131961439463, 0.1700079795025895, 0.1715055085429632, 0.1725716591120403, 0.163312096720577, 0.1738832539533769, 0.1625263104561736, 0.17568024950184058, 0.16534188705535013, 0.1200484947779753, 0.141002038703554, 0.12304952594331975, 0.13050257282520394, 0.11717542729101371, 0.13408844745640525, 0.12079403512833231, 0.12639291475662162, 0.12101949641505994, 0.175600056024386, 0.1521447035609812, 0.15912988216364587, 0.15546379693203993, 0.1659252663136076, 0.1723859290274259, 0.1457026773031339, 0.15894495487379878, 0.17172488034031597, 0.15542449361984345, 0.14642348117992465, 0.15288818759866574, 0.1470239061142885, 0.1769708665503693, 0.16015809684972482, 0.1623049248545998, 0.1562233785946031, 0.1476365757594985, 0.14882805955174971, 0.1509168937040738, 0.1759559725515295, 0.16816419543366612, 0.1581370072389029, 0.19949415326765907, 0.17034473650249693, 0.15720557832826276, 0.15711353808476414, 0.14238797764814048, 0.18732018300336462, 0.1407772026451476, 0.1557574351279727, 0.21596859192807671, 0.1785230858351935, 0.13448009634621594, 0.14456063619225024, 0.14034812832038046, 0.17887187597400045, 0.17717519093108514, 0.1737028857614611, 0.17533951698739347, 0.17758206166596524, 0.18199401603317322, 0.18086288429759934, 0.17695090626400756, 0.2035598583525522, 0.050968822569014804, 0.058815586880731296, 0.05364759718082146, 0.0487215997556244, 0.0531033487321807, 0.04717830109051391, 0.047012710140103775, 0.05929759168581894, 0.06185781791320499]}, "mutation_prompt": null}
{"id": "8a21c82b-e6ce-4f71-8d3a-bbc8881cd477", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Improved Enhanced HybridPSODE algorithm by dynamically adjusting mutation probability during the search process.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c0fb67e-bcda-485a-9295-8408fa588b93", "metadata": {"aucs": [0.1823525159600763, 0.18773614307351594, 0.19769917154988859, 0.18950678045717917, 0.18860193510271261, 0.18214405810114676, 0.17685870879401921, 0.17715925177119518, 0.19584193831897734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07646951551250347, 0.06588652284744545, 0.052463982681689614, 0.0503735379143474, 0.05945876654993176, 0.07851793829823761, 0.05730823407432095, 0.04932470337700867, 0.05307415821549699, 0.04891628710393292, 0.042260352590922756, 0.03587732429412116, 0.0406182158484345, 0.03315872855814361, 0.044342315155961654, 0.05319416681728506, 0.03601238774394255, 0.0461997160051566, 0.99230868365182, 0.899970008577843, 0.9642580790672407, 0.7116068303896368, 0.9584775389493663, 0.9667310686202306, 0.9504591622140656, 0.920192042575977, 0.9579138303061554, 0.0838306199576635, 0.08461231005265968, 0.11068577789791234, 0.12385498146469831, 0.10940701697800814, 0.05928925554706821, 0.08783999063871395, 0.07588316092923464, 0.12498965601051548, 0.11641958095622462, 0.19261879243444147, 0.15094205031368746, 0.12550759325874128, 0.15852688435894435, 0.11958360081167063, 0.15071367399348423, 0.1313132125772103, 0.1581641173629812, 0.04526377667785442, 0.014230312137955337, 0.011584419542196356, 0.014327808350187876, 0.005145991455398291, 0.00022964033700811903, 0.013691991372335677, 0.022862653203638228, 0.04602580892271513, 0.007243000860356008, 0.00029938113978356107, 0.03934633610952898, 0.012715263907227214, 9.999999999998899e-05, 0.009397251735239864, 0.041572138020132265, 0.030896954851167502, 0.017593937918076508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03824957846117272, 0.023575416312733077, 0.04683404186108875, 0.08823141074250829, 0.04258899012333772, 0.04798877547997615, 0.0759291477514984, 0.05252861775261641, 0.05747928147404002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003922308612809178, 9.999999999998899e-05, 0.005527310342403835, 0.0001013114516917879, 9.999999999998899e-05, 0.0011747610797537833, 0.0078970542783674, 0.005180554323758191, 0.00010446582414080918, 0.25298557671220556, 0.21062955673265282, 0.22251812694953121, 0.232840477232386, 0.2067790052476346, 0.26034558125216, 0.2205878817068303, 0.2032522964121467, 0.22103172158212436, 0.0520420093416778, 0.04956748876700845, 0.06602157598344438, 0.04977861476796008, 0.03637076871672851, 0.055469011988337424, 0.05204410620616984, 0.047952849550456866, 0.06595980594889683, 0.12865184933378515, 0.12893014826085314, 0.15198428836935296, 0.1314264909524554, 0.16079433310790792, 0.1305240713954665, 0.19058112548008987, 0.14307390916189655, 0.14032306362670877, 0.16933131961439463, 0.1700079795025895, 0.1715055085429632, 0.1725716591120403, 0.163312096720577, 0.1738832539533769, 0.1625263104561736, 0.17568024950184058, 0.16534188705535013, 0.1200484947779753, 0.141002038703554, 0.12304952594331975, 0.13050257282520394, 0.11717542729101371, 0.13408844745640525, 0.12079403512833231, 0.12639291475662162, 0.12101949641505994, 0.175600056024386, 0.1521447035609812, 0.15912988216364587, 0.15546379693203993, 0.1659252663136076, 0.1723859290274259, 0.1457026773031339, 0.15894495487379878, 0.17172488034031597, 0.15542449361984345, 0.14642348117992465, 0.15288818759866574, 0.1470239061142885, 0.1769708665503693, 0.16015809684972482, 0.1623049248545998, 0.1562233785946031, 0.1476365757594985, 0.14882805955174971, 0.1509168937040738, 0.1759559725515295, 0.16816419543366612, 0.1581370072389029, 0.19949415326765907, 0.17034473650249693, 0.15720557832826276, 0.15711353808476414, 0.14238797764814048, 0.18732018300336462, 0.1407772026451476, 0.1557574351279727, 0.21596859192807671, 0.1785230858351935, 0.13448009634621594, 0.14456063619225024, 0.14034812832038046, 0.17887187597400045, 0.17717519093108514, 0.1737028857614611, 0.17533951698739347, 0.17758206166596524, 0.18199401603317322, 0.18086288429759934, 0.17695090626400756, 0.2035598583525522, 0.050968822569014804, 0.058815586880731296, 0.05364759718082146, 0.0487215997556244, 0.0531033487321807, 0.04717830109051391, 0.047012710140103775, 0.05929759168581894, 0.06185781791320499]}, "mutation_prompt": null}
{"id": "6ec49bcb-0887-47be-92aa-6182fe21baa3", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Improved Enhanced HybridPSODE algorithm by dynamically adjusting mutation probability during the search process.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c0fb67e-bcda-485a-9295-8408fa588b93", "metadata": {"aucs": [0.1823525159600763, 0.18773614307351594, 0.19769917154988859, 0.18950678045717917, 0.18860193510271261, 0.18214405810114676, 0.17685870879401921, 0.17715925177119518, 0.19584193831897734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07646951551250347, 0.06588652284744545, 0.052463982681689614, 0.0503735379143474, 0.05945876654993176, 0.07851793829823761, 0.05730823407432095, 0.04932470337700867, 0.05307415821549699, 0.04891628710393292, 0.042260352590922756, 0.03587732429412116, 0.0406182158484345, 0.03315872855814361, 0.044342315155961654, 0.05319416681728506, 0.03601238774394255, 0.0461997160051566, 0.99230868365182, 0.899970008577843, 0.9642580790672407, 0.7116068303896368, 0.9584775389493663, 0.9667310686202306, 0.9504591622140656, 0.920192042575977, 0.9579138303061554, 0.0838306199576635, 0.08461231005265968, 0.11068577789791234, 0.12385498146469831, 0.10940701697800814, 0.05928925554706821, 0.08783999063871395, 0.07588316092923464, 0.12498965601051548, 0.11641958095622462, 0.19261879243444147, 0.15094205031368746, 0.12550759325874128, 0.15852688435894435, 0.11958360081167063, 0.15071367399348423, 0.1313132125772103, 0.1581641173629812, 0.04526377667785442, 0.014230312137955337, 0.011584419542196356, 0.014327808350187876, 0.005145991455398291, 0.00022964033700811903, 0.013691991372335677, 0.022862653203638228, 0.04602580892271513, 0.007243000860356008, 0.00029938113978356107, 0.03934633610952898, 0.012715263907227214, 9.999999999998899e-05, 0.009397251735239864, 0.041572138020132265, 0.030896954851167502, 0.017593937918076508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03824957846117272, 0.023575416312733077, 0.04683404186108875, 0.08823141074250829, 0.04258899012333772, 0.04798877547997615, 0.0759291477514984, 0.05252861775261641, 0.05747928147404002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003922308612809178, 9.999999999998899e-05, 0.005527310342403835, 0.0001013114516917879, 9.999999999998899e-05, 0.0011747610797537833, 0.0078970542783674, 0.005180554323758191, 0.00010446582414080918, 0.25298557671220556, 0.21062955673265282, 0.22251812694953121, 0.232840477232386, 0.2067790052476346, 0.26034558125216, 0.2205878817068303, 0.2032522964121467, 0.22103172158212436, 0.0520420093416778, 0.04956748876700845, 0.06602157598344438, 0.04977861476796008, 0.03637076871672851, 0.055469011988337424, 0.05204410620616984, 0.047952849550456866, 0.06595980594889683, 0.12865184933378515, 0.12893014826085314, 0.15198428836935296, 0.1314264909524554, 0.16079433310790792, 0.1305240713954665, 0.19058112548008987, 0.14307390916189655, 0.14032306362670877, 0.16933131961439463, 0.1700079795025895, 0.1715055085429632, 0.1725716591120403, 0.163312096720577, 0.1738832539533769, 0.1625263104561736, 0.17568024950184058, 0.16534188705535013, 0.1200484947779753, 0.141002038703554, 0.12304952594331975, 0.13050257282520394, 0.11717542729101371, 0.13408844745640525, 0.12079403512833231, 0.12639291475662162, 0.12101949641505994, 0.175600056024386, 0.1521447035609812, 0.15912988216364587, 0.15546379693203993, 0.1659252663136076, 0.1723859290274259, 0.1457026773031339, 0.15894495487379878, 0.17172488034031597, 0.15542449361984345, 0.14642348117992465, 0.15288818759866574, 0.1470239061142885, 0.1769708665503693, 0.16015809684972482, 0.1623049248545998, 0.1562233785946031, 0.1476365757594985, 0.14882805955174971, 0.1509168937040738, 0.1759559725515295, 0.16816419543366612, 0.1581370072389029, 0.19949415326765907, 0.17034473650249693, 0.15720557832826276, 0.15711353808476414, 0.14238797764814048, 0.18732018300336462, 0.1407772026451476, 0.1557574351279727, 0.21596859192807671, 0.1785230858351935, 0.13448009634621594, 0.14456063619225024, 0.14034812832038046, 0.17887187597400045, 0.17717519093108514, 0.1737028857614611, 0.17533951698739347, 0.17758206166596524, 0.18199401603317322, 0.18086288429759934, 0.17695090626400756, 0.2035598583525522, 0.050968822569014804, 0.058815586880731296, 0.05364759718082146, 0.0487215997556244, 0.0531033487321807, 0.04717830109051391, 0.047012710140103775, 0.05929759168581894, 0.06185781791320499]}, "mutation_prompt": null}
{"id": "db15b19b-b5b2-4d9b-8a2a-afd63a634ccc", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Improved Enhanced HybridPSODE algorithm by dynamically adjusting mutation probability during the search process.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c0fb67e-bcda-485a-9295-8408fa588b93", "metadata": {"aucs": [0.1823525159600763, 0.18773614307351594, 0.19769917154988859, 0.18950678045717917, 0.18860193510271261, 0.18214405810114676, 0.17685870879401921, 0.17715925177119518, 0.19584193831897734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07646951551250347, 0.06588652284744545, 0.052463982681689614, 0.0503735379143474, 0.05945876654993176, 0.07851793829823761, 0.05730823407432095, 0.04932470337700867, 0.05307415821549699, 0.04891628710393292, 0.042260352590922756, 0.03587732429412116, 0.0406182158484345, 0.03315872855814361, 0.044342315155961654, 0.05319416681728506, 0.03601238774394255, 0.0461997160051566, 0.99230868365182, 0.899970008577843, 0.9642580790672407, 0.7116068303896368, 0.9584775389493663, 0.9667310686202306, 0.9504591622140656, 0.920192042575977, 0.9579138303061554, 0.0838306199576635, 0.08461231005265968, 0.11068577789791234, 0.12385498146469831, 0.10940701697800814, 0.05928925554706821, 0.08783999063871395, 0.07588316092923464, 0.12498965601051548, 0.11641958095622462, 0.19261879243444147, 0.15094205031368746, 0.12550759325874128, 0.15852688435894435, 0.11958360081167063, 0.15071367399348423, 0.1313132125772103, 0.1581641173629812, 0.04526377667785442, 0.014230312137955337, 0.011584419542196356, 0.014327808350187876, 0.005145991455398291, 0.00022964033700811903, 0.013691991372335677, 0.022862653203638228, 0.04602580892271513, 0.007243000860356008, 0.00029938113978356107, 0.03934633610952898, 0.012715263907227214, 9.999999999998899e-05, 0.009397251735239864, 0.041572138020132265, 0.030896954851167502, 0.017593937918076508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03824957846117272, 0.023575416312733077, 0.04683404186108875, 0.08823141074250829, 0.04258899012333772, 0.04798877547997615, 0.0759291477514984, 0.05252861775261641, 0.05747928147404002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003922308612809178, 9.999999999998899e-05, 0.005527310342403835, 0.0001013114516917879, 9.999999999998899e-05, 0.0011747610797537833, 0.0078970542783674, 0.005180554323758191, 0.00010446582414080918, 0.25298557671220556, 0.21062955673265282, 0.22251812694953121, 0.232840477232386, 0.2067790052476346, 0.26034558125216, 0.2205878817068303, 0.2032522964121467, 0.22103172158212436, 0.0520420093416778, 0.04956748876700845, 0.06602157598344438, 0.04977861476796008, 0.03637076871672851, 0.055469011988337424, 0.05204410620616984, 0.047952849550456866, 0.06595980594889683, 0.12865184933378515, 0.12893014826085314, 0.15198428836935296, 0.1314264909524554, 0.16079433310790792, 0.1305240713954665, 0.19058112548008987, 0.14307390916189655, 0.14032306362670877, 0.16933131961439463, 0.1700079795025895, 0.1715055085429632, 0.1725716591120403, 0.163312096720577, 0.1738832539533769, 0.1625263104561736, 0.17568024950184058, 0.16534188705535013, 0.1200484947779753, 0.141002038703554, 0.12304952594331975, 0.13050257282520394, 0.11717542729101371, 0.13408844745640525, 0.12079403512833231, 0.12639291475662162, 0.12101949641505994, 0.175600056024386, 0.1521447035609812, 0.15912988216364587, 0.15546379693203993, 0.1659252663136076, 0.1723859290274259, 0.1457026773031339, 0.15894495487379878, 0.17172488034031597, 0.15542449361984345, 0.14642348117992465, 0.15288818759866574, 0.1470239061142885, 0.1769708665503693, 0.16015809684972482, 0.1623049248545998, 0.1562233785946031, 0.1476365757594985, 0.14882805955174971, 0.1509168937040738, 0.1759559725515295, 0.16816419543366612, 0.1581370072389029, 0.19949415326765907, 0.17034473650249693, 0.15720557832826276, 0.15711353808476414, 0.14238797764814048, 0.18732018300336462, 0.1407772026451476, 0.1557574351279727, 0.21596859192807671, 0.1785230858351935, 0.13448009634621594, 0.14456063619225024, 0.14034812832038046, 0.17887187597400045, 0.17717519093108514, 0.1737028857614611, 0.17533951698739347, 0.17758206166596524, 0.18199401603317322, 0.18086288429759934, 0.17695090626400756, 0.2035598583525522, 0.050968822569014804, 0.058815586880731296, 0.05364759718082146, 0.0487215997556244, 0.0531033487321807, 0.04717830109051391, 0.047012710140103775, 0.05929759168581894, 0.06185781791320499]}, "mutation_prompt": null}
{"id": "dbdd4382-d9dc-4459-87da-cdbe3f1e67b5", "solution": "import numpy as np\n\nclass CrowdedEnhancedHybridPSODE(EnhancedHybridPSODE):\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1, crowding_factor=0.1):\n        super().__init__(budget, dim, pop_size, w, c1, c2, f, cr, adapt_rate)\n        self.crowding_factor = crowding_factor\n\n    def __call__(self, func):\n        def crowding_selection(population, fitness):\n            crowding_values = np.zeros(len(population))\n            for d in range(self.dim):\n                sorted_indices = np.argsort(population[:, d])\n                crowding_values[sorted_indices[0]] += self.crowding_factor\n                crowding_values[sorted_indices[-1]] += self.crowding_factor\n                for i in range(1, len(population) - 1):\n                    crowding_values[sorted_indices[i]] += (population[sorted_indices[i + 1], d] - population[sorted_indices[i - 1], d]) / (population[sorted_indices[-1], d] - population[sorted_indices[0], d])\n            return crowding_values\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            crowding_values = crowding_selection(population, fitness)\n            sorted_indices = np.argsort(crowding_values)[::-1]\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(sorted_indices[:self.pop_size], 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(sorted_indices[:self.pop_size], 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "CrowdedEnhancedHybridPSODE", "description": "Enhancing the diversity maintenance by incorporating a crowding-based selection mechanism to improve population spread.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'initialize_population' is not defined\").", "error": "NameError(\"name 'initialize_population' is not defined\")", "parent_id": "0c0fb67e-bcda-485a-9295-8408fa588b93", "metadata": {}, "mutation_prompt": null}
{"id": "952a50f6-4ef3-4be0-9f3e-49a5ba246e7e", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODE", "description": "Improved Enhanced HybridPSODE algorithm by dynamically adjusting mutation probability during the search process.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c0fb67e-bcda-485a-9295-8408fa588b93", "metadata": {"aucs": [0.1823525159600763, 0.18773614307351594, 0.19769917154988859, 0.18950678045717917, 0.18860193510271261, 0.18214405810114676, 0.17685870879401921, 0.17715925177119518, 0.19584193831897734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07646951551250347, 0.06588652284744545, 0.052463982681689614, 0.0503735379143474, 0.05945876654993176, 0.07851793829823761, 0.05730823407432095, 0.04932470337700867, 0.05307415821549699, 0.04891628710393292, 0.042260352590922756, 0.03587732429412116, 0.0406182158484345, 0.03315872855814361, 0.044342315155961654, 0.05319416681728506, 0.03601238774394255, 0.0461997160051566, 0.99230868365182, 0.899970008577843, 0.9642580790672407, 0.7116068303896368, 0.9584775389493663, 0.9667310686202306, 0.9504591622140656, 0.920192042575977, 0.9579138303061554, 0.0838306199576635, 0.08461231005265968, 0.11068577789791234, 0.12385498146469831, 0.10940701697800814, 0.05928925554706821, 0.08783999063871395, 0.07588316092923464, 0.12498965601051548, 0.11641958095622462, 0.19261879243444147, 0.15094205031368746, 0.12550759325874128, 0.15852688435894435, 0.11958360081167063, 0.15071367399348423, 0.1313132125772103, 0.1581641173629812, 0.04526377667785442, 0.014230312137955337, 0.011584419542196356, 0.014327808350187876, 0.005145991455398291, 0.00022964033700811903, 0.013691991372335677, 0.022862653203638228, 0.04602580892271513, 0.007243000860356008, 0.00029938113978356107, 0.03934633610952898, 0.012715263907227214, 9.999999999998899e-05, 0.009397251735239864, 0.041572138020132265, 0.030896954851167502, 0.017593937918076508, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03824957846117272, 0.023575416312733077, 0.04683404186108875, 0.08823141074250829, 0.04258899012333772, 0.04798877547997615, 0.0759291477514984, 0.05252861775261641, 0.05747928147404002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003922308612809178, 9.999999999998899e-05, 0.005527310342403835, 0.0001013114516917879, 9.999999999998899e-05, 0.0011747610797537833, 0.0078970542783674, 0.005180554323758191, 0.00010446582414080918, 0.25298557671220556, 0.21062955673265282, 0.22251812694953121, 0.232840477232386, 0.2067790052476346, 0.26034558125216, 0.2205878817068303, 0.2032522964121467, 0.22103172158212436, 0.0520420093416778, 0.04956748876700845, 0.06602157598344438, 0.04977861476796008, 0.03637076871672851, 0.055469011988337424, 0.05204410620616984, 0.047952849550456866, 0.06595980594889683, 0.12865184933378515, 0.12893014826085314, 0.15198428836935296, 0.1314264909524554, 0.16079433310790792, 0.1305240713954665, 0.19058112548008987, 0.14307390916189655, 0.14032306362670877, 0.16933131961439463, 0.1700079795025895, 0.1715055085429632, 0.1725716591120403, 0.163312096720577, 0.1738832539533769, 0.1625263104561736, 0.17568024950184058, 0.16534188705535013, 0.1200484947779753, 0.141002038703554, 0.12304952594331975, 0.13050257282520394, 0.11717542729101371, 0.13408844745640525, 0.12079403512833231, 0.12639291475662162, 0.12101949641505994, 0.175600056024386, 0.1521447035609812, 0.15912988216364587, 0.15546379693203993, 0.1659252663136076, 0.1723859290274259, 0.1457026773031339, 0.15894495487379878, 0.17172488034031597, 0.15542449361984345, 0.14642348117992465, 0.15288818759866574, 0.1470239061142885, 0.1769708665503693, 0.16015809684972482, 0.1623049248545998, 0.1562233785946031, 0.1476365757594985, 0.14882805955174971, 0.1509168937040738, 0.1759559725515295, 0.16816419543366612, 0.1581370072389029, 0.19949415326765907, 0.17034473650249693, 0.15720557832826276, 0.15711353808476414, 0.14238797764814048, 0.18732018300336462, 0.1407772026451476, 0.1557574351279727, 0.21596859192807671, 0.1785230858351935, 0.13448009634621594, 0.14456063619225024, 0.14034812832038046, 0.17887187597400045, 0.17717519093108514, 0.1737028857614611, 0.17533951698739347, 0.17758206166596524, 0.18199401603317322, 0.18086288429759934, 0.17695090626400756, 0.2035598583525522, 0.050968822569014804, 0.058815586880731296, 0.05364759718082146, 0.0487215997556244, 0.0531033487321807, 0.04717830109051391, 0.047012710140103775, 0.05929759168581894, 0.06185781791320499]}, "mutation_prompt": null}
{"id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 32, "fitness": 0.13301298481150162, "feedback": "The algorithm EnhancedHybridPSODECrowding got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "0c0fb67e-bcda-485a-9295-8408fa588b93", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "1ed7de34-1a15-4e6f-8d6d-480f8fb4c3c2", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration with adaptive mutation probability and dynamic adjustment.", "configspace": "", "generation": 33, "fitness": 0.13301298481150162, "feedback": "The algorithm EnhancedHybridPSODECrowding got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "35cf12cc-b754-4737-b9bf-77a82f23c45f", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "5858433c-49c2-46a4-94d8-871a9ad63911", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "c439f75e-59f4-43f5-a152-9c8c896b6900", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n        self.crowding_factor = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration and utilizing adaptive mutation probability.", "configspace": "", "generation": 36, "fitness": 0.13301298481150162, "feedback": "The algorithm EnhancedHybridPSODECrowding got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "3a9ff502-da4a-4902-a9aa-580e757468de", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "b12a31a6-5021-4338-80ba-0390f7c4ee5b", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "c24ac94a-233c-4a12-8c43-3dbdec4b58b4", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "a8dac90e-c408-431e-bd59-522b4f88988c", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "e255935b-6fe2-4834-a04a-ef24695c1491", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "b50e5c87-5d8f-48f1-a3d0-f4e6b0cbee6f", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "204d4a79-ab72-47e2-8ac1-c0c398cf6a96", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "8adc798a-d489-4f5b-adfb-50fe1bed5ac4", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "dc125708-eca5-485a-91a6-ac33e3ce73df", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "c2c9b650-aba6-403c-bd1e-06c30a1651cc", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "073392d1-4d99-4f07-a7f9-cbe15b38a88c", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "4d1c2f6b-d412-4106-9ab6-5df422c82135", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n        self.mut_range = 0.1\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                    self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamic mutation probability adjustment\n                    population[i] += np.random.uniform(-self.mut_range, self.mut_range, self.dim)  # Introduce dynamic mutation based on fitness\n\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity and exploitation by incorporating a dynamic mutation strategy based on individual fitness.", "configspace": "", "generation": 48, "fitness": 0.13196990825421295, "feedback": "The algorithm EnhancedHybridPSODECrowding got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.18.", "error": "", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.18916028972414367, 0.20824883042700637, 0.17600291995402462, 0.18663921523100901, 0.2301296906201422, 0.22435546289175567, 0.21214930275319965, 0.1840193711686231, 0.20892052405221528, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04727671793376609, 0.0437599509232699, 0.061992512143624445, 0.05562997403393932, 0.0592820223491477, 0.05068520068740123, 0.04443787146854572, 0.05340839763718375, 0.06101146352047582, 0.031857168686377335, 0.03620740408762535, 0.046509784218003, 0.020853138162742257, 0.03272728678012027, 0.04096921879023341, 0.03349347307344175, 0.03324685937952654, 0.037025992581775635, 0.9547493003690515, 0.9602203987991412, 0.9242044869706931, 0.9889501010932215, 0.9056120125002021, 0.907140065822051, 0.9018126171269418, 0.9889545803502023, 0.9819210571197269, 0.0883429328193095, 0.11699624457446556, 0.11475401405438201, 0.11212104013350366, 0.11541284057562029, 0.09023078858923073, 0.0854307915739051, 0.08351283959459321, 0.10389420669474125, 0.15234295218887184, 0.1289579355294329, 0.13312774711001607, 0.18851029593605018, 0.1504327622819157, 0.15374753554167764, 0.12709762212856712, 0.1459323272601647, 0.13422295252207894, 0.039630611804548965, 9.999999999998899e-05, 9.999999999998899e-05, 0.03042614027956292, 0.024695337804173878, 0.015616050854958985, 0.004005201898196531, 0.030920912492656716, 0.013270781531370623, 0.01752312958733493, 0.01911669618099132, 0.005511504881044349, 0.043616596806506425, 0.022609916263570118, 0.02002254757704469, 0.06973206612189264, 0.009047971183263281, 0.0026065159504723434, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06709616678915331, 0.03073512381207477, 0.0516571662351627, 0.06912688100282172, 0.0378684459975448, 0.02717294756748434, 0.0596186097891972, 0.05951153496586481, 0.061890081604958125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024844782212280703, 0.012894141413206328, 0.0043625048666133814, 9.999999999998899e-05, 9.999999999998899e-05, 0.00026973087831938525, 0.00783402902596586, 9.999999999998899e-05, 0.20360504883029384, 0.21807239889424246, 0.20054431522698346, 0.19877284133361073, 0.20991300119379253, 0.21598137681597396, 0.2119496854837234, 0.2097724087003613, 0.21433734409049243, 0.045635266595590473, 0.0559340835701998, 0.04756824452458497, 0.048744562363989496, 0.05875772456617656, 0.04241874073279561, 0.05256456171230839, 0.05539058774164174, 0.052161451881229226, 0.11535137527475103, 0.14150488043370546, 0.14196033632920135, 0.12953223285897797, 0.12085030268345964, 0.11990922852744057, 0.12494688351068761, 0.1668889914965741, 0.15557843932860504, 0.17644546167618336, 0.18689469556173322, 0.16500573921735284, 0.1770710040248874, 0.16500582489755855, 0.1744706746022361, 0.16841711123805658, 0.17377774300845283, 0.17920805968327025, 0.1056973126972871, 0.12950906308127474, 0.11657637334302362, 0.12147845772158838, 0.11203853131950614, 0.11503605959611596, 0.11255656392005897, 0.11032463655858193, 0.11443941907313948, 0.16564350735036493, 0.1870123849434171, 0.144691437241399, 0.14405360641506137, 0.15837658280085676, 0.15835275554430095, 0.15987488986586962, 0.19682083529408, 0.1538475595595572, 0.14799775677036064, 0.1477045945588068, 0.1432775830021441, 0.1529725819864829, 0.15216798290981792, 0.1541290301198458, 0.1497825405832447, 0.15738965915813719, 0.15708411220769214, 0.17009170035754884, 0.19994773213793082, 0.23082421261775066, 0.1779886494334465, 0.17887668051366257, 0.14838269993665054, 0.15737334013215187, 0.21131295025927588, 0.1491526442745741, 0.15401568379843178, 0.1472767753315204, 0.21086942102035777, 0.12786694620003614, 0.15501755674445572, 0.18040335935525875, 0.14548604519578823, 0.14825127448962905, 0.1893887114178312, 0.18542500922783378, 0.17866702721237782, 0.2137281341572037, 0.17055012746444687, 0.1845756955812624, 0.1739828655833935, 0.17860020001123722, 0.19727144674754715, 0.18851619114307272, 0.060170558357573456, 0.051706743955289625, 0.05266873404070116, 0.05346013215544754, 0.06382372538955183, 0.055211395925923945, 0.053061859735337724, 0.061436640953563604, 0.07117224590147775]}, "mutation_prompt": null}
{"id": "4fabb7ec-57ef-4425-94ea-2a26865a676e", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "be48ce0a-2a91-4091-a062-83f3a7dcd353", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "d1989cea-804f-489e-baeb-70518296bfaf", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "c9095881-6609-43b1-be7c-0b5767e74100", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "25d2036f-3017-4beb-b5cb-d335af931d15", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "6b68d76d-96ac-4a2b-8e72-94f985731b05", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing a dynamic mutation strategy based on individual fitness\n            mutation_rates = np.clip(0.1 + 0.8 * (1 - fitness / np.max(fitness)), 0.1, 0.9)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[mutation_rates[i], 1 - mutation_rates[i]])  # Dynamic mutation based on individual fitness\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODECrowding", "description": "Improving population diversity by introducing a dynamic mutation strategy based on individual fitness for enhanced exploration.", "configspace": "", "generation": 54, "fitness": 0.13040235443698908, "feedback": "The algorithm EnhancedHybridPSODECrowding got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.18.", "error": "", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.20098048909411792, 0.20573021905134736, 0.19569949884186644, 0.17686681136764293, 0.19330557799636294, 0.18361402698576745, 0.17611679563351368, 0.2064080566482107, 0.17957974359629514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04698728160387766, 0.04475532342410515, 0.04415528428024551, 0.044349292751383995, 0.049804112385253174, 0.06137592339367659, 0.058914996743807735, 0.04721045671551305, 0.05531932943188744, 0.041533876472293896, 0.034420918962542735, 0.038799361126421905, 0.05791763843916431, 0.04003936959915211, 0.040855171407668034, 0.05138416113503241, 0.04033249409639106, 0.045339945163163975, 0.9917839677505349, 0.9678429691504106, 0.8061316101636835, 0.9848291281586559, 0.8537353478262611, 0.9687971358847782, 0.9897625616988035, 0.9873273082357434, 0.9109843793545118, 0.07668712550099732, 0.09078518391723722, 0.09628568473540566, 0.07374639707399233, 0.07670465940029148, 0.07873999590384739, 0.09380602914207525, 0.0984508982274328, 0.10708980419275471, 0.17547806117325748, 0.1455279082452109, 0.12168967731152902, 0.12419947367959216, 0.14198112877478053, 0.12817173083118127, 0.14555512770411383, 0.17259356876940746, 0.12065266354148885, 0.027578788571598345, 0.015305236235636954, 9.999999999998899e-05, 0.03649372568107501, 9.999999999998899e-05, 9.999999999998899e-05, 0.003783782651808232, 9.999999999998899e-05, 0.0020166795199721976, 0.017417397428916792, 0.006276049479007062, 0.0004849421007353527, 0.008573337805524717, 9.999999999998899e-05, 0.02720695628823655, 0.0005181825996783962, 0.005604099167090815, 0.03405110728432392, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07072014181750474, 0.07256985478296774, 0.14790779907398843, 0.04899690400355561, 0.027692531873897308, 0.04761147975174096, 0.05917519323206111, 0.026413840976532987, 0.044039150421360085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01456208238752188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003583207558934376, 0.21724307737809978, 0.2109542746966473, 0.2058210074288268, 0.20316395626731143, 0.21528875645119472, 0.19282650257784895, 0.19493609688456603, 0.2385618586053756, 0.21910320927760552, 0.053976664539057806, 0.048659923414963724, 0.05953241120290509, 0.052991857568291945, 0.054667176133613826, 0.05283447035839994, 0.05915672420288609, 0.04914200217938236, 0.04057490559193977, 0.1172402134699203, 0.11879245075917899, 0.12711745254215634, 0.12534221660527345, 0.12533400367018044, 0.1432081552460519, 0.13260495250399218, 0.1183406877843991, 0.13318427162164714, 0.16912517830091944, 0.1840101875196818, 0.1754351983170629, 0.1677363677090885, 0.17456131148801846, 0.17486490427588164, 0.1772688011184539, 0.17707317223501706, 0.1757079693785215, 0.10827197074669326, 0.1369846589402579, 0.10404804446299187, 0.12484807721716373, 0.13167755407310322, 0.12476696052570901, 0.12514110858872574, 0.13123253163934567, 0.11056472504145409, 0.19175468299881282, 0.16223407695608405, 0.15491172900831063, 0.15132273249504835, 0.1579398829731712, 0.1586736027153305, 0.16667638354615932, 0.15673616887648656, 0.16221861312447616, 0.14755770903918453, 0.15408458208323317, 0.14863617256021666, 0.15504472925132906, 0.15530689426538824, 0.1654305554387493, 0.15841018598238932, 0.16534510070400976, 0.15587946024967425, 0.15700527609150827, 0.1570947099832014, 0.14115602559884188, 0.22054046636046665, 0.17492021807675406, 0.1815044791587035, 0.21692653471831058, 0.1716452763344658, 0.18937193122249707, 0.1485414260023712, 0.19326983373295026, 0.21860544655326453, 0.16644248631503866, 0.19132781246257657, 0.1866340485739315, 0.16407474271992328, 0.13668254334231655, 0.1177362438503089, 0.1773366915636374, 0.20680015644031013, 0.16486767331187202, 0.16729983536278836, 0.18145573371256807, 0.17247189022822496, 0.1930311739730236, 0.1896183077319853, 0.17439441098001585, 0.05446218143954906, 0.06630409530855264, 0.05615525712078073, 0.047339229078536826, 0.056414763586123406, 0.05759092725044013, 0.05291773406302491, 0.047937438555365364, 0.07133214138919941]}, "mutation_prompt": null}
{"id": "cee92adb-d867-4443-a14f-abc92c65e0fd", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "29e386f3-4848-4f5d-86c1-b0d6251cc6ef", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "a7dff90c-b21f-481b-9faa-2e9e08f33394", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "1dc75e30-1b23-48d6-8df9-aeaf5fed76c5", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "a815e30b-d895-4b1b-99f7-9ee9b8527ecf", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "0cdbaed7-7529-4748-9505-b235b20bb9d8", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "432e5092-baff-429b-baa8-6488c3a52913", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "ea89222c-b165-4c49-a355-309d821c98aa", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1, chaos_param=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n        self.chaos_param = chaos_param\n\n    def chaotic_mutation(self, x):\n        chaotic_val = np.sin(self.chaos_param * x)  # Chaotic mutation strategy\n        return x + chaotic_val\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial = np.clip(trial, -5.0, 5.0)  # Ensure trial stays within bounds\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                v = self.chaotic_mutation(v)  # Apply chaotic mutation\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity and exploration by incorporating a chaos-based mutation strategy.", "configspace": "", "generation": 62, "fitness": 0.12506266107870948, "feedback": "The algorithm EnhancedHybridPSODECrowding got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.17.", "error": "", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.18015586221623237, 0.21976079007209104, 0.22352273790754829, 0.17614539261631945, 0.2255433800382789, 0.19602840032161284, 0.18071732973825017, 0.17540398368248822, 0.219135318481687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049867637360214934, 0.05249919797506297, 0.047255715610911686, 0.06039562610946536, 0.07331459176647293, 0.050248005301752885, 0.048628712187808065, 0.06079896097991444, 0.04077361792196499, 0.029630884210636754, 0.03127566775352497, 0.023106054170908497, 0.029692507834806925, 0.0355742637697436, 0.029559349632723553, 0.027177075901412495, 0.04425572106925124, 0.038815684390829275, 0.980990789945028, 0.45230472063069116, 0.8495378306935333, 0.9391846265363544, 0.9395229565016975, 0.866426614291023, 0.9604572503354855, 0.4083563928057101, 0.9264435177002681, 0.09582192749081297, 0.09714505220220238, 0.08379811839038853, 0.09296223122740044, 0.0672655450048435, 0.08744680892163414, 0.08578630872284121, 0.09043947856484502, 0.11158280723300673, 0.16522746275274147, 0.12713885043260142, 0.17615637484435176, 0.12088342006238051, 0.1562430788287127, 0.141081479340748, 0.1276752676621069, 0.15262656821767018, 0.14738358327998236, 0.02526215994037806, 0.03249278789712895, 0.0017166245130206814, 0.031134726566456106, 0.011195332634054478, 0.0337306786242767, 0.009762921237679412, 0.024504163247503152, 0.028692271902227784, 0.0031362309089050244, 0.003334823909213136, 0.01257644008485781, 0.025191372511963128, 0.024795275545603346, 9.999999999998899e-05, 9.999999999998899e-05, 0.006300163413218929, 0.013464117500480266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.033840483171390545, 0.02934713249418841, 0.057343833496247276, 0.07042840672318873, 0.07204199534899813, 0.027173078837519515, 0.017619200560767823, 0.040232025679618144, 0.08316755060449377, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01845048692902529, 9.999999999998899e-05, 0.007083238286237803, 9.999999999998899e-05, 0.006559848135902602, 9.999999999998899e-05, 0.19739497445584686, 0.19531733883723768, 0.2628198637277608, 0.22774264779522801, 0.20506391321255468, 0.20580727445376246, 0.2028329370275157, 0.21496896850012615, 0.2088602868547238, 0.06757211928100437, 0.06174489785235726, 0.06428104170168647, 0.05146956274235215, 0.04935600906288096, 0.05780771809551244, 0.0716830767072777, 0.05353029723493197, 0.04867038055003814, 0.1474371093515512, 0.12753188834380869, 0.1292122246287507, 0.14957501159183684, 0.17343160839252325, 0.15032938953595598, 0.12684233117819954, 0.13783124690346626, 0.1292174395625243, 0.170917903339877, 0.16474172633799988, 0.16731356346276682, 0.16478389283788109, 0.16259836708038888, 0.16468819263306578, 0.16688781564386135, 0.17377774300845283, 0.18491248455823484, 0.1434902000213446, 0.11389634821477779, 0.11960624368618378, 0.1262639716263082, 0.11182516838790257, 0.11893525962464879, 0.1130169784351166, 0.11558843566958188, 0.1030037448747525, 0.1401475852641355, 0.14411279286172884, 0.15111844452014578, 0.16732114844786428, 0.1486570643249404, 0.14004192347894806, 0.14621303982775768, 0.14354236385499297, 0.1497315753883498, 0.13823315664599523, 0.1587796215417293, 0.1485041015522518, 0.14817354967259777, 0.15010244516762083, 0.14279647926729688, 0.1533554250263609, 0.15219409271064832, 0.1411513945785664, 0.16746808399921687, 0.16305580392796115, 0.14736609815898083, 0.16194313658710402, 0.20246386172333797, 0.1440795707662864, 0.18105950490939404, 0.16110194889402096, 0.23016436365771586, 0.18322609224092512, 0.2058860370839697, 0.1626353312784975, 0.158823912839279, 0.155208146669636, 0.18026657203523277, 0.17538761780315704, 0.19840836955685914, 0.14169640370543346, 0.18023954295994604, 0.17922696514321002, 0.20032809739662827, 0.17379751307641478, 0.17475200478359798, 0.1890879345618668, 0.19646052935416114, 0.19010373199122665, 0.19915108906188095, 0.04787674197249603, 0.05364434914323013, 0.06286297183383738, 0.0588798384018675, 0.04141522838907219, 0.051390487758962045, 0.04782794950487601, 0.05232343797406325, 0.051920820354894426]}, "mutation_prompt": null}
{"id": "873eb41c-8073-48da-b3dd-3ba27c951c82", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "aafb43b5-dd01-4d10-810c-ad3ae196f15b", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "5fa91fe0-6c48-4263-9d76-feae3ee5f85e", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "8b456c86-efb3-4cdc-8690-b910904b3adb", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "92c22c89-722c-490d-adf2-c711ca32f8b2", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "6960a576-7ea9-4ee7-aa84-464b72bbc275", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowdingRefined:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))\n\n                # Introducing Differential Evolution mutation for enhanced exploration\n                if np.random.rand() < 0.2:  # 2% modification as requested\n                    r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                    v = v + self.f * (population[r1] - population[r2]) + self.f * (population[r3] - population[i])\n\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODECrowdingRefined", "description": "Enhancing the mutation strategy by incorporating differential evolution with a dynamic mutation probability scheme.", "configspace": "", "generation": 68, "fitness": 0.12892595384031288, "feedback": "The algorithm EnhancedHybridPSODECrowdingRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.20206332858046439, 0.17349950037183115, 0.17151627229994826, 0.17768521082445254, 0.18826389160518398, 0.22564321358202089, 0.20418450287360523, 0.18798426152420133, 0.17769850497502682, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04770672736094106, 0.05899425758055221, 0.05136401056645701, 0.04188109797250894, 0.043899129927735925, 0.05030258331567761, 0.04295699964458999, 0.04324303181520972, 0.045551605521602534, 0.05270711710695086, 0.03468960826396106, 0.034654146894033344, 0.0575211240531851, 0.03178853585160146, 0.03025521648771612, 0.030684323264704494, 0.04413876082349033, 0.04057265070315896, 0.9495357121340215, 0.9395451752198937, 0.9418017222974989, 0.9193707967996052, 0.9751349474724977, 0.9425302580134742, 0.901517878015581, 0.9912950616462918, 0.9656566892837084, 0.09704610963026439, 0.0919088003169174, 0.11647826386275262, 0.0921393973050546, 0.09931591588056143, 0.08780287392097075, 0.07891404726089435, 0.09429874157128293, 0.08395721063311434, 0.11308265935361705, 0.13061652357397002, 0.1692907114767962, 0.11996862693614307, 0.13987959779996872, 0.15056892641056274, 0.12024825991137256, 0.12863035328140104, 0.10875632193273943, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022747178172604077, 0.001994898625881092, 0.03736452273978175, 0.013461826316264136, 9.999999999998899e-05, 0.01046926109537094, 0.015161321442865305, 9.999999999998899e-05, 9.999999999998899e-05, 0.026550357528072666, 0.01768882879901612, 9.999999999998899e-05, 0.04666082906213742, 0.007635019276764798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04147528352136465, 0.039309245292571404, 0.06899458228765964, 0.037918485769787735, 0.024518524389389174, 0.0408813240695044, 0.03855998381096337, 0.043710180806509014, 0.0772995852306767, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0019537049168953935, 9.999999999998899e-05, 0.00032680646395888413, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004753144347041105, 9.999999999998899e-05, 0.20934017213248657, 0.20226891640932132, 0.18355415347456472, 0.21588127325902784, 0.22757934884191322, 0.21223744056837868, 0.18025905863408442, 0.18558526859797486, 0.19385958325037578, 0.043366711644390876, 0.047683072505891544, 0.04946737360733311, 0.08608253966607282, 0.060183891474961615, 0.04777397718189236, 0.03936639617102078, 0.0496914144188928, 0.04277547868833298, 0.1178789276178952, 0.12597768207107551, 0.12344884790524102, 0.1231754240674734, 0.12946208354331268, 0.13661644657826477, 0.12784787559249977, 0.13108590786039653, 0.12501072643124211, 0.1686139974776052, 0.17227182460732127, 0.18719870060581056, 0.17029199396458183, 0.1634507192324034, 0.17269919519711607, 0.17116979687647527, 0.17377774300845283, 0.17943057399685025, 0.1292530492371612, 0.10099690878039458, 0.11215546413131305, 0.12187071296203777, 0.10838112902878261, 0.11097619171537298, 0.13687370511332808, 0.11577059956598279, 0.1171486341916208, 0.20321575231174716, 0.16063324733252593, 0.16132605548395784, 0.1475450828278836, 0.166357412773935, 0.15514556826154458, 0.16598516572217703, 0.2073862491331676, 0.14522518172163745, 0.15436364971498695, 0.14354569332304723, 0.15116248261801268, 0.15260271900363986, 0.15080561845441065, 0.15329036073965474, 0.1459167029250108, 0.14033998079982213, 0.14430409756687546, 0.132952293538929, 0.163901233210897, 0.13106042301385368, 0.15796261430123637, 0.2263838606990466, 0.23827627122162576, 0.1770976793982365, 0.21496306663867237, 0.22606007675889828, 0.11556674131896394, 0.21650893482934075, 0.1491466785815705, 0.15791454271036198, 0.14526638251332313, 0.1578461623214813, 0.14323156842723872, 0.20503353295299787, 0.25017508313207804, 0.17142096754560265, 0.17884207515945183, 0.18420724951201828, 0.18292938046815121, 0.17315639727316035, 0.1788626430748822, 0.17660961158067567, 0.18945200763949444, 0.19877135809535917, 0.058037097855343944, 0.06072331727637392, 0.05079452310474297, 0.06127413881563659, 0.046305787876618876, 0.05297035786373039, 0.05564385423378204, 0.04459653552792042, 0.05131599909341933]}, "mutation_prompt": null}
{"id": "da0c7be8-37db-4c36-84c3-0b5af26cf6df", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.linalg.norm(population[:, np.newaxis] - population, axis=2).sum(axis=1)\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration, while dynamically adjusting mutation probability for better convergence.", "configspace": "", "generation": 69, "fitness": 0.13301298481150162, "feedback": "The algorithm EnhancedHybridPSODECrowding got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "bfaf48ba-60a1-4652-9798-8e3747ed54d6", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "0c13c323-5db5-4aa9-8c4a-af49292c702c", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "3970dac0-77c0-404b-9e89-e4cd362fb68c", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "25a6246c-2eae-4b07-89e9-15f0187ac449", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "904aeb79-c076-4279-bd3c-fa1f703e1f90", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "ec872d96-b119-4b47-ace2-6b45265695e9", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "f846335a-d476-4132-abef-e575d3e21f80", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "26adfcda-0430-4820-9961-a0b0b6f95b9c", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "a30736b7-22a3-4c77-b8be-c14f6556b465", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "05a853c1-8583-4a1f-b0d0-e441d02fef43", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "0088af45-77bc-4d5e-97fc-0e1bcbf4bd16", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "0959cca4-51c5-4f86-8496-087837d7e083", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "10610814-2d23-4dc4-af4f-fbaf9181e302", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "ac39f1b7-ed2b-47f5-991d-1009504740e7", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "9aa53fb4-7a33-43bd-b3a2-f47db5866ffe", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "d00287a1-d6d2-4ef3-a6c1-d4045564cdfb", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "19645bd4-e7f9-4b0f-bf6f-e4f05959187b", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  \n                population[i] = np.clip(v, -5.0, 5.0) + mutation_direction * 0.1 * np.random.randn(self.dim) * (1 - np.exp(-np.sqrt(fitness[i])))\n\n        return best_solution", "name": "EnhancedHybridPSODECrowding", "description": "Improving population diversity by integrating a dynamic mutation strategy based on individual fitness evaluations.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('probabilities contain NaN').", "error": "ValueError('probabilities contain NaN')", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {}, "mutation_prompt": null}
{"id": "e647dffa-19ba-43d4-b129-e9529ab4bded", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "f8b9f214-8278-419f-8ea8-234694f28bd0", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowding:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution\n", "name": "EnhancedHybridPSODECrowding", "description": "Enhancing population diversity by introducing crowding distance based selection mechanism to promote exploration.", "configspace": "", "generation": 33, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.19028564776738144, 0.23462171067225668, 0.19550198875971203, 0.1644984697790851, 0.19759497718855223, 0.18068982606889716, 0.19980432729253594, 0.22545211188064074, 0.24430099519838844, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04638623229444072, 0.04863891231211326, 0.05289984242814283, 0.04814710822870205, 0.04768399020205649, 0.06076051435263086, 0.04686092915509821, 0.046562875577632834, 0.045557257145465324, 0.039357779919838354, 0.045034134013767324, 0.034437775867574794, 0.04161767068480515, 0.03997820231788951, 0.03612793079330512, 0.03970975712198377, 0.03906106113077801, 0.04647638083004535, 0.9599105962985901, 0.9761833315520673, 0.9268741187785139, 0.9867251369713645, 0.9549492129928221, 0.9254049949657284, 0.9194360791961032, 0.9600348034999285, 0.9253422155209422, 0.09699059314604253, 0.09829068128920504, 0.08640484778623303, 0.10388025722215566, 0.07693052591882754, 0.08139527283606984, 0.10106684719876269, 0.08182853007211066, 0.12457930975770326, 0.12630895952922205, 0.11392044282285041, 0.16289714960922919, 0.13082812881762662, 0.15446035520686496, 0.14338722020384886, 0.12356138336337286, 0.13061537563902748, 0.12281474080999777, 0.0013977963083280365, 0.005999802733318793, 0.0013416040514897531, 0.009319406790346152, 0.02085948790908465, 0.03584478765143995, 0.0034615459197302467, 0.02221225310274455, 0.043004473323239645, 0.02706164026502922, 0.01195896198008517, 0.031750710351553746, 0.021403763018657096, 0.03654448315419501, 0.000948171162942546, 0.02953674079865265, 0.007658609558734097, 0.06777557804212442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06214105546716331, 0.06511426909789642, 0.056905594383230396, 0.03252405539907044, 0.031035841391949703, 0.029220091498357914, 0.043804915544212064, 0.06757198748335758, 0.04800116473348093, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005806205916281448, 0.0005795605591690789, 0.003112414611331049, 9.999999999998899e-05, 9.999999999998899e-05, 0.0008147666109267204, 0.014426946271987928, 9.999999999998899e-05, 0.20135300244554077, 0.2064691771697591, 0.20650428275740274, 0.22646807986029927, 0.23692931291316977, 0.19929236080991564, 0.19222233438380742, 0.1994868228742629, 0.21541044093307593, 0.05424168152783171, 0.05174702199939618, 0.05875185657027071, 0.06357703918592472, 0.051727283400680224, 0.04412389701475872, 0.07923778723786012, 0.05098049874126298, 0.057329799177976426, 0.11818828930443537, 0.13112126921853162, 0.12595252529763779, 0.15933676487276027, 0.13252548831435174, 0.19480942396909717, 0.1327586267968609, 0.12778883562277155, 0.1593154596002958, 0.17088748505792595, 0.18461460835151178, 0.1642867574335216, 0.1729577326137367, 0.18145350293945617, 0.16303093206812647, 0.18138380850681224, 0.17377774300845283, 0.18695624908260422, 0.11442858815374057, 0.11872040237936421, 0.12454701284770742, 0.11647599738177583, 0.12479961699246656, 0.1217798128109745, 0.12650513994376011, 0.11439550632659778, 0.11840379105024001, 0.1575101908560137, 0.17162456395169445, 0.18266619081073, 0.16632866987856487, 0.16933231266017956, 0.1735915305405551, 0.17001174843805222, 0.15596446264533426, 0.15997428633453092, 0.1547168266726796, 0.16167774405756064, 0.1528607824903102, 0.1520212519188615, 0.14432605659696762, 0.14876634451008852, 0.16086238543191556, 0.15583808318529446, 0.15692761351852025, 0.1475893504233069, 0.15666527466594649, 0.21204926008938652, 0.20105497513580195, 0.12896173428525748, 0.2170903279645383, 0.18238734520193534, 0.24831675608676718, 0.18931972540523212, 0.18077786298845944, 0.17052329873974137, 0.18056088496760292, 0.10928620530780031, 0.16770052627942222, 0.16225679284662842, 0.20147825428614585, 0.2258485306147594, 0.1637455459075019, 0.18686691720781112, 0.1789935595636163, 0.1747735459282198, 0.1740483295984091, 0.18318084945447022, 0.19815477795439607, 0.1710124472438278, 0.19919410763776535, 0.1646552464194032, 0.06695360536022377, 0.05774664601507762, 0.0765740685100178, 0.053141430757253305, 0.05645213906990487, 0.056625611556298305, 0.056300510589829544, 0.06250011059689331, 0.06065486609909165]}, "mutation_prompt": null}
{"id": "18a4e093-b981-47eb-a8ff-d210eb8cf4e8", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowdingRefined:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Introduce a global best individual replacement with a low probability\n                    population[i] = best_solution\n\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODECrowdingRefined", "description": "Enhancing population diversity by incorporating a global best individual replacement strategy to improve convergence and exploration.", "configspace": "", "generation": 89, "fitness": 0.1349712706706374, "feedback": "The algorithm EnhancedHybridPSODECrowdingRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "111531ba-37da-4dad-b276-bdd6b7ce834e", "metadata": {"aucs": [0.22222472422572026, 0.23185747722501093, 0.21518888291393934, 0.2060221762069826, 0.23250721835310695, 0.20569809735299882, 0.1852687933601287, 0.19049002171697593, 0.18587032247214963, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05210387318212584, 0.06280137465422486, 0.05989746313254296, 0.06537934781760923, 0.046729568683894995, 0.06261706182919502, 0.05515164192618138, 0.04919477821237428, 0.04965246149219782, 0.0465090860631584, 0.0525867308315352, 0.04020502183638619, 0.033445448115238974, 0.040339168355053356, 0.055085755261667924, 0.03838093273744658, 0.0331177531965654, 0.0393554465356456, 0.9516304189530465, 0.9639821141301906, 0.9585910919915419, 0.974877401735713, 0.8990285109174817, 0.9544870123564576, 0.9767492450522719, 0.9457828165882182, 0.9901779762421385, 0.1044860164393564, 0.10900805255512402, 0.1090190187081096, 0.08250057247805076, 0.09010468490437029, 0.08917288743919582, 0.15396526643018493, 0.08753942538537407, 0.0882830959271993, 0.12664701068377326, 0.14783299010609718, 0.11377035436472638, 0.15450546484582883, 0.11645102600590818, 0.1336340549196119, 0.1359715242954036, 0.12267708447016101, 0.16176776954488792, 0.020665229405694152, 0.004074245595052206, 0.02243356435883248, 0.03423422238108431, 0.041960137695352784, 0.03820279135339211, 0.004004826849064558, 0.024644793341057403, 0.006229852111806045, 0.028320146064779284, 0.01709091817354924, 0.029366939122533076, 0.01005390508516213, 0.03465179742808555, 0.05957195075091315, 0.05423394609936749, 0.009266436936472, 0.05266749188612796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05908227863916782, 0.07459128498608802, 0.07594799178208289, 0.056658750465173546, 0.04340824948745592, 0.027718954892656633, 0.05347122314495123, 0.06668646458224825, 0.0436342602530978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006265255653459256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000362286012766333, 0.006433899601909654, 0.23713614746695622, 0.22503826831313, 0.21124711952946196, 0.2023712383936207, 0.22360608707455554, 0.20909637487720933, 0.2128838255356995, 0.22036100597567287, 0.2146599590154733, 0.048256022836357104, 0.05525321358514501, 0.05869477991536043, 0.04338113006429356, 0.047162970984645836, 0.05824743470904992, 0.05965759728703757, 0.05117155666338935, 0.05744212842769725, 0.13022666051739185, 0.1590919500634671, 0.13165115925941573, 0.12634533025235173, 0.12829896318330358, 0.11992698544226355, 0.17074542752403266, 0.15220219016103165, 0.14141933808647333, 0.1712514150328458, 0.17394991950928307, 0.16562281783271848, 0.19203793458828533, 0.17009771213938474, 0.18634891721773406, 0.17085353667786463, 0.17377774300845283, 0.16996106846724102, 0.1429689763695342, 0.12925298908418514, 0.10870112375022023, 0.11937249106861547, 0.1415361467938837, 0.12410237660409806, 0.10306360502488465, 0.10749788199050547, 0.13075897175475404, 0.15896764105244565, 0.16967168406027122, 0.15366786040602487, 0.16151194849670591, 0.16489951484663035, 0.15784396956966573, 0.16613158858784394, 0.18863642257707136, 0.15699619293668599, 0.13552473303701262, 0.15860023659167732, 0.15407673529300514, 0.16695661424902009, 0.1553766906468832, 0.15634155267631777, 0.15034811883075394, 0.15474012472998222, 0.1532711788919403, 0.16097610210222046, 0.16625883580365042, 0.15101890278564611, 0.1744596260332968, 0.19639294987250044, 0.1714587742187097, 0.2138754797724296, 0.23880373213856787, 0.2131581173045003, 0.14701861415816098, 0.1400217799639718, 0.2108136393488047, 0.18185292270407705, 0.19810250700899112, 0.19967876952637775, 0.22148888061729044, 0.13039897320272398, 0.19342762548154335, 0.1753224184332728, 0.176685597299007, 0.1720427706696681, 0.1753875303471667, 0.17884747081839691, 0.168512778742411, 0.1817083189677432, 0.1835426269421493, 0.18136901823625318, 0.05820767111603964, 0.06057662570058853, 0.05965286982143747, 0.06821789804450928, 0.05581464144208326, 0.055668182047281856, 0.044936634385860486, 0.043193487895727634, 0.055050783065843434]}, "mutation_prompt": null}
{"id": "ed6a670d-db7f-4784-a65c-58bceb38d74f", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowdingRefined:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Introduce a global best individual replacement with a low probability\n                    population[i] = best_solution\n\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODECrowdingRefined", "description": "Enhancing population diversity by incorporating a global best individual replacement strategy to improve convergence and exploration.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "18a4e093-b981-47eb-a8ff-d210eb8cf4e8", "metadata": {"aucs": [0.22222472422572026, 0.23185747722501093, 0.21518888291393934, 0.2060221762069826, 0.23250721835310695, 0.20569809735299882, 0.1852687933601287, 0.19049002171697593, 0.18587032247214963, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05210387318212584, 0.06280137465422486, 0.05989746313254296, 0.06537934781760923, 0.046729568683894995, 0.06261706182919502, 0.05515164192618138, 0.04919477821237428, 0.04965246149219782, 0.0465090860631584, 0.0525867308315352, 0.04020502183638619, 0.033445448115238974, 0.040339168355053356, 0.055085755261667924, 0.03838093273744658, 0.0331177531965654, 0.0393554465356456, 0.9516304189530465, 0.9639821141301906, 0.9585910919915419, 0.974877401735713, 0.8990285109174817, 0.9544870123564576, 0.9767492450522719, 0.9457828165882182, 0.9901779762421385, 0.1044860164393564, 0.10900805255512402, 0.1090190187081096, 0.08250057247805076, 0.09010468490437029, 0.08917288743919582, 0.15396526643018493, 0.08753942538537407, 0.0882830959271993, 0.12664701068377326, 0.14783299010609718, 0.11377035436472638, 0.15450546484582883, 0.11645102600590818, 0.1336340549196119, 0.1359715242954036, 0.12267708447016101, 0.16176776954488792, 0.020665229405694152, 0.004074245595052206, 0.02243356435883248, 0.03423422238108431, 0.041960137695352784, 0.03820279135339211, 0.004004826849064558, 0.024644793341057403, 0.006229852111806045, 0.028320146064779284, 0.01709091817354924, 0.029366939122533076, 0.01005390508516213, 0.03465179742808555, 0.05957195075091315, 0.05423394609936749, 0.009266436936472, 0.05266749188612796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05908227863916782, 0.07459128498608802, 0.07594799178208289, 0.056658750465173546, 0.04340824948745592, 0.027718954892656633, 0.05347122314495123, 0.06668646458224825, 0.0436342602530978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006265255653459256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000362286012766333, 0.006433899601909654, 0.23713614746695622, 0.22503826831313, 0.21124711952946196, 0.2023712383936207, 0.22360608707455554, 0.20909637487720933, 0.2128838255356995, 0.22036100597567287, 0.2146599590154733, 0.048256022836357104, 0.05525321358514501, 0.05869477991536043, 0.04338113006429356, 0.047162970984645836, 0.05824743470904992, 0.05965759728703757, 0.05117155666338935, 0.05744212842769725, 0.13022666051739185, 0.1590919500634671, 0.13165115925941573, 0.12634533025235173, 0.12829896318330358, 0.11992698544226355, 0.17074542752403266, 0.15220219016103165, 0.14141933808647333, 0.1712514150328458, 0.17394991950928307, 0.16562281783271848, 0.19203793458828533, 0.17009771213938474, 0.18634891721773406, 0.17085353667786463, 0.17377774300845283, 0.16996106846724102, 0.1429689763695342, 0.12925298908418514, 0.10870112375022023, 0.11937249106861547, 0.1415361467938837, 0.12410237660409806, 0.10306360502488465, 0.10749788199050547, 0.13075897175475404, 0.15896764105244565, 0.16967168406027122, 0.15366786040602487, 0.16151194849670591, 0.16489951484663035, 0.15784396956966573, 0.16613158858784394, 0.18863642257707136, 0.15699619293668599, 0.13552473303701262, 0.15860023659167732, 0.15407673529300514, 0.16695661424902009, 0.1553766906468832, 0.15634155267631777, 0.15034811883075394, 0.15474012472998222, 0.1532711788919403, 0.16097610210222046, 0.16625883580365042, 0.15101890278564611, 0.1744596260332968, 0.19639294987250044, 0.1714587742187097, 0.2138754797724296, 0.23880373213856787, 0.2131581173045003, 0.14701861415816098, 0.1400217799639718, 0.2108136393488047, 0.18185292270407705, 0.19810250700899112, 0.19967876952637775, 0.22148888061729044, 0.13039897320272398, 0.19342762548154335, 0.1753224184332728, 0.176685597299007, 0.1720427706696681, 0.1753875303471667, 0.17884747081839691, 0.168512778742411, 0.1817083189677432, 0.1835426269421493, 0.18136901823625318, 0.05820767111603964, 0.06057662570058853, 0.05965286982143747, 0.06821789804450928, 0.05581464144208326, 0.055668182047281856, 0.044936634385860486, 0.043193487895727634, 0.055050783065843434]}, "mutation_prompt": null}
{"id": "9e93d2b9-8608-482a-82df-75af38a7a587", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowdingRefined:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Introduce a global best individual replacement with a low probability\n                    population[i] = best_solution\n\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODECrowdingRefined", "description": "Enhancing population diversity by incorporating a global best individual replacement strategy to improve convergence and exploration.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "18a4e093-b981-47eb-a8ff-d210eb8cf4e8", "metadata": {"aucs": [0.22222472422572026, 0.23185747722501093, 0.21518888291393934, 0.2060221762069826, 0.23250721835310695, 0.20569809735299882, 0.1852687933601287, 0.19049002171697593, 0.18587032247214963, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05210387318212584, 0.06280137465422486, 0.05989746313254296, 0.06537934781760923, 0.046729568683894995, 0.06261706182919502, 0.05515164192618138, 0.04919477821237428, 0.04965246149219782, 0.0465090860631584, 0.0525867308315352, 0.04020502183638619, 0.033445448115238974, 0.040339168355053356, 0.055085755261667924, 0.03838093273744658, 0.0331177531965654, 0.0393554465356456, 0.9516304189530465, 0.9639821141301906, 0.9585910919915419, 0.974877401735713, 0.8990285109174817, 0.9544870123564576, 0.9767492450522719, 0.9457828165882182, 0.9901779762421385, 0.1044860164393564, 0.10900805255512402, 0.1090190187081096, 0.08250057247805076, 0.09010468490437029, 0.08917288743919582, 0.15396526643018493, 0.08753942538537407, 0.0882830959271993, 0.12664701068377326, 0.14783299010609718, 0.11377035436472638, 0.15450546484582883, 0.11645102600590818, 0.1336340549196119, 0.1359715242954036, 0.12267708447016101, 0.16176776954488792, 0.020665229405694152, 0.004074245595052206, 0.02243356435883248, 0.03423422238108431, 0.041960137695352784, 0.03820279135339211, 0.004004826849064558, 0.024644793341057403, 0.006229852111806045, 0.028320146064779284, 0.01709091817354924, 0.029366939122533076, 0.01005390508516213, 0.03465179742808555, 0.05957195075091315, 0.05423394609936749, 0.009266436936472, 0.05266749188612796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05908227863916782, 0.07459128498608802, 0.07594799178208289, 0.056658750465173546, 0.04340824948745592, 0.027718954892656633, 0.05347122314495123, 0.06668646458224825, 0.0436342602530978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006265255653459256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000362286012766333, 0.006433899601909654, 0.23713614746695622, 0.22503826831313, 0.21124711952946196, 0.2023712383936207, 0.22360608707455554, 0.20909637487720933, 0.2128838255356995, 0.22036100597567287, 0.2146599590154733, 0.048256022836357104, 0.05525321358514501, 0.05869477991536043, 0.04338113006429356, 0.047162970984645836, 0.05824743470904992, 0.05965759728703757, 0.05117155666338935, 0.05744212842769725, 0.13022666051739185, 0.1590919500634671, 0.13165115925941573, 0.12634533025235173, 0.12829896318330358, 0.11992698544226355, 0.17074542752403266, 0.15220219016103165, 0.14141933808647333, 0.1712514150328458, 0.17394991950928307, 0.16562281783271848, 0.19203793458828533, 0.17009771213938474, 0.18634891721773406, 0.17085353667786463, 0.17377774300845283, 0.16996106846724102, 0.1429689763695342, 0.12925298908418514, 0.10870112375022023, 0.11937249106861547, 0.1415361467938837, 0.12410237660409806, 0.10306360502488465, 0.10749788199050547, 0.13075897175475404, 0.15896764105244565, 0.16967168406027122, 0.15366786040602487, 0.16151194849670591, 0.16489951484663035, 0.15784396956966573, 0.16613158858784394, 0.18863642257707136, 0.15699619293668599, 0.13552473303701262, 0.15860023659167732, 0.15407673529300514, 0.16695661424902009, 0.1553766906468832, 0.15634155267631777, 0.15034811883075394, 0.15474012472998222, 0.1532711788919403, 0.16097610210222046, 0.16625883580365042, 0.15101890278564611, 0.1744596260332968, 0.19639294987250044, 0.1714587742187097, 0.2138754797724296, 0.23880373213856787, 0.2131581173045003, 0.14701861415816098, 0.1400217799639718, 0.2108136393488047, 0.18185292270407705, 0.19810250700899112, 0.19967876952637775, 0.22148888061729044, 0.13039897320272398, 0.19342762548154335, 0.1753224184332728, 0.176685597299007, 0.1720427706696681, 0.1753875303471667, 0.17884747081839691, 0.168512778742411, 0.1817083189677432, 0.1835426269421493, 0.18136901823625318, 0.05820767111603964, 0.06057662570058853, 0.05965286982143747, 0.06821789804450928, 0.05581464144208326, 0.055668182047281856, 0.044936634385860486, 0.043193487895727634, 0.055050783065843434]}, "mutation_prompt": null}
{"id": "5d8783ce-84b8-49e0-9a7d-fe73b50ce058", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowdingRefined:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Introduce a global best individual replacement with a low probability\n                    population[i] = best_solution\n\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODECrowdingRefined", "description": "Enhancing population diversity by incorporating a global best individual replacement strategy to improve convergence and exploration.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "18a4e093-b981-47eb-a8ff-d210eb8cf4e8", "metadata": {"aucs": [0.22222472422572026, 0.23185747722501093, 0.21518888291393934, 0.2060221762069826, 0.23250721835310695, 0.20569809735299882, 0.1852687933601287, 0.19049002171697593, 0.18587032247214963, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05210387318212584, 0.06280137465422486, 0.05989746313254296, 0.06537934781760923, 0.046729568683894995, 0.06261706182919502, 0.05515164192618138, 0.04919477821237428, 0.04965246149219782, 0.0465090860631584, 0.0525867308315352, 0.04020502183638619, 0.033445448115238974, 0.040339168355053356, 0.055085755261667924, 0.03838093273744658, 0.0331177531965654, 0.0393554465356456, 0.9516304189530465, 0.9639821141301906, 0.9585910919915419, 0.974877401735713, 0.8990285109174817, 0.9544870123564576, 0.9767492450522719, 0.9457828165882182, 0.9901779762421385, 0.1044860164393564, 0.10900805255512402, 0.1090190187081096, 0.08250057247805076, 0.09010468490437029, 0.08917288743919582, 0.15396526643018493, 0.08753942538537407, 0.0882830959271993, 0.12664701068377326, 0.14783299010609718, 0.11377035436472638, 0.15450546484582883, 0.11645102600590818, 0.1336340549196119, 0.1359715242954036, 0.12267708447016101, 0.16176776954488792, 0.020665229405694152, 0.004074245595052206, 0.02243356435883248, 0.03423422238108431, 0.041960137695352784, 0.03820279135339211, 0.004004826849064558, 0.024644793341057403, 0.006229852111806045, 0.028320146064779284, 0.01709091817354924, 0.029366939122533076, 0.01005390508516213, 0.03465179742808555, 0.05957195075091315, 0.05423394609936749, 0.009266436936472, 0.05266749188612796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05908227863916782, 0.07459128498608802, 0.07594799178208289, 0.056658750465173546, 0.04340824948745592, 0.027718954892656633, 0.05347122314495123, 0.06668646458224825, 0.0436342602530978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006265255653459256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000362286012766333, 0.006433899601909654, 0.23713614746695622, 0.22503826831313, 0.21124711952946196, 0.2023712383936207, 0.22360608707455554, 0.20909637487720933, 0.2128838255356995, 0.22036100597567287, 0.2146599590154733, 0.048256022836357104, 0.05525321358514501, 0.05869477991536043, 0.04338113006429356, 0.047162970984645836, 0.05824743470904992, 0.05965759728703757, 0.05117155666338935, 0.05744212842769725, 0.13022666051739185, 0.1590919500634671, 0.13165115925941573, 0.12634533025235173, 0.12829896318330358, 0.11992698544226355, 0.17074542752403266, 0.15220219016103165, 0.14141933808647333, 0.1712514150328458, 0.17394991950928307, 0.16562281783271848, 0.19203793458828533, 0.17009771213938474, 0.18634891721773406, 0.17085353667786463, 0.17377774300845283, 0.16996106846724102, 0.1429689763695342, 0.12925298908418514, 0.10870112375022023, 0.11937249106861547, 0.1415361467938837, 0.12410237660409806, 0.10306360502488465, 0.10749788199050547, 0.13075897175475404, 0.15896764105244565, 0.16967168406027122, 0.15366786040602487, 0.16151194849670591, 0.16489951484663035, 0.15784396956966573, 0.16613158858784394, 0.18863642257707136, 0.15699619293668599, 0.13552473303701262, 0.15860023659167732, 0.15407673529300514, 0.16695661424902009, 0.1553766906468832, 0.15634155267631777, 0.15034811883075394, 0.15474012472998222, 0.1532711788919403, 0.16097610210222046, 0.16625883580365042, 0.15101890278564611, 0.1744596260332968, 0.19639294987250044, 0.1714587742187097, 0.2138754797724296, 0.23880373213856787, 0.2131581173045003, 0.14701861415816098, 0.1400217799639718, 0.2108136393488047, 0.18185292270407705, 0.19810250700899112, 0.19967876952637775, 0.22148888061729044, 0.13039897320272398, 0.19342762548154335, 0.1753224184332728, 0.176685597299007, 0.1720427706696681, 0.1753875303471667, 0.17884747081839691, 0.168512778742411, 0.1817083189677432, 0.1835426269421493, 0.18136901823625318, 0.05820767111603964, 0.06057662570058853, 0.05965286982143747, 0.06821789804450928, 0.05581464144208326, 0.055668182047281856, 0.044936634385860486, 0.043193487895727634, 0.055050783065843434]}, "mutation_prompt": null}
{"id": "9ed827c0-b029-493c-8e90-ec2842b9c87f", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowdingRefined:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Introduce a global best individual replacement with a low probability\n                    population[i] = best_solution\n\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODECrowdingRefined", "description": "Enhancing population diversity by incorporating a global best individual replacement strategy to improve convergence and exploration.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "18a4e093-b981-47eb-a8ff-d210eb8cf4e8", "metadata": {"aucs": [0.22222472422572026, 0.23185747722501093, 0.21518888291393934, 0.2060221762069826, 0.23250721835310695, 0.20569809735299882, 0.1852687933601287, 0.19049002171697593, 0.18587032247214963, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05210387318212584, 0.06280137465422486, 0.05989746313254296, 0.06537934781760923, 0.046729568683894995, 0.06261706182919502, 0.05515164192618138, 0.04919477821237428, 0.04965246149219782, 0.0465090860631584, 0.0525867308315352, 0.04020502183638619, 0.033445448115238974, 0.040339168355053356, 0.055085755261667924, 0.03838093273744658, 0.0331177531965654, 0.0393554465356456, 0.9516304189530465, 0.9639821141301906, 0.9585910919915419, 0.974877401735713, 0.8990285109174817, 0.9544870123564576, 0.9767492450522719, 0.9457828165882182, 0.9901779762421385, 0.1044860164393564, 0.10900805255512402, 0.1090190187081096, 0.08250057247805076, 0.09010468490437029, 0.08917288743919582, 0.15396526643018493, 0.08753942538537407, 0.0882830959271993, 0.12664701068377326, 0.14783299010609718, 0.11377035436472638, 0.15450546484582883, 0.11645102600590818, 0.1336340549196119, 0.1359715242954036, 0.12267708447016101, 0.16176776954488792, 0.020665229405694152, 0.004074245595052206, 0.02243356435883248, 0.03423422238108431, 0.041960137695352784, 0.03820279135339211, 0.004004826849064558, 0.024644793341057403, 0.006229852111806045, 0.028320146064779284, 0.01709091817354924, 0.029366939122533076, 0.01005390508516213, 0.03465179742808555, 0.05957195075091315, 0.05423394609936749, 0.009266436936472, 0.05266749188612796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05908227863916782, 0.07459128498608802, 0.07594799178208289, 0.056658750465173546, 0.04340824948745592, 0.027718954892656633, 0.05347122314495123, 0.06668646458224825, 0.0436342602530978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006265255653459256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000362286012766333, 0.006433899601909654, 0.23713614746695622, 0.22503826831313, 0.21124711952946196, 0.2023712383936207, 0.22360608707455554, 0.20909637487720933, 0.2128838255356995, 0.22036100597567287, 0.2146599590154733, 0.048256022836357104, 0.05525321358514501, 0.05869477991536043, 0.04338113006429356, 0.047162970984645836, 0.05824743470904992, 0.05965759728703757, 0.05117155666338935, 0.05744212842769725, 0.13022666051739185, 0.1590919500634671, 0.13165115925941573, 0.12634533025235173, 0.12829896318330358, 0.11992698544226355, 0.17074542752403266, 0.15220219016103165, 0.14141933808647333, 0.1712514150328458, 0.17394991950928307, 0.16562281783271848, 0.19203793458828533, 0.17009771213938474, 0.18634891721773406, 0.17085353667786463, 0.17377774300845283, 0.16996106846724102, 0.1429689763695342, 0.12925298908418514, 0.10870112375022023, 0.11937249106861547, 0.1415361467938837, 0.12410237660409806, 0.10306360502488465, 0.10749788199050547, 0.13075897175475404, 0.15896764105244565, 0.16967168406027122, 0.15366786040602487, 0.16151194849670591, 0.16489951484663035, 0.15784396956966573, 0.16613158858784394, 0.18863642257707136, 0.15699619293668599, 0.13552473303701262, 0.15860023659167732, 0.15407673529300514, 0.16695661424902009, 0.1553766906468832, 0.15634155267631777, 0.15034811883075394, 0.15474012472998222, 0.1532711788919403, 0.16097610210222046, 0.16625883580365042, 0.15101890278564611, 0.1744596260332968, 0.19639294987250044, 0.1714587742187097, 0.2138754797724296, 0.23880373213856787, 0.2131581173045003, 0.14701861415816098, 0.1400217799639718, 0.2108136393488047, 0.18185292270407705, 0.19810250700899112, 0.19967876952637775, 0.22148888061729044, 0.13039897320272398, 0.19342762548154335, 0.1753224184332728, 0.176685597299007, 0.1720427706696681, 0.1753875303471667, 0.17884747081839691, 0.168512778742411, 0.1817083189677432, 0.1835426269421493, 0.18136901823625318, 0.05820767111603964, 0.06057662570058853, 0.05965286982143747, 0.06821789804450928, 0.05581464144208326, 0.055668182047281856, 0.044936634385860486, 0.043193487895727634, 0.055050783065843434]}, "mutation_prompt": null}
{"id": "2343532b-e14b-4d56-87ff-241d3c4c6763", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowdingRefined:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Introduce a global best individual replacement with a low probability\n                    population[i] = best_solution\n\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODECrowdingRefined", "description": "Enhancing population diversity by incorporating a global best individual replacement strategy to improve convergence and exploration.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "18a4e093-b981-47eb-a8ff-d210eb8cf4e8", "metadata": {"aucs": [0.22222472422572026, 0.23185747722501093, 0.21518888291393934, 0.2060221762069826, 0.23250721835310695, 0.20569809735299882, 0.1852687933601287, 0.19049002171697593, 0.18587032247214963, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05210387318212584, 0.06280137465422486, 0.05989746313254296, 0.06537934781760923, 0.046729568683894995, 0.06261706182919502, 0.05515164192618138, 0.04919477821237428, 0.04965246149219782, 0.0465090860631584, 0.0525867308315352, 0.04020502183638619, 0.033445448115238974, 0.040339168355053356, 0.055085755261667924, 0.03838093273744658, 0.0331177531965654, 0.0393554465356456, 0.9516304189530465, 0.9639821141301906, 0.9585910919915419, 0.974877401735713, 0.8990285109174817, 0.9544870123564576, 0.9767492450522719, 0.9457828165882182, 0.9901779762421385, 0.1044860164393564, 0.10900805255512402, 0.1090190187081096, 0.08250057247805076, 0.09010468490437029, 0.08917288743919582, 0.15396526643018493, 0.08753942538537407, 0.0882830959271993, 0.12664701068377326, 0.14783299010609718, 0.11377035436472638, 0.15450546484582883, 0.11645102600590818, 0.1336340549196119, 0.1359715242954036, 0.12267708447016101, 0.16176776954488792, 0.020665229405694152, 0.004074245595052206, 0.02243356435883248, 0.03423422238108431, 0.041960137695352784, 0.03820279135339211, 0.004004826849064558, 0.024644793341057403, 0.006229852111806045, 0.028320146064779284, 0.01709091817354924, 0.029366939122533076, 0.01005390508516213, 0.03465179742808555, 0.05957195075091315, 0.05423394609936749, 0.009266436936472, 0.05266749188612796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05908227863916782, 0.07459128498608802, 0.07594799178208289, 0.056658750465173546, 0.04340824948745592, 0.027718954892656633, 0.05347122314495123, 0.06668646458224825, 0.0436342602530978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006265255653459256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000362286012766333, 0.006433899601909654, 0.23713614746695622, 0.22503826831313, 0.21124711952946196, 0.2023712383936207, 0.22360608707455554, 0.20909637487720933, 0.2128838255356995, 0.22036100597567287, 0.2146599590154733, 0.048256022836357104, 0.05525321358514501, 0.05869477991536043, 0.04338113006429356, 0.047162970984645836, 0.05824743470904992, 0.05965759728703757, 0.05117155666338935, 0.05744212842769725, 0.13022666051739185, 0.1590919500634671, 0.13165115925941573, 0.12634533025235173, 0.12829896318330358, 0.11992698544226355, 0.17074542752403266, 0.15220219016103165, 0.14141933808647333, 0.1712514150328458, 0.17394991950928307, 0.16562281783271848, 0.19203793458828533, 0.17009771213938474, 0.18634891721773406, 0.17085353667786463, 0.17377774300845283, 0.16996106846724102, 0.1429689763695342, 0.12925298908418514, 0.10870112375022023, 0.11937249106861547, 0.1415361467938837, 0.12410237660409806, 0.10306360502488465, 0.10749788199050547, 0.13075897175475404, 0.15896764105244565, 0.16967168406027122, 0.15366786040602487, 0.16151194849670591, 0.16489951484663035, 0.15784396956966573, 0.16613158858784394, 0.18863642257707136, 0.15699619293668599, 0.13552473303701262, 0.15860023659167732, 0.15407673529300514, 0.16695661424902009, 0.1553766906468832, 0.15634155267631777, 0.15034811883075394, 0.15474012472998222, 0.1532711788919403, 0.16097610210222046, 0.16625883580365042, 0.15101890278564611, 0.1744596260332968, 0.19639294987250044, 0.1714587742187097, 0.2138754797724296, 0.23880373213856787, 0.2131581173045003, 0.14701861415816098, 0.1400217799639718, 0.2108136393488047, 0.18185292270407705, 0.19810250700899112, 0.19967876952637775, 0.22148888061729044, 0.13039897320272398, 0.19342762548154335, 0.1753224184332728, 0.176685597299007, 0.1720427706696681, 0.1753875303471667, 0.17884747081839691, 0.168512778742411, 0.1817083189677432, 0.1835426269421493, 0.18136901823625318, 0.05820767111603964, 0.06057662570058853, 0.05965286982143747, 0.06821789804450928, 0.05581464144208326, 0.055668182047281856, 0.044936634385860486, 0.043193487895727634, 0.055050783065843434]}, "mutation_prompt": null}
{"id": "ebfc7a3f-3d45-4ea4-9b9d-f9f572def70c", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowdingRefined:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Introduce a global best individual replacement with a low probability\n                    population[i] = best_solution\n\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODECrowdingRefined", "description": "Enhancing population diversity by incorporating a global best individual replacement strategy to improve convergence and exploration.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "18a4e093-b981-47eb-a8ff-d210eb8cf4e8", "metadata": {"aucs": [0.22222472422572026, 0.23185747722501093, 0.21518888291393934, 0.2060221762069826, 0.23250721835310695, 0.20569809735299882, 0.1852687933601287, 0.19049002171697593, 0.18587032247214963, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05210387318212584, 0.06280137465422486, 0.05989746313254296, 0.06537934781760923, 0.046729568683894995, 0.06261706182919502, 0.05515164192618138, 0.04919477821237428, 0.04965246149219782, 0.0465090860631584, 0.0525867308315352, 0.04020502183638619, 0.033445448115238974, 0.040339168355053356, 0.055085755261667924, 0.03838093273744658, 0.0331177531965654, 0.0393554465356456, 0.9516304189530465, 0.9639821141301906, 0.9585910919915419, 0.974877401735713, 0.8990285109174817, 0.9544870123564576, 0.9767492450522719, 0.9457828165882182, 0.9901779762421385, 0.1044860164393564, 0.10900805255512402, 0.1090190187081096, 0.08250057247805076, 0.09010468490437029, 0.08917288743919582, 0.15396526643018493, 0.08753942538537407, 0.0882830959271993, 0.12664701068377326, 0.14783299010609718, 0.11377035436472638, 0.15450546484582883, 0.11645102600590818, 0.1336340549196119, 0.1359715242954036, 0.12267708447016101, 0.16176776954488792, 0.020665229405694152, 0.004074245595052206, 0.02243356435883248, 0.03423422238108431, 0.041960137695352784, 0.03820279135339211, 0.004004826849064558, 0.024644793341057403, 0.006229852111806045, 0.028320146064779284, 0.01709091817354924, 0.029366939122533076, 0.01005390508516213, 0.03465179742808555, 0.05957195075091315, 0.05423394609936749, 0.009266436936472, 0.05266749188612796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05908227863916782, 0.07459128498608802, 0.07594799178208289, 0.056658750465173546, 0.04340824948745592, 0.027718954892656633, 0.05347122314495123, 0.06668646458224825, 0.0436342602530978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006265255653459256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000362286012766333, 0.006433899601909654, 0.23713614746695622, 0.22503826831313, 0.21124711952946196, 0.2023712383936207, 0.22360608707455554, 0.20909637487720933, 0.2128838255356995, 0.22036100597567287, 0.2146599590154733, 0.048256022836357104, 0.05525321358514501, 0.05869477991536043, 0.04338113006429356, 0.047162970984645836, 0.05824743470904992, 0.05965759728703757, 0.05117155666338935, 0.05744212842769725, 0.13022666051739185, 0.1590919500634671, 0.13165115925941573, 0.12634533025235173, 0.12829896318330358, 0.11992698544226355, 0.17074542752403266, 0.15220219016103165, 0.14141933808647333, 0.1712514150328458, 0.17394991950928307, 0.16562281783271848, 0.19203793458828533, 0.17009771213938474, 0.18634891721773406, 0.17085353667786463, 0.17377774300845283, 0.16996106846724102, 0.1429689763695342, 0.12925298908418514, 0.10870112375022023, 0.11937249106861547, 0.1415361467938837, 0.12410237660409806, 0.10306360502488465, 0.10749788199050547, 0.13075897175475404, 0.15896764105244565, 0.16967168406027122, 0.15366786040602487, 0.16151194849670591, 0.16489951484663035, 0.15784396956966573, 0.16613158858784394, 0.18863642257707136, 0.15699619293668599, 0.13552473303701262, 0.15860023659167732, 0.15407673529300514, 0.16695661424902009, 0.1553766906468832, 0.15634155267631777, 0.15034811883075394, 0.15474012472998222, 0.1532711788919403, 0.16097610210222046, 0.16625883580365042, 0.15101890278564611, 0.1744596260332968, 0.19639294987250044, 0.1714587742187097, 0.2138754797724296, 0.23880373213856787, 0.2131581173045003, 0.14701861415816098, 0.1400217799639718, 0.2108136393488047, 0.18185292270407705, 0.19810250700899112, 0.19967876952637775, 0.22148888061729044, 0.13039897320272398, 0.19342762548154335, 0.1753224184332728, 0.176685597299007, 0.1720427706696681, 0.1753875303471667, 0.17884747081839691, 0.168512778742411, 0.1817083189677432, 0.1835426269421493, 0.18136901823625318, 0.05820767111603964, 0.06057662570058853, 0.05965286982143747, 0.06821789804450928, 0.05581464144208326, 0.055668182047281856, 0.044936634385860486, 0.043193487895727634, 0.055050783065843434]}, "mutation_prompt": null}
{"id": "74be58cd-6a31-4129-bf03-a908319cc101", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowdingRefined:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:\n                    population[i] = best_solution\n\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                chaos = np.random.uniform(-1, 1, self.dim)\n                v = self.w * population[i] + self.c1 * chaos * (best_solution - population[i]) + self.c2 * chaos * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODECrowdingRefined", "description": "Enhancing population diversity by introducing chaotic search to explore new regions of the search space.", "configspace": "", "generation": 96, "fitness": 0.11932657951100334, "feedback": "The algorithm EnhancedHybridPSODECrowdingRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.18.", "error": "", "parent_id": "18a4e093-b981-47eb-a8ff-d210eb8cf4e8", "metadata": {"aucs": [0.2003045562187865, 0.19123214540522115, 0.17169706125725115, 0.15460588917522122, 0.14518469339179174, 0.21280853056374405, 0.17270765499577267, 0.1720690420723744, 0.15762614299400324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0326978735198572, 0.028526745730971914, 0.0431989963929007, 0.04531396004288324, 0.04385313597736784, 0.053904044859481304, 0.034205631903766465, 0.036204756974128616, 0.05885281154039401, 0.03421439444194441, 0.05254125481704375, 0.02522442154204496, 0.01959972157639278, 0.022868670153641912, 0.025712753001678523, 0.039829449253977356, 0.03138678677041806, 0.04353461460777419, 0.9377671905384516, 0.7880517819155654, 0.9636032938697221, 0.9166525845968887, 0.9299109680222307, 0.9639794471850238, 0.9918404277428003, 0.7113168974458101, 0.9445274894200115, 0.08323630973959173, 0.05880001460182971, 0.05444258476742092, 0.0677995051489344, 0.07070878635394218, 0.07120479541844704, 0.06421113987504246, 0.06512730035283987, 0.06487664837111684, 0.11506542187935098, 0.13430261368975493, 0.11231808546809863, 0.10855016577272891, 0.12296328670117673, 0.09628158123985087, 0.11547060140842769, 0.12345781583051652, 0.1024646332667618, 9.999999999998899e-05, 0.004417909372610329, 9.999999999998899e-05, 0.033799733351808525, 0.05013550893928187, 0.022332895125399377, 9.999999999998899e-05, 9.999999999998899e-05, 0.04213863443437116, 9.999999999998899e-05, 9.999999999998899e-05, 0.01971570002377887, 9.999999999998899e-05, 0.03007347411043304, 9.999999999998899e-05, 0.009820478391842746, 0.005110279573284804, 0.029991511045417973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02510749187860406, 0.02773475957111493, 0.04416785347816554, 0.07205013604728794, 0.05203177130984782, 0.023391428734314323, 0.050439772422897655, 0.044646525114624414, 0.03892930702674713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000231231365902973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19205502350903758, 0.19392989372758307, 0.1910405825021031, 0.20444882835558764, 0.1776132217218308, 0.18354459527890732, 0.2005584852112191, 0.18928841086239456, 0.17263289982392904, 0.03459518595815503, 0.041385881087716014, 0.036381115089740845, 0.03281232735559969, 0.06557467051325183, 0.05729193698530377, 0.03620892586631708, 0.039077402023926844, 0.03808929882639045, 0.12012117559264712, 0.1433659251205076, 0.14801158860817487, 0.15583241848572704, 0.12976411868221294, 0.14609749262996463, 0.12891464997554014, 0.12400473861779615, 0.14345621616558835, 0.15734003735127977, 0.16214212111306947, 0.15743294342966296, 0.14897631700918357, 0.1600417518431212, 0.17414617825336332, 0.15246059244570354, 0.17377774300845283, 0.1669360280136174, 0.10483585940153206, 0.13122290131622083, 0.10120076519908583, 0.11634697177587605, 0.11851390404970841, 0.09350947131262388, 0.09454431455195733, 0.1007506145421817, 0.09645240480077477, 0.1580067452981937, 0.17199787909424724, 0.13437839038882882, 0.13514660522797806, 0.15452034812020465, 0.16150283719099678, 0.14696813311695767, 0.17094176358694457, 0.14416823663246303, 0.1427399383831509, 0.15078750964865317, 0.15178528711084782, 0.139364593253258, 0.13466214902165263, 0.14479047741253603, 0.14211372804494804, 0.14249231989874311, 0.14730805255653745, 0.13072558727545514, 0.15335340658419716, 0.14631581571765107, 0.1375265865653631, 0.17535572748934625, 0.14304493437913257, 0.19339179185781152, 0.1432395013777319, 0.1380884760949369, 0.13664357469707733, 0.13679188109329132, 0.15556226711969923, 0.13023368450924178, 0.1540778020618465, 0.13461386188623237, 0.12887195350822933, 0.13789151720062653, 0.14541096837737655, 0.19449620228647924, 0.17759596504601816, 0.18526858498076648, 0.18888198334265727, 0.16947461950677623, 0.1866621087528465, 0.175788622330446, 0.1853506772276058, 0.17121072701448226, 0.052483703524259684, 0.043808490367875486, 0.051035036583315874, 0.05448888649343697, 0.051667068009130346, 0.047903070349648025, 0.048249966825168356, 0.05239783104810758, 0.04683185978983784]}, "mutation_prompt": null}
{"id": "7a41db8d-f139-4b72-b07f-1d17ffb89c4e", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowdingRefined:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Introduce a global best individual replacement with a low probability\n                    population[i] = best_solution\n\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODECrowdingRefined", "description": "Enhancing population diversity by incorporating a global best individual replacement strategy to improve convergence and exploration.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "18a4e093-b981-47eb-a8ff-d210eb8cf4e8", "metadata": {"aucs": [0.22222472422572026, 0.23185747722501093, 0.21518888291393934, 0.2060221762069826, 0.23250721835310695, 0.20569809735299882, 0.1852687933601287, 0.19049002171697593, 0.18587032247214963, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05210387318212584, 0.06280137465422486, 0.05989746313254296, 0.06537934781760923, 0.046729568683894995, 0.06261706182919502, 0.05515164192618138, 0.04919477821237428, 0.04965246149219782, 0.0465090860631584, 0.0525867308315352, 0.04020502183638619, 0.033445448115238974, 0.040339168355053356, 0.055085755261667924, 0.03838093273744658, 0.0331177531965654, 0.0393554465356456, 0.9516304189530465, 0.9639821141301906, 0.9585910919915419, 0.974877401735713, 0.8990285109174817, 0.9544870123564576, 0.9767492450522719, 0.9457828165882182, 0.9901779762421385, 0.1044860164393564, 0.10900805255512402, 0.1090190187081096, 0.08250057247805076, 0.09010468490437029, 0.08917288743919582, 0.15396526643018493, 0.08753942538537407, 0.0882830959271993, 0.12664701068377326, 0.14783299010609718, 0.11377035436472638, 0.15450546484582883, 0.11645102600590818, 0.1336340549196119, 0.1359715242954036, 0.12267708447016101, 0.16176776954488792, 0.020665229405694152, 0.004074245595052206, 0.02243356435883248, 0.03423422238108431, 0.041960137695352784, 0.03820279135339211, 0.004004826849064558, 0.024644793341057403, 0.006229852111806045, 0.028320146064779284, 0.01709091817354924, 0.029366939122533076, 0.01005390508516213, 0.03465179742808555, 0.05957195075091315, 0.05423394609936749, 0.009266436936472, 0.05266749188612796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05908227863916782, 0.07459128498608802, 0.07594799178208289, 0.056658750465173546, 0.04340824948745592, 0.027718954892656633, 0.05347122314495123, 0.06668646458224825, 0.0436342602530978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006265255653459256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000362286012766333, 0.006433899601909654, 0.23713614746695622, 0.22503826831313, 0.21124711952946196, 0.2023712383936207, 0.22360608707455554, 0.20909637487720933, 0.2128838255356995, 0.22036100597567287, 0.2146599590154733, 0.048256022836357104, 0.05525321358514501, 0.05869477991536043, 0.04338113006429356, 0.047162970984645836, 0.05824743470904992, 0.05965759728703757, 0.05117155666338935, 0.05744212842769725, 0.13022666051739185, 0.1590919500634671, 0.13165115925941573, 0.12634533025235173, 0.12829896318330358, 0.11992698544226355, 0.17074542752403266, 0.15220219016103165, 0.14141933808647333, 0.1712514150328458, 0.17394991950928307, 0.16562281783271848, 0.19203793458828533, 0.17009771213938474, 0.18634891721773406, 0.17085353667786463, 0.17377774300845283, 0.16996106846724102, 0.1429689763695342, 0.12925298908418514, 0.10870112375022023, 0.11937249106861547, 0.1415361467938837, 0.12410237660409806, 0.10306360502488465, 0.10749788199050547, 0.13075897175475404, 0.15896764105244565, 0.16967168406027122, 0.15366786040602487, 0.16151194849670591, 0.16489951484663035, 0.15784396956966573, 0.16613158858784394, 0.18863642257707136, 0.15699619293668599, 0.13552473303701262, 0.15860023659167732, 0.15407673529300514, 0.16695661424902009, 0.1553766906468832, 0.15634155267631777, 0.15034811883075394, 0.15474012472998222, 0.1532711788919403, 0.16097610210222046, 0.16625883580365042, 0.15101890278564611, 0.1744596260332968, 0.19639294987250044, 0.1714587742187097, 0.2138754797724296, 0.23880373213856787, 0.2131581173045003, 0.14701861415816098, 0.1400217799639718, 0.2108136393488047, 0.18185292270407705, 0.19810250700899112, 0.19967876952637775, 0.22148888061729044, 0.13039897320272398, 0.19342762548154335, 0.1753224184332728, 0.176685597299007, 0.1720427706696681, 0.1753875303471667, 0.17884747081839691, 0.168512778742411, 0.1817083189677432, 0.1835426269421493, 0.18136901823625318, 0.05820767111603964, 0.06057662570058853, 0.05965286982143747, 0.06821789804450928, 0.05581464144208326, 0.055668182047281856, 0.044936634385860486, 0.043193487895727634, 0.055050783065843434]}, "mutation_prompt": null}
{"id": "b5fff8c4-6970-4420-9a69-7ed4082ff181", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowdingRefined:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Introduce a global best individual replacement with a low probability\n                    population[i] = best_solution\n\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODECrowdingRefined", "description": "Enhancing population diversity by incorporating a global best individual replacement strategy to improve convergence and exploration.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "18a4e093-b981-47eb-a8ff-d210eb8cf4e8", "metadata": {"aucs": [0.22222472422572026, 0.23185747722501093, 0.21518888291393934, 0.2060221762069826, 0.23250721835310695, 0.20569809735299882, 0.1852687933601287, 0.19049002171697593, 0.18587032247214963, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05210387318212584, 0.06280137465422486, 0.05989746313254296, 0.06537934781760923, 0.046729568683894995, 0.06261706182919502, 0.05515164192618138, 0.04919477821237428, 0.04965246149219782, 0.0465090860631584, 0.0525867308315352, 0.04020502183638619, 0.033445448115238974, 0.040339168355053356, 0.055085755261667924, 0.03838093273744658, 0.0331177531965654, 0.0393554465356456, 0.9516304189530465, 0.9639821141301906, 0.9585910919915419, 0.974877401735713, 0.8990285109174817, 0.9544870123564576, 0.9767492450522719, 0.9457828165882182, 0.9901779762421385, 0.1044860164393564, 0.10900805255512402, 0.1090190187081096, 0.08250057247805076, 0.09010468490437029, 0.08917288743919582, 0.15396526643018493, 0.08753942538537407, 0.0882830959271993, 0.12664701068377326, 0.14783299010609718, 0.11377035436472638, 0.15450546484582883, 0.11645102600590818, 0.1336340549196119, 0.1359715242954036, 0.12267708447016101, 0.16176776954488792, 0.020665229405694152, 0.004074245595052206, 0.02243356435883248, 0.03423422238108431, 0.041960137695352784, 0.03820279135339211, 0.004004826849064558, 0.024644793341057403, 0.006229852111806045, 0.028320146064779284, 0.01709091817354924, 0.029366939122533076, 0.01005390508516213, 0.03465179742808555, 0.05957195075091315, 0.05423394609936749, 0.009266436936472, 0.05266749188612796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05908227863916782, 0.07459128498608802, 0.07594799178208289, 0.056658750465173546, 0.04340824948745592, 0.027718954892656633, 0.05347122314495123, 0.06668646458224825, 0.0436342602530978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006265255653459256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000362286012766333, 0.006433899601909654, 0.23713614746695622, 0.22503826831313, 0.21124711952946196, 0.2023712383936207, 0.22360608707455554, 0.20909637487720933, 0.2128838255356995, 0.22036100597567287, 0.2146599590154733, 0.048256022836357104, 0.05525321358514501, 0.05869477991536043, 0.04338113006429356, 0.047162970984645836, 0.05824743470904992, 0.05965759728703757, 0.05117155666338935, 0.05744212842769725, 0.13022666051739185, 0.1590919500634671, 0.13165115925941573, 0.12634533025235173, 0.12829896318330358, 0.11992698544226355, 0.17074542752403266, 0.15220219016103165, 0.14141933808647333, 0.1712514150328458, 0.17394991950928307, 0.16562281783271848, 0.19203793458828533, 0.17009771213938474, 0.18634891721773406, 0.17085353667786463, 0.17377774300845283, 0.16996106846724102, 0.1429689763695342, 0.12925298908418514, 0.10870112375022023, 0.11937249106861547, 0.1415361467938837, 0.12410237660409806, 0.10306360502488465, 0.10749788199050547, 0.13075897175475404, 0.15896764105244565, 0.16967168406027122, 0.15366786040602487, 0.16151194849670591, 0.16489951484663035, 0.15784396956966573, 0.16613158858784394, 0.18863642257707136, 0.15699619293668599, 0.13552473303701262, 0.15860023659167732, 0.15407673529300514, 0.16695661424902009, 0.1553766906468832, 0.15634155267631777, 0.15034811883075394, 0.15474012472998222, 0.1532711788919403, 0.16097610210222046, 0.16625883580365042, 0.15101890278564611, 0.1744596260332968, 0.19639294987250044, 0.1714587742187097, 0.2138754797724296, 0.23880373213856787, 0.2131581173045003, 0.14701861415816098, 0.1400217799639718, 0.2108136393488047, 0.18185292270407705, 0.19810250700899112, 0.19967876952637775, 0.22148888061729044, 0.13039897320272398, 0.19342762548154335, 0.1753224184332728, 0.176685597299007, 0.1720427706696681, 0.1753875303471667, 0.17884747081839691, 0.168512778742411, 0.1817083189677432, 0.1835426269421493, 0.18136901823625318, 0.05820767111603964, 0.06057662570058853, 0.05965286982143747, 0.06821789804450928, 0.05581464144208326, 0.055668182047281856, 0.044936634385860486, 0.043193487895727634, 0.055050783065843434]}, "mutation_prompt": null}
{"id": "7b4359fe-1224-4b48-9541-b09ce8159f90", "solution": "import numpy as np\n\nclass EnhancedHybridPSODECrowdingRefined:\n    def __init__(self, budget, dim, pop_size=30, w=0.5, c1=1.5, c2=1.5, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.w = w\n        self.c1 = c1\n        self.c2 = c2\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n        self.mut_prob = 0.5\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        population = initialize_population()\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                r1, r2, r3 = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = population[r1] + self.f * (population[r2] - population[r3])\n                self.f = max(0.1, min(0.9, self.f + np.random.normal(0, self.adapt_rate)))\n                crossover = np.random.rand(self.dim) < self.cr\n                trial = np.where(crossover, mutant, population[i])\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n            # Introducing crowding distance selection mechanism for promoting population diversity\n            crowding_distances = np.zeros(self.pop_size)\n            for j in range(self.pop_size):\n                for k in range(self.pop_size):\n                    if j != k:\n                        crowding_distances[j] += np.linalg.norm(population[j] - population[k])\n            selection_probs = crowding_distances / np.sum(crowding_distances)\n            selected_idx = np.random.choice(np.arange(self.pop_size), p=selection_probs)\n            population[selected_idx] = best_solution  # Replace least crowded individual with the best solution\n\n            for i in range(self.pop_size):\n                if np.random.rand() < 0.1:  # Introduce a global best individual replacement with a low probability\n                    population[i] = best_solution\n\n                r1, r2 = np.random.choice(self.pop_size, 2, replace=False)\n                v = self.w * population[i] + self.c1 * np.random.rand(self.dim) * (best_solution - population[i]) + self.c2 * np.random.rand(self.dim) * (population[r1] - population[r2])\n                mutation_direction = np.random.choice([-1, 1], p=[self.mut_prob, 1 - self.mut_prob])\n                self.mut_prob = max(0.1, min(0.9, self.mut_prob + np.random.normal(0, self.adapt_rate)))  # Dynamically adjust mutation probability\n                population[i] = np.clip(v, -5.0, 5.0)\n\n        return best_solution", "name": "EnhancedHybridPSODECrowdingRefined", "description": "Enhancing population diversity by incorporating a global best individual replacement strategy to improve convergence and exploration.", "configspace": "", "generation": 90, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "18a4e093-b981-47eb-a8ff-d210eb8cf4e8", "metadata": {"aucs": [0.22222472422572026, 0.23185747722501093, 0.21518888291393934, 0.2060221762069826, 0.23250721835310695, 0.20569809735299882, 0.1852687933601287, 0.19049002171697593, 0.18587032247214963, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05210387318212584, 0.06280137465422486, 0.05989746313254296, 0.06537934781760923, 0.046729568683894995, 0.06261706182919502, 0.05515164192618138, 0.04919477821237428, 0.04965246149219782, 0.0465090860631584, 0.0525867308315352, 0.04020502183638619, 0.033445448115238974, 0.040339168355053356, 0.055085755261667924, 0.03838093273744658, 0.0331177531965654, 0.0393554465356456, 0.9516304189530465, 0.9639821141301906, 0.9585910919915419, 0.974877401735713, 0.8990285109174817, 0.9544870123564576, 0.9767492450522719, 0.9457828165882182, 0.9901779762421385, 0.1044860164393564, 0.10900805255512402, 0.1090190187081096, 0.08250057247805076, 0.09010468490437029, 0.08917288743919582, 0.15396526643018493, 0.08753942538537407, 0.0882830959271993, 0.12664701068377326, 0.14783299010609718, 0.11377035436472638, 0.15450546484582883, 0.11645102600590818, 0.1336340549196119, 0.1359715242954036, 0.12267708447016101, 0.16176776954488792, 0.020665229405694152, 0.004074245595052206, 0.02243356435883248, 0.03423422238108431, 0.041960137695352784, 0.03820279135339211, 0.004004826849064558, 0.024644793341057403, 0.006229852111806045, 0.028320146064779284, 0.01709091817354924, 0.029366939122533076, 0.01005390508516213, 0.03465179742808555, 0.05957195075091315, 0.05423394609936749, 0.009266436936472, 0.05266749188612796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05908227863916782, 0.07459128498608802, 0.07594799178208289, 0.056658750465173546, 0.04340824948745592, 0.027718954892656633, 0.05347122314495123, 0.06668646458224825, 0.0436342602530978, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006265255653459256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.000362286012766333, 0.006433899601909654, 0.23713614746695622, 0.22503826831313, 0.21124711952946196, 0.2023712383936207, 0.22360608707455554, 0.20909637487720933, 0.2128838255356995, 0.22036100597567287, 0.2146599590154733, 0.048256022836357104, 0.05525321358514501, 0.05869477991536043, 0.04338113006429356, 0.047162970984645836, 0.05824743470904992, 0.05965759728703757, 0.05117155666338935, 0.05744212842769725, 0.13022666051739185, 0.1590919500634671, 0.13165115925941573, 0.12634533025235173, 0.12829896318330358, 0.11992698544226355, 0.17074542752403266, 0.15220219016103165, 0.14141933808647333, 0.1712514150328458, 0.17394991950928307, 0.16562281783271848, 0.19203793458828533, 0.17009771213938474, 0.18634891721773406, 0.17085353667786463, 0.17377774300845283, 0.16996106846724102, 0.1429689763695342, 0.12925298908418514, 0.10870112375022023, 0.11937249106861547, 0.1415361467938837, 0.12410237660409806, 0.10306360502488465, 0.10749788199050547, 0.13075897175475404, 0.15896764105244565, 0.16967168406027122, 0.15366786040602487, 0.16151194849670591, 0.16489951484663035, 0.15784396956966573, 0.16613158858784394, 0.18863642257707136, 0.15699619293668599, 0.13552473303701262, 0.15860023659167732, 0.15407673529300514, 0.16695661424902009, 0.1553766906468832, 0.15634155267631777, 0.15034811883075394, 0.15474012472998222, 0.1532711788919403, 0.16097610210222046, 0.16625883580365042, 0.15101890278564611, 0.1744596260332968, 0.19639294987250044, 0.1714587742187097, 0.2138754797724296, 0.23880373213856787, 0.2131581173045003, 0.14701861415816098, 0.1400217799639718, 0.2108136393488047, 0.18185292270407705, 0.19810250700899112, 0.19967876952637775, 0.22148888061729044, 0.13039897320272398, 0.19342762548154335, 0.1753224184332728, 0.176685597299007, 0.1720427706696681, 0.1753875303471667, 0.17884747081839691, 0.168512778742411, 0.1817083189677432, 0.1835426269421493, 0.18136901823625318, 0.05820767111603964, 0.06057662570058853, 0.05965286982143747, 0.06821789804450928, 0.05581464144208326, 0.055668182047281856, 0.044936634385860486, 0.043193487895727634, 0.055050783065843434]}, "mutation_prompt": null}
